#include "function_cli.h"
#include <stdint.h>
#include "print_cli.h"
#include <stdlib.h>
#include "task_config_type.h"
#include "cli_type.h"
#include "stdio.h"
#include "main.h"

extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;


extern cli_command_t list_command[];

void update_task1(char **argv,uint8_t argv_num){
	//Update only if the parameter is not -1
	    HAL_TIM_Base_Stop_IT(&htim1);
	    HAL_TIM_Base_Stop_IT(&htim2);
	    HAL_TIM_Base_Stop_IT(&htim3);
	    HAL_TIM_Base_Stop_IT(&htim4);
	    htim1.Init.Period = atoi(argv[1]);
	    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
	    {
	        Error_Handler();
	    }
	    HAL_TIM_Base_Start_IT(&htim1);
	    HAL_TIM_Base_Start_IT(&htim2);
	    HAL_TIM_Base_Start_IT(&htim3);
	    HAL_TIM_Base_Start_IT(&htim4);
	    print_cli("update task1 successfully : %u\n",htim1.Init.Period);
	}
void update_task2(char **argv,uint8_t argv_num){
    HAL_TIM_Base_Stop_IT(&htim1);
    HAL_TIM_Base_Stop_IT(&htim2);
    HAL_TIM_Base_Stop_IT(&htim3);
    HAL_TIM_Base_Stop_IT(&htim4);
    htim1.Init.Period = atoi(argv[1]);
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
    {
        Error_Handler();
    }
    HAL_TIM_Base_Start_IT(&htim1);
    HAL_TIM_Base_Start_IT(&htim2);
    HAL_TIM_Base_Start_IT(&htim3);
    HAL_TIM_Base_Start_IT(&htim4);
    print_cli("update task1 successfully : %u\n",htim1.Init.Period);
}
void update_task3(char **argv,uint8_t argv_num){
    HAL_TIM_Base_Stop_IT(&htim1);
    HAL_TIM_Base_Stop_IT(&htim2);
    HAL_TIM_Base_Stop_IT(&htim3);
    HAL_TIM_Base_Stop_IT(&htim4);
    htim1.Init.Period = atoi(argv[1]);
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
    {
        Error_Handler();
    }
    HAL_TIM_Base_Start_IT(&htim1);
    HAL_TIM_Base_Start_IT(&htim2);
    HAL_TIM_Base_Start_IT(&htim3);
    HAL_TIM_Base_Start_IT(&htim4);
    print_cli("update task1 successfully : %u\n",htim1.Init.Period);
}
void update_task4(char **argv,uint8_t argv_num){
    HAL_TIM_Base_Stop_IT(&htim1);
    HAL_TIM_Base_Stop_IT(&htim2);
    HAL_TIM_Base_Stop_IT(&htim3);
    HAL_TIM_Base_Stop_IT(&htim4);
    htim1.Init.Period = atoi(argv[1]);
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
    {
        Error_Handler();
    }
    HAL_TIM_Base_Start_IT(&htim1);
    HAL_TIM_Base_Start_IT(&htim2);
    HAL_TIM_Base_Start_IT(&htim3);
    HAL_TIM_Base_Start_IT(&htim4);
    print_cli("update task1 successfully : %u\n",htim1.Init.Period);
}
void data_frame(char **argv,uint8_t argv_num){
	print_cli("task-id | perious");
}

void help(char **argv,uint8_t argv_num){
	uint8_t i = 0;
	while(list_command[i].help != NULL){
		print_cli("%s \n",list_command[i].help);
		i++;
	}
}

void info(char **argv,uint8_t argv_num){
	print_cli("The unit of time is seconds (s).\n");
}
