
ProjectV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfa0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b60  0800c140  0800c140  0000d140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cca0  0800cca0  0000e358  2**0
                  CONTENTS
  4 .ARM          00000008  0800cca0  0800cca0  0000dca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cca8  0800cca8  0000e358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cca8  0800cca8  0000dca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ccac  0800ccac  0000dcac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  0800ccb0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cd0  20000358  0800d008  0000e358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005028  0800d008  0000f028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e358  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179f7  00000000  00000000  0000e388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003938  00000000  00000000  00025d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  000296b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f71  00000000  00000000  0002aab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bd6  00000000  00000000  0002ba21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018460  00000000  00000000  000445f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094c92  00000000  00000000  0005ca57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f16e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006490  00000000  00000000  000f172c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000f7bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000358 	.word	0x20000358
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c128 	.word	0x0800c128

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000035c 	.word	0x2000035c
 80001dc:	0800c128 	.word	0x0800c128

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <Decimal2BCD>:
#define RTC_ADDRESS (0x68<<1) // do dia chi cua module ds3231 la 7 bit , bit 0 o cuoi la bit write
//cach 1
//extern I2C_HandleTypeDef hi2c1;
//cach 2
 static I2C_HandleTypeDef *ds_i2c; // bien static tuc la chi dung trong file nay
uint8_t Decimal2BCD(uint8_t num){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  return (num/10)<<4 | (num%10);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <Decimal2BCD+0x44>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	08db      	lsrs	r3, r3, #3
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	b258      	sxtb	r0, r3
 8000f62:	79fa      	ldrb	r2, [r7, #7]
 8000f64:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <Decimal2BCD+0x44>)
 8000f66:	fba3 1302 	umull	r1, r3, r3, r2
 8000f6a:	08d9      	lsrs	r1, r3, #3
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	4303      	orrs	r3, r0
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	b2db      	uxtb	r3, r3
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	cccccccd 	.word	0xcccccccd

08000f90 <BCD2Decimal>:
uint8_t BCD2Decimal(uint8_t num){
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  return (num>>4)*10 + (num&0x0F);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	4413      	add	r3, r2
 8000fb4:	b2db      	uxtb	r3, r3
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <rtc_write_time>:
// ghi du lieu
void rtc_write_time(DateTime *dt){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	6078      	str	r0, [r7, #4]
	uint8_t data[8];
	data[0]=0x00;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	723b      	strb	r3, [r7, #8]
	data[1]= Decimal2BCD(dt->sec);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	789b      	ldrb	r3, [r3, #2]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ffb7 	bl	8000f48 <Decimal2BCD>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	727b      	strb	r3, [r7, #9]
	data[2]= Decimal2BCD(dt->min);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	785b      	ldrb	r3, [r3, #1]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ffb0 	bl	8000f48 <Decimal2BCD>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	72bb      	strb	r3, [r7, #10]
	data[3]= Decimal2BCD(dt->hour);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ffa9 	bl	8000f48 <Decimal2BCD>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	72fb      	strb	r3, [r7, #11]
	data[4]= Decimal2BCD(dt->day);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	78db      	ldrb	r3, [r3, #3]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ffa2 	bl	8000f48 <Decimal2BCD>
 8001004:	4603      	mov	r3, r0
 8001006:	733b      	strb	r3, [r7, #12]
	data[5]= Decimal2BCD(dt->date);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	791b      	ldrb	r3, [r3, #4]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff9b 	bl	8000f48 <Decimal2BCD>
 8001012:	4603      	mov	r3, r0
 8001014:	737b      	strb	r3, [r7, #13]
	data[6]= Decimal2BCD(dt->mon);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	795b      	ldrb	r3, [r3, #5]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff94 	bl	8000f48 <Decimal2BCD>
 8001020:	4603      	mov	r3, r0
 8001022:	73bb      	strb	r3, [r7, #14]
	data[7]= Decimal2BCD(dt->year);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	799b      	ldrb	r3, [r3, #6]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff8d 	bl	8000f48 <Decimal2BCD>
 800102e:	4603      	mov	r3, r0
 8001030:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(ds_i2c,RTC_ADDRESS,data,8,100);
 8001032:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <rtc_write_time+0x8c>)
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	f107 0208 	add.w	r2, r7, #8
 800103a:	2364      	movs	r3, #100	@ 0x64
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2308      	movs	r3, #8
 8001040:	21d0      	movs	r1, #208	@ 0xd0
 8001042:	f002 fc63 	bl	800390c <HAL_I2C_Master_Transmit>
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000374 	.word	0x20000374

08001054 <rtc_read_time>:
// doc du lieu
void rtc_read_time(DateTime *dt){
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af02      	add	r7, sp, #8
 800105a:	6078      	str	r0, [r7, #4]
	uint8_t data[7];
	uint8_t add_reg=0x00; // dia chi cua thanh ghi cua slave ma master muon doc du lieu
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(ds_i2c,RTC_ADDRESS,&add_reg,1,100); // gui dia chi thanh ghi ma master muon doc du lieu
 8001060:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <rtc_read_time+0xac>)
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	f107 020f 	add.w	r2, r7, #15
 8001068:	2364      	movs	r3, #100	@ 0x64
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	21d0      	movs	r1, #208	@ 0xd0
 8001070:	f002 fc4c 	bl	800390c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ds_i2c,RTC_ADDRESS,data,7,100); // doc du lieu
 8001074:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <rtc_read_time+0xac>)
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	f107 0210 	add.w	r2, r7, #16
 800107c:	2364      	movs	r3, #100	@ 0x64
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2307      	movs	r3, #7
 8001082:	21d0      	movs	r1, #208	@ 0xd0
 8001084:	f002 fd40 	bl	8003b08 <HAL_I2C_Master_Receive>
	dt->sec= BCD2Decimal(data[0]);
 8001088:	7c3b      	ldrb	r3, [r7, #16]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ff80 	bl	8000f90 <BCD2Decimal>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	709a      	strb	r2, [r3, #2]
	dt->min= BCD2Decimal(data[1]);
 8001098:	7c7b      	ldrb	r3, [r7, #17]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff78 	bl	8000f90 <BCD2Decimal>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	705a      	strb	r2, [r3, #1]
	dt->hour= BCD2Decimal(data[2]);
 80010a8:	7cbb      	ldrb	r3, [r7, #18]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ff70 	bl	8000f90 <BCD2Decimal>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	701a      	strb	r2, [r3, #0]
	dt->day= BCD2Decimal(data[3]);
 80010b8:	7cfb      	ldrb	r3, [r7, #19]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff68 	bl	8000f90 <BCD2Decimal>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	70da      	strb	r2, [r3, #3]
	dt->date= BCD2Decimal(data[4]);
 80010c8:	7d3b      	ldrb	r3, [r7, #20]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff60 	bl	8000f90 <BCD2Decimal>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	711a      	strb	r2, [r3, #4]
	dt->mon= BCD2Decimal(data[5]);
 80010d8:	7d7b      	ldrb	r3, [r7, #21]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff58 	bl	8000f90 <BCD2Decimal>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	715a      	strb	r2, [r3, #5]
	dt->year= BCD2Decimal(data[6]);
 80010e8:	7dbb      	ldrb	r3, [r7, #22]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff50 	bl	8000f90 <BCD2Decimal>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	719a      	strb	r2, [r3, #6]
}
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000374 	.word	0x20000374

08001104 <rtc_init>:
	else if (data[1]==0x40) temperarate=0.25;
	else if(data[1]==0x80) temperarate=0.5;
	else temperarate=0.75;
	return data[0]+temperarate;
}
void rtc_init(I2C_HandleTypeDef *i2c){
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  ds_i2c=i2c;
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <rtc_init+0x1c>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6013      	str	r3, [r2, #0]
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000374 	.word	0x20000374

08001124 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af02      	add	r7, sp, #8
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f023 030f 	bic.w	r3, r3, #15
 8001134:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	f043 030c 	orr.w	r3, r3, #12
 8001142:	b2db      	uxtb	r3, r3
 8001144:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	b2db      	uxtb	r3, r3
 800114e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	f043 030c 	orr.w	r3, r3, #12
 8001156:	b2db      	uxtb	r3, r3
 8001158:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	b2db      	uxtb	r3, r3
 8001162:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001164:	f107 0208 	add.w	r2, r7, #8
 8001168:	2364      	movs	r3, #100	@ 0x64
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2304      	movs	r3, #4
 800116e:	214e      	movs	r1, #78	@ 0x4e
 8001170:	4803      	ldr	r0, [pc, #12]	@ (8001180 <lcd_send_cmd+0x5c>)
 8001172:	f002 fbcb 	bl	800390c <HAL_I2C_Master_Transmit>
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200003cc 	.word	0x200003cc

08001184 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f023 030f 	bic.w	r3, r3, #15
 8001194:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	f043 030d 	orr.w	r3, r3, #13
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	f043 0309 	orr.w	r3, r3, #9
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	f043 030d 	orr.w	r3, r3, #13
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 80011ba:	7bbb      	ldrb	r3, [r7, #14]
 80011bc:	f043 0309 	orr.w	r3, r3, #9
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011c4:	f107 0208 	add.w	r2, r7, #8
 80011c8:	2364      	movs	r3, #100	@ 0x64
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2304      	movs	r3, #4
 80011ce:	214e      	movs	r1, #78	@ 0x4e
 80011d0:	4803      	ldr	r0, [pc, #12]	@ (80011e0 <lcd_send_data+0x5c>)
 80011d2:	f002 fb9b 	bl	800390c <HAL_I2C_Master_Transmit>
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200003cc 	.word	0x200003cc

080011e4 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
    switch (row)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <lcd_put_cur+0x18>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d005      	beq.n	8001206 <lcd_put_cur+0x22>
 80011fa:	e009      	b.n	8001210 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001202:	603b      	str	r3, [r7, #0]
            break;
 8001204:	e004      	b.n	8001210 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800120c:	603b      	str	r3, [r7, #0]
            break;
 800120e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff85 	bl	8001124 <lcd_send_cmd>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <lcd_init>:


void lcd_init (void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001226:	2032      	movs	r0, #50	@ 0x32
 8001228:	f001 fee0 	bl	8002fec <HAL_Delay>
	lcd_send_cmd (0x30);
 800122c:	2030      	movs	r0, #48	@ 0x30
 800122e:	f7ff ff79 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001232:	2005      	movs	r0, #5
 8001234:	f001 feda 	bl	8002fec <HAL_Delay>
	lcd_send_cmd (0x30);
 8001238:	2030      	movs	r0, #48	@ 0x30
 800123a:	f7ff ff73 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800123e:	2001      	movs	r0, #1
 8001240:	f001 fed4 	bl	8002fec <HAL_Delay>
	lcd_send_cmd (0x30);
 8001244:	2030      	movs	r0, #48	@ 0x30
 8001246:	f7ff ff6d 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(10);
 800124a:	200a      	movs	r0, #10
 800124c:	f001 fece 	bl	8002fec <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001250:	2020      	movs	r0, #32
 8001252:	f7ff ff67 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(10);
 8001256:	200a      	movs	r0, #10
 8001258:	f001 fec8 	bl	8002fec <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800125c:	2028      	movs	r0, #40	@ 0x28
 800125e:	f7ff ff61 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(1);
 8001262:	2001      	movs	r0, #1
 8001264:	f001 fec2 	bl	8002fec <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001268:	2008      	movs	r0, #8
 800126a:	f7ff ff5b 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(1);
 800126e:	2001      	movs	r0, #1
 8001270:	f001 febc 	bl	8002fec <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff ff55 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f001 feb6 	bl	8002fec <HAL_Delay>
	HAL_Delay(1);
 8001280:	2001      	movs	r0, #1
 8001282:	f001 feb3 	bl	8002fec <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001286:	2006      	movs	r0, #6
 8001288:	f7ff ff4c 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(1);
 800128c:	2001      	movs	r0, #1
 800128e:	f001 fead 	bl	8002fec <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001292:	200c      	movs	r0, #12
 8001294:	f7ff ff46 	bl	8001124 <lcd_send_cmd>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80012a4:	e006      	b.n	80012b4 <lcd_send_string+0x18>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff68 	bl	8001184 <lcd_send_data>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f4      	bne.n	80012a6 <lcd_send_string+0xa>
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012cc:	f001 fe1c 	bl	8002f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d0:	f000 f8f6 	bl	80014c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d4:	f000 fa32 	bl	800173c <MX_GPIO_Init>
  MX_I2C1_Init();
 80012d8:	f000 f952 	bl	8001580 <MX_I2C1_Init>
  MX_I2C2_Init();
 80012dc:	f000 f97e 	bl	80015dc <MX_I2C2_Init>
  MX_I2C3_Init();
 80012e0:	f000 f9aa 	bl	8001638 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 80012e4:	f000 fa00 	bl	80016e8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80012e8:	f000 f9d4 	bl	8001694 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //Init SHT21, set resolution
  SHT2x_Init(&hi2c1);
 80012ec:	484d      	ldr	r0, [pc, #308]	@ (8001424 <main+0x15c>)
 80012ee:	f001 fa23 	bl	8002738 <SHT2x_Init>
  SHT2x_SetResolution(RES_14_12);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f001 fb06 	bl	8002904 <SHT2x_SetResolution>
  print_cli("Inited SHT21 successfully\n");
 80012f8:	484b      	ldr	r0, [pc, #300]	@ (8001428 <main+0x160>)
 80012fa:	f001 f9e5 	bl	80026c8 <print_cli>

  //Init LCD, set start time
  rtc_init(&hi2c3);
 80012fe:	484b      	ldr	r0, [pc, #300]	@ (800142c <main+0x164>)
 8001300:	f7ff ff00 	bl	8001104 <rtc_init>
  date_time.date = 20;
 8001304:	4b4a      	ldr	r3, [pc, #296]	@ (8001430 <main+0x168>)
 8001306:	2214      	movs	r2, #20
 8001308:	711a      	strb	r2, [r3, #4]
  date_time.day = 20;
 800130a:	4b49      	ldr	r3, [pc, #292]	@ (8001430 <main+0x168>)
 800130c:	2214      	movs	r2, #20
 800130e:	70da      	strb	r2, [r3, #3]
  date_time.hour = 10;
 8001310:	4b47      	ldr	r3, [pc, #284]	@ (8001430 <main+0x168>)
 8001312:	220a      	movs	r2, #10
 8001314:	701a      	strb	r2, [r3, #0]
  date_time.i2c = 02;
 8001316:	4b46      	ldr	r3, [pc, #280]	@ (8001430 <main+0x168>)
 8001318:	2202      	movs	r2, #2
 800131a:	609a      	str	r2, [r3, #8]
  date_time.min = 41;
 800131c:	4b44      	ldr	r3, [pc, #272]	@ (8001430 <main+0x168>)
 800131e:	2229      	movs	r2, #41	@ 0x29
 8001320:	705a      	strb	r2, [r3, #1]
  date_time.mon = 1;
 8001322:	4b43      	ldr	r3, [pc, #268]	@ (8001430 <main+0x168>)
 8001324:	2201      	movs	r2, #1
 8001326:	715a      	strb	r2, [r3, #5]
  date_time.sec = 12;
 8001328:	4b41      	ldr	r3, [pc, #260]	@ (8001430 <main+0x168>)
 800132a:	220c      	movs	r2, #12
 800132c:	709a      	strb	r2, [r3, #2]
  date_time.year = 25;
 800132e:	4b40      	ldr	r3, [pc, #256]	@ (8001430 <main+0x168>)
 8001330:	2219      	movs	r2, #25
 8001332:	719a      	strb	r2, [r3, #6]
  rtc_write_time(&date_time);
 8001334:	483e      	ldr	r0, [pc, #248]	@ (8001430 <main+0x168>)
 8001336:	f7ff fe45 	bl	8000fc4 <rtc_write_time>

  //Init lcd
  lcd_init();
 800133a:	f7ff ff72 	bl	8001222 <lcd_init>

  HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 800133e:	2201      	movs	r2, #1
 8001340:	493c      	ldr	r1, [pc, #240]	@ (8001434 <main+0x16c>)
 8001342:	483d      	ldr	r0, [pc, #244]	@ (8001438 <main+0x170>)
 8001344:	f003 fecb 	bl	80050de <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001348:	f004 fe78 	bl	800603c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 800134c:	4a3b      	ldr	r2, [pc, #236]	@ (800143c <main+0x174>)
 800134e:	2101      	movs	r1, #1
 8001350:	2001      	movs	r0, #1
 8001352:	f004 ffaf 	bl	80062b4 <osSemaphoreNew>
 8001356:	4603      	mov	r3, r0
 8001358:	4a39      	ldr	r2, [pc, #228]	@ (8001440 <main+0x178>)
 800135a:	6013      	str	r3, [r2, #0]

  /* creation of myBinarySem02 */
  myBinarySem02Handle = osSemaphoreNew(1, 1, &myBinarySem02_attributes);
 800135c:	4a39      	ldr	r2, [pc, #228]	@ (8001444 <main+0x17c>)
 800135e:	2101      	movs	r1, #1
 8001360:	2001      	movs	r0, #1
 8001362:	f004 ffa7 	bl	80062b4 <osSemaphoreNew>
 8001366:	4603      	mov	r3, r0
 8001368:	4a37      	ldr	r2, [pc, #220]	@ (8001448 <main+0x180>)
 800136a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (5, sizeof(float), &myQueue01_attributes);
 800136c:	4a37      	ldr	r2, [pc, #220]	@ (800144c <main+0x184>)
 800136e:	2104      	movs	r1, #4
 8001370:	2005      	movs	r0, #5
 8001372:	f005 f828 	bl	80063c6 <osMessageQueueNew>
 8001376:	4603      	mov	r3, r0
 8001378:	4a35      	ldr	r2, [pc, #212]	@ (8001450 <main+0x188>)
 800137a:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (5, sizeof(DateTime), &myQueue02_attributes);
 800137c:	4a35      	ldr	r2, [pc, #212]	@ (8001454 <main+0x18c>)
 800137e:	210c      	movs	r1, #12
 8001380:	2005      	movs	r0, #5
 8001382:	f005 f820 	bl	80063c6 <osMessageQueueNew>
 8001386:	4603      	mov	r3, r0
 8001388:	4a33      	ldr	r2, [pc, #204]	@ (8001458 <main+0x190>)
 800138a:	6013      	str	r3, [r2, #0]

  /* creation of myQueue03 */
  myQueue03Handle = osMessageQueueNew (16, sizeof(float), &myQueue03_attributes);
 800138c:	4a33      	ldr	r2, [pc, #204]	@ (800145c <main+0x194>)
 800138e:	2104      	movs	r1, #4
 8001390:	2010      	movs	r0, #16
 8001392:	f005 f818 	bl	80063c6 <osMessageQueueNew>
 8001396:	4603      	mov	r3, r0
 8001398:	4a31      	ldr	r2, [pc, #196]	@ (8001460 <main+0x198>)
 800139a:	6013      	str	r3, [r2, #0]

  /* creation of myQueue04 */
  myQueue04Handle = osMessageQueueNew (16, sizeof(uint8_t) * 15, &myQueue04_attributes);
 800139c:	4a31      	ldr	r2, [pc, #196]	@ (8001464 <main+0x19c>)
 800139e:	210f      	movs	r1, #15
 80013a0:	2010      	movs	r0, #16
 80013a2:	f005 f810 	bl	80063c6 <osMessageQueueNew>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001468 <main+0x1a0>)
 80013aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MeasureTemp */
  MeasureTempHandle = osThreadNew(StartDefaultTask, NULL, &MeasureTemp_attributes);
 80013ac:	4a2f      	ldr	r2, [pc, #188]	@ (800146c <main+0x1a4>)
 80013ae:	2100      	movs	r1, #0
 80013b0:	482f      	ldr	r0, [pc, #188]	@ (8001470 <main+0x1a8>)
 80013b2:	f004 fea2 	bl	80060fa <osThreadNew>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a2e      	ldr	r2, [pc, #184]	@ (8001474 <main+0x1ac>)
 80013ba:	6013      	str	r3, [r2, #0]

  /* creation of Realtime */
  RealtimeHandle = osThreadNew(StartTask02, NULL, &Realtime_attributes);
 80013bc:	4a2e      	ldr	r2, [pc, #184]	@ (8001478 <main+0x1b0>)
 80013be:	2100      	movs	r1, #0
 80013c0:	482e      	ldr	r0, [pc, #184]	@ (800147c <main+0x1b4>)
 80013c2:	f004 fe9a 	bl	80060fa <osThreadNew>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a2d      	ldr	r2, [pc, #180]	@ (8001480 <main+0x1b8>)
 80013ca:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTemp */
  DisplayTempHandle = osThreadNew(StartTask03, NULL, &DisplayTemp_attributes);
 80013cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001484 <main+0x1bc>)
 80013ce:	2100      	movs	r1, #0
 80013d0:	482d      	ldr	r0, [pc, #180]	@ (8001488 <main+0x1c0>)
 80013d2:	f004 fe92 	bl	80060fa <osThreadNew>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a2c      	ldr	r2, [pc, #176]	@ (800148c <main+0x1c4>)
 80013da:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTime */
  DisplayTimeHandle = osThreadNew(StartTask04, NULL, &DisplayTime_attributes);
 80013dc:	4a2c      	ldr	r2, [pc, #176]	@ (8001490 <main+0x1c8>)
 80013de:	2100      	movs	r1, #0
 80013e0:	482c      	ldr	r0, [pc, #176]	@ (8001494 <main+0x1cc>)
 80013e2:	f004 fe8a 	bl	80060fa <osThreadNew>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001498 <main+0x1d0>)
 80013ea:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 80013ec:	4a2b      	ldr	r2, [pc, #172]	@ (800149c <main+0x1d4>)
 80013ee:	2100      	movs	r1, #0
 80013f0:	482b      	ldr	r0, [pc, #172]	@ (80014a0 <main+0x1d8>)
 80013f2:	f004 fe82 	bl	80060fa <osThreadNew>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4a2a      	ldr	r2, [pc, #168]	@ (80014a4 <main+0x1dc>)
 80013fa:	6013      	str	r3, [r2, #0]

  /* creation of myTask06 */
  myTask06Handle = osThreadNew(StartTask06, NULL, &myTask06_attributes);
 80013fc:	4a2a      	ldr	r2, [pc, #168]	@ (80014a8 <main+0x1e0>)
 80013fe:	2100      	movs	r1, #0
 8001400:	482a      	ldr	r0, [pc, #168]	@ (80014ac <main+0x1e4>)
 8001402:	f004 fe7a 	bl	80060fa <osThreadNew>
 8001406:	4603      	mov	r3, r0
 8001408:	4a29      	ldr	r2, [pc, #164]	@ (80014b0 <main+0x1e8>)
 800140a:	6013      	str	r3, [r2, #0]

  /* creation of myTask07 */
  myTask07Handle = osThreadNew(StartTask07, NULL, &myTask07_attributes);
 800140c:	4a29      	ldr	r2, [pc, #164]	@ (80014b4 <main+0x1ec>)
 800140e:	2100      	movs	r1, #0
 8001410:	4829      	ldr	r0, [pc, #164]	@ (80014b8 <main+0x1f0>)
 8001412:	f004 fe72 	bl	80060fa <osThreadNew>
 8001416:	4603      	mov	r3, r0
 8001418:	4a28      	ldr	r2, [pc, #160]	@ (80014bc <main+0x1f4>)
 800141a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800141c:	f004 fe32 	bl	8006084 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <main+0x158>
 8001424:	20000378 	.word	0x20000378
 8001428:	0800c1e4 	.word	0x0800c1e4
 800142c:	20000420 	.word	0x20000420
 8001430:	20000538 	.word	0x20000538
 8001434:	2000057a 	.word	0x2000057a
 8001438:	20000474 	.word	0x20000474
 800143c:	0800c8f8 	.word	0x0800c8f8
 8001440:	20000530 	.word	0x20000530
 8001444:	0800c908 	.word	0x0800c908
 8001448:	20000534 	.word	0x20000534
 800144c:	0800c898 	.word	0x0800c898
 8001450:	20000520 	.word	0x20000520
 8001454:	0800c8b0 	.word	0x0800c8b0
 8001458:	20000524 	.word	0x20000524
 800145c:	0800c8c8 	.word	0x0800c8c8
 8001460:	20000528 	.word	0x20000528
 8001464:	0800c8e0 	.word	0x0800c8e0
 8001468:	2000052c 	.word	0x2000052c
 800146c:	0800c79c 	.word	0x0800c79c
 8001470:	08001a39 	.word	0x08001a39
 8001474:	20000504 	.word	0x20000504
 8001478:	0800c7c0 	.word	0x0800c7c0
 800147c:	08001bd9 	.word	0x08001bd9
 8001480:	20000508 	.word	0x20000508
 8001484:	0800c7e4 	.word	0x0800c7e4
 8001488:	08001cf9 	.word	0x08001cf9
 800148c:	2000050c 	.word	0x2000050c
 8001490:	0800c808 	.word	0x0800c808
 8001494:	08001ed1 	.word	0x08001ed1
 8001498:	20000510 	.word	0x20000510
 800149c:	0800c82c 	.word	0x0800c82c
 80014a0:	080020f1 	.word	0x080020f1
 80014a4:	20000514 	.word	0x20000514
 80014a8:	0800c850 	.word	0x0800c850
 80014ac:	080022ad 	.word	0x080022ad
 80014b0:	20000518 	.word	0x20000518
 80014b4:	0800c874 	.word	0x0800c874
 80014b8:	08002499 	.word	0x08002499
 80014bc:	2000051c 	.word	0x2000051c

080014c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b094      	sub	sp, #80	@ 0x50
 80014c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	f107 0320 	add.w	r3, r7, #32
 80014ca:	2230      	movs	r2, #48	@ 0x30
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f008 fdf4 	bl	800a0bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <SystemClock_Config+0xb8>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ec:	4a22      	ldr	r2, [pc, #136]	@ (8001578 <SystemClock_Config+0xb8>)
 80014ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f4:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <SystemClock_Config+0xb8>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <SystemClock_Config+0xbc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800150c:	4a1b      	ldr	r2, [pc, #108]	@ (800157c <SystemClock_Config+0xbc>)
 800150e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b19      	ldr	r3, [pc, #100]	@ (800157c <SystemClock_Config+0xbc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001520:	2302      	movs	r3, #2
 8001522:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001524:	2301      	movs	r3, #1
 8001526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001528:	2310      	movs	r3, #16
 800152a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800152c:	2300      	movs	r3, #0
 800152e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	4618      	mov	r0, r3
 8001536:	f003 f89f 	bl	8004678 <HAL_RCC_OscConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001540:	f001 f8bc 	bl	80026bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001544:	230f      	movs	r3, #15
 8001546:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f003 fb02 	bl	8004b68 <HAL_RCC_ClockConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800156a:	f001 f8a7 	bl	80026bc <Error_Handler>
  }
}
 800156e:	bf00      	nop
 8001570:	3750      	adds	r7, #80	@ 0x50
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40007000 	.word	0x40007000

08001580 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001584:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <MX_I2C1_Init+0x50>)
 8001586:	4a13      	ldr	r2, [pc, #76]	@ (80015d4 <MX_I2C1_Init+0x54>)
 8001588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <MX_I2C1_Init+0x50>)
 800158c:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <MX_I2C1_Init+0x58>)
 800158e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001590:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <MX_I2C1_Init+0x50>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <MX_I2C1_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <MX_I2C1_Init+0x50>)
 800159e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a4:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <MX_I2C1_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <MX_I2C1_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b0:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <MX_I2C1_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <MX_I2C1_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015bc:	4804      	ldr	r0, [pc, #16]	@ (80015d0 <MX_I2C1_Init+0x50>)
 80015be:	f002 f861 	bl	8003684 <HAL_I2C_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015c8:	f001 f878 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000378 	.word	0x20000378
 80015d4:	40005400 	.word	0x40005400
 80015d8:	000186a0 	.word	0x000186a0

080015dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015e0:	4b12      	ldr	r3, [pc, #72]	@ (800162c <MX_I2C2_Init+0x50>)
 80015e2:	4a13      	ldr	r2, [pc, #76]	@ (8001630 <MX_I2C2_Init+0x54>)
 80015e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <MX_I2C2_Init+0x50>)
 80015e8:	4a12      	ldr	r2, [pc, #72]	@ (8001634 <MX_I2C2_Init+0x58>)
 80015ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <MX_I2C2_Init+0x50>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <MX_I2C2_Init+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <MX_I2C2_Init+0x50>)
 80015fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001600:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <MX_I2C2_Init+0x50>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <MX_I2C2_Init+0x50>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800160c:	4b07      	ldr	r3, [pc, #28]	@ (800162c <MX_I2C2_Init+0x50>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <MX_I2C2_Init+0x50>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001618:	4804      	ldr	r0, [pc, #16]	@ (800162c <MX_I2C2_Init+0x50>)
 800161a:	f002 f833 	bl	8003684 <HAL_I2C_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001624:	f001 f84a 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200003cc 	.word	0x200003cc
 8001630:	40005800 	.word	0x40005800
 8001634:	000186a0 	.word	0x000186a0

08001638 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800163c:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <MX_I2C3_Init+0x50>)
 800163e:	4a13      	ldr	r2, [pc, #76]	@ (800168c <MX_I2C3_Init+0x54>)
 8001640:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <MX_I2C3_Init+0x50>)
 8001644:	4a12      	ldr	r2, [pc, #72]	@ (8001690 <MX_I2C3_Init+0x58>)
 8001646:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001648:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <MX_I2C3_Init+0x50>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <MX_I2C3_Init+0x50>)
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001654:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <MX_I2C3_Init+0x50>)
 8001656:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800165a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800165c:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <MX_I2C3_Init+0x50>)
 800165e:	2200      	movs	r2, #0
 8001660:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001662:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <MX_I2C3_Init+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001668:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <MX_I2C3_Init+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <MX_I2C3_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001674:	4804      	ldr	r0, [pc, #16]	@ (8001688 <MX_I2C3_Init+0x50>)
 8001676:	f002 f805 	bl	8003684 <HAL_I2C_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001680:	f001 f81c 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000420 	.word	0x20000420
 800168c:	40005c00 	.word	0x40005c00
 8001690:	000186a0 	.word	0x000186a0

08001694 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001698:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <MX_USART1_UART_Init+0x4c>)
 800169a:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <MX_USART1_UART_Init+0x50>)
 800169c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800169e:	4b10      	ldr	r3, [pc, #64]	@ (80016e0 <MX_USART1_UART_Init+0x4c>)
 80016a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <MX_USART1_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <MX_USART1_UART_Init+0x4c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	@ (80016e0 <MX_USART1_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <MX_USART1_UART_Init+0x4c>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <MX_USART1_UART_Init+0x4c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <MX_USART1_UART_Init+0x4c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ca:	4805      	ldr	r0, [pc, #20]	@ (80016e0 <MX_USART1_UART_Init+0x4c>)
 80016cc:	f003 fc2c 	bl	8004f28 <HAL_UART_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016d6:	f000 fff1 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000474 	.word	0x20000474
 80016e4:	40011000 	.word	0x40011000

080016e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016ec:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <MX_USART2_UART_Init+0x4c>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	@ (8001738 <MX_USART2_UART_Init+0x50>)
 80016f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016f2:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <MX_USART2_UART_Init+0x4c>)
 80016f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <MX_USART2_UART_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <MX_USART2_UART_Init+0x4c>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001706:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <MX_USART2_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800170c:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <MX_USART2_UART_Init+0x4c>)
 800170e:	220c      	movs	r2, #12
 8001710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001712:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <MX_USART2_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001718:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <MX_USART2_UART_Init+0x4c>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800171e:	4805      	ldr	r0, [pc, #20]	@ (8001734 <MX_USART2_UART_Init+0x4c>)
 8001720:	f003 fc02 	bl	8004f28 <HAL_UART_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800172a:	f000 ffc7 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200004bc 	.word	0x200004bc
 8001738:	40004400 	.word	0x40004400

0800173c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <MX_GPIO_Init+0x84>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	4a1d      	ldr	r2, [pc, #116]	@ (80017c0 <MX_GPIO_Init+0x84>)
 800174c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001750:	6313      	str	r3, [r2, #48]	@ 0x30
 8001752:	4b1b      	ldr	r3, [pc, #108]	@ (80017c0 <MX_GPIO_Init+0x84>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <MX_GPIO_Init+0x84>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a16      	ldr	r2, [pc, #88]	@ (80017c0 <MX_GPIO_Init+0x84>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <MX_GPIO_Init+0x84>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <MX_GPIO_Init+0x84>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a0f      	ldr	r2, [pc, #60]	@ (80017c0 <MX_GPIO_Init+0x84>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b0d      	ldr	r3, [pc, #52]	@ (80017c0 <MX_GPIO_Init+0x84>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <MX_GPIO_Init+0x84>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a08      	ldr	r2, [pc, #32]	@ (80017c0 <MX_GPIO_Init+0x84>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <MX_GPIO_Init+0x84>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800

080017c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {  // Thay USART1 bằng UART của bạn
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a17      	ldr	r2, [pc, #92]	@ (8001830 <HAL_UART_RxCpltCallback+0x6c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d128      	bne.n	8001828 <HAL_UART_RxCpltCallback+0x64>
        if (rx_byte == '\n') {       // Kiểm tra ký tự LF
 80017d6:	4b17      	ldr	r3, [pc, #92]	@ (8001834 <HAL_UART_RxCpltCallback+0x70>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b0a      	cmp	r3, #10
 80017dc:	d110      	bne.n	8001800 <HAL_UART_RxCpltCallback+0x3c>
            rx_buffer[rx_index] = '\0'; // Kết thúc chuỗi
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <HAL_UART_RxCpltCallback+0x74>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b15      	ldr	r3, [pc, #84]	@ (800183c <HAL_UART_RxCpltCallback+0x78>)
 80017e6:	2100      	movs	r1, #0
 80017e8:	5499      	strb	r1, [r3, r2]
            rx_index = 0;            // Reset index
 80017ea:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <HAL_UART_RxCpltCallback+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	801a      	strh	r2, [r3, #0]
			osMessageQueuePut(myQueue04Handle, &rx_buffer, 0U, 0U);
 80017f0:	4b13      	ldr	r3, [pc, #76]	@ (8001840 <HAL_UART_RxCpltCallback+0x7c>)
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	2300      	movs	r3, #0
 80017f6:	2200      	movs	r2, #0
 80017f8:	4910      	ldr	r1, [pc, #64]	@ (800183c <HAL_UART_RxCpltCallback+0x78>)
 80017fa:	f004 fe57 	bl	80064ac <osMessageQueuePut>
 80017fe:	e00e      	b.n	800181e <HAL_UART_RxCpltCallback+0x5a>
        }
         else {
            if (rx_index < RX_BUFFER_SIZE - 1) {
 8001800:	4b0d      	ldr	r3, [pc, #52]	@ (8001838 <HAL_UART_RxCpltCallback+0x74>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	2b1c      	cmp	r3, #28
 8001806:	d80a      	bhi.n	800181e <HAL_UART_RxCpltCallback+0x5a>
                rx_buffer[rx_index++] = rx_byte; // Lưu byte vào buffer
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <HAL_UART_RxCpltCallback+0x74>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	b291      	uxth	r1, r2
 8001810:	4a09      	ldr	r2, [pc, #36]	@ (8001838 <HAL_UART_RxCpltCallback+0x74>)
 8001812:	8011      	strh	r1, [r2, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b07      	ldr	r3, [pc, #28]	@ (8001834 <HAL_UART_RxCpltCallback+0x70>)
 8001818:	7819      	ldrb	r1, [r3, #0]
 800181a:	4b08      	ldr	r3, [pc, #32]	@ (800183c <HAL_UART_RxCpltCallback+0x78>)
 800181c:	5499      	strb	r1, [r3, r2]
            }
        }
        // Nhận tiếp byte mới
        HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 800181e:	2201      	movs	r2, #1
 8001820:	4904      	ldr	r1, [pc, #16]	@ (8001834 <HAL_UART_RxCpltCallback+0x70>)
 8001822:	4808      	ldr	r0, [pc, #32]	@ (8001844 <HAL_UART_RxCpltCallback+0x80>)
 8001824:	f003 fc5b 	bl	80050de <HAL_UART_Receive_IT>
    }
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40011000 	.word	0x40011000
 8001834:	2000057a 	.word	0x2000057a
 8001838:	2000057c 	.word	0x2000057c
 800183c:	2000055c 	.word	0x2000055c
 8001840:	2000052c 	.word	0x2000052c
 8001844:	20000474 	.word	0x20000474

08001848 <sort_tasks_by_period>:
// Hàm sắp xếp các task theo chu kỳ (tăng dần)
void sort_tasks_by_period(Task *tasks, int num_tasks) {
 8001848:	b4b0      	push	{r4, r5, r7}
 800184a:	b08d      	sub	sp, #52	@ 0x34
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < num_tasks - 1; i++) {
 8001852:	2300      	movs	r3, #0
 8001854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001856:	e043      	b.n	80018e0 <sort_tasks_by_period+0x98>
        for (int j = i + 1; j < num_tasks; j++) {
 8001858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185a:	3301      	adds	r3, #1
 800185c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800185e:	e038      	b.n	80018d2 <sort_tasks_by_period+0x8a>
            if ((tasks + i)->period > (tasks + j)->period) {
 8001860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001862:	015b      	lsls	r3, r3, #5
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	4413      	add	r3, r2
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800186c:	015b      	lsls	r3, r3, #5
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	440b      	add	r3, r1
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	dd29      	ble.n	80018cc <sort_tasks_by_period+0x84>
                // Hoán đổi task[i] và task[j]
                Task temp = *(tasks + i);
 8001878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800187a:	015b      	lsls	r3, r3, #5
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	4413      	add	r3, r2
 8001880:	f107 0408 	add.w	r4, r7, #8
 8001884:	461d      	mov	r5, r3
 8001886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800188a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800188e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                *(tasks + i) = *(tasks + j);
 8001892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001894:	015b      	lsls	r3, r3, #5
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	18d1      	adds	r1, r2, r3
 800189a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800189c:	015b      	lsls	r3, r3, #5
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	461c      	mov	r4, r3
 80018a4:	460d      	mov	r5, r1
 80018a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                *(tasks + j) = temp;
 80018b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b4:	015b      	lsls	r3, r3, #5
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	461d      	mov	r5, r3
 80018bc:	f107 0408 	add.w	r4, r7, #8
 80018c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018c8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        for (int j = i + 1; j < num_tasks; j++) {
 80018cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ce:	3301      	adds	r3, #1
 80018d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dbc2      	blt.n	8001860 <sort_tasks_by_period+0x18>
    for (int i = 0; i < num_tasks - 1; i++) {
 80018da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018dc:	3301      	adds	r3, #1
 80018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018e6:	429a      	cmp	r2, r3
 80018e8:	dbb6      	blt.n	8001858 <sort_tasks_by_period+0x10>
            }
        }
    }
}
 80018ea:	bf00      	nop
 80018ec:	bf00      	nop
 80018ee:	3734      	adds	r7, #52	@ 0x34
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bcb0      	pop	{r4, r5, r7}
 80018f4:	4770      	bx	lr

080018f6 <update_single_task_period>:

// Hàm cập nhật chu kỳ cho một task và điều chỉnh mức độ ưu tiên
void update_single_task_period(Task *tasks, int num_tasks, int task_id, int new_period) {
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	603b      	str	r3, [r7, #0]
    // Tìm task theo ID và cập nhật chu kỳ
    for (int i = 0; i < num_tasks; i++) {
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e026      	b.n	8001958 <update_single_task_period+0x62>
        if ((tasks + i)->id == task_id) {
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	015b      	lsls	r3, r3, #5
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4413      	add	r3, r2
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	429a      	cmp	r2, r3
 8001918:	d11b      	bne.n	8001952 <update_single_task_period+0x5c>
            if ((tasks + i)->period != new_period) {
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	015b      	lsls	r3, r3, #5
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4413      	add	r3, r2
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d00c      	beq.n	8001944 <update_single_task_period+0x4e>
                (tasks + i)->period = new_period;  // Cập nhật chu kỳ
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	015b      	lsls	r3, r3, #5
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	4413      	add	r3, r2
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	605a      	str	r2, [r3, #4]
                (tasks + i)->changed = true;       // Đánh dấu đã thay đổi
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	015b      	lsls	r3, r3, #5
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4413      	add	r3, r2
 800193e:	2201      	movs	r2, #1
 8001940:	771a      	strb	r2, [r3, #28]
            } else {
                (tasks + i)->changed = false;      // Không thay đổi
            }
            break;
 8001942:	e00d      	b.n	8001960 <update_single_task_period+0x6a>
                (tasks + i)->changed = false;      // Không thay đổi
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	015b      	lsls	r3, r3, #5
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	2200      	movs	r2, #0
 800194e:	771a      	strb	r2, [r3, #28]
            break;
 8001950:	e006      	b.n	8001960 <update_single_task_period+0x6a>
    for (int i = 0; i < num_tasks; i++) {
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	429a      	cmp	r2, r3
 800195e:	dbd4      	blt.n	800190a <update_single_task_period+0x14>
        }
    }

    // Sắp xếp lại các task theo chu kỳ
    sort_tasks_by_period(tasks, num_tasks);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f7ff ff70 	bl	8001848 <sort_tasks_by_period>

    // Cập nhật mức độ ưu tiên từ 29 đến 24
    for (int i = 0; i < num_tasks; i++) {
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	e00a      	b.n	8001984 <update_single_task_period+0x8e>
        (tasks + i)->priotity = 29 - i; // Gán mức độ ưu tiên
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	015b      	lsls	r3, r3, #5
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	4413      	add	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	f1c2 021d 	rsb	r2, r2, #29
 800197c:	611a      	str	r2, [r3, #16]
    for (int i = 0; i < num_tasks; i++) {
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	3301      	adds	r3, #1
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	429a      	cmp	r2, r3
 800198a:	dbf0      	blt.n	800196e <update_single_task_period+0x78>
    }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <updatePrevious>:
               (tasks + i)->deadline,
               (tasks + i)->priotity,
               (tasks + i)->changed ? "Yes" : "No");
    }
}
void updatePrevious(Task *previous, Task *current) {
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
    previous->period = current->period;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	605a      	str	r2, [r3, #4]
    previous->execTime = current->execTime;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	609a      	str	r2, [r3, #8]
    previous->deadline = current->deadline;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	60da      	str	r2, [r3, #12]
    previous->allPeriod = current->allPeriod;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	615a      	str	r2, [r3, #20]
    previous->priotity = current->priotity;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	691a      	ldr	r2, [r3, #16]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	611a      	str	r2, [r3, #16]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <detectChange>:
bool detectChange(Task *current, Task *previous){
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
    // So sánh từng trường
    if (current->period != previous->period ||
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d117      	bne.n	8001a1a <detectChange+0x46>
        current->execTime != previous->execTime ||
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
    if (current->period != previous->period ||
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d111      	bne.n	8001a1a <detectChange+0x46>
        current->deadline != previous->deadline ||
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
        current->execTime != previous->execTime ||
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d10b      	bne.n	8001a1a <detectChange+0x46>
        current->priotity != previous->priotity ||
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	691b      	ldr	r3, [r3, #16]
        current->deadline != previous->deadline ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d105      	bne.n	8001a1a <detectChange+0x46>
		current->allPeriod != previous->allPeriod) {
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	695b      	ldr	r3, [r3, #20]
        current->priotity != previous->priotity ||
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d004      	beq.n	8001a24 <detectChange+0x50>
        current->changed = true; // Đánh dấu thay đổi
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	771a      	strb	r2, [r3, #28]
        return true;             // Có thay đổi
 8001a20:	2301      	movs	r3, #1
 8001a22:	e003      	b.n	8001a2c <detectChange+0x58>
    }
    current->changed = false;    // Không có thay đổi
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	771a      	strb	r2, [r3, #28]
    return false;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//The parameters of task
	TickType_t lastWakeTime = osKernelGetTickCount();
 8001a40:	f004 fb46 	bl	80060d0 <osKernelGetTickCount>
 8001a44:	4603      	mov	r3, r0
 8001a46:	613b      	str	r3, [r7, #16]
	taskReadTempDeadline = lastWakeTime + pdMS_TO_TICKS(tasks[0].deadline);
 8001a48:	4b57      	ldr	r3, [pc, #348]	@ (8001ba8 <StartDefaultTask+0x170>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
 8001a56:	4a55      	ldr	r2, [pc, #340]	@ (8001bac <StartDefaultTask+0x174>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	099a      	lsrs	r2, r3, #6
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a53      	ldr	r2, [pc, #332]	@ (8001bb0 <StartDefaultTask+0x178>)
 8001a64:	6013      	str	r3, [r2, #0]
	float timeInSeconds;
	//union FloatToBytes dataSend;
  /* Infinite loop */
  for(;;)
  {
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001a66:	f004 fb33 	bl	80060d0 <osKernelGetTickCount>
 8001a6a:	ee07 0a90 	vmov	s15, r0
 8001a6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a72:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8001bb4 <StartDefaultTask+0x17c>
 8001a76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a7a:	edc7 7a05 	vstr	s15, [r7, #20]
	  print_cli("Thoi diem bat dau task do nhiet do: %.3f\n", timeInSeconds);
 8001a7e:	6978      	ldr	r0, [r7, #20]
 8001a80:	f7fe fd6a 	bl	8000558 <__aeabi_f2d>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	484b      	ldr	r0, [pc, #300]	@ (8001bb8 <StartDefaultTask+0x180>)
 8001a8a:	f000 fe1d 	bl	80026c8 <print_cli>
	  temp = SHT2x_GetTemperature(1);
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f000 feb2 	bl	80027f8 <SHT2x_GetTemperature>
 8001a94:	eef0 7a40 	vmov.f32	s15, s0
 8001a98:	edc7 7a03 	vstr	s15, [r7, #12]
	 // print_cli("Nhiet do la %.3f", temp);

	  if (osKernelGetTickCount() > taskReadTempDeadline)
 8001a9c:	f004 fb18 	bl	80060d0 <osKernelGetTickCount>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b43      	ldr	r3, [pc, #268]	@ (8001bb0 <StartDefaultTask+0x178>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d902      	bls.n	8001ab0 <StartDefaultTask+0x78>
	  {
		  print_cli("Task Read Temperature missed deadline\n");
 8001aaa:	4844      	ldr	r0, [pc, #272]	@ (8001bbc <StartDefaultTask+0x184>)
 8001aac:	f000 fe0c 	bl	80026c8 <print_cli>
	  }
	  if (detectChange(&tasks[0], &prev_tasks[0]))
 8001ab0:	4943      	ldr	r1, [pc, #268]	@ (8001bc0 <StartDefaultTask+0x188>)
 8001ab2:	483d      	ldr	r0, [pc, #244]	@ (8001ba8 <StartDefaultTask+0x170>)
 8001ab4:	f7ff ff8e 	bl	80019d4 <detectChange>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d045      	beq.n	8001b4a <StartDefaultTask+0x112>
		{
			if(tasks[0].deadline != prev_tasks[0].deadline)
 8001abe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba8 <StartDefaultTask+0x170>)
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc0 <StartDefaultTask+0x188>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d02a      	beq.n	8001b20 <StartDefaultTask+0xe8>
			{
				taskReadTempDeadline = taskReadTempDeadline + pdMS_TO_TICKS(tasks[0].period)
 8001aca:	4b37      	ldr	r3, [pc, #220]	@ (8001ba8 <StartDefaultTask+0x170>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ad4:	fb02 f303 	mul.w	r3, r2, r3
 8001ad8:	4a34      	ldr	r2, [pc, #208]	@ (8001bac <StartDefaultTask+0x174>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	099a      	lsrs	r2, r3, #6
 8001ae0:	4b33      	ldr	r3, [pc, #204]	@ (8001bb0 <StartDefaultTask+0x178>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	441a      	add	r2, r3
						- pdMS_TO_TICKS(prev_tasks[0].deadline) + pdMS_TO_TICKS(tasks[0].deadline);
 8001ae6:	4b36      	ldr	r3, [pc, #216]	@ (8001bc0 <StartDefaultTask+0x188>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	4619      	mov	r1, r3
 8001aec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001af0:	fb01 f303 	mul.w	r3, r1, r3
 8001af4:	492d      	ldr	r1, [pc, #180]	@ (8001bac <StartDefaultTask+0x174>)
 8001af6:	fba1 1303 	umull	r1, r3, r1, r3
 8001afa:	099b      	lsrs	r3, r3, #6
 8001afc:	1ad2      	subs	r2, r2, r3
 8001afe:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba8 <StartDefaultTask+0x170>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	4619      	mov	r1, r3
 8001b04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b08:	fb01 f303 	mul.w	r3, r1, r3
 8001b0c:	4927      	ldr	r1, [pc, #156]	@ (8001bac <StartDefaultTask+0x174>)
 8001b0e:	fba1 1303 	umull	r1, r3, r1, r3
 8001b12:	099b      	lsrs	r3, r3, #6
 8001b14:	4413      	add	r3, r2
				taskReadTempDeadline = taskReadTempDeadline + pdMS_TO_TICKS(tasks[0].period)
 8001b16:	4a26      	ldr	r2, [pc, #152]	@ (8001bb0 <StartDefaultTask+0x178>)
 8001b18:	6013      	str	r3, [r2, #0]
				print_cli("TASK 01 THAY DOI DEADLINE\n");
 8001b1a:	482a      	ldr	r0, [pc, #168]	@ (8001bc4 <StartDefaultTask+0x18c>)
 8001b1c:	f000 fdd4 	bl	80026c8 <print_cli>
			}
			if(tasks[0].priotity != prev_tasks[0].priotity)
 8001b20:	4b21      	ldr	r3, [pc, #132]	@ (8001ba8 <StartDefaultTask+0x170>)
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <StartDefaultTask+0x188>)
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d00a      	beq.n	8001b42 <StartDefaultTask+0x10a>
			{
				osThreadSetPriority(MeasureTempHandle, tasks[0].priotity);
 8001b2c:	4b26      	ldr	r3, [pc, #152]	@ (8001bc8 <StartDefaultTask+0x190>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a1d      	ldr	r2, [pc, #116]	@ (8001ba8 <StartDefaultTask+0x170>)
 8001b32:	6912      	ldr	r2, [r2, #16]
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 fb71 	bl	800621e <osThreadSetPriority>
				print_cli("TASK 01 THAY DOI MUC DO UU TIEN\n");
 8001b3c:	4823      	ldr	r0, [pc, #140]	@ (8001bcc <StartDefaultTask+0x194>)
 8001b3e:	f000 fdc3 	bl	80026c8 <print_cli>
			}
			// Cập nhật giá trị trước đó
			updatePrevious(&prev_tasks[0], &tasks[0]);
 8001b42:	4919      	ldr	r1, [pc, #100]	@ (8001ba8 <StartDefaultTask+0x170>)
 8001b44:	481e      	ldr	r0, [pc, #120]	@ (8001bc0 <StartDefaultTask+0x188>)
 8001b46:	f7ff ff26 	bl	8001996 <updatePrevious>
		 }

	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001b4a:	f004 fac1 	bl	80060d0 <osKernelGetTickCount>
 8001b4e:	ee07 0a90 	vmov	s15, r0
 8001b52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b56:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001bb4 <StartDefaultTask+0x17c>
 8001b5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b5e:	edc7 7a05 	vstr	s15, [r7, #20]
	  print_cli("Thoi diem ket thuc task do nhiet do: %.3f\n", timeInSeconds);
 8001b62:	6978      	ldr	r0, [r7, #20]
 8001b64:	f7fe fcf8 	bl	8000558 <__aeabi_f2d>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4818      	ldr	r0, [pc, #96]	@ (8001bd0 <StartDefaultTask+0x198>)
 8001b6e:	f000 fdab 	bl	80026c8 <print_cli>
	  osMessageQueuePut(myQueue01Handle, &temp, 0U, 0U);
 8001b72:	4b18      	ldr	r3, [pc, #96]	@ (8001bd4 <StartDefaultTask+0x19c>)
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	f107 010c 	add.w	r1, r7, #12
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f004 fc95 	bl	80064ac <osMessageQueuePut>
	  vTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(tasks[0].period));
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <StartDefaultTask+0x170>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	461a      	mov	r2, r3
 8001b88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8c:	fb02 f303 	mul.w	r3, r2, r3
 8001b90:	4a06      	ldr	r2, [pc, #24]	@ (8001bac <StartDefaultTask+0x174>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	099a      	lsrs	r2, r3, #6
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f005 fe44 	bl	800782c <vTaskDelayUntil>
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001ba4:	e75f      	b.n	8001a66 <StartDefaultTask+0x2e>
 8001ba6:	bf00      	nop
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	10624dd3 	.word	0x10624dd3
 8001bb0:	20000544 	.word	0x20000544
 8001bb4:	447a0000 	.word	0x447a0000
 8001bb8:	0800c250 	.word	0x0800c250
 8001bbc:	0800c27c 	.word	0x0800c27c
 8001bc0:	200000c0 	.word	0x200000c0
 8001bc4:	0800c2a4 	.word	0x0800c2a4
 8001bc8:	20000504 	.word	0x20000504
 8001bcc:	0800c2c0 	.word	0x0800c2c0
 8001bd0:	0800c2e4 	.word	0x0800c2e4
 8001bd4:	20000520 	.word	0x20000520

08001bd8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	TickType_t lastWakeTime = osKernelGetTickCount();
 8001be0:	f004 fa76 	bl	80060d0 <osKernelGetTickCount>
 8001be4:	4603      	mov	r3, r0
 8001be6:	61bb      	str	r3, [r7, #24]
	taskReadTimeDeadline = lastWakeTime + pdMS_TO_TICKS(tasks[1].deadline);
 8001be8:	4b39      	ldr	r3, [pc, #228]	@ (8001cd0 <StartTask02+0xf8>)
 8001bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bec:	461a      	mov	r2, r3
 8001bee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	4a37      	ldr	r2, [pc, #220]	@ (8001cd4 <StartTask02+0xfc>)
 8001bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfc:	099a      	lsrs	r2, r3, #6
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a35      	ldr	r2, [pc, #212]	@ (8001cd8 <StartTask02+0x100>)
 8001c04:	6013      	str	r3, [r2, #0]
	DateTime dateTimeSend;
	float timeInSeconds;
  /* Infinite loop */
  for(;;)
  {
	timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001c06:	f004 fa63 	bl	80060d0 <osKernelGetTickCount>
 8001c0a:	ee07 0a90 	vmov	s15, r0
 8001c0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c12:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8001cdc <StartTask02+0x104>
 8001c16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c1a:	edc7 7a07 	vstr	s15, [r7, #28]
	print_cli("Thoi diem bat dau task do thoi gian: %.3f\n", timeInSeconds);
 8001c1e:	69f8      	ldr	r0, [r7, #28]
 8001c20:	f7fe fc9a 	bl	8000558 <__aeabi_f2d>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	482d      	ldr	r0, [pc, #180]	@ (8001ce0 <StartTask02+0x108>)
 8001c2a:	f000 fd4d 	bl	80026c8 <print_cli>
	rtc_read_time(&dateTimeSend);
 8001c2e:	f107 030c 	add.w	r3, r7, #12
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fa0e 	bl	8001054 <rtc_read_time>

	//Check Deadline
	if (osKernelGetTickCount() > taskReadTimeDeadline)
 8001c38:	f004 fa4a 	bl	80060d0 <osKernelGetTickCount>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b26      	ldr	r3, [pc, #152]	@ (8001cd8 <StartTask02+0x100>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d902      	bls.n	8001c4c <StartTask02+0x74>
	{
		print_cli("Task Read Time missed deadline\n");
 8001c46:	4827      	ldr	r0, [pc, #156]	@ (8001ce4 <StartTask02+0x10c>)
 8001c48:	f000 fd3e 	bl	80026c8 <print_cli>
	}
	if (detectChange(&tasks[1], &prev_tasks[1]))
 8001c4c:	4926      	ldr	r1, [pc, #152]	@ (8001ce8 <StartTask02+0x110>)
 8001c4e:	4827      	ldr	r0, [pc, #156]	@ (8001cec <StartTask02+0x114>)
 8001c50:	f7ff fec0 	bl	80019d4 <detectChange>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <StartTask02+0x8a>
		if(tasks[1].priotity != tasks[1].priotity)
		{
			osThreadSetPriority(RealtimeHandle, tasks[1].priotity);
			print_cli("TASK 2 THAY DOI MUC DO UU TIEN\n");
		}
		updatePrevious(&prev_tasks[1], &tasks[1]);
 8001c5a:	4924      	ldr	r1, [pc, #144]	@ (8001cec <StartTask02+0x114>)
 8001c5c:	4822      	ldr	r0, [pc, #136]	@ (8001ce8 <StartTask02+0x110>)
 8001c5e:	f7ff fe9a 	bl	8001996 <updatePrevious>
	 }
	timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001c62:	f004 fa35 	bl	80060d0 <osKernelGetTickCount>
 8001c66:	ee07 0a90 	vmov	s15, r0
 8001c6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c6e:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001cdc <StartTask02+0x104>
 8001c72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c76:	edc7 7a07 	vstr	s15, [r7, #28]
	print_cli("Thoi diem ket thuc task do thoi gian: %.3f\n", timeInSeconds);
 8001c7a:	69f8      	ldr	r0, [r7, #28]
 8001c7c:	f7fe fc6c 	bl	8000558 <__aeabi_f2d>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	481a      	ldr	r0, [pc, #104]	@ (8001cf0 <StartTask02+0x118>)
 8001c86:	f000 fd1f 	bl	80026c8 <print_cli>
	osMessageQueuePut(myQueue02Handle, &dateTimeSend, 0U, 0U);
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <StartTask02+0x11c>)
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	f107 010c 	add.w	r1, r7, #12
 8001c92:	2300      	movs	r3, #0
 8001c94:	2200      	movs	r2, #0
 8001c96:	f004 fc09 	bl	80064ac <osMessageQueuePut>
	//Delay until next period
	vTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(pdMS_TO_TICKS(tasks[1].period)));
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <StartTask02+0xf8>)
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca4:	fb02 f303 	mul.w	r3, r2, r3
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <StartTask02+0xfc>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	099b      	lsrs	r3, r3, #6
 8001cb0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001cb4:	fb02 f303 	mul.w	r3, r2, r3
 8001cb8:	4a06      	ldr	r2, [pc, #24]	@ (8001cd4 <StartTask02+0xfc>)
 8001cba:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbe:	099a      	lsrs	r2, r3, #6
 8001cc0:	f107 0318 	add.w	r3, r7, #24
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f005 fdb0 	bl	800782c <vTaskDelayUntil>
	timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001ccc:	e79b      	b.n	8001c06 <StartTask02+0x2e>
 8001cce:	bf00      	nop
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	10624dd3 	.word	0x10624dd3
 8001cd8:	20000548 	.word	0x20000548
 8001cdc:	447a0000 	.word	0x447a0000
 8001ce0:	0800c310 	.word	0x0800c310
 8001ce4:	0800c33c 	.word	0x0800c33c
 8001ce8:	200000e0 	.word	0x200000e0
 8001cec:	20000020 	.word	0x20000020
 8001cf0:	0800c35c 	.word	0x0800c35c
 8001cf4:	20000524 	.word	0x20000524

08001cf8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	TickType_t lastWakeTime = osKernelGetTickCount();
 8001d00:	f004 f9e6 	bl	80060d0 <osKernelGetTickCount>
 8001d04:	4603      	mov	r3, r0
 8001d06:	61bb      	str	r3, [r7, #24]
	taskDisplayTempDeadline = lastWakeTime + pdMS_TO_TICKS(tasks[2].deadline);
 8001d08:	4b61      	ldr	r3, [pc, #388]	@ (8001e90 <StartTask03+0x198>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	4a5f      	ldr	r2, [pc, #380]	@ (8001e94 <StartTask03+0x19c>)
 8001d18:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1c:	099a      	lsrs	r2, r3, #6
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a5d      	ldr	r2, [pc, #372]	@ (8001e98 <StartTask03+0x1a0>)
 8001d24:	6013      	str	r3, [r2, #0]
	char temStr[6];
	float timeInSeconds;
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(myQueue01Handle, &tempRecv, NULL, osWaitForever);
 8001d26:	4b5d      	ldr	r3, [pc, #372]	@ (8001e9c <StartTask03+0x1a4>)
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	f107 0114 	add.w	r1, r7, #20
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d32:	2200      	movs	r2, #0
 8001d34:	f004 fc1a 	bl	800656c <osMessageQueueGet>
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001d38:	f004 f9ca 	bl	80060d0 <osKernelGetTickCount>
 8001d3c:	ee07 0a90 	vmov	s15, r0
 8001d40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d44:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8001ea0 <StartTask03+0x1a8>
 8001d48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d4c:	edc7 7a07 	vstr	s15, [r7, #28]
	  print_cli("Thoi diem bat dau task send nhiet do: %.3f\n", timeInSeconds);
 8001d50:	69f8      	ldr	r0, [r7, #28]
 8001d52:	f7fe fc01 	bl	8000558 <__aeabi_f2d>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4852      	ldr	r0, [pc, #328]	@ (8001ea4 <StartTask03+0x1ac>)
 8001d5c:	f000 fcb4 	bl	80026c8 <print_cli>
	  sprintf(temStr, "T:%.3f", tempRecv);
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fbf8 	bl	8000558 <__aeabi_f2d>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	f107 000c 	add.w	r0, r7, #12
 8001d70:	494d      	ldr	r1, [pc, #308]	@ (8001ea8 <StartTask03+0x1b0>)
 8001d72:	f008 f873 	bl	8009e5c <siprintf>
	  print_cli("%s", temStr);
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	484b      	ldr	r0, [pc, #300]	@ (8001eac <StartTask03+0x1b4>)
 8001d7e:	f000 fca3 	bl	80026c8 <print_cli>
	  lcd_put_cur(0, 9);
 8001d82:	2109      	movs	r1, #9
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff fa2d 	bl	80011e4 <lcd_put_cur>
	  lcd_send_string(&temStr);
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fa84 	bl	800129c <lcd_send_string>
	  	// Check deadline
		if (xTaskGetTickCount() > taskDisplayTempDeadline) {
 8001d94:	f005 ff7c 	bl	8007c90 <xTaskGetTickCount>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e98 <StartTask03+0x1a0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d902      	bls.n	8001da8 <StartTask03+0xb0>
			print_cli("Task Display Temperature missed deadline\n");
 8001da2:	4843      	ldr	r0, [pc, #268]	@ (8001eb0 <StartTask03+0x1b8>)
 8001da4:	f000 fc90 	bl	80026c8 <print_cli>
		}
		if (detectChange(&tasks[2], &prev_tasks[2]))
 8001da8:	4942      	ldr	r1, [pc, #264]	@ (8001eb4 <StartTask03+0x1bc>)
 8001daa:	4843      	ldr	r0, [pc, #268]	@ (8001eb8 <StartTask03+0x1c0>)
 8001dac:	f7ff fe12 	bl	80019d4 <detectChange>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d045      	beq.n	8001e42 <StartTask03+0x14a>
		{
			if(tasks[2].deadline != prev_tasks[2].deadline)
 8001db6:	4b36      	ldr	r3, [pc, #216]	@ (8001e90 <StartTask03+0x198>)
 8001db8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001dba:	4b40      	ldr	r3, [pc, #256]	@ (8001ebc <StartTask03+0x1c4>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d02a      	beq.n	8001e18 <StartTask03+0x120>
			{
				taskDisplayTempDeadline = taskDisplayTempDeadline + pdMS_TO_TICKS(tasks[2].period)
 8001dc2:	4b33      	ldr	r3, [pc, #204]	@ (8001e90 <StartTask03+0x198>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dcc:	fb02 f303 	mul.w	r3, r2, r3
 8001dd0:	4a30      	ldr	r2, [pc, #192]	@ (8001e94 <StartTask03+0x19c>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	099a      	lsrs	r2, r3, #6
 8001dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e98 <StartTask03+0x1a0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	441a      	add	r2, r3
									- pdMS_TO_TICKS(prev_tasks[2].deadline) + pdMS_TO_TICKS(tasks[2].deadline);
 8001dde:	4b37      	ldr	r3, [pc, #220]	@ (8001ebc <StartTask03+0x1c4>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de2:	4619      	mov	r1, r3
 8001de4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001de8:	fb01 f303 	mul.w	r3, r1, r3
 8001dec:	4929      	ldr	r1, [pc, #164]	@ (8001e94 <StartTask03+0x19c>)
 8001dee:	fba1 1303 	umull	r1, r3, r1, r3
 8001df2:	099b      	lsrs	r3, r3, #6
 8001df4:	1ad2      	subs	r2, r2, r3
 8001df6:	4b26      	ldr	r3, [pc, #152]	@ (8001e90 <StartTask03+0x198>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4923      	ldr	r1, [pc, #140]	@ (8001e94 <StartTask03+0x19c>)
 8001e06:	fba1 1303 	umull	r1, r3, r1, r3
 8001e0a:	099b      	lsrs	r3, r3, #6
 8001e0c:	4413      	add	r3, r2
				taskDisplayTempDeadline = taskDisplayTempDeadline + pdMS_TO_TICKS(tasks[2].period)
 8001e0e:	4a22      	ldr	r2, [pc, #136]	@ (8001e98 <StartTask03+0x1a0>)
 8001e10:	6013      	str	r3, [r2, #0]
				print_cli("TASK 3 THAY DOI DEADLINE\n");
 8001e12:	482b      	ldr	r0, [pc, #172]	@ (8001ec0 <StartTask03+0x1c8>)
 8001e14:	f000 fc58 	bl	80026c8 <print_cli>
			}
			if(tasks[2].priotity != prev_tasks[2].priotity)
 8001e18:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <StartTask03+0x198>)
 8001e1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e1c:	4b27      	ldr	r3, [pc, #156]	@ (8001ebc <StartTask03+0x1c4>)
 8001e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d00a      	beq.n	8001e3a <StartTask03+0x142>
			{
				osThreadSetPriority(DisplayTempHandle, tasks[2].priotity);
 8001e24:	4b27      	ldr	r3, [pc, #156]	@ (8001ec4 <StartTask03+0x1cc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a19      	ldr	r2, [pc, #100]	@ (8001e90 <StartTask03+0x198>)
 8001e2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f004 f9f5 	bl	800621e <osThreadSetPriority>
				print_cli("TASK 3 THAY DOI MUC DO UU TIEN\n");
 8001e34:	4824      	ldr	r0, [pc, #144]	@ (8001ec8 <StartTask03+0x1d0>)
 8001e36:	f000 fc47 	bl	80026c8 <print_cli>
			}
			// Cập nhật giá trị trước đó
			updatePrevious(&prev_tasks[2], &tasks[2]);
 8001e3a:	491f      	ldr	r1, [pc, #124]	@ (8001eb8 <StartTask03+0x1c0>)
 8001e3c:	481d      	ldr	r0, [pc, #116]	@ (8001eb4 <StartTask03+0x1bc>)
 8001e3e:	f7ff fdaa 	bl	8001996 <updatePrevious>
		 }
		timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001e42:	f004 f945 	bl	80060d0 <osKernelGetTickCount>
 8001e46:	ee07 0a90 	vmov	s15, r0
 8001e4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e4e:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001ea0 <StartTask03+0x1a8>
 8001e52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e56:	edc7 7a07 	vstr	s15, [r7, #28]
		print_cli("Thoi diem ket thuc task send nhiet do: %.3f\n", timeInSeconds);
 8001e5a:	69f8      	ldr	r0, [r7, #28]
 8001e5c:	f7fe fb7c 	bl	8000558 <__aeabi_f2d>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4819      	ldr	r0, [pc, #100]	@ (8001ecc <StartTask03+0x1d4>)
 8001e66:	f000 fc2f 	bl	80026c8 <print_cli>
		// Delay until next period
		vTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(tasks[2].period));
 8001e6a:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <StartTask03+0x198>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	461a      	mov	r2, r3
 8001e70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	4a06      	ldr	r2, [pc, #24]	@ (8001e94 <StartTask03+0x19c>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	099a      	lsrs	r2, r3, #6
 8001e80:	f107 0318 	add.w	r3, r7, #24
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f005 fcd0 	bl	800782c <vTaskDelayUntil>
	  osMessageQueueGet(myQueue01Handle, &tempRecv, NULL, osWaitForever);
 8001e8c:	e74b      	b.n	8001d26 <StartTask03+0x2e>
 8001e8e:	bf00      	nop
 8001e90:	20000000 	.word	0x20000000
 8001e94:	10624dd3 	.word	0x10624dd3
 8001e98:	2000054c 	.word	0x2000054c
 8001e9c:	20000520 	.word	0x20000520
 8001ea0:	447a0000 	.word	0x447a0000
 8001ea4:	0800c388 	.word	0x0800c388
 8001ea8:	0800c3b4 	.word	0x0800c3b4
 8001eac:	0800c3bc 	.word	0x0800c3bc
 8001eb0:	0800c3c0 	.word	0x0800c3c0
 8001eb4:	20000100 	.word	0x20000100
 8001eb8:	20000040 	.word	0x20000040
 8001ebc:	200000c0 	.word	0x200000c0
 8001ec0:	0800c3ec 	.word	0x0800c3ec
 8001ec4:	2000050c 	.word	0x2000050c
 8001ec8:	0800c408 	.word	0x0800c408
 8001ecc:	0800c428 	.word	0x0800c428

08001ed0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b090      	sub	sp, #64	@ 0x40
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	TickType_t lastWakeTime = osKernelGetTickCount();
 8001ed8:	f004 f8fa 	bl	80060d0 <osKernelGetTickCount>
 8001edc:	4603      	mov	r3, r0
 8001ede:	633b      	str	r3, [r7, #48]	@ 0x30
	taskDisplayTimeDeadline = lastWakeTime + pdMS_TO_TICKS(tasks[3].deadline);
 8001ee0:	4b71      	ldr	r3, [pc, #452]	@ (80020a8 <StartTask04+0x1d8>)
 8001ee2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	4a6f      	ldr	r2, [pc, #444]	@ (80020ac <StartTask04+0x1dc>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	099a      	lsrs	r2, r3, #6
 8001ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a6d      	ldr	r2, [pc, #436]	@ (80020b0 <StartTask04+0x1e0>)
 8001efc:	6013      	str	r3, [r2, #0]
	char timeStrDay[10];
	float timeInSeconds;
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(myQueue02Handle, &dateTimeRecv, NULL, osWaitForever);
 8001efe:	4b6d      	ldr	r3, [pc, #436]	@ (80020b4 <StartTask04+0x1e4>)
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f004 fb2e 	bl	800656c <osMessageQueueGet>
	  print_cli("Bat dau task display time\n");
 8001f10:	4869      	ldr	r0, [pc, #420]	@ (80020b8 <StartTask04+0x1e8>)
 8001f12:	f000 fbd9 	bl	80026c8 <print_cli>
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001f16:	f004 f8db 	bl	80060d0 <osKernelGetTickCount>
 8001f1a:	ee07 0a90 	vmov	s15, r0
 8001f1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f22:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80020bc <StartTask04+0x1ec>
 8001f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	  print_cli("Thoi diem bat dau task send thoi gian: %.3f\n", timeInSeconds);
 8001f2e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001f30:	f7fe fb12 	bl	8000558 <__aeabi_f2d>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4861      	ldr	r0, [pc, #388]	@ (80020c0 <StartTask04+0x1f0>)
 8001f3a:	f000 fbc5 	bl	80026c8 <print_cli>
	  sprintf(timeStrTime, "%02d:%02d:%02d", dateTimeRecv.hour, dateTimeRecv.min, dateTimeRecv.sec);
 8001f3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f42:	461a      	mov	r2, r3
 8001f44:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f4e:	f107 0018 	add.w	r0, r7, #24
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	460b      	mov	r3, r1
 8001f56:	495b      	ldr	r1, [pc, #364]	@ (80020c4 <StartTask04+0x1f4>)
 8001f58:	f007 ff80 	bl	8009e5c <siprintf>
	  sprintf(timeStrDay, "%02d/%02d/20%02d", dateTimeRecv.day, dateTimeRecv.mon, dateTimeRecv.year);
 8001f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f60:	461a      	mov	r2, r3
 8001f62:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001f66:	4619      	mov	r1, r3
 8001f68:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001f6c:	f107 000c 	add.w	r0, r7, #12
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	460b      	mov	r3, r1
 8001f74:	4954      	ldr	r1, [pc, #336]	@ (80020c8 <StartTask04+0x1f8>)
 8001f76:	f007 ff71 	bl	8009e5c <siprintf>
	  lcd_put_cur(0, 0);
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7ff f931 	bl	80011e4 <lcd_put_cur>
	  lcd_send_string(&timeStrTime);
 8001f82:	f107 0318 	add.w	r3, r7, #24
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff f988 	bl	800129c <lcd_send_string>
	  print_cli("Current time: %s \nDay: %s\n", timeStrTime, timeStrDay);
 8001f8c:	f107 020c 	add.w	r2, r7, #12
 8001f90:	f107 0318 	add.w	r3, r7, #24
 8001f94:	4619      	mov	r1, r3
 8001f96:	484d      	ldr	r0, [pc, #308]	@ (80020cc <StartTask04+0x1fc>)
 8001f98:	f000 fb96 	bl	80026c8 <print_cli>
	  lcd_put_cur(1, 0);
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f7ff f920 	bl	80011e4 <lcd_put_cur>
	  lcd_send_string(&timeStrDay);
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff f977 	bl	800129c <lcd_send_string>
	// Check deadline
	if (xTaskGetTickCount() > taskDisplayTimeDeadline) {
 8001fae:	f005 fe6f 	bl	8007c90 <xTaskGetTickCount>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	4b3e      	ldr	r3, [pc, #248]	@ (80020b0 <StartTask04+0x1e0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d902      	bls.n	8001fc2 <StartTask04+0xf2>
		print_cli("Task Display Time missed deadline\n");
 8001fbc:	4844      	ldr	r0, [pc, #272]	@ (80020d0 <StartTask04+0x200>)
 8001fbe:	f000 fb83 	bl	80026c8 <print_cli>
	}
	if (detectChange(&tasks[3], &prev_tasks[3]))
 8001fc2:	4944      	ldr	r1, [pc, #272]	@ (80020d4 <StartTask04+0x204>)
 8001fc4:	4844      	ldr	r0, [pc, #272]	@ (80020d8 <StartTask04+0x208>)
 8001fc6:	f7ff fd05 	bl	80019d4 <detectChange>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d045      	beq.n	800205c <StartTask04+0x18c>
	{
		if(tasks[3].deadline != prev_tasks[3].deadline)
 8001fd0:	4b35      	ldr	r3, [pc, #212]	@ (80020a8 <StartTask04+0x1d8>)
 8001fd2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001fd4:	4b41      	ldr	r3, [pc, #260]	@ (80020dc <StartTask04+0x20c>)
 8001fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d02a      	beq.n	8002032 <StartTask04+0x162>
		{
			taskDisplayTimeDeadline = taskDisplayTimeDeadline + pdMS_TO_TICKS(tasks[3].period)
 8001fdc:	4b32      	ldr	r3, [pc, #200]	@ (80020a8 <StartTask04+0x1d8>)
 8001fde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	4a30      	ldr	r2, [pc, #192]	@ (80020ac <StartTask04+0x1dc>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	099a      	lsrs	r2, r3, #6
 8001ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80020b0 <StartTask04+0x1e0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	441a      	add	r2, r3
							- pdMS_TO_TICKS(prev_tasks[3].deadline) + pdMS_TO_TICKS(tasks[3].deadline);
 8001ff8:	4b38      	ldr	r3, [pc, #224]	@ (80020dc <StartTask04+0x20c>)
 8001ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	4929      	ldr	r1, [pc, #164]	@ (80020ac <StartTask04+0x1dc>)
 8002008:	fba1 1303 	umull	r1, r3, r1, r3
 800200c:	099b      	lsrs	r3, r3, #6
 800200e:	1ad2      	subs	r2, r2, r3
 8002010:	4b25      	ldr	r3, [pc, #148]	@ (80020a8 <StartTask04+0x1d8>)
 8002012:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002014:	4619      	mov	r1, r3
 8002016:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4923      	ldr	r1, [pc, #140]	@ (80020ac <StartTask04+0x1dc>)
 8002020:	fba1 1303 	umull	r1, r3, r1, r3
 8002024:	099b      	lsrs	r3, r3, #6
 8002026:	4413      	add	r3, r2
			taskDisplayTimeDeadline = taskDisplayTimeDeadline + pdMS_TO_TICKS(tasks[3].period)
 8002028:	4a21      	ldr	r2, [pc, #132]	@ (80020b0 <StartTask04+0x1e0>)
 800202a:	6013      	str	r3, [r2, #0]
			print_cli("TASK 4 THAY DOI DEADLINE\n");
 800202c:	482c      	ldr	r0, [pc, #176]	@ (80020e0 <StartTask04+0x210>)
 800202e:	f000 fb4b 	bl	80026c8 <print_cli>
		}
		if(tasks[3].priotity != prev_tasks[3].priotity)
 8002032:	4b1d      	ldr	r3, [pc, #116]	@ (80020a8 <StartTask04+0x1d8>)
 8002034:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002036:	4b29      	ldr	r3, [pc, #164]	@ (80020dc <StartTask04+0x20c>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203a:	429a      	cmp	r2, r3
 800203c:	d00a      	beq.n	8002054 <StartTask04+0x184>
		{
			osThreadSetPriority(DisplayTimeHandle, tasks[3].priotity);
 800203e:	4b29      	ldr	r3, [pc, #164]	@ (80020e4 <StartTask04+0x214>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a19      	ldr	r2, [pc, #100]	@ (80020a8 <StartTask04+0x1d8>)
 8002044:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f004 f8e8 	bl	800621e <osThreadSetPriority>
			print_cli("TASK 04 THAY DOI MUC DO UU TIEN\n");
 800204e:	4826      	ldr	r0, [pc, #152]	@ (80020e8 <StartTask04+0x218>)
 8002050:	f000 fb3a 	bl	80026c8 <print_cli>
		}
		// Cập nhật giá trị trước đó
		updatePrevious(&prev_tasks[3], &tasks[3]);
 8002054:	4920      	ldr	r1, [pc, #128]	@ (80020d8 <StartTask04+0x208>)
 8002056:	481f      	ldr	r0, [pc, #124]	@ (80020d4 <StartTask04+0x204>)
 8002058:	f7ff fc9d 	bl	8001996 <updatePrevious>
	 }
	timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 800205c:	f004 f838 	bl	80060d0 <osKernelGetTickCount>
 8002060:	ee07 0a90 	vmov	s15, r0
 8002064:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002068:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80020bc <StartTask04+0x1ec>
 800206c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002070:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	print_cli("Thoi diem ket thuc task send thoi gian: %.3f\n", timeInSeconds);
 8002074:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002076:	f7fe fa6f 	bl	8000558 <__aeabi_f2d>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	481b      	ldr	r0, [pc, #108]	@ (80020ec <StartTask04+0x21c>)
 8002080:	f000 fb22 	bl	80026c8 <print_cli>
	// Delay until next period
	vTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(tasks[3].period));
 8002084:	4b08      	ldr	r3, [pc, #32]	@ (80020a8 <StartTask04+0x1d8>)
 8002086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002088:	461a      	mov	r2, r3
 800208a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800208e:	fb02 f303 	mul.w	r3, r2, r3
 8002092:	4a06      	ldr	r2, [pc, #24]	@ (80020ac <StartTask04+0x1dc>)
 8002094:	fba2 2303 	umull	r2, r3, r2, r3
 8002098:	099a      	lsrs	r2, r3, #6
 800209a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f005 fbc3 	bl	800782c <vTaskDelayUntil>
	  osMessageQueueGet(myQueue02Handle, &dateTimeRecv, NULL, osWaitForever);
 80020a6:	e72a      	b.n	8001efe <StartTask04+0x2e>
 80020a8:	20000000 	.word	0x20000000
 80020ac:	10624dd3 	.word	0x10624dd3
 80020b0:	20000550 	.word	0x20000550
 80020b4:	20000524 	.word	0x20000524
 80020b8:	0800c458 	.word	0x0800c458
 80020bc:	447a0000 	.word	0x447a0000
 80020c0:	0800c474 	.word	0x0800c474
 80020c4:	0800c4a4 	.word	0x0800c4a4
 80020c8:	0800c4b4 	.word	0x0800c4b4
 80020cc:	0800c4c8 	.word	0x0800c4c8
 80020d0:	0800c4e4 	.word	0x0800c4e4
 80020d4:	20000120 	.word	0x20000120
 80020d8:	20000060 	.word	0x20000060
 80020dc:	200000c0 	.word	0x200000c0
 80020e0:	0800c508 	.word	0x0800c508
 80020e4:	20000510 	.word	0x20000510
 80020e8:	0800c524 	.word	0x0800c524
 80020ec:	0800c548 	.word	0x0800c548

080020f0 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	float rh;
	TickType_t lastWakeTime = osKernelGetTickCount();
 80020f8:	f003 ffea 	bl	80060d0 <osKernelGetTickCount>
 80020fc:	4603      	mov	r3, r0
 80020fe:	60fb      	str	r3, [r7, #12]
	taskReadRhDeadline = lastWakeTime + pdMS_TO_TICKS(tasks[4].deadline);
 8002100:	4b5c      	ldr	r3, [pc, #368]	@ (8002274 <StartTask05+0x184>)
 8002102:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002106:	461a      	mov	r2, r3
 8002108:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800210c:	fb02 f303 	mul.w	r3, r2, r3
 8002110:	4a59      	ldr	r2, [pc, #356]	@ (8002278 <StartTask05+0x188>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	099a      	lsrs	r2, r3, #6
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4413      	add	r3, r2
 800211c:	4a57      	ldr	r2, [pc, #348]	@ (800227c <StartTask05+0x18c>)
 800211e:	6013      	str	r3, [r2, #0]
	float timeInSeconds;
  /* Infinite loop */
  for(;;)
  {
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8002120:	f003 ffd6 	bl	80060d0 <osKernelGetTickCount>
 8002124:	ee07 0a90 	vmov	s15, r0
 8002128:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800212c:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002280 <StartTask05+0x190>
 8002130:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002134:	edc7 7a05 	vstr	s15, [r7, #20]
	  print_cli("Thoi diem bat dau task do do am: %.3f\n", timeInSeconds);
 8002138:	6978      	ldr	r0, [r7, #20]
 800213a:	f7fe fa0d 	bl	8000558 <__aeabi_f2d>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4850      	ldr	r0, [pc, #320]	@ (8002284 <StartTask05+0x194>)
 8002144:	f000 fac0 	bl	80026c8 <print_cli>
	  rh = SHT2x_GetRelativeHumidity(1);
 8002148:	2001      	movs	r0, #1
 800214a:	f000 fb9b 	bl	8002884 <SHT2x_GetRelativeHumidity>
 800214e:	eef0 7a40 	vmov.f32	s15, s0
 8002152:	edc7 7a04 	vstr	s15, [r7, #16]
	  if (osKernelGetTickCount() > taskReadRhDeadline)
 8002156:	f003 ffbb 	bl	80060d0 <osKernelGetTickCount>
 800215a:	4602      	mov	r2, r0
 800215c:	4b47      	ldr	r3, [pc, #284]	@ (800227c <StartTask05+0x18c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d902      	bls.n	800216a <StartTask05+0x7a>
		  {
			  print_cli("Task Read Temperature missed deadline\n");
 8002164:	4848      	ldr	r0, [pc, #288]	@ (8002288 <StartTask05+0x198>)
 8002166:	f000 faaf 	bl	80026c8 <print_cli>
		  }
	  if (detectChange(&tasks[4], &prev_tasks[4]))
 800216a:	4948      	ldr	r1, [pc, #288]	@ (800228c <StartTask05+0x19c>)
 800216c:	4848      	ldr	r0, [pc, #288]	@ (8002290 <StartTask05+0x1a0>)
 800216e:	f7ff fc31 	bl	80019d4 <detectChange>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d04d      	beq.n	8002214 <StartTask05+0x124>
	{
		  if(tasks[4].deadline != prev_tasks[4].deadline)
 8002178:	4b3e      	ldr	r3, [pc, #248]	@ (8002274 <StartTask05+0x184>)
 800217a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800217e:	4b45      	ldr	r3, [pc, #276]	@ (8002294 <StartTask05+0x1a4>)
 8002180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002184:	429a      	cmp	r2, r3
 8002186:	d02d      	beq.n	80021e4 <StartTask05+0xf4>
		  {
			  taskReadRhDeadline = taskReadRhDeadline + pdMS_TO_TICKS(tasks[4].period)
 8002188:	4b3a      	ldr	r3, [pc, #232]	@ (8002274 <StartTask05+0x184>)
 800218a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800218e:	461a      	mov	r2, r3
 8002190:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002194:	fb02 f303 	mul.w	r3, r2, r3
 8002198:	4a37      	ldr	r2, [pc, #220]	@ (8002278 <StartTask05+0x188>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	099a      	lsrs	r2, r3, #6
 80021a0:	4b36      	ldr	r3, [pc, #216]	@ (800227c <StartTask05+0x18c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	441a      	add	r2, r3
			  				- pdMS_TO_TICKS(prev_tasks[4].deadline) + pdMS_TO_TICKS(tasks[4].deadline);
 80021a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002294 <StartTask05+0x1a4>)
 80021a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021ac:	4619      	mov	r1, r3
 80021ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	4930      	ldr	r1, [pc, #192]	@ (8002278 <StartTask05+0x188>)
 80021b8:	fba1 1303 	umull	r1, r3, r1, r3
 80021bc:	099b      	lsrs	r3, r3, #6
 80021be:	1ad2      	subs	r2, r2, r3
 80021c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002274 <StartTask05+0x184>)
 80021c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021c6:	4619      	mov	r1, r3
 80021c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4929      	ldr	r1, [pc, #164]	@ (8002278 <StartTask05+0x188>)
 80021d2:	fba1 1303 	umull	r1, r3, r1, r3
 80021d6:	099b      	lsrs	r3, r3, #6
 80021d8:	4413      	add	r3, r2
			  taskReadRhDeadline = taskReadRhDeadline + pdMS_TO_TICKS(tasks[4].period)
 80021da:	4a28      	ldr	r2, [pc, #160]	@ (800227c <StartTask05+0x18c>)
 80021dc:	6013      	str	r3, [r2, #0]
			  print_cli("TASK 05 THAY DOI DEADLINE\n");
 80021de:	482e      	ldr	r0, [pc, #184]	@ (8002298 <StartTask05+0x1a8>)
 80021e0:	f000 fa72 	bl	80026c8 <print_cli>
		  }
		  if(tasks[4].priotity != prev_tasks[4].priotity)
 80021e4:	4b23      	ldr	r3, [pc, #140]	@ (8002274 <StartTask05+0x184>)
 80021e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80021ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002294 <StartTask05+0x1a4>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d00b      	beq.n	800220c <StartTask05+0x11c>
		  {
			  osThreadSetPriority(myTask05Handle, tasks[4].priotity);
 80021f4:	4b29      	ldr	r3, [pc, #164]	@ (800229c <StartTask05+0x1ac>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002274 <StartTask05+0x184>)
 80021fa:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f004 f80c 	bl	800621e <osThreadSetPriority>
			  print_cli("TASK 05 THAY DOI MUC DO UU TIEN\n");
 8002206:	4826      	ldr	r0, [pc, #152]	@ (80022a0 <StartTask05+0x1b0>)
 8002208:	f000 fa5e 	bl	80026c8 <print_cli>
		  }
		  // Cập nhật giá trị trước đó
		  updatePrevious(&prev_tasks[4], &tasks[4]);
 800220c:	4920      	ldr	r1, [pc, #128]	@ (8002290 <StartTask05+0x1a0>)
 800220e:	481f      	ldr	r0, [pc, #124]	@ (800228c <StartTask05+0x19c>)
 8002210:	f7ff fbc1 	bl	8001996 <updatePrevious>
	 }
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8002214:	f003 ff5c 	bl	80060d0 <osKernelGetTickCount>
 8002218:	ee07 0a90 	vmov	s15, r0
 800221c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002220:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8002280 <StartTask05+0x190>
 8002224:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002228:	edc7 7a05 	vstr	s15, [r7, #20]
	  print_cli("Thoi diem ket thuc task do do am: %.3f\n", timeInSeconds);
 800222c:	6978      	ldr	r0, [r7, #20]
 800222e:	f7fe f993 	bl	8000558 <__aeabi_f2d>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	481b      	ldr	r0, [pc, #108]	@ (80022a4 <StartTask05+0x1b4>)
 8002238:	f000 fa46 	bl	80026c8 <print_cli>
	  osMessageQueuePut(myQueue03Handle, &rh, 0U, 0U);
 800223c:	4b1a      	ldr	r3, [pc, #104]	@ (80022a8 <StartTask05+0x1b8>)
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	f107 0110 	add.w	r1, r7, #16
 8002244:	2300      	movs	r3, #0
 8002246:	2200      	movs	r2, #0
 8002248:	f004 f930 	bl	80064ac <osMessageQueuePut>
	  vTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(tasks[4].period));
 800224c:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <StartTask05+0x184>)
 800224e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002252:	461a      	mov	r2, r3
 8002254:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002258:	fb02 f303 	mul.w	r3, r2, r3
 800225c:	4a06      	ldr	r2, [pc, #24]	@ (8002278 <StartTask05+0x188>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	099a      	lsrs	r2, r3, #6
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	4611      	mov	r1, r2
 800226a:	4618      	mov	r0, r3
 800226c:	f005 fade 	bl	800782c <vTaskDelayUntil>
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8002270:	e756      	b.n	8002120 <StartTask05+0x30>
 8002272:	bf00      	nop
 8002274:	20000000 	.word	0x20000000
 8002278:	10624dd3 	.word	0x10624dd3
 800227c:	20000554 	.word	0x20000554
 8002280:	447a0000 	.word	0x447a0000
 8002284:	0800c578 	.word	0x0800c578
 8002288:	0800c27c 	.word	0x0800c27c
 800228c:	20000140 	.word	0x20000140
 8002290:	20000080 	.word	0x20000080
 8002294:	200000c0 	.word	0x200000c0
 8002298:	0800c5a0 	.word	0x0800c5a0
 800229c:	20000514 	.word	0x20000514
 80022a0:	0800c5bc 	.word	0x0800c5bc
 80022a4:	0800c5e0 	.word	0x0800c5e0
 80022a8:	20000528 	.word	0x20000528

080022ac <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
	TickType_t lastWakeTime = osKernelGetTickCount();
 80022b4:	f003 ff0c 	bl	80060d0 <osKernelGetTickCount>
 80022b8:	4603      	mov	r3, r0
 80022ba:	61bb      	str	r3, [r7, #24]
	taskDisplayRhDeadline = lastWakeTime + pdMS_TO_TICKS(tasks[5].deadline);
 80022bc:	4b66      	ldr	r3, [pc, #408]	@ (8002458 <StartTask06+0x1ac>)
 80022be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80022c2:	461a      	mov	r2, r3
 80022c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022c8:	fb02 f303 	mul.w	r3, r2, r3
 80022cc:	4a63      	ldr	r2, [pc, #396]	@ (800245c <StartTask06+0x1b0>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	099a      	lsrs	r2, r3, #6
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	4413      	add	r3, r2
 80022d8:	4a61      	ldr	r2, [pc, #388]	@ (8002460 <StartTask06+0x1b4>)
 80022da:	6013      	str	r3, [r2, #0]
	char rhStr[6];
	float timeInSeconds;
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(myQueue03Handle, &rhRecv, NULL, osWaitForever);
 80022dc:	4b61      	ldr	r3, [pc, #388]	@ (8002464 <StartTask06+0x1b8>)
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	f107 0114 	add.w	r1, r7, #20
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295
 80022e8:	2200      	movs	r2, #0
 80022ea:	f004 f93f 	bl	800656c <osMessageQueueGet>
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 80022ee:	f003 feef 	bl	80060d0 <osKernelGetTickCount>
 80022f2:	ee07 0a90 	vmov	s15, r0
 80022f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022fa:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8002468 <StartTask06+0x1bc>
 80022fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002302:	edc7 7a07 	vstr	s15, [r7, #28]
	  print_cli("Thoi diem bat dau task send do am: %.3f\n", timeInSeconds);
 8002306:	69f8      	ldr	r0, [r7, #28]
 8002308:	f7fe f926 	bl	8000558 <__aeabi_f2d>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4856      	ldr	r0, [pc, #344]	@ (800246c <StartTask06+0x1c0>)
 8002312:	f000 f9d9 	bl	80026c8 <print_cli>
	  sprintf(rhStr, "r:%.1f", rhRecv);
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe f91d 	bl	8000558 <__aeabi_f2d>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	f107 000c 	add.w	r0, r7, #12
 8002326:	4952      	ldr	r1, [pc, #328]	@ (8002470 <StartTask06+0x1c4>)
 8002328:	f007 fd98 	bl	8009e5c <siprintf>
	  print_cli("%s\n", rhStr);
 800232c:	f107 030c 	add.w	r3, r7, #12
 8002330:	4619      	mov	r1, r3
 8002332:	4850      	ldr	r0, [pc, #320]	@ (8002474 <StartTask06+0x1c8>)
 8002334:	f000 f9c8 	bl	80026c8 <print_cli>
	  lcd_put_cur(1, 10);
 8002338:	210a      	movs	r1, #10
 800233a:	2001      	movs	r0, #1
 800233c:	f7fe ff52 	bl	80011e4 <lcd_put_cur>
	  lcd_send_string(&rhStr);
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe ffa9 	bl	800129c <lcd_send_string>
	  // Check deadline
		if (xTaskGetTickCount() > taskDisplayRhDeadline) {
 800234a:	f005 fca1 	bl	8007c90 <xTaskGetTickCount>
 800234e:	4602      	mov	r2, r0
 8002350:	4b43      	ldr	r3, [pc, #268]	@ (8002460 <StartTask06+0x1b4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d902      	bls.n	800235e <StartTask06+0xb2>
			print_cli("Task Display Temperature missed deadline\n");
 8002358:	4847      	ldr	r0, [pc, #284]	@ (8002478 <StartTask06+0x1cc>)
 800235a:	f000 f9b5 	bl	80026c8 <print_cli>
		}
		if (detectChange(&tasks[5], &prev_tasks[5]))
 800235e:	4947      	ldr	r1, [pc, #284]	@ (800247c <StartTask06+0x1d0>)
 8002360:	4847      	ldr	r0, [pc, #284]	@ (8002480 <StartTask06+0x1d4>)
 8002362:	f7ff fb37 	bl	80019d4 <detectChange>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d04d      	beq.n	8002408 <StartTask06+0x15c>
		{
			if(tasks[5].deadline != prev_tasks[5].deadline)
 800236c:	4b3a      	ldr	r3, [pc, #232]	@ (8002458 <StartTask06+0x1ac>)
 800236e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8002372:	4b44      	ldr	r3, [pc, #272]	@ (8002484 <StartTask06+0x1d8>)
 8002374:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002378:	429a      	cmp	r2, r3
 800237a:	d02d      	beq.n	80023d8 <StartTask06+0x12c>
			{
				taskDisplayRhDeadline = taskDisplayRhDeadline + pdMS_TO_TICKS(tasks[5].period)
 800237c:	4b36      	ldr	r3, [pc, #216]	@ (8002458 <StartTask06+0x1ac>)
 800237e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002382:	461a      	mov	r2, r3
 8002384:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002388:	fb02 f303 	mul.w	r3, r2, r3
 800238c:	4a33      	ldr	r2, [pc, #204]	@ (800245c <StartTask06+0x1b0>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	099a      	lsrs	r2, r3, #6
 8002394:	4b32      	ldr	r3, [pc, #200]	@ (8002460 <StartTask06+0x1b4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	441a      	add	r2, r3
									- pdMS_TO_TICKS(prev_tasks[5].deadline) + pdMS_TO_TICKS(tasks[5].deadline);
 800239a:	4b3a      	ldr	r3, [pc, #232]	@ (8002484 <StartTask06+0x1d8>)
 800239c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80023a0:	4619      	mov	r1, r3
 80023a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	492c      	ldr	r1, [pc, #176]	@ (800245c <StartTask06+0x1b0>)
 80023ac:	fba1 1303 	umull	r1, r3, r1, r3
 80023b0:	099b      	lsrs	r3, r3, #6
 80023b2:	1ad2      	subs	r2, r2, r3
 80023b4:	4b28      	ldr	r3, [pc, #160]	@ (8002458 <StartTask06+0x1ac>)
 80023b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80023ba:	4619      	mov	r1, r3
 80023bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4925      	ldr	r1, [pc, #148]	@ (800245c <StartTask06+0x1b0>)
 80023c6:	fba1 1303 	umull	r1, r3, r1, r3
 80023ca:	099b      	lsrs	r3, r3, #6
 80023cc:	4413      	add	r3, r2
				taskDisplayRhDeadline = taskDisplayRhDeadline + pdMS_TO_TICKS(tasks[5].period)
 80023ce:	4a24      	ldr	r2, [pc, #144]	@ (8002460 <StartTask06+0x1b4>)
 80023d0:	6013      	str	r3, [r2, #0]
				print_cli("TASK 06 DA THAY DOI DEADLINE\n");
 80023d2:	482d      	ldr	r0, [pc, #180]	@ (8002488 <StartTask06+0x1dc>)
 80023d4:	f000 f978 	bl	80026c8 <print_cli>
			}
			if(tasks[5].priotity != prev_tasks[5].priotity)
 80023d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002458 <StartTask06+0x1ac>)
 80023da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80023de:	4b29      	ldr	r3, [pc, #164]	@ (8002484 <StartTask06+0x1d8>)
 80023e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d00b      	beq.n	8002400 <StartTask06+0x154>
			{
				osThreadSetPriority(myTask05Handle, tasks[5].priotity);
 80023e8:	4b28      	ldr	r3, [pc, #160]	@ (800248c <StartTask06+0x1e0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002458 <StartTask06+0x1ac>)
 80023ee:	f8d2 20b0 	ldr.w	r2, [r2, #176]	@ 0xb0
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 ff12 	bl	800621e <osThreadSetPriority>
				print_cli("TASK 06 DA THAY DOI MUC DO UU TIEN\n");
 80023fa:	4825      	ldr	r0, [pc, #148]	@ (8002490 <StartTask06+0x1e4>)
 80023fc:	f000 f964 	bl	80026c8 <print_cli>
			}
			// Cập nhật giá trị trước đó
			updatePrevious(&prev_tasks[5], &tasks[5]);
 8002400:	491f      	ldr	r1, [pc, #124]	@ (8002480 <StartTask06+0x1d4>)
 8002402:	481e      	ldr	r0, [pc, #120]	@ (800247c <StartTask06+0x1d0>)
 8002404:	f7ff fac7 	bl	8001996 <updatePrevious>
		 }
		timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8002408:	f003 fe62 	bl	80060d0 <osKernelGetTickCount>
 800240c:	ee07 0a90 	vmov	s15, r0
 8002410:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002414:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8002468 <StartTask06+0x1bc>
 8002418:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800241c:	edc7 7a07 	vstr	s15, [r7, #28]
		print_cli("Thoi diem ket thuc task send do am: %.3f\n", timeInSeconds);
 8002420:	69f8      	ldr	r0, [r7, #28]
 8002422:	f7fe f899 	bl	8000558 <__aeabi_f2d>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	481a      	ldr	r0, [pc, #104]	@ (8002494 <StartTask06+0x1e8>)
 800242c:	f000 f94c 	bl	80026c8 <print_cli>
		// Delay until next period
		vTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(tasks[5].period));
 8002430:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <StartTask06+0x1ac>)
 8002432:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002436:	461a      	mov	r2, r3
 8002438:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800243c:	fb02 f303 	mul.w	r3, r2, r3
 8002440:	4a06      	ldr	r2, [pc, #24]	@ (800245c <StartTask06+0x1b0>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	099a      	lsrs	r2, r3, #6
 8002448:	f107 0318 	add.w	r3, r7, #24
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f005 f9ec 	bl	800782c <vTaskDelayUntil>
	  osMessageQueueGet(myQueue03Handle, &rhRecv, NULL, osWaitForever);
 8002454:	e742      	b.n	80022dc <StartTask06+0x30>
 8002456:	bf00      	nop
 8002458:	20000000 	.word	0x20000000
 800245c:	10624dd3 	.word	0x10624dd3
 8002460:	20000558 	.word	0x20000558
 8002464:	20000528 	.word	0x20000528
 8002468:	447a0000 	.word	0x447a0000
 800246c:	0800c608 	.word	0x0800c608
 8002470:	0800c634 	.word	0x0800c634
 8002474:	0800c63c 	.word	0x0800c63c
 8002478:	0800c3c0 	.word	0x0800c3c0
 800247c:	20000160 	.word	0x20000160
 8002480:	200000a0 	.word	0x200000a0
 8002484:	200000c0 	.word	0x200000c0
 8002488:	0800c640 	.word	0x0800c640
 800248c:	20000514 	.word	0x20000514
 8002490:	0800c660 	.word	0x0800c660
 8002494:	0800c684 	.word	0x0800c684

08002498 <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
void StartTask07(void *argument)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b0a8      	sub	sp, #160	@ 0xa0
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	int field[6];
	int idx;
	/* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(myQueue04Handle, &Recv_ISR, NULL, osWaitForever);
 80024a0:	4b7d      	ldr	r3, [pc, #500]	@ (8002698 <StartTask07+0x200>)
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ac:	2200      	movs	r2, #0
 80024ae:	f004 f85d 	bl	800656c <osMessageQueueGet>
	print_cli("Nhan tu ngat yeu cau thay doi thong so lap lich\n");
 80024b2:	487a      	ldr	r0, [pc, #488]	@ (800269c <StartTask07+0x204>)
 80024b4:	f000 f908 	bl	80026c8 <print_cli>
	// Chuyển đổi ký tự ASCII sang số nguyên
	    for (int i = 0; i < 12; i++) {
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80024be:	e013      	b.n	80024e8 <StartTask07+0x50>
	        fieldRecv[i] = Recv_ISR[i] - '0'; // Trừ '0' để chuyển ký tự sang số
 80024c0:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80024c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024c8:	4413      	add	r3, r2
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80024d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	33a0      	adds	r3, #160	@ 0xa0
 80024d8:	443b      	add	r3, r7
 80024da:	f843 2c80 	str.w	r2, [r3, #-128]
	    for (int i = 0; i < 12; i++) {
 80024de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024e2:	3301      	adds	r3, #1
 80024e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80024e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024ec:	2b0b      	cmp	r3, #11
 80024ee:	dde7      	ble.n	80024c0 <StartTask07+0x28>
	    }

	    // Ghép các cặp số thành số có 2 chữ số
	    for (int j = 0; j < 6; j++) {
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80024f6:	e022      	b.n	800253e <StartTask07+0xa6>
	        field[j] = fieldRecv[2 * j] * 10 + fieldRecv[2 * j + 1]; // Ghép số
 80024f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	33a0      	adds	r3, #160	@ 0xa0
 8002502:	443b      	add	r3, r7
 8002504:	f853 2c80 	ldr.w	r2, [r3, #-128]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	461a      	mov	r2, r3
 8002512:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	3301      	adds	r3, #1
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	33a0      	adds	r3, #160	@ 0xa0
 800251e:	443b      	add	r3, r7
 8002520:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8002524:	441a      	add	r2, r3
 8002526:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	33a0      	adds	r3, #160	@ 0xa0
 800252e:	443b      	add	r3, r7
 8002530:	f843 2c98 	str.w	r2, [r3, #-152]
	    for (int j = 0; j < 6; j++) {
 8002534:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002538:	3301      	adds	r3, #1
 800253a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800253e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002542:	2b05      	cmp	r3, #5
 8002544:	ddd8      	ble.n	80024f8 <StartTask07+0x60>
	    }
	idx = field[0];
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	for(int i = 0; i <= 5; i++)
 800254c:	2300      	movs	r3, #0
 800254e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002552:	e011      	b.n	8002578 <StartTask07+0xe0>
		print_cli("IDX LA %d, %d\n", i, field[i]);
 8002554:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	33a0      	adds	r3, #160	@ 0xa0
 800255c:	443b      	add	r3, r7
 800255e:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8002562:	461a      	mov	r2, r3
 8002564:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002568:	484d      	ldr	r0, [pc, #308]	@ (80026a0 <StartTask07+0x208>)
 800256a:	f000 f8ad 	bl	80026c8 <print_cli>
	for(int i = 0; i <= 5; i++)
 800256e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002572:	3301      	adds	r3, #1
 8002574:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002578:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800257c:	2b05      	cmp	r3, #5
 800257e:	dde9      	ble.n	8002554 <StartTask07+0xbc>
	//print_cli("Thay doi thong so Task %d\n", i+1);
	if(field[1] != 0 && tasks[idx].period != field[1] *100)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d01b      	beq.n	80025be <StartTask07+0x126>
 8002586:	4a47      	ldr	r2, [pc, #284]	@ (80026a4 <StartTask07+0x20c>)
 8002588:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800258c:	015b      	lsls	r3, r3, #5
 800258e:	4413      	add	r3, r2
 8002590:	3304      	adds	r3, #4
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2164      	movs	r1, #100	@ 0x64
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	429a      	cmp	r2, r3
 800259e:	d00e      	beq.n	80025be <StartTask07+0x126>
	{
		//tasks[i].period = field[1] * 100;
		update_single_task_period(tasks, 6, idx, field[1] * 100);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2264      	movs	r2, #100	@ 0x64
 80025a4:	fb02 f303 	mul.w	r3, r2, r3
 80025a8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80025ac:	2106      	movs	r1, #6
 80025ae:	483d      	ldr	r0, [pc, #244]	@ (80026a4 <StartTask07+0x20c>)
 80025b0:	f7ff f9a1 	bl	80018f6 <update_single_task_period>
		print_cli("Chu ky thay doi %d\n",idx);
 80025b4:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80025b8:	483b      	ldr	r0, [pc, #236]	@ (80026a8 <StartTask07+0x210>)
 80025ba:	f000 f885 	bl	80026c8 <print_cli>
	}
	if(field[2] != 0)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <StartTask07+0x132>
	{
		print_cli("Thay doi thoi gian thuc thi\n");
 80025c4:	4839      	ldr	r0, [pc, #228]	@ (80026ac <StartTask07+0x214>)
 80025c6:	f000 f87f 	bl	80026c8 <print_cli>
	}
	if(field[3] != 0 && tasks[idx].deadline != field[3] * 100)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01c      	beq.n	800260a <StartTask07+0x172>
 80025d0:	4a34      	ldr	r2, [pc, #208]	@ (80026a4 <StartTask07+0x20c>)
 80025d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025d6:	015b      	lsls	r3, r3, #5
 80025d8:	4413      	add	r3, r2
 80025da:	330c      	adds	r3, #12
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2164      	movs	r1, #100	@ 0x64
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d00f      	beq.n	800260a <StartTask07+0x172>
	{
		print_cli("Deadline thay doi %d\n", idx);
 80025ea:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80025ee:	4830      	ldr	r0, [pc, #192]	@ (80026b0 <StartTask07+0x218>)
 80025f0:	f000 f86a 	bl	80026c8 <print_cli>
		tasks[idx].deadline = field[3] * 100;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2264      	movs	r2, #100	@ 0x64
 80025f8:	fb03 f202 	mul.w	r2, r3, r2
 80025fc:	4929      	ldr	r1, [pc, #164]	@ (80026a4 <StartTask07+0x20c>)
 80025fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002602:	015b      	lsls	r3, r3, #5
 8002604:	440b      	add	r3, r1
 8002606:	330c      	adds	r3, #12
 8002608:	601a      	str	r2, [r3, #0]
	}
	if(field[4] != 0 && tasks[idx].allPeriod != field[4] * 100)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d027      	beq.n	8002660 <StartTask07+0x1c8>
 8002610:	4a24      	ldr	r2, [pc, #144]	@ (80026a4 <StartTask07+0x20c>)
 8002612:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002616:	015b      	lsls	r3, r3, #5
 8002618:	4413      	add	r3, r2
 800261a:	3314      	adds	r3, #20
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2164      	movs	r1, #100	@ 0x64
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	429a      	cmp	r2, r3
 8002628:	d01a      	beq.n	8002660 <StartTask07+0x1c8>
	{
		print_cli("Thay doi chu ky toan bo\n");
 800262a:	4822      	ldr	r0, [pc, #136]	@ (80026b4 <StartTask07+0x21c>)
 800262c:	f000 f84c 	bl	80026c8 <print_cli>
		for (int i = 0; i <= 5; i++)
 8002630:	2300      	movs	r3, #0
 8002632:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002636:	e00f      	b.n	8002658 <StartTask07+0x1c0>
			tasks[i].allPeriod = field[4] * 100;
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2264      	movs	r2, #100	@ 0x64
 800263c:	fb03 f202 	mul.w	r2, r3, r2
 8002640:	4918      	ldr	r1, [pc, #96]	@ (80026a4 <StartTask07+0x20c>)
 8002642:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002646:	015b      	lsls	r3, r3, #5
 8002648:	440b      	add	r3, r1
 800264a:	3314      	adds	r3, #20
 800264c:	601a      	str	r2, [r3, #0]
		for (int i = 0; i <= 5; i++)
 800264e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002652:	3301      	adds	r3, #1
 8002654:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002658:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800265c:	2b05      	cmp	r3, #5
 800265e:	ddeb      	ble.n	8002638 <StartTask07+0x1a0>
	}if(field[5] != 0 && field[5] != tasks[idx].priotity)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d014      	beq.n	8002690 <StartTask07+0x1f8>
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	490e      	ldr	r1, [pc, #56]	@ (80026a4 <StartTask07+0x20c>)
 800266a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800266e:	015b      	lsls	r3, r3, #5
 8002670:	440b      	add	r3, r1
 8002672:	3310      	adds	r3, #16
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d00a      	beq.n	8002690 <StartTask07+0x1f8>
	{
		print_cli("Muc uu tien phu thuoc vao deadline\n");
 800267a:	480f      	ldr	r0, [pc, #60]	@ (80026b8 <StartTask07+0x220>)
 800267c:	f000 f824 	bl	80026c8 <print_cli>
		tasks[idx].priotity = field[5];
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	4908      	ldr	r1, [pc, #32]	@ (80026a4 <StartTask07+0x20c>)
 8002684:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002688:	015b      	lsls	r3, r3, #5
 800268a:	440b      	add	r3, r1
 800268c:	3310      	adds	r3, #16
 800268e:	601a      	str	r2, [r3, #0]
	}
    osThreadYield();
 8002690:	f003 fdf0 	bl	8006274 <osThreadYield>
	osMessageQueueGet(myQueue04Handle, &Recv_ISR, NULL, osWaitForever);
 8002694:	e704      	b.n	80024a0 <StartTask07+0x8>
 8002696:	bf00      	nop
 8002698:	2000052c 	.word	0x2000052c
 800269c:	0800c6b0 	.word	0x0800c6b0
 80026a0:	0800c6e4 	.word	0x0800c6e4
 80026a4:	20000000 	.word	0x20000000
 80026a8:	0800c6f4 	.word	0x0800c6f4
 80026ac:	0800c708 	.word	0x0800c708
 80026b0:	0800c728 	.word	0x0800c728
 80026b4:	0800c740 	.word	0x0800c740
 80026b8:	0800c75c 	.word	0x0800c75c

080026bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c0:	b672      	cpsid	i
}
 80026c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026c4:	bf00      	nop
 80026c6:	e7fd      	b.n	80026c4 <Error_Handler+0x8>

080026c8 <print_cli>:
//
//	HAL_UART_Transmit(&huart1,(uint8_t *)stringArray,len_str,200);
//}

void print_cli(const char* format, ...)
{
 80026c8:	b40f      	push	{r0, r1, r2, r3}
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b0c2      	sub	sp, #264	@ 0x108
 80026ce:	af00      	add	r7, sp, #0
    // Tăng kích thước bộ đệm nếu cần xử lý chuỗi lớn hơn
    char buffer[256];

    va_list args;
    va_start(args, format);
 80026d0:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80026d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80026d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80026dc:	601a      	str	r2, [r3, #0]

    // Sử dụng vsnprintf để đảm bảo an toàn bộ đệm
    int len = vsnprintf(buffer, sizeof(buffer), format, args);
 80026de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80026e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80026e6:	1d38      	adds	r0, r7, #4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80026ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026f2:	f007 fc41 	bl	8009f78 <vsniprintf>
 80026f6:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    va_end(args);

    if (len > 0) {
 80026fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026fe:	2b00      	cmp	r3, #0
 8002700:	dd0f      	ble.n	8002722 <print_cli+0x5a>
        // Nếu chuỗi dài hơn bộ đệm, chỉ gửi phần vừa bộ đệm
        if (len >= sizeof(buffer)) {
 8002702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002706:	2bff      	cmp	r3, #255	@ 0xff
 8002708:	d902      	bls.n	8002710 <print_cli+0x48>
            len = sizeof(buffer) - 1;
 800270a:	23ff      	movs	r3, #255	@ 0xff
 800270c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        }
        HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 8002710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002714:	b29a      	uxth	r2, r3
 8002716:	1d39      	adds	r1, r7, #4
 8002718:	f04f 33ff 	mov.w	r3, #4294967295
 800271c:	4805      	ldr	r0, [pc, #20]	@ (8002734 <print_cli+0x6c>)
 800271e:	f002 fc53 	bl	8004fc8 <HAL_UART_Transmit>
    }
}
 8002722:	bf00      	nop
 8002724:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002728:	46bd      	mov	sp, r7
 800272a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800272e:	b004      	add	sp, #16
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000474 	.word	0x20000474

08002738 <SHT2x_Init>:
	
/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 8002740:	4a04      	ldr	r2, [pc, #16]	@ (8002754 <SHT2x_Init+0x1c>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6013      	str	r3, [r2, #0]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000580 	.word	0x20000580

08002758 <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 800275e:	23e7      	movs	r3, #231	@ 0xe7
 8002760:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8002762:	4b0c      	ldr	r3, [pc, #48]	@ (8002794 <SHT2x_ReadUserReg+0x3c>)
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	1dba      	adds	r2, r7, #6
 8002768:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2301      	movs	r3, #1
 8002770:	2180      	movs	r1, #128	@ 0x80
 8002772:	f001 f8cb 	bl	800390c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 8002776:	4b07      	ldr	r3, [pc, #28]	@ (8002794 <SHT2x_ReadUserReg+0x3c>)
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	1dfa      	adds	r2, r7, #7
 800277c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	2301      	movs	r3, #1
 8002784:	2180      	movs	r1, #128	@ 0x80
 8002786:	f001 f9bf 	bl	8003b08 <HAL_I2C_Master_Receive>
	return val;
 800278a:	79fb      	ldrb	r3, [r7, #7]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000580 	.word	0x20000580

08002798 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af02      	add	r7, sp, #8
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
	uint8_t val[3] = { 0 };
 80027a2:	4b13      	ldr	r3, [pc, #76]	@ (80027f0 <SHT2x_GetRaw+0x58>)
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	81bb      	strh	r3, [r7, #12]
 80027a8:	2300      	movs	r3, #0
 80027aa:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 80027ac:	4b11      	ldr	r3, [pc, #68]	@ (80027f4 <SHT2x_GetRaw+0x5c>)
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	1dfa      	adds	r2, r7, #7
 80027b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2301      	movs	r3, #1
 80027ba:	2180      	movs	r1, #128	@ 0x80
 80027bc:	f001 f8a6 	bl	800390c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 80027c0:	4b0c      	ldr	r3, [pc, #48]	@ (80027f4 <SHT2x_GetRaw+0x5c>)
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	f107 020c 	add.w	r2, r7, #12
 80027c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2303      	movs	r3, #3
 80027d0:	2180      	movs	r1, #128	@ 0x80
 80027d2:	f001 f999 	bl	8003b08 <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 80027d6:	7b3b      	ldrb	r3, [r7, #12]
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	b21a      	sxth	r2, r3
 80027dc:	7b7b      	ldrb	r3, [r7, #13]
 80027de:	b21b      	sxth	r3, r3
 80027e0:	4313      	orrs	r3, r2
 80027e2:	b21b      	sxth	r3, r3
 80027e4:	b29b      	uxth	r3, r3
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	0800c780 	.word	0x0800c780
 80027f4:	20000580 	.word	0x20000580

080027f8 <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <SHT2x_GetTemperature+0x14>
 8002808:	23e3      	movs	r3, #227	@ 0xe3
 800280a:	e000      	b.n	800280e <SHT2x_GetTemperature+0x16>
 800280c:	23f3      	movs	r3, #243	@ 0xf3
 800280e:	73fb      	strb	r3, [r7, #15]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ffc0 	bl	8002798 <SHT2x_GetRaw>
 8002818:	4603      	mov	r3, r0
 800281a:	4618      	mov	r0, r3
 800281c:	f7fd fe8a 	bl	8000534 <__aeabi_i2d>
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	4b16      	ldr	r3, [pc, #88]	@ (8002880 <SHT2x_GetTemperature+0x88>)
 8002826:	f7fe f819 	bl	800085c <__aeabi_ddiv>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4610      	mov	r0, r2
 8002830:	4619      	mov	r1, r3
 8002832:	a30f      	add	r3, pc, #60	@ (adr r3, 8002870 <SHT2x_GetTemperature+0x78>)
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	f7fd fee6 	bl	8000608 <__aeabi_dmul>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	a30c      	add	r3, pc, #48	@ (adr r3, 8002878 <SHT2x_GetTemperature+0x80>)
 8002846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284a:	f7fd fd25 	bl	8000298 <__aeabi_dsub>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	f7fe f9af 	bl	8000bb8 <__aeabi_d2f>
 800285a:	4603      	mov	r3, r0
 800285c:	ee07 3a90 	vmov	s15, r3
}
 8002860:	eeb0 0a67 	vmov.f32	s0, s15
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	f3af 8000 	nop.w
 8002870:	3d70a3d7 	.word	0x3d70a3d7
 8002874:	4065f70a 	.word	0x4065f70a
 8002878:	cccccccd 	.word	0xcccccccd
 800287c:	40476ccc 	.word	0x40476ccc
 8002880:	40f00000 	.word	0x40f00000

08002884 <SHT2x_GetRelativeHumidity>:
/**
 * @brief Measures and gets the current relative humidity.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point relative humidity value.
 */
float SHT2x_GetRelativeHumidity(uint8_t hold) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_RH_HOLD : SHT2x_READ_RH_NOHOLD);
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <SHT2x_GetRelativeHumidity+0x14>
 8002894:	23e5      	movs	r3, #229	@ 0xe5
 8002896:	e000      	b.n	800289a <SHT2x_GetRelativeHumidity+0x16>
 8002898:	23f5      	movs	r3, #245	@ 0xf5
 800289a:	73fb      	strb	r3, [r7, #15]
	return -6 + 125.00 * (SHT2x_GetRaw(cmd) / 65536.0);
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ff7a 	bl	8002798 <SHT2x_GetRaw>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fd fe44 	bl	8000534 <__aeabi_i2d>
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <SHT2x_GetRelativeHumidity+0x74>)
 80028b2:	f7fd ffd3 	bl	800085c <__aeabi_ddiv>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	4b0e      	ldr	r3, [pc, #56]	@ (80028fc <SHT2x_GetRelativeHumidity+0x78>)
 80028c4:	f7fd fea0 	bl	8000608 <__aeabi_dmul>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002900 <SHT2x_GetRelativeHumidity+0x7c>)
 80028d6:	f7fd fcdf 	bl	8000298 <__aeabi_dsub>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f7fe f969 	bl	8000bb8 <__aeabi_d2f>
 80028e6:	4603      	mov	r3, r0
 80028e8:	ee07 3a90 	vmov	s15, r3
}
 80028ec:	eeb0 0a67 	vmov.f32	s0, s15
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40f00000 	.word	0x40f00000
 80028fc:	405f4000 	.word	0x405f4000
 8002900:	40180000 	.word	0x40180000

08002904 <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14-bit temperature and 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af02      	add	r7, sp, #8
 800290a:	4603      	mov	r3, r0
 800290c:	71fb      	strb	r3, [r7, #7]
	uint8_t val = SHT2x_ReadUserReg();
 800290e:	f7ff ff23 	bl	8002758 <SHT2x_ReadUserReg>
 8002912:	4603      	mov	r3, r0
 8002914:	73fb      	strb	r3, [r7, #15]
	val = (val & 0x7e) | res;
 8002916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800291e:	b25a      	sxtb	r2, r3
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	4313      	orrs	r3, r2
 8002926:	b25b      	sxtb	r3, r3
 8002928:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 800292a:	23e6      	movs	r3, #230	@ 0xe6
 800292c:	733b      	strb	r3, [r7, #12]
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 8002932:	4b07      	ldr	r3, [pc, #28]	@ (8002950 <SHT2x_SetResolution+0x4c>)
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	f107 020c 	add.w	r2, r7, #12
 800293a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	2302      	movs	r3, #2
 8002942:	2180      	movs	r1, #128	@ 0x80
 8002944:	f000 ffe2 	bl	800390c <HAL_I2C_Master_Transmit>
}
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000580 	.word	0x20000580

08002954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	4b12      	ldr	r3, [pc, #72]	@ (80029a8 <HAL_MspInit+0x54>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002962:	4a11      	ldr	r2, [pc, #68]	@ (80029a8 <HAL_MspInit+0x54>)
 8002964:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002968:	6453      	str	r3, [r2, #68]	@ 0x44
 800296a:	4b0f      	ldr	r3, [pc, #60]	@ (80029a8 <HAL_MspInit+0x54>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <HAL_MspInit+0x54>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	4a0a      	ldr	r2, [pc, #40]	@ (80029a8 <HAL_MspInit+0x54>)
 8002980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002984:	6413      	str	r3, [r2, #64]	@ 0x40
 8002986:	4b08      	ldr	r3, [pc, #32]	@ (80029a8 <HAL_MspInit+0x54>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002992:	2200      	movs	r2, #0
 8002994:	210f      	movs	r1, #15
 8002996:	f06f 0001 	mvn.w	r0, #1
 800299a:	f000 fc26 	bl	80031ea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800

080029ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08e      	sub	sp, #56	@ 0x38
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a63      	ldr	r2, [pc, #396]	@ (8002b58 <HAL_I2C_MspInit+0x1ac>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d12c      	bne.n	8002a28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
 80029d2:	4b62      	ldr	r3, [pc, #392]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d6:	4a61      	ldr	r2, [pc, #388]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 80029d8:	f043 0302 	orr.w	r3, r3, #2
 80029dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029de:	4b5f      	ldr	r3, [pc, #380]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	623b      	str	r3, [r7, #32]
 80029e8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029ea:	23c0      	movs	r3, #192	@ 0xc0
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ee:	2312      	movs	r3, #18
 80029f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f6:	2303      	movs	r3, #3
 80029f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029fa:	2304      	movs	r3, #4
 80029fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a02:	4619      	mov	r1, r3
 8002a04:	4856      	ldr	r0, [pc, #344]	@ (8002b60 <HAL_I2C_MspInit+0x1b4>)
 8002a06:	f000 fcb9 	bl	800337c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	4b53      	ldr	r3, [pc, #332]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	4a52      	ldr	r2, [pc, #328]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 8002a14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a1a:	4b50      	ldr	r3, [pc, #320]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a26:	e093      	b.n	8002b50 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a4d      	ldr	r2, [pc, #308]	@ (8002b64 <HAL_I2C_MspInit+0x1b8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d13d      	bne.n	8002aae <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	4b49      	ldr	r3, [pc, #292]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	4a48      	ldr	r2, [pc, #288]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a42:	4b46      	ldr	r3, [pc, #280]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	61bb      	str	r3, [r7, #24]
 8002a4c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a54:	2312      	movs	r3, #18
 8002a56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a60:	2304      	movs	r3, #4
 8002a62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a68:	4619      	mov	r1, r3
 8002a6a:	483d      	ldr	r0, [pc, #244]	@ (8002b60 <HAL_I2C_MspInit+0x1b4>)
 8002a6c:	f000 fc86 	bl	800337c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a70:	2308      	movs	r3, #8
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a74:	2312      	movs	r3, #18
 8002a76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002a80:	2309      	movs	r3, #9
 8002a82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4835      	ldr	r0, [pc, #212]	@ (8002b60 <HAL_I2C_MspInit+0x1b4>)
 8002a8c:	f000 fc76 	bl	800337c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	4b31      	ldr	r3, [pc, #196]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	4a30      	ldr	r2, [pc, #192]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 8002a9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	697b      	ldr	r3, [r7, #20]
}
 8002aac:	e050      	b.n	8002b50 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8002b68 <HAL_I2C_MspInit+0x1bc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d14b      	bne.n	8002b50 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	4b27      	ldr	r3, [pc, #156]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac0:	4a26      	ldr	r2, [pc, #152]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 8002ac2:	f043 0304 	orr.w	r3, r3, #4
 8002ac6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac8:	4b24      	ldr	r3, [pc, #144]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 8002aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	4b20      	ldr	r3, [pc, #128]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002adc:	4a1f      	ldr	r2, [pc, #124]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002af0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002af4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002af6:	2312      	movs	r3, #18
 8002af8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afe:	2303      	movs	r3, #3
 8002b00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b02:	2304      	movs	r3, #4
 8002b04:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4817      	ldr	r0, [pc, #92]	@ (8002b6c <HAL_I2C_MspInit+0x1c0>)
 8002b0e:	f000 fc35 	bl	800337c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b18:	2312      	movs	r3, #18
 8002b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b20:	2303      	movs	r3, #3
 8002b22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b24:	2304      	movs	r3, #4
 8002b26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4810      	ldr	r0, [pc, #64]	@ (8002b70 <HAL_I2C_MspInit+0x1c4>)
 8002b30:	f000 fc24 	bl	800337c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b34:	2300      	movs	r3, #0
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	4a07      	ldr	r2, [pc, #28]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 8002b3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b42:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b44:	4b05      	ldr	r3, [pc, #20]	@ (8002b5c <HAL_I2C_MspInit+0x1b0>)
 8002b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
}
 8002b50:	bf00      	nop
 8002b52:	3738      	adds	r7, #56	@ 0x38
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40005400 	.word	0x40005400
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40020400 	.word	0x40020400
 8002b64:	40005800 	.word	0x40005800
 8002b68:	40005c00 	.word	0x40005c00
 8002b6c:	40020800 	.word	0x40020800
 8002b70:	40020000 	.word	0x40020000

08002b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08c      	sub	sp, #48	@ 0x30
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 031c 	add.w	r3, r7, #28
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a3a      	ldr	r2, [pc, #232]	@ (8002c7c <HAL_UART_MspInit+0x108>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d135      	bne.n	8002c02 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	4b39      	ldr	r3, [pc, #228]	@ (8002c80 <HAL_UART_MspInit+0x10c>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9e:	4a38      	ldr	r2, [pc, #224]	@ (8002c80 <HAL_UART_MspInit+0x10c>)
 8002ba0:	f043 0310 	orr.w	r3, r3, #16
 8002ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ba6:	4b36      	ldr	r3, [pc, #216]	@ (8002c80 <HAL_UART_MspInit+0x10c>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	4b32      	ldr	r3, [pc, #200]	@ (8002c80 <HAL_UART_MspInit+0x10c>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	4a31      	ldr	r2, [pc, #196]	@ (8002c80 <HAL_UART_MspInit+0x10c>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002c80 <HAL_UART_MspInit+0x10c>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002be0:	2307      	movs	r3, #7
 8002be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be4:	f107 031c 	add.w	r3, r7, #28
 8002be8:	4619      	mov	r1, r3
 8002bea:	4826      	ldr	r0, [pc, #152]	@ (8002c84 <HAL_UART_MspInit+0x110>)
 8002bec:	f000 fbc6 	bl	800337c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2105      	movs	r1, #5
 8002bf4:	2025      	movs	r0, #37	@ 0x25
 8002bf6:	f000 faf8 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bfa:	2025      	movs	r0, #37	@ 0x25
 8002bfc:	f000 fb11 	bl	8003222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c00:	e038      	b.n	8002c74 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a20      	ldr	r2, [pc, #128]	@ (8002c88 <HAL_UART_MspInit+0x114>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d133      	bne.n	8002c74 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	4b1b      	ldr	r3, [pc, #108]	@ (8002c80 <HAL_UART_MspInit+0x10c>)
 8002c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c14:	4a1a      	ldr	r2, [pc, #104]	@ (8002c80 <HAL_UART_MspInit+0x10c>)
 8002c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c1c:	4b18      	ldr	r3, [pc, #96]	@ (8002c80 <HAL_UART_MspInit+0x10c>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	4b14      	ldr	r3, [pc, #80]	@ (8002c80 <HAL_UART_MspInit+0x10c>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c30:	4a13      	ldr	r2, [pc, #76]	@ (8002c80 <HAL_UART_MspInit+0x10c>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c38:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <HAL_UART_MspInit+0x10c>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c44:	230c      	movs	r3, #12
 8002c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c50:	2303      	movs	r3, #3
 8002c52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c54:	2307      	movs	r3, #7
 8002c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c58:	f107 031c 	add.w	r3, r7, #28
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4809      	ldr	r0, [pc, #36]	@ (8002c84 <HAL_UART_MspInit+0x110>)
 8002c60:	f000 fb8c 	bl	800337c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002c64:	2200      	movs	r2, #0
 8002c66:	2105      	movs	r1, #5
 8002c68:	2026      	movs	r0, #38	@ 0x26
 8002c6a:	f000 fabe 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c6e:	2026      	movs	r0, #38	@ 0x26
 8002c70:	f000 fad7 	bl	8003222 <HAL_NVIC_EnableIRQ>
}
 8002c74:	bf00      	nop
 8002c76:	3730      	adds	r7, #48	@ 0x30
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40011000 	.word	0x40011000
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40020000 	.word	0x40020000
 8002c88:	40004400 	.word	0x40004400

08002c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c90:	bf00      	nop
 8002c92:	e7fd      	b.n	8002c90 <NMI_Handler+0x4>

08002c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <HardFault_Handler+0x4>

08002c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <MemManage_Handler+0x4>

08002ca4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <BusFault_Handler+0x4>

08002cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <UsageFault_Handler+0x4>

08002cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cc6:	f000 f971 	bl	8002fac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002cca:	f005 fb2d 	bl	8008328 <xTaskGetSchedulerState>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d001      	beq.n	8002cd8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002cd4:	f006 f928 	bl	8008f28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cd8:	bf00      	nop
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ce0:	4802      	ldr	r0, [pc, #8]	@ (8002cec <USART1_IRQHandler+0x10>)
 8002ce2:	f002 fa21 	bl	8005128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000474 	.word	0x20000474

08002cf0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002cf4:	4802      	ldr	r0, [pc, #8]	@ (8002d00 <USART2_IRQHandler+0x10>)
 8002cf6:	f002 fa17 	bl	8005128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	200004bc 	.word	0x200004bc

08002d04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return 1;
 8002d08:	2301      	movs	r3, #1
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <_kill>:

int _kill(int pid, int sig)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d1e:	f007 fa1f 	bl	800a160 <__errno>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2216      	movs	r2, #22
 8002d26:	601a      	str	r2, [r3, #0]
  return -1;
 8002d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_exit>:

void _exit (int status)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff ffe7 	bl	8002d14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d46:	bf00      	nop
 8002d48:	e7fd      	b.n	8002d46 <_exit+0x12>

08002d4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	e00a      	b.n	8002d72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d5c:	f3af 8000 	nop.w
 8002d60:	4601      	mov	r1, r0
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	60ba      	str	r2, [r7, #8]
 8002d68:	b2ca      	uxtb	r2, r1
 8002d6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	dbf0      	blt.n	8002d5c <_read+0x12>
  }

  return len;
 8002d7a:	687b      	ldr	r3, [r7, #4]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	e009      	b.n	8002daa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	60ba      	str	r2, [r7, #8]
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	3301      	adds	r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	dbf1      	blt.n	8002d96 <_write+0x12>
  }
  return len;
 8002db2:	687b      	ldr	r3, [r7, #4]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <_close>:

int _close(int file)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002de4:	605a      	str	r2, [r3, #4]
  return 0;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <_isatty>:

int _isatty(int file)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dfc:	2301      	movs	r3, #1
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b085      	sub	sp, #20
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e2c:	4a14      	ldr	r2, [pc, #80]	@ (8002e80 <_sbrk+0x5c>)
 8002e2e:	4b15      	ldr	r3, [pc, #84]	@ (8002e84 <_sbrk+0x60>)
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e38:	4b13      	ldr	r3, [pc, #76]	@ (8002e88 <_sbrk+0x64>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d102      	bne.n	8002e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e40:	4b11      	ldr	r3, [pc, #68]	@ (8002e88 <_sbrk+0x64>)
 8002e42:	4a12      	ldr	r2, [pc, #72]	@ (8002e8c <_sbrk+0x68>)
 8002e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e46:	4b10      	ldr	r3, [pc, #64]	@ (8002e88 <_sbrk+0x64>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d207      	bcs.n	8002e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e54:	f007 f984 	bl	800a160 <__errno>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	220c      	movs	r2, #12
 8002e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e62:	e009      	b.n	8002e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e64:	4b08      	ldr	r3, [pc, #32]	@ (8002e88 <_sbrk+0x64>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e6a:	4b07      	ldr	r3, [pc, #28]	@ (8002e88 <_sbrk+0x64>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	4a05      	ldr	r2, [pc, #20]	@ (8002e88 <_sbrk+0x64>)
 8002e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e76:	68fb      	ldr	r3, [r7, #12]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20018000 	.word	0x20018000
 8002e84:	00000400 	.word	0x00000400
 8002e88:	20000584 	.word	0x20000584
 8002e8c:	20005028 	.word	0x20005028

08002e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e94:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <SystemInit+0x20>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9a:	4a05      	ldr	r2, [pc, #20]	@ (8002eb0 <SystemInit+0x20>)
 8002e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002eb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002eec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002eb8:	f7ff ffea 	bl	8002e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ebc:	480c      	ldr	r0, [pc, #48]	@ (8002ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ebe:	490d      	ldr	r1, [pc, #52]	@ (8002ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec4:	e002      	b.n	8002ecc <LoopCopyDataInit>

08002ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eca:	3304      	adds	r3, #4

08002ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed0:	d3f9      	bcc.n	8002ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8002f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed8:	e001      	b.n	8002ede <LoopFillZerobss>

08002eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002edc:	3204      	adds	r2, #4

08002ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee0:	d3fb      	bcc.n	8002eda <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002ee2:	f007 f943 	bl	800a16c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ee6:	f7fe f9ef 	bl	80012c8 <main>
  bx  lr    
 8002eea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002eec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef4:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8002ef8:	0800ccb0 	.word	0x0800ccb0
  ldr r2, =_sbss
 8002efc:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8002f00:	20005028 	.word	0x20005028

08002f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f04:	e7fe      	b.n	8002f04 <ADC_IRQHandler>
	...

08002f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f48 <HAL_Init+0x40>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0d      	ldr	r2, [pc, #52]	@ (8002f48 <HAL_Init+0x40>)
 8002f12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f18:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <HAL_Init+0x40>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002f48 <HAL_Init+0x40>)
 8002f1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f24:	4b08      	ldr	r3, [pc, #32]	@ (8002f48 <HAL_Init+0x40>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a07      	ldr	r2, [pc, #28]	@ (8002f48 <HAL_Init+0x40>)
 8002f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f30:	2003      	movs	r0, #3
 8002f32:	f000 f94f 	bl	80031d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f36:	200f      	movs	r0, #15
 8002f38:	f000 f808 	bl	8002f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f3c:	f7ff fd0a 	bl	8002954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023c00 	.word	0x40023c00

08002f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f54:	4b12      	ldr	r3, [pc, #72]	@ (8002fa0 <HAL_InitTick+0x54>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b12      	ldr	r3, [pc, #72]	@ (8002fa4 <HAL_InitTick+0x58>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 f967 	bl	800323e <HAL_SYSTICK_Config>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e00e      	b.n	8002f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b0f      	cmp	r3, #15
 8002f7e:	d80a      	bhi.n	8002f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f80:	2200      	movs	r2, #0
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	f04f 30ff 	mov.w	r0, #4294967295
 8002f88:	f000 f92f 	bl	80031ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f8c:	4a06      	ldr	r2, [pc, #24]	@ (8002fa8 <HAL_InitTick+0x5c>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	e000      	b.n	8002f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000180 	.word	0x20000180
 8002fa4:	20000188 	.word	0x20000188
 8002fa8:	20000184 	.word	0x20000184

08002fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	@ (8002fcc <HAL_IncTick+0x20>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4b06      	ldr	r3, [pc, #24]	@ (8002fd0 <HAL_IncTick+0x24>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a04      	ldr	r2, [pc, #16]	@ (8002fd0 <HAL_IncTick+0x24>)
 8002fbe:	6013      	str	r3, [r2, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000188 	.word	0x20000188
 8002fd0:	20000588 	.word	0x20000588

08002fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	@ (8002fe8 <HAL_GetTick+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000588 	.word	0x20000588

08002fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ff4:	f7ff ffee 	bl	8002fd4 <HAL_GetTick>
 8002ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d005      	beq.n	8003012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003006:	4b0a      	ldr	r3, [pc, #40]	@ (8003030 <HAL_Delay+0x44>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4413      	add	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003012:	bf00      	nop
 8003014:	f7ff ffde 	bl	8002fd4 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	429a      	cmp	r2, r3
 8003022:	d8f7      	bhi.n	8003014 <HAL_Delay+0x28>
  {
  }
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000188 	.word	0x20000188

08003034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003044:	4b0c      	ldr	r3, [pc, #48]	@ (8003078 <__NVIC_SetPriorityGrouping+0x44>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003050:	4013      	ands	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800305c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003066:	4a04      	ldr	r2, [pc, #16]	@ (8003078 <__NVIC_SetPriorityGrouping+0x44>)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	60d3      	str	r3, [r2, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003080:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <__NVIC_GetPriorityGrouping+0x18>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	0a1b      	lsrs	r3, r3, #8
 8003086:	f003 0307 	and.w	r3, r3, #7
}
 800308a:	4618      	mov	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	db0b      	blt.n	80030c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	f003 021f 	and.w	r2, r3, #31
 80030b0:	4907      	ldr	r1, [pc, #28]	@ (80030d0 <__NVIC_EnableIRQ+0x38>)
 80030b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2001      	movs	r0, #1
 80030ba:	fa00 f202 	lsl.w	r2, r0, r2
 80030be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	e000e100 	.word	0xe000e100

080030d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	6039      	str	r1, [r7, #0]
 80030de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	db0a      	blt.n	80030fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	490c      	ldr	r1, [pc, #48]	@ (8003120 <__NVIC_SetPriority+0x4c>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	0112      	lsls	r2, r2, #4
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	440b      	add	r3, r1
 80030f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030fc:	e00a      	b.n	8003114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	b2da      	uxtb	r2, r3
 8003102:	4908      	ldr	r1, [pc, #32]	@ (8003124 <__NVIC_SetPriority+0x50>)
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	3b04      	subs	r3, #4
 800310c:	0112      	lsls	r2, r2, #4
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	440b      	add	r3, r1
 8003112:	761a      	strb	r2, [r3, #24]
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	e000e100 	.word	0xe000e100
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003128:	b480      	push	{r7}
 800312a:	b089      	sub	sp, #36	@ 0x24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f1c3 0307 	rsb	r3, r3, #7
 8003142:	2b04      	cmp	r3, #4
 8003144:	bf28      	it	cs
 8003146:	2304      	movcs	r3, #4
 8003148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3304      	adds	r3, #4
 800314e:	2b06      	cmp	r3, #6
 8003150:	d902      	bls.n	8003158 <NVIC_EncodePriority+0x30>
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3b03      	subs	r3, #3
 8003156:	e000      	b.n	800315a <NVIC_EncodePriority+0x32>
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800315c:	f04f 32ff 	mov.w	r2, #4294967295
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43da      	mvns	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	401a      	ands	r2, r3
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003170:	f04f 31ff 	mov.w	r1, #4294967295
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	43d9      	mvns	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003180:	4313      	orrs	r3, r2
         );
}
 8003182:	4618      	mov	r0, r3
 8003184:	3724      	adds	r7, #36	@ 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031a0:	d301      	bcc.n	80031a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a2:	2301      	movs	r3, #1
 80031a4:	e00f      	b.n	80031c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031a6:	4a0a      	ldr	r2, [pc, #40]	@ (80031d0 <SysTick_Config+0x40>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ae:	210f      	movs	r1, #15
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295
 80031b4:	f7ff ff8e 	bl	80030d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b8:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <SysTick_Config+0x40>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031be:	4b04      	ldr	r3, [pc, #16]	@ (80031d0 <SysTick_Config+0x40>)
 80031c0:	2207      	movs	r2, #7
 80031c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	e000e010 	.word	0xe000e010

080031d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ff29 	bl	8003034 <__NVIC_SetPriorityGrouping>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b086      	sub	sp, #24
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4603      	mov	r3, r0
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031fc:	f7ff ff3e 	bl	800307c <__NVIC_GetPriorityGrouping>
 8003200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	6978      	ldr	r0, [r7, #20]
 8003208:	f7ff ff8e 	bl	8003128 <NVIC_EncodePriority>
 800320c:	4602      	mov	r2, r0
 800320e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff5d 	bl	80030d4 <__NVIC_SetPriority>
}
 800321a:	bf00      	nop
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	4603      	mov	r3, r0
 800322a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff31 	bl	8003098 <__NVIC_EnableIRQ>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff ffa2 	bl	8003190 <SysTick_Config>
 800324c:	4603      	mov	r3, r0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003262:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003264:	f7ff feb6 	bl	8002fd4 <HAL_GetTick>
 8003268:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d008      	beq.n	8003288 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2280      	movs	r2, #128	@ 0x80
 800327a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e052      	b.n	800332e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0216 	bic.w	r2, r2, #22
 8003296:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d103      	bne.n	80032b8 <HAL_DMA_Abort+0x62>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0208 	bic.w	r2, r2, #8
 80032c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d8:	e013      	b.n	8003302 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032da:	f7ff fe7b 	bl	8002fd4 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b05      	cmp	r3, #5
 80032e6:	d90c      	bls.n	8003302 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2203      	movs	r2, #3
 80032f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e015      	b.n	800332e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1e4      	bne.n	80032da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003314:	223f      	movs	r2, #63	@ 0x3f
 8003316:	409a      	lsls	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d004      	beq.n	8003354 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2280      	movs	r2, #128	@ 0x80
 800334e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e00c      	b.n	800336e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2205      	movs	r2, #5
 8003358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800337c:	b480      	push	{r7}
 800337e:	b089      	sub	sp, #36	@ 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
 8003396:	e159      	b.n	800364c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003398:	2201      	movs	r2, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	f040 8148 	bne.w	8003646 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d005      	beq.n	80033ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d130      	bne.n	8003430 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	2203      	movs	r2, #3
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003404:	2201      	movs	r2, #1
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 0201 	and.w	r2, r3, #1
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	2b03      	cmp	r3, #3
 800343a:	d017      	beq.n	800346c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d123      	bne.n	80034c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	08da      	lsrs	r2, r3, #3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3208      	adds	r2, #8
 8003480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	220f      	movs	r2, #15
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	08da      	lsrs	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3208      	adds	r2, #8
 80034ba:	69b9      	ldr	r1, [r7, #24]
 80034bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0203 	and.w	r2, r3, #3
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80a2 	beq.w	8003646 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	4b57      	ldr	r3, [pc, #348]	@ (8003664 <HAL_GPIO_Init+0x2e8>)
 8003508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350a:	4a56      	ldr	r2, [pc, #344]	@ (8003664 <HAL_GPIO_Init+0x2e8>)
 800350c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003510:	6453      	str	r3, [r2, #68]	@ 0x44
 8003512:	4b54      	ldr	r3, [pc, #336]	@ (8003664 <HAL_GPIO_Init+0x2e8>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800351e:	4a52      	ldr	r2, [pc, #328]	@ (8003668 <HAL_GPIO_Init+0x2ec>)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	3302      	adds	r3, #2
 8003526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	220f      	movs	r2, #15
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a49      	ldr	r2, [pc, #292]	@ (800366c <HAL_GPIO_Init+0x2f0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d019      	beq.n	800357e <HAL_GPIO_Init+0x202>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a48      	ldr	r2, [pc, #288]	@ (8003670 <HAL_GPIO_Init+0x2f4>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d013      	beq.n	800357a <HAL_GPIO_Init+0x1fe>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a47      	ldr	r2, [pc, #284]	@ (8003674 <HAL_GPIO_Init+0x2f8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d00d      	beq.n	8003576 <HAL_GPIO_Init+0x1fa>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a46      	ldr	r2, [pc, #280]	@ (8003678 <HAL_GPIO_Init+0x2fc>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d007      	beq.n	8003572 <HAL_GPIO_Init+0x1f6>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a45      	ldr	r2, [pc, #276]	@ (800367c <HAL_GPIO_Init+0x300>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d101      	bne.n	800356e <HAL_GPIO_Init+0x1f2>
 800356a:	2304      	movs	r3, #4
 800356c:	e008      	b.n	8003580 <HAL_GPIO_Init+0x204>
 800356e:	2307      	movs	r3, #7
 8003570:	e006      	b.n	8003580 <HAL_GPIO_Init+0x204>
 8003572:	2303      	movs	r3, #3
 8003574:	e004      	b.n	8003580 <HAL_GPIO_Init+0x204>
 8003576:	2302      	movs	r3, #2
 8003578:	e002      	b.n	8003580 <HAL_GPIO_Init+0x204>
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <HAL_GPIO_Init+0x204>
 800357e:	2300      	movs	r3, #0
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	f002 0203 	and.w	r2, r2, #3
 8003586:	0092      	lsls	r2, r2, #2
 8003588:	4093      	lsls	r3, r2
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003590:	4935      	ldr	r1, [pc, #212]	@ (8003668 <HAL_GPIO_Init+0x2ec>)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	089b      	lsrs	r3, r3, #2
 8003596:	3302      	adds	r3, #2
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800359e:	4b38      	ldr	r3, [pc, #224]	@ (8003680 <HAL_GPIO_Init+0x304>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4013      	ands	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035c2:	4a2f      	ldr	r2, [pc, #188]	@ (8003680 <HAL_GPIO_Init+0x304>)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003680 <HAL_GPIO_Init+0x304>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035ec:	4a24      	ldr	r2, [pc, #144]	@ (8003680 <HAL_GPIO_Init+0x304>)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035f2:	4b23      	ldr	r3, [pc, #140]	@ (8003680 <HAL_GPIO_Init+0x304>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003616:	4a1a      	ldr	r2, [pc, #104]	@ (8003680 <HAL_GPIO_Init+0x304>)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800361c:	4b18      	ldr	r3, [pc, #96]	@ (8003680 <HAL_GPIO_Init+0x304>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003640:	4a0f      	ldr	r2, [pc, #60]	@ (8003680 <HAL_GPIO_Init+0x304>)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3301      	adds	r3, #1
 800364a:	61fb      	str	r3, [r7, #28]
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b0f      	cmp	r3, #15
 8003650:	f67f aea2 	bls.w	8003398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003654:	bf00      	nop
 8003656:	bf00      	nop
 8003658:	3724      	adds	r7, #36	@ 0x24
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800
 8003668:	40013800 	.word	0x40013800
 800366c:	40020000 	.word	0x40020000
 8003670:	40020400 	.word	0x40020400
 8003674:	40020800 	.word	0x40020800
 8003678:	40020c00 	.word	0x40020c00
 800367c:	40021000 	.word	0x40021000
 8003680:	40013c00 	.word	0x40013c00

08003684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e12b      	b.n	80038ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff f97e 	bl	80029ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2224      	movs	r2, #36	@ 0x24
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036e8:	f001 fbf6 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 80036ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4a81      	ldr	r2, [pc, #516]	@ (80038f8 <HAL_I2C_Init+0x274>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d807      	bhi.n	8003708 <HAL_I2C_Init+0x84>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a80      	ldr	r2, [pc, #512]	@ (80038fc <HAL_I2C_Init+0x278>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	bf94      	ite	ls
 8003700:	2301      	movls	r3, #1
 8003702:	2300      	movhi	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	e006      	b.n	8003716 <HAL_I2C_Init+0x92>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a7d      	ldr	r2, [pc, #500]	@ (8003900 <HAL_I2C_Init+0x27c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	bf94      	ite	ls
 8003710:	2301      	movls	r3, #1
 8003712:	2300      	movhi	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e0e7      	b.n	80038ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4a78      	ldr	r2, [pc, #480]	@ (8003904 <HAL_I2C_Init+0x280>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	0c9b      	lsrs	r3, r3, #18
 8003728:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4a6a      	ldr	r2, [pc, #424]	@ (80038f8 <HAL_I2C_Init+0x274>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d802      	bhi.n	8003758 <HAL_I2C_Init+0xd4>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	3301      	adds	r3, #1
 8003756:	e009      	b.n	800376c <HAL_I2C_Init+0xe8>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	4a69      	ldr	r2, [pc, #420]	@ (8003908 <HAL_I2C_Init+0x284>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	099b      	lsrs	r3, r3, #6
 800376a:	3301      	adds	r3, #1
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	430b      	orrs	r3, r1
 8003772:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800377e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	495c      	ldr	r1, [pc, #368]	@ (80038f8 <HAL_I2C_Init+0x274>)
 8003788:	428b      	cmp	r3, r1
 800378a:	d819      	bhi.n	80037c0 <HAL_I2C_Init+0x13c>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1e59      	subs	r1, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	fbb1 f3f3 	udiv	r3, r1, r3
 800379a:	1c59      	adds	r1, r3, #1
 800379c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037a0:	400b      	ands	r3, r1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HAL_I2C_Init+0x138>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1e59      	subs	r1, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037b4:	3301      	adds	r3, #1
 80037b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ba:	e051      	b.n	8003860 <HAL_I2C_Init+0x1dc>
 80037bc:	2304      	movs	r3, #4
 80037be:	e04f      	b.n	8003860 <HAL_I2C_Init+0x1dc>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d111      	bne.n	80037ec <HAL_I2C_Init+0x168>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1e58      	subs	r0, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6859      	ldr	r1, [r3, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	440b      	add	r3, r1
 80037d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037da:	3301      	adds	r3, #1
 80037dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	e012      	b.n	8003812 <HAL_I2C_Init+0x18e>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1e58      	subs	r0, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6859      	ldr	r1, [r3, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	0099      	lsls	r1, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003802:	3301      	adds	r3, #1
 8003804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003808:	2b00      	cmp	r3, #0
 800380a:	bf0c      	ite	eq
 800380c:	2301      	moveq	r3, #1
 800380e:	2300      	movne	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Init+0x196>
 8003816:	2301      	movs	r3, #1
 8003818:	e022      	b.n	8003860 <HAL_I2C_Init+0x1dc>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10e      	bne.n	8003840 <HAL_I2C_Init+0x1bc>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1e58      	subs	r0, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6859      	ldr	r1, [r3, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	440b      	add	r3, r1
 8003830:	fbb0 f3f3 	udiv	r3, r0, r3
 8003834:	3301      	adds	r3, #1
 8003836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800383a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800383e:	e00f      	b.n	8003860 <HAL_I2C_Init+0x1dc>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1e58      	subs	r0, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6859      	ldr	r1, [r3, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	0099      	lsls	r1, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	fbb0 f3f3 	udiv	r3, r0, r3
 8003856:	3301      	adds	r3, #1
 8003858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	6809      	ldr	r1, [r1, #0]
 8003864:	4313      	orrs	r3, r2
 8003866:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69da      	ldr	r2, [r3, #28]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800388e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6911      	ldr	r1, [r2, #16]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68d2      	ldr	r2, [r2, #12]
 800389a:	4311      	orrs	r1, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	430b      	orrs	r3, r1
 80038a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	000186a0 	.word	0x000186a0
 80038fc:	001e847f 	.word	0x001e847f
 8003900:	003d08ff 	.word	0x003d08ff
 8003904:	431bde83 	.word	0x431bde83
 8003908:	10624dd3 	.word	0x10624dd3

0800390c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af02      	add	r7, sp, #8
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	607a      	str	r2, [r7, #4]
 8003916:	461a      	mov	r2, r3
 8003918:	460b      	mov	r3, r1
 800391a:	817b      	strh	r3, [r7, #10]
 800391c:	4613      	mov	r3, r2
 800391e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003920:	f7ff fb58 	bl	8002fd4 <HAL_GetTick>
 8003924:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b20      	cmp	r3, #32
 8003930:	f040 80e0 	bne.w	8003af4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	2319      	movs	r3, #25
 800393a:	2201      	movs	r2, #1
 800393c:	4970      	ldr	r1, [pc, #448]	@ (8003b00 <HAL_I2C_Master_Transmit+0x1f4>)
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fc64 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800394a:	2302      	movs	r3, #2
 800394c:	e0d3      	b.n	8003af6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_I2C_Master_Transmit+0x50>
 8003958:	2302      	movs	r3, #2
 800395a:	e0cc      	b.n	8003af6 <HAL_I2C_Master_Transmit+0x1ea>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b01      	cmp	r3, #1
 8003970:	d007      	beq.n	8003982 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0201 	orr.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003990:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2221      	movs	r2, #33	@ 0x21
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2210      	movs	r2, #16
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	893a      	ldrh	r2, [r7, #8]
 80039b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4a50      	ldr	r2, [pc, #320]	@ (8003b04 <HAL_I2C_Master_Transmit+0x1f8>)
 80039c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039c4:	8979      	ldrh	r1, [r7, #10]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	6a3a      	ldr	r2, [r7, #32]
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 face 	bl	8003f6c <I2C_MasterRequestWrite>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e08d      	b.n	8003af6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039da:	2300      	movs	r3, #0
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80039f0:	e066      	b.n	8003ac0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	6a39      	ldr	r1, [r7, #32]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 fd22 	bl	8004440 <I2C_WaitOnTXEFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00d      	beq.n	8003a1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d107      	bne.n	8003a1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e06b      	b.n	8003af6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	781a      	ldrb	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d11b      	bne.n	8003a94 <HAL_I2C_Master_Transmit+0x188>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d017      	beq.n	8003a94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	6a39      	ldr	r1, [r7, #32]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 fd19 	bl	80044d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00d      	beq.n	8003ac0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d107      	bne.n	8003abc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e01a      	b.n	8003af6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d194      	bne.n	80039f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	e000      	b.n	8003af6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
  }
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	00100002 	.word	0x00100002
 8003b04:	ffff0000 	.word	0xffff0000

08003b08 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08c      	sub	sp, #48	@ 0x30
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	461a      	mov	r2, r3
 8003b14:	460b      	mov	r3, r1
 8003b16:	817b      	strh	r3, [r7, #10]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b1c:	f7ff fa5a 	bl	8002fd4 <HAL_GetTick>
 8003b20:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b20      	cmp	r3, #32
 8003b2c:	f040 8217 	bne.w	8003f5e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	2319      	movs	r3, #25
 8003b36:	2201      	movs	r2, #1
 8003b38:	497c      	ldr	r1, [pc, #496]	@ (8003d2c <HAL_I2C_Master_Receive+0x224>)
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fb66 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003b46:	2302      	movs	r3, #2
 8003b48:	e20a      	b.n	8003f60 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_I2C_Master_Receive+0x50>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e203      	b.n	8003f60 <HAL_I2C_Master_Receive+0x458>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d007      	beq.n	8003b7e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0201 	orr.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2222      	movs	r2, #34	@ 0x22
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2210      	movs	r2, #16
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	893a      	ldrh	r2, [r7, #8]
 8003bae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a5c      	ldr	r2, [pc, #368]	@ (8003d30 <HAL_I2C_Master_Receive+0x228>)
 8003bbe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bc0:	8979      	ldrh	r1, [r7, #10]
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 fa52 	bl	8004070 <I2C_MasterRequestRead>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e1c4      	b.n	8003f60 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d113      	bne.n	8003c06 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bde:	2300      	movs	r3, #0
 8003be0:	623b      	str	r3, [r7, #32]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	623b      	str	r3, [r7, #32]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	623b      	str	r3, [r7, #32]
 8003bf2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	e198      	b.n	8003f38 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d11b      	bne.n	8003c46 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	e178      	b.n	8003f38 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d11b      	bne.n	8003c86 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	e158      	b.n	8003f38 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003cac:	e144      	b.n	8003f38 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	f200 80f1 	bhi.w	8003e9a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d123      	bne.n	8003d08 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 fc4b 	bl	8004560 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e145      	b.n	8003f60 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d06:	e117      	b.n	8003f38 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d14e      	bne.n	8003dae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d16:	2200      	movs	r2, #0
 8003d18:	4906      	ldr	r1, [pc, #24]	@ (8003d34 <HAL_I2C_Master_Receive+0x22c>)
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fa76 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d008      	beq.n	8003d38 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e11a      	b.n	8003f60 <HAL_I2C_Master_Receive+0x458>
 8003d2a:	bf00      	nop
 8003d2c:	00100002 	.word	0x00100002
 8003d30:	ffff0000 	.word	0xffff0000
 8003d34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691a      	ldr	r2, [r3, #16]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003dac:	e0c4      	b.n	8003f38 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	2200      	movs	r2, #0
 8003db6:	496c      	ldr	r1, [pc, #432]	@ (8003f68 <HAL_I2C_Master_Receive+0x460>)
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 fa27 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0cb      	b.n	8003f60 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e10:	2200      	movs	r2, #0
 8003e12:	4955      	ldr	r1, [pc, #340]	@ (8003f68 <HAL_I2C_Master_Receive+0x460>)
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 f9f9 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e09d      	b.n	8003f60 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e98:	e04e      	b.n	8003f38 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 fb5e 	bl	8004560 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e058      	b.n	8003f60 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d124      	bne.n	8003f38 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d107      	bne.n	8003f06 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f04:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f47f aeb6 	bne.w	8003cae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	e000      	b.n	8003f60 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003f5e:	2302      	movs	r3, #2
  }
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3728      	adds	r7, #40	@ 0x28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	00010004 	.word	0x00010004

08003f6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d006      	beq.n	8003f96 <I2C_MasterRequestWrite+0x2a>
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d003      	beq.n	8003f96 <I2C_MasterRequestWrite+0x2a>
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f94:	d108      	bne.n	8003fa8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	e00b      	b.n	8003fc0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fac:	2b12      	cmp	r3, #18
 8003fae:	d107      	bne.n	8003fc0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f91d 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00d      	beq.n	8003ff4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fe6:	d103      	bne.n	8003ff0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e035      	b.n	8004060 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ffc:	d108      	bne.n	8004010 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ffe:	897b      	ldrh	r3, [r7, #10]
 8004000:	b2db      	uxtb	r3, r3
 8004002:	461a      	mov	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800400c:	611a      	str	r2, [r3, #16]
 800400e:	e01b      	b.n	8004048 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004010:	897b      	ldrh	r3, [r7, #10]
 8004012:	11db      	asrs	r3, r3, #7
 8004014:	b2db      	uxtb	r3, r3
 8004016:	f003 0306 	and.w	r3, r3, #6
 800401a:	b2db      	uxtb	r3, r3
 800401c:	f063 030f 	orn	r3, r3, #15
 8004020:	b2da      	uxtb	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	490e      	ldr	r1, [pc, #56]	@ (8004068 <I2C_MasterRequestWrite+0xfc>)
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f966 	bl	8004300 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e010      	b.n	8004060 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800403e:	897b      	ldrh	r3, [r7, #10]
 8004040:	b2da      	uxtb	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	4907      	ldr	r1, [pc, #28]	@ (800406c <I2C_MasterRequestWrite+0x100>)
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f956 	bl	8004300 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	00010008 	.word	0x00010008
 800406c:	00010002 	.word	0x00010002

08004070 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	607a      	str	r2, [r7, #4]
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	460b      	mov	r3, r1
 800407e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004084:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004094:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b08      	cmp	r3, #8
 800409a:	d006      	beq.n	80040aa <I2C_MasterRequestRead+0x3a>
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d003      	beq.n	80040aa <I2C_MasterRequestRead+0x3a>
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040a8:	d108      	bne.n	80040bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	e00b      	b.n	80040d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c0:	2b11      	cmp	r3, #17
 80040c2:	d107      	bne.n	80040d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 f893 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00d      	beq.n	8004108 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040fa:	d103      	bne.n	8004104 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004102:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e079      	b.n	80041fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004110:	d108      	bne.n	8004124 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004112:	897b      	ldrh	r3, [r7, #10]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	b2da      	uxtb	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	611a      	str	r2, [r3, #16]
 8004122:	e05f      	b.n	80041e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004124:	897b      	ldrh	r3, [r7, #10]
 8004126:	11db      	asrs	r3, r3, #7
 8004128:	b2db      	uxtb	r3, r3
 800412a:	f003 0306 	and.w	r3, r3, #6
 800412e:	b2db      	uxtb	r3, r3
 8004130:	f063 030f 	orn	r3, r3, #15
 8004134:	b2da      	uxtb	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	4930      	ldr	r1, [pc, #192]	@ (8004204 <I2C_MasterRequestRead+0x194>)
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f8dc 	bl	8004300 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e054      	b.n	80041fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004152:	897b      	ldrh	r3, [r7, #10]
 8004154:	b2da      	uxtb	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	4929      	ldr	r1, [pc, #164]	@ (8004208 <I2C_MasterRequestRead+0x198>)
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f8cc 	bl	8004300 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e044      	b.n	80041fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004172:	2300      	movs	r3, #0
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004196:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f831 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00d      	beq.n	80041cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041be:	d103      	bne.n	80041c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041c6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e017      	b.n	80041fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80041cc:	897b      	ldrh	r3, [r7, #10]
 80041ce:	11db      	asrs	r3, r3, #7
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f003 0306 	and.w	r3, r3, #6
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f063 030e 	orn	r3, r3, #14
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	4907      	ldr	r1, [pc, #28]	@ (8004208 <I2C_MasterRequestRead+0x198>)
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f888 	bl	8004300 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	00010008 	.word	0x00010008
 8004208:	00010002 	.word	0x00010002

0800420c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	4613      	mov	r3, r2
 800421a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800421c:	e048      	b.n	80042b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004224:	d044      	beq.n	80042b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004226:	f7fe fed5 	bl	8002fd4 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d302      	bcc.n	800423c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d139      	bne.n	80042b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	0c1b      	lsrs	r3, r3, #16
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b01      	cmp	r3, #1
 8004244:	d10d      	bne.n	8004262 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	43da      	mvns	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4013      	ands	r3, r2
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	bf0c      	ite	eq
 8004258:	2301      	moveq	r3, #1
 800425a:	2300      	movne	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	461a      	mov	r2, r3
 8004260:	e00c      	b.n	800427c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	43da      	mvns	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4013      	ands	r3, r2
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf0c      	ite	eq
 8004274:	2301      	moveq	r3, #1
 8004276:	2300      	movne	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	429a      	cmp	r2, r3
 8004280:	d116      	bne.n	80042b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429c:	f043 0220 	orr.w	r2, r3, #32
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e023      	b.n	80042f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	0c1b      	lsrs	r3, r3, #16
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d10d      	bne.n	80042d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	43da      	mvns	r2, r3
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	4013      	ands	r3, r2
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf0c      	ite	eq
 80042cc:	2301      	moveq	r3, #1
 80042ce:	2300      	movne	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	461a      	mov	r2, r3
 80042d4:	e00c      	b.n	80042f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	43da      	mvns	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4013      	ands	r3, r2
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bf0c      	ite	eq
 80042e8:	2301      	moveq	r3, #1
 80042ea:	2300      	movne	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d093      	beq.n	800421e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800430e:	e071      	b.n	80043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800431e:	d123      	bne.n	8004368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800432e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004338:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004354:	f043 0204 	orr.w	r2, r3, #4
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e067      	b.n	8004438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436e:	d041      	beq.n	80043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004370:	f7fe fe30 	bl	8002fd4 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	429a      	cmp	r2, r3
 800437e:	d302      	bcc.n	8004386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d136      	bne.n	80043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	d10c      	bne.n	80043aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	43da      	mvns	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4013      	ands	r3, r2
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	bf14      	ite	ne
 80043a2:	2301      	movne	r3, #1
 80043a4:	2300      	moveq	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	e00b      	b.n	80043c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	43da      	mvns	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4013      	ands	r3, r2
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	bf14      	ite	ne
 80043bc:	2301      	movne	r3, #1
 80043be:	2300      	moveq	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d016      	beq.n	80043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e0:	f043 0220 	orr.w	r2, r3, #32
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e021      	b.n	8004438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	0c1b      	lsrs	r3, r3, #16
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d10c      	bne.n	8004418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	43da      	mvns	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4013      	ands	r3, r2
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	bf14      	ite	ne
 8004410:	2301      	movne	r3, #1
 8004412:	2300      	moveq	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	e00b      	b.n	8004430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	43da      	mvns	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4013      	ands	r3, r2
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	bf14      	ite	ne
 800442a:	2301      	movne	r3, #1
 800442c:	2300      	moveq	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	f47f af6d 	bne.w	8004310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800444c:	e034      	b.n	80044b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f8e3 	bl	800461a <I2C_IsAcknowledgeFailed>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e034      	b.n	80044c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d028      	beq.n	80044b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004466:	f7fe fdb5 	bl	8002fd4 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	429a      	cmp	r2, r3
 8004474:	d302      	bcc.n	800447c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d11d      	bne.n	80044b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004486:	2b80      	cmp	r3, #128	@ 0x80
 8004488:	d016      	beq.n	80044b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a4:	f043 0220 	orr.w	r2, r3, #32
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e007      	b.n	80044c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c2:	2b80      	cmp	r3, #128	@ 0x80
 80044c4:	d1c3      	bne.n	800444e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044dc:	e034      	b.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 f89b 	bl	800461a <I2C_IsAcknowledgeFailed>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e034      	b.n	8004558 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f4:	d028      	beq.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f6:	f7fe fd6d 	bl	8002fd4 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	429a      	cmp	r2, r3
 8004504:	d302      	bcc.n	800450c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d11d      	bne.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b04      	cmp	r3, #4
 8004518:	d016      	beq.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004534:	f043 0220 	orr.w	r2, r3, #32
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e007      	b.n	8004558 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b04      	cmp	r3, #4
 8004554:	d1c3      	bne.n	80044de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800456c:	e049      	b.n	8004602 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b10      	cmp	r3, #16
 800457a:	d119      	bne.n	80045b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f06f 0210 	mvn.w	r2, #16
 8004584:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e030      	b.n	8004612 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b0:	f7fe fd10 	bl	8002fd4 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d302      	bcc.n	80045c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d11d      	bne.n	8004602 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d0:	2b40      	cmp	r3, #64	@ 0x40
 80045d2:	d016      	beq.n	8004602 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	f043 0220 	orr.w	r2, r3, #32
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e007      	b.n	8004612 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460c:	2b40      	cmp	r3, #64	@ 0x40
 800460e:	d1ae      	bne.n	800456e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800462c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004630:	d11b      	bne.n	800466a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800463a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004656:	f043 0204 	orr.w	r2, r3, #4
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e267      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d075      	beq.n	8004782 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004696:	4b88      	ldr	r3, [pc, #544]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 030c 	and.w	r3, r3, #12
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d00c      	beq.n	80046bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046a2:	4b85      	ldr	r3, [pc, #532]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d112      	bne.n	80046d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ae:	4b82      	ldr	r3, [pc, #520]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046ba:	d10b      	bne.n	80046d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046bc:	4b7e      	ldr	r3, [pc, #504]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d05b      	beq.n	8004780 <HAL_RCC_OscConfig+0x108>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d157      	bne.n	8004780 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e242      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046dc:	d106      	bne.n	80046ec <HAL_RCC_OscConfig+0x74>
 80046de:	4b76      	ldr	r3, [pc, #472]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a75      	ldr	r2, [pc, #468]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	e01d      	b.n	8004728 <HAL_RCC_OscConfig+0xb0>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046f4:	d10c      	bne.n	8004710 <HAL_RCC_OscConfig+0x98>
 80046f6:	4b70      	ldr	r3, [pc, #448]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a6f      	ldr	r2, [pc, #444]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 80046fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	4b6d      	ldr	r3, [pc, #436]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a6c      	ldr	r2, [pc, #432]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	e00b      	b.n	8004728 <HAL_RCC_OscConfig+0xb0>
 8004710:	4b69      	ldr	r3, [pc, #420]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a68      	ldr	r2, [pc, #416]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	4b66      	ldr	r3, [pc, #408]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a65      	ldr	r2, [pc, #404]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004722:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d013      	beq.n	8004758 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7fe fc50 	bl	8002fd4 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004738:	f7fe fc4c 	bl	8002fd4 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b64      	cmp	r3, #100	@ 0x64
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e207      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474a:	4b5b      	ldr	r3, [pc, #364]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCC_OscConfig+0xc0>
 8004756:	e014      	b.n	8004782 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004758:	f7fe fc3c 	bl	8002fd4 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004760:	f7fe fc38 	bl	8002fd4 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b64      	cmp	r3, #100	@ 0x64
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e1f3      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004772:	4b51      	ldr	r3, [pc, #324]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0xe8>
 800477e:	e000      	b.n	8004782 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d063      	beq.n	8004856 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800478e:	4b4a      	ldr	r3, [pc, #296]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00b      	beq.n	80047b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800479a:	4b47      	ldr	r3, [pc, #284]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d11c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047a6:	4b44      	ldr	r3, [pc, #272]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d116      	bne.n	80047e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b2:	4b41      	ldr	r3, [pc, #260]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_RCC_OscConfig+0x152>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d001      	beq.n	80047ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e1c7      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ca:	4b3b      	ldr	r3, [pc, #236]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4937      	ldr	r1, [pc, #220]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047de:	e03a      	b.n	8004856 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047e8:	4b34      	ldr	r3, [pc, #208]	@ (80048bc <HAL_RCC_OscConfig+0x244>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ee:	f7fe fbf1 	bl	8002fd4 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f6:	f7fe fbed 	bl	8002fd4 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e1a8      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004808:	4b2b      	ldr	r3, [pc, #172]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004814:	4b28      	ldr	r3, [pc, #160]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	4925      	ldr	r1, [pc, #148]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 8004824:	4313      	orrs	r3, r2
 8004826:	600b      	str	r3, [r1, #0]
 8004828:	e015      	b.n	8004856 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800482a:	4b24      	ldr	r3, [pc, #144]	@ (80048bc <HAL_RCC_OscConfig+0x244>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004830:	f7fe fbd0 	bl	8002fd4 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004838:	f7fe fbcc 	bl	8002fd4 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e187      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800484a:	4b1b      	ldr	r3, [pc, #108]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d036      	beq.n	80048d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d016      	beq.n	8004898 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800486a:	4b15      	ldr	r3, [pc, #84]	@ (80048c0 <HAL_RCC_OscConfig+0x248>)
 800486c:	2201      	movs	r2, #1
 800486e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004870:	f7fe fbb0 	bl	8002fd4 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004878:	f7fe fbac 	bl	8002fd4 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e167      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800488a:	4b0b      	ldr	r3, [pc, #44]	@ (80048b8 <HAL_RCC_OscConfig+0x240>)
 800488c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x200>
 8004896:	e01b      	b.n	80048d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004898:	4b09      	ldr	r3, [pc, #36]	@ (80048c0 <HAL_RCC_OscConfig+0x248>)
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800489e:	f7fe fb99 	bl	8002fd4 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048a4:	e00e      	b.n	80048c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a6:	f7fe fb95 	bl	8002fd4 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d907      	bls.n	80048c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e150      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
 80048b8:	40023800 	.word	0x40023800
 80048bc:	42470000 	.word	0x42470000
 80048c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c4:	4b88      	ldr	r3, [pc, #544]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 80048c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1ea      	bne.n	80048a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 8097 	beq.w	8004a0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048de:	2300      	movs	r3, #0
 80048e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048e2:	4b81      	ldr	r3, [pc, #516]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10f      	bne.n	800490e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ee:	2300      	movs	r3, #0
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	4b7d      	ldr	r3, [pc, #500]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f6:	4a7c      	ldr	r2, [pc, #496]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 80048f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80048fe:	4b7a      	ldr	r3, [pc, #488]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004906:	60bb      	str	r3, [r7, #8]
 8004908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800490a:	2301      	movs	r3, #1
 800490c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490e:	4b77      	ldr	r3, [pc, #476]	@ (8004aec <HAL_RCC_OscConfig+0x474>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d118      	bne.n	800494c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800491a:	4b74      	ldr	r3, [pc, #464]	@ (8004aec <HAL_RCC_OscConfig+0x474>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a73      	ldr	r2, [pc, #460]	@ (8004aec <HAL_RCC_OscConfig+0x474>)
 8004920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004926:	f7fe fb55 	bl	8002fd4 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800492e:	f7fe fb51 	bl	8002fd4 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e10c      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004940:	4b6a      	ldr	r3, [pc, #424]	@ (8004aec <HAL_RCC_OscConfig+0x474>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d106      	bne.n	8004962 <HAL_RCC_OscConfig+0x2ea>
 8004954:	4b64      	ldr	r3, [pc, #400]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004958:	4a63      	ldr	r2, [pc, #396]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004960:	e01c      	b.n	800499c <HAL_RCC_OscConfig+0x324>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b05      	cmp	r3, #5
 8004968:	d10c      	bne.n	8004984 <HAL_RCC_OscConfig+0x30c>
 800496a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004970:	f043 0304 	orr.w	r3, r3, #4
 8004974:	6713      	str	r3, [r2, #112]	@ 0x70
 8004976:	4b5c      	ldr	r3, [pc, #368]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800497a:	4a5b      	ldr	r2, [pc, #364]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	6713      	str	r3, [r2, #112]	@ 0x70
 8004982:	e00b      	b.n	800499c <HAL_RCC_OscConfig+0x324>
 8004984:	4b58      	ldr	r3, [pc, #352]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004988:	4a57      	ldr	r2, [pc, #348]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 800498a:	f023 0301 	bic.w	r3, r3, #1
 800498e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004990:	4b55      	ldr	r3, [pc, #340]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004994:	4a54      	ldr	r2, [pc, #336]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004996:	f023 0304 	bic.w	r3, r3, #4
 800499a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d015      	beq.n	80049d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a4:	f7fe fb16 	bl	8002fd4 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ac:	f7fe fb12 	bl	8002fd4 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e0cb      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c2:	4b49      	ldr	r3, [pc, #292]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0ee      	beq.n	80049ac <HAL_RCC_OscConfig+0x334>
 80049ce:	e014      	b.n	80049fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d0:	f7fe fb00 	bl	8002fd4 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d8:	f7fe fafc 	bl	8002fd4 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e0b5      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ee:	4b3e      	ldr	r3, [pc, #248]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1ee      	bne.n	80049d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049fa:	7dfb      	ldrb	r3, [r7, #23]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d105      	bne.n	8004a0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a00:	4b39      	ldr	r3, [pc, #228]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a04:	4a38      	ldr	r2, [pc, #224]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004a06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 80a1 	beq.w	8004b58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a16:	4b34      	ldr	r3, [pc, #208]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d05c      	beq.n	8004adc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d141      	bne.n	8004aae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2a:	4b31      	ldr	r3, [pc, #196]	@ (8004af0 <HAL_RCC_OscConfig+0x478>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a30:	f7fe fad0 	bl	8002fd4 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a38:	f7fe facc 	bl	8002fd4 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e087      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4a:	4b27      	ldr	r3, [pc, #156]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f0      	bne.n	8004a38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69da      	ldr	r2, [r3, #28]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	019b      	lsls	r3, r3, #6
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	041b      	lsls	r3, r3, #16
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a78:	061b      	lsls	r3, r3, #24
 8004a7a:	491b      	ldr	r1, [pc, #108]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a80:	4b1b      	ldr	r3, [pc, #108]	@ (8004af0 <HAL_RCC_OscConfig+0x478>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a86:	f7fe faa5 	bl	8002fd4 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a8e:	f7fe faa1 	bl	8002fd4 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e05c      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa0:	4b11      	ldr	r3, [pc, #68]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCC_OscConfig+0x416>
 8004aac:	e054      	b.n	8004b58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aae:	4b10      	ldr	r3, [pc, #64]	@ (8004af0 <HAL_RCC_OscConfig+0x478>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab4:	f7fe fa8e 	bl	8002fd4 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fe fa8a 	bl	8002fd4 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e045      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ace:	4b06      	ldr	r3, [pc, #24]	@ (8004ae8 <HAL_RCC_OscConfig+0x470>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x444>
 8004ada:	e03d      	b.n	8004b58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d107      	bne.n	8004af4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e038      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	40007000 	.word	0x40007000
 8004af0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004af4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b64 <HAL_RCC_OscConfig+0x4ec>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d028      	beq.n	8004b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d121      	bne.n	8004b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d11a      	bne.n	8004b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b24:	4013      	ands	r3, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d111      	bne.n	8004b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3a:	085b      	lsrs	r3, r3, #1
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d107      	bne.n	8004b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e000      	b.n	8004b5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40023800 	.word	0x40023800

08004b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0cc      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b7c:	4b68      	ldr	r3, [pc, #416]	@ (8004d20 <HAL_RCC_ClockConfig+0x1b8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d90c      	bls.n	8004ba4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8a:	4b65      	ldr	r3, [pc, #404]	@ (8004d20 <HAL_RCC_ClockConfig+0x1b8>)
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b92:	4b63      	ldr	r3, [pc, #396]	@ (8004d20 <HAL_RCC_ClockConfig+0x1b8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0b8      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d020      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bbc:	4b59      	ldr	r3, [pc, #356]	@ (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	4a58      	ldr	r2, [pc, #352]	@ (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bd4:	4b53      	ldr	r3, [pc, #332]	@ (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	4a52      	ldr	r2, [pc, #328]	@ (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004bde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004be0:	4b50      	ldr	r3, [pc, #320]	@ (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	494d      	ldr	r1, [pc, #308]	@ (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d044      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d107      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c06:	4b47      	ldr	r3, [pc, #284]	@ (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d119      	bne.n	8004c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e07f      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d003      	beq.n	8004c26 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d107      	bne.n	8004c36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c26:	4b3f      	ldr	r3, [pc, #252]	@ (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d109      	bne.n	8004c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e06f      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c36:	4b3b      	ldr	r3, [pc, #236]	@ (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e067      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c46:	4b37      	ldr	r3, [pc, #220]	@ (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f023 0203 	bic.w	r2, r3, #3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	4934      	ldr	r1, [pc, #208]	@ (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c58:	f7fe f9bc 	bl	8002fd4 <HAL_GetTick>
 8004c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c5e:	e00a      	b.n	8004c76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c60:	f7fe f9b8 	bl	8002fd4 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e04f      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c76:	4b2b      	ldr	r3, [pc, #172]	@ (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 020c 	and.w	r2, r3, #12
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d1eb      	bne.n	8004c60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c88:	4b25      	ldr	r3, [pc, #148]	@ (8004d20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d20c      	bcs.n	8004cb0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c96:	4b22      	ldr	r3, [pc, #136]	@ (8004d20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9e:	4b20      	ldr	r3, [pc, #128]	@ (8004d20 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e032      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d008      	beq.n	8004cce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cbc:	4b19      	ldr	r3, [pc, #100]	@ (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	4916      	ldr	r1, [pc, #88]	@ (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d009      	beq.n	8004cee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cda:	4b12      	ldr	r3, [pc, #72]	@ (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	490e      	ldr	r1, [pc, #56]	@ (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cee:	f000 f821 	bl	8004d34 <HAL_RCC_GetSysClockFreq>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8004d24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	091b      	lsrs	r3, r3, #4
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	490a      	ldr	r1, [pc, #40]	@ (8004d28 <HAL_RCC_ClockConfig+0x1c0>)
 8004d00:	5ccb      	ldrb	r3, [r1, r3]
 8004d02:	fa22 f303 	lsr.w	r3, r2, r3
 8004d06:	4a09      	ldr	r2, [pc, #36]	@ (8004d2c <HAL_RCC_ClockConfig+0x1c4>)
 8004d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d0a:	4b09      	ldr	r3, [pc, #36]	@ (8004d30 <HAL_RCC_ClockConfig+0x1c8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fe f91c 	bl	8002f4c <HAL_InitTick>

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40023c00 	.word	0x40023c00
 8004d24:	40023800 	.word	0x40023800
 8004d28:	0800c918 	.word	0x0800c918
 8004d2c:	20000180 	.word	0x20000180
 8004d30:	20000184 	.word	0x20000184

08004d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d38:	b090      	sub	sp, #64	@ 0x40
 8004d3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d4c:	4b59      	ldr	r3, [pc, #356]	@ (8004eb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 030c 	and.w	r3, r3, #12
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d00d      	beq.n	8004d74 <HAL_RCC_GetSysClockFreq+0x40>
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	f200 80a1 	bhi.w	8004ea0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <HAL_RCC_GetSysClockFreq+0x34>
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d003      	beq.n	8004d6e <HAL_RCC_GetSysClockFreq+0x3a>
 8004d66:	e09b      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d68:	4b53      	ldr	r3, [pc, #332]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d6c:	e09b      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d6e:	4b53      	ldr	r3, [pc, #332]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0x188>)
 8004d70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d72:	e098      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d74:	4b4f      	ldr	r3, [pc, #316]	@ (8004eb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d7c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d7e:	4b4d      	ldr	r3, [pc, #308]	@ (8004eb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d028      	beq.n	8004ddc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8004eb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	099b      	lsrs	r3, r3, #6
 8004d90:	2200      	movs	r2, #0
 8004d92:	623b      	str	r3, [r7, #32]
 8004d94:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	4b47      	ldr	r3, [pc, #284]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0x188>)
 8004da0:	fb03 f201 	mul.w	r2, r3, r1
 8004da4:	2300      	movs	r3, #0
 8004da6:	fb00 f303 	mul.w	r3, r0, r3
 8004daa:	4413      	add	r3, r2
 8004dac:	4a43      	ldr	r2, [pc, #268]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0x188>)
 8004dae:	fba0 1202 	umull	r1, r2, r0, r2
 8004db2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004db4:	460a      	mov	r2, r1
 8004db6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004db8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dba:	4413      	add	r3, r2
 8004dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	61bb      	str	r3, [r7, #24]
 8004dc4:	61fa      	str	r2, [r7, #28]
 8004dc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004dce:	f7fb ff43 	bl	8000c58 <__aeabi_uldivmod>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dda:	e053      	b.n	8004e84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ddc:	4b35      	ldr	r3, [pc, #212]	@ (8004eb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	099b      	lsrs	r3, r3, #6
 8004de2:	2200      	movs	r2, #0
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	617a      	str	r2, [r7, #20]
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004dee:	f04f 0b00 	mov.w	fp, #0
 8004df2:	4652      	mov	r2, sl
 8004df4:	465b      	mov	r3, fp
 8004df6:	f04f 0000 	mov.w	r0, #0
 8004dfa:	f04f 0100 	mov.w	r1, #0
 8004dfe:	0159      	lsls	r1, r3, #5
 8004e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e04:	0150      	lsls	r0, r2, #5
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	ebb2 080a 	subs.w	r8, r2, sl
 8004e0e:	eb63 090b 	sbc.w	r9, r3, fp
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e26:	ebb2 0408 	subs.w	r4, r2, r8
 8004e2a:	eb63 0509 	sbc.w	r5, r3, r9
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	00eb      	lsls	r3, r5, #3
 8004e38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e3c:	00e2      	lsls	r2, r4, #3
 8004e3e:	4614      	mov	r4, r2
 8004e40:	461d      	mov	r5, r3
 8004e42:	eb14 030a 	adds.w	r3, r4, sl
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	eb45 030b 	adc.w	r3, r5, fp
 8004e4c:	607b      	str	r3, [r7, #4]
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	028b      	lsls	r3, r1, #10
 8004e5e:	4621      	mov	r1, r4
 8004e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e64:	4621      	mov	r1, r4
 8004e66:	028a      	lsls	r2, r1, #10
 8004e68:	4610      	mov	r0, r2
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e6e:	2200      	movs	r2, #0
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	60fa      	str	r2, [r7, #12]
 8004e74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e78:	f7fb feee 	bl	8000c58 <__aeabi_uldivmod>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4613      	mov	r3, r2
 8004e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e84:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	0c1b      	lsrs	r3, r3, #16
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	3301      	adds	r3, #1
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004e94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e9e:	e002      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ea0:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3740      	adds	r7, #64	@ 0x40
 8004eac:	46bd      	mov	sp, r7
 8004eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	00f42400 	.word	0x00f42400
 8004ebc:	017d7840 	.word	0x017d7840

08004ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec4:	4b03      	ldr	r3, [pc, #12]	@ (8004ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	20000180 	.word	0x20000180

08004ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004edc:	f7ff fff0 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	4b05      	ldr	r3, [pc, #20]	@ (8004ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	0a9b      	lsrs	r3, r3, #10
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	4903      	ldr	r1, [pc, #12]	@ (8004efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eee:	5ccb      	ldrb	r3, [r1, r3]
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	0800c928 	.word	0x0800c928

08004f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f04:	f7ff ffdc 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	0b5b      	lsrs	r3, r3, #13
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	4903      	ldr	r1, [pc, #12]	@ (8004f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f16:	5ccb      	ldrb	r3, [r1, r3]
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40023800 	.word	0x40023800
 8004f24:	0800c928 	.word	0x0800c928

08004f28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e042      	b.n	8004fc0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fd fe10 	bl	8002b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2224      	movs	r2, #36	@ 0x24
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fdbd 	bl	8005aec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695a      	ldr	r2, [r3, #20]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08a      	sub	sp, #40	@ 0x28
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	d175      	bne.n	80050d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <HAL_UART_Transmit+0x2c>
 8004fee:	88fb      	ldrh	r3, [r7, #6]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e06e      	b.n	80050d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2221      	movs	r2, #33	@ 0x21
 8005002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005006:	f7fd ffe5 	bl	8002fd4 <HAL_GetTick>
 800500a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	88fa      	ldrh	r2, [r7, #6]
 8005010:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	88fa      	ldrh	r2, [r7, #6]
 8005016:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005020:	d108      	bne.n	8005034 <HAL_UART_Transmit+0x6c>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d104      	bne.n	8005034 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800502a:	2300      	movs	r3, #0
 800502c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	61bb      	str	r3, [r7, #24]
 8005032:	e003      	b.n	800503c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005038:	2300      	movs	r3, #0
 800503a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800503c:	e02e      	b.n	800509c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2200      	movs	r2, #0
 8005046:	2180      	movs	r1, #128	@ 0x80
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 fb1f 	bl	800568c <UART_WaitOnFlagUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e03a      	b.n	80050d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10b      	bne.n	800507e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005074:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	3302      	adds	r3, #2
 800507a:	61bb      	str	r3, [r7, #24]
 800507c:	e007      	b.n	800508e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	781a      	ldrb	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	3301      	adds	r3, #1
 800508c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1cb      	bne.n	800503e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2200      	movs	r2, #0
 80050ae:	2140      	movs	r1, #64	@ 0x40
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 faeb 	bl	800568c <UART_WaitOnFlagUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e006      	b.n	80050d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	e000      	b.n	80050d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80050d4:	2302      	movs	r3, #2
  }
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3720      	adds	r7, #32
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	4613      	mov	r3, r2
 80050ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d112      	bne.n	800511e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <HAL_UART_Receive_IT+0x26>
 80050fe:	88fb      	ldrh	r3, [r7, #6]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e00b      	b.n	8005120 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800510e:	88fb      	ldrh	r3, [r7, #6]
 8005110:	461a      	mov	r2, r3
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 fb12 	bl	800573e <UART_Start_Receive_IT>
 800511a:	4603      	mov	r3, r0
 800511c:	e000      	b.n	8005120 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800511e:	2302      	movs	r3, #2
  }
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b0ba      	sub	sp, #232	@ 0xe8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800514e:	2300      	movs	r3, #0
 8005150:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005154:	2300      	movs	r3, #0
 8005156:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800515a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10f      	bne.n	800518e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800516e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005172:	f003 0320 	and.w	r3, r3, #32
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <HAL_UART_IRQHandler+0x66>
 800517a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fbf2 	bl	8005970 <UART_Receive_IT>
      return;
 800518c:	e25b      	b.n	8005646 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800518e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 80de 	beq.w	8005354 <HAL_UART_IRQHandler+0x22c>
 8005198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80d1 	beq.w	8005354 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00b      	beq.n	80051d6 <HAL_UART_IRQHandler+0xae>
 80051be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ce:	f043 0201 	orr.w	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00b      	beq.n	80051fa <HAL_UART_IRQHandler+0xd2>
 80051e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f2:	f043 0202 	orr.w	r2, r3, #2
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00b      	beq.n	800521e <HAL_UART_IRQHandler+0xf6>
 8005206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005216:	f043 0204 	orr.w	r2, r3, #4
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800521e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	2b00      	cmp	r3, #0
 8005228:	d011      	beq.n	800524e <HAL_UART_IRQHandler+0x126>
 800522a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b00      	cmp	r3, #0
 8005234:	d105      	bne.n	8005242 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005246:	f043 0208 	orr.w	r2, r3, #8
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 81f2 	beq.w	800563c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800525c:	f003 0320 	and.w	r3, r3, #32
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <HAL_UART_IRQHandler+0x14e>
 8005264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fb7d 	bl	8005970 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005280:	2b40      	cmp	r3, #64	@ 0x40
 8005282:	bf0c      	ite	eq
 8005284:	2301      	moveq	r3, #1
 8005286:	2300      	movne	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d103      	bne.n	80052a2 <HAL_UART_IRQHandler+0x17a>
 800529a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d04f      	beq.n	8005342 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fa85 	bl	80057b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b2:	2b40      	cmp	r3, #64	@ 0x40
 80052b4:	d141      	bne.n	800533a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3314      	adds	r3, #20
 80052bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80052cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3314      	adds	r3, #20
 80052de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80052e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80052e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80052ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80052fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1d9      	bne.n	80052b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005306:	2b00      	cmp	r3, #0
 8005308:	d013      	beq.n	8005332 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530e:	4a7e      	ldr	r2, [pc, #504]	@ (8005508 <HAL_UART_IRQHandler+0x3e0>)
 8005310:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005316:	4618      	mov	r0, r3
 8005318:	f7fe f80d 	bl	8003336 <HAL_DMA_Abort_IT>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d016      	beq.n	8005350 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800532c:	4610      	mov	r0, r2
 800532e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005330:	e00e      	b.n	8005350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f994 	bl	8005660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005338:	e00a      	b.n	8005350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f990 	bl	8005660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005340:	e006      	b.n	8005350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f98c 	bl	8005660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800534e:	e175      	b.n	800563c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005350:	bf00      	nop
    return;
 8005352:	e173      	b.n	800563c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005358:	2b01      	cmp	r3, #1
 800535a:	f040 814f 	bne.w	80055fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800535e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005362:	f003 0310 	and.w	r3, r3, #16
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 8148 	beq.w	80055fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800536c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8141 	beq.w	80055fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800537a:	2300      	movs	r3, #0
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60bb      	str	r3, [r7, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	60bb      	str	r3, [r7, #8]
 800538e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539a:	2b40      	cmp	r3, #64	@ 0x40
 800539c:	f040 80b6 	bne.w	800550c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8145 	beq.w	8005640 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053be:	429a      	cmp	r2, r3
 80053c0:	f080 813e 	bcs.w	8005640 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053d6:	f000 8088 	beq.w	80054ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	330c      	adds	r3, #12
 80053e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053e8:	e853 3f00 	ldrex	r3, [r3]
 80053ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80053f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	330c      	adds	r3, #12
 8005402:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005406:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800540a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005412:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005416:	e841 2300 	strex	r3, r2, [r1]
 800541a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800541e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1d9      	bne.n	80053da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3314      	adds	r3, #20
 800542c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005436:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005438:	f023 0301 	bic.w	r3, r3, #1
 800543c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3314      	adds	r3, #20
 8005446:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800544a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800544e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005452:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800545c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e1      	bne.n	8005426 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3314      	adds	r3, #20
 8005468:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005472:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005478:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3314      	adds	r3, #20
 8005482:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005486:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005488:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800548c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800548e:	e841 2300 	strex	r3, r2, [r1]
 8005492:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005494:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1e3      	bne.n	8005462 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	330c      	adds	r3, #12
 80054ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054ba:	f023 0310 	bic.w	r3, r3, #16
 80054be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	330c      	adds	r3, #12
 80054c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80054cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80054ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054d4:	e841 2300 	strex	r3, r2, [r1]
 80054d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e3      	bne.n	80054a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fd feb6 	bl	8003256 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2202      	movs	r2, #2
 80054ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	4619      	mov	r1, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f8b7 	bl	8005674 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005506:	e09b      	b.n	8005640 <HAL_UART_IRQHandler+0x518>
 8005508:	08005879 	.word	0x08005879
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005514:	b29b      	uxth	r3, r3
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 808e 	beq.w	8005644 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005528:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 8089 	beq.w	8005644 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	330c      	adds	r3, #12
 8005538:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005544:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005548:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	330c      	adds	r3, #12
 8005552:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005556:	647a      	str	r2, [r7, #68]	@ 0x44
 8005558:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800555c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1e3      	bne.n	8005532 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3314      	adds	r3, #20
 8005570:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	623b      	str	r3, [r7, #32]
   return(result);
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	f023 0301 	bic.w	r3, r3, #1
 8005580:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3314      	adds	r3, #20
 800558a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800558e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005590:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800559c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e3      	bne.n	800556a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	330c      	adds	r3, #12
 80055b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	60fb      	str	r3, [r7, #12]
   return(result);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0310 	bic.w	r3, r3, #16
 80055c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	330c      	adds	r3, #12
 80055d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80055d4:	61fa      	str	r2, [r7, #28]
 80055d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	69b9      	ldr	r1, [r7, #24]
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	617b      	str	r3, [r7, #20]
   return(result);
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e3      	bne.n	80055b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f83d 	bl	8005674 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055fa:	e023      	b.n	8005644 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005604:	2b00      	cmp	r3, #0
 8005606:	d009      	beq.n	800561c <HAL_UART_IRQHandler+0x4f4>
 8005608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800560c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f943 	bl	80058a0 <UART_Transmit_IT>
    return;
 800561a:	e014      	b.n	8005646 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800561c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00e      	beq.n	8005646 <HAL_UART_IRQHandler+0x51e>
 8005628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800562c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f983 	bl	8005940 <UART_EndTransmit_IT>
    return;
 800563a:	e004      	b.n	8005646 <HAL_UART_IRQHandler+0x51e>
    return;
 800563c:	bf00      	nop
 800563e:	e002      	b.n	8005646 <HAL_UART_IRQHandler+0x51e>
      return;
 8005640:	bf00      	nop
 8005642:	e000      	b.n	8005646 <HAL_UART_IRQHandler+0x51e>
      return;
 8005644:	bf00      	nop
  }
}
 8005646:	37e8      	adds	r7, #232	@ 0xe8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	4613      	mov	r3, r2
 800569a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800569c:	e03b      	b.n	8005716 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a4:	d037      	beq.n	8005716 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a6:	f7fd fc95 	bl	8002fd4 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	6a3a      	ldr	r2, [r7, #32]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d302      	bcc.n	80056bc <UART_WaitOnFlagUntilTimeout+0x30>
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e03a      	b.n	8005736 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f003 0304 	and.w	r3, r3, #4
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d023      	beq.n	8005716 <UART_WaitOnFlagUntilTimeout+0x8a>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b80      	cmp	r3, #128	@ 0x80
 80056d2:	d020      	beq.n	8005716 <UART_WaitOnFlagUntilTimeout+0x8a>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b40      	cmp	r3, #64	@ 0x40
 80056d8:	d01d      	beq.n	8005716 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d116      	bne.n	8005716 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80056e8:	2300      	movs	r3, #0
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 f857 	bl	80057b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2208      	movs	r2, #8
 8005708:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e00f      	b.n	8005736 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4013      	ands	r3, r2
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	429a      	cmp	r2, r3
 8005724:	bf0c      	ite	eq
 8005726:	2301      	moveq	r3, #1
 8005728:	2300      	movne	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	461a      	mov	r2, r3
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	429a      	cmp	r2, r3
 8005732:	d0b4      	beq.n	800569e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800573e:	b480      	push	{r7}
 8005740:	b085      	sub	sp, #20
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	4613      	mov	r3, r2
 800574a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	88fa      	ldrh	r2, [r7, #6]
 8005756:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	88fa      	ldrh	r2, [r7, #6]
 800575c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2222      	movs	r2, #34	@ 0x22
 8005768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d007      	beq.n	8005784 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005782:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695a      	ldr	r2, [r3, #20]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0220 	orr.w	r2, r2, #32
 80057a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b095      	sub	sp, #84	@ 0x54
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	330c      	adds	r3, #12
 80057c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	330c      	adds	r3, #12
 80057d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057da:	643a      	str	r2, [r7, #64]	@ 0x40
 80057dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e5      	bne.n	80057ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3314      	adds	r3, #20
 80057f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f023 0301 	bic.w	r3, r3, #1
 8005804:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3314      	adds	r3, #20
 800580c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800580e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005810:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e5      	bne.n	80057ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005826:	2b01      	cmp	r3, #1
 8005828:	d119      	bne.n	800585e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	330c      	adds	r3, #12
 8005830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	e853 3f00 	ldrex	r3, [r3]
 8005838:	60bb      	str	r3, [r7, #8]
   return(result);
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f023 0310 	bic.w	r3, r3, #16
 8005840:	647b      	str	r3, [r7, #68]	@ 0x44
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	330c      	adds	r3, #12
 8005848:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800584a:	61ba      	str	r2, [r7, #24]
 800584c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	6979      	ldr	r1, [r7, #20]
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	613b      	str	r3, [r7, #16]
   return(result);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e5      	bne.n	800582a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800586c:	bf00      	nop
 800586e:	3754      	adds	r7, #84	@ 0x54
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005884:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f7ff fee4 	bl	8005660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005898:	bf00      	nop
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b21      	cmp	r3, #33	@ 0x21
 80058b2:	d13e      	bne.n	8005932 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058bc:	d114      	bne.n	80058e8 <UART_Transmit_IT+0x48>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d110      	bne.n	80058e8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	461a      	mov	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	1c9a      	adds	r2, r3, #2
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	621a      	str	r2, [r3, #32]
 80058e6:	e008      	b.n	80058fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	1c59      	adds	r1, r3, #1
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6211      	str	r1, [r2, #32]
 80058f2:	781a      	ldrb	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29b      	uxth	r3, r3
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	4619      	mov	r1, r3
 8005908:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10f      	bne.n	800592e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800591c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800592c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	e000      	b.n	8005934 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005932:	2302      	movs	r3, #2
  }
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005956:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7ff fe73 	bl	800564c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08c      	sub	sp, #48	@ 0x30
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b22      	cmp	r3, #34	@ 0x22
 8005982:	f040 80ae 	bne.w	8005ae2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800598e:	d117      	bne.n	80059c0 <UART_Receive_IT+0x50>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d113      	bne.n	80059c0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005998:	2300      	movs	r3, #0
 800599a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b8:	1c9a      	adds	r2, r3, #2
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80059be:	e026      	b.n	8005a0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80059c6:	2300      	movs	r3, #0
 80059c8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059d2:	d007      	beq.n	80059e4 <UART_Receive_IT+0x74>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <UART_Receive_IT+0x82>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d106      	bne.n	80059f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	e008      	b.n	8005a04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d15d      	bne.n	8005ade <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0220 	bic.w	r2, r2, #32
 8005a30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695a      	ldr	r2, [r3, #20]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0201 	bic.w	r2, r2, #1
 8005a50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d135      	bne.n	8005ad4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	330c      	adds	r3, #12
 8005a74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	e853 3f00 	ldrex	r3, [r3]
 8005a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f023 0310 	bic.w	r3, r3, #16
 8005a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a8e:	623a      	str	r2, [r7, #32]
 8005a90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	69f9      	ldr	r1, [r7, #28]
 8005a94:	6a3a      	ldr	r2, [r7, #32]
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e5      	bne.n	8005a6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0310 	and.w	r3, r3, #16
 8005aac:	2b10      	cmp	r3, #16
 8005aae:	d10a      	bne.n	8005ac6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005aca:	4619      	mov	r1, r3
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff fdd1 	bl	8005674 <HAL_UARTEx_RxEventCallback>
 8005ad2:	e002      	b.n	8005ada <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7fb fe75 	bl	80017c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	e002      	b.n	8005ae4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	e000      	b.n	8005ae4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ae2:	2302      	movs	r3, #2
  }
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3730      	adds	r7, #48	@ 0x30
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af0:	b0c0      	sub	sp, #256	@ 0x100
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b08:	68d9      	ldr	r1, [r3, #12]
 8005b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	ea40 0301 	orr.w	r3, r0, r1
 8005b14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b44:	f021 010c 	bic.w	r1, r1, #12
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b52:	430b      	orrs	r3, r1
 8005b54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b66:	6999      	ldr	r1, [r3, #24]
 8005b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	ea40 0301 	orr.w	r3, r0, r1
 8005b72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	4b8f      	ldr	r3, [pc, #572]	@ (8005db8 <UART_SetConfig+0x2cc>)
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d005      	beq.n	8005b8c <UART_SetConfig+0xa0>
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4b8d      	ldr	r3, [pc, #564]	@ (8005dbc <UART_SetConfig+0x2d0>)
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d104      	bne.n	8005b96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b8c:	f7ff f9b8 	bl	8004f00 <HAL_RCC_GetPCLK2Freq>
 8005b90:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b94:	e003      	b.n	8005b9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b96:	f7ff f99f 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 8005b9a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ba8:	f040 810c 	bne.w	8005dc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bb6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005bba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	462b      	mov	r3, r5
 8005bc2:	1891      	adds	r1, r2, r2
 8005bc4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005bc6:	415b      	adcs	r3, r3
 8005bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005bce:	4621      	mov	r1, r4
 8005bd0:	eb12 0801 	adds.w	r8, r2, r1
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	eb43 0901 	adc.w	r9, r3, r1
 8005bda:	f04f 0200 	mov.w	r2, #0
 8005bde:	f04f 0300 	mov.w	r3, #0
 8005be2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005be6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bee:	4690      	mov	r8, r2
 8005bf0:	4699      	mov	r9, r3
 8005bf2:	4623      	mov	r3, r4
 8005bf4:	eb18 0303 	adds.w	r3, r8, r3
 8005bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bfc:	462b      	mov	r3, r5
 8005bfe:	eb49 0303 	adc.w	r3, r9, r3
 8005c02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c12:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	18db      	adds	r3, r3, r3
 8005c1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c20:	4613      	mov	r3, r2
 8005c22:	eb42 0303 	adc.w	r3, r2, r3
 8005c26:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c30:	f7fb f812 	bl	8000c58 <__aeabi_uldivmod>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4b61      	ldr	r3, [pc, #388]	@ (8005dc0 <UART_SetConfig+0x2d4>)
 8005c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	011c      	lsls	r4, r3, #4
 8005c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c4c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c54:	4642      	mov	r2, r8
 8005c56:	464b      	mov	r3, r9
 8005c58:	1891      	adds	r1, r2, r2
 8005c5a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c5c:	415b      	adcs	r3, r3
 8005c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c64:	4641      	mov	r1, r8
 8005c66:	eb12 0a01 	adds.w	sl, r2, r1
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	eb43 0b01 	adc.w	fp, r3, r1
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c84:	4692      	mov	sl, r2
 8005c86:	469b      	mov	fp, r3
 8005c88:	4643      	mov	r3, r8
 8005c8a:	eb1a 0303 	adds.w	r3, sl, r3
 8005c8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c92:	464b      	mov	r3, r9
 8005c94:	eb4b 0303 	adc.w	r3, fp, r3
 8005c98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ca8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005cac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	18db      	adds	r3, r3, r3
 8005cb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	eb42 0303 	adc.w	r3, r2, r3
 8005cbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005cc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005cc6:	f7fa ffc7 	bl	8000c58 <__aeabi_uldivmod>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4611      	mov	r1, r2
 8005cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8005dc0 <UART_SetConfig+0x2d4>)
 8005cd2:	fba3 2301 	umull	r2, r3, r3, r1
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	2264      	movs	r2, #100	@ 0x64
 8005cda:	fb02 f303 	mul.w	r3, r2, r3
 8005cde:	1acb      	subs	r3, r1, r3
 8005ce0:	00db      	lsls	r3, r3, #3
 8005ce2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005ce6:	4b36      	ldr	r3, [pc, #216]	@ (8005dc0 <UART_SetConfig+0x2d4>)
 8005ce8:	fba3 2302 	umull	r2, r3, r3, r2
 8005cec:	095b      	lsrs	r3, r3, #5
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005cf4:	441c      	add	r4, r3
 8005cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d00:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d08:	4642      	mov	r2, r8
 8005d0a:	464b      	mov	r3, r9
 8005d0c:	1891      	adds	r1, r2, r2
 8005d0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d10:	415b      	adcs	r3, r3
 8005d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d18:	4641      	mov	r1, r8
 8005d1a:	1851      	adds	r1, r2, r1
 8005d1c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d1e:	4649      	mov	r1, r9
 8005d20:	414b      	adcs	r3, r1
 8005d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	f04f 0300 	mov.w	r3, #0
 8005d2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d30:	4659      	mov	r1, fp
 8005d32:	00cb      	lsls	r3, r1, #3
 8005d34:	4651      	mov	r1, sl
 8005d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d3a:	4651      	mov	r1, sl
 8005d3c:	00ca      	lsls	r2, r1, #3
 8005d3e:	4610      	mov	r0, r2
 8005d40:	4619      	mov	r1, r3
 8005d42:	4603      	mov	r3, r0
 8005d44:	4642      	mov	r2, r8
 8005d46:	189b      	adds	r3, r3, r2
 8005d48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d4c:	464b      	mov	r3, r9
 8005d4e:	460a      	mov	r2, r1
 8005d50:	eb42 0303 	adc.w	r3, r2, r3
 8005d54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d64:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	18db      	adds	r3, r3, r3
 8005d70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d72:	4613      	mov	r3, r2
 8005d74:	eb42 0303 	adc.w	r3, r2, r3
 8005d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d82:	f7fa ff69 	bl	8000c58 <__aeabi_uldivmod>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc0 <UART_SetConfig+0x2d4>)
 8005d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d90:	095b      	lsrs	r3, r3, #5
 8005d92:	2164      	movs	r1, #100	@ 0x64
 8005d94:	fb01 f303 	mul.w	r3, r1, r3
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	3332      	adds	r3, #50	@ 0x32
 8005d9e:	4a08      	ldr	r2, [pc, #32]	@ (8005dc0 <UART_SetConfig+0x2d4>)
 8005da0:	fba2 2303 	umull	r2, r3, r2, r3
 8005da4:	095b      	lsrs	r3, r3, #5
 8005da6:	f003 0207 	and.w	r2, r3, #7
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4422      	add	r2, r4
 8005db2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005db4:	e106      	b.n	8005fc4 <UART_SetConfig+0x4d8>
 8005db6:	bf00      	nop
 8005db8:	40011000 	.word	0x40011000
 8005dbc:	40011400 	.word	0x40011400
 8005dc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005dce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005dd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005dd6:	4642      	mov	r2, r8
 8005dd8:	464b      	mov	r3, r9
 8005dda:	1891      	adds	r1, r2, r2
 8005ddc:	6239      	str	r1, [r7, #32]
 8005dde:	415b      	adcs	r3, r3
 8005de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005de2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005de6:	4641      	mov	r1, r8
 8005de8:	1854      	adds	r4, r2, r1
 8005dea:	4649      	mov	r1, r9
 8005dec:	eb43 0501 	adc.w	r5, r3, r1
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	f04f 0300 	mov.w	r3, #0
 8005df8:	00eb      	lsls	r3, r5, #3
 8005dfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dfe:	00e2      	lsls	r2, r4, #3
 8005e00:	4614      	mov	r4, r2
 8005e02:	461d      	mov	r5, r3
 8005e04:	4643      	mov	r3, r8
 8005e06:	18e3      	adds	r3, r4, r3
 8005e08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e0c:	464b      	mov	r3, r9
 8005e0e:	eb45 0303 	adc.w	r3, r5, r3
 8005e12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e26:	f04f 0200 	mov.w	r2, #0
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e32:	4629      	mov	r1, r5
 8005e34:	008b      	lsls	r3, r1, #2
 8005e36:	4621      	mov	r1, r4
 8005e38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	008a      	lsls	r2, r1, #2
 8005e40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e44:	f7fa ff08 	bl	8000c58 <__aeabi_uldivmod>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4b60      	ldr	r3, [pc, #384]	@ (8005fd0 <UART_SetConfig+0x4e4>)
 8005e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	011c      	lsls	r4, r3, #4
 8005e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e68:	4642      	mov	r2, r8
 8005e6a:	464b      	mov	r3, r9
 8005e6c:	1891      	adds	r1, r2, r2
 8005e6e:	61b9      	str	r1, [r7, #24]
 8005e70:	415b      	adcs	r3, r3
 8005e72:	61fb      	str	r3, [r7, #28]
 8005e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e78:	4641      	mov	r1, r8
 8005e7a:	1851      	adds	r1, r2, r1
 8005e7c:	6139      	str	r1, [r7, #16]
 8005e7e:	4649      	mov	r1, r9
 8005e80:	414b      	adcs	r3, r1
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	f04f 0200 	mov.w	r2, #0
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e90:	4659      	mov	r1, fp
 8005e92:	00cb      	lsls	r3, r1, #3
 8005e94:	4651      	mov	r1, sl
 8005e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e9a:	4651      	mov	r1, sl
 8005e9c:	00ca      	lsls	r2, r1, #3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	4642      	mov	r2, r8
 8005ea6:	189b      	adds	r3, r3, r2
 8005ea8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005eac:	464b      	mov	r3, r9
 8005eae:	460a      	mov	r2, r1
 8005eb0:	eb42 0303 	adc.w	r3, r2, r3
 8005eb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ec2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ec4:	f04f 0200 	mov.w	r2, #0
 8005ec8:	f04f 0300 	mov.w	r3, #0
 8005ecc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ed0:	4649      	mov	r1, r9
 8005ed2:	008b      	lsls	r3, r1, #2
 8005ed4:	4641      	mov	r1, r8
 8005ed6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eda:	4641      	mov	r1, r8
 8005edc:	008a      	lsls	r2, r1, #2
 8005ede:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005ee2:	f7fa feb9 	bl	8000c58 <__aeabi_uldivmod>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4611      	mov	r1, r2
 8005eec:	4b38      	ldr	r3, [pc, #224]	@ (8005fd0 <UART_SetConfig+0x4e4>)
 8005eee:	fba3 2301 	umull	r2, r3, r3, r1
 8005ef2:	095b      	lsrs	r3, r3, #5
 8005ef4:	2264      	movs	r2, #100	@ 0x64
 8005ef6:	fb02 f303 	mul.w	r3, r2, r3
 8005efa:	1acb      	subs	r3, r1, r3
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	3332      	adds	r3, #50	@ 0x32
 8005f00:	4a33      	ldr	r2, [pc, #204]	@ (8005fd0 <UART_SetConfig+0x4e4>)
 8005f02:	fba2 2303 	umull	r2, r3, r2, r3
 8005f06:	095b      	lsrs	r3, r3, #5
 8005f08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f0c:	441c      	add	r4, r3
 8005f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f12:	2200      	movs	r2, #0
 8005f14:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f16:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f1c:	4642      	mov	r2, r8
 8005f1e:	464b      	mov	r3, r9
 8005f20:	1891      	adds	r1, r2, r2
 8005f22:	60b9      	str	r1, [r7, #8]
 8005f24:	415b      	adcs	r3, r3
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f2c:	4641      	mov	r1, r8
 8005f2e:	1851      	adds	r1, r2, r1
 8005f30:	6039      	str	r1, [r7, #0]
 8005f32:	4649      	mov	r1, r9
 8005f34:	414b      	adcs	r3, r1
 8005f36:	607b      	str	r3, [r7, #4]
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	f04f 0300 	mov.w	r3, #0
 8005f40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f44:	4659      	mov	r1, fp
 8005f46:	00cb      	lsls	r3, r1, #3
 8005f48:	4651      	mov	r1, sl
 8005f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f4e:	4651      	mov	r1, sl
 8005f50:	00ca      	lsls	r2, r1, #3
 8005f52:	4610      	mov	r0, r2
 8005f54:	4619      	mov	r1, r3
 8005f56:	4603      	mov	r3, r0
 8005f58:	4642      	mov	r2, r8
 8005f5a:	189b      	adds	r3, r3, r2
 8005f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f5e:	464b      	mov	r3, r9
 8005f60:	460a      	mov	r2, r1
 8005f62:	eb42 0303 	adc.w	r3, r2, r3
 8005f66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f72:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f80:	4649      	mov	r1, r9
 8005f82:	008b      	lsls	r3, r1, #2
 8005f84:	4641      	mov	r1, r8
 8005f86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f8a:	4641      	mov	r1, r8
 8005f8c:	008a      	lsls	r2, r1, #2
 8005f8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f92:	f7fa fe61 	bl	8000c58 <__aeabi_uldivmod>
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd0 <UART_SetConfig+0x4e4>)
 8005f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa0:	095b      	lsrs	r3, r3, #5
 8005fa2:	2164      	movs	r1, #100	@ 0x64
 8005fa4:	fb01 f303 	mul.w	r3, r1, r3
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	011b      	lsls	r3, r3, #4
 8005fac:	3332      	adds	r3, #50	@ 0x32
 8005fae:	4a08      	ldr	r2, [pc, #32]	@ (8005fd0 <UART_SetConfig+0x4e4>)
 8005fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb4:	095b      	lsrs	r3, r3, #5
 8005fb6:	f003 020f 	and.w	r2, r3, #15
 8005fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4422      	add	r2, r4
 8005fc2:	609a      	str	r2, [r3, #8]
}
 8005fc4:	bf00      	nop
 8005fc6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fd0:	51eb851f 	.word	0x51eb851f

08005fd4 <__NVIC_SetPriority>:
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	4603      	mov	r3, r0
 8005fdc:	6039      	str	r1, [r7, #0]
 8005fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	db0a      	blt.n	8005ffe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	490c      	ldr	r1, [pc, #48]	@ (8006020 <__NVIC_SetPriority+0x4c>)
 8005fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff2:	0112      	lsls	r2, r2, #4
 8005ff4:	b2d2      	uxtb	r2, r2
 8005ff6:	440b      	add	r3, r1
 8005ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005ffc:	e00a      	b.n	8006014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	b2da      	uxtb	r2, r3
 8006002:	4908      	ldr	r1, [pc, #32]	@ (8006024 <__NVIC_SetPriority+0x50>)
 8006004:	79fb      	ldrb	r3, [r7, #7]
 8006006:	f003 030f 	and.w	r3, r3, #15
 800600a:	3b04      	subs	r3, #4
 800600c:	0112      	lsls	r2, r2, #4
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	440b      	add	r3, r1
 8006012:	761a      	strb	r2, [r3, #24]
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	e000e100 	.word	0xe000e100
 8006024:	e000ed00 	.word	0xe000ed00

08006028 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800602c:	2100      	movs	r1, #0
 800602e:	f06f 0004 	mvn.w	r0, #4
 8006032:	f7ff ffcf 	bl	8005fd4 <__NVIC_SetPriority>
#endif
}
 8006036:	bf00      	nop
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006042:	f3ef 8305 	mrs	r3, IPSR
 8006046:	603b      	str	r3, [r7, #0]
  return(result);
 8006048:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800604e:	f06f 0305 	mvn.w	r3, #5
 8006052:	607b      	str	r3, [r7, #4]
 8006054:	e00c      	b.n	8006070 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006056:	4b0a      	ldr	r3, [pc, #40]	@ (8006080 <osKernelInitialize+0x44>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d105      	bne.n	800606a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800605e:	4b08      	ldr	r3, [pc, #32]	@ (8006080 <osKernelInitialize+0x44>)
 8006060:	2201      	movs	r2, #1
 8006062:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006064:	2300      	movs	r3, #0
 8006066:	607b      	str	r3, [r7, #4]
 8006068:	e002      	b.n	8006070 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800606a:	f04f 33ff 	mov.w	r3, #4294967295
 800606e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006070:	687b      	ldr	r3, [r7, #4]
}
 8006072:	4618      	mov	r0, r3
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	2000058c 	.word	0x2000058c

08006084 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800608a:	f3ef 8305 	mrs	r3, IPSR
 800608e:	603b      	str	r3, [r7, #0]
  return(result);
 8006090:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006096:	f06f 0305 	mvn.w	r3, #5
 800609a:	607b      	str	r3, [r7, #4]
 800609c:	e010      	b.n	80060c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800609e:	4b0b      	ldr	r3, [pc, #44]	@ (80060cc <osKernelStart+0x48>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d109      	bne.n	80060ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80060a6:	f7ff ffbf 	bl	8006028 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80060aa:	4b08      	ldr	r3, [pc, #32]	@ (80060cc <osKernelStart+0x48>)
 80060ac:	2202      	movs	r2, #2
 80060ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80060b0:	f001 fcda 	bl	8007a68 <vTaskStartScheduler>
      stat = osOK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	607b      	str	r3, [r7, #4]
 80060b8:	e002      	b.n	80060c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80060ba:	f04f 33ff 	mov.w	r3, #4294967295
 80060be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80060c0:	687b      	ldr	r3, [r7, #4]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	2000058c 	.word	0x2000058c

080060d0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060d6:	f3ef 8305 	mrs	r3, IPSR
 80060da:	603b      	str	r3, [r7, #0]
  return(result);
 80060dc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80060e2:	f001 fde5 	bl	8007cb0 <xTaskGetTickCountFromISR>
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	e002      	b.n	80060f0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80060ea:	f001 fdd1 	bl	8007c90 <xTaskGetTickCount>
 80060ee:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80060f0:	687b      	ldr	r3, [r7, #4]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b08e      	sub	sp, #56	@ 0x38
 80060fe:	af04      	add	r7, sp, #16
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006106:	2300      	movs	r3, #0
 8006108:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800610a:	f3ef 8305 	mrs	r3, IPSR
 800610e:	617b      	str	r3, [r7, #20]
  return(result);
 8006110:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006112:	2b00      	cmp	r3, #0
 8006114:	d17e      	bne.n	8006214 <osThreadNew+0x11a>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d07b      	beq.n	8006214 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800611c:	2380      	movs	r3, #128	@ 0x80
 800611e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006120:	2318      	movs	r3, #24
 8006122:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006124:	2300      	movs	r3, #0
 8006126:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006128:	f04f 33ff 	mov.w	r3, #4294967295
 800612c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d045      	beq.n	80061c0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <osThreadNew+0x48>
        name = attr->name;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d002      	beq.n	8006150 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d008      	beq.n	8006168 <osThreadNew+0x6e>
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	2b38      	cmp	r3, #56	@ 0x38
 800615a:	d805      	bhi.n	8006168 <osThreadNew+0x6e>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <osThreadNew+0x72>
        return (NULL);
 8006168:	2300      	movs	r3, #0
 800616a:	e054      	b.n	8006216 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	089b      	lsrs	r3, r3, #2
 800617a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00e      	beq.n	80061a2 <osThreadNew+0xa8>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	2b5b      	cmp	r3, #91	@ 0x5b
 800618a:	d90a      	bls.n	80061a2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006190:	2b00      	cmp	r3, #0
 8006192:	d006      	beq.n	80061a2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <osThreadNew+0xa8>
        mem = 1;
 800619c:	2301      	movs	r3, #1
 800619e:	61bb      	str	r3, [r7, #24]
 80061a0:	e010      	b.n	80061c4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10c      	bne.n	80061c4 <osThreadNew+0xca>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d108      	bne.n	80061c4 <osThreadNew+0xca>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d104      	bne.n	80061c4 <osThreadNew+0xca>
          mem = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	e001      	b.n	80061c4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d110      	bne.n	80061ec <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061d2:	9202      	str	r2, [sp, #8]
 80061d4:	9301      	str	r3, [sp, #4]
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	6a3a      	ldr	r2, [r7, #32]
 80061de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f001 f97d 	bl	80074e0 <xTaskCreateStatic>
 80061e6:	4603      	mov	r3, r0
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	e013      	b.n	8006214 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d110      	bne.n	8006214 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	f107 0310 	add.w	r3, r7, #16
 80061fa:	9301      	str	r3, [sp, #4]
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f001 f9cb 	bl	80075a0 <xTaskCreate>
 800620a:	4603      	mov	r3, r0
 800620c:	2b01      	cmp	r3, #1
 800620e:	d001      	beq.n	8006214 <osThreadNew+0x11a>
            hTask = NULL;
 8006210:	2300      	movs	r3, #0
 8006212:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006214:	693b      	ldr	r3, [r7, #16]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3728      	adds	r7, #40	@ 0x28
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <osThreadSetPriority>:
  }

  return (sz);
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 800621e:	b580      	push	{r7, lr}
 8006220:	b086      	sub	sp, #24
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800622c:	f3ef 8305 	mrs	r3, IPSR
 8006230:	60fb      	str	r3, [r7, #12]
  return(result);
 8006232:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <osThreadSetPriority+0x22>
    stat = osErrorISR;
 8006238:	f06f 0305 	mvn.w	r3, #5
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	e013      	b.n	8006268 <osThreadSetPriority+0x4a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d005      	beq.n	8006252 <osThreadSetPriority+0x34>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	dd02      	ble.n	8006252 <osThreadSetPriority+0x34>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b38      	cmp	r3, #56	@ 0x38
 8006250:	dd03      	ble.n	800625a <osThreadSetPriority+0x3c>
    stat = osErrorParameter;
 8006252:	f06f 0303 	mvn.w	r3, #3
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	e006      	b.n	8006268 <osThreadSetPriority+0x4a>
  }
  else {
    stat = osOK;
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	4619      	mov	r1, r3
 8006262:	6938      	ldr	r0, [r7, #16]
 8006264:	f001 fb62 	bl	800792c <vTaskPrioritySet>
  }

  return (stat);
 8006268:	697b      	ldr	r3, [r7, #20]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800627a:	f3ef 8305 	mrs	r3, IPSR
 800627e:	603b      	str	r3, [r7, #0]
  return(result);
 8006280:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <osThreadYield+0x1a>
    stat = osErrorISR;
 8006286:	f06f 0305 	mvn.w	r3, #5
 800628a:	607b      	str	r3, [r7, #4]
 800628c:	e009      	b.n	80062a2 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800628e:	2300      	movs	r3, #0
 8006290:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8006292:	4b07      	ldr	r3, [pc, #28]	@ (80062b0 <osThreadYield+0x3c>)
 8006294:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80062a2:	687b      	ldr	r3, [r7, #4]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	e000ed04 	.word	0xe000ed04

080062b4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08a      	sub	sp, #40	@ 0x28
 80062b8:	af02      	add	r7, sp, #8
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80062c0:	2300      	movs	r3, #0
 80062c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062c4:	f3ef 8305 	mrs	r3, IPSR
 80062c8:	613b      	str	r3, [r7, #16]
  return(result);
 80062ca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d175      	bne.n	80063bc <osSemaphoreNew+0x108>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d072      	beq.n	80063bc <osSemaphoreNew+0x108>
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d86e      	bhi.n	80063bc <osSemaphoreNew+0x108>
    mem = -1;
 80062de:	f04f 33ff 	mov.w	r3, #4294967295
 80062e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d015      	beq.n	8006316 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d006      	beq.n	8006300 <osSemaphoreNew+0x4c>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	2b4f      	cmp	r3, #79	@ 0x4f
 80062f8:	d902      	bls.n	8006300 <osSemaphoreNew+0x4c>
        mem = 1;
 80062fa:	2301      	movs	r3, #1
 80062fc:	61bb      	str	r3, [r7, #24]
 80062fe:	e00c      	b.n	800631a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d108      	bne.n	800631a <osSemaphoreNew+0x66>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d104      	bne.n	800631a <osSemaphoreNew+0x66>
          mem = 0;
 8006310:	2300      	movs	r3, #0
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	e001      	b.n	800631a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006320:	d04c      	beq.n	80063bc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d128      	bne.n	800637a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d10a      	bne.n	8006344 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	2203      	movs	r2, #3
 8006334:	9200      	str	r2, [sp, #0]
 8006336:	2200      	movs	r2, #0
 8006338:	2100      	movs	r1, #0
 800633a:	2001      	movs	r0, #1
 800633c:	f000 fac6 	bl	80068cc <xQueueGenericCreateStatic>
 8006340:	61f8      	str	r0, [r7, #28]
 8006342:	e005      	b.n	8006350 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006344:	2203      	movs	r2, #3
 8006346:	2100      	movs	r1, #0
 8006348:	2001      	movs	r0, #1
 800634a:	f000 fb3c 	bl	80069c6 <xQueueGenericCreate>
 800634e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d022      	beq.n	800639c <osSemaphoreNew+0xe8>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d01f      	beq.n	800639c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800635c:	2300      	movs	r3, #0
 800635e:	2200      	movs	r2, #0
 8006360:	2100      	movs	r1, #0
 8006362:	69f8      	ldr	r0, [r7, #28]
 8006364:	f000 fbfc 	bl	8006b60 <xQueueGenericSend>
 8006368:	4603      	mov	r3, r0
 800636a:	2b01      	cmp	r3, #1
 800636c:	d016      	beq.n	800639c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800636e:	69f8      	ldr	r0, [r7, #28]
 8006370:	f000 fefa 	bl	8007168 <vQueueDelete>
            hSemaphore = NULL;
 8006374:	2300      	movs	r3, #0
 8006376:	61fb      	str	r3, [r7, #28]
 8006378:	e010      	b.n	800639c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d108      	bne.n	8006392 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	461a      	mov	r2, r3
 8006386:	68b9      	ldr	r1, [r7, #8]
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 fb7a 	bl	8006a82 <xQueueCreateCountingSemaphoreStatic>
 800638e:	61f8      	str	r0, [r7, #28]
 8006390:	e004      	b.n	800639c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006392:	68b9      	ldr	r1, [r7, #8]
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 fbad 	bl	8006af4 <xQueueCreateCountingSemaphore>
 800639a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00c      	beq.n	80063bc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <osSemaphoreNew+0xfc>
          name = attr->name;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	617b      	str	r3, [r7, #20]
 80063ae:	e001      	b.n	80063b4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80063b4:	6979      	ldr	r1, [r7, #20]
 80063b6:	69f8      	ldr	r0, [r7, #28]
 80063b8:	f001 f80a 	bl	80073d0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80063bc:	69fb      	ldr	r3, [r7, #28]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3720      	adds	r7, #32
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b08a      	sub	sp, #40	@ 0x28
 80063ca:	af02      	add	r7, sp, #8
 80063cc:	60f8      	str	r0, [r7, #12]
 80063ce:	60b9      	str	r1, [r7, #8]
 80063d0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063d6:	f3ef 8305 	mrs	r3, IPSR
 80063da:	613b      	str	r3, [r7, #16]
  return(result);
 80063dc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d15f      	bne.n	80064a2 <osMessageQueueNew+0xdc>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d05c      	beq.n	80064a2 <osMessageQueueNew+0xdc>
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d059      	beq.n	80064a2 <osMessageQueueNew+0xdc>
    mem = -1;
 80063ee:	f04f 33ff 	mov.w	r3, #4294967295
 80063f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d029      	beq.n	800644e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d012      	beq.n	8006428 <osMessageQueueNew+0x62>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	2b4f      	cmp	r3, #79	@ 0x4f
 8006408:	d90e      	bls.n	8006428 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695a      	ldr	r2, [r3, #20]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	68b9      	ldr	r1, [r7, #8]
 800641a:	fb01 f303 	mul.w	r3, r1, r3
 800641e:	429a      	cmp	r2, r3
 8006420:	d302      	bcc.n	8006428 <osMessageQueueNew+0x62>
        mem = 1;
 8006422:	2301      	movs	r3, #1
 8006424:	61bb      	str	r3, [r7, #24]
 8006426:	e014      	b.n	8006452 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d110      	bne.n	8006452 <osMessageQueueNew+0x8c>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10c      	bne.n	8006452 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800643c:	2b00      	cmp	r3, #0
 800643e:	d108      	bne.n	8006452 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d104      	bne.n	8006452 <osMessageQueueNew+0x8c>
          mem = 0;
 8006448:	2300      	movs	r3, #0
 800644a:	61bb      	str	r3, [r7, #24]
 800644c:	e001      	b.n	8006452 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800644e:	2300      	movs	r3, #0
 8006450:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d10b      	bne.n	8006470 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691a      	ldr	r2, [r3, #16]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	2100      	movs	r1, #0
 8006462:	9100      	str	r1, [sp, #0]
 8006464:	68b9      	ldr	r1, [r7, #8]
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 fa30 	bl	80068cc <xQueueGenericCreateStatic>
 800646c:	61f8      	str	r0, [r7, #28]
 800646e:	e008      	b.n	8006482 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d105      	bne.n	8006482 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006476:	2200      	movs	r2, #0
 8006478:	68b9      	ldr	r1, [r7, #8]
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 faa3 	bl	80069c6 <xQueueGenericCreate>
 8006480:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00c      	beq.n	80064a2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <osMessageQueueNew+0xd0>
        name = attr->name;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	e001      	b.n	800649a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800649a:	6979      	ldr	r1, [r7, #20]
 800649c:	69f8      	ldr	r0, [r7, #28]
 800649e:	f000 ff97 	bl	80073d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80064a2:	69fb      	ldr	r3, [r7, #28]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3720      	adds	r7, #32
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	4613      	mov	r3, r2
 80064ba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064c4:	f3ef 8305 	mrs	r3, IPSR
 80064c8:	617b      	str	r3, [r7, #20]
  return(result);
 80064ca:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d028      	beq.n	8006522 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d005      	beq.n	80064e2 <osMessageQueuePut+0x36>
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <osMessageQueuePut+0x36>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80064e2:	f06f 0303 	mvn.w	r3, #3
 80064e6:	61fb      	str	r3, [r7, #28]
 80064e8:	e038      	b.n	800655c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80064ea:	2300      	movs	r3, #0
 80064ec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80064ee:	f107 0210 	add.w	r2, r7, #16
 80064f2:	2300      	movs	r3, #0
 80064f4:	68b9      	ldr	r1, [r7, #8]
 80064f6:	69b8      	ldr	r0, [r7, #24]
 80064f8:	f000 fc34 	bl	8006d64 <xQueueGenericSendFromISR>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d003      	beq.n	800650a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006502:	f06f 0302 	mvn.w	r3, #2
 8006506:	61fb      	str	r3, [r7, #28]
 8006508:	e028      	b.n	800655c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d025      	beq.n	800655c <osMessageQueuePut+0xb0>
 8006510:	4b15      	ldr	r3, [pc, #84]	@ (8006568 <osMessageQueuePut+0xbc>)
 8006512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	e01c      	b.n	800655c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <osMessageQueuePut+0x82>
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d103      	bne.n	8006536 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800652e:	f06f 0303 	mvn.w	r3, #3
 8006532:	61fb      	str	r3, [r7, #28]
 8006534:	e012      	b.n	800655c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006536:	2300      	movs	r3, #0
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	69b8      	ldr	r0, [r7, #24]
 800653e:	f000 fb0f 	bl	8006b60 <xQueueGenericSend>
 8006542:	4603      	mov	r3, r0
 8006544:	2b01      	cmp	r3, #1
 8006546:	d009      	beq.n	800655c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800654e:	f06f 0301 	mvn.w	r3, #1
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	e002      	b.n	800655c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006556:	f06f 0302 	mvn.w	r3, #2
 800655a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800655c:	69fb      	ldr	r3, [r7, #28]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3720      	adds	r7, #32
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	e000ed04 	.word	0xe000ed04

0800656c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
 8006578:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800657e:	2300      	movs	r3, #0
 8006580:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006582:	f3ef 8305 	mrs	r3, IPSR
 8006586:	617b      	str	r3, [r7, #20]
  return(result);
 8006588:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800658a:	2b00      	cmp	r3, #0
 800658c:	d028      	beq.n	80065e0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d005      	beq.n	80065a0 <osMessageQueueGet+0x34>
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <osMessageQueueGet+0x34>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80065a0:	f06f 0303 	mvn.w	r3, #3
 80065a4:	61fb      	str	r3, [r7, #28]
 80065a6:	e037      	b.n	8006618 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80065a8:	2300      	movs	r3, #0
 80065aa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80065ac:	f107 0310 	add.w	r3, r7, #16
 80065b0:	461a      	mov	r2, r3
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	69b8      	ldr	r0, [r7, #24]
 80065b6:	f000 fd55 	bl	8007064 <xQueueReceiveFromISR>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d003      	beq.n	80065c8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80065c0:	f06f 0302 	mvn.w	r3, #2
 80065c4:	61fb      	str	r3, [r7, #28]
 80065c6:	e027      	b.n	8006618 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d024      	beq.n	8006618 <osMessageQueueGet+0xac>
 80065ce:	4b15      	ldr	r3, [pc, #84]	@ (8006624 <osMessageQueueGet+0xb8>)
 80065d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	e01b      	b.n	8006618 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <osMessageQueueGet+0x80>
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d103      	bne.n	80065f4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80065ec:	f06f 0303 	mvn.w	r3, #3
 80065f0:	61fb      	str	r3, [r7, #28]
 80065f2:	e011      	b.n	8006618 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	68b9      	ldr	r1, [r7, #8]
 80065f8:	69b8      	ldr	r0, [r7, #24]
 80065fa:	f000 fc51 	bl	8006ea0 <xQueueReceive>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b01      	cmp	r3, #1
 8006602:	d009      	beq.n	8006618 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800660a:	f06f 0301 	mvn.w	r3, #1
 800660e:	61fb      	str	r3, [r7, #28]
 8006610:	e002      	b.n	8006618 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006612:	f06f 0302 	mvn.w	r3, #2
 8006616:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006618:	69fb      	ldr	r3, [r7, #28]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3720      	adds	r7, #32
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	e000ed04 	.word	0xe000ed04

08006628 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4a07      	ldr	r2, [pc, #28]	@ (8006654 <vApplicationGetIdleTaskMemory+0x2c>)
 8006638:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	4a06      	ldr	r2, [pc, #24]	@ (8006658 <vApplicationGetIdleTaskMemory+0x30>)
 800663e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2280      	movs	r2, #128	@ 0x80
 8006644:	601a      	str	r2, [r3, #0]
}
 8006646:	bf00      	nop
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	20000590 	.word	0x20000590
 8006658:	200005ec 	.word	0x200005ec

0800665c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4a07      	ldr	r2, [pc, #28]	@ (8006688 <vApplicationGetTimerTaskMemory+0x2c>)
 800666c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	4a06      	ldr	r2, [pc, #24]	@ (800668c <vApplicationGetTimerTaskMemory+0x30>)
 8006672:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800667a:	601a      	str	r2, [r3, #0]
}
 800667c:	bf00      	nop
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	200007ec 	.word	0x200007ec
 800668c:	20000848 	.word	0x20000848

08006690 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f103 0208 	add.w	r2, r3, #8
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f04f 32ff 	mov.w	r2, #4294967295
 80066a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f103 0208 	add.w	r2, r3, #8
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f103 0208 	add.w	r2, r3, #8
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066ea:	b480      	push	{r7}
 80066ec:	b085      	sub	sp, #20
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	689a      	ldr	r2, [r3, #8]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	601a      	str	r2, [r3, #0]
}
 8006726:	bf00      	nop
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006732:	b480      	push	{r7}
 8006734:	b085      	sub	sp, #20
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006748:	d103      	bne.n	8006752 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	e00c      	b.n	800676c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3308      	adds	r3, #8
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	e002      	b.n	8006760 <vListInsert+0x2e>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	60fb      	str	r3, [r7, #12]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	429a      	cmp	r2, r3
 800676a:	d2f6      	bcs.n	800675a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	601a      	str	r2, [r3, #0]
}
 8006798:	bf00      	nop
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	6892      	ldr	r2, [r2, #8]
 80067ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6852      	ldr	r2, [r2, #4]
 80067c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d103      	bne.n	80067d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	1e5a      	subs	r2, r3, #1
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10b      	bne.n	8006824 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800681e:	bf00      	nop
 8006820:	bf00      	nop
 8006822:	e7fd      	b.n	8006820 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006824:	f002 faf0 	bl	8008e08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006830:	68f9      	ldr	r1, [r7, #12]
 8006832:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006834:	fb01 f303 	mul.w	r3, r1, r3
 8006838:	441a      	add	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006854:	3b01      	subs	r3, #1
 8006856:	68f9      	ldr	r1, [r7, #12]
 8006858:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800685a:	fb01 f303 	mul.w	r3, r1, r3
 800685e:	441a      	add	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	22ff      	movs	r2, #255	@ 0xff
 8006868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	22ff      	movs	r2, #255	@ 0xff
 8006870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d114      	bne.n	80068a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d01a      	beq.n	80068b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3310      	adds	r3, #16
 8006886:	4618      	mov	r0, r3
 8006888:	f001 fb8e 	bl	8007fa8 <xTaskRemoveFromEventList>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d012      	beq.n	80068b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006892:	4b0d      	ldr	r3, [pc, #52]	@ (80068c8 <xQueueGenericReset+0xd0>)
 8006894:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	e009      	b.n	80068b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	3310      	adds	r3, #16
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff fef1 	bl	8006690 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3324      	adds	r3, #36	@ 0x24
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff feec 	bl	8006690 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068b8:	f002 fad8 	bl	8008e6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068bc:	2301      	movs	r3, #1
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	e000ed04 	.word	0xe000ed04

080068cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08e      	sub	sp, #56	@ 0x38
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10b      	bne.n	80068f8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	e7fd      	b.n	80068f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10b      	bne.n	8006916 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	e7fd      	b.n	8006912 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <xQueueGenericCreateStatic+0x56>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <xQueueGenericCreateStatic+0x5a>
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <xQueueGenericCreateStatic+0x5c>
 8006926:	2300      	movs	r3, #0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10b      	bne.n	8006944 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	623b      	str	r3, [r7, #32]
}
 800693e:	bf00      	nop
 8006940:	bf00      	nop
 8006942:	e7fd      	b.n	8006940 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d102      	bne.n	8006950 <xQueueGenericCreateStatic+0x84>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <xQueueGenericCreateStatic+0x88>
 8006950:	2301      	movs	r3, #1
 8006952:	e000      	b.n	8006956 <xQueueGenericCreateStatic+0x8a>
 8006954:	2300      	movs	r3, #0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10b      	bne.n	8006972 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	61fb      	str	r3, [r7, #28]
}
 800696c:	bf00      	nop
 800696e:	bf00      	nop
 8006970:	e7fd      	b.n	800696e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006972:	2350      	movs	r3, #80	@ 0x50
 8006974:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b50      	cmp	r3, #80	@ 0x50
 800697a:	d00b      	beq.n	8006994 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	61bb      	str	r3, [r7, #24]
}
 800698e:	bf00      	nop
 8006990:	bf00      	nop
 8006992:	e7fd      	b.n	8006990 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006994:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800699a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00d      	beq.n	80069bc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80069ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	4613      	mov	r3, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	68b9      	ldr	r1, [r7, #8]
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 f840 	bl	8006a3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80069be:	4618      	mov	r0, r3
 80069c0:	3730      	adds	r7, #48	@ 0x30
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b08a      	sub	sp, #40	@ 0x28
 80069ca:	af02      	add	r7, sp, #8
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	4613      	mov	r3, r2
 80069d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10b      	bne.n	80069f2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	613b      	str	r3, [r7, #16]
}
 80069ec:	bf00      	nop
 80069ee:	bf00      	nop
 80069f0:	e7fd      	b.n	80069ee <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	fb02 f303 	mul.w	r3, r2, r3
 80069fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	3350      	adds	r3, #80	@ 0x50
 8006a00:	4618      	mov	r0, r3
 8006a02:	f002 fb23 	bl	800904c <pvPortMalloc>
 8006a06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d011      	beq.n	8006a32 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	3350      	adds	r3, #80	@ 0x50
 8006a16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a20:	79fa      	ldrb	r2, [r7, #7]
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	4613      	mov	r3, r2
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 f805 	bl	8006a3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a32:	69bb      	ldr	r3, [r7, #24]
	}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3720      	adds	r7, #32
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d103      	bne.n	8006a58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	e002      	b.n	8006a5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	69b8      	ldr	r0, [r7, #24]
 8006a6e:	f7ff fec3 	bl	80067f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	78fa      	ldrb	r2, [r7, #3]
 8006a76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b08a      	sub	sp, #40	@ 0x28
 8006a86:	af02      	add	r7, sp, #8
 8006a88:	60f8      	str	r0, [r7, #12]
 8006a8a:	60b9      	str	r1, [r7, #8]
 8006a8c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10b      	bne.n	8006aac <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	61bb      	str	r3, [r7, #24]
}
 8006aa6:	bf00      	nop
 8006aa8:	bf00      	nop
 8006aaa:	e7fd      	b.n	8006aa8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d90b      	bls.n	8006acc <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	617b      	str	r3, [r7, #20]
}
 8006ac6:	bf00      	nop
 8006ac8:	bf00      	nop
 8006aca:	e7fd      	b.n	8006ac8 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006acc:	2302      	movs	r3, #2
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f7ff fef8 	bl	80068cc <xQueueGenericCreateStatic>
 8006adc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006aea:	69fb      	ldr	r3, [r7, #28]
	}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3720      	adds	r7, #32
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10b      	bne.n	8006b1c <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	613b      	str	r3, [r7, #16]
}
 8006b16:	bf00      	nop
 8006b18:	bf00      	nop
 8006b1a:	e7fd      	b.n	8006b18 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d90b      	bls.n	8006b3c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	60fb      	str	r3, [r7, #12]
}
 8006b36:	bf00      	nop
 8006b38:	bf00      	nop
 8006b3a:	e7fd      	b.n	8006b38 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	2100      	movs	r1, #0
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7ff ff40 	bl	80069c6 <xQueueGenericCreate>
 8006b46:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006b54:	697b      	ldr	r3, [r7, #20]
	}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08e      	sub	sp, #56	@ 0x38
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10b      	bne.n	8006b94 <xQueueGenericSend+0x34>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b8e:	bf00      	nop
 8006b90:	bf00      	nop
 8006b92:	e7fd      	b.n	8006b90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d103      	bne.n	8006ba2 <xQueueGenericSend+0x42>
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <xQueueGenericSend+0x46>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e000      	b.n	8006ba8 <xQueueGenericSend+0x48>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10b      	bne.n	8006bc4 <xQueueGenericSend+0x64>
	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006bbe:	bf00      	nop
 8006bc0:	bf00      	nop
 8006bc2:	e7fd      	b.n	8006bc0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d103      	bne.n	8006bd2 <xQueueGenericSend+0x72>
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d101      	bne.n	8006bd6 <xQueueGenericSend+0x76>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <xQueueGenericSend+0x78>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10b      	bne.n	8006bf4 <xQueueGenericSend+0x94>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	623b      	str	r3, [r7, #32]
}
 8006bee:	bf00      	nop
 8006bf0:	bf00      	nop
 8006bf2:	e7fd      	b.n	8006bf0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bf4:	f001 fb98 	bl	8008328 <xTaskGetSchedulerState>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d102      	bne.n	8006c04 <xQueueGenericSend+0xa4>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <xQueueGenericSend+0xa8>
 8006c04:	2301      	movs	r3, #1
 8006c06:	e000      	b.n	8006c0a <xQueueGenericSend+0xaa>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10b      	bne.n	8006c26 <xQueueGenericSend+0xc6>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	61fb      	str	r3, [r7, #28]
}
 8006c20:	bf00      	nop
 8006c22:	bf00      	nop
 8006c24:	e7fd      	b.n	8006c22 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c26:	f002 f8ef 	bl	8008e08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d302      	bcc.n	8006c3c <xQueueGenericSend+0xdc>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d129      	bne.n	8006c90 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c42:	f000 fab5 	bl	80071b0 <prvCopyDataToQueue>
 8006c46:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d010      	beq.n	8006c72 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c52:	3324      	adds	r3, #36	@ 0x24
 8006c54:	4618      	mov	r0, r3
 8006c56:	f001 f9a7 	bl	8007fa8 <xTaskRemoveFromEventList>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d013      	beq.n	8006c88 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c60:	4b3f      	ldr	r3, [pc, #252]	@ (8006d60 <xQueueGenericSend+0x200>)
 8006c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	e00a      	b.n	8006c88 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d007      	beq.n	8006c88 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c78:	4b39      	ldr	r3, [pc, #228]	@ (8006d60 <xQueueGenericSend+0x200>)
 8006c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c88:	f002 f8f0 	bl	8008e6c <vPortExitCritical>
				return pdPASS;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e063      	b.n	8006d58 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d103      	bne.n	8006c9e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c96:	f002 f8e9 	bl	8008e6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e05c      	b.n	8006d58 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d106      	bne.n	8006cb2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ca4:	f107 0314 	add.w	r3, r7, #20
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f001 f9e1 	bl	8008070 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cb2:	f002 f8db 	bl	8008e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cb6:	f000 ff3f 	bl	8007b38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cba:	f002 f8a5 	bl	8008e08 <vPortEnterCritical>
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cc4:	b25b      	sxtb	r3, r3
 8006cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cca:	d103      	bne.n	8006cd4 <xQueueGenericSend+0x174>
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cda:	b25b      	sxtb	r3, r3
 8006cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce0:	d103      	bne.n	8006cea <xQueueGenericSend+0x18a>
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cea:	f002 f8bf 	bl	8008e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cee:	1d3a      	adds	r2, r7, #4
 8006cf0:	f107 0314 	add.w	r3, r7, #20
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f001 f9d0 	bl	800809c <xTaskCheckForTimeOut>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d124      	bne.n	8006d4c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d04:	f000 fb4c 	bl	80073a0 <prvIsQueueFull>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d018      	beq.n	8006d40 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d10:	3310      	adds	r3, #16
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	4611      	mov	r1, r2
 8006d16:	4618      	mov	r0, r3
 8006d18:	f001 f8f4 	bl	8007f04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d1e:	f000 fad7 	bl	80072d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d22:	f000 ff17 	bl	8007b54 <xTaskResumeAll>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f47f af7c 	bne.w	8006c26 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d60 <xQueueGenericSend+0x200>)
 8006d30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	e772      	b.n	8006c26 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d42:	f000 fac5 	bl	80072d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d46:	f000 ff05 	bl	8007b54 <xTaskResumeAll>
 8006d4a:	e76c      	b.n	8006c26 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d4e:	f000 fabf 	bl	80072d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d52:	f000 feff 	bl	8007b54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3738      	adds	r7, #56	@ 0x38
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	e000ed04 	.word	0xe000ed04

08006d64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b090      	sub	sp, #64	@ 0x40
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10b      	bne.n	8006d94 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d8e:	bf00      	nop
 8006d90:	bf00      	nop
 8006d92:	e7fd      	b.n	8006d90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d103      	bne.n	8006da2 <xQueueGenericSendFromISR+0x3e>
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <xQueueGenericSendFromISR+0x42>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <xQueueGenericSendFromISR+0x44>
 8006da6:	2300      	movs	r3, #0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10b      	bne.n	8006dc4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006dbe:	bf00      	nop
 8006dc0:	bf00      	nop
 8006dc2:	e7fd      	b.n	8006dc0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d103      	bne.n	8006dd2 <xQueueGenericSendFromISR+0x6e>
 8006dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d101      	bne.n	8006dd6 <xQueueGenericSendFromISR+0x72>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e000      	b.n	8006dd8 <xQueueGenericSendFromISR+0x74>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10b      	bne.n	8006df4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	623b      	str	r3, [r7, #32]
}
 8006dee:	bf00      	nop
 8006df0:	bf00      	nop
 8006df2:	e7fd      	b.n	8006df0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006df4:	f002 f8e8 	bl	8008fc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006df8:	f3ef 8211 	mrs	r2, BASEPRI
 8006dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	61fa      	str	r2, [r7, #28]
 8006e0e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d302      	bcc.n	8006e26 <xQueueGenericSendFromISR+0xc2>
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d12f      	bne.n	8006e86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	68b9      	ldr	r1, [r7, #8]
 8006e3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006e3c:	f000 f9b8 	bl	80071b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e48:	d112      	bne.n	8006e70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d016      	beq.n	8006e80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e54:	3324      	adds	r3, #36	@ 0x24
 8006e56:	4618      	mov	r0, r3
 8006e58:	f001 f8a6 	bl	8007fa8 <xTaskRemoveFromEventList>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00e      	beq.n	8006e80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00b      	beq.n	8006e80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	e007      	b.n	8006e80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006e74:	3301      	adds	r3, #1
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	b25a      	sxtb	r2, r3
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006e80:	2301      	movs	r3, #1
 8006e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006e84:	e001      	b.n	8006e8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e86:	2300      	movs	r3, #0
 8006e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e8c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3740      	adds	r7, #64	@ 0x40
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08c      	sub	sp, #48	@ 0x30
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006eac:	2300      	movs	r3, #0
 8006eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10b      	bne.n	8006ed2 <xQueueReceive+0x32>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	623b      	str	r3, [r7, #32]
}
 8006ecc:	bf00      	nop
 8006ece:	bf00      	nop
 8006ed0:	e7fd      	b.n	8006ece <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d103      	bne.n	8006ee0 <xQueueReceive+0x40>
 8006ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <xQueueReceive+0x44>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e000      	b.n	8006ee6 <xQueueReceive+0x46>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10b      	bne.n	8006f02 <xQueueReceive+0x62>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	61fb      	str	r3, [r7, #28]
}
 8006efc:	bf00      	nop
 8006efe:	bf00      	nop
 8006f00:	e7fd      	b.n	8006efe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f02:	f001 fa11 	bl	8008328 <xTaskGetSchedulerState>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d102      	bne.n	8006f12 <xQueueReceive+0x72>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <xQueueReceive+0x76>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <xQueueReceive+0x78>
 8006f16:	2300      	movs	r3, #0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10b      	bne.n	8006f34 <xQueueReceive+0x94>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	61bb      	str	r3, [r7, #24]
}
 8006f2e:	bf00      	nop
 8006f30:	bf00      	nop
 8006f32:	e7fd      	b.n	8006f30 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f34:	f001 ff68 	bl	8008e08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d01f      	beq.n	8006f84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f44:	68b9      	ldr	r1, [r7, #8]
 8006f46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f48:	f000 f99c 	bl	8007284 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	1e5a      	subs	r2, r3, #1
 8006f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f52:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00f      	beq.n	8006f7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5e:	3310      	adds	r3, #16
 8006f60:	4618      	mov	r0, r3
 8006f62:	f001 f821 	bl	8007fa8 <xTaskRemoveFromEventList>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d007      	beq.n	8006f7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f6c:	4b3c      	ldr	r3, [pc, #240]	@ (8007060 <xQueueReceive+0x1c0>)
 8006f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f7c:	f001 ff76 	bl	8008e6c <vPortExitCritical>
				return pdPASS;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e069      	b.n	8007058 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d103      	bne.n	8006f92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f8a:	f001 ff6f 	bl	8008e6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	e062      	b.n	8007058 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d106      	bne.n	8006fa6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f98:	f107 0310 	add.w	r3, r7, #16
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f001 f867 	bl	8008070 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fa6:	f001 ff61 	bl	8008e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006faa:	f000 fdc5 	bl	8007b38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fae:	f001 ff2b 	bl	8008e08 <vPortEnterCritical>
 8006fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fb8:	b25b      	sxtb	r3, r3
 8006fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbe:	d103      	bne.n	8006fc8 <xQueueReceive+0x128>
 8006fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fce:	b25b      	sxtb	r3, r3
 8006fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd4:	d103      	bne.n	8006fde <xQueueReceive+0x13e>
 8006fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fde:	f001 ff45 	bl	8008e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fe2:	1d3a      	adds	r2, r7, #4
 8006fe4:	f107 0310 	add.w	r3, r7, #16
 8006fe8:	4611      	mov	r1, r2
 8006fea:	4618      	mov	r0, r3
 8006fec:	f001 f856 	bl	800809c <xTaskCheckForTimeOut>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d123      	bne.n	800703e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ff6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ff8:	f000 f9bc 	bl	8007374 <prvIsQueueEmpty>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d017      	beq.n	8007032 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007004:	3324      	adds	r3, #36	@ 0x24
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	4611      	mov	r1, r2
 800700a:	4618      	mov	r0, r3
 800700c:	f000 ff7a 	bl	8007f04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007010:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007012:	f000 f95d 	bl	80072d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007016:	f000 fd9d 	bl	8007b54 <xTaskResumeAll>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d189      	bne.n	8006f34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007020:	4b0f      	ldr	r3, [pc, #60]	@ (8007060 <xQueueReceive+0x1c0>)
 8007022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	e780      	b.n	8006f34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007034:	f000 f94c 	bl	80072d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007038:	f000 fd8c 	bl	8007b54 <xTaskResumeAll>
 800703c:	e77a      	b.n	8006f34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800703e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007040:	f000 f946 	bl	80072d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007044:	f000 fd86 	bl	8007b54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007048:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800704a:	f000 f993 	bl	8007374 <prvIsQueueEmpty>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	f43f af6f 	beq.w	8006f34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007056:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007058:	4618      	mov	r0, r3
 800705a:	3730      	adds	r7, #48	@ 0x30
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	e000ed04 	.word	0xe000ed04

08007064 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08e      	sub	sp, #56	@ 0x38
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10b      	bne.n	8007092 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	623b      	str	r3, [r7, #32]
}
 800708c:	bf00      	nop
 800708e:	bf00      	nop
 8007090:	e7fd      	b.n	800708e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d103      	bne.n	80070a0 <xQueueReceiveFromISR+0x3c>
 8007098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <xQueueReceiveFromISR+0x40>
 80070a0:	2301      	movs	r3, #1
 80070a2:	e000      	b.n	80070a6 <xQueueReceiveFromISR+0x42>
 80070a4:	2300      	movs	r3, #0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10b      	bne.n	80070c2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	61fb      	str	r3, [r7, #28]
}
 80070bc:	bf00      	nop
 80070be:	bf00      	nop
 80070c0:	e7fd      	b.n	80070be <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070c2:	f001 ff81 	bl	8008fc8 <vPortValidateInterruptPriority>
	__asm volatile
 80070c6:	f3ef 8211 	mrs	r2, BASEPRI
 80070ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	61ba      	str	r2, [r7, #24]
 80070dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80070de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d02f      	beq.n	800714e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80070ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070f8:	68b9      	ldr	r1, [r7, #8]
 80070fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070fc:	f000 f8c2 	bl	8007284 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007102:	1e5a      	subs	r2, r3, #1
 8007104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007106:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007108:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800710c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007110:	d112      	bne.n	8007138 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d016      	beq.n	8007148 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800711a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711c:	3310      	adds	r3, #16
 800711e:	4618      	mov	r0, r3
 8007120:	f000 ff42 	bl	8007fa8 <xTaskRemoveFromEventList>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00e      	beq.n	8007148 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00b      	beq.n	8007148 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	e007      	b.n	8007148 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800713c:	3301      	adds	r3, #1
 800713e:	b2db      	uxtb	r3, r3
 8007140:	b25a      	sxtb	r2, r3
 8007142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007148:	2301      	movs	r3, #1
 800714a:	637b      	str	r3, [r7, #52]	@ 0x34
 800714c:	e001      	b.n	8007152 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800714e:	2300      	movs	r3, #0
 8007150:	637b      	str	r3, [r7, #52]	@ 0x34
 8007152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007154:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f383 8811 	msr	BASEPRI, r3
}
 800715c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800715e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007160:	4618      	mov	r0, r3
 8007162:	3738      	adds	r7, #56	@ 0x38
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10b      	bne.n	8007192 <vQueueDelete+0x2a>
	__asm volatile
 800717a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	60bb      	str	r3, [r7, #8]
}
 800718c:	bf00      	nop
 800718e:	bf00      	nop
 8007190:	e7fd      	b.n	800718e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f000 f946 	bl	8007424 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d102      	bne.n	80071a8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f002 f820 	bl	80091e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80071a8:	bf00      	nop
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071bc:	2300      	movs	r3, #0
 80071be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10d      	bne.n	80071ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d14d      	bne.n	8007272 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	4618      	mov	r0, r3
 80071dc:	f001 f8c2 	bl	8008364 <xTaskPriorityDisinherit>
 80071e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	609a      	str	r2, [r3, #8]
 80071e8:	e043      	b.n	8007272 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d119      	bne.n	8007224 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6858      	ldr	r0, [r3, #4]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f8:	461a      	mov	r2, r3
 80071fa:	68b9      	ldr	r1, [r7, #8]
 80071fc:	f002 ffdd 	bl	800a1ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007208:	441a      	add	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	429a      	cmp	r2, r3
 8007218:	d32b      	bcc.n	8007272 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	605a      	str	r2, [r3, #4]
 8007222:	e026      	b.n	8007272 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	68d8      	ldr	r0, [r3, #12]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722c:	461a      	mov	r2, r3
 800722e:	68b9      	ldr	r1, [r7, #8]
 8007230:	f002 ffc3 	bl	800a1ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723c:	425b      	negs	r3, r3
 800723e:	441a      	add	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	429a      	cmp	r2, r3
 800724e:	d207      	bcs.n	8007260 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007258:	425b      	negs	r3, r3
 800725a:	441a      	add	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d105      	bne.n	8007272 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	3b01      	subs	r3, #1
 8007270:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1c5a      	adds	r2, r3, #1
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800727a:	697b      	ldr	r3, [r7, #20]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3718      	adds	r7, #24
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007292:	2b00      	cmp	r3, #0
 8007294:	d018      	beq.n	80072c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68da      	ldr	r2, [r3, #12]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729e:	441a      	add	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d303      	bcc.n	80072b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68d9      	ldr	r1, [r3, #12]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c0:	461a      	mov	r2, r3
 80072c2:	6838      	ldr	r0, [r7, #0]
 80072c4:	f002 ff79 	bl	800a1ba <memcpy>
	}
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072d8:	f001 fd96 	bl	8008e08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072e4:	e011      	b.n	800730a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d012      	beq.n	8007314 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	3324      	adds	r3, #36	@ 0x24
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 fe58 	bl	8007fa8 <xTaskRemoveFromEventList>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80072fe:	f000 ff31 	bl	8008164 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	3b01      	subs	r3, #1
 8007306:	b2db      	uxtb	r3, r3
 8007308:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800730a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800730e:	2b00      	cmp	r3, #0
 8007310:	dce9      	bgt.n	80072e6 <prvUnlockQueue+0x16>
 8007312:	e000      	b.n	8007316 <prvUnlockQueue+0x46>
					break;
 8007314:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	22ff      	movs	r2, #255	@ 0xff
 800731a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800731e:	f001 fda5 	bl	8008e6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007322:	f001 fd71 	bl	8008e08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800732c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800732e:	e011      	b.n	8007354 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d012      	beq.n	800735e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3310      	adds	r3, #16
 800733c:	4618      	mov	r0, r3
 800733e:	f000 fe33 	bl	8007fa8 <xTaskRemoveFromEventList>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007348:	f000 ff0c 	bl	8008164 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800734c:	7bbb      	ldrb	r3, [r7, #14]
 800734e:	3b01      	subs	r3, #1
 8007350:	b2db      	uxtb	r3, r3
 8007352:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007358:	2b00      	cmp	r3, #0
 800735a:	dce9      	bgt.n	8007330 <prvUnlockQueue+0x60>
 800735c:	e000      	b.n	8007360 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800735e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	22ff      	movs	r2, #255	@ 0xff
 8007364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007368:	f001 fd80 	bl	8008e6c <vPortExitCritical>
}
 800736c:	bf00      	nop
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800737c:	f001 fd44 	bl	8008e08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007384:	2b00      	cmp	r3, #0
 8007386:	d102      	bne.n	800738e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007388:	2301      	movs	r3, #1
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	e001      	b.n	8007392 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800738e:	2300      	movs	r3, #0
 8007390:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007392:	f001 fd6b 	bl	8008e6c <vPortExitCritical>

	return xReturn;
 8007396:	68fb      	ldr	r3, [r7, #12]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073a8:	f001 fd2e 	bl	8008e08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d102      	bne.n	80073be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073b8:	2301      	movs	r3, #1
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	e001      	b.n	80073c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073be:	2300      	movs	r3, #0
 80073c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073c2:	f001 fd53 	bl	8008e6c <vPortExitCritical>

	return xReturn;
 80073c6:	68fb      	ldr	r3, [r7, #12]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073da:	2300      	movs	r3, #0
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	e014      	b.n	800740a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80073e0:	4a0f      	ldr	r2, [pc, #60]	@ (8007420 <vQueueAddToRegistry+0x50>)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10b      	bne.n	8007404 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80073ec:	490c      	ldr	r1, [pc, #48]	@ (8007420 <vQueueAddToRegistry+0x50>)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80073f6:	4a0a      	ldr	r2, [pc, #40]	@ (8007420 <vQueueAddToRegistry+0x50>)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	00db      	lsls	r3, r3, #3
 80073fc:	4413      	add	r3, r2
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007402:	e006      	b.n	8007412 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3301      	adds	r3, #1
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2b07      	cmp	r3, #7
 800740e:	d9e7      	bls.n	80073e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007410:	bf00      	nop
 8007412:	bf00      	nop
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	20000c48 	.word	0x20000c48

08007424 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800742c:	2300      	movs	r3, #0
 800742e:	60fb      	str	r3, [r7, #12]
 8007430:	e016      	b.n	8007460 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007432:	4a10      	ldr	r2, [pc, #64]	@ (8007474 <vQueueUnregisterQueue+0x50>)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	00db      	lsls	r3, r3, #3
 8007438:	4413      	add	r3, r2
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	429a      	cmp	r2, r3
 8007440:	d10b      	bne.n	800745a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007442:	4a0c      	ldr	r2, [pc, #48]	@ (8007474 <vQueueUnregisterQueue+0x50>)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2100      	movs	r1, #0
 8007448:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800744c:	4a09      	ldr	r2, [pc, #36]	@ (8007474 <vQueueUnregisterQueue+0x50>)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	00db      	lsls	r3, r3, #3
 8007452:	4413      	add	r3, r2
 8007454:	2200      	movs	r2, #0
 8007456:	605a      	str	r2, [r3, #4]
				break;
 8007458:	e006      	b.n	8007468 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3301      	adds	r3, #1
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2b07      	cmp	r3, #7
 8007464:	d9e5      	bls.n	8007432 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007466:	bf00      	nop
 8007468:	bf00      	nop
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	20000c48 	.word	0x20000c48

08007478 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007488:	f001 fcbe 	bl	8008e08 <vPortEnterCritical>
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007492:	b25b      	sxtb	r3, r3
 8007494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007498:	d103      	bne.n	80074a2 <vQueueWaitForMessageRestricted+0x2a>
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074a8:	b25b      	sxtb	r3, r3
 80074aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ae:	d103      	bne.n	80074b8 <vQueueWaitForMessageRestricted+0x40>
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074b8:	f001 fcd8 	bl	8008e6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d106      	bne.n	80074d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	3324      	adds	r3, #36	@ 0x24
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	68b9      	ldr	r1, [r7, #8]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 fd3f 	bl	8007f50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80074d2:	6978      	ldr	r0, [r7, #20]
 80074d4:	f7ff fefc 	bl	80072d0 <prvUnlockQueue>
	}
 80074d8:	bf00      	nop
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08e      	sub	sp, #56	@ 0x38
 80074e4:	af04      	add	r7, sp, #16
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10b      	bne.n	800750c <xTaskCreateStatic+0x2c>
	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	623b      	str	r3, [r7, #32]
}
 8007506:	bf00      	nop
 8007508:	bf00      	nop
 800750a:	e7fd      	b.n	8007508 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800750c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10b      	bne.n	800752a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	61fb      	str	r3, [r7, #28]
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop
 8007528:	e7fd      	b.n	8007526 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800752a:	235c      	movs	r3, #92	@ 0x5c
 800752c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	2b5c      	cmp	r3, #92	@ 0x5c
 8007532:	d00b      	beq.n	800754c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	61bb      	str	r3, [r7, #24]
}
 8007546:	bf00      	nop
 8007548:	bf00      	nop
 800754a:	e7fd      	b.n	8007548 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800754c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800754e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007550:	2b00      	cmp	r3, #0
 8007552:	d01e      	beq.n	8007592 <xTaskCreateStatic+0xb2>
 8007554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007556:	2b00      	cmp	r3, #0
 8007558:	d01b      	beq.n	8007592 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800755a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800755e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007560:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007562:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007566:	2202      	movs	r2, #2
 8007568:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800756c:	2300      	movs	r3, #0
 800756e:	9303      	str	r3, [sp, #12]
 8007570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007572:	9302      	str	r3, [sp, #8]
 8007574:	f107 0314 	add.w	r3, r7, #20
 8007578:	9301      	str	r3, [sp, #4]
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	68b9      	ldr	r1, [r7, #8]
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 f850 	bl	800762a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800758a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800758c:	f000 f8de 	bl	800774c <prvAddNewTaskToReadyList>
 8007590:	e001      	b.n	8007596 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007592:	2300      	movs	r3, #0
 8007594:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007596:	697b      	ldr	r3, [r7, #20]
	}
 8007598:	4618      	mov	r0, r3
 800759a:	3728      	adds	r7, #40	@ 0x28
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08c      	sub	sp, #48	@ 0x30
 80075a4:	af04      	add	r7, sp, #16
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	603b      	str	r3, [r7, #0]
 80075ac:	4613      	mov	r3, r2
 80075ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80075b0:	88fb      	ldrh	r3, [r7, #6]
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4618      	mov	r0, r3
 80075b6:	f001 fd49 	bl	800904c <pvPortMalloc>
 80075ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00e      	beq.n	80075e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80075c2:	205c      	movs	r0, #92	@ 0x5c
 80075c4:	f001 fd42 	bl	800904c <pvPortMalloc>
 80075c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d003      	beq.n	80075d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80075d6:	e005      	b.n	80075e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075d8:	6978      	ldr	r0, [r7, #20]
 80075da:	f001 fe05 	bl	80091e8 <vPortFree>
 80075de:	e001      	b.n	80075e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075e0:	2300      	movs	r3, #0
 80075e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d017      	beq.n	800761a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075f2:	88fa      	ldrh	r2, [r7, #6]
 80075f4:	2300      	movs	r3, #0
 80075f6:	9303      	str	r3, [sp, #12]
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	9302      	str	r3, [sp, #8]
 80075fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075fe:	9301      	str	r3, [sp, #4]
 8007600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	68b9      	ldr	r1, [r7, #8]
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 f80e 	bl	800762a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800760e:	69f8      	ldr	r0, [r7, #28]
 8007610:	f000 f89c 	bl	800774c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007614:	2301      	movs	r3, #1
 8007616:	61bb      	str	r3, [r7, #24]
 8007618:	e002      	b.n	8007620 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800761a:	f04f 33ff 	mov.w	r3, #4294967295
 800761e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007620:	69bb      	ldr	r3, [r7, #24]
	}
 8007622:	4618      	mov	r0, r3
 8007624:	3720      	adds	r7, #32
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b088      	sub	sp, #32
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	607a      	str	r2, [r7, #4]
 8007636:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	461a      	mov	r2, r3
 8007642:	21a5      	movs	r1, #165	@ 0xa5
 8007644:	f002 fd3a 	bl	800a0bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007652:	3b01      	subs	r3, #1
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	f023 0307 	bic.w	r3, r3, #7
 8007660:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	f003 0307 	and.w	r3, r3, #7
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800766c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	617b      	str	r3, [r7, #20]
}
 800767e:	bf00      	nop
 8007680:	bf00      	nop
 8007682:	e7fd      	b.n	8007680 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d01f      	beq.n	80076ca <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800768a:	2300      	movs	r3, #0
 800768c:	61fb      	str	r3, [r7, #28]
 800768e:	e012      	b.n	80076b6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	7819      	ldrb	r1, [r3, #0]
 8007698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	4413      	add	r3, r2
 800769e:	3334      	adds	r3, #52	@ 0x34
 80076a0:	460a      	mov	r2, r1
 80076a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	4413      	add	r3, r2
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d006      	beq.n	80076be <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	3301      	adds	r3, #1
 80076b4:	61fb      	str	r3, [r7, #28]
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	2b0f      	cmp	r3, #15
 80076ba:	d9e9      	bls.n	8007690 <prvInitialiseNewTask+0x66>
 80076bc:	e000      	b.n	80076c0 <prvInitialiseNewTask+0x96>
			{
				break;
 80076be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80076c8:	e003      	b.n	80076d2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80076ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d4:	2b37      	cmp	r3, #55	@ 0x37
 80076d6:	d901      	bls.n	80076dc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076d8:	2337      	movs	r3, #55	@ 0x37
 80076da:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076e6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80076e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ea:	2200      	movs	r2, #0
 80076ec:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f0:	3304      	adds	r3, #4
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe ffec 	bl	80066d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fa:	3318      	adds	r3, #24
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fe ffe7 	bl	80066d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007706:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800770a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800770e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007710:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007716:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771a:	2200      	movs	r2, #0
 800771c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800771e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	68f9      	ldr	r1, [r7, #12]
 800772a:	69b8      	ldr	r0, [r7, #24]
 800772c:	f001 fa38 	bl	8008ba0 <pxPortInitialiseStack>
 8007730:	4602      	mov	r2, r0
 8007732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007734:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800773c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800773e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007740:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007742:	bf00      	nop
 8007744:	3720      	adds	r7, #32
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007754:	f001 fb58 	bl	8008e08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007758:	4b2d      	ldr	r3, [pc, #180]	@ (8007810 <prvAddNewTaskToReadyList+0xc4>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3301      	adds	r3, #1
 800775e:	4a2c      	ldr	r2, [pc, #176]	@ (8007810 <prvAddNewTaskToReadyList+0xc4>)
 8007760:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007762:	4b2c      	ldr	r3, [pc, #176]	@ (8007814 <prvAddNewTaskToReadyList+0xc8>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d109      	bne.n	800777e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800776a:	4a2a      	ldr	r2, [pc, #168]	@ (8007814 <prvAddNewTaskToReadyList+0xc8>)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007770:	4b27      	ldr	r3, [pc, #156]	@ (8007810 <prvAddNewTaskToReadyList+0xc4>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d110      	bne.n	800779a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007778:	f000 fd18 	bl	80081ac <prvInitialiseTaskLists>
 800777c:	e00d      	b.n	800779a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800777e:	4b26      	ldr	r3, [pc, #152]	@ (8007818 <prvAddNewTaskToReadyList+0xcc>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d109      	bne.n	800779a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007786:	4b23      	ldr	r3, [pc, #140]	@ (8007814 <prvAddNewTaskToReadyList+0xc8>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007790:	429a      	cmp	r2, r3
 8007792:	d802      	bhi.n	800779a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007794:	4a1f      	ldr	r2, [pc, #124]	@ (8007814 <prvAddNewTaskToReadyList+0xc8>)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800779a:	4b20      	ldr	r3, [pc, #128]	@ (800781c <prvAddNewTaskToReadyList+0xd0>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3301      	adds	r3, #1
 80077a0:	4a1e      	ldr	r2, [pc, #120]	@ (800781c <prvAddNewTaskToReadyList+0xd0>)
 80077a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80077a4:	4b1d      	ldr	r3, [pc, #116]	@ (800781c <prvAddNewTaskToReadyList+0xd0>)
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007820 <prvAddNewTaskToReadyList+0xd4>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d903      	bls.n	80077c0 <prvAddNewTaskToReadyList+0x74>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077bc:	4a18      	ldr	r2, [pc, #96]	@ (8007820 <prvAddNewTaskToReadyList+0xd4>)
 80077be:	6013      	str	r3, [r2, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4a15      	ldr	r2, [pc, #84]	@ (8007824 <prvAddNewTaskToReadyList+0xd8>)
 80077ce:	441a      	add	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3304      	adds	r3, #4
 80077d4:	4619      	mov	r1, r3
 80077d6:	4610      	mov	r0, r2
 80077d8:	f7fe ff87 	bl	80066ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077dc:	f001 fb46 	bl	8008e6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007818 <prvAddNewTaskToReadyList+0xcc>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00e      	beq.n	8007806 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007814 <prvAddNewTaskToReadyList+0xc8>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d207      	bcs.n	8007806 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007828 <prvAddNewTaskToReadyList+0xdc>)
 80077f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077fc:	601a      	str	r2, [r3, #0]
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007806:	bf00      	nop
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	2000115c 	.word	0x2000115c
 8007814:	20000c88 	.word	0x20000c88
 8007818:	20001168 	.word	0x20001168
 800781c:	20001178 	.word	0x20001178
 8007820:	20001164 	.word	0x20001164
 8007824:	20000c8c 	.word	0x20000c8c
 8007828:	e000ed04 	.word	0xe000ed04

0800782c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08a      	sub	sp, #40	@ 0x28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007836:	2300      	movs	r3, #0
 8007838:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10b      	bne.n	8007858 <vTaskDelayUntil+0x2c>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	617b      	str	r3, [r7, #20]
}
 8007852:	bf00      	nop
 8007854:	bf00      	nop
 8007856:	e7fd      	b.n	8007854 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10b      	bne.n	8007876 <vTaskDelayUntil+0x4a>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	613b      	str	r3, [r7, #16]
}
 8007870:	bf00      	nop
 8007872:	bf00      	nop
 8007874:	e7fd      	b.n	8007872 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8007876:	4b2a      	ldr	r3, [pc, #168]	@ (8007920 <vTaskDelayUntil+0xf4>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00b      	beq.n	8007896 <vTaskDelayUntil+0x6a>
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	60fb      	str	r3, [r7, #12]
}
 8007890:	bf00      	nop
 8007892:	bf00      	nop
 8007894:	e7fd      	b.n	8007892 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8007896:	f000 f94f 	bl	8007b38 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800789a:	4b22      	ldr	r3, [pc, #136]	@ (8007924 <vTaskDelayUntil+0xf8>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	4413      	add	r3, r2
 80078a8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6a3a      	ldr	r2, [r7, #32]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d20b      	bcs.n	80078cc <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	69fa      	ldr	r2, [r7, #28]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d211      	bcs.n	80078e2 <vTaskDelayUntil+0xb6>
 80078be:	69fa      	ldr	r2, [r7, #28]
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d90d      	bls.n	80078e2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80078c6:	2301      	movs	r3, #1
 80078c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ca:	e00a      	b.n	80078e2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	69fa      	ldr	r2, [r7, #28]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d303      	bcc.n	80078de <vTaskDelayUntil+0xb2>
 80078d6:	69fa      	ldr	r2, [r7, #28]
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d901      	bls.n	80078e2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80078de:	2301      	movs	r3, #1
 80078e0:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	69fa      	ldr	r2, [r7, #28]
 80078e6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80078e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d006      	beq.n	80078fc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80078ee:	69fa      	ldr	r2, [r7, #28]
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	2100      	movs	r1, #0
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fda4 	bl	8008444 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80078fc:	f000 f92a 	bl	8007b54 <xTaskResumeAll>
 8007900:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d107      	bne.n	8007918 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007908:	4b07      	ldr	r3, [pc, #28]	@ (8007928 <vTaskDelayUntil+0xfc>)
 800790a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007918:	bf00      	nop
 800791a:	3728      	adds	r7, #40	@ 0x28
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	20001184 	.word	0x20001184
 8007924:	20001160 	.word	0x20001160
 8007928:	e000ed04 	.word	0xe000ed04

0800792c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8007936:	2300      	movs	r3, #0
 8007938:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b37      	cmp	r3, #55	@ 0x37
 800793e:	d90b      	bls.n	8007958 <vTaskPrioritySet+0x2c>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	60fb      	str	r3, [r7, #12]
}
 8007952:	bf00      	nop
 8007954:	bf00      	nop
 8007956:	e7fd      	b.n	8007954 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2b37      	cmp	r3, #55	@ 0x37
 800795c:	d901      	bls.n	8007962 <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800795e:	2337      	movs	r3, #55	@ 0x37
 8007960:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8007962:	f001 fa51 	bl	8008e08 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d102      	bne.n	8007972 <vTaskPrioritySet+0x46>
 800796c:	4b3a      	ldr	r3, [pc, #232]	@ (8007a58 <vTaskPrioritySet+0x12c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	e000      	b.n	8007974 <vTaskPrioritySet+0x48>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800797a:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	429a      	cmp	r2, r3
 8007982:	d063      	beq.n	8007a4c <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	429a      	cmp	r2, r3
 800798a:	d90d      	bls.n	80079a8 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 800798c:	4b32      	ldr	r3, [pc, #200]	@ (8007a58 <vTaskPrioritySet+0x12c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	429a      	cmp	r2, r3
 8007994:	d00f      	beq.n	80079b6 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8007996:	4b30      	ldr	r3, [pc, #192]	@ (8007a58 <vTaskPrioritySet+0x12c>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d309      	bcc.n	80079b6 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 80079a2:	2301      	movs	r3, #1
 80079a4:	61fb      	str	r3, [r7, #28]
 80079a6:	e006      	b.n	80079b6 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80079a8:	4b2b      	ldr	r3, [pc, #172]	@ (8007a58 <vTaskPrioritySet+0x12c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d101      	bne.n	80079b6 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80079b2:	2301      	movs	r3, #1
 80079b4:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ba:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d102      	bne.n	80079ce <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	db04      	blt.n	80079e6 <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	6959      	ldr	r1, [r3, #20]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	4613      	mov	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4a19      	ldr	r2, [pc, #100]	@ (8007a5c <vTaskPrioritySet+0x130>)
 80079f6:	4413      	add	r3, r2
 80079f8:	4299      	cmp	r1, r3
 80079fa:	d11c      	bne.n	8007a36 <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	3304      	adds	r3, #4
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fe fecf 	bl	80067a4 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a0a:	4b15      	ldr	r3, [pc, #84]	@ (8007a60 <vTaskPrioritySet+0x134>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d903      	bls.n	8007a1a <vTaskPrioritySet+0xee>
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a16:	4a12      	ldr	r2, [pc, #72]	@ (8007a60 <vTaskPrioritySet+0x134>)
 8007a18:	6013      	str	r3, [r2, #0]
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a1e:	4613      	mov	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4a0d      	ldr	r2, [pc, #52]	@ (8007a5c <vTaskPrioritySet+0x130>)
 8007a28:	441a      	add	r2, r3
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	4619      	mov	r1, r3
 8007a30:	4610      	mov	r0, r2
 8007a32:	f7fe fe5a 	bl	80066ea <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d007      	beq.n	8007a4c <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8007a3c:	4b09      	ldr	r3, [pc, #36]	@ (8007a64 <vTaskPrioritySet+0x138>)
 8007a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8007a4c:	f001 fa0e 	bl	8008e6c <vPortExitCritical>
	}
 8007a50:	bf00      	nop
 8007a52:	3720      	adds	r7, #32
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	20000c88 	.word	0x20000c88
 8007a5c:	20000c8c 	.word	0x20000c8c
 8007a60:	20001164 	.word	0x20001164
 8007a64:	e000ed04 	.word	0xe000ed04

08007a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08a      	sub	sp, #40	@ 0x28
 8007a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a72:	2300      	movs	r3, #0
 8007a74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a76:	463a      	mov	r2, r7
 8007a78:	1d39      	adds	r1, r7, #4
 8007a7a:	f107 0308 	add.w	r3, r7, #8
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe fdd2 	bl	8006628 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	9202      	str	r2, [sp, #8]
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	2300      	movs	r3, #0
 8007a94:	460a      	mov	r2, r1
 8007a96:	4922      	ldr	r1, [pc, #136]	@ (8007b20 <vTaskStartScheduler+0xb8>)
 8007a98:	4822      	ldr	r0, [pc, #136]	@ (8007b24 <vTaskStartScheduler+0xbc>)
 8007a9a:	f7ff fd21 	bl	80074e0 <xTaskCreateStatic>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	4a21      	ldr	r2, [pc, #132]	@ (8007b28 <vTaskStartScheduler+0xc0>)
 8007aa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007aa4:	4b20      	ldr	r3, [pc, #128]	@ (8007b28 <vTaskStartScheduler+0xc0>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007aac:	2301      	movs	r3, #1
 8007aae:	617b      	str	r3, [r7, #20]
 8007ab0:	e001      	b.n	8007ab6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d102      	bne.n	8007ac2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007abc:	f000 fd16 	bl	80084ec <xTimerCreateTimerTask>
 8007ac0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d116      	bne.n	8007af6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	613b      	str	r3, [r7, #16]
}
 8007ada:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007adc:	4b13      	ldr	r3, [pc, #76]	@ (8007b2c <vTaskStartScheduler+0xc4>)
 8007ade:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ae4:	4b12      	ldr	r3, [pc, #72]	@ (8007b30 <vTaskStartScheduler+0xc8>)
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007aea:	4b12      	ldr	r3, [pc, #72]	@ (8007b34 <vTaskStartScheduler+0xcc>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007af0:	f001 f8e6 	bl	8008cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007af4:	e00f      	b.n	8007b16 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afc:	d10b      	bne.n	8007b16 <vTaskStartScheduler+0xae>
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	60fb      	str	r3, [r7, #12]
}
 8007b10:	bf00      	nop
 8007b12:	bf00      	nop
 8007b14:	e7fd      	b.n	8007b12 <vTaskStartScheduler+0xaa>
}
 8007b16:	bf00      	nop
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	0800c784 	.word	0x0800c784
 8007b24:	0800817d 	.word	0x0800817d
 8007b28:	20001180 	.word	0x20001180
 8007b2c:	2000117c 	.word	0x2000117c
 8007b30:	20001168 	.word	0x20001168
 8007b34:	20001160 	.word	0x20001160

08007b38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b38:	b480      	push	{r7}
 8007b3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b3c:	4b04      	ldr	r3, [pc, #16]	@ (8007b50 <vTaskSuspendAll+0x18>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3301      	adds	r3, #1
 8007b42:	4a03      	ldr	r2, [pc, #12]	@ (8007b50 <vTaskSuspendAll+0x18>)
 8007b44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b46:	bf00      	nop
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr
 8007b50:	20001184 	.word	0x20001184

08007b54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b62:	4b42      	ldr	r3, [pc, #264]	@ (8007c6c <xTaskResumeAll+0x118>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10b      	bne.n	8007b82 <xTaskResumeAll+0x2e>
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	603b      	str	r3, [r7, #0]
}
 8007b7c:	bf00      	nop
 8007b7e:	bf00      	nop
 8007b80:	e7fd      	b.n	8007b7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b82:	f001 f941 	bl	8008e08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b86:	4b39      	ldr	r3, [pc, #228]	@ (8007c6c <xTaskResumeAll+0x118>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	4a37      	ldr	r2, [pc, #220]	@ (8007c6c <xTaskResumeAll+0x118>)
 8007b8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b90:	4b36      	ldr	r3, [pc, #216]	@ (8007c6c <xTaskResumeAll+0x118>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d162      	bne.n	8007c5e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b98:	4b35      	ldr	r3, [pc, #212]	@ (8007c70 <xTaskResumeAll+0x11c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d05e      	beq.n	8007c5e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ba0:	e02f      	b.n	8007c02 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ba2:	4b34      	ldr	r3, [pc, #208]	@ (8007c74 <xTaskResumeAll+0x120>)
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3318      	adds	r3, #24
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fe fdf8 	bl	80067a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fe fdf3 	bl	80067a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8007c78 <xTaskResumeAll+0x124>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d903      	bls.n	8007bd2 <xTaskResumeAll+0x7e>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bce:	4a2a      	ldr	r2, [pc, #168]	@ (8007c78 <xTaskResumeAll+0x124>)
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4a27      	ldr	r2, [pc, #156]	@ (8007c7c <xTaskResumeAll+0x128>)
 8007be0:	441a      	add	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3304      	adds	r3, #4
 8007be6:	4619      	mov	r1, r3
 8007be8:	4610      	mov	r0, r2
 8007bea:	f7fe fd7e 	bl	80066ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bf2:	4b23      	ldr	r3, [pc, #140]	@ (8007c80 <xTaskResumeAll+0x12c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d302      	bcc.n	8007c02 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007bfc:	4b21      	ldr	r3, [pc, #132]	@ (8007c84 <xTaskResumeAll+0x130>)
 8007bfe:	2201      	movs	r2, #1
 8007c00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c02:	4b1c      	ldr	r3, [pc, #112]	@ (8007c74 <xTaskResumeAll+0x120>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1cb      	bne.n	8007ba2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c10:	f000 fb6a 	bl	80082e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c14:	4b1c      	ldr	r3, [pc, #112]	@ (8007c88 <xTaskResumeAll+0x134>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d010      	beq.n	8007c42 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c20:	f000 f858 	bl	8007cd4 <xTaskIncrementTick>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d002      	beq.n	8007c30 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007c2a:	4b16      	ldr	r3, [pc, #88]	@ (8007c84 <xTaskResumeAll+0x130>)
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1f1      	bne.n	8007c20 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007c3c:	4b12      	ldr	r3, [pc, #72]	@ (8007c88 <xTaskResumeAll+0x134>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c42:	4b10      	ldr	r3, [pc, #64]	@ (8007c84 <xTaskResumeAll+0x130>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d009      	beq.n	8007c5e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8007c8c <xTaskResumeAll+0x138>)
 8007c50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c5e:	f001 f905 	bl	8008e6c <vPortExitCritical>

	return xAlreadyYielded;
 8007c62:	68bb      	ldr	r3, [r7, #8]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	20001184 	.word	0x20001184
 8007c70:	2000115c 	.word	0x2000115c
 8007c74:	2000111c 	.word	0x2000111c
 8007c78:	20001164 	.word	0x20001164
 8007c7c:	20000c8c 	.word	0x20000c8c
 8007c80:	20000c88 	.word	0x20000c88
 8007c84:	20001170 	.word	0x20001170
 8007c88:	2000116c 	.word	0x2000116c
 8007c8c:	e000ed04 	.word	0xe000ed04

08007c90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c96:	4b05      	ldr	r3, [pc, #20]	@ (8007cac <xTaskGetTickCount+0x1c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c9c:	687b      	ldr	r3, [r7, #4]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	20001160 	.word	0x20001160

08007cb0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cb6:	f001 f987 	bl	8008fc8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007cba:	2300      	movs	r3, #0
 8007cbc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007cbe:	4b04      	ldr	r3, [pc, #16]	@ (8007cd0 <xTaskGetTickCountFromISR+0x20>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cc4:	683b      	ldr	r3, [r7, #0]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	20001160 	.word	0x20001160

08007cd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cde:	4b4f      	ldr	r3, [pc, #316]	@ (8007e1c <xTaskIncrementTick+0x148>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f040 8090 	bne.w	8007e08 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ce8:	4b4d      	ldr	r3, [pc, #308]	@ (8007e20 <xTaskIncrementTick+0x14c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3301      	adds	r3, #1
 8007cee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007cf0:	4a4b      	ldr	r2, [pc, #300]	@ (8007e20 <xTaskIncrementTick+0x14c>)
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d121      	bne.n	8007d40 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007cfc:	4b49      	ldr	r3, [pc, #292]	@ (8007e24 <xTaskIncrementTick+0x150>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00b      	beq.n	8007d1e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	603b      	str	r3, [r7, #0]
}
 8007d18:	bf00      	nop
 8007d1a:	bf00      	nop
 8007d1c:	e7fd      	b.n	8007d1a <xTaskIncrementTick+0x46>
 8007d1e:	4b41      	ldr	r3, [pc, #260]	@ (8007e24 <xTaskIncrementTick+0x150>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	4b40      	ldr	r3, [pc, #256]	@ (8007e28 <xTaskIncrementTick+0x154>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a3e      	ldr	r2, [pc, #248]	@ (8007e24 <xTaskIncrementTick+0x150>)
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	4a3e      	ldr	r2, [pc, #248]	@ (8007e28 <xTaskIncrementTick+0x154>)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	4b3e      	ldr	r3, [pc, #248]	@ (8007e2c <xTaskIncrementTick+0x158>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3301      	adds	r3, #1
 8007d38:	4a3c      	ldr	r2, [pc, #240]	@ (8007e2c <xTaskIncrementTick+0x158>)
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	f000 fad4 	bl	80082e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d40:	4b3b      	ldr	r3, [pc, #236]	@ (8007e30 <xTaskIncrementTick+0x15c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d349      	bcc.n	8007dde <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d4a:	4b36      	ldr	r3, [pc, #216]	@ (8007e24 <xTaskIncrementTick+0x150>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d104      	bne.n	8007d5e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d54:	4b36      	ldr	r3, [pc, #216]	@ (8007e30 <xTaskIncrementTick+0x15c>)
 8007d56:	f04f 32ff 	mov.w	r2, #4294967295
 8007d5a:	601a      	str	r2, [r3, #0]
					break;
 8007d5c:	e03f      	b.n	8007dde <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d5e:	4b31      	ldr	r3, [pc, #196]	@ (8007e24 <xTaskIncrementTick+0x150>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d203      	bcs.n	8007d7e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d76:	4a2e      	ldr	r2, [pc, #184]	@ (8007e30 <xTaskIncrementTick+0x15c>)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d7c:	e02f      	b.n	8007dde <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	3304      	adds	r3, #4
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fe fd0e 	bl	80067a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d004      	beq.n	8007d9a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	3318      	adds	r3, #24
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7fe fd05 	bl	80067a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d9e:	4b25      	ldr	r3, [pc, #148]	@ (8007e34 <xTaskIncrementTick+0x160>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d903      	bls.n	8007dae <xTaskIncrementTick+0xda>
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007daa:	4a22      	ldr	r2, [pc, #136]	@ (8007e34 <xTaskIncrementTick+0x160>)
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db2:	4613      	mov	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4a1f      	ldr	r2, [pc, #124]	@ (8007e38 <xTaskIncrementTick+0x164>)
 8007dbc:	441a      	add	r2, r3
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	f7fe fc90 	bl	80066ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dce:	4b1b      	ldr	r3, [pc, #108]	@ (8007e3c <xTaskIncrementTick+0x168>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d3b8      	bcc.n	8007d4a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ddc:	e7b5      	b.n	8007d4a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007dde:	4b17      	ldr	r3, [pc, #92]	@ (8007e3c <xTaskIncrementTick+0x168>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007de4:	4914      	ldr	r1, [pc, #80]	@ (8007e38 <xTaskIncrementTick+0x164>)
 8007de6:	4613      	mov	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	440b      	add	r3, r1
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d901      	bls.n	8007dfa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007df6:	2301      	movs	r3, #1
 8007df8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007dfa:	4b11      	ldr	r3, [pc, #68]	@ (8007e40 <xTaskIncrementTick+0x16c>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d007      	beq.n	8007e12 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007e02:	2301      	movs	r3, #1
 8007e04:	617b      	str	r3, [r7, #20]
 8007e06:	e004      	b.n	8007e12 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007e08:	4b0e      	ldr	r3, [pc, #56]	@ (8007e44 <xTaskIncrementTick+0x170>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8007e44 <xTaskIncrementTick+0x170>)
 8007e10:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007e12:	697b      	ldr	r3, [r7, #20]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	20001184 	.word	0x20001184
 8007e20:	20001160 	.word	0x20001160
 8007e24:	20001114 	.word	0x20001114
 8007e28:	20001118 	.word	0x20001118
 8007e2c:	20001174 	.word	0x20001174
 8007e30:	2000117c 	.word	0x2000117c
 8007e34:	20001164 	.word	0x20001164
 8007e38:	20000c8c 	.word	0x20000c8c
 8007e3c:	20000c88 	.word	0x20000c88
 8007e40:	20001170 	.word	0x20001170
 8007e44:	2000116c 	.word	0x2000116c

08007e48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e4e:	4b28      	ldr	r3, [pc, #160]	@ (8007ef0 <vTaskSwitchContext+0xa8>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e56:	4b27      	ldr	r3, [pc, #156]	@ (8007ef4 <vTaskSwitchContext+0xac>)
 8007e58:	2201      	movs	r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e5c:	e042      	b.n	8007ee4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007e5e:	4b25      	ldr	r3, [pc, #148]	@ (8007ef4 <vTaskSwitchContext+0xac>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e64:	4b24      	ldr	r3, [pc, #144]	@ (8007ef8 <vTaskSwitchContext+0xb0>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	60fb      	str	r3, [r7, #12]
 8007e6a:	e011      	b.n	8007e90 <vTaskSwitchContext+0x48>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10b      	bne.n	8007e8a <vTaskSwitchContext+0x42>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	607b      	str	r3, [r7, #4]
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop
 8007e88:	e7fd      	b.n	8007e86 <vTaskSwitchContext+0x3e>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	491a      	ldr	r1, [pc, #104]	@ (8007efc <vTaskSwitchContext+0xb4>)
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	4613      	mov	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	440b      	add	r3, r1
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d0e3      	beq.n	8007e6c <vTaskSwitchContext+0x24>
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4a13      	ldr	r2, [pc, #76]	@ (8007efc <vTaskSwitchContext+0xb4>)
 8007eb0:	4413      	add	r3, r2
 8007eb2:	60bb      	str	r3, [r7, #8]
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	685a      	ldr	r2, [r3, #4]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	605a      	str	r2, [r3, #4]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	3308      	adds	r3, #8
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d104      	bne.n	8007ed4 <vTaskSwitchContext+0x8c>
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	605a      	str	r2, [r3, #4]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	4a09      	ldr	r2, [pc, #36]	@ (8007f00 <vTaskSwitchContext+0xb8>)
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	4a06      	ldr	r2, [pc, #24]	@ (8007ef8 <vTaskSwitchContext+0xb0>)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6013      	str	r3, [r2, #0]
}
 8007ee4:	bf00      	nop
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	20001184 	.word	0x20001184
 8007ef4:	20001170 	.word	0x20001170
 8007ef8:	20001164 	.word	0x20001164
 8007efc:	20000c8c 	.word	0x20000c8c
 8007f00:	20000c88 	.word	0x20000c88

08007f04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10b      	bne.n	8007f2c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	60fb      	str	r3, [r7, #12]
}
 8007f26:	bf00      	nop
 8007f28:	bf00      	nop
 8007f2a:	e7fd      	b.n	8007f28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f2c:	4b07      	ldr	r3, [pc, #28]	@ (8007f4c <vTaskPlaceOnEventList+0x48>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3318      	adds	r3, #24
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7fe fbfc 	bl	8006732 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	6838      	ldr	r0, [r7, #0]
 8007f3e:	f000 fa81 	bl	8008444 <prvAddCurrentTaskToDelayedList>
}
 8007f42:	bf00      	nop
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000c88 	.word	0x20000c88

08007f50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10b      	bne.n	8007f7a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f66:	f383 8811 	msr	BASEPRI, r3
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	617b      	str	r3, [r7, #20]
}
 8007f74:	bf00      	nop
 8007f76:	bf00      	nop
 8007f78:	e7fd      	b.n	8007f76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007fa4 <vTaskPlaceOnEventListRestricted+0x54>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3318      	adds	r3, #24
 8007f80:	4619      	mov	r1, r3
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f7fe fbb1 	bl	80066ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d002      	beq.n	8007f94 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f92:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f94:	6879      	ldr	r1, [r7, #4]
 8007f96:	68b8      	ldr	r0, [r7, #8]
 8007f98:	f000 fa54 	bl	8008444 <prvAddCurrentTaskToDelayedList>
	}
 8007f9c:	bf00      	nop
 8007f9e:	3718      	adds	r7, #24
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	20000c88 	.word	0x20000c88

08007fa8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10b      	bne.n	8007fd6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	60fb      	str	r3, [r7, #12]
}
 8007fd0:	bf00      	nop
 8007fd2:	bf00      	nop
 8007fd4:	e7fd      	b.n	8007fd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	3318      	adds	r3, #24
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fe fbe2 	bl	80067a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8008058 <xTaskRemoveFromEventList+0xb0>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d11d      	bne.n	8008024 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	3304      	adds	r3, #4
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fe fbd9 	bl	80067a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ff6:	4b19      	ldr	r3, [pc, #100]	@ (800805c <xTaskRemoveFromEventList+0xb4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d903      	bls.n	8008006 <xTaskRemoveFromEventList+0x5e>
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008002:	4a16      	ldr	r2, [pc, #88]	@ (800805c <xTaskRemoveFromEventList+0xb4>)
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800800a:	4613      	mov	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4a13      	ldr	r2, [pc, #76]	@ (8008060 <xTaskRemoveFromEventList+0xb8>)
 8008014:	441a      	add	r2, r3
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	3304      	adds	r3, #4
 800801a:	4619      	mov	r1, r3
 800801c:	4610      	mov	r0, r2
 800801e:	f7fe fb64 	bl	80066ea <vListInsertEnd>
 8008022:	e005      	b.n	8008030 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	3318      	adds	r3, #24
 8008028:	4619      	mov	r1, r3
 800802a:	480e      	ldr	r0, [pc, #56]	@ (8008064 <xTaskRemoveFromEventList+0xbc>)
 800802c:	f7fe fb5d 	bl	80066ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008034:	4b0c      	ldr	r3, [pc, #48]	@ (8008068 <xTaskRemoveFromEventList+0xc0>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803a:	429a      	cmp	r2, r3
 800803c:	d905      	bls.n	800804a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800803e:	2301      	movs	r3, #1
 8008040:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008042:	4b0a      	ldr	r3, [pc, #40]	@ (800806c <xTaskRemoveFromEventList+0xc4>)
 8008044:	2201      	movs	r2, #1
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	e001      	b.n	800804e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800804a:	2300      	movs	r3, #0
 800804c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800804e:	697b      	ldr	r3, [r7, #20]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3718      	adds	r7, #24
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	20001184 	.word	0x20001184
 800805c:	20001164 	.word	0x20001164
 8008060:	20000c8c 	.word	0x20000c8c
 8008064:	2000111c 	.word	0x2000111c
 8008068:	20000c88 	.word	0x20000c88
 800806c:	20001170 	.word	0x20001170

08008070 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008078:	4b06      	ldr	r3, [pc, #24]	@ (8008094 <vTaskInternalSetTimeOutState+0x24>)
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008080:	4b05      	ldr	r3, [pc, #20]	@ (8008098 <vTaskInternalSetTimeOutState+0x28>)
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	605a      	str	r2, [r3, #4]
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	20001174 	.word	0x20001174
 8008098:	20001160 	.word	0x20001160

0800809c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10b      	bne.n	80080c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80080ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	613b      	str	r3, [r7, #16]
}
 80080be:	bf00      	nop
 80080c0:	bf00      	nop
 80080c2:	e7fd      	b.n	80080c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10b      	bne.n	80080e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	60fb      	str	r3, [r7, #12]
}
 80080dc:	bf00      	nop
 80080de:	bf00      	nop
 80080e0:	e7fd      	b.n	80080de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80080e2:	f000 fe91 	bl	8008e08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80080e6:	4b1d      	ldr	r3, [pc, #116]	@ (800815c <xTaskCheckForTimeOut+0xc0>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fe:	d102      	bne.n	8008106 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008100:	2300      	movs	r3, #0
 8008102:	61fb      	str	r3, [r7, #28]
 8008104:	e023      	b.n	800814e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	4b15      	ldr	r3, [pc, #84]	@ (8008160 <xTaskCheckForTimeOut+0xc4>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	429a      	cmp	r2, r3
 8008110:	d007      	beq.n	8008122 <xTaskCheckForTimeOut+0x86>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	429a      	cmp	r2, r3
 800811a:	d302      	bcc.n	8008122 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800811c:	2301      	movs	r3, #1
 800811e:	61fb      	str	r3, [r7, #28]
 8008120:	e015      	b.n	800814e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	429a      	cmp	r2, r3
 800812a:	d20b      	bcs.n	8008144 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	1ad2      	subs	r2, r2, r3
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7ff ff99 	bl	8008070 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800813e:	2300      	movs	r3, #0
 8008140:	61fb      	str	r3, [r7, #28]
 8008142:	e004      	b.n	800814e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2200      	movs	r2, #0
 8008148:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800814a:	2301      	movs	r3, #1
 800814c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800814e:	f000 fe8d 	bl	8008e6c <vPortExitCritical>

	return xReturn;
 8008152:	69fb      	ldr	r3, [r7, #28]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3720      	adds	r7, #32
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	20001160 	.word	0x20001160
 8008160:	20001174 	.word	0x20001174

08008164 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008164:	b480      	push	{r7}
 8008166:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008168:	4b03      	ldr	r3, [pc, #12]	@ (8008178 <vTaskMissedYield+0x14>)
 800816a:	2201      	movs	r2, #1
 800816c:	601a      	str	r2, [r3, #0]
}
 800816e:	bf00      	nop
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	20001170 	.word	0x20001170

0800817c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008184:	f000 f852 	bl	800822c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008188:	4b06      	ldr	r3, [pc, #24]	@ (80081a4 <prvIdleTask+0x28>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d9f9      	bls.n	8008184 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008190:	4b05      	ldr	r3, [pc, #20]	@ (80081a8 <prvIdleTask+0x2c>)
 8008192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081a0:	e7f0      	b.n	8008184 <prvIdleTask+0x8>
 80081a2:	bf00      	nop
 80081a4:	20000c8c 	.word	0x20000c8c
 80081a8:	e000ed04 	.word	0xe000ed04

080081ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081b2:	2300      	movs	r3, #0
 80081b4:	607b      	str	r3, [r7, #4]
 80081b6:	e00c      	b.n	80081d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	4613      	mov	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4a12      	ldr	r2, [pc, #72]	@ (800820c <prvInitialiseTaskLists+0x60>)
 80081c4:	4413      	add	r3, r2
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe fa62 	bl	8006690 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3301      	adds	r3, #1
 80081d0:	607b      	str	r3, [r7, #4]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b37      	cmp	r3, #55	@ 0x37
 80081d6:	d9ef      	bls.n	80081b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081d8:	480d      	ldr	r0, [pc, #52]	@ (8008210 <prvInitialiseTaskLists+0x64>)
 80081da:	f7fe fa59 	bl	8006690 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081de:	480d      	ldr	r0, [pc, #52]	@ (8008214 <prvInitialiseTaskLists+0x68>)
 80081e0:	f7fe fa56 	bl	8006690 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081e4:	480c      	ldr	r0, [pc, #48]	@ (8008218 <prvInitialiseTaskLists+0x6c>)
 80081e6:	f7fe fa53 	bl	8006690 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80081ea:	480c      	ldr	r0, [pc, #48]	@ (800821c <prvInitialiseTaskLists+0x70>)
 80081ec:	f7fe fa50 	bl	8006690 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081f0:	480b      	ldr	r0, [pc, #44]	@ (8008220 <prvInitialiseTaskLists+0x74>)
 80081f2:	f7fe fa4d 	bl	8006690 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008224 <prvInitialiseTaskLists+0x78>)
 80081f8:	4a05      	ldr	r2, [pc, #20]	@ (8008210 <prvInitialiseTaskLists+0x64>)
 80081fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008228 <prvInitialiseTaskLists+0x7c>)
 80081fe:	4a05      	ldr	r2, [pc, #20]	@ (8008214 <prvInitialiseTaskLists+0x68>)
 8008200:	601a      	str	r2, [r3, #0]
}
 8008202:	bf00      	nop
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	20000c8c 	.word	0x20000c8c
 8008210:	200010ec 	.word	0x200010ec
 8008214:	20001100 	.word	0x20001100
 8008218:	2000111c 	.word	0x2000111c
 800821c:	20001130 	.word	0x20001130
 8008220:	20001148 	.word	0x20001148
 8008224:	20001114 	.word	0x20001114
 8008228:	20001118 	.word	0x20001118

0800822c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008232:	e019      	b.n	8008268 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008234:	f000 fde8 	bl	8008e08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008238:	4b10      	ldr	r3, [pc, #64]	@ (800827c <prvCheckTasksWaitingTermination+0x50>)
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3304      	adds	r3, #4
 8008244:	4618      	mov	r0, r3
 8008246:	f7fe faad 	bl	80067a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800824a:	4b0d      	ldr	r3, [pc, #52]	@ (8008280 <prvCheckTasksWaitingTermination+0x54>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3b01      	subs	r3, #1
 8008250:	4a0b      	ldr	r2, [pc, #44]	@ (8008280 <prvCheckTasksWaitingTermination+0x54>)
 8008252:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008254:	4b0b      	ldr	r3, [pc, #44]	@ (8008284 <prvCheckTasksWaitingTermination+0x58>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	3b01      	subs	r3, #1
 800825a:	4a0a      	ldr	r2, [pc, #40]	@ (8008284 <prvCheckTasksWaitingTermination+0x58>)
 800825c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800825e:	f000 fe05 	bl	8008e6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f810 	bl	8008288 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008268:	4b06      	ldr	r3, [pc, #24]	@ (8008284 <prvCheckTasksWaitingTermination+0x58>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1e1      	bne.n	8008234 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	20001130 	.word	0x20001130
 8008280:	2000115c 	.word	0x2000115c
 8008284:	20001144 	.word	0x20001144

08008288 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008296:	2b00      	cmp	r3, #0
 8008298:	d108      	bne.n	80082ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 ffa2 	bl	80091e8 <vPortFree>
				vPortFree( pxTCB );
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 ff9f 	bl	80091e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082aa:	e019      	b.n	80082e0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d103      	bne.n	80082be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 ff96 	bl	80091e8 <vPortFree>
	}
 80082bc:	e010      	b.n	80082e0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d00b      	beq.n	80082e0 <prvDeleteTCB+0x58>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	60fb      	str	r3, [r7, #12]
}
 80082da:	bf00      	nop
 80082dc:	bf00      	nop
 80082de:	e7fd      	b.n	80082dc <prvDeleteTCB+0x54>
	}
 80082e0:	bf00      	nop
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008320 <prvResetNextTaskUnblockTime+0x38>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d104      	bne.n	8008302 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80082f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008324 <prvResetNextTaskUnblockTime+0x3c>)
 80082fa:	f04f 32ff 	mov.w	r2, #4294967295
 80082fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008300:	e008      	b.n	8008314 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008302:	4b07      	ldr	r3, [pc, #28]	@ (8008320 <prvResetNextTaskUnblockTime+0x38>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	4a04      	ldr	r2, [pc, #16]	@ (8008324 <prvResetNextTaskUnblockTime+0x3c>)
 8008312:	6013      	str	r3, [r2, #0]
}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	20001114 	.word	0x20001114
 8008324:	2000117c 	.word	0x2000117c

08008328 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800832e:	4b0b      	ldr	r3, [pc, #44]	@ (800835c <xTaskGetSchedulerState+0x34>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d102      	bne.n	800833c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008336:	2301      	movs	r3, #1
 8008338:	607b      	str	r3, [r7, #4]
 800833a:	e008      	b.n	800834e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800833c:	4b08      	ldr	r3, [pc, #32]	@ (8008360 <xTaskGetSchedulerState+0x38>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d102      	bne.n	800834a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008344:	2302      	movs	r3, #2
 8008346:	607b      	str	r3, [r7, #4]
 8008348:	e001      	b.n	800834e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800834a:	2300      	movs	r3, #0
 800834c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800834e:	687b      	ldr	r3, [r7, #4]
	}
 8008350:	4618      	mov	r0, r3
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	20001168 	.word	0x20001168
 8008360:	20001184 	.word	0x20001184

08008364 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008370:	2300      	movs	r3, #0
 8008372:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d058      	beq.n	800842c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800837a:	4b2f      	ldr	r3, [pc, #188]	@ (8008438 <xTaskPriorityDisinherit+0xd4>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	429a      	cmp	r2, r3
 8008382:	d00b      	beq.n	800839c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	60fb      	str	r3, [r7, #12]
}
 8008396:	bf00      	nop
 8008398:	bf00      	nop
 800839a:	e7fd      	b.n	8008398 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10b      	bne.n	80083bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	60bb      	str	r3, [r7, #8]
}
 80083b6:	bf00      	nop
 80083b8:	bf00      	nop
 80083ba:	e7fd      	b.n	80083b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083c0:	1e5a      	subs	r2, r3, #1
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d02c      	beq.n	800842c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d128      	bne.n	800842c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	3304      	adds	r3, #4
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fe f9e0 	bl	80067a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083fc:	4b0f      	ldr	r3, [pc, #60]	@ (800843c <xTaskPriorityDisinherit+0xd8>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	429a      	cmp	r2, r3
 8008402:	d903      	bls.n	800840c <xTaskPriorityDisinherit+0xa8>
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008408:	4a0c      	ldr	r2, [pc, #48]	@ (800843c <xTaskPriorityDisinherit+0xd8>)
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008410:	4613      	mov	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4a09      	ldr	r2, [pc, #36]	@ (8008440 <xTaskPriorityDisinherit+0xdc>)
 800841a:	441a      	add	r2, r3
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	3304      	adds	r3, #4
 8008420:	4619      	mov	r1, r3
 8008422:	4610      	mov	r0, r2
 8008424:	f7fe f961 	bl	80066ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008428:	2301      	movs	r3, #1
 800842a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800842c:	697b      	ldr	r3, [r7, #20]
	}
 800842e:	4618      	mov	r0, r3
 8008430:	3718      	adds	r7, #24
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20000c88 	.word	0x20000c88
 800843c:	20001164 	.word	0x20001164
 8008440:	20000c8c 	.word	0x20000c8c

08008444 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800844e:	4b21      	ldr	r3, [pc, #132]	@ (80084d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008454:	4b20      	ldr	r3, [pc, #128]	@ (80084d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	3304      	adds	r3, #4
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe f9a2 	bl	80067a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008466:	d10a      	bne.n	800847e <prvAddCurrentTaskToDelayedList+0x3a>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d007      	beq.n	800847e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800846e:	4b1a      	ldr	r3, [pc, #104]	@ (80084d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3304      	adds	r3, #4
 8008474:	4619      	mov	r1, r3
 8008476:	4819      	ldr	r0, [pc, #100]	@ (80084dc <prvAddCurrentTaskToDelayedList+0x98>)
 8008478:	f7fe f937 	bl	80066ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800847c:	e026      	b.n	80084cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4413      	add	r3, r2
 8008484:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008486:	4b14      	ldr	r3, [pc, #80]	@ (80084d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	429a      	cmp	r2, r3
 8008494:	d209      	bcs.n	80084aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008496:	4b12      	ldr	r3, [pc, #72]	@ (80084e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	4b0f      	ldr	r3, [pc, #60]	@ (80084d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3304      	adds	r3, #4
 80084a0:	4619      	mov	r1, r3
 80084a2:	4610      	mov	r0, r2
 80084a4:	f7fe f945 	bl	8006732 <vListInsert>
}
 80084a8:	e010      	b.n	80084cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084aa:	4b0e      	ldr	r3, [pc, #56]	@ (80084e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	4b0a      	ldr	r3, [pc, #40]	@ (80084d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3304      	adds	r3, #4
 80084b4:	4619      	mov	r1, r3
 80084b6:	4610      	mov	r0, r2
 80084b8:	f7fe f93b 	bl	8006732 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084bc:	4b0a      	ldr	r3, [pc, #40]	@ (80084e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d202      	bcs.n	80084cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80084c6:	4a08      	ldr	r2, [pc, #32]	@ (80084e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	6013      	str	r3, [r2, #0]
}
 80084cc:	bf00      	nop
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	20001160 	.word	0x20001160
 80084d8:	20000c88 	.word	0x20000c88
 80084dc:	20001148 	.word	0x20001148
 80084e0:	20001118 	.word	0x20001118
 80084e4:	20001114 	.word	0x20001114
 80084e8:	2000117c 	.word	0x2000117c

080084ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08a      	sub	sp, #40	@ 0x28
 80084f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80084f6:	f000 fb13 	bl	8008b20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80084fa:	4b1d      	ldr	r3, [pc, #116]	@ (8008570 <xTimerCreateTimerTask+0x84>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d021      	beq.n	8008546 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008502:	2300      	movs	r3, #0
 8008504:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008506:	2300      	movs	r3, #0
 8008508:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800850a:	1d3a      	adds	r2, r7, #4
 800850c:	f107 0108 	add.w	r1, r7, #8
 8008510:	f107 030c 	add.w	r3, r7, #12
 8008514:	4618      	mov	r0, r3
 8008516:	f7fe f8a1 	bl	800665c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800851a:	6879      	ldr	r1, [r7, #4]
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	9202      	str	r2, [sp, #8]
 8008522:	9301      	str	r3, [sp, #4]
 8008524:	2302      	movs	r3, #2
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	2300      	movs	r3, #0
 800852a:	460a      	mov	r2, r1
 800852c:	4911      	ldr	r1, [pc, #68]	@ (8008574 <xTimerCreateTimerTask+0x88>)
 800852e:	4812      	ldr	r0, [pc, #72]	@ (8008578 <xTimerCreateTimerTask+0x8c>)
 8008530:	f7fe ffd6 	bl	80074e0 <xTaskCreateStatic>
 8008534:	4603      	mov	r3, r0
 8008536:	4a11      	ldr	r2, [pc, #68]	@ (800857c <xTimerCreateTimerTask+0x90>)
 8008538:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800853a:	4b10      	ldr	r3, [pc, #64]	@ (800857c <xTimerCreateTimerTask+0x90>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008542:	2301      	movs	r3, #1
 8008544:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10b      	bne.n	8008564 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	613b      	str	r3, [r7, #16]
}
 800855e:	bf00      	nop
 8008560:	bf00      	nop
 8008562:	e7fd      	b.n	8008560 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008564:	697b      	ldr	r3, [r7, #20]
}
 8008566:	4618      	mov	r0, r3
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	200011b8 	.word	0x200011b8
 8008574:	0800c78c 	.word	0x0800c78c
 8008578:	080086b9 	.word	0x080086b9
 800857c:	200011bc 	.word	0x200011bc

08008580 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b08a      	sub	sp, #40	@ 0x28
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
 800858c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800858e:	2300      	movs	r3, #0
 8008590:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10b      	bne.n	80085b0 <xTimerGenericCommand+0x30>
	__asm volatile
 8008598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	623b      	str	r3, [r7, #32]
}
 80085aa:	bf00      	nop
 80085ac:	bf00      	nop
 80085ae:	e7fd      	b.n	80085ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80085b0:	4b19      	ldr	r3, [pc, #100]	@ (8008618 <xTimerGenericCommand+0x98>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d02a      	beq.n	800860e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2b05      	cmp	r3, #5
 80085c8:	dc18      	bgt.n	80085fc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80085ca:	f7ff fead 	bl	8008328 <xTaskGetSchedulerState>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d109      	bne.n	80085e8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80085d4:	4b10      	ldr	r3, [pc, #64]	@ (8008618 <xTimerGenericCommand+0x98>)
 80085d6:	6818      	ldr	r0, [r3, #0]
 80085d8:	f107 0110 	add.w	r1, r7, #16
 80085dc:	2300      	movs	r3, #0
 80085de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085e0:	f7fe fabe 	bl	8006b60 <xQueueGenericSend>
 80085e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80085e6:	e012      	b.n	800860e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80085e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008618 <xTimerGenericCommand+0x98>)
 80085ea:	6818      	ldr	r0, [r3, #0]
 80085ec:	f107 0110 	add.w	r1, r7, #16
 80085f0:	2300      	movs	r3, #0
 80085f2:	2200      	movs	r2, #0
 80085f4:	f7fe fab4 	bl	8006b60 <xQueueGenericSend>
 80085f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80085fa:	e008      	b.n	800860e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80085fc:	4b06      	ldr	r3, [pc, #24]	@ (8008618 <xTimerGenericCommand+0x98>)
 80085fe:	6818      	ldr	r0, [r3, #0]
 8008600:	f107 0110 	add.w	r1, r7, #16
 8008604:	2300      	movs	r3, #0
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	f7fe fbac 	bl	8006d64 <xQueueGenericSendFromISR>
 800860c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800860e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008610:	4618      	mov	r0, r3
 8008612:	3728      	adds	r7, #40	@ 0x28
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	200011b8 	.word	0x200011b8

0800861c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b088      	sub	sp, #32
 8008620:	af02      	add	r7, sp, #8
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008626:	4b23      	ldr	r3, [pc, #140]	@ (80086b4 <prvProcessExpiredTimer+0x98>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	3304      	adds	r3, #4
 8008634:	4618      	mov	r0, r3
 8008636:	f7fe f8b5 	bl	80067a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	d023      	beq.n	8008690 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	699a      	ldr	r2, [r3, #24]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	18d1      	adds	r1, r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	6978      	ldr	r0, [r7, #20]
 8008656:	f000 f8d5 	bl	8008804 <prvInsertTimerInActiveList>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d020      	beq.n	80086a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008660:	2300      	movs	r3, #0
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	2300      	movs	r3, #0
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	2100      	movs	r1, #0
 800866a:	6978      	ldr	r0, [r7, #20]
 800866c:	f7ff ff88 	bl	8008580 <xTimerGenericCommand>
 8008670:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d114      	bne.n	80086a2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	60fb      	str	r3, [r7, #12]
}
 800868a:	bf00      	nop
 800868c:	bf00      	nop
 800868e:	e7fd      	b.n	800868c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008696:	f023 0301 	bic.w	r3, r3, #1
 800869a:	b2da      	uxtb	r2, r3
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	6978      	ldr	r0, [r7, #20]
 80086a8:	4798      	blx	r3
}
 80086aa:	bf00      	nop
 80086ac:	3718      	adds	r7, #24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	200011b0 	.word	0x200011b0

080086b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086c0:	f107 0308 	add.w	r3, r7, #8
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 f859 	bl	800877c <prvGetNextExpireTime>
 80086ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	4619      	mov	r1, r3
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 f805 	bl	80086e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80086d6:	f000 f8d7 	bl	8008888 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086da:	bf00      	nop
 80086dc:	e7f0      	b.n	80086c0 <prvTimerTask+0x8>
	...

080086e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80086ea:	f7ff fa25 	bl	8007b38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086ee:	f107 0308 	add.w	r3, r7, #8
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 f866 	bl	80087c4 <prvSampleTimeNow>
 80086f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d130      	bne.n	8008762 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10a      	bne.n	800871c <prvProcessTimerOrBlockTask+0x3c>
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	429a      	cmp	r2, r3
 800870c:	d806      	bhi.n	800871c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800870e:	f7ff fa21 	bl	8007b54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008712:	68f9      	ldr	r1, [r7, #12]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7ff ff81 	bl	800861c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800871a:	e024      	b.n	8008766 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d008      	beq.n	8008734 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008722:	4b13      	ldr	r3, [pc, #76]	@ (8008770 <prvProcessTimerOrBlockTask+0x90>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <prvProcessTimerOrBlockTask+0x50>
 800872c:	2301      	movs	r3, #1
 800872e:	e000      	b.n	8008732 <prvProcessTimerOrBlockTask+0x52>
 8008730:	2300      	movs	r3, #0
 8008732:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008734:	4b0f      	ldr	r3, [pc, #60]	@ (8008774 <prvProcessTimerOrBlockTask+0x94>)
 8008736:	6818      	ldr	r0, [r3, #0]
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	4619      	mov	r1, r3
 8008742:	f7fe fe99 	bl	8007478 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008746:	f7ff fa05 	bl	8007b54 <xTaskResumeAll>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10a      	bne.n	8008766 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008750:	4b09      	ldr	r3, [pc, #36]	@ (8008778 <prvProcessTimerOrBlockTask+0x98>)
 8008752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008756:	601a      	str	r2, [r3, #0]
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	f3bf 8f6f 	isb	sy
}
 8008760:	e001      	b.n	8008766 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008762:	f7ff f9f7 	bl	8007b54 <xTaskResumeAll>
}
 8008766:	bf00      	nop
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	200011b4 	.word	0x200011b4
 8008774:	200011b8 	.word	0x200011b8
 8008778:	e000ed04 	.word	0xe000ed04

0800877c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008784:	4b0e      	ldr	r3, [pc, #56]	@ (80087c0 <prvGetNextExpireTime+0x44>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d101      	bne.n	8008792 <prvGetNextExpireTime+0x16>
 800878e:	2201      	movs	r2, #1
 8008790:	e000      	b.n	8008794 <prvGetNextExpireTime+0x18>
 8008792:	2200      	movs	r2, #0
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d105      	bne.n	80087ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087a0:	4b07      	ldr	r3, [pc, #28]	@ (80087c0 <prvGetNextExpireTime+0x44>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	60fb      	str	r3, [r7, #12]
 80087aa:	e001      	b.n	80087b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80087b0:	68fb      	ldr	r3, [r7, #12]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	200011b0 	.word	0x200011b0

080087c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80087cc:	f7ff fa60 	bl	8007c90 <xTaskGetTickCount>
 80087d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80087d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008800 <prvSampleTimeNow+0x3c>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d205      	bcs.n	80087e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80087dc:	f000 f93a 	bl	8008a54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	e002      	b.n	80087ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80087ee:	4a04      	ldr	r2, [pc, #16]	@ (8008800 <prvSampleTimeNow+0x3c>)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80087f4:	68fb      	ldr	r3, [r7, #12]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	200011c0 	.word	0x200011c0

08008804 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
 8008810:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008812:	2300      	movs	r3, #0
 8008814:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	429a      	cmp	r2, r3
 8008828:	d812      	bhi.n	8008850 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	1ad2      	subs	r2, r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	429a      	cmp	r2, r3
 8008836:	d302      	bcc.n	800883e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008838:	2301      	movs	r3, #1
 800883a:	617b      	str	r3, [r7, #20]
 800883c:	e01b      	b.n	8008876 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800883e:	4b10      	ldr	r3, [pc, #64]	@ (8008880 <prvInsertTimerInActiveList+0x7c>)
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	3304      	adds	r3, #4
 8008846:	4619      	mov	r1, r3
 8008848:	4610      	mov	r0, r2
 800884a:	f7fd ff72 	bl	8006732 <vListInsert>
 800884e:	e012      	b.n	8008876 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	429a      	cmp	r2, r3
 8008856:	d206      	bcs.n	8008866 <prvInsertTimerInActiveList+0x62>
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	429a      	cmp	r2, r3
 800885e:	d302      	bcc.n	8008866 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008860:	2301      	movs	r3, #1
 8008862:	617b      	str	r3, [r7, #20]
 8008864:	e007      	b.n	8008876 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008866:	4b07      	ldr	r3, [pc, #28]	@ (8008884 <prvInsertTimerInActiveList+0x80>)
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	3304      	adds	r3, #4
 800886e:	4619      	mov	r1, r3
 8008870:	4610      	mov	r0, r2
 8008872:	f7fd ff5e 	bl	8006732 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008876:	697b      	ldr	r3, [r7, #20]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	200011b4 	.word	0x200011b4
 8008884:	200011b0 	.word	0x200011b0

08008888 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b08e      	sub	sp, #56	@ 0x38
 800888c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800888e:	e0ce      	b.n	8008a2e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	da19      	bge.n	80088ca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008896:	1d3b      	adds	r3, r7, #4
 8008898:	3304      	adds	r3, #4
 800889a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800889c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10b      	bne.n	80088ba <prvProcessReceivedCommands+0x32>
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	61fb      	str	r3, [r7, #28]
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	e7fd      	b.n	80088b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80088ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088c0:	6850      	ldr	r0, [r2, #4]
 80088c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088c4:	6892      	ldr	r2, [r2, #8]
 80088c6:	4611      	mov	r1, r2
 80088c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f2c0 80ae 	blt.w	8008a2e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80088d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d004      	beq.n	80088e8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e0:	3304      	adds	r3, #4
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fd ff5e 	bl	80067a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088e8:	463b      	mov	r3, r7
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7ff ff6a 	bl	80087c4 <prvSampleTimeNow>
 80088f0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2b09      	cmp	r3, #9
 80088f6:	f200 8097 	bhi.w	8008a28 <prvProcessReceivedCommands+0x1a0>
 80088fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008900 <prvProcessReceivedCommands+0x78>)
 80088fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008900:	08008929 	.word	0x08008929
 8008904:	08008929 	.word	0x08008929
 8008908:	08008929 	.word	0x08008929
 800890c:	0800899f 	.word	0x0800899f
 8008910:	080089b3 	.word	0x080089b3
 8008914:	080089ff 	.word	0x080089ff
 8008918:	08008929 	.word	0x08008929
 800891c:	08008929 	.word	0x08008929
 8008920:	0800899f 	.word	0x0800899f
 8008924:	080089b3 	.word	0x080089b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800892e:	f043 0301 	orr.w	r3, r3, #1
 8008932:	b2da      	uxtb	r2, r3
 8008934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008936:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	18d1      	adds	r1, r2, r3
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008946:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008948:	f7ff ff5c 	bl	8008804 <prvInsertTimerInActiveList>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d06c      	beq.n	8008a2c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008958:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800895a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008960:	f003 0304 	and.w	r3, r3, #4
 8008964:	2b00      	cmp	r3, #0
 8008966:	d061      	beq.n	8008a2c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	441a      	add	r2, r3
 8008970:	2300      	movs	r3, #0
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	2300      	movs	r3, #0
 8008976:	2100      	movs	r1, #0
 8008978:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800897a:	f7ff fe01 	bl	8008580 <xTimerGenericCommand>
 800897e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d152      	bne.n	8008a2c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	61bb      	str	r3, [r7, #24]
}
 8008998:	bf00      	nop
 800899a:	bf00      	nop
 800899c:	e7fd      	b.n	800899a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800899e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089a4:	f023 0301 	bic.w	r3, r3, #1
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80089b0:	e03d      	b.n	8008a2e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089b8:	f043 0301 	orr.w	r3, r3, #1
 80089bc:	b2da      	uxtb	r2, r3
 80089be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80089ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10b      	bne.n	80089ea <prvProcessReceivedCommands+0x162>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	617b      	str	r3, [r7, #20]
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop
 80089e8:	e7fd      	b.n	80089e6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80089ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ec:	699a      	ldr	r2, [r3, #24]
 80089ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f0:	18d1      	adds	r1, r2, r3
 80089f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089f8:	f7ff ff04 	bl	8008804 <prvInsertTimerInActiveList>
					break;
 80089fc:	e017      	b.n	8008a2e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80089fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a04:	f003 0302 	and.w	r3, r3, #2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d103      	bne.n	8008a14 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008a0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a0e:	f000 fbeb 	bl	80091e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a12:	e00c      	b.n	8008a2e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a1a:	f023 0301 	bic.w	r3, r3, #1
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008a26:	e002      	b.n	8008a2e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008a28:	bf00      	nop
 8008a2a:	e000      	b.n	8008a2e <prvProcessReceivedCommands+0x1a6>
					break;
 8008a2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a2e:	4b08      	ldr	r3, [pc, #32]	@ (8008a50 <prvProcessReceivedCommands+0x1c8>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	1d39      	adds	r1, r7, #4
 8008a34:	2200      	movs	r2, #0
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fe fa32 	bl	8006ea0 <xQueueReceive>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f47f af26 	bne.w	8008890 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008a44:	bf00      	nop
 8008a46:	bf00      	nop
 8008a48:	3730      	adds	r7, #48	@ 0x30
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	200011b8 	.word	0x200011b8

08008a54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b088      	sub	sp, #32
 8008a58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a5a:	e049      	b.n	8008af0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8008b18 <prvSwitchTimerLists+0xc4>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a66:	4b2c      	ldr	r3, [pc, #176]	@ (8008b18 <prvSwitchTimerLists+0xc4>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3304      	adds	r3, #4
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7fd fe95 	bl	80067a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a88:	f003 0304 	and.w	r3, r3, #4
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d02f      	beq.n	8008af0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	4413      	add	r3, r2
 8008a98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d90e      	bls.n	8008ac0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008aae:	4b1a      	ldr	r3, [pc, #104]	@ (8008b18 <prvSwitchTimerLists+0xc4>)
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	4610      	mov	r0, r2
 8008aba:	f7fd fe3a 	bl	8006732 <vListInsert>
 8008abe:	e017      	b.n	8008af0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	2100      	movs	r1, #0
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f7ff fd58 	bl	8008580 <xTimerGenericCommand>
 8008ad0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10b      	bne.n	8008af0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	603b      	str	r3, [r7, #0]
}
 8008aea:	bf00      	nop
 8008aec:	bf00      	nop
 8008aee:	e7fd      	b.n	8008aec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008af0:	4b09      	ldr	r3, [pc, #36]	@ (8008b18 <prvSwitchTimerLists+0xc4>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1b0      	bne.n	8008a5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008afa:	4b07      	ldr	r3, [pc, #28]	@ (8008b18 <prvSwitchTimerLists+0xc4>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008b00:	4b06      	ldr	r3, [pc, #24]	@ (8008b1c <prvSwitchTimerLists+0xc8>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a04      	ldr	r2, [pc, #16]	@ (8008b18 <prvSwitchTimerLists+0xc4>)
 8008b06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008b08:	4a04      	ldr	r2, [pc, #16]	@ (8008b1c <prvSwitchTimerLists+0xc8>)
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	6013      	str	r3, [r2, #0]
}
 8008b0e:	bf00      	nop
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	200011b0 	.word	0x200011b0
 8008b1c:	200011b4 	.word	0x200011b4

08008b20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b26:	f000 f96f 	bl	8008e08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b2a:	4b15      	ldr	r3, [pc, #84]	@ (8008b80 <prvCheckForValidListAndQueue+0x60>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d120      	bne.n	8008b74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b32:	4814      	ldr	r0, [pc, #80]	@ (8008b84 <prvCheckForValidListAndQueue+0x64>)
 8008b34:	f7fd fdac 	bl	8006690 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b38:	4813      	ldr	r0, [pc, #76]	@ (8008b88 <prvCheckForValidListAndQueue+0x68>)
 8008b3a:	f7fd fda9 	bl	8006690 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b3e:	4b13      	ldr	r3, [pc, #76]	@ (8008b8c <prvCheckForValidListAndQueue+0x6c>)
 8008b40:	4a10      	ldr	r2, [pc, #64]	@ (8008b84 <prvCheckForValidListAndQueue+0x64>)
 8008b42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b44:	4b12      	ldr	r3, [pc, #72]	@ (8008b90 <prvCheckForValidListAndQueue+0x70>)
 8008b46:	4a10      	ldr	r2, [pc, #64]	@ (8008b88 <prvCheckForValidListAndQueue+0x68>)
 8008b48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	4b11      	ldr	r3, [pc, #68]	@ (8008b94 <prvCheckForValidListAndQueue+0x74>)
 8008b50:	4a11      	ldr	r2, [pc, #68]	@ (8008b98 <prvCheckForValidListAndQueue+0x78>)
 8008b52:	2110      	movs	r1, #16
 8008b54:	200a      	movs	r0, #10
 8008b56:	f7fd feb9 	bl	80068cc <xQueueGenericCreateStatic>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	4a08      	ldr	r2, [pc, #32]	@ (8008b80 <prvCheckForValidListAndQueue+0x60>)
 8008b5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b60:	4b07      	ldr	r3, [pc, #28]	@ (8008b80 <prvCheckForValidListAndQueue+0x60>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d005      	beq.n	8008b74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b68:	4b05      	ldr	r3, [pc, #20]	@ (8008b80 <prvCheckForValidListAndQueue+0x60>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	490b      	ldr	r1, [pc, #44]	@ (8008b9c <prvCheckForValidListAndQueue+0x7c>)
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fe fc2e 	bl	80073d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b74:	f000 f97a 	bl	8008e6c <vPortExitCritical>
}
 8008b78:	bf00      	nop
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	200011b8 	.word	0x200011b8
 8008b84:	20001188 	.word	0x20001188
 8008b88:	2000119c 	.word	0x2000119c
 8008b8c:	200011b0 	.word	0x200011b0
 8008b90:	200011b4 	.word	0x200011b4
 8008b94:	20001264 	.word	0x20001264
 8008b98:	200011c4 	.word	0x200011c4
 8008b9c:	0800c794 	.word	0x0800c794

08008ba0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3b04      	subs	r3, #4
 8008bb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008bb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	3b04      	subs	r3, #4
 8008bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	f023 0201 	bic.w	r2, r3, #1
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3b04      	subs	r3, #4
 8008bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8008c04 <pxPortInitialiseStack+0x64>)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3b14      	subs	r3, #20
 8008bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	3b04      	subs	r3, #4
 8008be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f06f 0202 	mvn.w	r2, #2
 8008bee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	3b20      	subs	r3, #32
 8008bf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	08008c09 	.word	0x08008c09

08008c08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c12:	4b13      	ldr	r3, [pc, #76]	@ (8008c60 <prvTaskExitError+0x58>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1a:	d00b      	beq.n	8008c34 <prvTaskExitError+0x2c>
	__asm volatile
 8008c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	60fb      	str	r3, [r7, #12]
}
 8008c2e:	bf00      	nop
 8008c30:	bf00      	nop
 8008c32:	e7fd      	b.n	8008c30 <prvTaskExitError+0x28>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	60bb      	str	r3, [r7, #8]
}
 8008c46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c48:	bf00      	nop
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d0fc      	beq.n	8008c4a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c50:	bf00      	nop
 8008c52:	bf00      	nop
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	2000018c 	.word	0x2000018c
	...

08008c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c70:	4b07      	ldr	r3, [pc, #28]	@ (8008c90 <pxCurrentTCBConst2>)
 8008c72:	6819      	ldr	r1, [r3, #0]
 8008c74:	6808      	ldr	r0, [r1, #0]
 8008c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7a:	f380 8809 	msr	PSP, r0
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f04f 0000 	mov.w	r0, #0
 8008c86:	f380 8811 	msr	BASEPRI, r0
 8008c8a:	4770      	bx	lr
 8008c8c:	f3af 8000 	nop.w

08008c90 <pxCurrentTCBConst2>:
 8008c90:	20000c88 	.word	0x20000c88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop

08008c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c98:	4808      	ldr	r0, [pc, #32]	@ (8008cbc <prvPortStartFirstTask+0x24>)
 8008c9a:	6800      	ldr	r0, [r0, #0]
 8008c9c:	6800      	ldr	r0, [r0, #0]
 8008c9e:	f380 8808 	msr	MSP, r0
 8008ca2:	f04f 0000 	mov.w	r0, #0
 8008ca6:	f380 8814 	msr	CONTROL, r0
 8008caa:	b662      	cpsie	i
 8008cac:	b661      	cpsie	f
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	df00      	svc	0
 8008cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cba:	bf00      	nop
 8008cbc:	e000ed08 	.word	0xe000ed08

08008cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008cc6:	4b47      	ldr	r3, [pc, #284]	@ (8008de4 <xPortStartScheduler+0x124>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a47      	ldr	r2, [pc, #284]	@ (8008de8 <xPortStartScheduler+0x128>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d10b      	bne.n	8008ce8 <xPortStartScheduler+0x28>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	613b      	str	r3, [r7, #16]
}
 8008ce2:	bf00      	nop
 8008ce4:	bf00      	nop
 8008ce6:	e7fd      	b.n	8008ce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8008de4 <xPortStartScheduler+0x124>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a3f      	ldr	r2, [pc, #252]	@ (8008dec <xPortStartScheduler+0x12c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d10b      	bne.n	8008d0a <xPortStartScheduler+0x4a>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	60fb      	str	r3, [r7, #12]
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop
 8008d08:	e7fd      	b.n	8008d06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d0a:	4b39      	ldr	r3, [pc, #228]	@ (8008df0 <xPortStartScheduler+0x130>)
 8008d0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	22ff      	movs	r2, #255	@ 0xff
 8008d1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d24:	78fb      	ldrb	r3, [r7, #3]
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	4b31      	ldr	r3, [pc, #196]	@ (8008df4 <xPortStartScheduler+0x134>)
 8008d30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d32:	4b31      	ldr	r3, [pc, #196]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d34:	2207      	movs	r2, #7
 8008d36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d38:	e009      	b.n	8008d4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	4a2d      	ldr	r2, [pc, #180]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d56:	2b80      	cmp	r3, #128	@ 0x80
 8008d58:	d0ef      	beq.n	8008d3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d5a:	4b27      	ldr	r3, [pc, #156]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f1c3 0307 	rsb	r3, r3, #7
 8008d62:	2b04      	cmp	r3, #4
 8008d64:	d00b      	beq.n	8008d7e <xPortStartScheduler+0xbe>
	__asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	60bb      	str	r3, [r7, #8]
}
 8008d78:	bf00      	nop
 8008d7a:	bf00      	nop
 8008d7c:	e7fd      	b.n	8008d7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	021b      	lsls	r3, r3, #8
 8008d84:	4a1c      	ldr	r2, [pc, #112]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d88:	4b1b      	ldr	r3, [pc, #108]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d90:	4a19      	ldr	r2, [pc, #100]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d9c:	4b17      	ldr	r3, [pc, #92]	@ (8008dfc <xPortStartScheduler+0x13c>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a16      	ldr	r2, [pc, #88]	@ (8008dfc <xPortStartScheduler+0x13c>)
 8008da2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008da6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008da8:	4b14      	ldr	r3, [pc, #80]	@ (8008dfc <xPortStartScheduler+0x13c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a13      	ldr	r2, [pc, #76]	@ (8008dfc <xPortStartScheduler+0x13c>)
 8008dae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008db2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008db4:	f000 f8da 	bl	8008f6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008db8:	4b11      	ldr	r3, [pc, #68]	@ (8008e00 <xPortStartScheduler+0x140>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008dbe:	f000 f8f9 	bl	8008fb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008dc2:	4b10      	ldr	r3, [pc, #64]	@ (8008e04 <xPortStartScheduler+0x144>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8008e04 <xPortStartScheduler+0x144>)
 8008dc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008dcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008dce:	f7ff ff63 	bl	8008c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008dd2:	f7ff f839 	bl	8007e48 <vTaskSwitchContext>
	prvTaskExitError();
 8008dd6:	f7ff ff17 	bl	8008c08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3718      	adds	r7, #24
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	e000ed00 	.word	0xe000ed00
 8008de8:	410fc271 	.word	0x410fc271
 8008dec:	410fc270 	.word	0x410fc270
 8008df0:	e000e400 	.word	0xe000e400
 8008df4:	200012b4 	.word	0x200012b4
 8008df8:	200012b8 	.word	0x200012b8
 8008dfc:	e000ed20 	.word	0xe000ed20
 8008e00:	2000018c 	.word	0x2000018c
 8008e04:	e000ef34 	.word	0xe000ef34

08008e08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	607b      	str	r3, [r7, #4]
}
 8008e20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e22:	4b10      	ldr	r3, [pc, #64]	@ (8008e64 <vPortEnterCritical+0x5c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3301      	adds	r3, #1
 8008e28:	4a0e      	ldr	r2, [pc, #56]	@ (8008e64 <vPortEnterCritical+0x5c>)
 8008e2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008e64 <vPortEnterCritical+0x5c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d110      	bne.n	8008e56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e34:	4b0c      	ldr	r3, [pc, #48]	@ (8008e68 <vPortEnterCritical+0x60>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00b      	beq.n	8008e56 <vPortEnterCritical+0x4e>
	__asm volatile
 8008e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	603b      	str	r3, [r7, #0]
}
 8008e50:	bf00      	nop
 8008e52:	bf00      	nop
 8008e54:	e7fd      	b.n	8008e52 <vPortEnterCritical+0x4a>
	}
}
 8008e56:	bf00      	nop
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	2000018c 	.word	0x2000018c
 8008e68:	e000ed04 	.word	0xe000ed04

08008e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e72:	4b12      	ldr	r3, [pc, #72]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10b      	bne.n	8008e92 <vPortExitCritical+0x26>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	607b      	str	r3, [r7, #4]
}
 8008e8c:	bf00      	nop
 8008e8e:	bf00      	nop
 8008e90:	e7fd      	b.n	8008e8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e92:	4b0a      	ldr	r3, [pc, #40]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	4a08      	ldr	r2, [pc, #32]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e9c:	4b07      	ldr	r3, [pc, #28]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d105      	bne.n	8008eb0 <vPortExitCritical+0x44>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	f383 8811 	msr	BASEPRI, r3
}
 8008eae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	2000018c 	.word	0x2000018c

08008ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ec0:	f3ef 8009 	mrs	r0, PSP
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	4b15      	ldr	r3, [pc, #84]	@ (8008f20 <pxCurrentTCBConst>)
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	f01e 0f10 	tst.w	lr, #16
 8008ed0:	bf08      	it	eq
 8008ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eda:	6010      	str	r0, [r2, #0]
 8008edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ee0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008ee4:	f380 8811 	msr	BASEPRI, r0
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f7fe ffaa 	bl	8007e48 <vTaskSwitchContext>
 8008ef4:	f04f 0000 	mov.w	r0, #0
 8008ef8:	f380 8811 	msr	BASEPRI, r0
 8008efc:	bc09      	pop	{r0, r3}
 8008efe:	6819      	ldr	r1, [r3, #0]
 8008f00:	6808      	ldr	r0, [r1, #0]
 8008f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f06:	f01e 0f10 	tst.w	lr, #16
 8008f0a:	bf08      	it	eq
 8008f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f10:	f380 8809 	msr	PSP, r0
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	f3af 8000 	nop.w

08008f20 <pxCurrentTCBConst>:
 8008f20:	20000c88 	.word	0x20000c88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop

08008f28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	607b      	str	r3, [r7, #4]
}
 8008f40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f42:	f7fe fec7 	bl	8007cd4 <xTaskIncrementTick>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f4c:	4b06      	ldr	r3, [pc, #24]	@ (8008f68 <xPortSysTickHandler+0x40>)
 8008f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	2300      	movs	r3, #0
 8008f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	f383 8811 	msr	BASEPRI, r3
}
 8008f5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f60:	bf00      	nop
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	e000ed04 	.word	0xe000ed04

08008f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f70:	4b0b      	ldr	r3, [pc, #44]	@ (8008fa0 <vPortSetupTimerInterrupt+0x34>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f76:	4b0b      	ldr	r3, [pc, #44]	@ (8008fa4 <vPortSetupTimerInterrupt+0x38>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa8 <vPortSetupTimerInterrupt+0x3c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a0a      	ldr	r2, [pc, #40]	@ (8008fac <vPortSetupTimerInterrupt+0x40>)
 8008f82:	fba2 2303 	umull	r2, r3, r2, r3
 8008f86:	099b      	lsrs	r3, r3, #6
 8008f88:	4a09      	ldr	r2, [pc, #36]	@ (8008fb0 <vPortSetupTimerInterrupt+0x44>)
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f8e:	4b04      	ldr	r3, [pc, #16]	@ (8008fa0 <vPortSetupTimerInterrupt+0x34>)
 8008f90:	2207      	movs	r2, #7
 8008f92:	601a      	str	r2, [r3, #0]
}
 8008f94:	bf00      	nop
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	e000e010 	.word	0xe000e010
 8008fa4:	e000e018 	.word	0xe000e018
 8008fa8:	20000180 	.word	0x20000180
 8008fac:	10624dd3 	.word	0x10624dd3
 8008fb0:	e000e014 	.word	0xe000e014

08008fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008fc4 <vPortEnableVFP+0x10>
 8008fb8:	6801      	ldr	r1, [r0, #0]
 8008fba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008fbe:	6001      	str	r1, [r0, #0]
 8008fc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008fc2:	bf00      	nop
 8008fc4:	e000ed88 	.word	0xe000ed88

08008fc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008fce:	f3ef 8305 	mrs	r3, IPSR
 8008fd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2b0f      	cmp	r3, #15
 8008fd8:	d915      	bls.n	8009006 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008fda:	4a18      	ldr	r2, [pc, #96]	@ (800903c <vPortValidateInterruptPriority+0x74>)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4413      	add	r3, r2
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008fe4:	4b16      	ldr	r3, [pc, #88]	@ (8009040 <vPortValidateInterruptPriority+0x78>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	7afa      	ldrb	r2, [r7, #11]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d20b      	bcs.n	8009006 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	607b      	str	r3, [r7, #4]
}
 8009000:	bf00      	nop
 8009002:	bf00      	nop
 8009004:	e7fd      	b.n	8009002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009006:	4b0f      	ldr	r3, [pc, #60]	@ (8009044 <vPortValidateInterruptPriority+0x7c>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800900e:	4b0e      	ldr	r3, [pc, #56]	@ (8009048 <vPortValidateInterruptPriority+0x80>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	429a      	cmp	r2, r3
 8009014:	d90b      	bls.n	800902e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	603b      	str	r3, [r7, #0]
}
 8009028:	bf00      	nop
 800902a:	bf00      	nop
 800902c:	e7fd      	b.n	800902a <vPortValidateInterruptPriority+0x62>
	}
 800902e:	bf00      	nop
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	e000e3f0 	.word	0xe000e3f0
 8009040:	200012b4 	.word	0x200012b4
 8009044:	e000ed0c 	.word	0xe000ed0c
 8009048:	200012b8 	.word	0x200012b8

0800904c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b08a      	sub	sp, #40	@ 0x28
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009054:	2300      	movs	r3, #0
 8009056:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009058:	f7fe fd6e 	bl	8007b38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800905c:	4b5c      	ldr	r3, [pc, #368]	@ (80091d0 <pvPortMalloc+0x184>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d101      	bne.n	8009068 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009064:	f000 f924 	bl	80092b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009068:	4b5a      	ldr	r3, [pc, #360]	@ (80091d4 <pvPortMalloc+0x188>)
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4013      	ands	r3, r2
 8009070:	2b00      	cmp	r3, #0
 8009072:	f040 8095 	bne.w	80091a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d01e      	beq.n	80090ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800907c:	2208      	movs	r2, #8
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4413      	add	r3, r2
 8009082:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f003 0307 	and.w	r3, r3, #7
 800908a:	2b00      	cmp	r3, #0
 800908c:	d015      	beq.n	80090ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f023 0307 	bic.w	r3, r3, #7
 8009094:	3308      	adds	r3, #8
 8009096:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f003 0307 	and.w	r3, r3, #7
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00b      	beq.n	80090ba <pvPortMalloc+0x6e>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	617b      	str	r3, [r7, #20]
}
 80090b4:	bf00      	nop
 80090b6:	bf00      	nop
 80090b8:	e7fd      	b.n	80090b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d06f      	beq.n	80091a0 <pvPortMalloc+0x154>
 80090c0:	4b45      	ldr	r3, [pc, #276]	@ (80091d8 <pvPortMalloc+0x18c>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d86a      	bhi.n	80091a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80090ca:	4b44      	ldr	r3, [pc, #272]	@ (80091dc <pvPortMalloc+0x190>)
 80090cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80090ce:	4b43      	ldr	r3, [pc, #268]	@ (80091dc <pvPortMalloc+0x190>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090d4:	e004      	b.n	80090e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80090d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80090da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d903      	bls.n	80090f2 <pvPortMalloc+0xa6>
 80090ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1f1      	bne.n	80090d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090f2:	4b37      	ldr	r3, [pc, #220]	@ (80091d0 <pvPortMalloc+0x184>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d051      	beq.n	80091a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090fc:	6a3b      	ldr	r3, [r7, #32]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2208      	movs	r2, #8
 8009102:	4413      	add	r3, r2
 8009104:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800910e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009110:	685a      	ldr	r2, [r3, #4]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	1ad2      	subs	r2, r2, r3
 8009116:	2308      	movs	r3, #8
 8009118:	005b      	lsls	r3, r3, #1
 800911a:	429a      	cmp	r2, r3
 800911c:	d920      	bls.n	8009160 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800911e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4413      	add	r3, r2
 8009124:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	f003 0307 	and.w	r3, r3, #7
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00b      	beq.n	8009148 <pvPortMalloc+0xfc>
	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	613b      	str	r3, [r7, #16]
}
 8009142:	bf00      	nop
 8009144:	bf00      	nop
 8009146:	e7fd      	b.n	8009144 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	1ad2      	subs	r2, r2, r3
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800915a:	69b8      	ldr	r0, [r7, #24]
 800915c:	f000 f90a 	bl	8009374 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009160:	4b1d      	ldr	r3, [pc, #116]	@ (80091d8 <pvPortMalloc+0x18c>)
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	4a1b      	ldr	r2, [pc, #108]	@ (80091d8 <pvPortMalloc+0x18c>)
 800916c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800916e:	4b1a      	ldr	r3, [pc, #104]	@ (80091d8 <pvPortMalloc+0x18c>)
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	4b1b      	ldr	r3, [pc, #108]	@ (80091e0 <pvPortMalloc+0x194>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	429a      	cmp	r2, r3
 8009178:	d203      	bcs.n	8009182 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800917a:	4b17      	ldr	r3, [pc, #92]	@ (80091d8 <pvPortMalloc+0x18c>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a18      	ldr	r2, [pc, #96]	@ (80091e0 <pvPortMalloc+0x194>)
 8009180:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	4b13      	ldr	r3, [pc, #76]	@ (80091d4 <pvPortMalloc+0x188>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	431a      	orrs	r2, r3
 800918c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009196:	4b13      	ldr	r3, [pc, #76]	@ (80091e4 <pvPortMalloc+0x198>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	3301      	adds	r3, #1
 800919c:	4a11      	ldr	r2, [pc, #68]	@ (80091e4 <pvPortMalloc+0x198>)
 800919e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80091a0:	f7fe fcd8 	bl	8007b54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	f003 0307 	and.w	r3, r3, #7
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00b      	beq.n	80091c6 <pvPortMalloc+0x17a>
	__asm volatile
 80091ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	60fb      	str	r3, [r7, #12]
}
 80091c0:	bf00      	nop
 80091c2:	bf00      	nop
 80091c4:	e7fd      	b.n	80091c2 <pvPortMalloc+0x176>
	return pvReturn;
 80091c6:	69fb      	ldr	r3, [r7, #28]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3728      	adds	r7, #40	@ 0x28
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	20004ec4 	.word	0x20004ec4
 80091d4:	20004ed8 	.word	0x20004ed8
 80091d8:	20004ec8 	.word	0x20004ec8
 80091dc:	20004ebc 	.word	0x20004ebc
 80091e0:	20004ecc 	.word	0x20004ecc
 80091e4:	20004ed0 	.word	0x20004ed0

080091e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b086      	sub	sp, #24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d04f      	beq.n	800929a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091fa:	2308      	movs	r3, #8
 80091fc:	425b      	negs	r3, r3
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	4413      	add	r3, r2
 8009202:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	4b25      	ldr	r3, [pc, #148]	@ (80092a4 <vPortFree+0xbc>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4013      	ands	r3, r2
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10b      	bne.n	800922e <vPortFree+0x46>
	__asm volatile
 8009216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	60fb      	str	r3, [r7, #12]
}
 8009228:	bf00      	nop
 800922a:	bf00      	nop
 800922c:	e7fd      	b.n	800922a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00b      	beq.n	800924e <vPortFree+0x66>
	__asm volatile
 8009236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	60bb      	str	r3, [r7, #8]
}
 8009248:	bf00      	nop
 800924a:	bf00      	nop
 800924c:	e7fd      	b.n	800924a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	4b14      	ldr	r3, [pc, #80]	@ (80092a4 <vPortFree+0xbc>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4013      	ands	r3, r2
 8009258:	2b00      	cmp	r3, #0
 800925a:	d01e      	beq.n	800929a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d11a      	bne.n	800929a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	4b0e      	ldr	r3, [pc, #56]	@ (80092a4 <vPortFree+0xbc>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	43db      	mvns	r3, r3
 800926e:	401a      	ands	r2, r3
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009274:	f7fe fc60 	bl	8007b38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	4b0a      	ldr	r3, [pc, #40]	@ (80092a8 <vPortFree+0xc0>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4413      	add	r3, r2
 8009282:	4a09      	ldr	r2, [pc, #36]	@ (80092a8 <vPortFree+0xc0>)
 8009284:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009286:	6938      	ldr	r0, [r7, #16]
 8009288:	f000 f874 	bl	8009374 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800928c:	4b07      	ldr	r3, [pc, #28]	@ (80092ac <vPortFree+0xc4>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	3301      	adds	r3, #1
 8009292:	4a06      	ldr	r2, [pc, #24]	@ (80092ac <vPortFree+0xc4>)
 8009294:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009296:	f7fe fc5d 	bl	8007b54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800929a:	bf00      	nop
 800929c:	3718      	adds	r7, #24
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	20004ed8 	.word	0x20004ed8
 80092a8:	20004ec8 	.word	0x20004ec8
 80092ac:	20004ed4 	.word	0x20004ed4

080092b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80092b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80092ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80092bc:	4b27      	ldr	r3, [pc, #156]	@ (800935c <prvHeapInit+0xac>)
 80092be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00c      	beq.n	80092e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	3307      	adds	r3, #7
 80092ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f023 0307 	bic.w	r3, r3, #7
 80092d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80092d8:	68ba      	ldr	r2, [r7, #8]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	4a1f      	ldr	r2, [pc, #124]	@ (800935c <prvHeapInit+0xac>)
 80092e0:	4413      	add	r3, r2
 80092e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80092e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009360 <prvHeapInit+0xb0>)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80092ee:	4b1c      	ldr	r3, [pc, #112]	@ (8009360 <prvHeapInit+0xb0>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	4413      	add	r3, r2
 80092fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092fc:	2208      	movs	r2, #8
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	1a9b      	subs	r3, r3, r2
 8009302:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f023 0307 	bic.w	r3, r3, #7
 800930a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	4a15      	ldr	r2, [pc, #84]	@ (8009364 <prvHeapInit+0xb4>)
 8009310:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009312:	4b14      	ldr	r3, [pc, #80]	@ (8009364 <prvHeapInit+0xb4>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2200      	movs	r2, #0
 8009318:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800931a:	4b12      	ldr	r3, [pc, #72]	@ (8009364 <prvHeapInit+0xb4>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2200      	movs	r2, #0
 8009320:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	1ad2      	subs	r2, r2, r3
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009330:	4b0c      	ldr	r3, [pc, #48]	@ (8009364 <prvHeapInit+0xb4>)
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	4a0a      	ldr	r2, [pc, #40]	@ (8009368 <prvHeapInit+0xb8>)
 800933e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	4a09      	ldr	r2, [pc, #36]	@ (800936c <prvHeapInit+0xbc>)
 8009346:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009348:	4b09      	ldr	r3, [pc, #36]	@ (8009370 <prvHeapInit+0xc0>)
 800934a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800934e:	601a      	str	r2, [r3, #0]
}
 8009350:	bf00      	nop
 8009352:	3714      	adds	r7, #20
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	200012bc 	.word	0x200012bc
 8009360:	20004ebc 	.word	0x20004ebc
 8009364:	20004ec4 	.word	0x20004ec4
 8009368:	20004ecc 	.word	0x20004ecc
 800936c:	20004ec8 	.word	0x20004ec8
 8009370:	20004ed8 	.word	0x20004ed8

08009374 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800937c:	4b28      	ldr	r3, [pc, #160]	@ (8009420 <prvInsertBlockIntoFreeList+0xac>)
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	e002      	b.n	8009388 <prvInsertBlockIntoFreeList+0x14>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	60fb      	str	r3, [r7, #12]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	429a      	cmp	r2, r3
 8009390:	d8f7      	bhi.n	8009382 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	4413      	add	r3, r2
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d108      	bne.n	80093b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	685a      	ldr	r2, [r3, #4]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	441a      	add	r2, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	441a      	add	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d118      	bne.n	80093fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	4b15      	ldr	r3, [pc, #84]	@ (8009424 <prvInsertBlockIntoFreeList+0xb0>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d00d      	beq.n	80093f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	685a      	ldr	r2, [r3, #4]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	441a      	add	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	601a      	str	r2, [r3, #0]
 80093f0:	e008      	b.n	8009404 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80093f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009424 <prvInsertBlockIntoFreeList+0xb0>)
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	601a      	str	r2, [r3, #0]
 80093fa:	e003      	b.n	8009404 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	429a      	cmp	r2, r3
 800940a:	d002      	beq.n	8009412 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009412:	bf00      	nop
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	20004ebc 	.word	0x20004ebc
 8009424:	20004ec4 	.word	0x20004ec4

08009428 <__cvt>:
 8009428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800942c:	ec57 6b10 	vmov	r6, r7, d0
 8009430:	2f00      	cmp	r7, #0
 8009432:	460c      	mov	r4, r1
 8009434:	4619      	mov	r1, r3
 8009436:	463b      	mov	r3, r7
 8009438:	bfbb      	ittet	lt
 800943a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800943e:	461f      	movlt	r7, r3
 8009440:	2300      	movge	r3, #0
 8009442:	232d      	movlt	r3, #45	@ 0x2d
 8009444:	700b      	strb	r3, [r1, #0]
 8009446:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009448:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800944c:	4691      	mov	r9, r2
 800944e:	f023 0820 	bic.w	r8, r3, #32
 8009452:	bfbc      	itt	lt
 8009454:	4632      	movlt	r2, r6
 8009456:	4616      	movlt	r6, r2
 8009458:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800945c:	d005      	beq.n	800946a <__cvt+0x42>
 800945e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009462:	d100      	bne.n	8009466 <__cvt+0x3e>
 8009464:	3401      	adds	r4, #1
 8009466:	2102      	movs	r1, #2
 8009468:	e000      	b.n	800946c <__cvt+0x44>
 800946a:	2103      	movs	r1, #3
 800946c:	ab03      	add	r3, sp, #12
 800946e:	9301      	str	r3, [sp, #4]
 8009470:	ab02      	add	r3, sp, #8
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	ec47 6b10 	vmov	d0, r6, r7
 8009478:	4653      	mov	r3, sl
 800947a:	4622      	mov	r2, r4
 800947c:	f000 ff34 	bl	800a2e8 <_dtoa_r>
 8009480:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009484:	4605      	mov	r5, r0
 8009486:	d119      	bne.n	80094bc <__cvt+0x94>
 8009488:	f019 0f01 	tst.w	r9, #1
 800948c:	d00e      	beq.n	80094ac <__cvt+0x84>
 800948e:	eb00 0904 	add.w	r9, r0, r4
 8009492:	2200      	movs	r2, #0
 8009494:	2300      	movs	r3, #0
 8009496:	4630      	mov	r0, r6
 8009498:	4639      	mov	r1, r7
 800949a:	f7f7 fb1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800949e:	b108      	cbz	r0, 80094a4 <__cvt+0x7c>
 80094a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80094a4:	2230      	movs	r2, #48	@ 0x30
 80094a6:	9b03      	ldr	r3, [sp, #12]
 80094a8:	454b      	cmp	r3, r9
 80094aa:	d31e      	bcc.n	80094ea <__cvt+0xc2>
 80094ac:	9b03      	ldr	r3, [sp, #12]
 80094ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094b0:	1b5b      	subs	r3, r3, r5
 80094b2:	4628      	mov	r0, r5
 80094b4:	6013      	str	r3, [r2, #0]
 80094b6:	b004      	add	sp, #16
 80094b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80094c0:	eb00 0904 	add.w	r9, r0, r4
 80094c4:	d1e5      	bne.n	8009492 <__cvt+0x6a>
 80094c6:	7803      	ldrb	r3, [r0, #0]
 80094c8:	2b30      	cmp	r3, #48	@ 0x30
 80094ca:	d10a      	bne.n	80094e2 <__cvt+0xba>
 80094cc:	2200      	movs	r2, #0
 80094ce:	2300      	movs	r3, #0
 80094d0:	4630      	mov	r0, r6
 80094d2:	4639      	mov	r1, r7
 80094d4:	f7f7 fb00 	bl	8000ad8 <__aeabi_dcmpeq>
 80094d8:	b918      	cbnz	r0, 80094e2 <__cvt+0xba>
 80094da:	f1c4 0401 	rsb	r4, r4, #1
 80094de:	f8ca 4000 	str.w	r4, [sl]
 80094e2:	f8da 3000 	ldr.w	r3, [sl]
 80094e6:	4499      	add	r9, r3
 80094e8:	e7d3      	b.n	8009492 <__cvt+0x6a>
 80094ea:	1c59      	adds	r1, r3, #1
 80094ec:	9103      	str	r1, [sp, #12]
 80094ee:	701a      	strb	r2, [r3, #0]
 80094f0:	e7d9      	b.n	80094a6 <__cvt+0x7e>

080094f2 <__exponent>:
 80094f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094f4:	2900      	cmp	r1, #0
 80094f6:	bfba      	itte	lt
 80094f8:	4249      	neglt	r1, r1
 80094fa:	232d      	movlt	r3, #45	@ 0x2d
 80094fc:	232b      	movge	r3, #43	@ 0x2b
 80094fe:	2909      	cmp	r1, #9
 8009500:	7002      	strb	r2, [r0, #0]
 8009502:	7043      	strb	r3, [r0, #1]
 8009504:	dd29      	ble.n	800955a <__exponent+0x68>
 8009506:	f10d 0307 	add.w	r3, sp, #7
 800950a:	461d      	mov	r5, r3
 800950c:	270a      	movs	r7, #10
 800950e:	461a      	mov	r2, r3
 8009510:	fbb1 f6f7 	udiv	r6, r1, r7
 8009514:	fb07 1416 	mls	r4, r7, r6, r1
 8009518:	3430      	adds	r4, #48	@ 0x30
 800951a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800951e:	460c      	mov	r4, r1
 8009520:	2c63      	cmp	r4, #99	@ 0x63
 8009522:	f103 33ff 	add.w	r3, r3, #4294967295
 8009526:	4631      	mov	r1, r6
 8009528:	dcf1      	bgt.n	800950e <__exponent+0x1c>
 800952a:	3130      	adds	r1, #48	@ 0x30
 800952c:	1e94      	subs	r4, r2, #2
 800952e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009532:	1c41      	adds	r1, r0, #1
 8009534:	4623      	mov	r3, r4
 8009536:	42ab      	cmp	r3, r5
 8009538:	d30a      	bcc.n	8009550 <__exponent+0x5e>
 800953a:	f10d 0309 	add.w	r3, sp, #9
 800953e:	1a9b      	subs	r3, r3, r2
 8009540:	42ac      	cmp	r4, r5
 8009542:	bf88      	it	hi
 8009544:	2300      	movhi	r3, #0
 8009546:	3302      	adds	r3, #2
 8009548:	4403      	add	r3, r0
 800954a:	1a18      	subs	r0, r3, r0
 800954c:	b003      	add	sp, #12
 800954e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009550:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009554:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009558:	e7ed      	b.n	8009536 <__exponent+0x44>
 800955a:	2330      	movs	r3, #48	@ 0x30
 800955c:	3130      	adds	r1, #48	@ 0x30
 800955e:	7083      	strb	r3, [r0, #2]
 8009560:	70c1      	strb	r1, [r0, #3]
 8009562:	1d03      	adds	r3, r0, #4
 8009564:	e7f1      	b.n	800954a <__exponent+0x58>
	...

08009568 <_printf_float>:
 8009568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956c:	b08d      	sub	sp, #52	@ 0x34
 800956e:	460c      	mov	r4, r1
 8009570:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009574:	4616      	mov	r6, r2
 8009576:	461f      	mov	r7, r3
 8009578:	4605      	mov	r5, r0
 800957a:	f000 fda7 	bl	800a0cc <_localeconv_r>
 800957e:	6803      	ldr	r3, [r0, #0]
 8009580:	9304      	str	r3, [sp, #16]
 8009582:	4618      	mov	r0, r3
 8009584:	f7f6 fe7c 	bl	8000280 <strlen>
 8009588:	2300      	movs	r3, #0
 800958a:	930a      	str	r3, [sp, #40]	@ 0x28
 800958c:	f8d8 3000 	ldr.w	r3, [r8]
 8009590:	9005      	str	r0, [sp, #20]
 8009592:	3307      	adds	r3, #7
 8009594:	f023 0307 	bic.w	r3, r3, #7
 8009598:	f103 0208 	add.w	r2, r3, #8
 800959c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80095a0:	f8d4 b000 	ldr.w	fp, [r4]
 80095a4:	f8c8 2000 	str.w	r2, [r8]
 80095a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80095b0:	9307      	str	r3, [sp, #28]
 80095b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80095b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80095ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095be:	4b9c      	ldr	r3, [pc, #624]	@ (8009830 <_printf_float+0x2c8>)
 80095c0:	f04f 32ff 	mov.w	r2, #4294967295
 80095c4:	f7f7 faba 	bl	8000b3c <__aeabi_dcmpun>
 80095c8:	bb70      	cbnz	r0, 8009628 <_printf_float+0xc0>
 80095ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095ce:	4b98      	ldr	r3, [pc, #608]	@ (8009830 <_printf_float+0x2c8>)
 80095d0:	f04f 32ff 	mov.w	r2, #4294967295
 80095d4:	f7f7 fa94 	bl	8000b00 <__aeabi_dcmple>
 80095d8:	bb30      	cbnz	r0, 8009628 <_printf_float+0xc0>
 80095da:	2200      	movs	r2, #0
 80095dc:	2300      	movs	r3, #0
 80095de:	4640      	mov	r0, r8
 80095e0:	4649      	mov	r1, r9
 80095e2:	f7f7 fa83 	bl	8000aec <__aeabi_dcmplt>
 80095e6:	b110      	cbz	r0, 80095ee <_printf_float+0x86>
 80095e8:	232d      	movs	r3, #45	@ 0x2d
 80095ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095ee:	4a91      	ldr	r2, [pc, #580]	@ (8009834 <_printf_float+0x2cc>)
 80095f0:	4b91      	ldr	r3, [pc, #580]	@ (8009838 <_printf_float+0x2d0>)
 80095f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80095f6:	bf94      	ite	ls
 80095f8:	4690      	movls	r8, r2
 80095fa:	4698      	movhi	r8, r3
 80095fc:	2303      	movs	r3, #3
 80095fe:	6123      	str	r3, [r4, #16]
 8009600:	f02b 0304 	bic.w	r3, fp, #4
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	f04f 0900 	mov.w	r9, #0
 800960a:	9700      	str	r7, [sp, #0]
 800960c:	4633      	mov	r3, r6
 800960e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009610:	4621      	mov	r1, r4
 8009612:	4628      	mov	r0, r5
 8009614:	f000 f9d2 	bl	80099bc <_printf_common>
 8009618:	3001      	adds	r0, #1
 800961a:	f040 808d 	bne.w	8009738 <_printf_float+0x1d0>
 800961e:	f04f 30ff 	mov.w	r0, #4294967295
 8009622:	b00d      	add	sp, #52	@ 0x34
 8009624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009628:	4642      	mov	r2, r8
 800962a:	464b      	mov	r3, r9
 800962c:	4640      	mov	r0, r8
 800962e:	4649      	mov	r1, r9
 8009630:	f7f7 fa84 	bl	8000b3c <__aeabi_dcmpun>
 8009634:	b140      	cbz	r0, 8009648 <_printf_float+0xe0>
 8009636:	464b      	mov	r3, r9
 8009638:	2b00      	cmp	r3, #0
 800963a:	bfbc      	itt	lt
 800963c:	232d      	movlt	r3, #45	@ 0x2d
 800963e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009642:	4a7e      	ldr	r2, [pc, #504]	@ (800983c <_printf_float+0x2d4>)
 8009644:	4b7e      	ldr	r3, [pc, #504]	@ (8009840 <_printf_float+0x2d8>)
 8009646:	e7d4      	b.n	80095f2 <_printf_float+0x8a>
 8009648:	6863      	ldr	r3, [r4, #4]
 800964a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800964e:	9206      	str	r2, [sp, #24]
 8009650:	1c5a      	adds	r2, r3, #1
 8009652:	d13b      	bne.n	80096cc <_printf_float+0x164>
 8009654:	2306      	movs	r3, #6
 8009656:	6063      	str	r3, [r4, #4]
 8009658:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800965c:	2300      	movs	r3, #0
 800965e:	6022      	str	r2, [r4, #0]
 8009660:	9303      	str	r3, [sp, #12]
 8009662:	ab0a      	add	r3, sp, #40	@ 0x28
 8009664:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009668:	ab09      	add	r3, sp, #36	@ 0x24
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	6861      	ldr	r1, [r4, #4]
 800966e:	ec49 8b10 	vmov	d0, r8, r9
 8009672:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009676:	4628      	mov	r0, r5
 8009678:	f7ff fed6 	bl	8009428 <__cvt>
 800967c:	9b06      	ldr	r3, [sp, #24]
 800967e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009680:	2b47      	cmp	r3, #71	@ 0x47
 8009682:	4680      	mov	r8, r0
 8009684:	d129      	bne.n	80096da <_printf_float+0x172>
 8009686:	1cc8      	adds	r0, r1, #3
 8009688:	db02      	blt.n	8009690 <_printf_float+0x128>
 800968a:	6863      	ldr	r3, [r4, #4]
 800968c:	4299      	cmp	r1, r3
 800968e:	dd41      	ble.n	8009714 <_printf_float+0x1ac>
 8009690:	f1aa 0a02 	sub.w	sl, sl, #2
 8009694:	fa5f fa8a 	uxtb.w	sl, sl
 8009698:	3901      	subs	r1, #1
 800969a:	4652      	mov	r2, sl
 800969c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80096a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80096a2:	f7ff ff26 	bl	80094f2 <__exponent>
 80096a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096a8:	1813      	adds	r3, r2, r0
 80096aa:	2a01      	cmp	r2, #1
 80096ac:	4681      	mov	r9, r0
 80096ae:	6123      	str	r3, [r4, #16]
 80096b0:	dc02      	bgt.n	80096b8 <_printf_float+0x150>
 80096b2:	6822      	ldr	r2, [r4, #0]
 80096b4:	07d2      	lsls	r2, r2, #31
 80096b6:	d501      	bpl.n	80096bc <_printf_float+0x154>
 80096b8:	3301      	adds	r3, #1
 80096ba:	6123      	str	r3, [r4, #16]
 80096bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d0a2      	beq.n	800960a <_printf_float+0xa2>
 80096c4:	232d      	movs	r3, #45	@ 0x2d
 80096c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096ca:	e79e      	b.n	800960a <_printf_float+0xa2>
 80096cc:	9a06      	ldr	r2, [sp, #24]
 80096ce:	2a47      	cmp	r2, #71	@ 0x47
 80096d0:	d1c2      	bne.n	8009658 <_printf_float+0xf0>
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1c0      	bne.n	8009658 <_printf_float+0xf0>
 80096d6:	2301      	movs	r3, #1
 80096d8:	e7bd      	b.n	8009656 <_printf_float+0xee>
 80096da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80096de:	d9db      	bls.n	8009698 <_printf_float+0x130>
 80096e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80096e4:	d118      	bne.n	8009718 <_printf_float+0x1b0>
 80096e6:	2900      	cmp	r1, #0
 80096e8:	6863      	ldr	r3, [r4, #4]
 80096ea:	dd0b      	ble.n	8009704 <_printf_float+0x19c>
 80096ec:	6121      	str	r1, [r4, #16]
 80096ee:	b913      	cbnz	r3, 80096f6 <_printf_float+0x18e>
 80096f0:	6822      	ldr	r2, [r4, #0]
 80096f2:	07d0      	lsls	r0, r2, #31
 80096f4:	d502      	bpl.n	80096fc <_printf_float+0x194>
 80096f6:	3301      	adds	r3, #1
 80096f8:	440b      	add	r3, r1
 80096fa:	6123      	str	r3, [r4, #16]
 80096fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80096fe:	f04f 0900 	mov.w	r9, #0
 8009702:	e7db      	b.n	80096bc <_printf_float+0x154>
 8009704:	b913      	cbnz	r3, 800970c <_printf_float+0x1a4>
 8009706:	6822      	ldr	r2, [r4, #0]
 8009708:	07d2      	lsls	r2, r2, #31
 800970a:	d501      	bpl.n	8009710 <_printf_float+0x1a8>
 800970c:	3302      	adds	r3, #2
 800970e:	e7f4      	b.n	80096fa <_printf_float+0x192>
 8009710:	2301      	movs	r3, #1
 8009712:	e7f2      	b.n	80096fa <_printf_float+0x192>
 8009714:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800971a:	4299      	cmp	r1, r3
 800971c:	db05      	blt.n	800972a <_printf_float+0x1c2>
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	6121      	str	r1, [r4, #16]
 8009722:	07d8      	lsls	r0, r3, #31
 8009724:	d5ea      	bpl.n	80096fc <_printf_float+0x194>
 8009726:	1c4b      	adds	r3, r1, #1
 8009728:	e7e7      	b.n	80096fa <_printf_float+0x192>
 800972a:	2900      	cmp	r1, #0
 800972c:	bfd4      	ite	le
 800972e:	f1c1 0202 	rsble	r2, r1, #2
 8009732:	2201      	movgt	r2, #1
 8009734:	4413      	add	r3, r2
 8009736:	e7e0      	b.n	80096fa <_printf_float+0x192>
 8009738:	6823      	ldr	r3, [r4, #0]
 800973a:	055a      	lsls	r2, r3, #21
 800973c:	d407      	bmi.n	800974e <_printf_float+0x1e6>
 800973e:	6923      	ldr	r3, [r4, #16]
 8009740:	4642      	mov	r2, r8
 8009742:	4631      	mov	r1, r6
 8009744:	4628      	mov	r0, r5
 8009746:	47b8      	blx	r7
 8009748:	3001      	adds	r0, #1
 800974a:	d12b      	bne.n	80097a4 <_printf_float+0x23c>
 800974c:	e767      	b.n	800961e <_printf_float+0xb6>
 800974e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009752:	f240 80dd 	bls.w	8009910 <_printf_float+0x3a8>
 8009756:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800975a:	2200      	movs	r2, #0
 800975c:	2300      	movs	r3, #0
 800975e:	f7f7 f9bb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009762:	2800      	cmp	r0, #0
 8009764:	d033      	beq.n	80097ce <_printf_float+0x266>
 8009766:	4a37      	ldr	r2, [pc, #220]	@ (8009844 <_printf_float+0x2dc>)
 8009768:	2301      	movs	r3, #1
 800976a:	4631      	mov	r1, r6
 800976c:	4628      	mov	r0, r5
 800976e:	47b8      	blx	r7
 8009770:	3001      	adds	r0, #1
 8009772:	f43f af54 	beq.w	800961e <_printf_float+0xb6>
 8009776:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800977a:	4543      	cmp	r3, r8
 800977c:	db02      	blt.n	8009784 <_printf_float+0x21c>
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	07d8      	lsls	r0, r3, #31
 8009782:	d50f      	bpl.n	80097a4 <_printf_float+0x23c>
 8009784:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009788:	4631      	mov	r1, r6
 800978a:	4628      	mov	r0, r5
 800978c:	47b8      	blx	r7
 800978e:	3001      	adds	r0, #1
 8009790:	f43f af45 	beq.w	800961e <_printf_float+0xb6>
 8009794:	f04f 0900 	mov.w	r9, #0
 8009798:	f108 38ff 	add.w	r8, r8, #4294967295
 800979c:	f104 0a1a 	add.w	sl, r4, #26
 80097a0:	45c8      	cmp	r8, r9
 80097a2:	dc09      	bgt.n	80097b8 <_printf_float+0x250>
 80097a4:	6823      	ldr	r3, [r4, #0]
 80097a6:	079b      	lsls	r3, r3, #30
 80097a8:	f100 8103 	bmi.w	80099b2 <_printf_float+0x44a>
 80097ac:	68e0      	ldr	r0, [r4, #12]
 80097ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097b0:	4298      	cmp	r0, r3
 80097b2:	bfb8      	it	lt
 80097b4:	4618      	movlt	r0, r3
 80097b6:	e734      	b.n	8009622 <_printf_float+0xba>
 80097b8:	2301      	movs	r3, #1
 80097ba:	4652      	mov	r2, sl
 80097bc:	4631      	mov	r1, r6
 80097be:	4628      	mov	r0, r5
 80097c0:	47b8      	blx	r7
 80097c2:	3001      	adds	r0, #1
 80097c4:	f43f af2b 	beq.w	800961e <_printf_float+0xb6>
 80097c8:	f109 0901 	add.w	r9, r9, #1
 80097cc:	e7e8      	b.n	80097a0 <_printf_float+0x238>
 80097ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	dc39      	bgt.n	8009848 <_printf_float+0x2e0>
 80097d4:	4a1b      	ldr	r2, [pc, #108]	@ (8009844 <_printf_float+0x2dc>)
 80097d6:	2301      	movs	r3, #1
 80097d8:	4631      	mov	r1, r6
 80097da:	4628      	mov	r0, r5
 80097dc:	47b8      	blx	r7
 80097de:	3001      	adds	r0, #1
 80097e0:	f43f af1d 	beq.w	800961e <_printf_float+0xb6>
 80097e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80097e8:	ea59 0303 	orrs.w	r3, r9, r3
 80097ec:	d102      	bne.n	80097f4 <_printf_float+0x28c>
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	07d9      	lsls	r1, r3, #31
 80097f2:	d5d7      	bpl.n	80097a4 <_printf_float+0x23c>
 80097f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097f8:	4631      	mov	r1, r6
 80097fa:	4628      	mov	r0, r5
 80097fc:	47b8      	blx	r7
 80097fe:	3001      	adds	r0, #1
 8009800:	f43f af0d 	beq.w	800961e <_printf_float+0xb6>
 8009804:	f04f 0a00 	mov.w	sl, #0
 8009808:	f104 0b1a 	add.w	fp, r4, #26
 800980c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800980e:	425b      	negs	r3, r3
 8009810:	4553      	cmp	r3, sl
 8009812:	dc01      	bgt.n	8009818 <_printf_float+0x2b0>
 8009814:	464b      	mov	r3, r9
 8009816:	e793      	b.n	8009740 <_printf_float+0x1d8>
 8009818:	2301      	movs	r3, #1
 800981a:	465a      	mov	r2, fp
 800981c:	4631      	mov	r1, r6
 800981e:	4628      	mov	r0, r5
 8009820:	47b8      	blx	r7
 8009822:	3001      	adds	r0, #1
 8009824:	f43f aefb 	beq.w	800961e <_printf_float+0xb6>
 8009828:	f10a 0a01 	add.w	sl, sl, #1
 800982c:	e7ee      	b.n	800980c <_printf_float+0x2a4>
 800982e:	bf00      	nop
 8009830:	7fefffff 	.word	0x7fefffff
 8009834:	0800c930 	.word	0x0800c930
 8009838:	0800c934 	.word	0x0800c934
 800983c:	0800c938 	.word	0x0800c938
 8009840:	0800c93c 	.word	0x0800c93c
 8009844:	0800c940 	.word	0x0800c940
 8009848:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800984a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800984e:	4553      	cmp	r3, sl
 8009850:	bfa8      	it	ge
 8009852:	4653      	movge	r3, sl
 8009854:	2b00      	cmp	r3, #0
 8009856:	4699      	mov	r9, r3
 8009858:	dc36      	bgt.n	80098c8 <_printf_float+0x360>
 800985a:	f04f 0b00 	mov.w	fp, #0
 800985e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009862:	f104 021a 	add.w	r2, r4, #26
 8009866:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009868:	9306      	str	r3, [sp, #24]
 800986a:	eba3 0309 	sub.w	r3, r3, r9
 800986e:	455b      	cmp	r3, fp
 8009870:	dc31      	bgt.n	80098d6 <_printf_float+0x36e>
 8009872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009874:	459a      	cmp	sl, r3
 8009876:	dc3a      	bgt.n	80098ee <_printf_float+0x386>
 8009878:	6823      	ldr	r3, [r4, #0]
 800987a:	07da      	lsls	r2, r3, #31
 800987c:	d437      	bmi.n	80098ee <_printf_float+0x386>
 800987e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009880:	ebaa 0903 	sub.w	r9, sl, r3
 8009884:	9b06      	ldr	r3, [sp, #24]
 8009886:	ebaa 0303 	sub.w	r3, sl, r3
 800988a:	4599      	cmp	r9, r3
 800988c:	bfa8      	it	ge
 800988e:	4699      	movge	r9, r3
 8009890:	f1b9 0f00 	cmp.w	r9, #0
 8009894:	dc33      	bgt.n	80098fe <_printf_float+0x396>
 8009896:	f04f 0800 	mov.w	r8, #0
 800989a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800989e:	f104 0b1a 	add.w	fp, r4, #26
 80098a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098a4:	ebaa 0303 	sub.w	r3, sl, r3
 80098a8:	eba3 0309 	sub.w	r3, r3, r9
 80098ac:	4543      	cmp	r3, r8
 80098ae:	f77f af79 	ble.w	80097a4 <_printf_float+0x23c>
 80098b2:	2301      	movs	r3, #1
 80098b4:	465a      	mov	r2, fp
 80098b6:	4631      	mov	r1, r6
 80098b8:	4628      	mov	r0, r5
 80098ba:	47b8      	blx	r7
 80098bc:	3001      	adds	r0, #1
 80098be:	f43f aeae 	beq.w	800961e <_printf_float+0xb6>
 80098c2:	f108 0801 	add.w	r8, r8, #1
 80098c6:	e7ec      	b.n	80098a2 <_printf_float+0x33a>
 80098c8:	4642      	mov	r2, r8
 80098ca:	4631      	mov	r1, r6
 80098cc:	4628      	mov	r0, r5
 80098ce:	47b8      	blx	r7
 80098d0:	3001      	adds	r0, #1
 80098d2:	d1c2      	bne.n	800985a <_printf_float+0x2f2>
 80098d4:	e6a3      	b.n	800961e <_printf_float+0xb6>
 80098d6:	2301      	movs	r3, #1
 80098d8:	4631      	mov	r1, r6
 80098da:	4628      	mov	r0, r5
 80098dc:	9206      	str	r2, [sp, #24]
 80098de:	47b8      	blx	r7
 80098e0:	3001      	adds	r0, #1
 80098e2:	f43f ae9c 	beq.w	800961e <_printf_float+0xb6>
 80098e6:	9a06      	ldr	r2, [sp, #24]
 80098e8:	f10b 0b01 	add.w	fp, fp, #1
 80098ec:	e7bb      	b.n	8009866 <_printf_float+0x2fe>
 80098ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098f2:	4631      	mov	r1, r6
 80098f4:	4628      	mov	r0, r5
 80098f6:	47b8      	blx	r7
 80098f8:	3001      	adds	r0, #1
 80098fa:	d1c0      	bne.n	800987e <_printf_float+0x316>
 80098fc:	e68f      	b.n	800961e <_printf_float+0xb6>
 80098fe:	9a06      	ldr	r2, [sp, #24]
 8009900:	464b      	mov	r3, r9
 8009902:	4442      	add	r2, r8
 8009904:	4631      	mov	r1, r6
 8009906:	4628      	mov	r0, r5
 8009908:	47b8      	blx	r7
 800990a:	3001      	adds	r0, #1
 800990c:	d1c3      	bne.n	8009896 <_printf_float+0x32e>
 800990e:	e686      	b.n	800961e <_printf_float+0xb6>
 8009910:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009914:	f1ba 0f01 	cmp.w	sl, #1
 8009918:	dc01      	bgt.n	800991e <_printf_float+0x3b6>
 800991a:	07db      	lsls	r3, r3, #31
 800991c:	d536      	bpl.n	800998c <_printf_float+0x424>
 800991e:	2301      	movs	r3, #1
 8009920:	4642      	mov	r2, r8
 8009922:	4631      	mov	r1, r6
 8009924:	4628      	mov	r0, r5
 8009926:	47b8      	blx	r7
 8009928:	3001      	adds	r0, #1
 800992a:	f43f ae78 	beq.w	800961e <_printf_float+0xb6>
 800992e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009932:	4631      	mov	r1, r6
 8009934:	4628      	mov	r0, r5
 8009936:	47b8      	blx	r7
 8009938:	3001      	adds	r0, #1
 800993a:	f43f ae70 	beq.w	800961e <_printf_float+0xb6>
 800993e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009942:	2200      	movs	r2, #0
 8009944:	2300      	movs	r3, #0
 8009946:	f10a 3aff 	add.w	sl, sl, #4294967295
 800994a:	f7f7 f8c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800994e:	b9c0      	cbnz	r0, 8009982 <_printf_float+0x41a>
 8009950:	4653      	mov	r3, sl
 8009952:	f108 0201 	add.w	r2, r8, #1
 8009956:	4631      	mov	r1, r6
 8009958:	4628      	mov	r0, r5
 800995a:	47b8      	blx	r7
 800995c:	3001      	adds	r0, #1
 800995e:	d10c      	bne.n	800997a <_printf_float+0x412>
 8009960:	e65d      	b.n	800961e <_printf_float+0xb6>
 8009962:	2301      	movs	r3, #1
 8009964:	465a      	mov	r2, fp
 8009966:	4631      	mov	r1, r6
 8009968:	4628      	mov	r0, r5
 800996a:	47b8      	blx	r7
 800996c:	3001      	adds	r0, #1
 800996e:	f43f ae56 	beq.w	800961e <_printf_float+0xb6>
 8009972:	f108 0801 	add.w	r8, r8, #1
 8009976:	45d0      	cmp	r8, sl
 8009978:	dbf3      	blt.n	8009962 <_printf_float+0x3fa>
 800997a:	464b      	mov	r3, r9
 800997c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009980:	e6df      	b.n	8009742 <_printf_float+0x1da>
 8009982:	f04f 0800 	mov.w	r8, #0
 8009986:	f104 0b1a 	add.w	fp, r4, #26
 800998a:	e7f4      	b.n	8009976 <_printf_float+0x40e>
 800998c:	2301      	movs	r3, #1
 800998e:	4642      	mov	r2, r8
 8009990:	e7e1      	b.n	8009956 <_printf_float+0x3ee>
 8009992:	2301      	movs	r3, #1
 8009994:	464a      	mov	r2, r9
 8009996:	4631      	mov	r1, r6
 8009998:	4628      	mov	r0, r5
 800999a:	47b8      	blx	r7
 800999c:	3001      	adds	r0, #1
 800999e:	f43f ae3e 	beq.w	800961e <_printf_float+0xb6>
 80099a2:	f108 0801 	add.w	r8, r8, #1
 80099a6:	68e3      	ldr	r3, [r4, #12]
 80099a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80099aa:	1a5b      	subs	r3, r3, r1
 80099ac:	4543      	cmp	r3, r8
 80099ae:	dcf0      	bgt.n	8009992 <_printf_float+0x42a>
 80099b0:	e6fc      	b.n	80097ac <_printf_float+0x244>
 80099b2:	f04f 0800 	mov.w	r8, #0
 80099b6:	f104 0919 	add.w	r9, r4, #25
 80099ba:	e7f4      	b.n	80099a6 <_printf_float+0x43e>

080099bc <_printf_common>:
 80099bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	4616      	mov	r6, r2
 80099c2:	4698      	mov	r8, r3
 80099c4:	688a      	ldr	r2, [r1, #8]
 80099c6:	690b      	ldr	r3, [r1, #16]
 80099c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80099cc:	4293      	cmp	r3, r2
 80099ce:	bfb8      	it	lt
 80099d0:	4613      	movlt	r3, r2
 80099d2:	6033      	str	r3, [r6, #0]
 80099d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80099d8:	4607      	mov	r7, r0
 80099da:	460c      	mov	r4, r1
 80099dc:	b10a      	cbz	r2, 80099e2 <_printf_common+0x26>
 80099de:	3301      	adds	r3, #1
 80099e0:	6033      	str	r3, [r6, #0]
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	0699      	lsls	r1, r3, #26
 80099e6:	bf42      	ittt	mi
 80099e8:	6833      	ldrmi	r3, [r6, #0]
 80099ea:	3302      	addmi	r3, #2
 80099ec:	6033      	strmi	r3, [r6, #0]
 80099ee:	6825      	ldr	r5, [r4, #0]
 80099f0:	f015 0506 	ands.w	r5, r5, #6
 80099f4:	d106      	bne.n	8009a04 <_printf_common+0x48>
 80099f6:	f104 0a19 	add.w	sl, r4, #25
 80099fa:	68e3      	ldr	r3, [r4, #12]
 80099fc:	6832      	ldr	r2, [r6, #0]
 80099fe:	1a9b      	subs	r3, r3, r2
 8009a00:	42ab      	cmp	r3, r5
 8009a02:	dc26      	bgt.n	8009a52 <_printf_common+0x96>
 8009a04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a08:	6822      	ldr	r2, [r4, #0]
 8009a0a:	3b00      	subs	r3, #0
 8009a0c:	bf18      	it	ne
 8009a0e:	2301      	movne	r3, #1
 8009a10:	0692      	lsls	r2, r2, #26
 8009a12:	d42b      	bmi.n	8009a6c <_printf_common+0xb0>
 8009a14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a18:	4641      	mov	r1, r8
 8009a1a:	4638      	mov	r0, r7
 8009a1c:	47c8      	blx	r9
 8009a1e:	3001      	adds	r0, #1
 8009a20:	d01e      	beq.n	8009a60 <_printf_common+0xa4>
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	6922      	ldr	r2, [r4, #16]
 8009a26:	f003 0306 	and.w	r3, r3, #6
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	bf02      	ittt	eq
 8009a2e:	68e5      	ldreq	r5, [r4, #12]
 8009a30:	6833      	ldreq	r3, [r6, #0]
 8009a32:	1aed      	subeq	r5, r5, r3
 8009a34:	68a3      	ldr	r3, [r4, #8]
 8009a36:	bf0c      	ite	eq
 8009a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a3c:	2500      	movne	r5, #0
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	bfc4      	itt	gt
 8009a42:	1a9b      	subgt	r3, r3, r2
 8009a44:	18ed      	addgt	r5, r5, r3
 8009a46:	2600      	movs	r6, #0
 8009a48:	341a      	adds	r4, #26
 8009a4a:	42b5      	cmp	r5, r6
 8009a4c:	d11a      	bne.n	8009a84 <_printf_common+0xc8>
 8009a4e:	2000      	movs	r0, #0
 8009a50:	e008      	b.n	8009a64 <_printf_common+0xa8>
 8009a52:	2301      	movs	r3, #1
 8009a54:	4652      	mov	r2, sl
 8009a56:	4641      	mov	r1, r8
 8009a58:	4638      	mov	r0, r7
 8009a5a:	47c8      	blx	r9
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	d103      	bne.n	8009a68 <_printf_common+0xac>
 8009a60:	f04f 30ff 	mov.w	r0, #4294967295
 8009a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a68:	3501      	adds	r5, #1
 8009a6a:	e7c6      	b.n	80099fa <_printf_common+0x3e>
 8009a6c:	18e1      	adds	r1, r4, r3
 8009a6e:	1c5a      	adds	r2, r3, #1
 8009a70:	2030      	movs	r0, #48	@ 0x30
 8009a72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009a76:	4422      	add	r2, r4
 8009a78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009a7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009a80:	3302      	adds	r3, #2
 8009a82:	e7c7      	b.n	8009a14 <_printf_common+0x58>
 8009a84:	2301      	movs	r3, #1
 8009a86:	4622      	mov	r2, r4
 8009a88:	4641      	mov	r1, r8
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	47c8      	blx	r9
 8009a8e:	3001      	adds	r0, #1
 8009a90:	d0e6      	beq.n	8009a60 <_printf_common+0xa4>
 8009a92:	3601      	adds	r6, #1
 8009a94:	e7d9      	b.n	8009a4a <_printf_common+0x8e>
	...

08009a98 <_printf_i>:
 8009a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a9c:	7e0f      	ldrb	r7, [r1, #24]
 8009a9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009aa0:	2f78      	cmp	r7, #120	@ 0x78
 8009aa2:	4691      	mov	r9, r2
 8009aa4:	4680      	mov	r8, r0
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	469a      	mov	sl, r3
 8009aaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009aae:	d807      	bhi.n	8009ac0 <_printf_i+0x28>
 8009ab0:	2f62      	cmp	r7, #98	@ 0x62
 8009ab2:	d80a      	bhi.n	8009aca <_printf_i+0x32>
 8009ab4:	2f00      	cmp	r7, #0
 8009ab6:	f000 80d2 	beq.w	8009c5e <_printf_i+0x1c6>
 8009aba:	2f58      	cmp	r7, #88	@ 0x58
 8009abc:	f000 80b9 	beq.w	8009c32 <_printf_i+0x19a>
 8009ac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ac4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ac8:	e03a      	b.n	8009b40 <_printf_i+0xa8>
 8009aca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009ace:	2b15      	cmp	r3, #21
 8009ad0:	d8f6      	bhi.n	8009ac0 <_printf_i+0x28>
 8009ad2:	a101      	add	r1, pc, #4	@ (adr r1, 8009ad8 <_printf_i+0x40>)
 8009ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ad8:	08009b31 	.word	0x08009b31
 8009adc:	08009b45 	.word	0x08009b45
 8009ae0:	08009ac1 	.word	0x08009ac1
 8009ae4:	08009ac1 	.word	0x08009ac1
 8009ae8:	08009ac1 	.word	0x08009ac1
 8009aec:	08009ac1 	.word	0x08009ac1
 8009af0:	08009b45 	.word	0x08009b45
 8009af4:	08009ac1 	.word	0x08009ac1
 8009af8:	08009ac1 	.word	0x08009ac1
 8009afc:	08009ac1 	.word	0x08009ac1
 8009b00:	08009ac1 	.word	0x08009ac1
 8009b04:	08009c45 	.word	0x08009c45
 8009b08:	08009b6f 	.word	0x08009b6f
 8009b0c:	08009bff 	.word	0x08009bff
 8009b10:	08009ac1 	.word	0x08009ac1
 8009b14:	08009ac1 	.word	0x08009ac1
 8009b18:	08009c67 	.word	0x08009c67
 8009b1c:	08009ac1 	.word	0x08009ac1
 8009b20:	08009b6f 	.word	0x08009b6f
 8009b24:	08009ac1 	.word	0x08009ac1
 8009b28:	08009ac1 	.word	0x08009ac1
 8009b2c:	08009c07 	.word	0x08009c07
 8009b30:	6833      	ldr	r3, [r6, #0]
 8009b32:	1d1a      	adds	r2, r3, #4
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	6032      	str	r2, [r6, #0]
 8009b38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b40:	2301      	movs	r3, #1
 8009b42:	e09d      	b.n	8009c80 <_printf_i+0x1e8>
 8009b44:	6833      	ldr	r3, [r6, #0]
 8009b46:	6820      	ldr	r0, [r4, #0]
 8009b48:	1d19      	adds	r1, r3, #4
 8009b4a:	6031      	str	r1, [r6, #0]
 8009b4c:	0606      	lsls	r6, r0, #24
 8009b4e:	d501      	bpl.n	8009b54 <_printf_i+0xbc>
 8009b50:	681d      	ldr	r5, [r3, #0]
 8009b52:	e003      	b.n	8009b5c <_printf_i+0xc4>
 8009b54:	0645      	lsls	r5, r0, #25
 8009b56:	d5fb      	bpl.n	8009b50 <_printf_i+0xb8>
 8009b58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b5c:	2d00      	cmp	r5, #0
 8009b5e:	da03      	bge.n	8009b68 <_printf_i+0xd0>
 8009b60:	232d      	movs	r3, #45	@ 0x2d
 8009b62:	426d      	negs	r5, r5
 8009b64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b68:	4859      	ldr	r0, [pc, #356]	@ (8009cd0 <_printf_i+0x238>)
 8009b6a:	230a      	movs	r3, #10
 8009b6c:	e011      	b.n	8009b92 <_printf_i+0xfa>
 8009b6e:	6821      	ldr	r1, [r4, #0]
 8009b70:	6833      	ldr	r3, [r6, #0]
 8009b72:	0608      	lsls	r0, r1, #24
 8009b74:	f853 5b04 	ldr.w	r5, [r3], #4
 8009b78:	d402      	bmi.n	8009b80 <_printf_i+0xe8>
 8009b7a:	0649      	lsls	r1, r1, #25
 8009b7c:	bf48      	it	mi
 8009b7e:	b2ad      	uxthmi	r5, r5
 8009b80:	2f6f      	cmp	r7, #111	@ 0x6f
 8009b82:	4853      	ldr	r0, [pc, #332]	@ (8009cd0 <_printf_i+0x238>)
 8009b84:	6033      	str	r3, [r6, #0]
 8009b86:	bf14      	ite	ne
 8009b88:	230a      	movne	r3, #10
 8009b8a:	2308      	moveq	r3, #8
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009b92:	6866      	ldr	r6, [r4, #4]
 8009b94:	60a6      	str	r6, [r4, #8]
 8009b96:	2e00      	cmp	r6, #0
 8009b98:	bfa2      	ittt	ge
 8009b9a:	6821      	ldrge	r1, [r4, #0]
 8009b9c:	f021 0104 	bicge.w	r1, r1, #4
 8009ba0:	6021      	strge	r1, [r4, #0]
 8009ba2:	b90d      	cbnz	r5, 8009ba8 <_printf_i+0x110>
 8009ba4:	2e00      	cmp	r6, #0
 8009ba6:	d04b      	beq.n	8009c40 <_printf_i+0x1a8>
 8009ba8:	4616      	mov	r6, r2
 8009baa:	fbb5 f1f3 	udiv	r1, r5, r3
 8009bae:	fb03 5711 	mls	r7, r3, r1, r5
 8009bb2:	5dc7      	ldrb	r7, [r0, r7]
 8009bb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009bb8:	462f      	mov	r7, r5
 8009bba:	42bb      	cmp	r3, r7
 8009bbc:	460d      	mov	r5, r1
 8009bbe:	d9f4      	bls.n	8009baa <_printf_i+0x112>
 8009bc0:	2b08      	cmp	r3, #8
 8009bc2:	d10b      	bne.n	8009bdc <_printf_i+0x144>
 8009bc4:	6823      	ldr	r3, [r4, #0]
 8009bc6:	07df      	lsls	r7, r3, #31
 8009bc8:	d508      	bpl.n	8009bdc <_printf_i+0x144>
 8009bca:	6923      	ldr	r3, [r4, #16]
 8009bcc:	6861      	ldr	r1, [r4, #4]
 8009bce:	4299      	cmp	r1, r3
 8009bd0:	bfde      	ittt	le
 8009bd2:	2330      	movle	r3, #48	@ 0x30
 8009bd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009bd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009bdc:	1b92      	subs	r2, r2, r6
 8009bde:	6122      	str	r2, [r4, #16]
 8009be0:	f8cd a000 	str.w	sl, [sp]
 8009be4:	464b      	mov	r3, r9
 8009be6:	aa03      	add	r2, sp, #12
 8009be8:	4621      	mov	r1, r4
 8009bea:	4640      	mov	r0, r8
 8009bec:	f7ff fee6 	bl	80099bc <_printf_common>
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d14a      	bne.n	8009c8a <_printf_i+0x1f2>
 8009bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf8:	b004      	add	sp, #16
 8009bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	f043 0320 	orr.w	r3, r3, #32
 8009c04:	6023      	str	r3, [r4, #0]
 8009c06:	4833      	ldr	r0, [pc, #204]	@ (8009cd4 <_printf_i+0x23c>)
 8009c08:	2778      	movs	r7, #120	@ 0x78
 8009c0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	6831      	ldr	r1, [r6, #0]
 8009c12:	061f      	lsls	r7, r3, #24
 8009c14:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c18:	d402      	bmi.n	8009c20 <_printf_i+0x188>
 8009c1a:	065f      	lsls	r7, r3, #25
 8009c1c:	bf48      	it	mi
 8009c1e:	b2ad      	uxthmi	r5, r5
 8009c20:	6031      	str	r1, [r6, #0]
 8009c22:	07d9      	lsls	r1, r3, #31
 8009c24:	bf44      	itt	mi
 8009c26:	f043 0320 	orrmi.w	r3, r3, #32
 8009c2a:	6023      	strmi	r3, [r4, #0]
 8009c2c:	b11d      	cbz	r5, 8009c36 <_printf_i+0x19e>
 8009c2e:	2310      	movs	r3, #16
 8009c30:	e7ac      	b.n	8009b8c <_printf_i+0xf4>
 8009c32:	4827      	ldr	r0, [pc, #156]	@ (8009cd0 <_printf_i+0x238>)
 8009c34:	e7e9      	b.n	8009c0a <_printf_i+0x172>
 8009c36:	6823      	ldr	r3, [r4, #0]
 8009c38:	f023 0320 	bic.w	r3, r3, #32
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	e7f6      	b.n	8009c2e <_printf_i+0x196>
 8009c40:	4616      	mov	r6, r2
 8009c42:	e7bd      	b.n	8009bc0 <_printf_i+0x128>
 8009c44:	6833      	ldr	r3, [r6, #0]
 8009c46:	6825      	ldr	r5, [r4, #0]
 8009c48:	6961      	ldr	r1, [r4, #20]
 8009c4a:	1d18      	adds	r0, r3, #4
 8009c4c:	6030      	str	r0, [r6, #0]
 8009c4e:	062e      	lsls	r6, r5, #24
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	d501      	bpl.n	8009c58 <_printf_i+0x1c0>
 8009c54:	6019      	str	r1, [r3, #0]
 8009c56:	e002      	b.n	8009c5e <_printf_i+0x1c6>
 8009c58:	0668      	lsls	r0, r5, #25
 8009c5a:	d5fb      	bpl.n	8009c54 <_printf_i+0x1bc>
 8009c5c:	8019      	strh	r1, [r3, #0]
 8009c5e:	2300      	movs	r3, #0
 8009c60:	6123      	str	r3, [r4, #16]
 8009c62:	4616      	mov	r6, r2
 8009c64:	e7bc      	b.n	8009be0 <_printf_i+0x148>
 8009c66:	6833      	ldr	r3, [r6, #0]
 8009c68:	1d1a      	adds	r2, r3, #4
 8009c6a:	6032      	str	r2, [r6, #0]
 8009c6c:	681e      	ldr	r6, [r3, #0]
 8009c6e:	6862      	ldr	r2, [r4, #4]
 8009c70:	2100      	movs	r1, #0
 8009c72:	4630      	mov	r0, r6
 8009c74:	f7f6 fab4 	bl	80001e0 <memchr>
 8009c78:	b108      	cbz	r0, 8009c7e <_printf_i+0x1e6>
 8009c7a:	1b80      	subs	r0, r0, r6
 8009c7c:	6060      	str	r0, [r4, #4]
 8009c7e:	6863      	ldr	r3, [r4, #4]
 8009c80:	6123      	str	r3, [r4, #16]
 8009c82:	2300      	movs	r3, #0
 8009c84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c88:	e7aa      	b.n	8009be0 <_printf_i+0x148>
 8009c8a:	6923      	ldr	r3, [r4, #16]
 8009c8c:	4632      	mov	r2, r6
 8009c8e:	4649      	mov	r1, r9
 8009c90:	4640      	mov	r0, r8
 8009c92:	47d0      	blx	sl
 8009c94:	3001      	adds	r0, #1
 8009c96:	d0ad      	beq.n	8009bf4 <_printf_i+0x15c>
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	079b      	lsls	r3, r3, #30
 8009c9c:	d413      	bmi.n	8009cc6 <_printf_i+0x22e>
 8009c9e:	68e0      	ldr	r0, [r4, #12]
 8009ca0:	9b03      	ldr	r3, [sp, #12]
 8009ca2:	4298      	cmp	r0, r3
 8009ca4:	bfb8      	it	lt
 8009ca6:	4618      	movlt	r0, r3
 8009ca8:	e7a6      	b.n	8009bf8 <_printf_i+0x160>
 8009caa:	2301      	movs	r3, #1
 8009cac:	4632      	mov	r2, r6
 8009cae:	4649      	mov	r1, r9
 8009cb0:	4640      	mov	r0, r8
 8009cb2:	47d0      	blx	sl
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d09d      	beq.n	8009bf4 <_printf_i+0x15c>
 8009cb8:	3501      	adds	r5, #1
 8009cba:	68e3      	ldr	r3, [r4, #12]
 8009cbc:	9903      	ldr	r1, [sp, #12]
 8009cbe:	1a5b      	subs	r3, r3, r1
 8009cc0:	42ab      	cmp	r3, r5
 8009cc2:	dcf2      	bgt.n	8009caa <_printf_i+0x212>
 8009cc4:	e7eb      	b.n	8009c9e <_printf_i+0x206>
 8009cc6:	2500      	movs	r5, #0
 8009cc8:	f104 0619 	add.w	r6, r4, #25
 8009ccc:	e7f5      	b.n	8009cba <_printf_i+0x222>
 8009cce:	bf00      	nop
 8009cd0:	0800c942 	.word	0x0800c942
 8009cd4:	0800c953 	.word	0x0800c953

08009cd8 <std>:
 8009cd8:	2300      	movs	r3, #0
 8009cda:	b510      	push	{r4, lr}
 8009cdc:	4604      	mov	r4, r0
 8009cde:	e9c0 3300 	strd	r3, r3, [r0]
 8009ce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ce6:	6083      	str	r3, [r0, #8]
 8009ce8:	8181      	strh	r1, [r0, #12]
 8009cea:	6643      	str	r3, [r0, #100]	@ 0x64
 8009cec:	81c2      	strh	r2, [r0, #14]
 8009cee:	6183      	str	r3, [r0, #24]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	2208      	movs	r2, #8
 8009cf4:	305c      	adds	r0, #92	@ 0x5c
 8009cf6:	f000 f9e1 	bl	800a0bc <memset>
 8009cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8009d30 <std+0x58>)
 8009cfc:	6263      	str	r3, [r4, #36]	@ 0x24
 8009cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8009d34 <std+0x5c>)
 8009d00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009d02:	4b0d      	ldr	r3, [pc, #52]	@ (8009d38 <std+0x60>)
 8009d04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009d06:	4b0d      	ldr	r3, [pc, #52]	@ (8009d3c <std+0x64>)
 8009d08:	6323      	str	r3, [r4, #48]	@ 0x30
 8009d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8009d40 <std+0x68>)
 8009d0c:	6224      	str	r4, [r4, #32]
 8009d0e:	429c      	cmp	r4, r3
 8009d10:	d006      	beq.n	8009d20 <std+0x48>
 8009d12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009d16:	4294      	cmp	r4, r2
 8009d18:	d002      	beq.n	8009d20 <std+0x48>
 8009d1a:	33d0      	adds	r3, #208	@ 0xd0
 8009d1c:	429c      	cmp	r4, r3
 8009d1e:	d105      	bne.n	8009d2c <std+0x54>
 8009d20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d28:	f000 ba44 	b.w	800a1b4 <__retarget_lock_init_recursive>
 8009d2c:	bd10      	pop	{r4, pc}
 8009d2e:	bf00      	nop
 8009d30:	08009e9d 	.word	0x08009e9d
 8009d34:	08009ebf 	.word	0x08009ebf
 8009d38:	08009ef7 	.word	0x08009ef7
 8009d3c:	08009f1b 	.word	0x08009f1b
 8009d40:	20004edc 	.word	0x20004edc

08009d44 <stdio_exit_handler>:
 8009d44:	4a02      	ldr	r2, [pc, #8]	@ (8009d50 <stdio_exit_handler+0xc>)
 8009d46:	4903      	ldr	r1, [pc, #12]	@ (8009d54 <stdio_exit_handler+0x10>)
 8009d48:	4803      	ldr	r0, [pc, #12]	@ (8009d58 <stdio_exit_handler+0x14>)
 8009d4a:	f000 b869 	b.w	8009e20 <_fwalk_sglue>
 8009d4e:	bf00      	nop
 8009d50:	20000190 	.word	0x20000190
 8009d54:	0800bdb1 	.word	0x0800bdb1
 8009d58:	200001a0 	.word	0x200001a0

08009d5c <cleanup_stdio>:
 8009d5c:	6841      	ldr	r1, [r0, #4]
 8009d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8009d90 <cleanup_stdio+0x34>)
 8009d60:	4299      	cmp	r1, r3
 8009d62:	b510      	push	{r4, lr}
 8009d64:	4604      	mov	r4, r0
 8009d66:	d001      	beq.n	8009d6c <cleanup_stdio+0x10>
 8009d68:	f002 f822 	bl	800bdb0 <_fflush_r>
 8009d6c:	68a1      	ldr	r1, [r4, #8]
 8009d6e:	4b09      	ldr	r3, [pc, #36]	@ (8009d94 <cleanup_stdio+0x38>)
 8009d70:	4299      	cmp	r1, r3
 8009d72:	d002      	beq.n	8009d7a <cleanup_stdio+0x1e>
 8009d74:	4620      	mov	r0, r4
 8009d76:	f002 f81b 	bl	800bdb0 <_fflush_r>
 8009d7a:	68e1      	ldr	r1, [r4, #12]
 8009d7c:	4b06      	ldr	r3, [pc, #24]	@ (8009d98 <cleanup_stdio+0x3c>)
 8009d7e:	4299      	cmp	r1, r3
 8009d80:	d004      	beq.n	8009d8c <cleanup_stdio+0x30>
 8009d82:	4620      	mov	r0, r4
 8009d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d88:	f002 b812 	b.w	800bdb0 <_fflush_r>
 8009d8c:	bd10      	pop	{r4, pc}
 8009d8e:	bf00      	nop
 8009d90:	20004edc 	.word	0x20004edc
 8009d94:	20004f44 	.word	0x20004f44
 8009d98:	20004fac 	.word	0x20004fac

08009d9c <global_stdio_init.part.0>:
 8009d9c:	b510      	push	{r4, lr}
 8009d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8009dcc <global_stdio_init.part.0+0x30>)
 8009da0:	4c0b      	ldr	r4, [pc, #44]	@ (8009dd0 <global_stdio_init.part.0+0x34>)
 8009da2:	4a0c      	ldr	r2, [pc, #48]	@ (8009dd4 <global_stdio_init.part.0+0x38>)
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	4620      	mov	r0, r4
 8009da8:	2200      	movs	r2, #0
 8009daa:	2104      	movs	r1, #4
 8009dac:	f7ff ff94 	bl	8009cd8 <std>
 8009db0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009db4:	2201      	movs	r2, #1
 8009db6:	2109      	movs	r1, #9
 8009db8:	f7ff ff8e 	bl	8009cd8 <std>
 8009dbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dc6:	2112      	movs	r1, #18
 8009dc8:	f7ff bf86 	b.w	8009cd8 <std>
 8009dcc:	20005014 	.word	0x20005014
 8009dd0:	20004edc 	.word	0x20004edc
 8009dd4:	08009d45 	.word	0x08009d45

08009dd8 <__sfp_lock_acquire>:
 8009dd8:	4801      	ldr	r0, [pc, #4]	@ (8009de0 <__sfp_lock_acquire+0x8>)
 8009dda:	f000 b9ec 	b.w	800a1b6 <__retarget_lock_acquire_recursive>
 8009dde:	bf00      	nop
 8009de0:	2000501d 	.word	0x2000501d

08009de4 <__sfp_lock_release>:
 8009de4:	4801      	ldr	r0, [pc, #4]	@ (8009dec <__sfp_lock_release+0x8>)
 8009de6:	f000 b9e7 	b.w	800a1b8 <__retarget_lock_release_recursive>
 8009dea:	bf00      	nop
 8009dec:	2000501d 	.word	0x2000501d

08009df0 <__sinit>:
 8009df0:	b510      	push	{r4, lr}
 8009df2:	4604      	mov	r4, r0
 8009df4:	f7ff fff0 	bl	8009dd8 <__sfp_lock_acquire>
 8009df8:	6a23      	ldr	r3, [r4, #32]
 8009dfa:	b11b      	cbz	r3, 8009e04 <__sinit+0x14>
 8009dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e00:	f7ff bff0 	b.w	8009de4 <__sfp_lock_release>
 8009e04:	4b04      	ldr	r3, [pc, #16]	@ (8009e18 <__sinit+0x28>)
 8009e06:	6223      	str	r3, [r4, #32]
 8009e08:	4b04      	ldr	r3, [pc, #16]	@ (8009e1c <__sinit+0x2c>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1f5      	bne.n	8009dfc <__sinit+0xc>
 8009e10:	f7ff ffc4 	bl	8009d9c <global_stdio_init.part.0>
 8009e14:	e7f2      	b.n	8009dfc <__sinit+0xc>
 8009e16:	bf00      	nop
 8009e18:	08009d5d 	.word	0x08009d5d
 8009e1c:	20005014 	.word	0x20005014

08009e20 <_fwalk_sglue>:
 8009e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e24:	4607      	mov	r7, r0
 8009e26:	4688      	mov	r8, r1
 8009e28:	4614      	mov	r4, r2
 8009e2a:	2600      	movs	r6, #0
 8009e2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e30:	f1b9 0901 	subs.w	r9, r9, #1
 8009e34:	d505      	bpl.n	8009e42 <_fwalk_sglue+0x22>
 8009e36:	6824      	ldr	r4, [r4, #0]
 8009e38:	2c00      	cmp	r4, #0
 8009e3a:	d1f7      	bne.n	8009e2c <_fwalk_sglue+0xc>
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e42:	89ab      	ldrh	r3, [r5, #12]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d907      	bls.n	8009e58 <_fwalk_sglue+0x38>
 8009e48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	d003      	beq.n	8009e58 <_fwalk_sglue+0x38>
 8009e50:	4629      	mov	r1, r5
 8009e52:	4638      	mov	r0, r7
 8009e54:	47c0      	blx	r8
 8009e56:	4306      	orrs	r6, r0
 8009e58:	3568      	adds	r5, #104	@ 0x68
 8009e5a:	e7e9      	b.n	8009e30 <_fwalk_sglue+0x10>

08009e5c <siprintf>:
 8009e5c:	b40e      	push	{r1, r2, r3}
 8009e5e:	b500      	push	{lr}
 8009e60:	b09c      	sub	sp, #112	@ 0x70
 8009e62:	ab1d      	add	r3, sp, #116	@ 0x74
 8009e64:	9002      	str	r0, [sp, #8]
 8009e66:	9006      	str	r0, [sp, #24]
 8009e68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e6c:	4809      	ldr	r0, [pc, #36]	@ (8009e94 <siprintf+0x38>)
 8009e6e:	9107      	str	r1, [sp, #28]
 8009e70:	9104      	str	r1, [sp, #16]
 8009e72:	4909      	ldr	r1, [pc, #36]	@ (8009e98 <siprintf+0x3c>)
 8009e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e78:	9105      	str	r1, [sp, #20]
 8009e7a:	6800      	ldr	r0, [r0, #0]
 8009e7c:	9301      	str	r3, [sp, #4]
 8009e7e:	a902      	add	r1, sp, #8
 8009e80:	f001 fcd4 	bl	800b82c <_svfiprintf_r>
 8009e84:	9b02      	ldr	r3, [sp, #8]
 8009e86:	2200      	movs	r2, #0
 8009e88:	701a      	strb	r2, [r3, #0]
 8009e8a:	b01c      	add	sp, #112	@ 0x70
 8009e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e90:	b003      	add	sp, #12
 8009e92:	4770      	bx	lr
 8009e94:	2000019c 	.word	0x2000019c
 8009e98:	ffff0208 	.word	0xffff0208

08009e9c <__sread>:
 8009e9c:	b510      	push	{r4, lr}
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ea4:	f000 f938 	bl	800a118 <_read_r>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	bfab      	itete	ge
 8009eac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009eae:	89a3      	ldrhlt	r3, [r4, #12]
 8009eb0:	181b      	addge	r3, r3, r0
 8009eb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009eb6:	bfac      	ite	ge
 8009eb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009eba:	81a3      	strhlt	r3, [r4, #12]
 8009ebc:	bd10      	pop	{r4, pc}

08009ebe <__swrite>:
 8009ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec2:	461f      	mov	r7, r3
 8009ec4:	898b      	ldrh	r3, [r1, #12]
 8009ec6:	05db      	lsls	r3, r3, #23
 8009ec8:	4605      	mov	r5, r0
 8009eca:	460c      	mov	r4, r1
 8009ecc:	4616      	mov	r6, r2
 8009ece:	d505      	bpl.n	8009edc <__swrite+0x1e>
 8009ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed4:	2302      	movs	r3, #2
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f000 f90c 	bl	800a0f4 <_lseek_r>
 8009edc:	89a3      	ldrh	r3, [r4, #12]
 8009ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ee2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ee6:	81a3      	strh	r3, [r4, #12]
 8009ee8:	4632      	mov	r2, r6
 8009eea:	463b      	mov	r3, r7
 8009eec:	4628      	mov	r0, r5
 8009eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef2:	f000 b923 	b.w	800a13c <_write_r>

08009ef6 <__sseek>:
 8009ef6:	b510      	push	{r4, lr}
 8009ef8:	460c      	mov	r4, r1
 8009efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009efe:	f000 f8f9 	bl	800a0f4 <_lseek_r>
 8009f02:	1c43      	adds	r3, r0, #1
 8009f04:	89a3      	ldrh	r3, [r4, #12]
 8009f06:	bf15      	itete	ne
 8009f08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009f0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009f0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009f12:	81a3      	strheq	r3, [r4, #12]
 8009f14:	bf18      	it	ne
 8009f16:	81a3      	strhne	r3, [r4, #12]
 8009f18:	bd10      	pop	{r4, pc}

08009f1a <__sclose>:
 8009f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f1e:	f000 b8d9 	b.w	800a0d4 <_close_r>

08009f22 <_vsniprintf_r>:
 8009f22:	b530      	push	{r4, r5, lr}
 8009f24:	4614      	mov	r4, r2
 8009f26:	2c00      	cmp	r4, #0
 8009f28:	b09b      	sub	sp, #108	@ 0x6c
 8009f2a:	4605      	mov	r5, r0
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	da05      	bge.n	8009f3c <_vsniprintf_r+0x1a>
 8009f30:	238b      	movs	r3, #139	@ 0x8b
 8009f32:	6003      	str	r3, [r0, #0]
 8009f34:	f04f 30ff 	mov.w	r0, #4294967295
 8009f38:	b01b      	add	sp, #108	@ 0x6c
 8009f3a:	bd30      	pop	{r4, r5, pc}
 8009f3c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009f40:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009f44:	bf14      	ite	ne
 8009f46:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009f4a:	4623      	moveq	r3, r4
 8009f4c:	9302      	str	r3, [sp, #8]
 8009f4e:	9305      	str	r3, [sp, #20]
 8009f50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009f54:	9100      	str	r1, [sp, #0]
 8009f56:	9104      	str	r1, [sp, #16]
 8009f58:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009f5c:	4669      	mov	r1, sp
 8009f5e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009f60:	f001 fc64 	bl	800b82c <_svfiprintf_r>
 8009f64:	1c43      	adds	r3, r0, #1
 8009f66:	bfbc      	itt	lt
 8009f68:	238b      	movlt	r3, #139	@ 0x8b
 8009f6a:	602b      	strlt	r3, [r5, #0]
 8009f6c:	2c00      	cmp	r4, #0
 8009f6e:	d0e3      	beq.n	8009f38 <_vsniprintf_r+0x16>
 8009f70:	9b00      	ldr	r3, [sp, #0]
 8009f72:	2200      	movs	r2, #0
 8009f74:	701a      	strb	r2, [r3, #0]
 8009f76:	e7df      	b.n	8009f38 <_vsniprintf_r+0x16>

08009f78 <vsniprintf>:
 8009f78:	b507      	push	{r0, r1, r2, lr}
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	460a      	mov	r2, r1
 8009f80:	4601      	mov	r1, r0
 8009f82:	4803      	ldr	r0, [pc, #12]	@ (8009f90 <vsniprintf+0x18>)
 8009f84:	6800      	ldr	r0, [r0, #0]
 8009f86:	f7ff ffcc 	bl	8009f22 <_vsniprintf_r>
 8009f8a:	b003      	add	sp, #12
 8009f8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f90:	2000019c 	.word	0x2000019c

08009f94 <__swbuf_r>:
 8009f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f96:	460e      	mov	r6, r1
 8009f98:	4614      	mov	r4, r2
 8009f9a:	4605      	mov	r5, r0
 8009f9c:	b118      	cbz	r0, 8009fa6 <__swbuf_r+0x12>
 8009f9e:	6a03      	ldr	r3, [r0, #32]
 8009fa0:	b90b      	cbnz	r3, 8009fa6 <__swbuf_r+0x12>
 8009fa2:	f7ff ff25 	bl	8009df0 <__sinit>
 8009fa6:	69a3      	ldr	r3, [r4, #24]
 8009fa8:	60a3      	str	r3, [r4, #8]
 8009faa:	89a3      	ldrh	r3, [r4, #12]
 8009fac:	071a      	lsls	r2, r3, #28
 8009fae:	d501      	bpl.n	8009fb4 <__swbuf_r+0x20>
 8009fb0:	6923      	ldr	r3, [r4, #16]
 8009fb2:	b943      	cbnz	r3, 8009fc6 <__swbuf_r+0x32>
 8009fb4:	4621      	mov	r1, r4
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f000 f82a 	bl	800a010 <__swsetup_r>
 8009fbc:	b118      	cbz	r0, 8009fc6 <__swbuf_r+0x32>
 8009fbe:	f04f 37ff 	mov.w	r7, #4294967295
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	6922      	ldr	r2, [r4, #16]
 8009fca:	1a98      	subs	r0, r3, r2
 8009fcc:	6963      	ldr	r3, [r4, #20]
 8009fce:	b2f6      	uxtb	r6, r6
 8009fd0:	4283      	cmp	r3, r0
 8009fd2:	4637      	mov	r7, r6
 8009fd4:	dc05      	bgt.n	8009fe2 <__swbuf_r+0x4e>
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	4628      	mov	r0, r5
 8009fda:	f001 fee9 	bl	800bdb0 <_fflush_r>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d1ed      	bne.n	8009fbe <__swbuf_r+0x2a>
 8009fe2:	68a3      	ldr	r3, [r4, #8]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	60a3      	str	r3, [r4, #8]
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	1c5a      	adds	r2, r3, #1
 8009fec:	6022      	str	r2, [r4, #0]
 8009fee:	701e      	strb	r6, [r3, #0]
 8009ff0:	6962      	ldr	r2, [r4, #20]
 8009ff2:	1c43      	adds	r3, r0, #1
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d004      	beq.n	800a002 <__swbuf_r+0x6e>
 8009ff8:	89a3      	ldrh	r3, [r4, #12]
 8009ffa:	07db      	lsls	r3, r3, #31
 8009ffc:	d5e1      	bpl.n	8009fc2 <__swbuf_r+0x2e>
 8009ffe:	2e0a      	cmp	r6, #10
 800a000:	d1df      	bne.n	8009fc2 <__swbuf_r+0x2e>
 800a002:	4621      	mov	r1, r4
 800a004:	4628      	mov	r0, r5
 800a006:	f001 fed3 	bl	800bdb0 <_fflush_r>
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d0d9      	beq.n	8009fc2 <__swbuf_r+0x2e>
 800a00e:	e7d6      	b.n	8009fbe <__swbuf_r+0x2a>

0800a010 <__swsetup_r>:
 800a010:	b538      	push	{r3, r4, r5, lr}
 800a012:	4b29      	ldr	r3, [pc, #164]	@ (800a0b8 <__swsetup_r+0xa8>)
 800a014:	4605      	mov	r5, r0
 800a016:	6818      	ldr	r0, [r3, #0]
 800a018:	460c      	mov	r4, r1
 800a01a:	b118      	cbz	r0, 800a024 <__swsetup_r+0x14>
 800a01c:	6a03      	ldr	r3, [r0, #32]
 800a01e:	b90b      	cbnz	r3, 800a024 <__swsetup_r+0x14>
 800a020:	f7ff fee6 	bl	8009df0 <__sinit>
 800a024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a028:	0719      	lsls	r1, r3, #28
 800a02a:	d422      	bmi.n	800a072 <__swsetup_r+0x62>
 800a02c:	06da      	lsls	r2, r3, #27
 800a02e:	d407      	bmi.n	800a040 <__swsetup_r+0x30>
 800a030:	2209      	movs	r2, #9
 800a032:	602a      	str	r2, [r5, #0]
 800a034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a038:	81a3      	strh	r3, [r4, #12]
 800a03a:	f04f 30ff 	mov.w	r0, #4294967295
 800a03e:	e033      	b.n	800a0a8 <__swsetup_r+0x98>
 800a040:	0758      	lsls	r0, r3, #29
 800a042:	d512      	bpl.n	800a06a <__swsetup_r+0x5a>
 800a044:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a046:	b141      	cbz	r1, 800a05a <__swsetup_r+0x4a>
 800a048:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a04c:	4299      	cmp	r1, r3
 800a04e:	d002      	beq.n	800a056 <__swsetup_r+0x46>
 800a050:	4628      	mov	r0, r5
 800a052:	f000 ff0d 	bl	800ae70 <_free_r>
 800a056:	2300      	movs	r3, #0
 800a058:	6363      	str	r3, [r4, #52]	@ 0x34
 800a05a:	89a3      	ldrh	r3, [r4, #12]
 800a05c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a060:	81a3      	strh	r3, [r4, #12]
 800a062:	2300      	movs	r3, #0
 800a064:	6063      	str	r3, [r4, #4]
 800a066:	6923      	ldr	r3, [r4, #16]
 800a068:	6023      	str	r3, [r4, #0]
 800a06a:	89a3      	ldrh	r3, [r4, #12]
 800a06c:	f043 0308 	orr.w	r3, r3, #8
 800a070:	81a3      	strh	r3, [r4, #12]
 800a072:	6923      	ldr	r3, [r4, #16]
 800a074:	b94b      	cbnz	r3, 800a08a <__swsetup_r+0x7a>
 800a076:	89a3      	ldrh	r3, [r4, #12]
 800a078:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a07c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a080:	d003      	beq.n	800a08a <__swsetup_r+0x7a>
 800a082:	4621      	mov	r1, r4
 800a084:	4628      	mov	r0, r5
 800a086:	f001 fee1 	bl	800be4c <__smakebuf_r>
 800a08a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a08e:	f013 0201 	ands.w	r2, r3, #1
 800a092:	d00a      	beq.n	800a0aa <__swsetup_r+0x9a>
 800a094:	2200      	movs	r2, #0
 800a096:	60a2      	str	r2, [r4, #8]
 800a098:	6962      	ldr	r2, [r4, #20]
 800a09a:	4252      	negs	r2, r2
 800a09c:	61a2      	str	r2, [r4, #24]
 800a09e:	6922      	ldr	r2, [r4, #16]
 800a0a0:	b942      	cbnz	r2, 800a0b4 <__swsetup_r+0xa4>
 800a0a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a0a6:	d1c5      	bne.n	800a034 <__swsetup_r+0x24>
 800a0a8:	bd38      	pop	{r3, r4, r5, pc}
 800a0aa:	0799      	lsls	r1, r3, #30
 800a0ac:	bf58      	it	pl
 800a0ae:	6962      	ldrpl	r2, [r4, #20]
 800a0b0:	60a2      	str	r2, [r4, #8]
 800a0b2:	e7f4      	b.n	800a09e <__swsetup_r+0x8e>
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	e7f7      	b.n	800a0a8 <__swsetup_r+0x98>
 800a0b8:	2000019c 	.word	0x2000019c

0800a0bc <memset>:
 800a0bc:	4402      	add	r2, r0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d100      	bne.n	800a0c6 <memset+0xa>
 800a0c4:	4770      	bx	lr
 800a0c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a0ca:	e7f9      	b.n	800a0c0 <memset+0x4>

0800a0cc <_localeconv_r>:
 800a0cc:	4800      	ldr	r0, [pc, #0]	@ (800a0d0 <_localeconv_r+0x4>)
 800a0ce:	4770      	bx	lr
 800a0d0:	200002dc 	.word	0x200002dc

0800a0d4 <_close_r>:
 800a0d4:	b538      	push	{r3, r4, r5, lr}
 800a0d6:	4d06      	ldr	r5, [pc, #24]	@ (800a0f0 <_close_r+0x1c>)
 800a0d8:	2300      	movs	r3, #0
 800a0da:	4604      	mov	r4, r0
 800a0dc:	4608      	mov	r0, r1
 800a0de:	602b      	str	r3, [r5, #0]
 800a0e0:	f7f8 fe6c 	bl	8002dbc <_close>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d102      	bne.n	800a0ee <_close_r+0x1a>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	b103      	cbz	r3, 800a0ee <_close_r+0x1a>
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	20005018 	.word	0x20005018

0800a0f4 <_lseek_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	4d07      	ldr	r5, [pc, #28]	@ (800a114 <_lseek_r+0x20>)
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	4608      	mov	r0, r1
 800a0fc:	4611      	mov	r1, r2
 800a0fe:	2200      	movs	r2, #0
 800a100:	602a      	str	r2, [r5, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	f7f8 fe81 	bl	8002e0a <_lseek>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d102      	bne.n	800a112 <_lseek_r+0x1e>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	b103      	cbz	r3, 800a112 <_lseek_r+0x1e>
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	20005018 	.word	0x20005018

0800a118 <_read_r>:
 800a118:	b538      	push	{r3, r4, r5, lr}
 800a11a:	4d07      	ldr	r5, [pc, #28]	@ (800a138 <_read_r+0x20>)
 800a11c:	4604      	mov	r4, r0
 800a11e:	4608      	mov	r0, r1
 800a120:	4611      	mov	r1, r2
 800a122:	2200      	movs	r2, #0
 800a124:	602a      	str	r2, [r5, #0]
 800a126:	461a      	mov	r2, r3
 800a128:	f7f8 fe0f 	bl	8002d4a <_read>
 800a12c:	1c43      	adds	r3, r0, #1
 800a12e:	d102      	bne.n	800a136 <_read_r+0x1e>
 800a130:	682b      	ldr	r3, [r5, #0]
 800a132:	b103      	cbz	r3, 800a136 <_read_r+0x1e>
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	bd38      	pop	{r3, r4, r5, pc}
 800a138:	20005018 	.word	0x20005018

0800a13c <_write_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4d07      	ldr	r5, [pc, #28]	@ (800a15c <_write_r+0x20>)
 800a140:	4604      	mov	r4, r0
 800a142:	4608      	mov	r0, r1
 800a144:	4611      	mov	r1, r2
 800a146:	2200      	movs	r2, #0
 800a148:	602a      	str	r2, [r5, #0]
 800a14a:	461a      	mov	r2, r3
 800a14c:	f7f8 fe1a 	bl	8002d84 <_write>
 800a150:	1c43      	adds	r3, r0, #1
 800a152:	d102      	bne.n	800a15a <_write_r+0x1e>
 800a154:	682b      	ldr	r3, [r5, #0]
 800a156:	b103      	cbz	r3, 800a15a <_write_r+0x1e>
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	bd38      	pop	{r3, r4, r5, pc}
 800a15c:	20005018 	.word	0x20005018

0800a160 <__errno>:
 800a160:	4b01      	ldr	r3, [pc, #4]	@ (800a168 <__errno+0x8>)
 800a162:	6818      	ldr	r0, [r3, #0]
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	2000019c 	.word	0x2000019c

0800a16c <__libc_init_array>:
 800a16c:	b570      	push	{r4, r5, r6, lr}
 800a16e:	4d0d      	ldr	r5, [pc, #52]	@ (800a1a4 <__libc_init_array+0x38>)
 800a170:	4c0d      	ldr	r4, [pc, #52]	@ (800a1a8 <__libc_init_array+0x3c>)
 800a172:	1b64      	subs	r4, r4, r5
 800a174:	10a4      	asrs	r4, r4, #2
 800a176:	2600      	movs	r6, #0
 800a178:	42a6      	cmp	r6, r4
 800a17a:	d109      	bne.n	800a190 <__libc_init_array+0x24>
 800a17c:	4d0b      	ldr	r5, [pc, #44]	@ (800a1ac <__libc_init_array+0x40>)
 800a17e:	4c0c      	ldr	r4, [pc, #48]	@ (800a1b0 <__libc_init_array+0x44>)
 800a180:	f001 ffd2 	bl	800c128 <_init>
 800a184:	1b64      	subs	r4, r4, r5
 800a186:	10a4      	asrs	r4, r4, #2
 800a188:	2600      	movs	r6, #0
 800a18a:	42a6      	cmp	r6, r4
 800a18c:	d105      	bne.n	800a19a <__libc_init_array+0x2e>
 800a18e:	bd70      	pop	{r4, r5, r6, pc}
 800a190:	f855 3b04 	ldr.w	r3, [r5], #4
 800a194:	4798      	blx	r3
 800a196:	3601      	adds	r6, #1
 800a198:	e7ee      	b.n	800a178 <__libc_init_array+0xc>
 800a19a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a19e:	4798      	blx	r3
 800a1a0:	3601      	adds	r6, #1
 800a1a2:	e7f2      	b.n	800a18a <__libc_init_array+0x1e>
 800a1a4:	0800cca8 	.word	0x0800cca8
 800a1a8:	0800cca8 	.word	0x0800cca8
 800a1ac:	0800cca8 	.word	0x0800cca8
 800a1b0:	0800ccac 	.word	0x0800ccac

0800a1b4 <__retarget_lock_init_recursive>:
 800a1b4:	4770      	bx	lr

0800a1b6 <__retarget_lock_acquire_recursive>:
 800a1b6:	4770      	bx	lr

0800a1b8 <__retarget_lock_release_recursive>:
 800a1b8:	4770      	bx	lr

0800a1ba <memcpy>:
 800a1ba:	440a      	add	r2, r1
 800a1bc:	4291      	cmp	r1, r2
 800a1be:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1c2:	d100      	bne.n	800a1c6 <memcpy+0xc>
 800a1c4:	4770      	bx	lr
 800a1c6:	b510      	push	{r4, lr}
 800a1c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1d0:	4291      	cmp	r1, r2
 800a1d2:	d1f9      	bne.n	800a1c8 <memcpy+0xe>
 800a1d4:	bd10      	pop	{r4, pc}

0800a1d6 <quorem>:
 800a1d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1da:	6903      	ldr	r3, [r0, #16]
 800a1dc:	690c      	ldr	r4, [r1, #16]
 800a1de:	42a3      	cmp	r3, r4
 800a1e0:	4607      	mov	r7, r0
 800a1e2:	db7e      	blt.n	800a2e2 <quorem+0x10c>
 800a1e4:	3c01      	subs	r4, #1
 800a1e6:	f101 0814 	add.w	r8, r1, #20
 800a1ea:	00a3      	lsls	r3, r4, #2
 800a1ec:	f100 0514 	add.w	r5, r0, #20
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1f6:	9301      	str	r3, [sp, #4]
 800a1f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a200:	3301      	adds	r3, #1
 800a202:	429a      	cmp	r2, r3
 800a204:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a208:	fbb2 f6f3 	udiv	r6, r2, r3
 800a20c:	d32e      	bcc.n	800a26c <quorem+0x96>
 800a20e:	f04f 0a00 	mov.w	sl, #0
 800a212:	46c4      	mov	ip, r8
 800a214:	46ae      	mov	lr, r5
 800a216:	46d3      	mov	fp, sl
 800a218:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a21c:	b298      	uxth	r0, r3
 800a21e:	fb06 a000 	mla	r0, r6, r0, sl
 800a222:	0c02      	lsrs	r2, r0, #16
 800a224:	0c1b      	lsrs	r3, r3, #16
 800a226:	fb06 2303 	mla	r3, r6, r3, r2
 800a22a:	f8de 2000 	ldr.w	r2, [lr]
 800a22e:	b280      	uxth	r0, r0
 800a230:	b292      	uxth	r2, r2
 800a232:	1a12      	subs	r2, r2, r0
 800a234:	445a      	add	r2, fp
 800a236:	f8de 0000 	ldr.w	r0, [lr]
 800a23a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a23e:	b29b      	uxth	r3, r3
 800a240:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a244:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a248:	b292      	uxth	r2, r2
 800a24a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a24e:	45e1      	cmp	r9, ip
 800a250:	f84e 2b04 	str.w	r2, [lr], #4
 800a254:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a258:	d2de      	bcs.n	800a218 <quorem+0x42>
 800a25a:	9b00      	ldr	r3, [sp, #0]
 800a25c:	58eb      	ldr	r3, [r5, r3]
 800a25e:	b92b      	cbnz	r3, 800a26c <quorem+0x96>
 800a260:	9b01      	ldr	r3, [sp, #4]
 800a262:	3b04      	subs	r3, #4
 800a264:	429d      	cmp	r5, r3
 800a266:	461a      	mov	r2, r3
 800a268:	d32f      	bcc.n	800a2ca <quorem+0xf4>
 800a26a:	613c      	str	r4, [r7, #16]
 800a26c:	4638      	mov	r0, r7
 800a26e:	f001 f979 	bl	800b564 <__mcmp>
 800a272:	2800      	cmp	r0, #0
 800a274:	db25      	blt.n	800a2c2 <quorem+0xec>
 800a276:	4629      	mov	r1, r5
 800a278:	2000      	movs	r0, #0
 800a27a:	f858 2b04 	ldr.w	r2, [r8], #4
 800a27e:	f8d1 c000 	ldr.w	ip, [r1]
 800a282:	fa1f fe82 	uxth.w	lr, r2
 800a286:	fa1f f38c 	uxth.w	r3, ip
 800a28a:	eba3 030e 	sub.w	r3, r3, lr
 800a28e:	4403      	add	r3, r0
 800a290:	0c12      	lsrs	r2, r2, #16
 800a292:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a296:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2a0:	45c1      	cmp	r9, r8
 800a2a2:	f841 3b04 	str.w	r3, [r1], #4
 800a2a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a2aa:	d2e6      	bcs.n	800a27a <quorem+0xa4>
 800a2ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2b4:	b922      	cbnz	r2, 800a2c0 <quorem+0xea>
 800a2b6:	3b04      	subs	r3, #4
 800a2b8:	429d      	cmp	r5, r3
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	d30b      	bcc.n	800a2d6 <quorem+0x100>
 800a2be:	613c      	str	r4, [r7, #16]
 800a2c0:	3601      	adds	r6, #1
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	b003      	add	sp, #12
 800a2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ca:	6812      	ldr	r2, [r2, #0]
 800a2cc:	3b04      	subs	r3, #4
 800a2ce:	2a00      	cmp	r2, #0
 800a2d0:	d1cb      	bne.n	800a26a <quorem+0x94>
 800a2d2:	3c01      	subs	r4, #1
 800a2d4:	e7c6      	b.n	800a264 <quorem+0x8e>
 800a2d6:	6812      	ldr	r2, [r2, #0]
 800a2d8:	3b04      	subs	r3, #4
 800a2da:	2a00      	cmp	r2, #0
 800a2dc:	d1ef      	bne.n	800a2be <quorem+0xe8>
 800a2de:	3c01      	subs	r4, #1
 800a2e0:	e7ea      	b.n	800a2b8 <quorem+0xe2>
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	e7ee      	b.n	800a2c4 <quorem+0xee>
	...

0800a2e8 <_dtoa_r>:
 800a2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ec:	69c7      	ldr	r7, [r0, #28]
 800a2ee:	b099      	sub	sp, #100	@ 0x64
 800a2f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a2f4:	ec55 4b10 	vmov	r4, r5, d0
 800a2f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a2fa:	9109      	str	r1, [sp, #36]	@ 0x24
 800a2fc:	4683      	mov	fp, r0
 800a2fe:	920e      	str	r2, [sp, #56]	@ 0x38
 800a300:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a302:	b97f      	cbnz	r7, 800a324 <_dtoa_r+0x3c>
 800a304:	2010      	movs	r0, #16
 800a306:	f000 fdfd 	bl	800af04 <malloc>
 800a30a:	4602      	mov	r2, r0
 800a30c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a310:	b920      	cbnz	r0, 800a31c <_dtoa_r+0x34>
 800a312:	4ba7      	ldr	r3, [pc, #668]	@ (800a5b0 <_dtoa_r+0x2c8>)
 800a314:	21ef      	movs	r1, #239	@ 0xef
 800a316:	48a7      	ldr	r0, [pc, #668]	@ (800a5b4 <_dtoa_r+0x2cc>)
 800a318:	f001 fe20 	bl	800bf5c <__assert_func>
 800a31c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a320:	6007      	str	r7, [r0, #0]
 800a322:	60c7      	str	r7, [r0, #12]
 800a324:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a328:	6819      	ldr	r1, [r3, #0]
 800a32a:	b159      	cbz	r1, 800a344 <_dtoa_r+0x5c>
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	604a      	str	r2, [r1, #4]
 800a330:	2301      	movs	r3, #1
 800a332:	4093      	lsls	r3, r2
 800a334:	608b      	str	r3, [r1, #8]
 800a336:	4658      	mov	r0, fp
 800a338:	f000 feda 	bl	800b0f0 <_Bfree>
 800a33c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a340:	2200      	movs	r2, #0
 800a342:	601a      	str	r2, [r3, #0]
 800a344:	1e2b      	subs	r3, r5, #0
 800a346:	bfb9      	ittee	lt
 800a348:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a34c:	9303      	strlt	r3, [sp, #12]
 800a34e:	2300      	movge	r3, #0
 800a350:	6033      	strge	r3, [r6, #0]
 800a352:	9f03      	ldr	r7, [sp, #12]
 800a354:	4b98      	ldr	r3, [pc, #608]	@ (800a5b8 <_dtoa_r+0x2d0>)
 800a356:	bfbc      	itt	lt
 800a358:	2201      	movlt	r2, #1
 800a35a:	6032      	strlt	r2, [r6, #0]
 800a35c:	43bb      	bics	r3, r7
 800a35e:	d112      	bne.n	800a386 <_dtoa_r+0x9e>
 800a360:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a362:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a366:	6013      	str	r3, [r2, #0]
 800a368:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a36c:	4323      	orrs	r3, r4
 800a36e:	f000 854d 	beq.w	800ae0c <_dtoa_r+0xb24>
 800a372:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a374:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a5cc <_dtoa_r+0x2e4>
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f000 854f 	beq.w	800ae1c <_dtoa_r+0xb34>
 800a37e:	f10a 0303 	add.w	r3, sl, #3
 800a382:	f000 bd49 	b.w	800ae18 <_dtoa_r+0xb30>
 800a386:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a38a:	2200      	movs	r2, #0
 800a38c:	ec51 0b17 	vmov	r0, r1, d7
 800a390:	2300      	movs	r3, #0
 800a392:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a396:	f7f6 fb9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a39a:	4680      	mov	r8, r0
 800a39c:	b158      	cbz	r0, 800a3b6 <_dtoa_r+0xce>
 800a39e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	6013      	str	r3, [r2, #0]
 800a3a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a3a6:	b113      	cbz	r3, 800a3ae <_dtoa_r+0xc6>
 800a3a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a3aa:	4b84      	ldr	r3, [pc, #528]	@ (800a5bc <_dtoa_r+0x2d4>)
 800a3ac:	6013      	str	r3, [r2, #0]
 800a3ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a5d0 <_dtoa_r+0x2e8>
 800a3b2:	f000 bd33 	b.w	800ae1c <_dtoa_r+0xb34>
 800a3b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a3ba:	aa16      	add	r2, sp, #88	@ 0x58
 800a3bc:	a917      	add	r1, sp, #92	@ 0x5c
 800a3be:	4658      	mov	r0, fp
 800a3c0:	f001 f980 	bl	800b6c4 <__d2b>
 800a3c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a3c8:	4681      	mov	r9, r0
 800a3ca:	2e00      	cmp	r6, #0
 800a3cc:	d077      	beq.n	800a4be <_dtoa_r+0x1d6>
 800a3ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a3d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a3e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a3e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	4b74      	ldr	r3, [pc, #464]	@ (800a5c0 <_dtoa_r+0x2d8>)
 800a3ee:	f7f5 ff53 	bl	8000298 <__aeabi_dsub>
 800a3f2:	a369      	add	r3, pc, #420	@ (adr r3, 800a598 <_dtoa_r+0x2b0>)
 800a3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f8:	f7f6 f906 	bl	8000608 <__aeabi_dmul>
 800a3fc:	a368      	add	r3, pc, #416	@ (adr r3, 800a5a0 <_dtoa_r+0x2b8>)
 800a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a402:	f7f5 ff4b 	bl	800029c <__adddf3>
 800a406:	4604      	mov	r4, r0
 800a408:	4630      	mov	r0, r6
 800a40a:	460d      	mov	r5, r1
 800a40c:	f7f6 f892 	bl	8000534 <__aeabi_i2d>
 800a410:	a365      	add	r3, pc, #404	@ (adr r3, 800a5a8 <_dtoa_r+0x2c0>)
 800a412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a416:	f7f6 f8f7 	bl	8000608 <__aeabi_dmul>
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	4620      	mov	r0, r4
 800a420:	4629      	mov	r1, r5
 800a422:	f7f5 ff3b 	bl	800029c <__adddf3>
 800a426:	4604      	mov	r4, r0
 800a428:	460d      	mov	r5, r1
 800a42a:	f7f6 fb9d 	bl	8000b68 <__aeabi_d2iz>
 800a42e:	2200      	movs	r2, #0
 800a430:	4607      	mov	r7, r0
 800a432:	2300      	movs	r3, #0
 800a434:	4620      	mov	r0, r4
 800a436:	4629      	mov	r1, r5
 800a438:	f7f6 fb58 	bl	8000aec <__aeabi_dcmplt>
 800a43c:	b140      	cbz	r0, 800a450 <_dtoa_r+0x168>
 800a43e:	4638      	mov	r0, r7
 800a440:	f7f6 f878 	bl	8000534 <__aeabi_i2d>
 800a444:	4622      	mov	r2, r4
 800a446:	462b      	mov	r3, r5
 800a448:	f7f6 fb46 	bl	8000ad8 <__aeabi_dcmpeq>
 800a44c:	b900      	cbnz	r0, 800a450 <_dtoa_r+0x168>
 800a44e:	3f01      	subs	r7, #1
 800a450:	2f16      	cmp	r7, #22
 800a452:	d851      	bhi.n	800a4f8 <_dtoa_r+0x210>
 800a454:	4b5b      	ldr	r3, [pc, #364]	@ (800a5c4 <_dtoa_r+0x2dc>)
 800a456:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a462:	f7f6 fb43 	bl	8000aec <__aeabi_dcmplt>
 800a466:	2800      	cmp	r0, #0
 800a468:	d048      	beq.n	800a4fc <_dtoa_r+0x214>
 800a46a:	3f01      	subs	r7, #1
 800a46c:	2300      	movs	r3, #0
 800a46e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a470:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a472:	1b9b      	subs	r3, r3, r6
 800a474:	1e5a      	subs	r2, r3, #1
 800a476:	bf44      	itt	mi
 800a478:	f1c3 0801 	rsbmi	r8, r3, #1
 800a47c:	2300      	movmi	r3, #0
 800a47e:	9208      	str	r2, [sp, #32]
 800a480:	bf54      	ite	pl
 800a482:	f04f 0800 	movpl.w	r8, #0
 800a486:	9308      	strmi	r3, [sp, #32]
 800a488:	2f00      	cmp	r7, #0
 800a48a:	db39      	blt.n	800a500 <_dtoa_r+0x218>
 800a48c:	9b08      	ldr	r3, [sp, #32]
 800a48e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a490:	443b      	add	r3, r7
 800a492:	9308      	str	r3, [sp, #32]
 800a494:	2300      	movs	r3, #0
 800a496:	930a      	str	r3, [sp, #40]	@ 0x28
 800a498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a49a:	2b09      	cmp	r3, #9
 800a49c:	d864      	bhi.n	800a568 <_dtoa_r+0x280>
 800a49e:	2b05      	cmp	r3, #5
 800a4a0:	bfc4      	itt	gt
 800a4a2:	3b04      	subgt	r3, #4
 800a4a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a4a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4a8:	f1a3 0302 	sub.w	r3, r3, #2
 800a4ac:	bfcc      	ite	gt
 800a4ae:	2400      	movgt	r4, #0
 800a4b0:	2401      	movle	r4, #1
 800a4b2:	2b03      	cmp	r3, #3
 800a4b4:	d863      	bhi.n	800a57e <_dtoa_r+0x296>
 800a4b6:	e8df f003 	tbb	[pc, r3]
 800a4ba:	372a      	.short	0x372a
 800a4bc:	5535      	.short	0x5535
 800a4be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a4c2:	441e      	add	r6, r3
 800a4c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a4c8:	2b20      	cmp	r3, #32
 800a4ca:	bfc1      	itttt	gt
 800a4cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a4d0:	409f      	lslgt	r7, r3
 800a4d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a4d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a4da:	bfd6      	itet	le
 800a4dc:	f1c3 0320 	rsble	r3, r3, #32
 800a4e0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a4e4:	fa04 f003 	lslle.w	r0, r4, r3
 800a4e8:	f7f6 f814 	bl	8000514 <__aeabi_ui2d>
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a4f2:	3e01      	subs	r6, #1
 800a4f4:	9214      	str	r2, [sp, #80]	@ 0x50
 800a4f6:	e777      	b.n	800a3e8 <_dtoa_r+0x100>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e7b8      	b.n	800a46e <_dtoa_r+0x186>
 800a4fc:	9012      	str	r0, [sp, #72]	@ 0x48
 800a4fe:	e7b7      	b.n	800a470 <_dtoa_r+0x188>
 800a500:	427b      	negs	r3, r7
 800a502:	930a      	str	r3, [sp, #40]	@ 0x28
 800a504:	2300      	movs	r3, #0
 800a506:	eba8 0807 	sub.w	r8, r8, r7
 800a50a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a50c:	e7c4      	b.n	800a498 <_dtoa_r+0x1b0>
 800a50e:	2300      	movs	r3, #0
 800a510:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a512:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a514:	2b00      	cmp	r3, #0
 800a516:	dc35      	bgt.n	800a584 <_dtoa_r+0x29c>
 800a518:	2301      	movs	r3, #1
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	9307      	str	r3, [sp, #28]
 800a51e:	461a      	mov	r2, r3
 800a520:	920e      	str	r2, [sp, #56]	@ 0x38
 800a522:	e00b      	b.n	800a53c <_dtoa_r+0x254>
 800a524:	2301      	movs	r3, #1
 800a526:	e7f3      	b.n	800a510 <_dtoa_r+0x228>
 800a528:	2300      	movs	r3, #0
 800a52a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a52c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a52e:	18fb      	adds	r3, r7, r3
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	3301      	adds	r3, #1
 800a534:	2b01      	cmp	r3, #1
 800a536:	9307      	str	r3, [sp, #28]
 800a538:	bfb8      	it	lt
 800a53a:	2301      	movlt	r3, #1
 800a53c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a540:	2100      	movs	r1, #0
 800a542:	2204      	movs	r2, #4
 800a544:	f102 0514 	add.w	r5, r2, #20
 800a548:	429d      	cmp	r5, r3
 800a54a:	d91f      	bls.n	800a58c <_dtoa_r+0x2a4>
 800a54c:	6041      	str	r1, [r0, #4]
 800a54e:	4658      	mov	r0, fp
 800a550:	f000 fd8e 	bl	800b070 <_Balloc>
 800a554:	4682      	mov	sl, r0
 800a556:	2800      	cmp	r0, #0
 800a558:	d13c      	bne.n	800a5d4 <_dtoa_r+0x2ec>
 800a55a:	4b1b      	ldr	r3, [pc, #108]	@ (800a5c8 <_dtoa_r+0x2e0>)
 800a55c:	4602      	mov	r2, r0
 800a55e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a562:	e6d8      	b.n	800a316 <_dtoa_r+0x2e>
 800a564:	2301      	movs	r3, #1
 800a566:	e7e0      	b.n	800a52a <_dtoa_r+0x242>
 800a568:	2401      	movs	r4, #1
 800a56a:	2300      	movs	r3, #0
 800a56c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a56e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a570:	f04f 33ff 	mov.w	r3, #4294967295
 800a574:	9300      	str	r3, [sp, #0]
 800a576:	9307      	str	r3, [sp, #28]
 800a578:	2200      	movs	r2, #0
 800a57a:	2312      	movs	r3, #18
 800a57c:	e7d0      	b.n	800a520 <_dtoa_r+0x238>
 800a57e:	2301      	movs	r3, #1
 800a580:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a582:	e7f5      	b.n	800a570 <_dtoa_r+0x288>
 800a584:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	9307      	str	r3, [sp, #28]
 800a58a:	e7d7      	b.n	800a53c <_dtoa_r+0x254>
 800a58c:	3101      	adds	r1, #1
 800a58e:	0052      	lsls	r2, r2, #1
 800a590:	e7d8      	b.n	800a544 <_dtoa_r+0x25c>
 800a592:	bf00      	nop
 800a594:	f3af 8000 	nop.w
 800a598:	636f4361 	.word	0x636f4361
 800a59c:	3fd287a7 	.word	0x3fd287a7
 800a5a0:	8b60c8b3 	.word	0x8b60c8b3
 800a5a4:	3fc68a28 	.word	0x3fc68a28
 800a5a8:	509f79fb 	.word	0x509f79fb
 800a5ac:	3fd34413 	.word	0x3fd34413
 800a5b0:	0800c971 	.word	0x0800c971
 800a5b4:	0800c988 	.word	0x0800c988
 800a5b8:	7ff00000 	.word	0x7ff00000
 800a5bc:	0800c941 	.word	0x0800c941
 800a5c0:	3ff80000 	.word	0x3ff80000
 800a5c4:	0800ca80 	.word	0x0800ca80
 800a5c8:	0800c9e0 	.word	0x0800c9e0
 800a5cc:	0800c96d 	.word	0x0800c96d
 800a5d0:	0800c940 	.word	0x0800c940
 800a5d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a5d8:	6018      	str	r0, [r3, #0]
 800a5da:	9b07      	ldr	r3, [sp, #28]
 800a5dc:	2b0e      	cmp	r3, #14
 800a5de:	f200 80a4 	bhi.w	800a72a <_dtoa_r+0x442>
 800a5e2:	2c00      	cmp	r4, #0
 800a5e4:	f000 80a1 	beq.w	800a72a <_dtoa_r+0x442>
 800a5e8:	2f00      	cmp	r7, #0
 800a5ea:	dd33      	ble.n	800a654 <_dtoa_r+0x36c>
 800a5ec:	4bad      	ldr	r3, [pc, #692]	@ (800a8a4 <_dtoa_r+0x5bc>)
 800a5ee:	f007 020f 	and.w	r2, r7, #15
 800a5f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5f6:	ed93 7b00 	vldr	d7, [r3]
 800a5fa:	05f8      	lsls	r0, r7, #23
 800a5fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a600:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a604:	d516      	bpl.n	800a634 <_dtoa_r+0x34c>
 800a606:	4ba8      	ldr	r3, [pc, #672]	@ (800a8a8 <_dtoa_r+0x5c0>)
 800a608:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a60c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a610:	f7f6 f924 	bl	800085c <__aeabi_ddiv>
 800a614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a618:	f004 040f 	and.w	r4, r4, #15
 800a61c:	2603      	movs	r6, #3
 800a61e:	4da2      	ldr	r5, [pc, #648]	@ (800a8a8 <_dtoa_r+0x5c0>)
 800a620:	b954      	cbnz	r4, 800a638 <_dtoa_r+0x350>
 800a622:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a62a:	f7f6 f917 	bl	800085c <__aeabi_ddiv>
 800a62e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a632:	e028      	b.n	800a686 <_dtoa_r+0x39e>
 800a634:	2602      	movs	r6, #2
 800a636:	e7f2      	b.n	800a61e <_dtoa_r+0x336>
 800a638:	07e1      	lsls	r1, r4, #31
 800a63a:	d508      	bpl.n	800a64e <_dtoa_r+0x366>
 800a63c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a640:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a644:	f7f5 ffe0 	bl	8000608 <__aeabi_dmul>
 800a648:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a64c:	3601      	adds	r6, #1
 800a64e:	1064      	asrs	r4, r4, #1
 800a650:	3508      	adds	r5, #8
 800a652:	e7e5      	b.n	800a620 <_dtoa_r+0x338>
 800a654:	f000 80d2 	beq.w	800a7fc <_dtoa_r+0x514>
 800a658:	427c      	negs	r4, r7
 800a65a:	4b92      	ldr	r3, [pc, #584]	@ (800a8a4 <_dtoa_r+0x5bc>)
 800a65c:	4d92      	ldr	r5, [pc, #584]	@ (800a8a8 <_dtoa_r+0x5c0>)
 800a65e:	f004 020f 	and.w	r2, r4, #15
 800a662:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a66e:	f7f5 ffcb 	bl	8000608 <__aeabi_dmul>
 800a672:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a676:	1124      	asrs	r4, r4, #4
 800a678:	2300      	movs	r3, #0
 800a67a:	2602      	movs	r6, #2
 800a67c:	2c00      	cmp	r4, #0
 800a67e:	f040 80b2 	bne.w	800a7e6 <_dtoa_r+0x4fe>
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1d3      	bne.n	800a62e <_dtoa_r+0x346>
 800a686:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a688:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 80b7 	beq.w	800a800 <_dtoa_r+0x518>
 800a692:	4b86      	ldr	r3, [pc, #536]	@ (800a8ac <_dtoa_r+0x5c4>)
 800a694:	2200      	movs	r2, #0
 800a696:	4620      	mov	r0, r4
 800a698:	4629      	mov	r1, r5
 800a69a:	f7f6 fa27 	bl	8000aec <__aeabi_dcmplt>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	f000 80ae 	beq.w	800a800 <_dtoa_r+0x518>
 800a6a4:	9b07      	ldr	r3, [sp, #28]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f000 80aa 	beq.w	800a800 <_dtoa_r+0x518>
 800a6ac:	9b00      	ldr	r3, [sp, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	dd37      	ble.n	800a722 <_dtoa_r+0x43a>
 800a6b2:	1e7b      	subs	r3, r7, #1
 800a6b4:	9304      	str	r3, [sp, #16]
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	4b7d      	ldr	r3, [pc, #500]	@ (800a8b0 <_dtoa_r+0x5c8>)
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	4629      	mov	r1, r5
 800a6be:	f7f5 ffa3 	bl	8000608 <__aeabi_dmul>
 800a6c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6c6:	9c00      	ldr	r4, [sp, #0]
 800a6c8:	3601      	adds	r6, #1
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	f7f5 ff32 	bl	8000534 <__aeabi_i2d>
 800a6d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6d4:	f7f5 ff98 	bl	8000608 <__aeabi_dmul>
 800a6d8:	4b76      	ldr	r3, [pc, #472]	@ (800a8b4 <_dtoa_r+0x5cc>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f7f5 fdde 	bl	800029c <__adddf3>
 800a6e0:	4605      	mov	r5, r0
 800a6e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a6e6:	2c00      	cmp	r4, #0
 800a6e8:	f040 808d 	bne.w	800a806 <_dtoa_r+0x51e>
 800a6ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6f0:	4b71      	ldr	r3, [pc, #452]	@ (800a8b8 <_dtoa_r+0x5d0>)
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f7f5 fdd0 	bl	8000298 <__aeabi_dsub>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a700:	462a      	mov	r2, r5
 800a702:	4633      	mov	r3, r6
 800a704:	f7f6 fa10 	bl	8000b28 <__aeabi_dcmpgt>
 800a708:	2800      	cmp	r0, #0
 800a70a:	f040 828b 	bne.w	800ac24 <_dtoa_r+0x93c>
 800a70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a712:	462a      	mov	r2, r5
 800a714:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a718:	f7f6 f9e8 	bl	8000aec <__aeabi_dcmplt>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	f040 8128 	bne.w	800a972 <_dtoa_r+0x68a>
 800a722:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a726:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a72a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f2c0 815a 	blt.w	800a9e6 <_dtoa_r+0x6fe>
 800a732:	2f0e      	cmp	r7, #14
 800a734:	f300 8157 	bgt.w	800a9e6 <_dtoa_r+0x6fe>
 800a738:	4b5a      	ldr	r3, [pc, #360]	@ (800a8a4 <_dtoa_r+0x5bc>)
 800a73a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a73e:	ed93 7b00 	vldr	d7, [r3]
 800a742:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a744:	2b00      	cmp	r3, #0
 800a746:	ed8d 7b00 	vstr	d7, [sp]
 800a74a:	da03      	bge.n	800a754 <_dtoa_r+0x46c>
 800a74c:	9b07      	ldr	r3, [sp, #28]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f340 8101 	ble.w	800a956 <_dtoa_r+0x66e>
 800a754:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a758:	4656      	mov	r6, sl
 800a75a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a75e:	4620      	mov	r0, r4
 800a760:	4629      	mov	r1, r5
 800a762:	f7f6 f87b 	bl	800085c <__aeabi_ddiv>
 800a766:	f7f6 f9ff 	bl	8000b68 <__aeabi_d2iz>
 800a76a:	4680      	mov	r8, r0
 800a76c:	f7f5 fee2 	bl	8000534 <__aeabi_i2d>
 800a770:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a774:	f7f5 ff48 	bl	8000608 <__aeabi_dmul>
 800a778:	4602      	mov	r2, r0
 800a77a:	460b      	mov	r3, r1
 800a77c:	4620      	mov	r0, r4
 800a77e:	4629      	mov	r1, r5
 800a780:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a784:	f7f5 fd88 	bl	8000298 <__aeabi_dsub>
 800a788:	f806 4b01 	strb.w	r4, [r6], #1
 800a78c:	9d07      	ldr	r5, [sp, #28]
 800a78e:	eba6 040a 	sub.w	r4, r6, sl
 800a792:	42a5      	cmp	r5, r4
 800a794:	4602      	mov	r2, r0
 800a796:	460b      	mov	r3, r1
 800a798:	f040 8117 	bne.w	800a9ca <_dtoa_r+0x6e2>
 800a79c:	f7f5 fd7e 	bl	800029c <__adddf3>
 800a7a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	460d      	mov	r5, r1
 800a7a8:	f7f6 f9be 	bl	8000b28 <__aeabi_dcmpgt>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	f040 80f9 	bne.w	800a9a4 <_dtoa_r+0x6bc>
 800a7b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	f7f6 f98d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7be:	b118      	cbz	r0, 800a7c8 <_dtoa_r+0x4e0>
 800a7c0:	f018 0f01 	tst.w	r8, #1
 800a7c4:	f040 80ee 	bne.w	800a9a4 <_dtoa_r+0x6bc>
 800a7c8:	4649      	mov	r1, r9
 800a7ca:	4658      	mov	r0, fp
 800a7cc:	f000 fc90 	bl	800b0f0 <_Bfree>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	7033      	strb	r3, [r6, #0]
 800a7d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a7d6:	3701      	adds	r7, #1
 800a7d8:	601f      	str	r7, [r3, #0]
 800a7da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f000 831d 	beq.w	800ae1c <_dtoa_r+0xb34>
 800a7e2:	601e      	str	r6, [r3, #0]
 800a7e4:	e31a      	b.n	800ae1c <_dtoa_r+0xb34>
 800a7e6:	07e2      	lsls	r2, r4, #31
 800a7e8:	d505      	bpl.n	800a7f6 <_dtoa_r+0x50e>
 800a7ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a7ee:	f7f5 ff0b 	bl	8000608 <__aeabi_dmul>
 800a7f2:	3601      	adds	r6, #1
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	1064      	asrs	r4, r4, #1
 800a7f8:	3508      	adds	r5, #8
 800a7fa:	e73f      	b.n	800a67c <_dtoa_r+0x394>
 800a7fc:	2602      	movs	r6, #2
 800a7fe:	e742      	b.n	800a686 <_dtoa_r+0x39e>
 800a800:	9c07      	ldr	r4, [sp, #28]
 800a802:	9704      	str	r7, [sp, #16]
 800a804:	e761      	b.n	800a6ca <_dtoa_r+0x3e2>
 800a806:	4b27      	ldr	r3, [pc, #156]	@ (800a8a4 <_dtoa_r+0x5bc>)
 800a808:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a80a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a80e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a812:	4454      	add	r4, sl
 800a814:	2900      	cmp	r1, #0
 800a816:	d053      	beq.n	800a8c0 <_dtoa_r+0x5d8>
 800a818:	4928      	ldr	r1, [pc, #160]	@ (800a8bc <_dtoa_r+0x5d4>)
 800a81a:	2000      	movs	r0, #0
 800a81c:	f7f6 f81e 	bl	800085c <__aeabi_ddiv>
 800a820:	4633      	mov	r3, r6
 800a822:	462a      	mov	r2, r5
 800a824:	f7f5 fd38 	bl	8000298 <__aeabi_dsub>
 800a828:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a82c:	4656      	mov	r6, sl
 800a82e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a832:	f7f6 f999 	bl	8000b68 <__aeabi_d2iz>
 800a836:	4605      	mov	r5, r0
 800a838:	f7f5 fe7c 	bl	8000534 <__aeabi_i2d>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a844:	f7f5 fd28 	bl	8000298 <__aeabi_dsub>
 800a848:	3530      	adds	r5, #48	@ 0x30
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a852:	f806 5b01 	strb.w	r5, [r6], #1
 800a856:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a85a:	f7f6 f947 	bl	8000aec <__aeabi_dcmplt>
 800a85e:	2800      	cmp	r0, #0
 800a860:	d171      	bne.n	800a946 <_dtoa_r+0x65e>
 800a862:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a866:	4911      	ldr	r1, [pc, #68]	@ (800a8ac <_dtoa_r+0x5c4>)
 800a868:	2000      	movs	r0, #0
 800a86a:	f7f5 fd15 	bl	8000298 <__aeabi_dsub>
 800a86e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a872:	f7f6 f93b 	bl	8000aec <__aeabi_dcmplt>
 800a876:	2800      	cmp	r0, #0
 800a878:	f040 8095 	bne.w	800a9a6 <_dtoa_r+0x6be>
 800a87c:	42a6      	cmp	r6, r4
 800a87e:	f43f af50 	beq.w	800a722 <_dtoa_r+0x43a>
 800a882:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a886:	4b0a      	ldr	r3, [pc, #40]	@ (800a8b0 <_dtoa_r+0x5c8>)
 800a888:	2200      	movs	r2, #0
 800a88a:	f7f5 febd 	bl	8000608 <__aeabi_dmul>
 800a88e:	4b08      	ldr	r3, [pc, #32]	@ (800a8b0 <_dtoa_r+0x5c8>)
 800a890:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a894:	2200      	movs	r2, #0
 800a896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a89a:	f7f5 feb5 	bl	8000608 <__aeabi_dmul>
 800a89e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8a2:	e7c4      	b.n	800a82e <_dtoa_r+0x546>
 800a8a4:	0800ca80 	.word	0x0800ca80
 800a8a8:	0800ca58 	.word	0x0800ca58
 800a8ac:	3ff00000 	.word	0x3ff00000
 800a8b0:	40240000 	.word	0x40240000
 800a8b4:	401c0000 	.word	0x401c0000
 800a8b8:	40140000 	.word	0x40140000
 800a8bc:	3fe00000 	.word	0x3fe00000
 800a8c0:	4631      	mov	r1, r6
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	f7f5 fea0 	bl	8000608 <__aeabi_dmul>
 800a8c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a8cc:	9415      	str	r4, [sp, #84]	@ 0x54
 800a8ce:	4656      	mov	r6, sl
 800a8d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8d4:	f7f6 f948 	bl	8000b68 <__aeabi_d2iz>
 800a8d8:	4605      	mov	r5, r0
 800a8da:	f7f5 fe2b 	bl	8000534 <__aeabi_i2d>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8e6:	f7f5 fcd7 	bl	8000298 <__aeabi_dsub>
 800a8ea:	3530      	adds	r5, #48	@ 0x30
 800a8ec:	f806 5b01 	strb.w	r5, [r6], #1
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	42a6      	cmp	r6, r4
 800a8f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8fa:	f04f 0200 	mov.w	r2, #0
 800a8fe:	d124      	bne.n	800a94a <_dtoa_r+0x662>
 800a900:	4bac      	ldr	r3, [pc, #688]	@ (800abb4 <_dtoa_r+0x8cc>)
 800a902:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a906:	f7f5 fcc9 	bl	800029c <__adddf3>
 800a90a:	4602      	mov	r2, r0
 800a90c:	460b      	mov	r3, r1
 800a90e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a912:	f7f6 f909 	bl	8000b28 <__aeabi_dcmpgt>
 800a916:	2800      	cmp	r0, #0
 800a918:	d145      	bne.n	800a9a6 <_dtoa_r+0x6be>
 800a91a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a91e:	49a5      	ldr	r1, [pc, #660]	@ (800abb4 <_dtoa_r+0x8cc>)
 800a920:	2000      	movs	r0, #0
 800a922:	f7f5 fcb9 	bl	8000298 <__aeabi_dsub>
 800a926:	4602      	mov	r2, r0
 800a928:	460b      	mov	r3, r1
 800a92a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a92e:	f7f6 f8dd 	bl	8000aec <__aeabi_dcmplt>
 800a932:	2800      	cmp	r0, #0
 800a934:	f43f aef5 	beq.w	800a722 <_dtoa_r+0x43a>
 800a938:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a93a:	1e73      	subs	r3, r6, #1
 800a93c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a93e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a942:	2b30      	cmp	r3, #48	@ 0x30
 800a944:	d0f8      	beq.n	800a938 <_dtoa_r+0x650>
 800a946:	9f04      	ldr	r7, [sp, #16]
 800a948:	e73e      	b.n	800a7c8 <_dtoa_r+0x4e0>
 800a94a:	4b9b      	ldr	r3, [pc, #620]	@ (800abb8 <_dtoa_r+0x8d0>)
 800a94c:	f7f5 fe5c 	bl	8000608 <__aeabi_dmul>
 800a950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a954:	e7bc      	b.n	800a8d0 <_dtoa_r+0x5e8>
 800a956:	d10c      	bne.n	800a972 <_dtoa_r+0x68a>
 800a958:	4b98      	ldr	r3, [pc, #608]	@ (800abbc <_dtoa_r+0x8d4>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a960:	f7f5 fe52 	bl	8000608 <__aeabi_dmul>
 800a964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a968:	f7f6 f8d4 	bl	8000b14 <__aeabi_dcmpge>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	f000 8157 	beq.w	800ac20 <_dtoa_r+0x938>
 800a972:	2400      	movs	r4, #0
 800a974:	4625      	mov	r5, r4
 800a976:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a978:	43db      	mvns	r3, r3
 800a97a:	9304      	str	r3, [sp, #16]
 800a97c:	4656      	mov	r6, sl
 800a97e:	2700      	movs	r7, #0
 800a980:	4621      	mov	r1, r4
 800a982:	4658      	mov	r0, fp
 800a984:	f000 fbb4 	bl	800b0f0 <_Bfree>
 800a988:	2d00      	cmp	r5, #0
 800a98a:	d0dc      	beq.n	800a946 <_dtoa_r+0x65e>
 800a98c:	b12f      	cbz	r7, 800a99a <_dtoa_r+0x6b2>
 800a98e:	42af      	cmp	r7, r5
 800a990:	d003      	beq.n	800a99a <_dtoa_r+0x6b2>
 800a992:	4639      	mov	r1, r7
 800a994:	4658      	mov	r0, fp
 800a996:	f000 fbab 	bl	800b0f0 <_Bfree>
 800a99a:	4629      	mov	r1, r5
 800a99c:	4658      	mov	r0, fp
 800a99e:	f000 fba7 	bl	800b0f0 <_Bfree>
 800a9a2:	e7d0      	b.n	800a946 <_dtoa_r+0x65e>
 800a9a4:	9704      	str	r7, [sp, #16]
 800a9a6:	4633      	mov	r3, r6
 800a9a8:	461e      	mov	r6, r3
 800a9aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9ae:	2a39      	cmp	r2, #57	@ 0x39
 800a9b0:	d107      	bne.n	800a9c2 <_dtoa_r+0x6da>
 800a9b2:	459a      	cmp	sl, r3
 800a9b4:	d1f8      	bne.n	800a9a8 <_dtoa_r+0x6c0>
 800a9b6:	9a04      	ldr	r2, [sp, #16]
 800a9b8:	3201      	adds	r2, #1
 800a9ba:	9204      	str	r2, [sp, #16]
 800a9bc:	2230      	movs	r2, #48	@ 0x30
 800a9be:	f88a 2000 	strb.w	r2, [sl]
 800a9c2:	781a      	ldrb	r2, [r3, #0]
 800a9c4:	3201      	adds	r2, #1
 800a9c6:	701a      	strb	r2, [r3, #0]
 800a9c8:	e7bd      	b.n	800a946 <_dtoa_r+0x65e>
 800a9ca:	4b7b      	ldr	r3, [pc, #492]	@ (800abb8 <_dtoa_r+0x8d0>)
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f7f5 fe1b 	bl	8000608 <__aeabi_dmul>
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	460d      	mov	r5, r1
 800a9da:	f7f6 f87d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	f43f aebb 	beq.w	800a75a <_dtoa_r+0x472>
 800a9e4:	e6f0      	b.n	800a7c8 <_dtoa_r+0x4e0>
 800a9e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a9e8:	2a00      	cmp	r2, #0
 800a9ea:	f000 80db 	beq.w	800aba4 <_dtoa_r+0x8bc>
 800a9ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9f0:	2a01      	cmp	r2, #1
 800a9f2:	f300 80bf 	bgt.w	800ab74 <_dtoa_r+0x88c>
 800a9f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a9f8:	2a00      	cmp	r2, #0
 800a9fa:	f000 80b7 	beq.w	800ab6c <_dtoa_r+0x884>
 800a9fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800aa02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aa04:	4646      	mov	r6, r8
 800aa06:	9a08      	ldr	r2, [sp, #32]
 800aa08:	2101      	movs	r1, #1
 800aa0a:	441a      	add	r2, r3
 800aa0c:	4658      	mov	r0, fp
 800aa0e:	4498      	add	r8, r3
 800aa10:	9208      	str	r2, [sp, #32]
 800aa12:	f000 fc21 	bl	800b258 <__i2b>
 800aa16:	4605      	mov	r5, r0
 800aa18:	b15e      	cbz	r6, 800aa32 <_dtoa_r+0x74a>
 800aa1a:	9b08      	ldr	r3, [sp, #32]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	dd08      	ble.n	800aa32 <_dtoa_r+0x74a>
 800aa20:	42b3      	cmp	r3, r6
 800aa22:	9a08      	ldr	r2, [sp, #32]
 800aa24:	bfa8      	it	ge
 800aa26:	4633      	movge	r3, r6
 800aa28:	eba8 0803 	sub.w	r8, r8, r3
 800aa2c:	1af6      	subs	r6, r6, r3
 800aa2e:	1ad3      	subs	r3, r2, r3
 800aa30:	9308      	str	r3, [sp, #32]
 800aa32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa34:	b1f3      	cbz	r3, 800aa74 <_dtoa_r+0x78c>
 800aa36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f000 80b7 	beq.w	800abac <_dtoa_r+0x8c4>
 800aa3e:	b18c      	cbz	r4, 800aa64 <_dtoa_r+0x77c>
 800aa40:	4629      	mov	r1, r5
 800aa42:	4622      	mov	r2, r4
 800aa44:	4658      	mov	r0, fp
 800aa46:	f000 fcc7 	bl	800b3d8 <__pow5mult>
 800aa4a:	464a      	mov	r2, r9
 800aa4c:	4601      	mov	r1, r0
 800aa4e:	4605      	mov	r5, r0
 800aa50:	4658      	mov	r0, fp
 800aa52:	f000 fc17 	bl	800b284 <__multiply>
 800aa56:	4649      	mov	r1, r9
 800aa58:	9004      	str	r0, [sp, #16]
 800aa5a:	4658      	mov	r0, fp
 800aa5c:	f000 fb48 	bl	800b0f0 <_Bfree>
 800aa60:	9b04      	ldr	r3, [sp, #16]
 800aa62:	4699      	mov	r9, r3
 800aa64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa66:	1b1a      	subs	r2, r3, r4
 800aa68:	d004      	beq.n	800aa74 <_dtoa_r+0x78c>
 800aa6a:	4649      	mov	r1, r9
 800aa6c:	4658      	mov	r0, fp
 800aa6e:	f000 fcb3 	bl	800b3d8 <__pow5mult>
 800aa72:	4681      	mov	r9, r0
 800aa74:	2101      	movs	r1, #1
 800aa76:	4658      	mov	r0, fp
 800aa78:	f000 fbee 	bl	800b258 <__i2b>
 800aa7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa7e:	4604      	mov	r4, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 81cf 	beq.w	800ae24 <_dtoa_r+0xb3c>
 800aa86:	461a      	mov	r2, r3
 800aa88:	4601      	mov	r1, r0
 800aa8a:	4658      	mov	r0, fp
 800aa8c:	f000 fca4 	bl	800b3d8 <__pow5mult>
 800aa90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	4604      	mov	r4, r0
 800aa96:	f300 8095 	bgt.w	800abc4 <_dtoa_r+0x8dc>
 800aa9a:	9b02      	ldr	r3, [sp, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f040 8087 	bne.w	800abb0 <_dtoa_r+0x8c8>
 800aaa2:	9b03      	ldr	r3, [sp, #12]
 800aaa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f040 8089 	bne.w	800abc0 <_dtoa_r+0x8d8>
 800aaae:	9b03      	ldr	r3, [sp, #12]
 800aab0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aab4:	0d1b      	lsrs	r3, r3, #20
 800aab6:	051b      	lsls	r3, r3, #20
 800aab8:	b12b      	cbz	r3, 800aac6 <_dtoa_r+0x7de>
 800aaba:	9b08      	ldr	r3, [sp, #32]
 800aabc:	3301      	adds	r3, #1
 800aabe:	9308      	str	r3, [sp, #32]
 800aac0:	f108 0801 	add.w	r8, r8, #1
 800aac4:	2301      	movs	r3, #1
 800aac6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aac8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f000 81b0 	beq.w	800ae30 <_dtoa_r+0xb48>
 800aad0:	6923      	ldr	r3, [r4, #16]
 800aad2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aad6:	6918      	ldr	r0, [r3, #16]
 800aad8:	f000 fb72 	bl	800b1c0 <__hi0bits>
 800aadc:	f1c0 0020 	rsb	r0, r0, #32
 800aae0:	9b08      	ldr	r3, [sp, #32]
 800aae2:	4418      	add	r0, r3
 800aae4:	f010 001f 	ands.w	r0, r0, #31
 800aae8:	d077      	beq.n	800abda <_dtoa_r+0x8f2>
 800aaea:	f1c0 0320 	rsb	r3, r0, #32
 800aaee:	2b04      	cmp	r3, #4
 800aaf0:	dd6b      	ble.n	800abca <_dtoa_r+0x8e2>
 800aaf2:	9b08      	ldr	r3, [sp, #32]
 800aaf4:	f1c0 001c 	rsb	r0, r0, #28
 800aaf8:	4403      	add	r3, r0
 800aafa:	4480      	add	r8, r0
 800aafc:	4406      	add	r6, r0
 800aafe:	9308      	str	r3, [sp, #32]
 800ab00:	f1b8 0f00 	cmp.w	r8, #0
 800ab04:	dd05      	ble.n	800ab12 <_dtoa_r+0x82a>
 800ab06:	4649      	mov	r1, r9
 800ab08:	4642      	mov	r2, r8
 800ab0a:	4658      	mov	r0, fp
 800ab0c:	f000 fcbe 	bl	800b48c <__lshift>
 800ab10:	4681      	mov	r9, r0
 800ab12:	9b08      	ldr	r3, [sp, #32]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	dd05      	ble.n	800ab24 <_dtoa_r+0x83c>
 800ab18:	4621      	mov	r1, r4
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	4658      	mov	r0, fp
 800ab1e:	f000 fcb5 	bl	800b48c <__lshift>
 800ab22:	4604      	mov	r4, r0
 800ab24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d059      	beq.n	800abde <_dtoa_r+0x8f6>
 800ab2a:	4621      	mov	r1, r4
 800ab2c:	4648      	mov	r0, r9
 800ab2e:	f000 fd19 	bl	800b564 <__mcmp>
 800ab32:	2800      	cmp	r0, #0
 800ab34:	da53      	bge.n	800abde <_dtoa_r+0x8f6>
 800ab36:	1e7b      	subs	r3, r7, #1
 800ab38:	9304      	str	r3, [sp, #16]
 800ab3a:	4649      	mov	r1, r9
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	220a      	movs	r2, #10
 800ab40:	4658      	mov	r0, fp
 800ab42:	f000 faf7 	bl	800b134 <__multadd>
 800ab46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab48:	4681      	mov	r9, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f000 8172 	beq.w	800ae34 <_dtoa_r+0xb4c>
 800ab50:	2300      	movs	r3, #0
 800ab52:	4629      	mov	r1, r5
 800ab54:	220a      	movs	r2, #10
 800ab56:	4658      	mov	r0, fp
 800ab58:	f000 faec 	bl	800b134 <__multadd>
 800ab5c:	9b00      	ldr	r3, [sp, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	4605      	mov	r5, r0
 800ab62:	dc67      	bgt.n	800ac34 <_dtoa_r+0x94c>
 800ab64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	dc41      	bgt.n	800abee <_dtoa_r+0x906>
 800ab6a:	e063      	b.n	800ac34 <_dtoa_r+0x94c>
 800ab6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ab6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ab72:	e746      	b.n	800aa02 <_dtoa_r+0x71a>
 800ab74:	9b07      	ldr	r3, [sp, #28]
 800ab76:	1e5c      	subs	r4, r3, #1
 800ab78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab7a:	42a3      	cmp	r3, r4
 800ab7c:	bfbf      	itttt	lt
 800ab7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ab80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ab82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ab84:	1ae3      	sublt	r3, r4, r3
 800ab86:	bfb4      	ite	lt
 800ab88:	18d2      	addlt	r2, r2, r3
 800ab8a:	1b1c      	subge	r4, r3, r4
 800ab8c:	9b07      	ldr	r3, [sp, #28]
 800ab8e:	bfbc      	itt	lt
 800ab90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ab92:	2400      	movlt	r4, #0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	bfb5      	itete	lt
 800ab98:	eba8 0603 	sublt.w	r6, r8, r3
 800ab9c:	9b07      	ldrge	r3, [sp, #28]
 800ab9e:	2300      	movlt	r3, #0
 800aba0:	4646      	movge	r6, r8
 800aba2:	e730      	b.n	800aa06 <_dtoa_r+0x71e>
 800aba4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aba6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aba8:	4646      	mov	r6, r8
 800abaa:	e735      	b.n	800aa18 <_dtoa_r+0x730>
 800abac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800abae:	e75c      	b.n	800aa6a <_dtoa_r+0x782>
 800abb0:	2300      	movs	r3, #0
 800abb2:	e788      	b.n	800aac6 <_dtoa_r+0x7de>
 800abb4:	3fe00000 	.word	0x3fe00000
 800abb8:	40240000 	.word	0x40240000
 800abbc:	40140000 	.word	0x40140000
 800abc0:	9b02      	ldr	r3, [sp, #8]
 800abc2:	e780      	b.n	800aac6 <_dtoa_r+0x7de>
 800abc4:	2300      	movs	r3, #0
 800abc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800abc8:	e782      	b.n	800aad0 <_dtoa_r+0x7e8>
 800abca:	d099      	beq.n	800ab00 <_dtoa_r+0x818>
 800abcc:	9a08      	ldr	r2, [sp, #32]
 800abce:	331c      	adds	r3, #28
 800abd0:	441a      	add	r2, r3
 800abd2:	4498      	add	r8, r3
 800abd4:	441e      	add	r6, r3
 800abd6:	9208      	str	r2, [sp, #32]
 800abd8:	e792      	b.n	800ab00 <_dtoa_r+0x818>
 800abda:	4603      	mov	r3, r0
 800abdc:	e7f6      	b.n	800abcc <_dtoa_r+0x8e4>
 800abde:	9b07      	ldr	r3, [sp, #28]
 800abe0:	9704      	str	r7, [sp, #16]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	dc20      	bgt.n	800ac28 <_dtoa_r+0x940>
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abea:	2b02      	cmp	r3, #2
 800abec:	dd1e      	ble.n	800ac2c <_dtoa_r+0x944>
 800abee:	9b00      	ldr	r3, [sp, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f47f aec0 	bne.w	800a976 <_dtoa_r+0x68e>
 800abf6:	4621      	mov	r1, r4
 800abf8:	2205      	movs	r2, #5
 800abfa:	4658      	mov	r0, fp
 800abfc:	f000 fa9a 	bl	800b134 <__multadd>
 800ac00:	4601      	mov	r1, r0
 800ac02:	4604      	mov	r4, r0
 800ac04:	4648      	mov	r0, r9
 800ac06:	f000 fcad 	bl	800b564 <__mcmp>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	f77f aeb3 	ble.w	800a976 <_dtoa_r+0x68e>
 800ac10:	4656      	mov	r6, sl
 800ac12:	2331      	movs	r3, #49	@ 0x31
 800ac14:	f806 3b01 	strb.w	r3, [r6], #1
 800ac18:	9b04      	ldr	r3, [sp, #16]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	9304      	str	r3, [sp, #16]
 800ac1e:	e6ae      	b.n	800a97e <_dtoa_r+0x696>
 800ac20:	9c07      	ldr	r4, [sp, #28]
 800ac22:	9704      	str	r7, [sp, #16]
 800ac24:	4625      	mov	r5, r4
 800ac26:	e7f3      	b.n	800ac10 <_dtoa_r+0x928>
 800ac28:	9b07      	ldr	r3, [sp, #28]
 800ac2a:	9300      	str	r3, [sp, #0]
 800ac2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	f000 8104 	beq.w	800ae3c <_dtoa_r+0xb54>
 800ac34:	2e00      	cmp	r6, #0
 800ac36:	dd05      	ble.n	800ac44 <_dtoa_r+0x95c>
 800ac38:	4629      	mov	r1, r5
 800ac3a:	4632      	mov	r2, r6
 800ac3c:	4658      	mov	r0, fp
 800ac3e:	f000 fc25 	bl	800b48c <__lshift>
 800ac42:	4605      	mov	r5, r0
 800ac44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d05a      	beq.n	800ad00 <_dtoa_r+0xa18>
 800ac4a:	6869      	ldr	r1, [r5, #4]
 800ac4c:	4658      	mov	r0, fp
 800ac4e:	f000 fa0f 	bl	800b070 <_Balloc>
 800ac52:	4606      	mov	r6, r0
 800ac54:	b928      	cbnz	r0, 800ac62 <_dtoa_r+0x97a>
 800ac56:	4b84      	ldr	r3, [pc, #528]	@ (800ae68 <_dtoa_r+0xb80>)
 800ac58:	4602      	mov	r2, r0
 800ac5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ac5e:	f7ff bb5a 	b.w	800a316 <_dtoa_r+0x2e>
 800ac62:	692a      	ldr	r2, [r5, #16]
 800ac64:	3202      	adds	r2, #2
 800ac66:	0092      	lsls	r2, r2, #2
 800ac68:	f105 010c 	add.w	r1, r5, #12
 800ac6c:	300c      	adds	r0, #12
 800ac6e:	f7ff faa4 	bl	800a1ba <memcpy>
 800ac72:	2201      	movs	r2, #1
 800ac74:	4631      	mov	r1, r6
 800ac76:	4658      	mov	r0, fp
 800ac78:	f000 fc08 	bl	800b48c <__lshift>
 800ac7c:	f10a 0301 	add.w	r3, sl, #1
 800ac80:	9307      	str	r3, [sp, #28]
 800ac82:	9b00      	ldr	r3, [sp, #0]
 800ac84:	4453      	add	r3, sl
 800ac86:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac88:	9b02      	ldr	r3, [sp, #8]
 800ac8a:	f003 0301 	and.w	r3, r3, #1
 800ac8e:	462f      	mov	r7, r5
 800ac90:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac92:	4605      	mov	r5, r0
 800ac94:	9b07      	ldr	r3, [sp, #28]
 800ac96:	4621      	mov	r1, r4
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	4648      	mov	r0, r9
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	f7ff fa9a 	bl	800a1d6 <quorem>
 800aca2:	4639      	mov	r1, r7
 800aca4:	9002      	str	r0, [sp, #8]
 800aca6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800acaa:	4648      	mov	r0, r9
 800acac:	f000 fc5a 	bl	800b564 <__mcmp>
 800acb0:	462a      	mov	r2, r5
 800acb2:	9008      	str	r0, [sp, #32]
 800acb4:	4621      	mov	r1, r4
 800acb6:	4658      	mov	r0, fp
 800acb8:	f000 fc70 	bl	800b59c <__mdiff>
 800acbc:	68c2      	ldr	r2, [r0, #12]
 800acbe:	4606      	mov	r6, r0
 800acc0:	bb02      	cbnz	r2, 800ad04 <_dtoa_r+0xa1c>
 800acc2:	4601      	mov	r1, r0
 800acc4:	4648      	mov	r0, r9
 800acc6:	f000 fc4d 	bl	800b564 <__mcmp>
 800acca:	4602      	mov	r2, r0
 800accc:	4631      	mov	r1, r6
 800acce:	4658      	mov	r0, fp
 800acd0:	920e      	str	r2, [sp, #56]	@ 0x38
 800acd2:	f000 fa0d 	bl	800b0f0 <_Bfree>
 800acd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acda:	9e07      	ldr	r6, [sp, #28]
 800acdc:	ea43 0102 	orr.w	r1, r3, r2
 800ace0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ace2:	4319      	orrs	r1, r3
 800ace4:	d110      	bne.n	800ad08 <_dtoa_r+0xa20>
 800ace6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800acea:	d029      	beq.n	800ad40 <_dtoa_r+0xa58>
 800acec:	9b08      	ldr	r3, [sp, #32]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	dd02      	ble.n	800acf8 <_dtoa_r+0xa10>
 800acf2:	9b02      	ldr	r3, [sp, #8]
 800acf4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800acf8:	9b00      	ldr	r3, [sp, #0]
 800acfa:	f883 8000 	strb.w	r8, [r3]
 800acfe:	e63f      	b.n	800a980 <_dtoa_r+0x698>
 800ad00:	4628      	mov	r0, r5
 800ad02:	e7bb      	b.n	800ac7c <_dtoa_r+0x994>
 800ad04:	2201      	movs	r2, #1
 800ad06:	e7e1      	b.n	800accc <_dtoa_r+0x9e4>
 800ad08:	9b08      	ldr	r3, [sp, #32]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	db04      	blt.n	800ad18 <_dtoa_r+0xa30>
 800ad0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad10:	430b      	orrs	r3, r1
 800ad12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad14:	430b      	orrs	r3, r1
 800ad16:	d120      	bne.n	800ad5a <_dtoa_r+0xa72>
 800ad18:	2a00      	cmp	r2, #0
 800ad1a:	dded      	ble.n	800acf8 <_dtoa_r+0xa10>
 800ad1c:	4649      	mov	r1, r9
 800ad1e:	2201      	movs	r2, #1
 800ad20:	4658      	mov	r0, fp
 800ad22:	f000 fbb3 	bl	800b48c <__lshift>
 800ad26:	4621      	mov	r1, r4
 800ad28:	4681      	mov	r9, r0
 800ad2a:	f000 fc1b 	bl	800b564 <__mcmp>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	dc03      	bgt.n	800ad3a <_dtoa_r+0xa52>
 800ad32:	d1e1      	bne.n	800acf8 <_dtoa_r+0xa10>
 800ad34:	f018 0f01 	tst.w	r8, #1
 800ad38:	d0de      	beq.n	800acf8 <_dtoa_r+0xa10>
 800ad3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ad3e:	d1d8      	bne.n	800acf2 <_dtoa_r+0xa0a>
 800ad40:	9a00      	ldr	r2, [sp, #0]
 800ad42:	2339      	movs	r3, #57	@ 0x39
 800ad44:	7013      	strb	r3, [r2, #0]
 800ad46:	4633      	mov	r3, r6
 800ad48:	461e      	mov	r6, r3
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ad50:	2a39      	cmp	r2, #57	@ 0x39
 800ad52:	d052      	beq.n	800adfa <_dtoa_r+0xb12>
 800ad54:	3201      	adds	r2, #1
 800ad56:	701a      	strb	r2, [r3, #0]
 800ad58:	e612      	b.n	800a980 <_dtoa_r+0x698>
 800ad5a:	2a00      	cmp	r2, #0
 800ad5c:	dd07      	ble.n	800ad6e <_dtoa_r+0xa86>
 800ad5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ad62:	d0ed      	beq.n	800ad40 <_dtoa_r+0xa58>
 800ad64:	9a00      	ldr	r2, [sp, #0]
 800ad66:	f108 0301 	add.w	r3, r8, #1
 800ad6a:	7013      	strb	r3, [r2, #0]
 800ad6c:	e608      	b.n	800a980 <_dtoa_r+0x698>
 800ad6e:	9b07      	ldr	r3, [sp, #28]
 800ad70:	9a07      	ldr	r2, [sp, #28]
 800ad72:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ad76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d028      	beq.n	800adce <_dtoa_r+0xae6>
 800ad7c:	4649      	mov	r1, r9
 800ad7e:	2300      	movs	r3, #0
 800ad80:	220a      	movs	r2, #10
 800ad82:	4658      	mov	r0, fp
 800ad84:	f000 f9d6 	bl	800b134 <__multadd>
 800ad88:	42af      	cmp	r7, r5
 800ad8a:	4681      	mov	r9, r0
 800ad8c:	f04f 0300 	mov.w	r3, #0
 800ad90:	f04f 020a 	mov.w	r2, #10
 800ad94:	4639      	mov	r1, r7
 800ad96:	4658      	mov	r0, fp
 800ad98:	d107      	bne.n	800adaa <_dtoa_r+0xac2>
 800ad9a:	f000 f9cb 	bl	800b134 <__multadd>
 800ad9e:	4607      	mov	r7, r0
 800ada0:	4605      	mov	r5, r0
 800ada2:	9b07      	ldr	r3, [sp, #28]
 800ada4:	3301      	adds	r3, #1
 800ada6:	9307      	str	r3, [sp, #28]
 800ada8:	e774      	b.n	800ac94 <_dtoa_r+0x9ac>
 800adaa:	f000 f9c3 	bl	800b134 <__multadd>
 800adae:	4629      	mov	r1, r5
 800adb0:	4607      	mov	r7, r0
 800adb2:	2300      	movs	r3, #0
 800adb4:	220a      	movs	r2, #10
 800adb6:	4658      	mov	r0, fp
 800adb8:	f000 f9bc 	bl	800b134 <__multadd>
 800adbc:	4605      	mov	r5, r0
 800adbe:	e7f0      	b.n	800ada2 <_dtoa_r+0xaba>
 800adc0:	9b00      	ldr	r3, [sp, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	bfcc      	ite	gt
 800adc6:	461e      	movgt	r6, r3
 800adc8:	2601      	movle	r6, #1
 800adca:	4456      	add	r6, sl
 800adcc:	2700      	movs	r7, #0
 800adce:	4649      	mov	r1, r9
 800add0:	2201      	movs	r2, #1
 800add2:	4658      	mov	r0, fp
 800add4:	f000 fb5a 	bl	800b48c <__lshift>
 800add8:	4621      	mov	r1, r4
 800adda:	4681      	mov	r9, r0
 800addc:	f000 fbc2 	bl	800b564 <__mcmp>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	dcb0      	bgt.n	800ad46 <_dtoa_r+0xa5e>
 800ade4:	d102      	bne.n	800adec <_dtoa_r+0xb04>
 800ade6:	f018 0f01 	tst.w	r8, #1
 800adea:	d1ac      	bne.n	800ad46 <_dtoa_r+0xa5e>
 800adec:	4633      	mov	r3, r6
 800adee:	461e      	mov	r6, r3
 800adf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adf4:	2a30      	cmp	r2, #48	@ 0x30
 800adf6:	d0fa      	beq.n	800adee <_dtoa_r+0xb06>
 800adf8:	e5c2      	b.n	800a980 <_dtoa_r+0x698>
 800adfa:	459a      	cmp	sl, r3
 800adfc:	d1a4      	bne.n	800ad48 <_dtoa_r+0xa60>
 800adfe:	9b04      	ldr	r3, [sp, #16]
 800ae00:	3301      	adds	r3, #1
 800ae02:	9304      	str	r3, [sp, #16]
 800ae04:	2331      	movs	r3, #49	@ 0x31
 800ae06:	f88a 3000 	strb.w	r3, [sl]
 800ae0a:	e5b9      	b.n	800a980 <_dtoa_r+0x698>
 800ae0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ae6c <_dtoa_r+0xb84>
 800ae12:	b11b      	cbz	r3, 800ae1c <_dtoa_r+0xb34>
 800ae14:	f10a 0308 	add.w	r3, sl, #8
 800ae18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ae1a:	6013      	str	r3, [r2, #0]
 800ae1c:	4650      	mov	r0, sl
 800ae1e:	b019      	add	sp, #100	@ 0x64
 800ae20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	f77f ae37 	ble.w	800aa9a <_dtoa_r+0x7b2>
 800ae2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae30:	2001      	movs	r0, #1
 800ae32:	e655      	b.n	800aae0 <_dtoa_r+0x7f8>
 800ae34:	9b00      	ldr	r3, [sp, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f77f aed6 	ble.w	800abe8 <_dtoa_r+0x900>
 800ae3c:	4656      	mov	r6, sl
 800ae3e:	4621      	mov	r1, r4
 800ae40:	4648      	mov	r0, r9
 800ae42:	f7ff f9c8 	bl	800a1d6 <quorem>
 800ae46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ae4a:	f806 8b01 	strb.w	r8, [r6], #1
 800ae4e:	9b00      	ldr	r3, [sp, #0]
 800ae50:	eba6 020a 	sub.w	r2, r6, sl
 800ae54:	4293      	cmp	r3, r2
 800ae56:	ddb3      	ble.n	800adc0 <_dtoa_r+0xad8>
 800ae58:	4649      	mov	r1, r9
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	220a      	movs	r2, #10
 800ae5e:	4658      	mov	r0, fp
 800ae60:	f000 f968 	bl	800b134 <__multadd>
 800ae64:	4681      	mov	r9, r0
 800ae66:	e7ea      	b.n	800ae3e <_dtoa_r+0xb56>
 800ae68:	0800c9e0 	.word	0x0800c9e0
 800ae6c:	0800c964 	.word	0x0800c964

0800ae70 <_free_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4605      	mov	r5, r0
 800ae74:	2900      	cmp	r1, #0
 800ae76:	d041      	beq.n	800aefc <_free_r+0x8c>
 800ae78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae7c:	1f0c      	subs	r4, r1, #4
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	bfb8      	it	lt
 800ae82:	18e4      	addlt	r4, r4, r3
 800ae84:	f000 f8e8 	bl	800b058 <__malloc_lock>
 800ae88:	4a1d      	ldr	r2, [pc, #116]	@ (800af00 <_free_r+0x90>)
 800ae8a:	6813      	ldr	r3, [r2, #0]
 800ae8c:	b933      	cbnz	r3, 800ae9c <_free_r+0x2c>
 800ae8e:	6063      	str	r3, [r4, #4]
 800ae90:	6014      	str	r4, [r2, #0]
 800ae92:	4628      	mov	r0, r5
 800ae94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae98:	f000 b8e4 	b.w	800b064 <__malloc_unlock>
 800ae9c:	42a3      	cmp	r3, r4
 800ae9e:	d908      	bls.n	800aeb2 <_free_r+0x42>
 800aea0:	6820      	ldr	r0, [r4, #0]
 800aea2:	1821      	adds	r1, r4, r0
 800aea4:	428b      	cmp	r3, r1
 800aea6:	bf01      	itttt	eq
 800aea8:	6819      	ldreq	r1, [r3, #0]
 800aeaa:	685b      	ldreq	r3, [r3, #4]
 800aeac:	1809      	addeq	r1, r1, r0
 800aeae:	6021      	streq	r1, [r4, #0]
 800aeb0:	e7ed      	b.n	800ae8e <_free_r+0x1e>
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	b10b      	cbz	r3, 800aebc <_free_r+0x4c>
 800aeb8:	42a3      	cmp	r3, r4
 800aeba:	d9fa      	bls.n	800aeb2 <_free_r+0x42>
 800aebc:	6811      	ldr	r1, [r2, #0]
 800aebe:	1850      	adds	r0, r2, r1
 800aec0:	42a0      	cmp	r0, r4
 800aec2:	d10b      	bne.n	800aedc <_free_r+0x6c>
 800aec4:	6820      	ldr	r0, [r4, #0]
 800aec6:	4401      	add	r1, r0
 800aec8:	1850      	adds	r0, r2, r1
 800aeca:	4283      	cmp	r3, r0
 800aecc:	6011      	str	r1, [r2, #0]
 800aece:	d1e0      	bne.n	800ae92 <_free_r+0x22>
 800aed0:	6818      	ldr	r0, [r3, #0]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	6053      	str	r3, [r2, #4]
 800aed6:	4408      	add	r0, r1
 800aed8:	6010      	str	r0, [r2, #0]
 800aeda:	e7da      	b.n	800ae92 <_free_r+0x22>
 800aedc:	d902      	bls.n	800aee4 <_free_r+0x74>
 800aede:	230c      	movs	r3, #12
 800aee0:	602b      	str	r3, [r5, #0]
 800aee2:	e7d6      	b.n	800ae92 <_free_r+0x22>
 800aee4:	6820      	ldr	r0, [r4, #0]
 800aee6:	1821      	adds	r1, r4, r0
 800aee8:	428b      	cmp	r3, r1
 800aeea:	bf04      	itt	eq
 800aeec:	6819      	ldreq	r1, [r3, #0]
 800aeee:	685b      	ldreq	r3, [r3, #4]
 800aef0:	6063      	str	r3, [r4, #4]
 800aef2:	bf04      	itt	eq
 800aef4:	1809      	addeq	r1, r1, r0
 800aef6:	6021      	streq	r1, [r4, #0]
 800aef8:	6054      	str	r4, [r2, #4]
 800aefa:	e7ca      	b.n	800ae92 <_free_r+0x22>
 800aefc:	bd38      	pop	{r3, r4, r5, pc}
 800aefe:	bf00      	nop
 800af00:	20005024 	.word	0x20005024

0800af04 <malloc>:
 800af04:	4b02      	ldr	r3, [pc, #8]	@ (800af10 <malloc+0xc>)
 800af06:	4601      	mov	r1, r0
 800af08:	6818      	ldr	r0, [r3, #0]
 800af0a:	f000 b825 	b.w	800af58 <_malloc_r>
 800af0e:	bf00      	nop
 800af10:	2000019c 	.word	0x2000019c

0800af14 <sbrk_aligned>:
 800af14:	b570      	push	{r4, r5, r6, lr}
 800af16:	4e0f      	ldr	r6, [pc, #60]	@ (800af54 <sbrk_aligned+0x40>)
 800af18:	460c      	mov	r4, r1
 800af1a:	6831      	ldr	r1, [r6, #0]
 800af1c:	4605      	mov	r5, r0
 800af1e:	b911      	cbnz	r1, 800af26 <sbrk_aligned+0x12>
 800af20:	f001 f80c 	bl	800bf3c <_sbrk_r>
 800af24:	6030      	str	r0, [r6, #0]
 800af26:	4621      	mov	r1, r4
 800af28:	4628      	mov	r0, r5
 800af2a:	f001 f807 	bl	800bf3c <_sbrk_r>
 800af2e:	1c43      	adds	r3, r0, #1
 800af30:	d103      	bne.n	800af3a <sbrk_aligned+0x26>
 800af32:	f04f 34ff 	mov.w	r4, #4294967295
 800af36:	4620      	mov	r0, r4
 800af38:	bd70      	pop	{r4, r5, r6, pc}
 800af3a:	1cc4      	adds	r4, r0, #3
 800af3c:	f024 0403 	bic.w	r4, r4, #3
 800af40:	42a0      	cmp	r0, r4
 800af42:	d0f8      	beq.n	800af36 <sbrk_aligned+0x22>
 800af44:	1a21      	subs	r1, r4, r0
 800af46:	4628      	mov	r0, r5
 800af48:	f000 fff8 	bl	800bf3c <_sbrk_r>
 800af4c:	3001      	adds	r0, #1
 800af4e:	d1f2      	bne.n	800af36 <sbrk_aligned+0x22>
 800af50:	e7ef      	b.n	800af32 <sbrk_aligned+0x1e>
 800af52:	bf00      	nop
 800af54:	20005020 	.word	0x20005020

0800af58 <_malloc_r>:
 800af58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af5c:	1ccd      	adds	r5, r1, #3
 800af5e:	f025 0503 	bic.w	r5, r5, #3
 800af62:	3508      	adds	r5, #8
 800af64:	2d0c      	cmp	r5, #12
 800af66:	bf38      	it	cc
 800af68:	250c      	movcc	r5, #12
 800af6a:	2d00      	cmp	r5, #0
 800af6c:	4606      	mov	r6, r0
 800af6e:	db01      	blt.n	800af74 <_malloc_r+0x1c>
 800af70:	42a9      	cmp	r1, r5
 800af72:	d904      	bls.n	800af7e <_malloc_r+0x26>
 800af74:	230c      	movs	r3, #12
 800af76:	6033      	str	r3, [r6, #0]
 800af78:	2000      	movs	r0, #0
 800af7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b054 <_malloc_r+0xfc>
 800af82:	f000 f869 	bl	800b058 <__malloc_lock>
 800af86:	f8d8 3000 	ldr.w	r3, [r8]
 800af8a:	461c      	mov	r4, r3
 800af8c:	bb44      	cbnz	r4, 800afe0 <_malloc_r+0x88>
 800af8e:	4629      	mov	r1, r5
 800af90:	4630      	mov	r0, r6
 800af92:	f7ff ffbf 	bl	800af14 <sbrk_aligned>
 800af96:	1c43      	adds	r3, r0, #1
 800af98:	4604      	mov	r4, r0
 800af9a:	d158      	bne.n	800b04e <_malloc_r+0xf6>
 800af9c:	f8d8 4000 	ldr.w	r4, [r8]
 800afa0:	4627      	mov	r7, r4
 800afa2:	2f00      	cmp	r7, #0
 800afa4:	d143      	bne.n	800b02e <_malloc_r+0xd6>
 800afa6:	2c00      	cmp	r4, #0
 800afa8:	d04b      	beq.n	800b042 <_malloc_r+0xea>
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	4639      	mov	r1, r7
 800afae:	4630      	mov	r0, r6
 800afb0:	eb04 0903 	add.w	r9, r4, r3
 800afb4:	f000 ffc2 	bl	800bf3c <_sbrk_r>
 800afb8:	4581      	cmp	r9, r0
 800afba:	d142      	bne.n	800b042 <_malloc_r+0xea>
 800afbc:	6821      	ldr	r1, [r4, #0]
 800afbe:	1a6d      	subs	r5, r5, r1
 800afc0:	4629      	mov	r1, r5
 800afc2:	4630      	mov	r0, r6
 800afc4:	f7ff ffa6 	bl	800af14 <sbrk_aligned>
 800afc8:	3001      	adds	r0, #1
 800afca:	d03a      	beq.n	800b042 <_malloc_r+0xea>
 800afcc:	6823      	ldr	r3, [r4, #0]
 800afce:	442b      	add	r3, r5
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	f8d8 3000 	ldr.w	r3, [r8]
 800afd6:	685a      	ldr	r2, [r3, #4]
 800afd8:	bb62      	cbnz	r2, 800b034 <_malloc_r+0xdc>
 800afda:	f8c8 7000 	str.w	r7, [r8]
 800afde:	e00f      	b.n	800b000 <_malloc_r+0xa8>
 800afe0:	6822      	ldr	r2, [r4, #0]
 800afe2:	1b52      	subs	r2, r2, r5
 800afe4:	d420      	bmi.n	800b028 <_malloc_r+0xd0>
 800afe6:	2a0b      	cmp	r2, #11
 800afe8:	d917      	bls.n	800b01a <_malloc_r+0xc2>
 800afea:	1961      	adds	r1, r4, r5
 800afec:	42a3      	cmp	r3, r4
 800afee:	6025      	str	r5, [r4, #0]
 800aff0:	bf18      	it	ne
 800aff2:	6059      	strne	r1, [r3, #4]
 800aff4:	6863      	ldr	r3, [r4, #4]
 800aff6:	bf08      	it	eq
 800aff8:	f8c8 1000 	streq.w	r1, [r8]
 800affc:	5162      	str	r2, [r4, r5]
 800affe:	604b      	str	r3, [r1, #4]
 800b000:	4630      	mov	r0, r6
 800b002:	f000 f82f 	bl	800b064 <__malloc_unlock>
 800b006:	f104 000b 	add.w	r0, r4, #11
 800b00a:	1d23      	adds	r3, r4, #4
 800b00c:	f020 0007 	bic.w	r0, r0, #7
 800b010:	1ac2      	subs	r2, r0, r3
 800b012:	bf1c      	itt	ne
 800b014:	1a1b      	subne	r3, r3, r0
 800b016:	50a3      	strne	r3, [r4, r2]
 800b018:	e7af      	b.n	800af7a <_malloc_r+0x22>
 800b01a:	6862      	ldr	r2, [r4, #4]
 800b01c:	42a3      	cmp	r3, r4
 800b01e:	bf0c      	ite	eq
 800b020:	f8c8 2000 	streq.w	r2, [r8]
 800b024:	605a      	strne	r2, [r3, #4]
 800b026:	e7eb      	b.n	800b000 <_malloc_r+0xa8>
 800b028:	4623      	mov	r3, r4
 800b02a:	6864      	ldr	r4, [r4, #4]
 800b02c:	e7ae      	b.n	800af8c <_malloc_r+0x34>
 800b02e:	463c      	mov	r4, r7
 800b030:	687f      	ldr	r7, [r7, #4]
 800b032:	e7b6      	b.n	800afa2 <_malloc_r+0x4a>
 800b034:	461a      	mov	r2, r3
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	42a3      	cmp	r3, r4
 800b03a:	d1fb      	bne.n	800b034 <_malloc_r+0xdc>
 800b03c:	2300      	movs	r3, #0
 800b03e:	6053      	str	r3, [r2, #4]
 800b040:	e7de      	b.n	800b000 <_malloc_r+0xa8>
 800b042:	230c      	movs	r3, #12
 800b044:	6033      	str	r3, [r6, #0]
 800b046:	4630      	mov	r0, r6
 800b048:	f000 f80c 	bl	800b064 <__malloc_unlock>
 800b04c:	e794      	b.n	800af78 <_malloc_r+0x20>
 800b04e:	6005      	str	r5, [r0, #0]
 800b050:	e7d6      	b.n	800b000 <_malloc_r+0xa8>
 800b052:	bf00      	nop
 800b054:	20005024 	.word	0x20005024

0800b058 <__malloc_lock>:
 800b058:	4801      	ldr	r0, [pc, #4]	@ (800b060 <__malloc_lock+0x8>)
 800b05a:	f7ff b8ac 	b.w	800a1b6 <__retarget_lock_acquire_recursive>
 800b05e:	bf00      	nop
 800b060:	2000501c 	.word	0x2000501c

0800b064 <__malloc_unlock>:
 800b064:	4801      	ldr	r0, [pc, #4]	@ (800b06c <__malloc_unlock+0x8>)
 800b066:	f7ff b8a7 	b.w	800a1b8 <__retarget_lock_release_recursive>
 800b06a:	bf00      	nop
 800b06c:	2000501c 	.word	0x2000501c

0800b070 <_Balloc>:
 800b070:	b570      	push	{r4, r5, r6, lr}
 800b072:	69c6      	ldr	r6, [r0, #28]
 800b074:	4604      	mov	r4, r0
 800b076:	460d      	mov	r5, r1
 800b078:	b976      	cbnz	r6, 800b098 <_Balloc+0x28>
 800b07a:	2010      	movs	r0, #16
 800b07c:	f7ff ff42 	bl	800af04 <malloc>
 800b080:	4602      	mov	r2, r0
 800b082:	61e0      	str	r0, [r4, #28]
 800b084:	b920      	cbnz	r0, 800b090 <_Balloc+0x20>
 800b086:	4b18      	ldr	r3, [pc, #96]	@ (800b0e8 <_Balloc+0x78>)
 800b088:	4818      	ldr	r0, [pc, #96]	@ (800b0ec <_Balloc+0x7c>)
 800b08a:	216b      	movs	r1, #107	@ 0x6b
 800b08c:	f000 ff66 	bl	800bf5c <__assert_func>
 800b090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b094:	6006      	str	r6, [r0, #0]
 800b096:	60c6      	str	r6, [r0, #12]
 800b098:	69e6      	ldr	r6, [r4, #28]
 800b09a:	68f3      	ldr	r3, [r6, #12]
 800b09c:	b183      	cbz	r3, 800b0c0 <_Balloc+0x50>
 800b09e:	69e3      	ldr	r3, [r4, #28]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0a6:	b9b8      	cbnz	r0, 800b0d8 <_Balloc+0x68>
 800b0a8:	2101      	movs	r1, #1
 800b0aa:	fa01 f605 	lsl.w	r6, r1, r5
 800b0ae:	1d72      	adds	r2, r6, #5
 800b0b0:	0092      	lsls	r2, r2, #2
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f000 ff70 	bl	800bf98 <_calloc_r>
 800b0b8:	b160      	cbz	r0, 800b0d4 <_Balloc+0x64>
 800b0ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b0be:	e00e      	b.n	800b0de <_Balloc+0x6e>
 800b0c0:	2221      	movs	r2, #33	@ 0x21
 800b0c2:	2104      	movs	r1, #4
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f000 ff67 	bl	800bf98 <_calloc_r>
 800b0ca:	69e3      	ldr	r3, [r4, #28]
 800b0cc:	60f0      	str	r0, [r6, #12]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1e4      	bne.n	800b09e <_Balloc+0x2e>
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	bd70      	pop	{r4, r5, r6, pc}
 800b0d8:	6802      	ldr	r2, [r0, #0]
 800b0da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0de:	2300      	movs	r3, #0
 800b0e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0e4:	e7f7      	b.n	800b0d6 <_Balloc+0x66>
 800b0e6:	bf00      	nop
 800b0e8:	0800c971 	.word	0x0800c971
 800b0ec:	0800c9f1 	.word	0x0800c9f1

0800b0f0 <_Bfree>:
 800b0f0:	b570      	push	{r4, r5, r6, lr}
 800b0f2:	69c6      	ldr	r6, [r0, #28]
 800b0f4:	4605      	mov	r5, r0
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	b976      	cbnz	r6, 800b118 <_Bfree+0x28>
 800b0fa:	2010      	movs	r0, #16
 800b0fc:	f7ff ff02 	bl	800af04 <malloc>
 800b100:	4602      	mov	r2, r0
 800b102:	61e8      	str	r0, [r5, #28]
 800b104:	b920      	cbnz	r0, 800b110 <_Bfree+0x20>
 800b106:	4b09      	ldr	r3, [pc, #36]	@ (800b12c <_Bfree+0x3c>)
 800b108:	4809      	ldr	r0, [pc, #36]	@ (800b130 <_Bfree+0x40>)
 800b10a:	218f      	movs	r1, #143	@ 0x8f
 800b10c:	f000 ff26 	bl	800bf5c <__assert_func>
 800b110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b114:	6006      	str	r6, [r0, #0]
 800b116:	60c6      	str	r6, [r0, #12]
 800b118:	b13c      	cbz	r4, 800b12a <_Bfree+0x3a>
 800b11a:	69eb      	ldr	r3, [r5, #28]
 800b11c:	6862      	ldr	r2, [r4, #4]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b124:	6021      	str	r1, [r4, #0]
 800b126:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b12a:	bd70      	pop	{r4, r5, r6, pc}
 800b12c:	0800c971 	.word	0x0800c971
 800b130:	0800c9f1 	.word	0x0800c9f1

0800b134 <__multadd>:
 800b134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b138:	690d      	ldr	r5, [r1, #16]
 800b13a:	4607      	mov	r7, r0
 800b13c:	460c      	mov	r4, r1
 800b13e:	461e      	mov	r6, r3
 800b140:	f101 0c14 	add.w	ip, r1, #20
 800b144:	2000      	movs	r0, #0
 800b146:	f8dc 3000 	ldr.w	r3, [ip]
 800b14a:	b299      	uxth	r1, r3
 800b14c:	fb02 6101 	mla	r1, r2, r1, r6
 800b150:	0c1e      	lsrs	r6, r3, #16
 800b152:	0c0b      	lsrs	r3, r1, #16
 800b154:	fb02 3306 	mla	r3, r2, r6, r3
 800b158:	b289      	uxth	r1, r1
 800b15a:	3001      	adds	r0, #1
 800b15c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b160:	4285      	cmp	r5, r0
 800b162:	f84c 1b04 	str.w	r1, [ip], #4
 800b166:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b16a:	dcec      	bgt.n	800b146 <__multadd+0x12>
 800b16c:	b30e      	cbz	r6, 800b1b2 <__multadd+0x7e>
 800b16e:	68a3      	ldr	r3, [r4, #8]
 800b170:	42ab      	cmp	r3, r5
 800b172:	dc19      	bgt.n	800b1a8 <__multadd+0x74>
 800b174:	6861      	ldr	r1, [r4, #4]
 800b176:	4638      	mov	r0, r7
 800b178:	3101      	adds	r1, #1
 800b17a:	f7ff ff79 	bl	800b070 <_Balloc>
 800b17e:	4680      	mov	r8, r0
 800b180:	b928      	cbnz	r0, 800b18e <__multadd+0x5a>
 800b182:	4602      	mov	r2, r0
 800b184:	4b0c      	ldr	r3, [pc, #48]	@ (800b1b8 <__multadd+0x84>)
 800b186:	480d      	ldr	r0, [pc, #52]	@ (800b1bc <__multadd+0x88>)
 800b188:	21ba      	movs	r1, #186	@ 0xba
 800b18a:	f000 fee7 	bl	800bf5c <__assert_func>
 800b18e:	6922      	ldr	r2, [r4, #16]
 800b190:	3202      	adds	r2, #2
 800b192:	f104 010c 	add.w	r1, r4, #12
 800b196:	0092      	lsls	r2, r2, #2
 800b198:	300c      	adds	r0, #12
 800b19a:	f7ff f80e 	bl	800a1ba <memcpy>
 800b19e:	4621      	mov	r1, r4
 800b1a0:	4638      	mov	r0, r7
 800b1a2:	f7ff ffa5 	bl	800b0f0 <_Bfree>
 800b1a6:	4644      	mov	r4, r8
 800b1a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b1ac:	3501      	adds	r5, #1
 800b1ae:	615e      	str	r6, [r3, #20]
 800b1b0:	6125      	str	r5, [r4, #16]
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b8:	0800c9e0 	.word	0x0800c9e0
 800b1bc:	0800c9f1 	.word	0x0800c9f1

0800b1c0 <__hi0bits>:
 800b1c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	bf36      	itet	cc
 800b1c8:	0403      	lslcc	r3, r0, #16
 800b1ca:	2000      	movcs	r0, #0
 800b1cc:	2010      	movcc	r0, #16
 800b1ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b1d2:	bf3c      	itt	cc
 800b1d4:	021b      	lslcc	r3, r3, #8
 800b1d6:	3008      	addcc	r0, #8
 800b1d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1dc:	bf3c      	itt	cc
 800b1de:	011b      	lslcc	r3, r3, #4
 800b1e0:	3004      	addcc	r0, #4
 800b1e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1e6:	bf3c      	itt	cc
 800b1e8:	009b      	lslcc	r3, r3, #2
 800b1ea:	3002      	addcc	r0, #2
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	db05      	blt.n	800b1fc <__hi0bits+0x3c>
 800b1f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b1f4:	f100 0001 	add.w	r0, r0, #1
 800b1f8:	bf08      	it	eq
 800b1fa:	2020      	moveq	r0, #32
 800b1fc:	4770      	bx	lr

0800b1fe <__lo0bits>:
 800b1fe:	6803      	ldr	r3, [r0, #0]
 800b200:	4602      	mov	r2, r0
 800b202:	f013 0007 	ands.w	r0, r3, #7
 800b206:	d00b      	beq.n	800b220 <__lo0bits+0x22>
 800b208:	07d9      	lsls	r1, r3, #31
 800b20a:	d421      	bmi.n	800b250 <__lo0bits+0x52>
 800b20c:	0798      	lsls	r0, r3, #30
 800b20e:	bf49      	itett	mi
 800b210:	085b      	lsrmi	r3, r3, #1
 800b212:	089b      	lsrpl	r3, r3, #2
 800b214:	2001      	movmi	r0, #1
 800b216:	6013      	strmi	r3, [r2, #0]
 800b218:	bf5c      	itt	pl
 800b21a:	6013      	strpl	r3, [r2, #0]
 800b21c:	2002      	movpl	r0, #2
 800b21e:	4770      	bx	lr
 800b220:	b299      	uxth	r1, r3
 800b222:	b909      	cbnz	r1, 800b228 <__lo0bits+0x2a>
 800b224:	0c1b      	lsrs	r3, r3, #16
 800b226:	2010      	movs	r0, #16
 800b228:	b2d9      	uxtb	r1, r3
 800b22a:	b909      	cbnz	r1, 800b230 <__lo0bits+0x32>
 800b22c:	3008      	adds	r0, #8
 800b22e:	0a1b      	lsrs	r3, r3, #8
 800b230:	0719      	lsls	r1, r3, #28
 800b232:	bf04      	itt	eq
 800b234:	091b      	lsreq	r3, r3, #4
 800b236:	3004      	addeq	r0, #4
 800b238:	0799      	lsls	r1, r3, #30
 800b23a:	bf04      	itt	eq
 800b23c:	089b      	lsreq	r3, r3, #2
 800b23e:	3002      	addeq	r0, #2
 800b240:	07d9      	lsls	r1, r3, #31
 800b242:	d403      	bmi.n	800b24c <__lo0bits+0x4e>
 800b244:	085b      	lsrs	r3, r3, #1
 800b246:	f100 0001 	add.w	r0, r0, #1
 800b24a:	d003      	beq.n	800b254 <__lo0bits+0x56>
 800b24c:	6013      	str	r3, [r2, #0]
 800b24e:	4770      	bx	lr
 800b250:	2000      	movs	r0, #0
 800b252:	4770      	bx	lr
 800b254:	2020      	movs	r0, #32
 800b256:	4770      	bx	lr

0800b258 <__i2b>:
 800b258:	b510      	push	{r4, lr}
 800b25a:	460c      	mov	r4, r1
 800b25c:	2101      	movs	r1, #1
 800b25e:	f7ff ff07 	bl	800b070 <_Balloc>
 800b262:	4602      	mov	r2, r0
 800b264:	b928      	cbnz	r0, 800b272 <__i2b+0x1a>
 800b266:	4b05      	ldr	r3, [pc, #20]	@ (800b27c <__i2b+0x24>)
 800b268:	4805      	ldr	r0, [pc, #20]	@ (800b280 <__i2b+0x28>)
 800b26a:	f240 1145 	movw	r1, #325	@ 0x145
 800b26e:	f000 fe75 	bl	800bf5c <__assert_func>
 800b272:	2301      	movs	r3, #1
 800b274:	6144      	str	r4, [r0, #20]
 800b276:	6103      	str	r3, [r0, #16]
 800b278:	bd10      	pop	{r4, pc}
 800b27a:	bf00      	nop
 800b27c:	0800c9e0 	.word	0x0800c9e0
 800b280:	0800c9f1 	.word	0x0800c9f1

0800b284 <__multiply>:
 800b284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b288:	4614      	mov	r4, r2
 800b28a:	690a      	ldr	r2, [r1, #16]
 800b28c:	6923      	ldr	r3, [r4, #16]
 800b28e:	429a      	cmp	r2, r3
 800b290:	bfa8      	it	ge
 800b292:	4623      	movge	r3, r4
 800b294:	460f      	mov	r7, r1
 800b296:	bfa4      	itt	ge
 800b298:	460c      	movge	r4, r1
 800b29a:	461f      	movge	r7, r3
 800b29c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b2a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b2a4:	68a3      	ldr	r3, [r4, #8]
 800b2a6:	6861      	ldr	r1, [r4, #4]
 800b2a8:	eb0a 0609 	add.w	r6, sl, r9
 800b2ac:	42b3      	cmp	r3, r6
 800b2ae:	b085      	sub	sp, #20
 800b2b0:	bfb8      	it	lt
 800b2b2:	3101      	addlt	r1, #1
 800b2b4:	f7ff fedc 	bl	800b070 <_Balloc>
 800b2b8:	b930      	cbnz	r0, 800b2c8 <__multiply+0x44>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	4b44      	ldr	r3, [pc, #272]	@ (800b3d0 <__multiply+0x14c>)
 800b2be:	4845      	ldr	r0, [pc, #276]	@ (800b3d4 <__multiply+0x150>)
 800b2c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b2c4:	f000 fe4a 	bl	800bf5c <__assert_func>
 800b2c8:	f100 0514 	add.w	r5, r0, #20
 800b2cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b2d0:	462b      	mov	r3, r5
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	4543      	cmp	r3, r8
 800b2d6:	d321      	bcc.n	800b31c <__multiply+0x98>
 800b2d8:	f107 0114 	add.w	r1, r7, #20
 800b2dc:	f104 0214 	add.w	r2, r4, #20
 800b2e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b2e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b2e8:	9302      	str	r3, [sp, #8]
 800b2ea:	1b13      	subs	r3, r2, r4
 800b2ec:	3b15      	subs	r3, #21
 800b2ee:	f023 0303 	bic.w	r3, r3, #3
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	f104 0715 	add.w	r7, r4, #21
 800b2f8:	42ba      	cmp	r2, r7
 800b2fa:	bf38      	it	cc
 800b2fc:	2304      	movcc	r3, #4
 800b2fe:	9301      	str	r3, [sp, #4]
 800b300:	9b02      	ldr	r3, [sp, #8]
 800b302:	9103      	str	r1, [sp, #12]
 800b304:	428b      	cmp	r3, r1
 800b306:	d80c      	bhi.n	800b322 <__multiply+0x9e>
 800b308:	2e00      	cmp	r6, #0
 800b30a:	dd03      	ble.n	800b314 <__multiply+0x90>
 800b30c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b310:	2b00      	cmp	r3, #0
 800b312:	d05b      	beq.n	800b3cc <__multiply+0x148>
 800b314:	6106      	str	r6, [r0, #16]
 800b316:	b005      	add	sp, #20
 800b318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b31c:	f843 2b04 	str.w	r2, [r3], #4
 800b320:	e7d8      	b.n	800b2d4 <__multiply+0x50>
 800b322:	f8b1 a000 	ldrh.w	sl, [r1]
 800b326:	f1ba 0f00 	cmp.w	sl, #0
 800b32a:	d024      	beq.n	800b376 <__multiply+0xf2>
 800b32c:	f104 0e14 	add.w	lr, r4, #20
 800b330:	46a9      	mov	r9, r5
 800b332:	f04f 0c00 	mov.w	ip, #0
 800b336:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b33a:	f8d9 3000 	ldr.w	r3, [r9]
 800b33e:	fa1f fb87 	uxth.w	fp, r7
 800b342:	b29b      	uxth	r3, r3
 800b344:	fb0a 330b 	mla	r3, sl, fp, r3
 800b348:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b34c:	f8d9 7000 	ldr.w	r7, [r9]
 800b350:	4463      	add	r3, ip
 800b352:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b356:	fb0a c70b 	mla	r7, sl, fp, ip
 800b35a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b35e:	b29b      	uxth	r3, r3
 800b360:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b364:	4572      	cmp	r2, lr
 800b366:	f849 3b04 	str.w	r3, [r9], #4
 800b36a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b36e:	d8e2      	bhi.n	800b336 <__multiply+0xb2>
 800b370:	9b01      	ldr	r3, [sp, #4]
 800b372:	f845 c003 	str.w	ip, [r5, r3]
 800b376:	9b03      	ldr	r3, [sp, #12]
 800b378:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b37c:	3104      	adds	r1, #4
 800b37e:	f1b9 0f00 	cmp.w	r9, #0
 800b382:	d021      	beq.n	800b3c8 <__multiply+0x144>
 800b384:	682b      	ldr	r3, [r5, #0]
 800b386:	f104 0c14 	add.w	ip, r4, #20
 800b38a:	46ae      	mov	lr, r5
 800b38c:	f04f 0a00 	mov.w	sl, #0
 800b390:	f8bc b000 	ldrh.w	fp, [ip]
 800b394:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b398:	fb09 770b 	mla	r7, r9, fp, r7
 800b39c:	4457      	add	r7, sl
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b3a4:	f84e 3b04 	str.w	r3, [lr], #4
 800b3a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b3ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3b0:	f8be 3000 	ldrh.w	r3, [lr]
 800b3b4:	fb09 330a 	mla	r3, r9, sl, r3
 800b3b8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b3bc:	4562      	cmp	r2, ip
 800b3be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3c2:	d8e5      	bhi.n	800b390 <__multiply+0x10c>
 800b3c4:	9f01      	ldr	r7, [sp, #4]
 800b3c6:	51eb      	str	r3, [r5, r7]
 800b3c8:	3504      	adds	r5, #4
 800b3ca:	e799      	b.n	800b300 <__multiply+0x7c>
 800b3cc:	3e01      	subs	r6, #1
 800b3ce:	e79b      	b.n	800b308 <__multiply+0x84>
 800b3d0:	0800c9e0 	.word	0x0800c9e0
 800b3d4:	0800c9f1 	.word	0x0800c9f1

0800b3d8 <__pow5mult>:
 800b3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3dc:	4615      	mov	r5, r2
 800b3de:	f012 0203 	ands.w	r2, r2, #3
 800b3e2:	4607      	mov	r7, r0
 800b3e4:	460e      	mov	r6, r1
 800b3e6:	d007      	beq.n	800b3f8 <__pow5mult+0x20>
 800b3e8:	4c25      	ldr	r4, [pc, #148]	@ (800b480 <__pow5mult+0xa8>)
 800b3ea:	3a01      	subs	r2, #1
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3f2:	f7ff fe9f 	bl	800b134 <__multadd>
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	10ad      	asrs	r5, r5, #2
 800b3fa:	d03d      	beq.n	800b478 <__pow5mult+0xa0>
 800b3fc:	69fc      	ldr	r4, [r7, #28]
 800b3fe:	b97c      	cbnz	r4, 800b420 <__pow5mult+0x48>
 800b400:	2010      	movs	r0, #16
 800b402:	f7ff fd7f 	bl	800af04 <malloc>
 800b406:	4602      	mov	r2, r0
 800b408:	61f8      	str	r0, [r7, #28]
 800b40a:	b928      	cbnz	r0, 800b418 <__pow5mult+0x40>
 800b40c:	4b1d      	ldr	r3, [pc, #116]	@ (800b484 <__pow5mult+0xac>)
 800b40e:	481e      	ldr	r0, [pc, #120]	@ (800b488 <__pow5mult+0xb0>)
 800b410:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b414:	f000 fda2 	bl	800bf5c <__assert_func>
 800b418:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b41c:	6004      	str	r4, [r0, #0]
 800b41e:	60c4      	str	r4, [r0, #12]
 800b420:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b424:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b428:	b94c      	cbnz	r4, 800b43e <__pow5mult+0x66>
 800b42a:	f240 2171 	movw	r1, #625	@ 0x271
 800b42e:	4638      	mov	r0, r7
 800b430:	f7ff ff12 	bl	800b258 <__i2b>
 800b434:	2300      	movs	r3, #0
 800b436:	f8c8 0008 	str.w	r0, [r8, #8]
 800b43a:	4604      	mov	r4, r0
 800b43c:	6003      	str	r3, [r0, #0]
 800b43e:	f04f 0900 	mov.w	r9, #0
 800b442:	07eb      	lsls	r3, r5, #31
 800b444:	d50a      	bpl.n	800b45c <__pow5mult+0x84>
 800b446:	4631      	mov	r1, r6
 800b448:	4622      	mov	r2, r4
 800b44a:	4638      	mov	r0, r7
 800b44c:	f7ff ff1a 	bl	800b284 <__multiply>
 800b450:	4631      	mov	r1, r6
 800b452:	4680      	mov	r8, r0
 800b454:	4638      	mov	r0, r7
 800b456:	f7ff fe4b 	bl	800b0f0 <_Bfree>
 800b45a:	4646      	mov	r6, r8
 800b45c:	106d      	asrs	r5, r5, #1
 800b45e:	d00b      	beq.n	800b478 <__pow5mult+0xa0>
 800b460:	6820      	ldr	r0, [r4, #0]
 800b462:	b938      	cbnz	r0, 800b474 <__pow5mult+0x9c>
 800b464:	4622      	mov	r2, r4
 800b466:	4621      	mov	r1, r4
 800b468:	4638      	mov	r0, r7
 800b46a:	f7ff ff0b 	bl	800b284 <__multiply>
 800b46e:	6020      	str	r0, [r4, #0]
 800b470:	f8c0 9000 	str.w	r9, [r0]
 800b474:	4604      	mov	r4, r0
 800b476:	e7e4      	b.n	800b442 <__pow5mult+0x6a>
 800b478:	4630      	mov	r0, r6
 800b47a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b47e:	bf00      	nop
 800b480:	0800ca4c 	.word	0x0800ca4c
 800b484:	0800c971 	.word	0x0800c971
 800b488:	0800c9f1 	.word	0x0800c9f1

0800b48c <__lshift>:
 800b48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b490:	460c      	mov	r4, r1
 800b492:	6849      	ldr	r1, [r1, #4]
 800b494:	6923      	ldr	r3, [r4, #16]
 800b496:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b49a:	68a3      	ldr	r3, [r4, #8]
 800b49c:	4607      	mov	r7, r0
 800b49e:	4691      	mov	r9, r2
 800b4a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b4a4:	f108 0601 	add.w	r6, r8, #1
 800b4a8:	42b3      	cmp	r3, r6
 800b4aa:	db0b      	blt.n	800b4c4 <__lshift+0x38>
 800b4ac:	4638      	mov	r0, r7
 800b4ae:	f7ff fddf 	bl	800b070 <_Balloc>
 800b4b2:	4605      	mov	r5, r0
 800b4b4:	b948      	cbnz	r0, 800b4ca <__lshift+0x3e>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	4b28      	ldr	r3, [pc, #160]	@ (800b55c <__lshift+0xd0>)
 800b4ba:	4829      	ldr	r0, [pc, #164]	@ (800b560 <__lshift+0xd4>)
 800b4bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b4c0:	f000 fd4c 	bl	800bf5c <__assert_func>
 800b4c4:	3101      	adds	r1, #1
 800b4c6:	005b      	lsls	r3, r3, #1
 800b4c8:	e7ee      	b.n	800b4a8 <__lshift+0x1c>
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	f100 0114 	add.w	r1, r0, #20
 800b4d0:	f100 0210 	add.w	r2, r0, #16
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	4553      	cmp	r3, sl
 800b4d8:	db33      	blt.n	800b542 <__lshift+0xb6>
 800b4da:	6920      	ldr	r0, [r4, #16]
 800b4dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4e0:	f104 0314 	add.w	r3, r4, #20
 800b4e4:	f019 091f 	ands.w	r9, r9, #31
 800b4e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4f0:	d02b      	beq.n	800b54a <__lshift+0xbe>
 800b4f2:	f1c9 0e20 	rsb	lr, r9, #32
 800b4f6:	468a      	mov	sl, r1
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	6818      	ldr	r0, [r3, #0]
 800b4fc:	fa00 f009 	lsl.w	r0, r0, r9
 800b500:	4310      	orrs	r0, r2
 800b502:	f84a 0b04 	str.w	r0, [sl], #4
 800b506:	f853 2b04 	ldr.w	r2, [r3], #4
 800b50a:	459c      	cmp	ip, r3
 800b50c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b510:	d8f3      	bhi.n	800b4fa <__lshift+0x6e>
 800b512:	ebac 0304 	sub.w	r3, ip, r4
 800b516:	3b15      	subs	r3, #21
 800b518:	f023 0303 	bic.w	r3, r3, #3
 800b51c:	3304      	adds	r3, #4
 800b51e:	f104 0015 	add.w	r0, r4, #21
 800b522:	4584      	cmp	ip, r0
 800b524:	bf38      	it	cc
 800b526:	2304      	movcc	r3, #4
 800b528:	50ca      	str	r2, [r1, r3]
 800b52a:	b10a      	cbz	r2, 800b530 <__lshift+0xa4>
 800b52c:	f108 0602 	add.w	r6, r8, #2
 800b530:	3e01      	subs	r6, #1
 800b532:	4638      	mov	r0, r7
 800b534:	612e      	str	r6, [r5, #16]
 800b536:	4621      	mov	r1, r4
 800b538:	f7ff fdda 	bl	800b0f0 <_Bfree>
 800b53c:	4628      	mov	r0, r5
 800b53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b542:	f842 0f04 	str.w	r0, [r2, #4]!
 800b546:	3301      	adds	r3, #1
 800b548:	e7c5      	b.n	800b4d6 <__lshift+0x4a>
 800b54a:	3904      	subs	r1, #4
 800b54c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b550:	f841 2f04 	str.w	r2, [r1, #4]!
 800b554:	459c      	cmp	ip, r3
 800b556:	d8f9      	bhi.n	800b54c <__lshift+0xc0>
 800b558:	e7ea      	b.n	800b530 <__lshift+0xa4>
 800b55a:	bf00      	nop
 800b55c:	0800c9e0 	.word	0x0800c9e0
 800b560:	0800c9f1 	.word	0x0800c9f1

0800b564 <__mcmp>:
 800b564:	690a      	ldr	r2, [r1, #16]
 800b566:	4603      	mov	r3, r0
 800b568:	6900      	ldr	r0, [r0, #16]
 800b56a:	1a80      	subs	r0, r0, r2
 800b56c:	b530      	push	{r4, r5, lr}
 800b56e:	d10e      	bne.n	800b58e <__mcmp+0x2a>
 800b570:	3314      	adds	r3, #20
 800b572:	3114      	adds	r1, #20
 800b574:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b578:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b57c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b580:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b584:	4295      	cmp	r5, r2
 800b586:	d003      	beq.n	800b590 <__mcmp+0x2c>
 800b588:	d205      	bcs.n	800b596 <__mcmp+0x32>
 800b58a:	f04f 30ff 	mov.w	r0, #4294967295
 800b58e:	bd30      	pop	{r4, r5, pc}
 800b590:	42a3      	cmp	r3, r4
 800b592:	d3f3      	bcc.n	800b57c <__mcmp+0x18>
 800b594:	e7fb      	b.n	800b58e <__mcmp+0x2a>
 800b596:	2001      	movs	r0, #1
 800b598:	e7f9      	b.n	800b58e <__mcmp+0x2a>
	...

0800b59c <__mdiff>:
 800b59c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a0:	4689      	mov	r9, r1
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	4648      	mov	r0, r9
 800b5a8:	4614      	mov	r4, r2
 800b5aa:	f7ff ffdb 	bl	800b564 <__mcmp>
 800b5ae:	1e05      	subs	r5, r0, #0
 800b5b0:	d112      	bne.n	800b5d8 <__mdiff+0x3c>
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	f7ff fd5b 	bl	800b070 <_Balloc>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	b928      	cbnz	r0, 800b5ca <__mdiff+0x2e>
 800b5be:	4b3f      	ldr	r3, [pc, #252]	@ (800b6bc <__mdiff+0x120>)
 800b5c0:	f240 2137 	movw	r1, #567	@ 0x237
 800b5c4:	483e      	ldr	r0, [pc, #248]	@ (800b6c0 <__mdiff+0x124>)
 800b5c6:	f000 fcc9 	bl	800bf5c <__assert_func>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5d0:	4610      	mov	r0, r2
 800b5d2:	b003      	add	sp, #12
 800b5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d8:	bfbc      	itt	lt
 800b5da:	464b      	movlt	r3, r9
 800b5dc:	46a1      	movlt	r9, r4
 800b5de:	4630      	mov	r0, r6
 800b5e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b5e4:	bfba      	itte	lt
 800b5e6:	461c      	movlt	r4, r3
 800b5e8:	2501      	movlt	r5, #1
 800b5ea:	2500      	movge	r5, #0
 800b5ec:	f7ff fd40 	bl	800b070 <_Balloc>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	b918      	cbnz	r0, 800b5fc <__mdiff+0x60>
 800b5f4:	4b31      	ldr	r3, [pc, #196]	@ (800b6bc <__mdiff+0x120>)
 800b5f6:	f240 2145 	movw	r1, #581	@ 0x245
 800b5fa:	e7e3      	b.n	800b5c4 <__mdiff+0x28>
 800b5fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b600:	6926      	ldr	r6, [r4, #16]
 800b602:	60c5      	str	r5, [r0, #12]
 800b604:	f109 0310 	add.w	r3, r9, #16
 800b608:	f109 0514 	add.w	r5, r9, #20
 800b60c:	f104 0e14 	add.w	lr, r4, #20
 800b610:	f100 0b14 	add.w	fp, r0, #20
 800b614:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b618:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b61c:	9301      	str	r3, [sp, #4]
 800b61e:	46d9      	mov	r9, fp
 800b620:	f04f 0c00 	mov.w	ip, #0
 800b624:	9b01      	ldr	r3, [sp, #4]
 800b626:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b62a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b62e:	9301      	str	r3, [sp, #4]
 800b630:	fa1f f38a 	uxth.w	r3, sl
 800b634:	4619      	mov	r1, r3
 800b636:	b283      	uxth	r3, r0
 800b638:	1acb      	subs	r3, r1, r3
 800b63a:	0c00      	lsrs	r0, r0, #16
 800b63c:	4463      	add	r3, ip
 800b63e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b642:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b646:	b29b      	uxth	r3, r3
 800b648:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b64c:	4576      	cmp	r6, lr
 800b64e:	f849 3b04 	str.w	r3, [r9], #4
 800b652:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b656:	d8e5      	bhi.n	800b624 <__mdiff+0x88>
 800b658:	1b33      	subs	r3, r6, r4
 800b65a:	3b15      	subs	r3, #21
 800b65c:	f023 0303 	bic.w	r3, r3, #3
 800b660:	3415      	adds	r4, #21
 800b662:	3304      	adds	r3, #4
 800b664:	42a6      	cmp	r6, r4
 800b666:	bf38      	it	cc
 800b668:	2304      	movcc	r3, #4
 800b66a:	441d      	add	r5, r3
 800b66c:	445b      	add	r3, fp
 800b66e:	461e      	mov	r6, r3
 800b670:	462c      	mov	r4, r5
 800b672:	4544      	cmp	r4, r8
 800b674:	d30e      	bcc.n	800b694 <__mdiff+0xf8>
 800b676:	f108 0103 	add.w	r1, r8, #3
 800b67a:	1b49      	subs	r1, r1, r5
 800b67c:	f021 0103 	bic.w	r1, r1, #3
 800b680:	3d03      	subs	r5, #3
 800b682:	45a8      	cmp	r8, r5
 800b684:	bf38      	it	cc
 800b686:	2100      	movcc	r1, #0
 800b688:	440b      	add	r3, r1
 800b68a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b68e:	b191      	cbz	r1, 800b6b6 <__mdiff+0x11a>
 800b690:	6117      	str	r7, [r2, #16]
 800b692:	e79d      	b.n	800b5d0 <__mdiff+0x34>
 800b694:	f854 1b04 	ldr.w	r1, [r4], #4
 800b698:	46e6      	mov	lr, ip
 800b69a:	0c08      	lsrs	r0, r1, #16
 800b69c:	fa1c fc81 	uxtah	ip, ip, r1
 800b6a0:	4471      	add	r1, lr
 800b6a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b6a6:	b289      	uxth	r1, r1
 800b6a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b6ac:	f846 1b04 	str.w	r1, [r6], #4
 800b6b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b6b4:	e7dd      	b.n	800b672 <__mdiff+0xd6>
 800b6b6:	3f01      	subs	r7, #1
 800b6b8:	e7e7      	b.n	800b68a <__mdiff+0xee>
 800b6ba:	bf00      	nop
 800b6bc:	0800c9e0 	.word	0x0800c9e0
 800b6c0:	0800c9f1 	.word	0x0800c9f1

0800b6c4 <__d2b>:
 800b6c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b6c8:	460f      	mov	r7, r1
 800b6ca:	2101      	movs	r1, #1
 800b6cc:	ec59 8b10 	vmov	r8, r9, d0
 800b6d0:	4616      	mov	r6, r2
 800b6d2:	f7ff fccd 	bl	800b070 <_Balloc>
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	b930      	cbnz	r0, 800b6e8 <__d2b+0x24>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	4b23      	ldr	r3, [pc, #140]	@ (800b76c <__d2b+0xa8>)
 800b6de:	4824      	ldr	r0, [pc, #144]	@ (800b770 <__d2b+0xac>)
 800b6e0:	f240 310f 	movw	r1, #783	@ 0x30f
 800b6e4:	f000 fc3a 	bl	800bf5c <__assert_func>
 800b6e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b6ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6f0:	b10d      	cbz	r5, 800b6f6 <__d2b+0x32>
 800b6f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b6f6:	9301      	str	r3, [sp, #4]
 800b6f8:	f1b8 0300 	subs.w	r3, r8, #0
 800b6fc:	d023      	beq.n	800b746 <__d2b+0x82>
 800b6fe:	4668      	mov	r0, sp
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	f7ff fd7c 	bl	800b1fe <__lo0bits>
 800b706:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b70a:	b1d0      	cbz	r0, 800b742 <__d2b+0x7e>
 800b70c:	f1c0 0320 	rsb	r3, r0, #32
 800b710:	fa02 f303 	lsl.w	r3, r2, r3
 800b714:	430b      	orrs	r3, r1
 800b716:	40c2      	lsrs	r2, r0
 800b718:	6163      	str	r3, [r4, #20]
 800b71a:	9201      	str	r2, [sp, #4]
 800b71c:	9b01      	ldr	r3, [sp, #4]
 800b71e:	61a3      	str	r3, [r4, #24]
 800b720:	2b00      	cmp	r3, #0
 800b722:	bf0c      	ite	eq
 800b724:	2201      	moveq	r2, #1
 800b726:	2202      	movne	r2, #2
 800b728:	6122      	str	r2, [r4, #16]
 800b72a:	b1a5      	cbz	r5, 800b756 <__d2b+0x92>
 800b72c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b730:	4405      	add	r5, r0
 800b732:	603d      	str	r5, [r7, #0]
 800b734:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b738:	6030      	str	r0, [r6, #0]
 800b73a:	4620      	mov	r0, r4
 800b73c:	b003      	add	sp, #12
 800b73e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b742:	6161      	str	r1, [r4, #20]
 800b744:	e7ea      	b.n	800b71c <__d2b+0x58>
 800b746:	a801      	add	r0, sp, #4
 800b748:	f7ff fd59 	bl	800b1fe <__lo0bits>
 800b74c:	9b01      	ldr	r3, [sp, #4]
 800b74e:	6163      	str	r3, [r4, #20]
 800b750:	3020      	adds	r0, #32
 800b752:	2201      	movs	r2, #1
 800b754:	e7e8      	b.n	800b728 <__d2b+0x64>
 800b756:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b75a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b75e:	6038      	str	r0, [r7, #0]
 800b760:	6918      	ldr	r0, [r3, #16]
 800b762:	f7ff fd2d 	bl	800b1c0 <__hi0bits>
 800b766:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b76a:	e7e5      	b.n	800b738 <__d2b+0x74>
 800b76c:	0800c9e0 	.word	0x0800c9e0
 800b770:	0800c9f1 	.word	0x0800c9f1

0800b774 <__ssputs_r>:
 800b774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b778:	688e      	ldr	r6, [r1, #8]
 800b77a:	461f      	mov	r7, r3
 800b77c:	42be      	cmp	r6, r7
 800b77e:	680b      	ldr	r3, [r1, #0]
 800b780:	4682      	mov	sl, r0
 800b782:	460c      	mov	r4, r1
 800b784:	4690      	mov	r8, r2
 800b786:	d82d      	bhi.n	800b7e4 <__ssputs_r+0x70>
 800b788:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b78c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b790:	d026      	beq.n	800b7e0 <__ssputs_r+0x6c>
 800b792:	6965      	ldr	r5, [r4, #20]
 800b794:	6909      	ldr	r1, [r1, #16]
 800b796:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b79a:	eba3 0901 	sub.w	r9, r3, r1
 800b79e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7a2:	1c7b      	adds	r3, r7, #1
 800b7a4:	444b      	add	r3, r9
 800b7a6:	106d      	asrs	r5, r5, #1
 800b7a8:	429d      	cmp	r5, r3
 800b7aa:	bf38      	it	cc
 800b7ac:	461d      	movcc	r5, r3
 800b7ae:	0553      	lsls	r3, r2, #21
 800b7b0:	d527      	bpl.n	800b802 <__ssputs_r+0x8e>
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	f7ff fbd0 	bl	800af58 <_malloc_r>
 800b7b8:	4606      	mov	r6, r0
 800b7ba:	b360      	cbz	r0, 800b816 <__ssputs_r+0xa2>
 800b7bc:	6921      	ldr	r1, [r4, #16]
 800b7be:	464a      	mov	r2, r9
 800b7c0:	f7fe fcfb 	bl	800a1ba <memcpy>
 800b7c4:	89a3      	ldrh	r3, [r4, #12]
 800b7c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b7ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7ce:	81a3      	strh	r3, [r4, #12]
 800b7d0:	6126      	str	r6, [r4, #16]
 800b7d2:	6165      	str	r5, [r4, #20]
 800b7d4:	444e      	add	r6, r9
 800b7d6:	eba5 0509 	sub.w	r5, r5, r9
 800b7da:	6026      	str	r6, [r4, #0]
 800b7dc:	60a5      	str	r5, [r4, #8]
 800b7de:	463e      	mov	r6, r7
 800b7e0:	42be      	cmp	r6, r7
 800b7e2:	d900      	bls.n	800b7e6 <__ssputs_r+0x72>
 800b7e4:	463e      	mov	r6, r7
 800b7e6:	6820      	ldr	r0, [r4, #0]
 800b7e8:	4632      	mov	r2, r6
 800b7ea:	4641      	mov	r1, r8
 800b7ec:	f000 fb6a 	bl	800bec4 <memmove>
 800b7f0:	68a3      	ldr	r3, [r4, #8]
 800b7f2:	1b9b      	subs	r3, r3, r6
 800b7f4:	60a3      	str	r3, [r4, #8]
 800b7f6:	6823      	ldr	r3, [r4, #0]
 800b7f8:	4433      	add	r3, r6
 800b7fa:	6023      	str	r3, [r4, #0]
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b802:	462a      	mov	r2, r5
 800b804:	f000 fbee 	bl	800bfe4 <_realloc_r>
 800b808:	4606      	mov	r6, r0
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d1e0      	bne.n	800b7d0 <__ssputs_r+0x5c>
 800b80e:	6921      	ldr	r1, [r4, #16]
 800b810:	4650      	mov	r0, sl
 800b812:	f7ff fb2d 	bl	800ae70 <_free_r>
 800b816:	230c      	movs	r3, #12
 800b818:	f8ca 3000 	str.w	r3, [sl]
 800b81c:	89a3      	ldrh	r3, [r4, #12]
 800b81e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b822:	81a3      	strh	r3, [r4, #12]
 800b824:	f04f 30ff 	mov.w	r0, #4294967295
 800b828:	e7e9      	b.n	800b7fe <__ssputs_r+0x8a>
	...

0800b82c <_svfiprintf_r>:
 800b82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b830:	4698      	mov	r8, r3
 800b832:	898b      	ldrh	r3, [r1, #12]
 800b834:	061b      	lsls	r3, r3, #24
 800b836:	b09d      	sub	sp, #116	@ 0x74
 800b838:	4607      	mov	r7, r0
 800b83a:	460d      	mov	r5, r1
 800b83c:	4614      	mov	r4, r2
 800b83e:	d510      	bpl.n	800b862 <_svfiprintf_r+0x36>
 800b840:	690b      	ldr	r3, [r1, #16]
 800b842:	b973      	cbnz	r3, 800b862 <_svfiprintf_r+0x36>
 800b844:	2140      	movs	r1, #64	@ 0x40
 800b846:	f7ff fb87 	bl	800af58 <_malloc_r>
 800b84a:	6028      	str	r0, [r5, #0]
 800b84c:	6128      	str	r0, [r5, #16]
 800b84e:	b930      	cbnz	r0, 800b85e <_svfiprintf_r+0x32>
 800b850:	230c      	movs	r3, #12
 800b852:	603b      	str	r3, [r7, #0]
 800b854:	f04f 30ff 	mov.w	r0, #4294967295
 800b858:	b01d      	add	sp, #116	@ 0x74
 800b85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b85e:	2340      	movs	r3, #64	@ 0x40
 800b860:	616b      	str	r3, [r5, #20]
 800b862:	2300      	movs	r3, #0
 800b864:	9309      	str	r3, [sp, #36]	@ 0x24
 800b866:	2320      	movs	r3, #32
 800b868:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b86c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b870:	2330      	movs	r3, #48	@ 0x30
 800b872:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ba10 <_svfiprintf_r+0x1e4>
 800b876:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b87a:	f04f 0901 	mov.w	r9, #1
 800b87e:	4623      	mov	r3, r4
 800b880:	469a      	mov	sl, r3
 800b882:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b886:	b10a      	cbz	r2, 800b88c <_svfiprintf_r+0x60>
 800b888:	2a25      	cmp	r2, #37	@ 0x25
 800b88a:	d1f9      	bne.n	800b880 <_svfiprintf_r+0x54>
 800b88c:	ebba 0b04 	subs.w	fp, sl, r4
 800b890:	d00b      	beq.n	800b8aa <_svfiprintf_r+0x7e>
 800b892:	465b      	mov	r3, fp
 800b894:	4622      	mov	r2, r4
 800b896:	4629      	mov	r1, r5
 800b898:	4638      	mov	r0, r7
 800b89a:	f7ff ff6b 	bl	800b774 <__ssputs_r>
 800b89e:	3001      	adds	r0, #1
 800b8a0:	f000 80a7 	beq.w	800b9f2 <_svfiprintf_r+0x1c6>
 800b8a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8a6:	445a      	add	r2, fp
 800b8a8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b8aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f000 809f 	beq.w	800b9f2 <_svfiprintf_r+0x1c6>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8be:	f10a 0a01 	add.w	sl, sl, #1
 800b8c2:	9304      	str	r3, [sp, #16]
 800b8c4:	9307      	str	r3, [sp, #28]
 800b8c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8ca:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8cc:	4654      	mov	r4, sl
 800b8ce:	2205      	movs	r2, #5
 800b8d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8d4:	484e      	ldr	r0, [pc, #312]	@ (800ba10 <_svfiprintf_r+0x1e4>)
 800b8d6:	f7f4 fc83 	bl	80001e0 <memchr>
 800b8da:	9a04      	ldr	r2, [sp, #16]
 800b8dc:	b9d8      	cbnz	r0, 800b916 <_svfiprintf_r+0xea>
 800b8de:	06d0      	lsls	r0, r2, #27
 800b8e0:	bf44      	itt	mi
 800b8e2:	2320      	movmi	r3, #32
 800b8e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8e8:	0711      	lsls	r1, r2, #28
 800b8ea:	bf44      	itt	mi
 800b8ec:	232b      	movmi	r3, #43	@ 0x2b
 800b8ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8f8:	d015      	beq.n	800b926 <_svfiprintf_r+0xfa>
 800b8fa:	9a07      	ldr	r2, [sp, #28]
 800b8fc:	4654      	mov	r4, sl
 800b8fe:	2000      	movs	r0, #0
 800b900:	f04f 0c0a 	mov.w	ip, #10
 800b904:	4621      	mov	r1, r4
 800b906:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b90a:	3b30      	subs	r3, #48	@ 0x30
 800b90c:	2b09      	cmp	r3, #9
 800b90e:	d94b      	bls.n	800b9a8 <_svfiprintf_r+0x17c>
 800b910:	b1b0      	cbz	r0, 800b940 <_svfiprintf_r+0x114>
 800b912:	9207      	str	r2, [sp, #28]
 800b914:	e014      	b.n	800b940 <_svfiprintf_r+0x114>
 800b916:	eba0 0308 	sub.w	r3, r0, r8
 800b91a:	fa09 f303 	lsl.w	r3, r9, r3
 800b91e:	4313      	orrs	r3, r2
 800b920:	9304      	str	r3, [sp, #16]
 800b922:	46a2      	mov	sl, r4
 800b924:	e7d2      	b.n	800b8cc <_svfiprintf_r+0xa0>
 800b926:	9b03      	ldr	r3, [sp, #12]
 800b928:	1d19      	adds	r1, r3, #4
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	9103      	str	r1, [sp, #12]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	bfbb      	ittet	lt
 800b932:	425b      	neglt	r3, r3
 800b934:	f042 0202 	orrlt.w	r2, r2, #2
 800b938:	9307      	strge	r3, [sp, #28]
 800b93a:	9307      	strlt	r3, [sp, #28]
 800b93c:	bfb8      	it	lt
 800b93e:	9204      	strlt	r2, [sp, #16]
 800b940:	7823      	ldrb	r3, [r4, #0]
 800b942:	2b2e      	cmp	r3, #46	@ 0x2e
 800b944:	d10a      	bne.n	800b95c <_svfiprintf_r+0x130>
 800b946:	7863      	ldrb	r3, [r4, #1]
 800b948:	2b2a      	cmp	r3, #42	@ 0x2a
 800b94a:	d132      	bne.n	800b9b2 <_svfiprintf_r+0x186>
 800b94c:	9b03      	ldr	r3, [sp, #12]
 800b94e:	1d1a      	adds	r2, r3, #4
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	9203      	str	r2, [sp, #12]
 800b954:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b958:	3402      	adds	r4, #2
 800b95a:	9305      	str	r3, [sp, #20]
 800b95c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ba20 <_svfiprintf_r+0x1f4>
 800b960:	7821      	ldrb	r1, [r4, #0]
 800b962:	2203      	movs	r2, #3
 800b964:	4650      	mov	r0, sl
 800b966:	f7f4 fc3b 	bl	80001e0 <memchr>
 800b96a:	b138      	cbz	r0, 800b97c <_svfiprintf_r+0x150>
 800b96c:	9b04      	ldr	r3, [sp, #16]
 800b96e:	eba0 000a 	sub.w	r0, r0, sl
 800b972:	2240      	movs	r2, #64	@ 0x40
 800b974:	4082      	lsls	r2, r0
 800b976:	4313      	orrs	r3, r2
 800b978:	3401      	adds	r4, #1
 800b97a:	9304      	str	r3, [sp, #16]
 800b97c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b980:	4824      	ldr	r0, [pc, #144]	@ (800ba14 <_svfiprintf_r+0x1e8>)
 800b982:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b986:	2206      	movs	r2, #6
 800b988:	f7f4 fc2a 	bl	80001e0 <memchr>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	d036      	beq.n	800b9fe <_svfiprintf_r+0x1d2>
 800b990:	4b21      	ldr	r3, [pc, #132]	@ (800ba18 <_svfiprintf_r+0x1ec>)
 800b992:	bb1b      	cbnz	r3, 800b9dc <_svfiprintf_r+0x1b0>
 800b994:	9b03      	ldr	r3, [sp, #12]
 800b996:	3307      	adds	r3, #7
 800b998:	f023 0307 	bic.w	r3, r3, #7
 800b99c:	3308      	adds	r3, #8
 800b99e:	9303      	str	r3, [sp, #12]
 800b9a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9a2:	4433      	add	r3, r6
 800b9a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9a6:	e76a      	b.n	800b87e <_svfiprintf_r+0x52>
 800b9a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9ac:	460c      	mov	r4, r1
 800b9ae:	2001      	movs	r0, #1
 800b9b0:	e7a8      	b.n	800b904 <_svfiprintf_r+0xd8>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	3401      	adds	r4, #1
 800b9b6:	9305      	str	r3, [sp, #20]
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	f04f 0c0a 	mov.w	ip, #10
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9c4:	3a30      	subs	r2, #48	@ 0x30
 800b9c6:	2a09      	cmp	r2, #9
 800b9c8:	d903      	bls.n	800b9d2 <_svfiprintf_r+0x1a6>
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d0c6      	beq.n	800b95c <_svfiprintf_r+0x130>
 800b9ce:	9105      	str	r1, [sp, #20]
 800b9d0:	e7c4      	b.n	800b95c <_svfiprintf_r+0x130>
 800b9d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9d6:	4604      	mov	r4, r0
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e7f0      	b.n	800b9be <_svfiprintf_r+0x192>
 800b9dc:	ab03      	add	r3, sp, #12
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	462a      	mov	r2, r5
 800b9e2:	4b0e      	ldr	r3, [pc, #56]	@ (800ba1c <_svfiprintf_r+0x1f0>)
 800b9e4:	a904      	add	r1, sp, #16
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	f7fd fdbe 	bl	8009568 <_printf_float>
 800b9ec:	1c42      	adds	r2, r0, #1
 800b9ee:	4606      	mov	r6, r0
 800b9f0:	d1d6      	bne.n	800b9a0 <_svfiprintf_r+0x174>
 800b9f2:	89ab      	ldrh	r3, [r5, #12]
 800b9f4:	065b      	lsls	r3, r3, #25
 800b9f6:	f53f af2d 	bmi.w	800b854 <_svfiprintf_r+0x28>
 800b9fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9fc:	e72c      	b.n	800b858 <_svfiprintf_r+0x2c>
 800b9fe:	ab03      	add	r3, sp, #12
 800ba00:	9300      	str	r3, [sp, #0]
 800ba02:	462a      	mov	r2, r5
 800ba04:	4b05      	ldr	r3, [pc, #20]	@ (800ba1c <_svfiprintf_r+0x1f0>)
 800ba06:	a904      	add	r1, sp, #16
 800ba08:	4638      	mov	r0, r7
 800ba0a:	f7fe f845 	bl	8009a98 <_printf_i>
 800ba0e:	e7ed      	b.n	800b9ec <_svfiprintf_r+0x1c0>
 800ba10:	0800cb48 	.word	0x0800cb48
 800ba14:	0800cb52 	.word	0x0800cb52
 800ba18:	08009569 	.word	0x08009569
 800ba1c:	0800b775 	.word	0x0800b775
 800ba20:	0800cb4e 	.word	0x0800cb4e

0800ba24 <__sfputc_r>:
 800ba24:	6893      	ldr	r3, [r2, #8]
 800ba26:	3b01      	subs	r3, #1
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	b410      	push	{r4}
 800ba2c:	6093      	str	r3, [r2, #8]
 800ba2e:	da08      	bge.n	800ba42 <__sfputc_r+0x1e>
 800ba30:	6994      	ldr	r4, [r2, #24]
 800ba32:	42a3      	cmp	r3, r4
 800ba34:	db01      	blt.n	800ba3a <__sfputc_r+0x16>
 800ba36:	290a      	cmp	r1, #10
 800ba38:	d103      	bne.n	800ba42 <__sfputc_r+0x1e>
 800ba3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba3e:	f7fe baa9 	b.w	8009f94 <__swbuf_r>
 800ba42:	6813      	ldr	r3, [r2, #0]
 800ba44:	1c58      	adds	r0, r3, #1
 800ba46:	6010      	str	r0, [r2, #0]
 800ba48:	7019      	strb	r1, [r3, #0]
 800ba4a:	4608      	mov	r0, r1
 800ba4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <__sfputs_r>:
 800ba52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba54:	4606      	mov	r6, r0
 800ba56:	460f      	mov	r7, r1
 800ba58:	4614      	mov	r4, r2
 800ba5a:	18d5      	adds	r5, r2, r3
 800ba5c:	42ac      	cmp	r4, r5
 800ba5e:	d101      	bne.n	800ba64 <__sfputs_r+0x12>
 800ba60:	2000      	movs	r0, #0
 800ba62:	e007      	b.n	800ba74 <__sfputs_r+0x22>
 800ba64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba68:	463a      	mov	r2, r7
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f7ff ffda 	bl	800ba24 <__sfputc_r>
 800ba70:	1c43      	adds	r3, r0, #1
 800ba72:	d1f3      	bne.n	800ba5c <__sfputs_r+0xa>
 800ba74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba78 <_vfiprintf_r>:
 800ba78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba7c:	460d      	mov	r5, r1
 800ba7e:	b09d      	sub	sp, #116	@ 0x74
 800ba80:	4614      	mov	r4, r2
 800ba82:	4698      	mov	r8, r3
 800ba84:	4606      	mov	r6, r0
 800ba86:	b118      	cbz	r0, 800ba90 <_vfiprintf_r+0x18>
 800ba88:	6a03      	ldr	r3, [r0, #32]
 800ba8a:	b90b      	cbnz	r3, 800ba90 <_vfiprintf_r+0x18>
 800ba8c:	f7fe f9b0 	bl	8009df0 <__sinit>
 800ba90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba92:	07d9      	lsls	r1, r3, #31
 800ba94:	d405      	bmi.n	800baa2 <_vfiprintf_r+0x2a>
 800ba96:	89ab      	ldrh	r3, [r5, #12]
 800ba98:	059a      	lsls	r2, r3, #22
 800ba9a:	d402      	bmi.n	800baa2 <_vfiprintf_r+0x2a>
 800ba9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba9e:	f7fe fb8a 	bl	800a1b6 <__retarget_lock_acquire_recursive>
 800baa2:	89ab      	ldrh	r3, [r5, #12]
 800baa4:	071b      	lsls	r3, r3, #28
 800baa6:	d501      	bpl.n	800baac <_vfiprintf_r+0x34>
 800baa8:	692b      	ldr	r3, [r5, #16]
 800baaa:	b99b      	cbnz	r3, 800bad4 <_vfiprintf_r+0x5c>
 800baac:	4629      	mov	r1, r5
 800baae:	4630      	mov	r0, r6
 800bab0:	f7fe faae 	bl	800a010 <__swsetup_r>
 800bab4:	b170      	cbz	r0, 800bad4 <_vfiprintf_r+0x5c>
 800bab6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bab8:	07dc      	lsls	r4, r3, #31
 800baba:	d504      	bpl.n	800bac6 <_vfiprintf_r+0x4e>
 800babc:	f04f 30ff 	mov.w	r0, #4294967295
 800bac0:	b01d      	add	sp, #116	@ 0x74
 800bac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac6:	89ab      	ldrh	r3, [r5, #12]
 800bac8:	0598      	lsls	r0, r3, #22
 800baca:	d4f7      	bmi.n	800babc <_vfiprintf_r+0x44>
 800bacc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bace:	f7fe fb73 	bl	800a1b8 <__retarget_lock_release_recursive>
 800bad2:	e7f3      	b.n	800babc <_vfiprintf_r+0x44>
 800bad4:	2300      	movs	r3, #0
 800bad6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bad8:	2320      	movs	r3, #32
 800bada:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bade:	f8cd 800c 	str.w	r8, [sp, #12]
 800bae2:	2330      	movs	r3, #48	@ 0x30
 800bae4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc94 <_vfiprintf_r+0x21c>
 800bae8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800baec:	f04f 0901 	mov.w	r9, #1
 800baf0:	4623      	mov	r3, r4
 800baf2:	469a      	mov	sl, r3
 800baf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baf8:	b10a      	cbz	r2, 800bafe <_vfiprintf_r+0x86>
 800bafa:	2a25      	cmp	r2, #37	@ 0x25
 800bafc:	d1f9      	bne.n	800baf2 <_vfiprintf_r+0x7a>
 800bafe:	ebba 0b04 	subs.w	fp, sl, r4
 800bb02:	d00b      	beq.n	800bb1c <_vfiprintf_r+0xa4>
 800bb04:	465b      	mov	r3, fp
 800bb06:	4622      	mov	r2, r4
 800bb08:	4629      	mov	r1, r5
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	f7ff ffa1 	bl	800ba52 <__sfputs_r>
 800bb10:	3001      	adds	r0, #1
 800bb12:	f000 80a7 	beq.w	800bc64 <_vfiprintf_r+0x1ec>
 800bb16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb18:	445a      	add	r2, fp
 800bb1a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb1c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 809f 	beq.w	800bc64 <_vfiprintf_r+0x1ec>
 800bb26:	2300      	movs	r3, #0
 800bb28:	f04f 32ff 	mov.w	r2, #4294967295
 800bb2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb30:	f10a 0a01 	add.w	sl, sl, #1
 800bb34:	9304      	str	r3, [sp, #16]
 800bb36:	9307      	str	r3, [sp, #28]
 800bb38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb3e:	4654      	mov	r4, sl
 800bb40:	2205      	movs	r2, #5
 800bb42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb46:	4853      	ldr	r0, [pc, #332]	@ (800bc94 <_vfiprintf_r+0x21c>)
 800bb48:	f7f4 fb4a 	bl	80001e0 <memchr>
 800bb4c:	9a04      	ldr	r2, [sp, #16]
 800bb4e:	b9d8      	cbnz	r0, 800bb88 <_vfiprintf_r+0x110>
 800bb50:	06d1      	lsls	r1, r2, #27
 800bb52:	bf44      	itt	mi
 800bb54:	2320      	movmi	r3, #32
 800bb56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb5a:	0713      	lsls	r3, r2, #28
 800bb5c:	bf44      	itt	mi
 800bb5e:	232b      	movmi	r3, #43	@ 0x2b
 800bb60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb64:	f89a 3000 	ldrb.w	r3, [sl]
 800bb68:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb6a:	d015      	beq.n	800bb98 <_vfiprintf_r+0x120>
 800bb6c:	9a07      	ldr	r2, [sp, #28]
 800bb6e:	4654      	mov	r4, sl
 800bb70:	2000      	movs	r0, #0
 800bb72:	f04f 0c0a 	mov.w	ip, #10
 800bb76:	4621      	mov	r1, r4
 800bb78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb7c:	3b30      	subs	r3, #48	@ 0x30
 800bb7e:	2b09      	cmp	r3, #9
 800bb80:	d94b      	bls.n	800bc1a <_vfiprintf_r+0x1a2>
 800bb82:	b1b0      	cbz	r0, 800bbb2 <_vfiprintf_r+0x13a>
 800bb84:	9207      	str	r2, [sp, #28]
 800bb86:	e014      	b.n	800bbb2 <_vfiprintf_r+0x13a>
 800bb88:	eba0 0308 	sub.w	r3, r0, r8
 800bb8c:	fa09 f303 	lsl.w	r3, r9, r3
 800bb90:	4313      	orrs	r3, r2
 800bb92:	9304      	str	r3, [sp, #16]
 800bb94:	46a2      	mov	sl, r4
 800bb96:	e7d2      	b.n	800bb3e <_vfiprintf_r+0xc6>
 800bb98:	9b03      	ldr	r3, [sp, #12]
 800bb9a:	1d19      	adds	r1, r3, #4
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	9103      	str	r1, [sp, #12]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	bfbb      	ittet	lt
 800bba4:	425b      	neglt	r3, r3
 800bba6:	f042 0202 	orrlt.w	r2, r2, #2
 800bbaa:	9307      	strge	r3, [sp, #28]
 800bbac:	9307      	strlt	r3, [sp, #28]
 800bbae:	bfb8      	it	lt
 800bbb0:	9204      	strlt	r2, [sp, #16]
 800bbb2:	7823      	ldrb	r3, [r4, #0]
 800bbb4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbb6:	d10a      	bne.n	800bbce <_vfiprintf_r+0x156>
 800bbb8:	7863      	ldrb	r3, [r4, #1]
 800bbba:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbbc:	d132      	bne.n	800bc24 <_vfiprintf_r+0x1ac>
 800bbbe:	9b03      	ldr	r3, [sp, #12]
 800bbc0:	1d1a      	adds	r2, r3, #4
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	9203      	str	r2, [sp, #12]
 800bbc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbca:	3402      	adds	r4, #2
 800bbcc:	9305      	str	r3, [sp, #20]
 800bbce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bca4 <_vfiprintf_r+0x22c>
 800bbd2:	7821      	ldrb	r1, [r4, #0]
 800bbd4:	2203      	movs	r2, #3
 800bbd6:	4650      	mov	r0, sl
 800bbd8:	f7f4 fb02 	bl	80001e0 <memchr>
 800bbdc:	b138      	cbz	r0, 800bbee <_vfiprintf_r+0x176>
 800bbde:	9b04      	ldr	r3, [sp, #16]
 800bbe0:	eba0 000a 	sub.w	r0, r0, sl
 800bbe4:	2240      	movs	r2, #64	@ 0x40
 800bbe6:	4082      	lsls	r2, r0
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	3401      	adds	r4, #1
 800bbec:	9304      	str	r3, [sp, #16]
 800bbee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf2:	4829      	ldr	r0, [pc, #164]	@ (800bc98 <_vfiprintf_r+0x220>)
 800bbf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbf8:	2206      	movs	r2, #6
 800bbfa:	f7f4 faf1 	bl	80001e0 <memchr>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	d03f      	beq.n	800bc82 <_vfiprintf_r+0x20a>
 800bc02:	4b26      	ldr	r3, [pc, #152]	@ (800bc9c <_vfiprintf_r+0x224>)
 800bc04:	bb1b      	cbnz	r3, 800bc4e <_vfiprintf_r+0x1d6>
 800bc06:	9b03      	ldr	r3, [sp, #12]
 800bc08:	3307      	adds	r3, #7
 800bc0a:	f023 0307 	bic.w	r3, r3, #7
 800bc0e:	3308      	adds	r3, #8
 800bc10:	9303      	str	r3, [sp, #12]
 800bc12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc14:	443b      	add	r3, r7
 800bc16:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc18:	e76a      	b.n	800baf0 <_vfiprintf_r+0x78>
 800bc1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc1e:	460c      	mov	r4, r1
 800bc20:	2001      	movs	r0, #1
 800bc22:	e7a8      	b.n	800bb76 <_vfiprintf_r+0xfe>
 800bc24:	2300      	movs	r3, #0
 800bc26:	3401      	adds	r4, #1
 800bc28:	9305      	str	r3, [sp, #20]
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	f04f 0c0a 	mov.w	ip, #10
 800bc30:	4620      	mov	r0, r4
 800bc32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc36:	3a30      	subs	r2, #48	@ 0x30
 800bc38:	2a09      	cmp	r2, #9
 800bc3a:	d903      	bls.n	800bc44 <_vfiprintf_r+0x1cc>
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d0c6      	beq.n	800bbce <_vfiprintf_r+0x156>
 800bc40:	9105      	str	r1, [sp, #20]
 800bc42:	e7c4      	b.n	800bbce <_vfiprintf_r+0x156>
 800bc44:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc48:	4604      	mov	r4, r0
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e7f0      	b.n	800bc30 <_vfiprintf_r+0x1b8>
 800bc4e:	ab03      	add	r3, sp, #12
 800bc50:	9300      	str	r3, [sp, #0]
 800bc52:	462a      	mov	r2, r5
 800bc54:	4b12      	ldr	r3, [pc, #72]	@ (800bca0 <_vfiprintf_r+0x228>)
 800bc56:	a904      	add	r1, sp, #16
 800bc58:	4630      	mov	r0, r6
 800bc5a:	f7fd fc85 	bl	8009568 <_printf_float>
 800bc5e:	4607      	mov	r7, r0
 800bc60:	1c78      	adds	r0, r7, #1
 800bc62:	d1d6      	bne.n	800bc12 <_vfiprintf_r+0x19a>
 800bc64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc66:	07d9      	lsls	r1, r3, #31
 800bc68:	d405      	bmi.n	800bc76 <_vfiprintf_r+0x1fe>
 800bc6a:	89ab      	ldrh	r3, [r5, #12]
 800bc6c:	059a      	lsls	r2, r3, #22
 800bc6e:	d402      	bmi.n	800bc76 <_vfiprintf_r+0x1fe>
 800bc70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc72:	f7fe faa1 	bl	800a1b8 <__retarget_lock_release_recursive>
 800bc76:	89ab      	ldrh	r3, [r5, #12]
 800bc78:	065b      	lsls	r3, r3, #25
 800bc7a:	f53f af1f 	bmi.w	800babc <_vfiprintf_r+0x44>
 800bc7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc80:	e71e      	b.n	800bac0 <_vfiprintf_r+0x48>
 800bc82:	ab03      	add	r3, sp, #12
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	462a      	mov	r2, r5
 800bc88:	4b05      	ldr	r3, [pc, #20]	@ (800bca0 <_vfiprintf_r+0x228>)
 800bc8a:	a904      	add	r1, sp, #16
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	f7fd ff03 	bl	8009a98 <_printf_i>
 800bc92:	e7e4      	b.n	800bc5e <_vfiprintf_r+0x1e6>
 800bc94:	0800cb48 	.word	0x0800cb48
 800bc98:	0800cb52 	.word	0x0800cb52
 800bc9c:	08009569 	.word	0x08009569
 800bca0:	0800ba53 	.word	0x0800ba53
 800bca4:	0800cb4e 	.word	0x0800cb4e

0800bca8 <__sflush_r>:
 800bca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb0:	0716      	lsls	r6, r2, #28
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	d454      	bmi.n	800bd62 <__sflush_r+0xba>
 800bcb8:	684b      	ldr	r3, [r1, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	dc02      	bgt.n	800bcc4 <__sflush_r+0x1c>
 800bcbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	dd48      	ble.n	800bd56 <__sflush_r+0xae>
 800bcc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcc6:	2e00      	cmp	r6, #0
 800bcc8:	d045      	beq.n	800bd56 <__sflush_r+0xae>
 800bcca:	2300      	movs	r3, #0
 800bccc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bcd0:	682f      	ldr	r7, [r5, #0]
 800bcd2:	6a21      	ldr	r1, [r4, #32]
 800bcd4:	602b      	str	r3, [r5, #0]
 800bcd6:	d030      	beq.n	800bd3a <__sflush_r+0x92>
 800bcd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcda:	89a3      	ldrh	r3, [r4, #12]
 800bcdc:	0759      	lsls	r1, r3, #29
 800bcde:	d505      	bpl.n	800bcec <__sflush_r+0x44>
 800bce0:	6863      	ldr	r3, [r4, #4]
 800bce2:	1ad2      	subs	r2, r2, r3
 800bce4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bce6:	b10b      	cbz	r3, 800bcec <__sflush_r+0x44>
 800bce8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcea:	1ad2      	subs	r2, r2, r3
 800bcec:	2300      	movs	r3, #0
 800bcee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcf0:	6a21      	ldr	r1, [r4, #32]
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	47b0      	blx	r6
 800bcf6:	1c43      	adds	r3, r0, #1
 800bcf8:	89a3      	ldrh	r3, [r4, #12]
 800bcfa:	d106      	bne.n	800bd0a <__sflush_r+0x62>
 800bcfc:	6829      	ldr	r1, [r5, #0]
 800bcfe:	291d      	cmp	r1, #29
 800bd00:	d82b      	bhi.n	800bd5a <__sflush_r+0xb2>
 800bd02:	4a2a      	ldr	r2, [pc, #168]	@ (800bdac <__sflush_r+0x104>)
 800bd04:	410a      	asrs	r2, r1
 800bd06:	07d6      	lsls	r6, r2, #31
 800bd08:	d427      	bmi.n	800bd5a <__sflush_r+0xb2>
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	6062      	str	r2, [r4, #4]
 800bd0e:	04d9      	lsls	r1, r3, #19
 800bd10:	6922      	ldr	r2, [r4, #16]
 800bd12:	6022      	str	r2, [r4, #0]
 800bd14:	d504      	bpl.n	800bd20 <__sflush_r+0x78>
 800bd16:	1c42      	adds	r2, r0, #1
 800bd18:	d101      	bne.n	800bd1e <__sflush_r+0x76>
 800bd1a:	682b      	ldr	r3, [r5, #0]
 800bd1c:	b903      	cbnz	r3, 800bd20 <__sflush_r+0x78>
 800bd1e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd22:	602f      	str	r7, [r5, #0]
 800bd24:	b1b9      	cbz	r1, 800bd56 <__sflush_r+0xae>
 800bd26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd2a:	4299      	cmp	r1, r3
 800bd2c:	d002      	beq.n	800bd34 <__sflush_r+0x8c>
 800bd2e:	4628      	mov	r0, r5
 800bd30:	f7ff f89e 	bl	800ae70 <_free_r>
 800bd34:	2300      	movs	r3, #0
 800bd36:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd38:	e00d      	b.n	800bd56 <__sflush_r+0xae>
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	47b0      	blx	r6
 800bd40:	4602      	mov	r2, r0
 800bd42:	1c50      	adds	r0, r2, #1
 800bd44:	d1c9      	bne.n	800bcda <__sflush_r+0x32>
 800bd46:	682b      	ldr	r3, [r5, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d0c6      	beq.n	800bcda <__sflush_r+0x32>
 800bd4c:	2b1d      	cmp	r3, #29
 800bd4e:	d001      	beq.n	800bd54 <__sflush_r+0xac>
 800bd50:	2b16      	cmp	r3, #22
 800bd52:	d11e      	bne.n	800bd92 <__sflush_r+0xea>
 800bd54:	602f      	str	r7, [r5, #0]
 800bd56:	2000      	movs	r0, #0
 800bd58:	e022      	b.n	800bda0 <__sflush_r+0xf8>
 800bd5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd5e:	b21b      	sxth	r3, r3
 800bd60:	e01b      	b.n	800bd9a <__sflush_r+0xf2>
 800bd62:	690f      	ldr	r7, [r1, #16]
 800bd64:	2f00      	cmp	r7, #0
 800bd66:	d0f6      	beq.n	800bd56 <__sflush_r+0xae>
 800bd68:	0793      	lsls	r3, r2, #30
 800bd6a:	680e      	ldr	r6, [r1, #0]
 800bd6c:	bf08      	it	eq
 800bd6e:	694b      	ldreq	r3, [r1, #20]
 800bd70:	600f      	str	r7, [r1, #0]
 800bd72:	bf18      	it	ne
 800bd74:	2300      	movne	r3, #0
 800bd76:	eba6 0807 	sub.w	r8, r6, r7
 800bd7a:	608b      	str	r3, [r1, #8]
 800bd7c:	f1b8 0f00 	cmp.w	r8, #0
 800bd80:	dde9      	ble.n	800bd56 <__sflush_r+0xae>
 800bd82:	6a21      	ldr	r1, [r4, #32]
 800bd84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd86:	4643      	mov	r3, r8
 800bd88:	463a      	mov	r2, r7
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	47b0      	blx	r6
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	dc08      	bgt.n	800bda4 <__sflush_r+0xfc>
 800bd92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd9a:	81a3      	strh	r3, [r4, #12]
 800bd9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda4:	4407      	add	r7, r0
 800bda6:	eba8 0800 	sub.w	r8, r8, r0
 800bdaa:	e7e7      	b.n	800bd7c <__sflush_r+0xd4>
 800bdac:	dfbffffe 	.word	0xdfbffffe

0800bdb0 <_fflush_r>:
 800bdb0:	b538      	push	{r3, r4, r5, lr}
 800bdb2:	690b      	ldr	r3, [r1, #16]
 800bdb4:	4605      	mov	r5, r0
 800bdb6:	460c      	mov	r4, r1
 800bdb8:	b913      	cbnz	r3, 800bdc0 <_fflush_r+0x10>
 800bdba:	2500      	movs	r5, #0
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	bd38      	pop	{r3, r4, r5, pc}
 800bdc0:	b118      	cbz	r0, 800bdca <_fflush_r+0x1a>
 800bdc2:	6a03      	ldr	r3, [r0, #32]
 800bdc4:	b90b      	cbnz	r3, 800bdca <_fflush_r+0x1a>
 800bdc6:	f7fe f813 	bl	8009df0 <__sinit>
 800bdca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d0f3      	beq.n	800bdba <_fflush_r+0xa>
 800bdd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bdd4:	07d0      	lsls	r0, r2, #31
 800bdd6:	d404      	bmi.n	800bde2 <_fflush_r+0x32>
 800bdd8:	0599      	lsls	r1, r3, #22
 800bdda:	d402      	bmi.n	800bde2 <_fflush_r+0x32>
 800bddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdde:	f7fe f9ea 	bl	800a1b6 <__retarget_lock_acquire_recursive>
 800bde2:	4628      	mov	r0, r5
 800bde4:	4621      	mov	r1, r4
 800bde6:	f7ff ff5f 	bl	800bca8 <__sflush_r>
 800bdea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bdec:	07da      	lsls	r2, r3, #31
 800bdee:	4605      	mov	r5, r0
 800bdf0:	d4e4      	bmi.n	800bdbc <_fflush_r+0xc>
 800bdf2:	89a3      	ldrh	r3, [r4, #12]
 800bdf4:	059b      	lsls	r3, r3, #22
 800bdf6:	d4e1      	bmi.n	800bdbc <_fflush_r+0xc>
 800bdf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdfa:	f7fe f9dd 	bl	800a1b8 <__retarget_lock_release_recursive>
 800bdfe:	e7dd      	b.n	800bdbc <_fflush_r+0xc>

0800be00 <__swhatbuf_r>:
 800be00:	b570      	push	{r4, r5, r6, lr}
 800be02:	460c      	mov	r4, r1
 800be04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be08:	2900      	cmp	r1, #0
 800be0a:	b096      	sub	sp, #88	@ 0x58
 800be0c:	4615      	mov	r5, r2
 800be0e:	461e      	mov	r6, r3
 800be10:	da0d      	bge.n	800be2e <__swhatbuf_r+0x2e>
 800be12:	89a3      	ldrh	r3, [r4, #12]
 800be14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be18:	f04f 0100 	mov.w	r1, #0
 800be1c:	bf14      	ite	ne
 800be1e:	2340      	movne	r3, #64	@ 0x40
 800be20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be24:	2000      	movs	r0, #0
 800be26:	6031      	str	r1, [r6, #0]
 800be28:	602b      	str	r3, [r5, #0]
 800be2a:	b016      	add	sp, #88	@ 0x58
 800be2c:	bd70      	pop	{r4, r5, r6, pc}
 800be2e:	466a      	mov	r2, sp
 800be30:	f000 f862 	bl	800bef8 <_fstat_r>
 800be34:	2800      	cmp	r0, #0
 800be36:	dbec      	blt.n	800be12 <__swhatbuf_r+0x12>
 800be38:	9901      	ldr	r1, [sp, #4]
 800be3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be42:	4259      	negs	r1, r3
 800be44:	4159      	adcs	r1, r3
 800be46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be4a:	e7eb      	b.n	800be24 <__swhatbuf_r+0x24>

0800be4c <__smakebuf_r>:
 800be4c:	898b      	ldrh	r3, [r1, #12]
 800be4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be50:	079d      	lsls	r5, r3, #30
 800be52:	4606      	mov	r6, r0
 800be54:	460c      	mov	r4, r1
 800be56:	d507      	bpl.n	800be68 <__smakebuf_r+0x1c>
 800be58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be5c:	6023      	str	r3, [r4, #0]
 800be5e:	6123      	str	r3, [r4, #16]
 800be60:	2301      	movs	r3, #1
 800be62:	6163      	str	r3, [r4, #20]
 800be64:	b003      	add	sp, #12
 800be66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be68:	ab01      	add	r3, sp, #4
 800be6a:	466a      	mov	r2, sp
 800be6c:	f7ff ffc8 	bl	800be00 <__swhatbuf_r>
 800be70:	9f00      	ldr	r7, [sp, #0]
 800be72:	4605      	mov	r5, r0
 800be74:	4639      	mov	r1, r7
 800be76:	4630      	mov	r0, r6
 800be78:	f7ff f86e 	bl	800af58 <_malloc_r>
 800be7c:	b948      	cbnz	r0, 800be92 <__smakebuf_r+0x46>
 800be7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be82:	059a      	lsls	r2, r3, #22
 800be84:	d4ee      	bmi.n	800be64 <__smakebuf_r+0x18>
 800be86:	f023 0303 	bic.w	r3, r3, #3
 800be8a:	f043 0302 	orr.w	r3, r3, #2
 800be8e:	81a3      	strh	r3, [r4, #12]
 800be90:	e7e2      	b.n	800be58 <__smakebuf_r+0xc>
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	6020      	str	r0, [r4, #0]
 800be96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be9a:	81a3      	strh	r3, [r4, #12]
 800be9c:	9b01      	ldr	r3, [sp, #4]
 800be9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bea2:	b15b      	cbz	r3, 800bebc <__smakebuf_r+0x70>
 800bea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bea8:	4630      	mov	r0, r6
 800beaa:	f000 f837 	bl	800bf1c <_isatty_r>
 800beae:	b128      	cbz	r0, 800bebc <__smakebuf_r+0x70>
 800beb0:	89a3      	ldrh	r3, [r4, #12]
 800beb2:	f023 0303 	bic.w	r3, r3, #3
 800beb6:	f043 0301 	orr.w	r3, r3, #1
 800beba:	81a3      	strh	r3, [r4, #12]
 800bebc:	89a3      	ldrh	r3, [r4, #12]
 800bebe:	431d      	orrs	r5, r3
 800bec0:	81a5      	strh	r5, [r4, #12]
 800bec2:	e7cf      	b.n	800be64 <__smakebuf_r+0x18>

0800bec4 <memmove>:
 800bec4:	4288      	cmp	r0, r1
 800bec6:	b510      	push	{r4, lr}
 800bec8:	eb01 0402 	add.w	r4, r1, r2
 800becc:	d902      	bls.n	800bed4 <memmove+0x10>
 800bece:	4284      	cmp	r4, r0
 800bed0:	4623      	mov	r3, r4
 800bed2:	d807      	bhi.n	800bee4 <memmove+0x20>
 800bed4:	1e43      	subs	r3, r0, #1
 800bed6:	42a1      	cmp	r1, r4
 800bed8:	d008      	beq.n	800beec <memmove+0x28>
 800beda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bede:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bee2:	e7f8      	b.n	800bed6 <memmove+0x12>
 800bee4:	4402      	add	r2, r0
 800bee6:	4601      	mov	r1, r0
 800bee8:	428a      	cmp	r2, r1
 800beea:	d100      	bne.n	800beee <memmove+0x2a>
 800beec:	bd10      	pop	{r4, pc}
 800beee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bef2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bef6:	e7f7      	b.n	800bee8 <memmove+0x24>

0800bef8 <_fstat_r>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	4d07      	ldr	r5, [pc, #28]	@ (800bf18 <_fstat_r+0x20>)
 800befc:	2300      	movs	r3, #0
 800befe:	4604      	mov	r4, r0
 800bf00:	4608      	mov	r0, r1
 800bf02:	4611      	mov	r1, r2
 800bf04:	602b      	str	r3, [r5, #0]
 800bf06:	f7f6 ff65 	bl	8002dd4 <_fstat>
 800bf0a:	1c43      	adds	r3, r0, #1
 800bf0c:	d102      	bne.n	800bf14 <_fstat_r+0x1c>
 800bf0e:	682b      	ldr	r3, [r5, #0]
 800bf10:	b103      	cbz	r3, 800bf14 <_fstat_r+0x1c>
 800bf12:	6023      	str	r3, [r4, #0]
 800bf14:	bd38      	pop	{r3, r4, r5, pc}
 800bf16:	bf00      	nop
 800bf18:	20005018 	.word	0x20005018

0800bf1c <_isatty_r>:
 800bf1c:	b538      	push	{r3, r4, r5, lr}
 800bf1e:	4d06      	ldr	r5, [pc, #24]	@ (800bf38 <_isatty_r+0x1c>)
 800bf20:	2300      	movs	r3, #0
 800bf22:	4604      	mov	r4, r0
 800bf24:	4608      	mov	r0, r1
 800bf26:	602b      	str	r3, [r5, #0]
 800bf28:	f7f6 ff64 	bl	8002df4 <_isatty>
 800bf2c:	1c43      	adds	r3, r0, #1
 800bf2e:	d102      	bne.n	800bf36 <_isatty_r+0x1a>
 800bf30:	682b      	ldr	r3, [r5, #0]
 800bf32:	b103      	cbz	r3, 800bf36 <_isatty_r+0x1a>
 800bf34:	6023      	str	r3, [r4, #0]
 800bf36:	bd38      	pop	{r3, r4, r5, pc}
 800bf38:	20005018 	.word	0x20005018

0800bf3c <_sbrk_r>:
 800bf3c:	b538      	push	{r3, r4, r5, lr}
 800bf3e:	4d06      	ldr	r5, [pc, #24]	@ (800bf58 <_sbrk_r+0x1c>)
 800bf40:	2300      	movs	r3, #0
 800bf42:	4604      	mov	r4, r0
 800bf44:	4608      	mov	r0, r1
 800bf46:	602b      	str	r3, [r5, #0]
 800bf48:	f7f6 ff6c 	bl	8002e24 <_sbrk>
 800bf4c:	1c43      	adds	r3, r0, #1
 800bf4e:	d102      	bne.n	800bf56 <_sbrk_r+0x1a>
 800bf50:	682b      	ldr	r3, [r5, #0]
 800bf52:	b103      	cbz	r3, 800bf56 <_sbrk_r+0x1a>
 800bf54:	6023      	str	r3, [r4, #0]
 800bf56:	bd38      	pop	{r3, r4, r5, pc}
 800bf58:	20005018 	.word	0x20005018

0800bf5c <__assert_func>:
 800bf5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf5e:	4614      	mov	r4, r2
 800bf60:	461a      	mov	r2, r3
 800bf62:	4b09      	ldr	r3, [pc, #36]	@ (800bf88 <__assert_func+0x2c>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4605      	mov	r5, r0
 800bf68:	68d8      	ldr	r0, [r3, #12]
 800bf6a:	b954      	cbnz	r4, 800bf82 <__assert_func+0x26>
 800bf6c:	4b07      	ldr	r3, [pc, #28]	@ (800bf8c <__assert_func+0x30>)
 800bf6e:	461c      	mov	r4, r3
 800bf70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf74:	9100      	str	r1, [sp, #0]
 800bf76:	462b      	mov	r3, r5
 800bf78:	4905      	ldr	r1, [pc, #20]	@ (800bf90 <__assert_func+0x34>)
 800bf7a:	f000 f86f 	bl	800c05c <fiprintf>
 800bf7e:	f000 f87f 	bl	800c080 <abort>
 800bf82:	4b04      	ldr	r3, [pc, #16]	@ (800bf94 <__assert_func+0x38>)
 800bf84:	e7f4      	b.n	800bf70 <__assert_func+0x14>
 800bf86:	bf00      	nop
 800bf88:	2000019c 	.word	0x2000019c
 800bf8c:	0800cb9e 	.word	0x0800cb9e
 800bf90:	0800cb70 	.word	0x0800cb70
 800bf94:	0800cb63 	.word	0x0800cb63

0800bf98 <_calloc_r>:
 800bf98:	b570      	push	{r4, r5, r6, lr}
 800bf9a:	fba1 5402 	umull	r5, r4, r1, r2
 800bf9e:	b93c      	cbnz	r4, 800bfb0 <_calloc_r+0x18>
 800bfa0:	4629      	mov	r1, r5
 800bfa2:	f7fe ffd9 	bl	800af58 <_malloc_r>
 800bfa6:	4606      	mov	r6, r0
 800bfa8:	b928      	cbnz	r0, 800bfb6 <_calloc_r+0x1e>
 800bfaa:	2600      	movs	r6, #0
 800bfac:	4630      	mov	r0, r6
 800bfae:	bd70      	pop	{r4, r5, r6, pc}
 800bfb0:	220c      	movs	r2, #12
 800bfb2:	6002      	str	r2, [r0, #0]
 800bfb4:	e7f9      	b.n	800bfaa <_calloc_r+0x12>
 800bfb6:	462a      	mov	r2, r5
 800bfb8:	4621      	mov	r1, r4
 800bfba:	f7fe f87f 	bl	800a0bc <memset>
 800bfbe:	e7f5      	b.n	800bfac <_calloc_r+0x14>

0800bfc0 <__ascii_mbtowc>:
 800bfc0:	b082      	sub	sp, #8
 800bfc2:	b901      	cbnz	r1, 800bfc6 <__ascii_mbtowc+0x6>
 800bfc4:	a901      	add	r1, sp, #4
 800bfc6:	b142      	cbz	r2, 800bfda <__ascii_mbtowc+0x1a>
 800bfc8:	b14b      	cbz	r3, 800bfde <__ascii_mbtowc+0x1e>
 800bfca:	7813      	ldrb	r3, [r2, #0]
 800bfcc:	600b      	str	r3, [r1, #0]
 800bfce:	7812      	ldrb	r2, [r2, #0]
 800bfd0:	1e10      	subs	r0, r2, #0
 800bfd2:	bf18      	it	ne
 800bfd4:	2001      	movne	r0, #1
 800bfd6:	b002      	add	sp, #8
 800bfd8:	4770      	bx	lr
 800bfda:	4610      	mov	r0, r2
 800bfdc:	e7fb      	b.n	800bfd6 <__ascii_mbtowc+0x16>
 800bfde:	f06f 0001 	mvn.w	r0, #1
 800bfe2:	e7f8      	b.n	800bfd6 <__ascii_mbtowc+0x16>

0800bfe4 <_realloc_r>:
 800bfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe8:	4680      	mov	r8, r0
 800bfea:	4615      	mov	r5, r2
 800bfec:	460c      	mov	r4, r1
 800bfee:	b921      	cbnz	r1, 800bffa <_realloc_r+0x16>
 800bff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bff4:	4611      	mov	r1, r2
 800bff6:	f7fe bfaf 	b.w	800af58 <_malloc_r>
 800bffa:	b92a      	cbnz	r2, 800c008 <_realloc_r+0x24>
 800bffc:	f7fe ff38 	bl	800ae70 <_free_r>
 800c000:	2400      	movs	r4, #0
 800c002:	4620      	mov	r0, r4
 800c004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c008:	f000 f841 	bl	800c08e <_malloc_usable_size_r>
 800c00c:	4285      	cmp	r5, r0
 800c00e:	4606      	mov	r6, r0
 800c010:	d802      	bhi.n	800c018 <_realloc_r+0x34>
 800c012:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c016:	d8f4      	bhi.n	800c002 <_realloc_r+0x1e>
 800c018:	4629      	mov	r1, r5
 800c01a:	4640      	mov	r0, r8
 800c01c:	f7fe ff9c 	bl	800af58 <_malloc_r>
 800c020:	4607      	mov	r7, r0
 800c022:	2800      	cmp	r0, #0
 800c024:	d0ec      	beq.n	800c000 <_realloc_r+0x1c>
 800c026:	42b5      	cmp	r5, r6
 800c028:	462a      	mov	r2, r5
 800c02a:	4621      	mov	r1, r4
 800c02c:	bf28      	it	cs
 800c02e:	4632      	movcs	r2, r6
 800c030:	f7fe f8c3 	bl	800a1ba <memcpy>
 800c034:	4621      	mov	r1, r4
 800c036:	4640      	mov	r0, r8
 800c038:	f7fe ff1a 	bl	800ae70 <_free_r>
 800c03c:	463c      	mov	r4, r7
 800c03e:	e7e0      	b.n	800c002 <_realloc_r+0x1e>

0800c040 <__ascii_wctomb>:
 800c040:	4603      	mov	r3, r0
 800c042:	4608      	mov	r0, r1
 800c044:	b141      	cbz	r1, 800c058 <__ascii_wctomb+0x18>
 800c046:	2aff      	cmp	r2, #255	@ 0xff
 800c048:	d904      	bls.n	800c054 <__ascii_wctomb+0x14>
 800c04a:	228a      	movs	r2, #138	@ 0x8a
 800c04c:	601a      	str	r2, [r3, #0]
 800c04e:	f04f 30ff 	mov.w	r0, #4294967295
 800c052:	4770      	bx	lr
 800c054:	700a      	strb	r2, [r1, #0]
 800c056:	2001      	movs	r0, #1
 800c058:	4770      	bx	lr
	...

0800c05c <fiprintf>:
 800c05c:	b40e      	push	{r1, r2, r3}
 800c05e:	b503      	push	{r0, r1, lr}
 800c060:	4601      	mov	r1, r0
 800c062:	ab03      	add	r3, sp, #12
 800c064:	4805      	ldr	r0, [pc, #20]	@ (800c07c <fiprintf+0x20>)
 800c066:	f853 2b04 	ldr.w	r2, [r3], #4
 800c06a:	6800      	ldr	r0, [r0, #0]
 800c06c:	9301      	str	r3, [sp, #4]
 800c06e:	f7ff fd03 	bl	800ba78 <_vfiprintf_r>
 800c072:	b002      	add	sp, #8
 800c074:	f85d eb04 	ldr.w	lr, [sp], #4
 800c078:	b003      	add	sp, #12
 800c07a:	4770      	bx	lr
 800c07c:	2000019c 	.word	0x2000019c

0800c080 <abort>:
 800c080:	b508      	push	{r3, lr}
 800c082:	2006      	movs	r0, #6
 800c084:	f000 f834 	bl	800c0f0 <raise>
 800c088:	2001      	movs	r0, #1
 800c08a:	f7f6 fe53 	bl	8002d34 <_exit>

0800c08e <_malloc_usable_size_r>:
 800c08e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c092:	1f18      	subs	r0, r3, #4
 800c094:	2b00      	cmp	r3, #0
 800c096:	bfbc      	itt	lt
 800c098:	580b      	ldrlt	r3, [r1, r0]
 800c09a:	18c0      	addlt	r0, r0, r3
 800c09c:	4770      	bx	lr

0800c09e <_raise_r>:
 800c09e:	291f      	cmp	r1, #31
 800c0a0:	b538      	push	{r3, r4, r5, lr}
 800c0a2:	4605      	mov	r5, r0
 800c0a4:	460c      	mov	r4, r1
 800c0a6:	d904      	bls.n	800c0b2 <_raise_r+0x14>
 800c0a8:	2316      	movs	r3, #22
 800c0aa:	6003      	str	r3, [r0, #0]
 800c0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b0:	bd38      	pop	{r3, r4, r5, pc}
 800c0b2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c0b4:	b112      	cbz	r2, 800c0bc <_raise_r+0x1e>
 800c0b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0ba:	b94b      	cbnz	r3, 800c0d0 <_raise_r+0x32>
 800c0bc:	4628      	mov	r0, r5
 800c0be:	f000 f831 	bl	800c124 <_getpid_r>
 800c0c2:	4622      	mov	r2, r4
 800c0c4:	4601      	mov	r1, r0
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0cc:	f000 b818 	b.w	800c100 <_kill_r>
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d00a      	beq.n	800c0ea <_raise_r+0x4c>
 800c0d4:	1c59      	adds	r1, r3, #1
 800c0d6:	d103      	bne.n	800c0e0 <_raise_r+0x42>
 800c0d8:	2316      	movs	r3, #22
 800c0da:	6003      	str	r3, [r0, #0]
 800c0dc:	2001      	movs	r0, #1
 800c0de:	e7e7      	b.n	800c0b0 <_raise_r+0x12>
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	4798      	blx	r3
 800c0ea:	2000      	movs	r0, #0
 800c0ec:	e7e0      	b.n	800c0b0 <_raise_r+0x12>
	...

0800c0f0 <raise>:
 800c0f0:	4b02      	ldr	r3, [pc, #8]	@ (800c0fc <raise+0xc>)
 800c0f2:	4601      	mov	r1, r0
 800c0f4:	6818      	ldr	r0, [r3, #0]
 800c0f6:	f7ff bfd2 	b.w	800c09e <_raise_r>
 800c0fa:	bf00      	nop
 800c0fc:	2000019c 	.word	0x2000019c

0800c100 <_kill_r>:
 800c100:	b538      	push	{r3, r4, r5, lr}
 800c102:	4d07      	ldr	r5, [pc, #28]	@ (800c120 <_kill_r+0x20>)
 800c104:	2300      	movs	r3, #0
 800c106:	4604      	mov	r4, r0
 800c108:	4608      	mov	r0, r1
 800c10a:	4611      	mov	r1, r2
 800c10c:	602b      	str	r3, [r5, #0]
 800c10e:	f7f6 fe01 	bl	8002d14 <_kill>
 800c112:	1c43      	adds	r3, r0, #1
 800c114:	d102      	bne.n	800c11c <_kill_r+0x1c>
 800c116:	682b      	ldr	r3, [r5, #0]
 800c118:	b103      	cbz	r3, 800c11c <_kill_r+0x1c>
 800c11a:	6023      	str	r3, [r4, #0]
 800c11c:	bd38      	pop	{r3, r4, r5, pc}
 800c11e:	bf00      	nop
 800c120:	20005018 	.word	0x20005018

0800c124 <_getpid_r>:
 800c124:	f7f6 bdee 	b.w	8002d04 <_getpid>

0800c128 <_init>:
 800c128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c12a:	bf00      	nop
 800c12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c12e:	bc08      	pop	{r3}
 800c130:	469e      	mov	lr, r3
 800c132:	4770      	bx	lr

0800c134 <_fini>:
 800c134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c136:	bf00      	nop
 800c138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c13a:	bc08      	pop	{r3}
 800c13c:	469e      	mov	lr, r3
 800c13e:	4770      	bx	lr
