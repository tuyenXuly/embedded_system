
EDFSchedule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8d0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aac  0800da70  0800da70  0000ea70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e51c  0800e51c  00010348  2**0
                  CONTENTS
  4 .ARM          00000008  0800e51c  0800e51c  0000f51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e524  0800e524  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e524  0800e524  0000f524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e528  0800e528  0000f528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000348  20000000  0800e52c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006300  20000348  0800e874  00010348  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006648  0800e874  00010648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010348  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e01f  00000000  00000000  00010378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045a7  00000000  00000000  0002e397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  00032940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001353  00000000  00000000  00034258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3a6  00000000  00000000  000355ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dcad  00000000  00000000  0004f951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8756  00000000  00000000  0006d5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00115d54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079f4  00000000  00000000  00115d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a0  00000000  00000000  0011d78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000348 	.word	0x20000348
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800da58 	.word	0x0800da58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000034c 	.word	0x2000034c
 80001dc:	0800da58 	.word	0x0800da58

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20004f28 	.word	0x20004f28
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <strlen>:
 8000320:	4603      	mov	r3, r0
 8000322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000326:	2a00      	cmp	r2, #0
 8000328:	d1fb      	bne.n	8000322 <strlen+0x2>
 800032a:	1a18      	subs	r0, r3, r0
 800032c:	3801      	subs	r0, #1
 800032e:	4770      	bx	lr

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	@ 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmpun>:
 8000bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x10>
 8000be6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bea:	d10a      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x20>
 8000bf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0001 	mov.w	r0, #1
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2iz>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d215      	bcs.n	8000c3e <__aeabi_d2iz+0x36>
 8000c12:	d511      	bpl.n	8000c38 <__aeabi_d2iz+0x30>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d912      	bls.n	8000c44 <__aeabi_d2iz+0x3c>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	4770      	bx	lr
 8000c38:	f04f 0000 	mov.w	r0, #0
 8000c3c:	4770      	bx	lr
 8000c3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c42:	d105      	bne.n	8000c50 <__aeabi_d2iz+0x48>
 8000c44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	bf08      	it	eq
 8000c4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b96a 	b.w	8000fe4 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	460c      	mov	r4, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14e      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d34:	4694      	mov	ip, r2
 8000d36:	458c      	cmp	ip, r1
 8000d38:	4686      	mov	lr, r0
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	d962      	bls.n	8000e06 <__udivmoddi4+0xde>
 8000d40:	b14a      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d42:	f1c2 0320 	rsb	r3, r2, #32
 8000d46:	4091      	lsls	r1, r2
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	4319      	orrs	r1, r3
 8000d52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5a:	fa1f f68c 	uxth.w	r6, ip
 8000d5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d66:	fb07 1114 	mls	r1, r7, r4, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb04 f106 	mul.w	r1, r4, r6
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7e:	f080 8112 	bcs.w	8000fa6 <__udivmoddi4+0x27e>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 810f 	bls.w	8000fa6 <__udivmoddi4+0x27e>
 8000d88:	3c02      	subs	r4, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	fa1f f38e 	uxth.w	r3, lr
 8000d92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d96:	fb07 1110 	mls	r1, r7, r0, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb00 f606 	mul.w	r6, r0, r6
 8000da2:	429e      	cmp	r6, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x94>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dae:	f080 80fc 	bcs.w	8000faa <__udivmoddi4+0x282>
 8000db2:	429e      	cmp	r6, r3
 8000db4:	f240 80f9 	bls.w	8000faa <__udivmoddi4+0x282>
 8000db8:	4463      	add	r3, ip
 8000dba:	3802      	subs	r0, #2
 8000dbc:	1b9b      	subs	r3, r3, r6
 8000dbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa6>
 8000dc6:	40d3      	lsrs	r3, r2
 8000dc8:	2200      	movs	r2, #0
 8000dca:	e9c5 3200 	strd	r3, r2, [r5]
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xba>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb4>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa6>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d146      	bne.n	8000e78 <__udivmoddi4+0x150>
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	d302      	bcc.n	8000df4 <__udivmoddi4+0xcc>
 8000dee:	4290      	cmp	r0, r2
 8000df0:	f0c0 80f0 	bcc.w	8000fd4 <__udivmoddi4+0x2ac>
 8000df4:	1a86      	subs	r6, r0, r2
 8000df6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d0e6      	beq.n	8000dce <__udivmoddi4+0xa6>
 8000e00:	e9c5 6300 	strd	r6, r3, [r5]
 8000e04:	e7e3      	b.n	8000dce <__udivmoddi4+0xa6>
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	f040 8090 	bne.w	8000f2c <__udivmoddi4+0x204>
 8000e0c:	eba1 040c 	sub.w	r4, r1, ip
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa1f f78c 	uxth.w	r7, ip
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e22:	fb08 4416 	mls	r4, r8, r6, r4
 8000e26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e2a:	fb07 f006 	mul.w	r0, r7, r6
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x11c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x11a>
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	f200 80cd 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e42:	4626      	mov	r6, r4
 8000e44:	1a1c      	subs	r4, r3, r0
 8000e46:	fa1f f38e 	uxth.w	r3, lr
 8000e4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb00 f707 	mul.w	r7, r0, r7
 8000e5a:	429f      	cmp	r7, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x148>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x146>
 8000e68:	429f      	cmp	r7, r3
 8000e6a:	f200 80b0 	bhi.w	8000fce <__udivmoddi4+0x2a6>
 8000e6e:	4620      	mov	r0, r4
 8000e70:	1bdb      	subs	r3, r3, r7
 8000e72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0x9c>
 8000e78:	f1c1 0620 	rsb	r6, r1, #32
 8000e7c:	408b      	lsls	r3, r1
 8000e7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e82:	431f      	orrs	r7, r3
 8000e84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e88:	fa04 f301 	lsl.w	r3, r4, r1
 8000e8c:	ea43 030c 	orr.w	r3, r3, ip
 8000e90:	40f4      	lsrs	r4, r6
 8000e92:	fa00 f801 	lsl.w	r8, r0, r1
 8000e96:	0c38      	lsrs	r0, r7, #16
 8000e98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000ea0:	fa1f fc87 	uxth.w	ip, r7
 8000ea4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eac:	fb0e f90c 	mul.w	r9, lr, ip
 8000eb0:	45a1      	cmp	r9, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	d90a      	bls.n	8000ece <__udivmoddi4+0x1a6>
 8000eb8:	193c      	adds	r4, r7, r4
 8000eba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ebe:	f080 8084 	bcs.w	8000fca <__udivmoddi4+0x2a2>
 8000ec2:	45a1      	cmp	r9, r4
 8000ec4:	f240 8081 	bls.w	8000fca <__udivmoddi4+0x2a2>
 8000ec8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ecc:	443c      	add	r4, r7
 8000ece:	eba4 0409 	sub.w	r4, r4, r9
 8000ed2:	fa1f f983 	uxth.w	r9, r3
 8000ed6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eda:	fb00 4413 	mls	r4, r0, r3, r4
 8000ede:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee6:	45a4      	cmp	ip, r4
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x1d2>
 8000eea:	193c      	adds	r4, r7, r4
 8000eec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ef0:	d267      	bcs.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d965      	bls.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef6:	3b02      	subs	r3, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efe:	fba0 9302 	umull	r9, r3, r0, r2
 8000f02:	eba4 040c 	sub.w	r4, r4, ip
 8000f06:	429c      	cmp	r4, r3
 8000f08:	46ce      	mov	lr, r9
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	d351      	bcc.n	8000fb2 <__udivmoddi4+0x28a>
 8000f0e:	d04e      	beq.n	8000fae <__udivmoddi4+0x286>
 8000f10:	b155      	cbz	r5, 8000f28 <__udivmoddi4+0x200>
 8000f12:	ebb8 030e 	subs.w	r3, r8, lr
 8000f16:	eb64 040c 	sbc.w	r4, r4, ip
 8000f1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1e:	40cb      	lsrs	r3, r1
 8000f20:	431e      	orrs	r6, r3
 8000f22:	40cc      	lsrs	r4, r1
 8000f24:	e9c5 6400 	strd	r6, r4, [r5]
 8000f28:	2100      	movs	r1, #0
 8000f2a:	e750      	b.n	8000dce <__udivmoddi4+0xa6>
 8000f2c:	f1c2 0320 	rsb	r3, r2, #32
 8000f30:	fa20 f103 	lsr.w	r1, r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	fa24 f303 	lsr.w	r3, r4, r3
 8000f3c:	4094      	lsls	r4, r2
 8000f3e:	430c      	orrs	r4, r1
 8000f40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f48:	fa1f f78c 	uxth.w	r7, ip
 8000f4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f50:	fb08 3110 	mls	r1, r8, r0, r3
 8000f54:	0c23      	lsrs	r3, r4, #16
 8000f56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f5a:	fb00 f107 	mul.w	r1, r0, r7
 8000f5e:	4299      	cmp	r1, r3
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x24c>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f6a:	d22c      	bcs.n	8000fc6 <__udivmoddi4+0x29e>
 8000f6c:	4299      	cmp	r1, r3
 8000f6e:	d92a      	bls.n	8000fc6 <__udivmoddi4+0x29e>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1a5b      	subs	r3, r3, r1
 8000f76:	b2a4      	uxth	r4, r4
 8000f78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f84:	fb01 f307 	mul.w	r3, r1, r7
 8000f88:	42a3      	cmp	r3, r4
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x276>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f94:	d213      	bcs.n	8000fbe <__udivmoddi4+0x296>
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	d911      	bls.n	8000fbe <__udivmoddi4+0x296>
 8000f9a:	3902      	subs	r1, #2
 8000f9c:	4464      	add	r4, ip
 8000f9e:	1ae4      	subs	r4, r4, r3
 8000fa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa4:	e739      	b.n	8000e1a <__udivmoddi4+0xf2>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	e6f0      	b.n	8000d8c <__udivmoddi4+0x64>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e706      	b.n	8000dbc <__udivmoddi4+0x94>
 8000fae:	45c8      	cmp	r8, r9
 8000fb0:	d2ae      	bcs.n	8000f10 <__udivmoddi4+0x1e8>
 8000fb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fba:	3801      	subs	r0, #1
 8000fbc:	e7a8      	b.n	8000f10 <__udivmoddi4+0x1e8>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	e7ed      	b.n	8000f9e <__udivmoddi4+0x276>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	e799      	b.n	8000efa <__udivmoddi4+0x1d2>
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	e7d4      	b.n	8000f74 <__udivmoddi4+0x24c>
 8000fca:	46d6      	mov	lr, sl
 8000fcc:	e77f      	b.n	8000ece <__udivmoddi4+0x1a6>
 8000fce:	4463      	add	r3, ip
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	e74d      	b.n	8000e70 <__udivmoddi4+0x148>
 8000fd4:	4606      	mov	r6, r0
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e70f      	b.n	8000dfc <__udivmoddi4+0xd4>
 8000fdc:	3e02      	subs	r6, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	e730      	b.n	8000e44 <__udivmoddi4+0x11c>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <Decimal2BCD>:
#define RTC_ADDRESS (0x68<<1) // do dia chi cua module ds3231 la 7 bit , bit 0 o cuoi la bit write
//cach 1
//extern I2C_HandleTypeDef hi2c1;
//cach 2
 static I2C_HandleTypeDef *ds_i2c; // bien static tuc la chi dung trong file nay
uint8_t Decimal2BCD(uint8_t num){
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  return (num/10)<<4 | (num%10);
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800102c <Decimal2BCD+0x44>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	08db      	lsrs	r3, r3, #3
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	b258      	sxtb	r0, r3
 8001002:	79fa      	ldrb	r2, [r7, #7]
 8001004:	4b09      	ldr	r3, [pc, #36]	@ (800102c <Decimal2BCD+0x44>)
 8001006:	fba3 1302 	umull	r1, r3, r3, r2
 800100a:	08d9      	lsrs	r1, r3, #3
 800100c:	460b      	mov	r3, r1
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	440b      	add	r3, r1
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	b25b      	sxtb	r3, r3
 800101a:	4303      	orrs	r3, r0
 800101c:	b25b      	sxtb	r3, r3
 800101e:	b2db      	uxtb	r3, r3
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	cccccccd 	.word	0xcccccccd

08001030 <BCD2Decimal>:
uint8_t BCD2Decimal(uint8_t num){
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  return (num>>4)*10 + (num&0x0F);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	091b      	lsrs	r3, r3, #4
 800103e:	b2db      	uxtb	r3, r3
 8001040:	461a      	mov	r2, r3
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	4413      	add	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	b2da      	uxtb	r2, r3
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 030f 	and.w	r3, r3, #15
 8001050:	b2db      	uxtb	r3, r3
 8001052:	4413      	add	r3, r2
 8001054:	b2db      	uxtb	r3, r3
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <rtc_write_time>:
// ghi du lieu
void rtc_write_time(DateTime *dt){
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af02      	add	r7, sp, #8
 800106a:	6078      	str	r0, [r7, #4]
	uint8_t data[8];
	data[0]=0x00;
 800106c:	2300      	movs	r3, #0
 800106e:	723b      	strb	r3, [r7, #8]
	data[1]= Decimal2BCD(dt->sec);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	789b      	ldrb	r3, [r3, #2]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ffb7 	bl	8000fe8 <Decimal2BCD>
 800107a:	4603      	mov	r3, r0
 800107c:	727b      	strb	r3, [r7, #9]
	data[2]= Decimal2BCD(dt->min);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	785b      	ldrb	r3, [r3, #1]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ffb0 	bl	8000fe8 <Decimal2BCD>
 8001088:	4603      	mov	r3, r0
 800108a:	72bb      	strb	r3, [r7, #10]
	data[3]= Decimal2BCD(dt->hour);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ffa9 	bl	8000fe8 <Decimal2BCD>
 8001096:	4603      	mov	r3, r0
 8001098:	72fb      	strb	r3, [r7, #11]
	data[4]= Decimal2BCD(dt->day);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	78db      	ldrb	r3, [r3, #3]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ffa2 	bl	8000fe8 <Decimal2BCD>
 80010a4:	4603      	mov	r3, r0
 80010a6:	733b      	strb	r3, [r7, #12]
	data[5]= Decimal2BCD(dt->date);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	791b      	ldrb	r3, [r3, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff9b 	bl	8000fe8 <Decimal2BCD>
 80010b2:	4603      	mov	r3, r0
 80010b4:	737b      	strb	r3, [r7, #13]
	data[6]= Decimal2BCD(dt->mon);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	795b      	ldrb	r3, [r3, #5]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff94 	bl	8000fe8 <Decimal2BCD>
 80010c0:	4603      	mov	r3, r0
 80010c2:	73bb      	strb	r3, [r7, #14]
	data[7]= Decimal2BCD(dt->year);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	799b      	ldrb	r3, [r3, #6]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff8d 	bl	8000fe8 <Decimal2BCD>
 80010ce:	4603      	mov	r3, r0
 80010d0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(ds_i2c,RTC_ADDRESS,data,8,100);
 80010d2:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <rtc_write_time+0x8c>)
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	f107 0208 	add.w	r2, r7, #8
 80010da:	2364      	movs	r3, #100	@ 0x64
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2308      	movs	r3, #8
 80010e0:	21d0      	movs	r1, #208	@ 0xd0
 80010e2:	f002 fb85 	bl	80037f0 <HAL_I2C_Master_Transmit>
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000364 	.word	0x20000364

080010f4 <rtc_read_time>:
// doc du lieu
void rtc_read_time(DateTime *dt){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	6078      	str	r0, [r7, #4]
	uint8_t data[7];
	uint8_t add_reg=0x00; // dia chi cua thanh ghi cua slave ma master muon doc du lieu
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(ds_i2c,RTC_ADDRESS,&add_reg,1,100); // gui dia chi thanh ghi ma master muon doc du lieu
 8001100:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <rtc_read_time+0xac>)
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	f107 020f 	add.w	r2, r7, #15
 8001108:	2364      	movs	r3, #100	@ 0x64
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	21d0      	movs	r1, #208	@ 0xd0
 8001110:	f002 fb6e 	bl	80037f0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ds_i2c,RTC_ADDRESS,data,7,100); // doc du lieu
 8001114:	4b22      	ldr	r3, [pc, #136]	@ (80011a0 <rtc_read_time+0xac>)
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	f107 0210 	add.w	r2, r7, #16
 800111c:	2364      	movs	r3, #100	@ 0x64
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2307      	movs	r3, #7
 8001122:	21d0      	movs	r1, #208	@ 0xd0
 8001124:	f002 fc62 	bl	80039ec <HAL_I2C_Master_Receive>
	dt->sec= BCD2Decimal(data[0]);
 8001128:	7c3b      	ldrb	r3, [r7, #16]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff80 	bl	8001030 <BCD2Decimal>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	709a      	strb	r2, [r3, #2]
	dt->min= BCD2Decimal(data[1]);
 8001138:	7c7b      	ldrb	r3, [r7, #17]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff78 	bl	8001030 <BCD2Decimal>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	705a      	strb	r2, [r3, #1]
	dt->hour= BCD2Decimal(data[2]);
 8001148:	7cbb      	ldrb	r3, [r7, #18]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff70 	bl	8001030 <BCD2Decimal>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	701a      	strb	r2, [r3, #0]
	dt->day= BCD2Decimal(data[3]);
 8001158:	7cfb      	ldrb	r3, [r7, #19]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff68 	bl	8001030 <BCD2Decimal>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	70da      	strb	r2, [r3, #3]
	dt->date= BCD2Decimal(data[4]);
 8001168:	7d3b      	ldrb	r3, [r7, #20]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff60 	bl	8001030 <BCD2Decimal>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	711a      	strb	r2, [r3, #4]
	dt->mon= BCD2Decimal(data[5]);
 8001178:	7d7b      	ldrb	r3, [r7, #21]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff58 	bl	8001030 <BCD2Decimal>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	715a      	strb	r2, [r3, #5]
	dt->year= BCD2Decimal(data[6]);
 8001188:	7dbb      	ldrb	r3, [r7, #22]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff50 	bl	8001030 <BCD2Decimal>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	719a      	strb	r2, [r3, #6]
}
 8001198:	bf00      	nop
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000364 	.word	0x20000364

080011a4 <rtc_init>:
	else if (data[1]==0x40) temperarate=0.25;
	else if(data[1]==0x80) temperarate=0.5;
	else temperarate=0.75;
	return data[0]+temperarate;
}
void rtc_init(I2C_HandleTypeDef *i2c){
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  ds_i2c=i2c;
 80011ac:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <rtc_init+0x1c>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000364 	.word	0x20000364

080011c4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f023 030f 	bic.w	r3, r3, #15
 80011d4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	f043 030c 	orr.w	r3, r3, #12
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	f043 0308 	orr.w	r3, r3, #8
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 80011f0:	7bbb      	ldrb	r3, [r7, #14]
 80011f2:	f043 030c 	orr.w	r3, r3, #12
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 80011fa:	7bbb      	ldrb	r3, [r7, #14]
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	b2db      	uxtb	r3, r3
 8001202:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001204:	f107 0208 	add.w	r2, r7, #8
 8001208:	2364      	movs	r3, #100	@ 0x64
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2304      	movs	r3, #4
 800120e:	214e      	movs	r1, #78	@ 0x4e
 8001210:	4803      	ldr	r0, [pc, #12]	@ (8001220 <lcd_send_cmd+0x5c>)
 8001212:	f002 faed 	bl	80037f0 <HAL_I2C_Master_Transmit>
}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200003bc 	.word	0x200003bc

08001224 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af02      	add	r7, sp, #8
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f023 030f 	bic.w	r3, r3, #15
 8001234:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	f043 030d 	orr.w	r3, r3, #13
 8001242:	b2db      	uxtb	r3, r3
 8001244:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	f043 0309 	orr.w	r3, r3, #9
 800124c:	b2db      	uxtb	r3, r3
 800124e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8001250:	7bbb      	ldrb	r3, [r7, #14]
 8001252:	f043 030d 	orr.w	r3, r3, #13
 8001256:	b2db      	uxtb	r3, r3
 8001258:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 800125a:	7bbb      	ldrb	r3, [r7, #14]
 800125c:	f043 0309 	orr.w	r3, r3, #9
 8001260:	b2db      	uxtb	r3, r3
 8001262:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001264:	f107 0208 	add.w	r2, r7, #8
 8001268:	2364      	movs	r3, #100	@ 0x64
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2304      	movs	r3, #4
 800126e:	214e      	movs	r1, #78	@ 0x4e
 8001270:	4803      	ldr	r0, [pc, #12]	@ (8001280 <lcd_send_data+0x5c>)
 8001272:	f002 fabd 	bl	80037f0 <HAL_I2C_Master_Transmit>
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200003bc 	.word	0x200003bc

08001284 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
    switch (row)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <lcd_put_cur+0x18>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d005      	beq.n	80012a6 <lcd_put_cur+0x22>
 800129a:	e009      	b.n	80012b0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012a2:	603b      	str	r3, [r7, #0]
            break;
 80012a4:	e004      	b.n	80012b0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80012ac:	603b      	str	r3, [r7, #0]
            break;
 80012ae:	bf00      	nop
    }

    lcd_send_cmd (col);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff85 	bl	80011c4 <lcd_send_cmd>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <lcd_init>:


void lcd_init (void)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80012c6:	2032      	movs	r0, #50	@ 0x32
 80012c8:	f001 fe02 	bl	8002ed0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80012cc:	2030      	movs	r0, #48	@ 0x30
 80012ce:	f7ff ff79 	bl	80011c4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80012d2:	2005      	movs	r0, #5
 80012d4:	f001 fdfc 	bl	8002ed0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80012d8:	2030      	movs	r0, #48	@ 0x30
 80012da:	f7ff ff73 	bl	80011c4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80012de:	2001      	movs	r0, #1
 80012e0:	f001 fdf6 	bl	8002ed0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80012e4:	2030      	movs	r0, #48	@ 0x30
 80012e6:	f7ff ff6d 	bl	80011c4 <lcd_send_cmd>
	HAL_Delay(10);
 80012ea:	200a      	movs	r0, #10
 80012ec:	f001 fdf0 	bl	8002ed0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80012f0:	2020      	movs	r0, #32
 80012f2:	f7ff ff67 	bl	80011c4 <lcd_send_cmd>
	HAL_Delay(10);
 80012f6:	200a      	movs	r0, #10
 80012f8:	f001 fdea 	bl	8002ed0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80012fc:	2028      	movs	r0, #40	@ 0x28
 80012fe:	f7ff ff61 	bl	80011c4 <lcd_send_cmd>
	HAL_Delay(1);
 8001302:	2001      	movs	r0, #1
 8001304:	f001 fde4 	bl	8002ed0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001308:	2008      	movs	r0, #8
 800130a:	f7ff ff5b 	bl	80011c4 <lcd_send_cmd>
	HAL_Delay(1);
 800130e:	2001      	movs	r0, #1
 8001310:	f001 fdde 	bl	8002ed0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001314:	2001      	movs	r0, #1
 8001316:	f7ff ff55 	bl	80011c4 <lcd_send_cmd>
	HAL_Delay(1);
 800131a:	2001      	movs	r0, #1
 800131c:	f001 fdd8 	bl	8002ed0 <HAL_Delay>
	HAL_Delay(1);
 8001320:	2001      	movs	r0, #1
 8001322:	f001 fdd5 	bl	8002ed0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001326:	2006      	movs	r0, #6
 8001328:	f7ff ff4c 	bl	80011c4 <lcd_send_cmd>
	HAL_Delay(1);
 800132c:	2001      	movs	r0, #1
 800132e:	f001 fdcf 	bl	8002ed0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001332:	200c      	movs	r0, #12
 8001334:	f7ff ff46 	bl	80011c4 <lcd_send_cmd>
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001344:	e006      	b.n	8001354 <lcd_send_string+0x18>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff68 	bl	8001224 <lcd_send_data>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f4      	bne.n	8001346 <lcd_send_string+0xa>
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800136c:	f001 fd3e 	bl	8002dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001370:	f000 f8ec 	bl	800154c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001374:	f000 fa08 	bl	8001788 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001378:	f000 f952 	bl	8001620 <MX_I2C1_Init>
  MX_I2C2_Init();
 800137c:	f000 f97e 	bl	800167c <MX_I2C2_Init>
  MX_I2C3_Init();
 8001380:	f000 f9aa 	bl	80016d8 <MX_I2C3_Init>
  MX_USART6_UART_Init();
 8001384:	f000 f9d6 	bl	8001734 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_UART_init(250000);
 8001388:	484b      	ldr	r0, [pc, #300]	@ (80014b8 <main+0x150>)
 800138a:	f008 f845 	bl	8009418 <SEGGER_UART_init>
    //CYCLCNT enable
    DWT_CTRL |= ( 1 << 0);
 800138e:	4b4b      	ldr	r3, [pc, #300]	@ (80014bc <main+0x154>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a4a      	ldr	r2, [pc, #296]	@ (80014bc <main+0x154>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6013      	str	r3, [r2, #0]

    SEGGER_SYSVIEW_Conf();
 800139a:	f007 febb 	bl	8009114 <SEGGER_SYSVIEW_Conf>

  //Init SHT21, set resolution
    SHT2x_Init(&hi2c1);
 800139e:	4848      	ldr	r0, [pc, #288]	@ (80014c0 <main+0x158>)
 80013a0:	f001 f99e 	bl	80026e0 <SHT2x_Init>
    SHT2x_SetResolution(RES_14_12);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f001 fa81 	bl	80028ac <SHT2x_SetResolution>
    print_cli("Inited SHT21 successfully\n");
 80013aa:	4846      	ldr	r0, [pc, #280]	@ (80014c4 <main+0x15c>)
 80013ac:	f001 f960 	bl	8002670 <print_cli>

    //Init LCD, set start time
    rtc_init(&hi2c3);
 80013b0:	4845      	ldr	r0, [pc, #276]	@ (80014c8 <main+0x160>)
 80013b2:	f7ff fef7 	bl	80011a4 <rtc_init>
    date_time.date = 20;
 80013b6:	4b45      	ldr	r3, [pc, #276]	@ (80014cc <main+0x164>)
 80013b8:	2214      	movs	r2, #20
 80013ba:	711a      	strb	r2, [r3, #4]
    date_time.day = 20;
 80013bc:	4b43      	ldr	r3, [pc, #268]	@ (80014cc <main+0x164>)
 80013be:	2214      	movs	r2, #20
 80013c0:	70da      	strb	r2, [r3, #3]
    date_time.hour = 10;
 80013c2:	4b42      	ldr	r3, [pc, #264]	@ (80014cc <main+0x164>)
 80013c4:	220a      	movs	r2, #10
 80013c6:	701a      	strb	r2, [r3, #0]
    date_time.i2c = 02;
 80013c8:	4b40      	ldr	r3, [pc, #256]	@ (80014cc <main+0x164>)
 80013ca:	2202      	movs	r2, #2
 80013cc:	609a      	str	r2, [r3, #8]
    date_time.min = 41;
 80013ce:	4b3f      	ldr	r3, [pc, #252]	@ (80014cc <main+0x164>)
 80013d0:	2229      	movs	r2, #41	@ 0x29
 80013d2:	705a      	strb	r2, [r3, #1]
    date_time.mon = 1;
 80013d4:	4b3d      	ldr	r3, [pc, #244]	@ (80014cc <main+0x164>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	715a      	strb	r2, [r3, #5]
    date_time.sec = 12;
 80013da:	4b3c      	ldr	r3, [pc, #240]	@ (80014cc <main+0x164>)
 80013dc:	220c      	movs	r2, #12
 80013de:	709a      	strb	r2, [r3, #2]
    date_time.year = 25;
 80013e0:	4b3a      	ldr	r3, [pc, #232]	@ (80014cc <main+0x164>)
 80013e2:	2219      	movs	r2, #25
 80013e4:	719a      	strb	r2, [r3, #6]
    rtc_write_time(&date_time);
 80013e6:	4839      	ldr	r0, [pc, #228]	@ (80014cc <main+0x164>)
 80013e8:	f7ff fe3c 	bl	8001064 <rtc_write_time>

    //Init lcd
    lcd_init();
 80013ec:	f7ff ff69 	bl	80012c2 <lcd_init>
    HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 80013f0:	2201      	movs	r2, #1
 80013f2:	4937      	ldr	r1, [pc, #220]	@ (80014d0 <main+0x168>)
 80013f4:	4837      	ldr	r0, [pc, #220]	@ (80014d4 <main+0x16c>)
 80013f6:	f003 fde4 	bl	8004fc2 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013fa:	f004 fd91 	bl	8005f20 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 80013fe:	4a36      	ldr	r2, [pc, #216]	@ (80014d8 <main+0x170>)
 8001400:	2102      	movs	r1, #2
 8001402:	2010      	movs	r0, #16
 8001404:	f004 fe98 	bl	8006138 <osMessageQueueNew>
 8001408:	4603      	mov	r3, r0
 800140a:	4a34      	ldr	r2, [pc, #208]	@ (80014dc <main+0x174>)
 800140c:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue02_attributes);
 800140e:	4a34      	ldr	r2, [pc, #208]	@ (80014e0 <main+0x178>)
 8001410:	2102      	movs	r1, #2
 8001412:	2010      	movs	r0, #16
 8001414:	f004 fe90 	bl	8006138 <osMessageQueueNew>
 8001418:	4603      	mov	r3, r0
 800141a:	4a32      	ldr	r2, [pc, #200]	@ (80014e4 <main+0x17c>)
 800141c:	6013      	str	r3, [r2, #0]

  /* creation of myQueue03 */
  myQueue03Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue03_attributes);
 800141e:	4a32      	ldr	r2, [pc, #200]	@ (80014e8 <main+0x180>)
 8001420:	2102      	movs	r1, #2
 8001422:	2010      	movs	r0, #16
 8001424:	f004 fe88 	bl	8006138 <osMessageQueueNew>
 8001428:	4603      	mov	r3, r0
 800142a:	4a30      	ldr	r2, [pc, #192]	@ (80014ec <main+0x184>)
 800142c:	6013      	str	r3, [r2, #0]

  /* creation of myQueue04 */
  myQueue04Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue04_attributes);
 800142e:	4a30      	ldr	r2, [pc, #192]	@ (80014f0 <main+0x188>)
 8001430:	2102      	movs	r1, #2
 8001432:	2010      	movs	r0, #16
 8001434:	f004 fe80 	bl	8006138 <osMessageQueueNew>
 8001438:	4603      	mov	r3, r0
 800143a:	4a2e      	ldr	r2, [pc, #184]	@ (80014f4 <main+0x18c>)
 800143c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800143e:	4a2e      	ldr	r2, [pc, #184]	@ (80014f8 <main+0x190>)
 8001440:	2100      	movs	r1, #0
 8001442:	482e      	ldr	r0, [pc, #184]	@ (80014fc <main+0x194>)
 8001444:	f004 fdcb 	bl	8005fde <osThreadNew>
 8001448:	4603      	mov	r3, r0
 800144a:	4a2d      	ldr	r2, [pc, #180]	@ (8001500 <main+0x198>)
 800144c:	6013      	str	r3, [r2, #0]

  /* creation of RealTime */
  RealTimeHandle = osThreadNew(StartTask02, NULL, &RealTime_attributes);
 800144e:	4a2d      	ldr	r2, [pc, #180]	@ (8001504 <main+0x19c>)
 8001450:	2100      	movs	r1, #0
 8001452:	482d      	ldr	r0, [pc, #180]	@ (8001508 <main+0x1a0>)
 8001454:	f004 fdc3 	bl	8005fde <osThreadNew>
 8001458:	4603      	mov	r3, r0
 800145a:	4a2c      	ldr	r2, [pc, #176]	@ (800150c <main+0x1a4>)
 800145c:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTemp */
  DisplayTempHandle = osThreadNew(StartTask03, NULL, &DisplayTemp_attributes);
 800145e:	4a2c      	ldr	r2, [pc, #176]	@ (8001510 <main+0x1a8>)
 8001460:	2100      	movs	r1, #0
 8001462:	482c      	ldr	r0, [pc, #176]	@ (8001514 <main+0x1ac>)
 8001464:	f004 fdbb 	bl	8005fde <osThreadNew>
 8001468:	4603      	mov	r3, r0
 800146a:	4a2b      	ldr	r2, [pc, #172]	@ (8001518 <main+0x1b0>)
 800146c:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTime */
  DisplayTimeHandle = osThreadNew(StartTask04, NULL, &DisplayTime_attributes);
 800146e:	4a2b      	ldr	r2, [pc, #172]	@ (800151c <main+0x1b4>)
 8001470:	2100      	movs	r1, #0
 8001472:	482b      	ldr	r0, [pc, #172]	@ (8001520 <main+0x1b8>)
 8001474:	f004 fdb3 	bl	8005fde <osThreadNew>
 8001478:	4603      	mov	r3, r0
 800147a:	4a2a      	ldr	r2, [pc, #168]	@ (8001524 <main+0x1bc>)
 800147c:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 800147e:	4a2a      	ldr	r2, [pc, #168]	@ (8001528 <main+0x1c0>)
 8001480:	2100      	movs	r1, #0
 8001482:	482a      	ldr	r0, [pc, #168]	@ (800152c <main+0x1c4>)
 8001484:	f004 fdab 	bl	8005fde <osThreadNew>
 8001488:	4603      	mov	r3, r0
 800148a:	4a29      	ldr	r2, [pc, #164]	@ (8001530 <main+0x1c8>)
 800148c:	6013      	str	r3, [r2, #0]

  /* creation of myTask06 */
  myTask06Handle = osThreadNew(StartTask06, NULL, &myTask06_attributes);
 800148e:	4a29      	ldr	r2, [pc, #164]	@ (8001534 <main+0x1cc>)
 8001490:	2100      	movs	r1, #0
 8001492:	4829      	ldr	r0, [pc, #164]	@ (8001538 <main+0x1d0>)
 8001494:	f004 fda3 	bl	8005fde <osThreadNew>
 8001498:	4603      	mov	r3, r0
 800149a:	4a28      	ldr	r2, [pc, #160]	@ (800153c <main+0x1d4>)
 800149c:	6013      	str	r3, [r2, #0]

  /* creation of myTask07 */
  myTask07Handle = osThreadNew(StartTask07, NULL, &myTask07_attributes);
 800149e:	4a28      	ldr	r2, [pc, #160]	@ (8001540 <main+0x1d8>)
 80014a0:	2100      	movs	r1, #0
 80014a2:	4828      	ldr	r0, [pc, #160]	@ (8001544 <main+0x1dc>)
 80014a4:	f004 fd9b 	bl	8005fde <osThreadNew>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4a27      	ldr	r2, [pc, #156]	@ (8001548 <main+0x1e0>)
 80014ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80014ae:	f004 fd5b 	bl	8005f68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014b2:	bf00      	nop
 80014b4:	e7fd      	b.n	80014b2 <main+0x14a>
 80014b6:	bf00      	nop
 80014b8:	0003d090 	.word	0x0003d090
 80014bc:	e0001000 	.word	0xe0001000
 80014c0:	20000368 	.word	0x20000368
 80014c4:	0800daf4 	.word	0x0800daf4
 80014c8:	20000410 	.word	0x20000410
 80014cc:	200004d8 	.word	0x200004d8
 80014d0:	2000051a 	.word	0x2000051a
 80014d4:	20000464 	.word	0x20000464
 80014d8:	0800e108 	.word	0x0800e108
 80014dc:	200004c8 	.word	0x200004c8
 80014e0:	0800e120 	.word	0x0800e120
 80014e4:	200004cc 	.word	0x200004cc
 80014e8:	0800e138 	.word	0x0800e138
 80014ec:	200004d0 	.word	0x200004d0
 80014f0:	0800e150 	.word	0x0800e150
 80014f4:	200004d4 	.word	0x200004d4
 80014f8:	0800e00c 	.word	0x0800e00c
 80014fc:	08001ac9 	.word	0x08001ac9
 8001500:	200004ac 	.word	0x200004ac
 8001504:	0800e030 	.word	0x0800e030
 8001508:	08001c4d 	.word	0x08001c4d
 800150c:	200004b0 	.word	0x200004b0
 8001510:	0800e054 	.word	0x0800e054
 8001514:	08001db5 	.word	0x08001db5
 8001518:	200004b4 	.word	0x200004b4
 800151c:	0800e078 	.word	0x0800e078
 8001520:	08001f55 	.word	0x08001f55
 8001524:	200004b8 	.word	0x200004b8
 8001528:	0800e09c 	.word	0x0800e09c
 800152c:	08002139 	.word	0x08002139
 8001530:	200004bc 	.word	0x200004bc
 8001534:	0800e0c0 	.word	0x0800e0c0
 8001538:	080022c9 	.word	0x080022c9
 800153c:	200004c0 	.word	0x200004c0
 8001540:	0800e0e4 	.word	0x0800e0e4
 8001544:	0800245d 	.word	0x0800245d
 8001548:	200004c4 	.word	0x200004c4

0800154c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b094      	sub	sp, #80	@ 0x50
 8001550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001552:	f107 0320 	add.w	r3, r7, #32
 8001556:	2230      	movs	r2, #48	@ 0x30
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f00a fa58 	bl	800ba10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	4b28      	ldr	r3, [pc, #160]	@ (8001618 <SystemClock_Config+0xcc>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001578:	4a27      	ldr	r2, [pc, #156]	@ (8001618 <SystemClock_Config+0xcc>)
 800157a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800157e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001580:	4b25      	ldr	r3, [pc, #148]	@ (8001618 <SystemClock_Config+0xcc>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	4b22      	ldr	r3, [pc, #136]	@ (800161c <SystemClock_Config+0xd0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001598:	4a20      	ldr	r2, [pc, #128]	@ (800161c <SystemClock_Config+0xd0>)
 800159a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b1e      	ldr	r3, [pc, #120]	@ (800161c <SystemClock_Config+0xd0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ac:	2302      	movs	r3, #2
 80015ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b0:	2301      	movs	r3, #1
 80015b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b4:	2310      	movs	r3, #16
 80015b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b8:	2302      	movs	r3, #2
 80015ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015bc:	2300      	movs	r3, #0
 80015be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015c0:	2308      	movs	r3, #8
 80015c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80015c4:	2354      	movs	r3, #84	@ 0x54
 80015c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015cc:	2304      	movs	r3, #4
 80015ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d0:	f107 0320 	add.w	r3, r7, #32
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 ffc1 	bl	800455c <HAL_RCC_OscConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80015e0:	f001 f840 	bl	8002664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e4:	230f      	movs	r3, #15
 80015e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e8:	2302      	movs	r3, #2
 80015ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	2102      	movs	r1, #2
 8001600:	4618      	mov	r0, r3
 8001602:	f003 fa23 	bl	8004a4c <HAL_RCC_ClockConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800160c:	f001 f82a 	bl	8002664 <Error_Handler>
  }
}
 8001610:	bf00      	nop
 8001612:	3750      	adds	r7, #80	@ 0x50
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	40007000 	.word	0x40007000

08001620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <MX_I2C1_Init+0x50>)
 8001626:	4a13      	ldr	r2, [pc, #76]	@ (8001674 <MX_I2C1_Init+0x54>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <MX_I2C1_Init+0x50>)
 800162c:	4a12      	ldr	r2, [pc, #72]	@ (8001678 <MX_I2C1_Init+0x58>)
 800162e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001630:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <MX_I2C1_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <MX_I2C1_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <MX_I2C1_Init+0x50>)
 800163e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001644:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <MX_I2C1_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800164a:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <MX_I2C1_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001650:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <MX_I2C1_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <MX_I2C1_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	@ (8001670 <MX_I2C1_Init+0x50>)
 800165e:	f001 ff83 	bl	8003568 <HAL_I2C_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001668:	f000 fffc 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000368 	.word	0x20000368
 8001674:	40005400 	.word	0x40005400
 8001678:	000186a0 	.word	0x000186a0

0800167c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <MX_I2C2_Init+0x50>)
 8001682:	4a13      	ldr	r2, [pc, #76]	@ (80016d0 <MX_I2C2_Init+0x54>)
 8001684:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001686:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <MX_I2C2_Init+0x50>)
 8001688:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <MX_I2C2_Init+0x58>)
 800168a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800168c:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <MX_I2C2_Init+0x50>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <MX_I2C2_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <MX_I2C2_Init+0x50>)
 800169a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800169e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a0:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <MX_I2C2_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016a6:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <MX_I2C2_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ac:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <MX_I2C2_Init+0x50>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <MX_I2C2_Init+0x50>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016b8:	4804      	ldr	r0, [pc, #16]	@ (80016cc <MX_I2C2_Init+0x50>)
 80016ba:	f001 ff55 	bl	8003568 <HAL_I2C_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016c4:	f000 ffce 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200003bc 	.word	0x200003bc
 80016d0:	40005800 	.word	0x40005800
 80016d4:	000186a0 	.word	0x000186a0

080016d8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <MX_I2C3_Init+0x50>)
 80016de:	4a13      	ldr	r2, [pc, #76]	@ (800172c <MX_I2C3_Init+0x54>)
 80016e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80016e2:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <MX_I2C3_Init+0x50>)
 80016e4:	4a12      	ldr	r2, [pc, #72]	@ (8001730 <MX_I2C3_Init+0x58>)
 80016e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <MX_I2C3_Init+0x50>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <MX_I2C3_Init+0x50>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <MX_I2C3_Init+0x50>)
 80016f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016fa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <MX_I2C3_Init+0x50>)
 80016fe:	2200      	movs	r2, #0
 8001700:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <MX_I2C3_Init+0x50>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001708:	4b07      	ldr	r3, [pc, #28]	@ (8001728 <MX_I2C3_Init+0x50>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800170e:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <MX_I2C3_Init+0x50>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001714:	4804      	ldr	r0, [pc, #16]	@ (8001728 <MX_I2C3_Init+0x50>)
 8001716:	f001 ff27 	bl	8003568 <HAL_I2C_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001720:	f000 ffa0 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000410 	.word	0x20000410
 800172c:	40005c00 	.word	0x40005c00
 8001730:	000186a0 	.word	0x000186a0

08001734 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001738:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <MX_USART6_UART_Init+0x4c>)
 800173a:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <MX_USART6_UART_Init+0x50>)
 800173c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800173e:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <MX_USART6_UART_Init+0x4c>)
 8001740:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001744:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001746:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <MX_USART6_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <MX_USART6_UART_Init+0x4c>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001752:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <MX_USART6_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001758:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <MX_USART6_UART_Init+0x4c>)
 800175a:	220c      	movs	r2, #12
 800175c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175e:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <MX_USART6_UART_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <MX_USART6_UART_Init+0x4c>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	@ (8001780 <MX_USART6_UART_Init+0x4c>)
 800176c:	f003 fb4e 	bl	8004e0c <HAL_UART_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001776:	f000 ff75 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000464 	.word	0x20000464
 8001784:	40011400 	.word	0x40011400

08001788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b1e      	ldr	r3, [pc, #120]	@ (800180c <MX_GPIO_Init+0x84>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a1d      	ldr	r2, [pc, #116]	@ (800180c <MX_GPIO_Init+0x84>)
 8001798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <MX_GPIO_Init+0x84>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4b17      	ldr	r3, [pc, #92]	@ (800180c <MX_GPIO_Init+0x84>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4a16      	ldr	r2, [pc, #88]	@ (800180c <MX_GPIO_Init+0x84>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4b14      	ldr	r3, [pc, #80]	@ (800180c <MX_GPIO_Init+0x84>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <MX_GPIO_Init+0x84>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	4a0f      	ldr	r2, [pc, #60]	@ (800180c <MX_GPIO_Init+0x84>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d6:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <MX_GPIO_Init+0x84>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <MX_GPIO_Init+0x84>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	4a08      	ldr	r2, [pc, #32]	@ (800180c <MX_GPIO_Init+0x84>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <MX_GPIO_Init+0x84>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017fe:	bf00      	nop
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800

08001810 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6) {  // Thay USART1 bằng UART của bạn
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a17      	ldr	r2, [pc, #92]	@ (800187c <HAL_UART_RxCpltCallback+0x6c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d128      	bne.n	8001874 <HAL_UART_RxCpltCallback+0x64>
        if (rx_byte == '\n') {       // Kiểm tra ký tự LF
 8001822:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <HAL_UART_RxCpltCallback+0x70>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b0a      	cmp	r3, #10
 8001828:	d110      	bne.n	800184c <HAL_UART_RxCpltCallback+0x3c>
            rx_buffer[rx_index] = '\0'; // Kết thúc chuỗi
 800182a:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <HAL_UART_RxCpltCallback+0x74>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <HAL_UART_RxCpltCallback+0x78>)
 8001832:	2100      	movs	r1, #0
 8001834:	5499      	strb	r1, [r3, r2]
            rx_index = 0;            // Reset index
 8001836:	4b13      	ldr	r3, [pc, #76]	@ (8001884 <HAL_UART_RxCpltCallback+0x74>)
 8001838:	2200      	movs	r2, #0
 800183a:	801a      	strh	r2, [r3, #0]
			osMessageQueuePut(myQueue04Handle, &rx_buffer, 0U, 0U);
 800183c:	4b13      	ldr	r3, [pc, #76]	@ (800188c <HAL_UART_RxCpltCallback+0x7c>)
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	2300      	movs	r3, #0
 8001842:	2200      	movs	r2, #0
 8001844:	4910      	ldr	r1, [pc, #64]	@ (8001888 <HAL_UART_RxCpltCallback+0x78>)
 8001846:	f004 fceb 	bl	8006220 <osMessageQueuePut>
 800184a:	e00e      	b.n	800186a <HAL_UART_RxCpltCallback+0x5a>
        }
         else {
            if (rx_index < RX_BUFFER_SIZE - 1) {
 800184c:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <HAL_UART_RxCpltCallback+0x74>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	2b1c      	cmp	r3, #28
 8001852:	d80a      	bhi.n	800186a <HAL_UART_RxCpltCallback+0x5a>
                rx_buffer[rx_index++] = rx_byte; // Lưu byte vào buffer
 8001854:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <HAL_UART_RxCpltCallback+0x74>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	b291      	uxth	r1, r2
 800185c:	4a09      	ldr	r2, [pc, #36]	@ (8001884 <HAL_UART_RxCpltCallback+0x74>)
 800185e:	8011      	strh	r1, [r2, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <HAL_UART_RxCpltCallback+0x70>)
 8001864:	7819      	ldrb	r1, [r3, #0]
 8001866:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <HAL_UART_RxCpltCallback+0x78>)
 8001868:	5499      	strb	r1, [r3, r2]
            }
        }
        // Nhận tiếp byte mới
        HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 800186a:	2201      	movs	r2, #1
 800186c:	4904      	ldr	r1, [pc, #16]	@ (8001880 <HAL_UART_RxCpltCallback+0x70>)
 800186e:	4808      	ldr	r0, [pc, #32]	@ (8001890 <HAL_UART_RxCpltCallback+0x80>)
 8001870:	f003 fba7 	bl	8004fc2 <HAL_UART_Receive_IT>
    }
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40011400 	.word	0x40011400
 8001880:	2000051a 	.word	0x2000051a
 8001884:	2000051c 	.word	0x2000051c
 8001888:	200004fc 	.word	0x200004fc
 800188c:	200004d4 	.word	0x200004d4
 8001890:	20000464 	.word	0x20000464

08001894 <updatePriorities>:
void updatePriorities(void) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
    TickType_t now = xTaskGetTickCount();
 800189a:	f006 f82d 	bl	80078f8 <xTaskGetTickCount>
 800189e:	61f8      	str	r0, [r7, #28]

    // Calculate time remaining for each task
    TickType_t timeToDeadlineTemp = taskReadTempDeadline - now;
 80018a0:	4b4e      	ldr	r3, [pc, #312]	@ (80019dc <updatePriorities+0x148>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	61bb      	str	r3, [r7, #24]
    TickType_t timeToDeadlineTime = taskReadTimeDeadline - now;
 80018aa:	4b4d      	ldr	r3, [pc, #308]	@ (80019e0 <updatePriorities+0x14c>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	617b      	str	r3, [r7, #20]
    TickType_t timeToDeadlineDispTemp = taskDisplayTempDeadline - now;
 80018b4:	4b4b      	ldr	r3, [pc, #300]	@ (80019e4 <updatePriorities+0x150>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	613b      	str	r3, [r7, #16]
    TickType_t timeToDeadlineDispTime = taskDisplayTimeDeadline - now;
 80018be:	4b4a      	ldr	r3, [pc, #296]	@ (80019e8 <updatePriorities+0x154>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	60fb      	str	r3, [r7, #12]
    TickType_t timeToDeadlineRh  = taskReadRhDeadline - now;
 80018c8:	4b48      	ldr	r3, [pc, #288]	@ (80019ec <updatePriorities+0x158>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	60bb      	str	r3, [r7, #8]
    TickType_t timeToDeadlineDispRh = taskDisplayRhDeadline - now;
 80018d2:	4b47      	ldr	r3, [pc, #284]	@ (80019f0 <updatePriorities+0x15c>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	607b      	str	r3, [r7, #4]

    // Update priorities dynamically
    vTaskPrioritySet(NULL, osPriorityLow); // Default priority for the current task
 80018dc:	2108      	movs	r1, #8
 80018de:	2000      	movs	r0, #0
 80018e0:	f005 fe58 	bl	8007594 <vTaskPrioritySet>

    if (timeToDeadlineTemp <= timeToDeadlineTime &&
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d819      	bhi.n	8001920 <updatePriorities+0x8c>
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d815      	bhi.n	8001920 <updatePriorities+0x8c>
        timeToDeadlineTemp <= timeToDeadlineDispTemp &&
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d811      	bhi.n	8001920 <updatePriorities+0x8c>
        timeToDeadlineTemp <= timeToDeadlineDispTime &&
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	d80d      	bhi.n	8001920 <updatePriorities+0x8c>
		timeToDeadlineTemp <= timeToDeadlineDispRh &&
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	429a      	cmp	r2, r3
 800190a:	d809      	bhi.n	8001920 <updatePriorities+0x8c>
		timeToDeadlineTemp <= timeToDeadlineRh) {
        vTaskPrioritySet(defaultTaskHandle, osPriorityHigh);
 800190c:	4b39      	ldr	r3, [pc, #228]	@ (80019f4 <updatePriorities+0x160>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2128      	movs	r1, #40	@ 0x28
 8001912:	4618      	mov	r0, r3
 8001914:	f005 fe3e 	bl	8007594 <vTaskPrioritySet>
        printf("Task 01 cao nhat\n");
 8001918:	4837      	ldr	r0, [pc, #220]	@ (80019f8 <updatePriorities+0x164>)
 800191a:	f009 ff41 	bl	800b7a0 <puts>
 800191e:	e059      	b.n	80019d4 <updatePriorities+0x140>
    } else if (timeToDeadlineTime <= timeToDeadlineDispTemp &&
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	d815      	bhi.n	8001954 <updatePriorities+0xc0>
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d811      	bhi.n	8001954 <updatePriorities+0xc0>
               timeToDeadlineTime <= timeToDeadlineDispTime &&
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	429a      	cmp	r2, r3
 8001936:	d80d      	bhi.n	8001954 <updatePriorities+0xc0>
			   timeToDeadlineTime <= timeToDeadlineRh &&
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	429a      	cmp	r2, r3
 800193e:	d809      	bhi.n	8001954 <updatePriorities+0xc0>
			   timeToDeadlineTime <= timeToDeadlineDispRh) {
        vTaskPrioritySet(RealTimeHandle, osPriorityHigh);
 8001940:	4b2e      	ldr	r3, [pc, #184]	@ (80019fc <updatePriorities+0x168>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2128      	movs	r1, #40	@ 0x28
 8001946:	4618      	mov	r0, r3
 8001948:	f005 fe24 	bl	8007594 <vTaskPrioritySet>
        printf("Task 02 cao nhat\n");
 800194c:	482c      	ldr	r0, [pc, #176]	@ (8001a00 <updatePriorities+0x16c>)
 800194e:	f009 ff27 	bl	800b7a0 <puts>
 8001952:	e03f      	b.n	80019d4 <updatePriorities+0x140>
    } else if (timeToDeadlineDispTemp <= timeToDeadlineDispTime &&
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	429a      	cmp	r2, r3
 800195a:	d811      	bhi.n	8001980 <updatePriorities+0xec>
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	d80d      	bhi.n	8001980 <updatePriorities+0xec>
    		timeToDeadlineDispTemp <= timeToDeadlineDispRh &&
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	429a      	cmp	r2, r3
 800196a:	d809      	bhi.n	8001980 <updatePriorities+0xec>
			timeToDeadlineDispTemp <= timeToDeadlineRh) {
        vTaskPrioritySet(DisplayTempHandle, osPriorityHigh);
 800196c:	4b25      	ldr	r3, [pc, #148]	@ (8001a04 <updatePriorities+0x170>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2128      	movs	r1, #40	@ 0x28
 8001972:	4618      	mov	r0, r3
 8001974:	f005 fe0e 	bl	8007594 <vTaskPrioritySet>
        print_cli("Task 3 cao nhat\n");
 8001978:	4823      	ldr	r0, [pc, #140]	@ (8001a08 <updatePriorities+0x174>)
 800197a:	f000 fe79 	bl	8002670 <print_cli>
 800197e:	e029      	b.n	80019d4 <updatePriorities+0x140>
    }else if(timeToDeadlineRh <= timeToDeadlineDispRh &&
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	d80d      	bhi.n	80019a4 <updatePriorities+0x110>
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	429a      	cmp	r2, r3
 800198e:	d809      	bhi.n	80019a4 <updatePriorities+0x110>
    		timeToDeadlineRh <= timeToDeadlineDispTime){
    	vTaskPrioritySet(myTask05Handle, osPriorityHigh);
 8001990:	4b1e      	ldr	r3, [pc, #120]	@ (8001a0c <updatePriorities+0x178>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2128      	movs	r1, #40	@ 0x28
 8001996:	4618      	mov	r0, r3
 8001998:	f005 fdfc 	bl	8007594 <vTaskPrioritySet>
    	print_cli("Task 5 cao nhat\n");
 800199c:	481c      	ldr	r0, [pc, #112]	@ (8001a10 <updatePriorities+0x17c>)
 800199e:	f000 fe67 	bl	8002670 <print_cli>
 80019a2:	e017      	b.n	80019d4 <updatePriorities+0x140>
    }else if(timeToDeadlineDispRh <= timeToDeadlineDispTime){
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d809      	bhi.n	80019c0 <updatePriorities+0x12c>
    	vTaskPrioritySet(myTask06Handle, osPriorityHigh);
 80019ac:	4b19      	ldr	r3, [pc, #100]	@ (8001a14 <updatePriorities+0x180>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2128      	movs	r1, #40	@ 0x28
 80019b2:	4618      	mov	r0, r3
 80019b4:	f005 fdee 	bl	8007594 <vTaskPrioritySet>
    	print_cli("Task 6 cao nhat\n");
 80019b8:	4817      	ldr	r0, [pc, #92]	@ (8001a18 <updatePriorities+0x184>)
 80019ba:	f000 fe59 	bl	8002670 <print_cli>
    }else {
        vTaskPrioritySet(DisplayTimeHandle, osPriorityHigh);
        print_cli("Task 4 cao nhat\n");

    }
}
 80019be:	e009      	b.n	80019d4 <updatePriorities+0x140>
        vTaskPrioritySet(DisplayTimeHandle, osPriorityHigh);
 80019c0:	4b16      	ldr	r3, [pc, #88]	@ (8001a1c <updatePriorities+0x188>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2128      	movs	r1, #40	@ 0x28
 80019c6:	4618      	mov	r0, r3
 80019c8:	f005 fde4 	bl	8007594 <vTaskPrioritySet>
        print_cli("Task 4 cao nhat\n");
 80019cc:	4814      	ldr	r0, [pc, #80]	@ (8001a20 <updatePriorities+0x18c>)
 80019ce:	f000 fe4f 	bl	8002670 <print_cli>
}
 80019d2:	e7ff      	b.n	80019d4 <updatePriorities+0x140>
 80019d4:	bf00      	nop
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200004e4 	.word	0x200004e4
 80019e0:	200004e8 	.word	0x200004e8
 80019e4:	200004ec 	.word	0x200004ec
 80019e8:	200004f0 	.word	0x200004f0
 80019ec:	200004f4 	.word	0x200004f4
 80019f0:	200004f8 	.word	0x200004f8
 80019f4:	200004ac 	.word	0x200004ac
 80019f8:	0800db10 	.word	0x0800db10
 80019fc:	200004b0 	.word	0x200004b0
 8001a00:	0800db24 	.word	0x0800db24
 8001a04:	200004b4 	.word	0x200004b4
 8001a08:	0800db38 	.word	0x0800db38
 8001a0c:	200004bc 	.word	0x200004bc
 8001a10:	0800db4c 	.word	0x0800db4c
 8001a14:	200004c0 	.word	0x200004c0
 8001a18:	0800db60 	.word	0x0800db60
 8001a1c:	200004b8 	.word	0x200004b8
 8001a20:	0800db74 	.word	0x0800db74

08001a24 <updatePrevious>:
void updatePrevious(Task *previous, Task *current) {
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
    previous->period = current->period;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	605a      	str	r2, [r3, #4]
    previous->execTime = current->execTime;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
    previous->deadline = current->deadline;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60da      	str	r2, [r3, #12]
    previous->allPeriod = current->allPeriod;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	615a      	str	r2, [r3, #20]
    previous->priotity = current->priotity;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	611a      	str	r2, [r3, #16]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <detectChange>:
bool detectChange(Task *current, Task *previous){
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
    // So sánh từng trư�?ng
    if (current->period != previous->period ||
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d117      	bne.n	8001aa8 <detectChange+0x46>
        current->execTime != previous->execTime ||
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
    if (current->period != previous->period ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d111      	bne.n	8001aa8 <detectChange+0x46>
        current->deadline != previous->deadline ||
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
        current->execTime != previous->execTime ||
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d10b      	bne.n	8001aa8 <detectChange+0x46>
        current->priotity != previous->priotity ||
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691a      	ldr	r2, [r3, #16]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	691b      	ldr	r3, [r3, #16]
        current->deadline != previous->deadline ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d105      	bne.n	8001aa8 <detectChange+0x46>
		current->allPeriod != previous->allPeriod) {
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695a      	ldr	r2, [r3, #20]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	695b      	ldr	r3, [r3, #20]
        current->priotity != previous->priotity ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d004      	beq.n	8001ab2 <detectChange+0x50>
        current->changed = true; // �?ánh dấu thay đổi
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	761a      	strb	r2, [r3, #24]
        return true;             // Có thay đổi
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e003      	b.n	8001aba <detectChange+0x58>
    }
    current->changed = false;    // Không có thay đổi
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	761a      	strb	r2, [r3, #24]
    return false;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t lastWakeTime = osKernelGetTickCount();
 8001ad0:	f004 fa70 	bl	8005fb4 <osKernelGetTickCount>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	613b      	str	r3, [r7, #16]
	taskReadTempDeadline = lastWakeTime + pdMS_TO_TICKS(tasks[0].deadline);
 8001ad8:	4b51      	ldr	r3, [pc, #324]	@ (8001c20 <StartDefaultTask+0x158>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	461a      	mov	r2, r3
 8001ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ae2:	fb02 f303 	mul.w	r3, r2, r3
 8001ae6:	4a4f      	ldr	r2, [pc, #316]	@ (8001c24 <StartDefaultTask+0x15c>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	099a      	lsrs	r2, r3, #6
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4413      	add	r3, r2
 8001af2:	4a4d      	ldr	r2, [pc, #308]	@ (8001c28 <StartDefaultTask+0x160>)
 8001af4:	6013      	str	r3, [r2, #0]
	float temp;
	float timeInSeconds;
  /* Infinite loop */
  for(;;)
  {
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001af6:	f004 fa5d 	bl	8005fb4 <osKernelGetTickCount>
 8001afa:	ee07 0a90 	vmov	s15, r0
 8001afe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b02:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8001c2c <StartDefaultTask+0x164>
 8001b06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b0a:	edc7 7a05 	vstr	s15, [r7, #20]
	  print_cli("Thoi diem bat dau task do nhiet do: %.3f\n", timeInSeconds);
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7fe fd72 	bl	80005f8 <__aeabi_f2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4845      	ldr	r0, [pc, #276]	@ (8001c30 <StartDefaultTask+0x168>)
 8001b1a:	f000 fda9 	bl	8002670 <print_cli>
	  temp = SHT2x_GetTemperature(1);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f000 fe3e 	bl	80027a0 <SHT2x_GetTemperature>
 8001b24:	eef0 7a40 	vmov.f32	s15, s0
 8001b28:	edc7 7a03 	vstr	s15, [r7, #12]
	  print_cli("Nhiet do la %.3f", temp);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fd62 	bl	80005f8 <__aeabi_f2d>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	483e      	ldr	r0, [pc, #248]	@ (8001c34 <StartDefaultTask+0x16c>)
 8001b3a:	f000 fd99 	bl	8002670 <print_cli>
	  if (osKernelGetTickCount() > taskReadTempDeadline)
 8001b3e:	f004 fa39 	bl	8005fb4 <osKernelGetTickCount>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b38      	ldr	r3, [pc, #224]	@ (8001c28 <StartDefaultTask+0x160>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d902      	bls.n	8001b52 <StartDefaultTask+0x8a>
	  	  {
	  		  print_cli("Task Read Temperature missed deadline\n");
 8001b4c:	483a      	ldr	r0, [pc, #232]	@ (8001c38 <StartDefaultTask+0x170>)
 8001b4e:	f000 fd8f 	bl	8002670 <print_cli>
	  	  }
	  if (detectChange(&tasks[0], &prev_tasks[0]))
 8001b52:	493a      	ldr	r1, [pc, #232]	@ (8001c3c <StartDefaultTask+0x174>)
 8001b54:	4832      	ldr	r0, [pc, #200]	@ (8001c20 <StartDefaultTask+0x158>)
 8001b56:	f7ff ff84 	bl	8001a62 <detectChange>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d02e      	beq.n	8001bbe <StartDefaultTask+0xf6>
		{
			print_cli("Task 1 has changed.--------------------\n");
 8001b60:	4837      	ldr	r0, [pc, #220]	@ (8001c40 <StartDefaultTask+0x178>)
 8001b62:	f000 fd85 	bl	8002670 <print_cli>
			// Cập nhật giá trị trước đó
			taskReadTempDeadline = taskReadTempDeadline + pdMS_TO_TICKS(tasks[0].period)
 8001b66:	4b2e      	ldr	r3, [pc, #184]	@ (8001c20 <StartDefaultTask+0x158>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b70:	fb02 f303 	mul.w	r3, r2, r3
 8001b74:	4a2b      	ldr	r2, [pc, #172]	@ (8001c24 <StartDefaultTask+0x15c>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	099a      	lsrs	r2, r3, #6
 8001b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c28 <StartDefaultTask+0x160>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	441a      	add	r2, r3
					- pdMS_TO_TICKS(prev_tasks[0].deadline) + pdMS_TO_TICKS(tasks[0].deadline);
 8001b82:	4b2e      	ldr	r3, [pc, #184]	@ (8001c3c <StartDefaultTask+0x174>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	4619      	mov	r1, r3
 8001b88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8c:	fb01 f303 	mul.w	r3, r1, r3
 8001b90:	4924      	ldr	r1, [pc, #144]	@ (8001c24 <StartDefaultTask+0x15c>)
 8001b92:	fba1 1303 	umull	r1, r3, r1, r3
 8001b96:	099b      	lsrs	r3, r3, #6
 8001b98:	1ad2      	subs	r2, r2, r3
 8001b9a:	4b21      	ldr	r3, [pc, #132]	@ (8001c20 <StartDefaultTask+0x158>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ba4:	fb01 f303 	mul.w	r3, r1, r3
 8001ba8:	491e      	ldr	r1, [pc, #120]	@ (8001c24 <StartDefaultTask+0x15c>)
 8001baa:	fba1 1303 	umull	r1, r3, r1, r3
 8001bae:	099b      	lsrs	r3, r3, #6
 8001bb0:	4413      	add	r3, r2
			taskReadTempDeadline = taskReadTempDeadline + pdMS_TO_TICKS(tasks[0].period)
 8001bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c28 <StartDefaultTask+0x160>)
 8001bb4:	6013      	str	r3, [r2, #0]
			updatePrevious(&prev_tasks[0], &tasks[0]);
 8001bb6:	491a      	ldr	r1, [pc, #104]	@ (8001c20 <StartDefaultTask+0x158>)
 8001bb8:	4820      	ldr	r0, [pc, #128]	@ (8001c3c <StartDefaultTask+0x174>)
 8001bba:	f7ff ff33 	bl	8001a24 <updatePrevious>
		 }
	  //taskReadTempDeadline += pdMS_TO_TICKS(tasks[0].period);
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001bbe:	f004 f9f9 	bl	8005fb4 <osKernelGetTickCount>
 8001bc2:	ee07 0a90 	vmov	s15, r0
 8001bc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bca:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001c2c <StartDefaultTask+0x164>
 8001bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bd2:	edc7 7a05 	vstr	s15, [r7, #20]
	  print_cli("Thoi diem ket thuc task do nhiet do: %.3f\n", timeInSeconds);
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7fe fd0e 	bl	80005f8 <__aeabi_f2d>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4818      	ldr	r0, [pc, #96]	@ (8001c44 <StartDefaultTask+0x17c>)
 8001be2:	f000 fd45 	bl	8002670 <print_cli>
	  osMessageQueuePut(myQueue01Handle, &temp, 0U, 0U);
 8001be6:	4b18      	ldr	r3, [pc, #96]	@ (8001c48 <StartDefaultTask+0x180>)
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	f107 010c 	add.w	r1, r7, #12
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f004 fb15 	bl	8006220 <osMessageQueuePut>
	  updatePriorities();
 8001bf6:	f7ff fe4d 	bl	8001894 <updatePriorities>
	  vTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(tasks[0].period));
 8001bfa:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <StartDefaultTask+0x158>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c04:	fb02 f303 	mul.w	r3, r2, r3
 8001c08:	4a06      	ldr	r2, [pc, #24]	@ (8001c24 <StartDefaultTask+0x15c>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	099a      	lsrs	r2, r3, #6
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f005 fc06 	bl	8007428 <vTaskDelayUntil>
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001c1c:	e76b      	b.n	8001af6 <StartDefaultTask+0x2e>
 8001c1e:	bf00      	nop
 8001c20:	20000000 	.word	0x20000000
 8001c24:	10624dd3 	.word	0x10624dd3
 8001c28:	200004e4 	.word	0x200004e4
 8001c2c:	447a0000 	.word	0x447a0000
 8001c30:	0800db88 	.word	0x0800db88
 8001c34:	0800dbb4 	.word	0x0800dbb4
 8001c38:	0800dbc8 	.word	0x0800dbc8
 8001c3c:	200000a8 	.word	0x200000a8
 8001c40:	0800dbf0 	.word	0x0800dbf0
 8001c44:	0800dc1c 	.word	0x0800dc1c
 8001c48:	200004c8 	.word	0x200004c8

08001c4c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	DateTime dateTimeSend;
	TickType_t lastWakeTime = osKernelGetTickCount();
 8001c54:	f004 f9ae 	bl	8005fb4 <osKernelGetTickCount>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60fb      	str	r3, [r7, #12]
	taskReadTimeDeadline = lastWakeTime + pdMS_TO_TICKS(tasks[1].deadline);
 8001c5c:	4b4a      	ldr	r3, [pc, #296]	@ (8001d88 <StartTask02+0x13c>)
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c60:	461a      	mov	r2, r3
 8001c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
 8001c6a:	4a48      	ldr	r2, [pc, #288]	@ (8001d8c <StartTask02+0x140>)
 8001c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c70:	099a      	lsrs	r2, r3, #6
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a46      	ldr	r2, [pc, #280]	@ (8001d90 <StartTask02+0x144>)
 8001c78:	6013      	str	r3, [r2, #0]
	float timeInSeconds;
  /* Infinite loop */
  for(;;)
  {
	timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001c7a:	f004 f99b 	bl	8005fb4 <osKernelGetTickCount>
 8001c7e:	ee07 0a90 	vmov	s15, r0
 8001c82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c86:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001d94 <StartTask02+0x148>
 8001c8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c8e:	edc7 7a07 	vstr	s15, [r7, #28]
	print_cli("Thoi diem bat dau task do thoi gian: %.3f\n", timeInSeconds);
 8001c92:	69f8      	ldr	r0, [r7, #28]
 8001c94:	f7fe fcb0 	bl	80005f8 <__aeabi_f2d>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	483e      	ldr	r0, [pc, #248]	@ (8001d98 <StartTask02+0x14c>)
 8001c9e:	f000 fce7 	bl	8002670 <print_cli>
	rtc_read_time(&dateTimeSend);
 8001ca2:	f107 0310 	add.w	r3, r7, #16
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fa24 	bl	80010f4 <rtc_read_time>

	//Check Deadline
	if (osKernelGetTickCount() > taskReadTimeDeadline)
 8001cac:	f004 f982 	bl	8005fb4 <osKernelGetTickCount>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	4b37      	ldr	r3, [pc, #220]	@ (8001d90 <StartTask02+0x144>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d902      	bls.n	8001cc0 <StartTask02+0x74>
	{
		print_cli("Task Read Time missed deadline\n");
 8001cba:	4838      	ldr	r0, [pc, #224]	@ (8001d9c <StartTask02+0x150>)
 8001cbc:	f000 fcd8 	bl	8002670 <print_cli>
	}
	if (detectChange(&tasks[1], &prev_tasks[1]))
 8001cc0:	4937      	ldr	r1, [pc, #220]	@ (8001da0 <StartTask02+0x154>)
 8001cc2:	4838      	ldr	r0, [pc, #224]	@ (8001da4 <StartTask02+0x158>)
 8001cc4:	f7ff fecd 	bl	8001a62 <detectChange>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d02b      	beq.n	8001d26 <StartTask02+0xda>
	{
		// Cập nhật giá trị trước đó
		taskReadTimeDeadline = taskReadTimeDeadline + pdMS_TO_TICKS(tasks[1].period)
 8001cce:	4b2e      	ldr	r3, [pc, #184]	@ (8001d88 <StartTask02+0x13c>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cd8:	fb02 f303 	mul.w	r3, r2, r3
 8001cdc:	4a2b      	ldr	r2, [pc, #172]	@ (8001d8c <StartTask02+0x140>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	099a      	lsrs	r2, r3, #6
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d90 <StartTask02+0x144>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	441a      	add	r2, r3
				- pdMS_TO_TICKS(prev_tasks[1].deadline) + pdMS_TO_TICKS(tasks[1].deadline);
 8001cea:	4b2f      	ldr	r3, [pc, #188]	@ (8001da8 <StartTask02+0x15c>)
 8001cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf4:	fb01 f303 	mul.w	r3, r1, r3
 8001cf8:	4924      	ldr	r1, [pc, #144]	@ (8001d8c <StartTask02+0x140>)
 8001cfa:	fba1 1303 	umull	r1, r3, r1, r3
 8001cfe:	099b      	lsrs	r3, r3, #6
 8001d00:	1ad2      	subs	r2, r2, r3
 8001d02:	4b21      	ldr	r3, [pc, #132]	@ (8001d88 <StartTask02+0x13c>)
 8001d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d06:	4619      	mov	r1, r3
 8001d08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	491e      	ldr	r1, [pc, #120]	@ (8001d8c <StartTask02+0x140>)
 8001d12:	fba1 1303 	umull	r1, r3, r1, r3
 8001d16:	099b      	lsrs	r3, r3, #6
 8001d18:	4413      	add	r3, r2
		taskReadTimeDeadline = taskReadTimeDeadline + pdMS_TO_TICKS(tasks[1].period)
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d90 <StartTask02+0x144>)
 8001d1c:	6013      	str	r3, [r2, #0]
		updatePrevious(&prev_tasks[1], &tasks[1]);
 8001d1e:	4921      	ldr	r1, [pc, #132]	@ (8001da4 <StartTask02+0x158>)
 8001d20:	481f      	ldr	r0, [pc, #124]	@ (8001da0 <StartTask02+0x154>)
 8001d22:	f7ff fe7f 	bl	8001a24 <updatePrevious>
	 }
	timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001d26:	f004 f945 	bl	8005fb4 <osKernelGetTickCount>
 8001d2a:	ee07 0a90 	vmov	s15, r0
 8001d2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d32:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001d94 <StartTask02+0x148>
 8001d36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d3a:	edc7 7a07 	vstr	s15, [r7, #28]
	print_cli("Thoi diem ket thuc task do thoi gian: %.3f\n", timeInSeconds);
 8001d3e:	69f8      	ldr	r0, [r7, #28]
 8001d40:	f7fe fc5a 	bl	80005f8 <__aeabi_f2d>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4818      	ldr	r0, [pc, #96]	@ (8001dac <StartTask02+0x160>)
 8001d4a:	f000 fc91 	bl	8002670 <print_cli>
	osMessageQueuePut(myQueue02Handle, &dateTimeSend, 0U, 0U);
 8001d4e:	4b18      	ldr	r3, [pc, #96]	@ (8001db0 <StartTask02+0x164>)
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	f107 0110 	add.w	r1, r7, #16
 8001d56:	2300      	movs	r3, #0
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f004 fa61 	bl	8006220 <osMessageQueuePut>
	updatePriorities();
 8001d5e:	f7ff fd99 	bl	8001894 <updatePriorities>
	vTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(tasks[1].period));
 8001d62:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <StartTask02+0x13c>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	461a      	mov	r2, r3
 8001d68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d6c:	fb02 f303 	mul.w	r3, r2, r3
 8001d70:	4a06      	ldr	r2, [pc, #24]	@ (8001d8c <StartTask02+0x140>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	099a      	lsrs	r2, r3, #6
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f005 fb52 	bl	8007428 <vTaskDelayUntil>
	timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001d84:	e779      	b.n	8001c7a <StartTask02+0x2e>
 8001d86:	bf00      	nop
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	10624dd3 	.word	0x10624dd3
 8001d90:	200004e8 	.word	0x200004e8
 8001d94:	447a0000 	.word	0x447a0000
 8001d98:	0800dc48 	.word	0x0800dc48
 8001d9c:	0800dc74 	.word	0x0800dc74
 8001da0:	200000c4 	.word	0x200000c4
 8001da4:	2000001c 	.word	0x2000001c
 8001da8:	200000a8 	.word	0x200000a8
 8001dac:	0800dc94 	.word	0x0800dc94
 8001db0:	200004cc 	.word	0x200004cc

08001db4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	TickType_t lastWakeTime = osKernelGetTickCount();
 8001dbc:	f004 f8fa 	bl	8005fb4 <osKernelGetTickCount>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	61bb      	str	r3, [r7, #24]
	taskDisplayTempDeadline = lastWakeTime + pdMS_TO_TICKS(tasks[2].deadline);
 8001dc4:	4b56      	ldr	r3, [pc, #344]	@ (8001f20 <StartTask03+0x16c>)
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dce:	fb02 f303 	mul.w	r3, r2, r3
 8001dd2:	4a54      	ldr	r2, [pc, #336]	@ (8001f24 <StartTask03+0x170>)
 8001dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd8:	099a      	lsrs	r2, r3, #6
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	4413      	add	r3, r2
 8001dde:	4a52      	ldr	r2, [pc, #328]	@ (8001f28 <StartTask03+0x174>)
 8001de0:	6013      	str	r3, [r2, #0]
	char temStr[6];
	float timeInSeconds;
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(myQueue01Handle, &tempRecv, NULL, osWaitForever);
 8001de2:	4b52      	ldr	r3, [pc, #328]	@ (8001f2c <StartTask03+0x178>)
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	f107 0114 	add.w	r1, r7, #20
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
 8001dee:	2200      	movs	r2, #0
 8001df0:	f004 fa76 	bl	80062e0 <osMessageQueueGet>
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001df4:	f004 f8de 	bl	8005fb4 <osKernelGetTickCount>
 8001df8:	ee07 0a90 	vmov	s15, r0
 8001dfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e00:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8001f30 <StartTask03+0x17c>
 8001e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e08:	edc7 7a07 	vstr	s15, [r7, #28]
	  print_cli("Thoi diem bat dau task send nhiet do: %.3f\n", timeInSeconds);
 8001e0c:	69f8      	ldr	r0, [r7, #28]
 8001e0e:	f7fe fbf3 	bl	80005f8 <__aeabi_f2d>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4847      	ldr	r0, [pc, #284]	@ (8001f34 <StartTask03+0x180>)
 8001e18:	f000 fc2a 	bl	8002670 <print_cli>
	  sprintf(temStr, "T:%.3f", tempRecv);
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fbea 	bl	80005f8 <__aeabi_f2d>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	f107 000c 	add.w	r0, r7, #12
 8001e2c:	4942      	ldr	r1, [pc, #264]	@ (8001f38 <StartTask03+0x184>)
 8001e2e:	f009 fcbf 	bl	800b7b0 <siprintf>
	  lcd_put_cur(0, 9);
 8001e32:	2109      	movs	r1, #9
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7ff fa25 	bl	8001284 <lcd_put_cur>
	  lcd_send_string(&temStr);
 8001e3a:	f107 030c 	add.w	r3, r7, #12
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fa7c 	bl	800133c <lcd_send_string>
	  print_cli("Temperature is: %.2f\n", tempRecv);
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fbd6 	bl	80005f8 <__aeabi_f2d>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	483a      	ldr	r0, [pc, #232]	@ (8001f3c <StartTask03+0x188>)
 8001e52:	f000 fc0d 	bl	8002670 <print_cli>
	  // Check deadline
		if (xTaskGetTickCount() > taskDisplayTempDeadline) {
 8001e56:	f005 fd4f 	bl	80078f8 <xTaskGetTickCount>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	4b32      	ldr	r3, [pc, #200]	@ (8001f28 <StartTask03+0x174>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d902      	bls.n	8001e6a <StartTask03+0xb6>
			print_cli("Task Display Temperature missed deadline\n");
 8001e64:	4836      	ldr	r0, [pc, #216]	@ (8001f40 <StartTask03+0x18c>)
 8001e66:	f000 fc03 	bl	8002670 <print_cli>
		}
		if (detectChange(&tasks[2], &prev_tasks[2]))
 8001e6a:	4936      	ldr	r1, [pc, #216]	@ (8001f44 <StartTask03+0x190>)
 8001e6c:	4836      	ldr	r0, [pc, #216]	@ (8001f48 <StartTask03+0x194>)
 8001e6e:	f7ff fdf8 	bl	8001a62 <detectChange>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d02b      	beq.n	8001ed0 <StartTask03+0x11c>
		{
			// Cập nhật giá trị trước đó
			taskDisplayTempDeadline = taskDisplayTempDeadline + pdMS_TO_TICKS(tasks[2].period)
 8001e78:	4b29      	ldr	r3, [pc, #164]	@ (8001f20 <StartTask03+0x16c>)
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	4a27      	ldr	r2, [pc, #156]	@ (8001f24 <StartTask03+0x170>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	099a      	lsrs	r2, r3, #6
 8001e8e:	4b26      	ldr	r3, [pc, #152]	@ (8001f28 <StartTask03+0x174>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	441a      	add	r2, r3
					- pdMS_TO_TICKS(prev_tasks[2].deadline) + pdMS_TO_TICKS(tasks[2].deadline);
 8001e94:	4b2d      	ldr	r3, [pc, #180]	@ (8001f4c <StartTask03+0x198>)
 8001e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ea2:	4920      	ldr	r1, [pc, #128]	@ (8001f24 <StartTask03+0x170>)
 8001ea4:	fba1 1303 	umull	r1, r3, r1, r3
 8001ea8:	099b      	lsrs	r3, r3, #6
 8001eaa:	1ad2      	subs	r2, r2, r3
 8001eac:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <StartTask03+0x16c>)
 8001eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eb6:	fb01 f303 	mul.w	r3, r1, r3
 8001eba:	491a      	ldr	r1, [pc, #104]	@ (8001f24 <StartTask03+0x170>)
 8001ebc:	fba1 1303 	umull	r1, r3, r1, r3
 8001ec0:	099b      	lsrs	r3, r3, #6
 8001ec2:	4413      	add	r3, r2
			taskDisplayTempDeadline = taskDisplayTempDeadline + pdMS_TO_TICKS(tasks[2].period)
 8001ec4:	4a18      	ldr	r2, [pc, #96]	@ (8001f28 <StartTask03+0x174>)
 8001ec6:	6013      	str	r3, [r2, #0]
			updatePrevious(&prev_tasks[2], &tasks[2]);
 8001ec8:	491f      	ldr	r1, [pc, #124]	@ (8001f48 <StartTask03+0x194>)
 8001eca:	481e      	ldr	r0, [pc, #120]	@ (8001f44 <StartTask03+0x190>)
 8001ecc:	f7ff fdaa 	bl	8001a24 <updatePrevious>
		 }
		timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001ed0:	f004 f870 	bl	8005fb4 <osKernelGetTickCount>
 8001ed4:	ee07 0a90 	vmov	s15, r0
 8001ed8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001edc:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001f30 <StartTask03+0x17c>
 8001ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee4:	edc7 7a07 	vstr	s15, [r7, #28]
		print_cli("Thoi diem ket thuc task send nhiet do: %.3f\n", timeInSeconds);
 8001ee8:	69f8      	ldr	r0, [r7, #28]
 8001eea:	f7fe fb85 	bl	80005f8 <__aeabi_f2d>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4817      	ldr	r0, [pc, #92]	@ (8001f50 <StartTask03+0x19c>)
 8001ef4:	f000 fbbc 	bl	8002670 <print_cli>
		updatePriorities();
 8001ef8:	f7ff fccc 	bl	8001894 <updatePriorities>
		// Delay until next period
		vTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(tasks[2].period));
 8001efc:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <StartTask03+0x16c>)
 8001efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f00:	461a      	mov	r2, r3
 8001f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f06:	fb02 f303 	mul.w	r3, r2, r3
 8001f0a:	4a06      	ldr	r2, [pc, #24]	@ (8001f24 <StartTask03+0x170>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	099a      	lsrs	r2, r3, #6
 8001f12:	f107 0318 	add.w	r3, r7, #24
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f005 fa85 	bl	8007428 <vTaskDelayUntil>
	  osMessageQueueGet(myQueue01Handle, &tempRecv, NULL, osWaitForever);
 8001f1e:	e760      	b.n	8001de2 <StartTask03+0x2e>
 8001f20:	20000000 	.word	0x20000000
 8001f24:	10624dd3 	.word	0x10624dd3
 8001f28:	200004ec 	.word	0x200004ec
 8001f2c:	200004c8 	.word	0x200004c8
 8001f30:	447a0000 	.word	0x447a0000
 8001f34:	0800dcc0 	.word	0x0800dcc0
 8001f38:	0800dcec 	.word	0x0800dcec
 8001f3c:	0800dcf4 	.word	0x0800dcf4
 8001f40:	0800dd0c 	.word	0x0800dd0c
 8001f44:	200000e0 	.word	0x200000e0
 8001f48:	20000038 	.word	0x20000038
 8001f4c:	200000a8 	.word	0x200000a8
 8001f50:	0800dd38 	.word	0x0800dd38

08001f54 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b090      	sub	sp, #64	@ 0x40
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	TickType_t lastWakeTime = osKernelGetTickCount();
 8001f5c:	f004 f82a 	bl	8005fb4 <osKernelGetTickCount>
 8001f60:	4603      	mov	r3, r0
 8001f62:	633b      	str	r3, [r7, #48]	@ 0x30
	taskDisplayTimeDeadline = lastWakeTime + pdMS_TO_TICKS(tasks[3].deadline);
 8001f64:	4b65      	ldr	r3, [pc, #404]	@ (80020fc <StartTask04+0x1a8>)
 8001f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f68:	461a      	mov	r2, r3
 8001f6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	4a63      	ldr	r2, [pc, #396]	@ (8002100 <StartTask04+0x1ac>)
 8001f74:	fba2 2303 	umull	r2, r3, r2, r3
 8001f78:	099a      	lsrs	r2, r3, #6
 8001f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4a61      	ldr	r2, [pc, #388]	@ (8002104 <StartTask04+0x1b0>)
 8001f80:	6013      	str	r3, [r2, #0]
	char timeStrDay[10];
	float timeInSeconds;
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(myQueue02Handle, &dateTimeRecv, NULL, osWaitForever);
 8001f82:	4b61      	ldr	r3, [pc, #388]	@ (8002108 <StartTask04+0x1b4>)
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f004 f9a6 	bl	80062e0 <osMessageQueueGet>
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001f94:	f004 f80e 	bl	8005fb4 <osKernelGetTickCount>
 8001f98:	ee07 0a90 	vmov	s15, r0
 8001f9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fa0:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 800210c <StartTask04+0x1b8>
 8001fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fa8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	  print_cli("Thoi diem bat dau task send thoi gian: %.3f\n", timeInSeconds);
 8001fac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001fae:	f7fe fb23 	bl	80005f8 <__aeabi_f2d>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4856      	ldr	r0, [pc, #344]	@ (8002110 <StartTask04+0x1bc>)
 8001fb8:	f000 fb5a 	bl	8002670 <print_cli>
	  sprintf(timeStrTime, "%02d:%02d:%02d", dateTimeRecv.hour, dateTimeRecv.min, dateTimeRecv.sec);
 8001fbc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001fcc:	f107 0018 	add.w	r0, r7, #24
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	494f      	ldr	r1, [pc, #316]	@ (8002114 <StartTask04+0x1c0>)
 8001fd6:	f009 fbeb 	bl	800b7b0 <siprintf>
	  sprintf(timeStrDay, "%02d/%02d/20%02d", dateTimeRecv.day, dateTimeRecv.mon, dateTimeRecv.year);
 8001fda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001fea:	f107 000c 	add.w	r0, r7, #12
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4949      	ldr	r1, [pc, #292]	@ (8002118 <StartTask04+0x1c4>)
 8001ff4:	f009 fbdc 	bl	800b7b0 <siprintf>
	  lcd_put_cur(0, 0);
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f7ff f942 	bl	8001284 <lcd_put_cur>
	  lcd_send_string(&timeStrTime);
 8002000:	f107 0318 	add.w	r3, r7, #24
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff f999 	bl	800133c <lcd_send_string>
	  print_cli("Current time: %s \nDay: %s\n", timeStrTime, timeStrDay);
 800200a:	f107 020c 	add.w	r2, r7, #12
 800200e:	f107 0318 	add.w	r3, r7, #24
 8002012:	4619      	mov	r1, r3
 8002014:	4841      	ldr	r0, [pc, #260]	@ (800211c <StartTask04+0x1c8>)
 8002016:	f000 fb2b 	bl	8002670 <print_cli>
	  lcd_put_cur(1, 0);
 800201a:	2100      	movs	r1, #0
 800201c:	2001      	movs	r0, #1
 800201e:	f7ff f931 	bl	8001284 <lcd_put_cur>
	  lcd_send_string(&timeStrDay);
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff f988 	bl	800133c <lcd_send_string>
	  // Check deadline
	  	if (xTaskGetTickCount() > taskDisplayTimeDeadline) {
 800202c:	f005 fc64 	bl	80078f8 <xTaskGetTickCount>
 8002030:	4602      	mov	r2, r0
 8002032:	4b34      	ldr	r3, [pc, #208]	@ (8002104 <StartTask04+0x1b0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d902      	bls.n	8002040 <StartTask04+0xec>
	  		print_cli("Task Display Time missed deadline\n");
 800203a:	4839      	ldr	r0, [pc, #228]	@ (8002120 <StartTask04+0x1cc>)
 800203c:	f000 fb18 	bl	8002670 <print_cli>
	  	}
	  	if (detectChange(&tasks[3], &prev_tasks[3]))
 8002040:	4938      	ldr	r1, [pc, #224]	@ (8002124 <StartTask04+0x1d0>)
 8002042:	4839      	ldr	r0, [pc, #228]	@ (8002128 <StartTask04+0x1d4>)
 8002044:	f7ff fd0d 	bl	8001a62 <detectChange>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d02e      	beq.n	80020ac <StartTask04+0x158>
		{
	  		print_cli("TASK 04 DA THAY DOI");
 800204e:	4837      	ldr	r0, [pc, #220]	@ (800212c <StartTask04+0x1d8>)
 8002050:	f000 fb0e 	bl	8002670 <print_cli>
			// Cập nhật giá trị trước đó
	  		taskDisplayTimeDeadline = taskDisplayTimeDeadline + pdMS_TO_TICKS(tasks[3].period)
 8002054:	4b29      	ldr	r3, [pc, #164]	@ (80020fc <StartTask04+0x1a8>)
 8002056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002058:	461a      	mov	r2, r3
 800205a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800205e:	fb02 f303 	mul.w	r3, r2, r3
 8002062:	4a27      	ldr	r2, [pc, #156]	@ (8002100 <StartTask04+0x1ac>)
 8002064:	fba2 2303 	umull	r2, r3, r2, r3
 8002068:	099a      	lsrs	r2, r3, #6
 800206a:	4b26      	ldr	r3, [pc, #152]	@ (8002104 <StartTask04+0x1b0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	441a      	add	r2, r3
					- pdMS_TO_TICKS(prev_tasks[3].deadline) + pdMS_TO_TICKS(tasks[3].deadline);
 8002070:	4b2f      	ldr	r3, [pc, #188]	@ (8002130 <StartTask04+0x1dc>)
 8002072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002074:	4619      	mov	r1, r3
 8002076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4920      	ldr	r1, [pc, #128]	@ (8002100 <StartTask04+0x1ac>)
 8002080:	fba1 1303 	umull	r1, r3, r1, r3
 8002084:	099b      	lsrs	r3, r3, #6
 8002086:	1ad2      	subs	r2, r2, r3
 8002088:	4b1c      	ldr	r3, [pc, #112]	@ (80020fc <StartTask04+0x1a8>)
 800208a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800208c:	4619      	mov	r1, r3
 800208e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	491a      	ldr	r1, [pc, #104]	@ (8002100 <StartTask04+0x1ac>)
 8002098:	fba1 1303 	umull	r1, r3, r1, r3
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	4413      	add	r3, r2
	  		taskDisplayTimeDeadline = taskDisplayTimeDeadline + pdMS_TO_TICKS(tasks[3].period)
 80020a0:	4a18      	ldr	r2, [pc, #96]	@ (8002104 <StartTask04+0x1b0>)
 80020a2:	6013      	str	r3, [r2, #0]
			updatePrevious(&prev_tasks[3], &tasks[3]);
 80020a4:	4920      	ldr	r1, [pc, #128]	@ (8002128 <StartTask04+0x1d4>)
 80020a6:	481f      	ldr	r0, [pc, #124]	@ (8002124 <StartTask04+0x1d0>)
 80020a8:	f7ff fcbc 	bl	8001a24 <updatePrevious>
		 }
	  	timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 80020ac:	f003 ff82 	bl	8005fb4 <osKernelGetTickCount>
 80020b0:	ee07 0a90 	vmov	s15, r0
 80020b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020b8:	eddf 6a14 	vldr	s13, [pc, #80]	@ 800210c <StartTask04+0x1b8>
 80020bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	  	print_cli("Thoi diem ket thuc task send thoi gian: %.3f\n", timeInSeconds);
 80020c4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80020c6:	f7fe fa97 	bl	80005f8 <__aeabi_f2d>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4819      	ldr	r0, [pc, #100]	@ (8002134 <StartTask04+0x1e0>)
 80020d0:	f000 face 	bl	8002670 <print_cli>
	  	updatePriorities();
 80020d4:	f7ff fbde 	bl	8001894 <updatePriorities>
	  	// Delay until next period
	  	vTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(tasks[3].period));
 80020d8:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <StartTask04+0x1a8>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020dc:	461a      	mov	r2, r3
 80020de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	4a06      	ldr	r2, [pc, #24]	@ (8002100 <StartTask04+0x1ac>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	099a      	lsrs	r2, r3, #6
 80020ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f005 f997 	bl	8007428 <vTaskDelayUntil>
	  osMessageQueueGet(myQueue02Handle, &dateTimeRecv, NULL, osWaitForever);
 80020fa:	e742      	b.n	8001f82 <StartTask04+0x2e>
 80020fc:	20000000 	.word	0x20000000
 8002100:	10624dd3 	.word	0x10624dd3
 8002104:	200004f0 	.word	0x200004f0
 8002108:	200004cc 	.word	0x200004cc
 800210c:	447a0000 	.word	0x447a0000
 8002110:	0800dd68 	.word	0x0800dd68
 8002114:	0800dd98 	.word	0x0800dd98
 8002118:	0800dda8 	.word	0x0800dda8
 800211c:	0800ddbc 	.word	0x0800ddbc
 8002120:	0800ddd8 	.word	0x0800ddd8
 8002124:	200000fc 	.word	0x200000fc
 8002128:	20000054 	.word	0x20000054
 800212c:	0800ddfc 	.word	0x0800ddfc
 8002130:	200000a8 	.word	0x200000a8
 8002134:	0800de10 	.word	0x0800de10

08002138 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	float rh;
	TickType_t lastWakeTime = osKernelGetTickCount();
 8002140:	f003 ff38 	bl	8005fb4 <osKernelGetTickCount>
 8002144:	4603      	mov	r3, r0
 8002146:	60fb      	str	r3, [r7, #12]
	taskReadRhDeadline = lastWakeTime + pdMS_TO_TICKS(tasks[4].deadline);
 8002148:	4b53      	ldr	r3, [pc, #332]	@ (8002298 <StartTask05+0x160>)
 800214a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800214c:	461a      	mov	r2, r3
 800214e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	4a51      	ldr	r2, [pc, #324]	@ (800229c <StartTask05+0x164>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	099a      	lsrs	r2, r3, #6
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4413      	add	r3, r2
 8002162:	4a4f      	ldr	r2, [pc, #316]	@ (80022a0 <StartTask05+0x168>)
 8002164:	6013      	str	r3, [r2, #0]
	//updatePriorities();
	float timeInSeconds;
  /* Infinite loop */
  for(;;)
  {
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8002166:	f003 ff25 	bl	8005fb4 <osKernelGetTickCount>
 800216a:	ee07 0a90 	vmov	s15, r0
 800216e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002172:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 80022a4 <StartTask05+0x16c>
 8002176:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800217a:	edc7 7a05 	vstr	s15, [r7, #20]
	  print_cli("Thoi diem bat dau task do do am: %.3f\n", timeInSeconds);
 800217e:	6978      	ldr	r0, [r7, #20]
 8002180:	f7fe fa3a 	bl	80005f8 <__aeabi_f2d>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4847      	ldr	r0, [pc, #284]	@ (80022a8 <StartTask05+0x170>)
 800218a:	f000 fa71 	bl	8002670 <print_cli>
	  rh = SHT2x_GetRelativeHumidity(1);
 800218e:	2001      	movs	r0, #1
 8002190:	f000 fb4c 	bl	800282c <SHT2x_GetRelativeHumidity>
 8002194:	eef0 7a40 	vmov.f32	s15, s0
 8002198:	edc7 7a04 	vstr	s15, [r7, #16]
	  if (osKernelGetTickCount() > taskReadRhDeadline)
 800219c:	f003 ff0a 	bl	8005fb4 <osKernelGetTickCount>
 80021a0:	4602      	mov	r2, r0
 80021a2:	4b3f      	ldr	r3, [pc, #252]	@ (80022a0 <StartTask05+0x168>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d902      	bls.n	80021b0 <StartTask05+0x78>
		  {
			  print_cli("Task Read Temperature missed deadline\n");
 80021aa:	4840      	ldr	r0, [pc, #256]	@ (80022ac <StartTask05+0x174>)
 80021ac:	f000 fa60 	bl	8002670 <print_cli>
		  }
	  if (detectChange(&tasks[4], &prev_tasks[4]))
 80021b0:	493f      	ldr	r1, [pc, #252]	@ (80022b0 <StartTask05+0x178>)
 80021b2:	4840      	ldr	r0, [pc, #256]	@ (80022b4 <StartTask05+0x17c>)
 80021b4:	f7ff fc55 	bl	8001a62 <detectChange>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d02b      	beq.n	8002216 <StartTask05+0xde>
	{
		// Cập nhật giá trị trước đó
		  taskReadRhDeadline = taskReadRhDeadline + pdMS_TO_TICKS(tasks[4].period)
 80021be:	4b36      	ldr	r3, [pc, #216]	@ (8002298 <StartTask05+0x160>)
 80021c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021c2:	461a      	mov	r2, r3
 80021c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	4a33      	ldr	r2, [pc, #204]	@ (800229c <StartTask05+0x164>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	099a      	lsrs	r2, r3, #6
 80021d4:	4b32      	ldr	r3, [pc, #200]	@ (80022a0 <StartTask05+0x168>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	441a      	add	r2, r3
				- pdMS_TO_TICKS(prev_tasks[4].deadline) + pdMS_TO_TICKS(tasks[4].deadline);
 80021da:	4b37      	ldr	r3, [pc, #220]	@ (80022b8 <StartTask05+0x180>)
 80021dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021de:	4619      	mov	r1, r3
 80021e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	492c      	ldr	r1, [pc, #176]	@ (800229c <StartTask05+0x164>)
 80021ea:	fba1 1303 	umull	r1, r3, r1, r3
 80021ee:	099b      	lsrs	r3, r3, #6
 80021f0:	1ad2      	subs	r2, r2, r3
 80021f2:	4b29      	ldr	r3, [pc, #164]	@ (8002298 <StartTask05+0x160>)
 80021f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021f6:	4619      	mov	r1, r3
 80021f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4926      	ldr	r1, [pc, #152]	@ (800229c <StartTask05+0x164>)
 8002202:	fba1 1303 	umull	r1, r3, r1, r3
 8002206:	099b      	lsrs	r3, r3, #6
 8002208:	4413      	add	r3, r2
		  taskReadRhDeadline = taskReadRhDeadline + pdMS_TO_TICKS(tasks[4].period)
 800220a:	4a25      	ldr	r2, [pc, #148]	@ (80022a0 <StartTask05+0x168>)
 800220c:	6013      	str	r3, [r2, #0]
		updatePrevious(&prev_tasks[4], &tasks[4]);
 800220e:	4929      	ldr	r1, [pc, #164]	@ (80022b4 <StartTask05+0x17c>)
 8002210:	4827      	ldr	r0, [pc, #156]	@ (80022b0 <StartTask05+0x178>)
 8002212:	f7ff fc07 	bl	8001a24 <updatePrevious>
	 }
	  taskReadRhDeadline += pdMS_TO_TICKS(period[4]);
 8002216:	4b29      	ldr	r3, [pc, #164]	@ (80022bc <StartTask05+0x184>)
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	461a      	mov	r2, r3
 800221c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002220:	fb02 f303 	mul.w	r3, r2, r3
 8002224:	4a1d      	ldr	r2, [pc, #116]	@ (800229c <StartTask05+0x164>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	099a      	lsrs	r2, r3, #6
 800222c:	4b1c      	ldr	r3, [pc, #112]	@ (80022a0 <StartTask05+0x168>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4413      	add	r3, r2
 8002232:	4a1b      	ldr	r2, [pc, #108]	@ (80022a0 <StartTask05+0x168>)
 8002234:	6013      	str	r3, [r2, #0]
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8002236:	f003 febd 	bl	8005fb4 <osKernelGetTickCount>
 800223a:	ee07 0a90 	vmov	s15, r0
 800223e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002242:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80022a4 <StartTask05+0x16c>
 8002246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800224a:	edc7 7a05 	vstr	s15, [r7, #20]
	  print_cli("Thoi diem ket thuc task do do am: %.3f\n", timeInSeconds);
 800224e:	6978      	ldr	r0, [r7, #20]
 8002250:	f7fe f9d2 	bl	80005f8 <__aeabi_f2d>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4819      	ldr	r0, [pc, #100]	@ (80022c0 <StartTask05+0x188>)
 800225a:	f000 fa09 	bl	8002670 <print_cli>
	  osMessageQueuePut(myQueue03Handle, &rh, 0U, 0U);
 800225e:	4b19      	ldr	r3, [pc, #100]	@ (80022c4 <StartTask05+0x18c>)
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	f107 0110 	add.w	r1, r7, #16
 8002266:	2300      	movs	r3, #0
 8002268:	2200      	movs	r2, #0
 800226a:	f003 ffd9 	bl	8006220 <osMessageQueuePut>
	  updatePriorities();
 800226e:	f7ff fb11 	bl	8001894 <updatePriorities>
	  vTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(tasks[4].period));
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <StartTask05+0x160>)
 8002274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002276:	461a      	mov	r2, r3
 8002278:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800227c:	fb02 f303 	mul.w	r3, r2, r3
 8002280:	4a06      	ldr	r2, [pc, #24]	@ (800229c <StartTask05+0x164>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	099a      	lsrs	r2, r3, #6
 8002288:	f107 030c 	add.w	r3, r7, #12
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f005 f8ca 	bl	8007428 <vTaskDelayUntil>
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8002294:	e767      	b.n	8002166 <StartTask05+0x2e>
 8002296:	bf00      	nop
 8002298:	20000000 	.word	0x20000000
 800229c:	10624dd3 	.word	0x10624dd3
 80022a0:	200004f4 	.word	0x200004f4
 80022a4:	447a0000 	.word	0x447a0000
 80022a8:	0800de40 	.word	0x0800de40
 80022ac:	0800dbc8 	.word	0x0800dbc8
 80022b0:	20000118 	.word	0x20000118
 80022b4:	20000070 	.word	0x20000070
 80022b8:	200000a8 	.word	0x200000a8
 80022bc:	20000150 	.word	0x20000150
 80022c0:	0800de68 	.word	0x0800de68
 80022c4:	200004d0 	.word	0x200004d0

080022c8 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
	TickType_t lastWakeTime = osKernelGetTickCount();
 80022d0:	f003 fe70 	bl	8005fb4 <osKernelGetTickCount>
 80022d4:	4603      	mov	r3, r0
 80022d6:	61bb      	str	r3, [r7, #24]
	taskDisplayRhDeadline = lastWakeTime + pdMS_TO_TICKS(tasks[5].deadline);
 80022d8:	4b54      	ldr	r3, [pc, #336]	@ (800242c <StartTask06+0x164>)
 80022da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022de:	461a      	mov	r2, r3
 80022e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022e4:	fb02 f303 	mul.w	r3, r2, r3
 80022e8:	4a51      	ldr	r2, [pc, #324]	@ (8002430 <StartTask06+0x168>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	099a      	lsrs	r2, r3, #6
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	4413      	add	r3, r2
 80022f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002434 <StartTask06+0x16c>)
 80022f6:	6013      	str	r3, [r2, #0]
	//updatePriorities();
	float timeInSeconds;
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(myQueue03Handle, &rhRecv, NULL, osWaitForever);
 80022f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002438 <StartTask06+0x170>)
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	f107 0114 	add.w	r1, r7, #20
 8002300:	f04f 33ff 	mov.w	r3, #4294967295
 8002304:	2200      	movs	r2, #0
 8002306:	f003 ffeb 	bl	80062e0 <osMessageQueueGet>
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 800230a:	f003 fe53 	bl	8005fb4 <osKernelGetTickCount>
 800230e:	ee07 0a90 	vmov	s15, r0
 8002312:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002316:	eddf 6a49 	vldr	s13, [pc, #292]	@ 800243c <StartTask06+0x174>
 800231a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800231e:	edc7 7a07 	vstr	s15, [r7, #28]
	  print_cli("Thoi diem bat dau task send do am: %.3f\n", timeInSeconds);
 8002322:	69f8      	ldr	r0, [r7, #28]
 8002324:	f7fe f968 	bl	80005f8 <__aeabi_f2d>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4844      	ldr	r0, [pc, #272]	@ (8002440 <StartTask06+0x178>)
 800232e:	f000 f99f 	bl	8002670 <print_cli>
	  sprintf(rhStr, "r:%.1f", rhRecv);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe f95f 	bl	80005f8 <__aeabi_f2d>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	f107 000c 	add.w	r0, r7, #12
 8002342:	4940      	ldr	r1, [pc, #256]	@ (8002444 <StartTask06+0x17c>)
 8002344:	f009 fa34 	bl	800b7b0 <siprintf>
	  lcd_put_cur(1, 9);
 8002348:	2109      	movs	r1, #9
 800234a:	2001      	movs	r0, #1
 800234c:	f7fe ff9a 	bl	8001284 <lcd_put_cur>
	  lcd_send_string(&rhStr);
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fff1 	bl	800133c <lcd_send_string>
	  // Check deadline
		if (xTaskGetTickCount() > taskDisplayRhDeadline) {
 800235a:	f005 facd 	bl	80078f8 <xTaskGetTickCount>
 800235e:	4602      	mov	r2, r0
 8002360:	4b34      	ldr	r3, [pc, #208]	@ (8002434 <StartTask06+0x16c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d902      	bls.n	800236e <StartTask06+0xa6>
			print_cli("Task Display Temperature missed deadline\n");
 8002368:	4837      	ldr	r0, [pc, #220]	@ (8002448 <StartTask06+0x180>)
 800236a:	f000 f981 	bl	8002670 <print_cli>
		}
		if (detectChange(&tasks[5], &prev_tasks[5]))
 800236e:	4937      	ldr	r1, [pc, #220]	@ (800244c <StartTask06+0x184>)
 8002370:	4837      	ldr	r0, [pc, #220]	@ (8002450 <StartTask06+0x188>)
 8002372:	f7ff fb76 	bl	8001a62 <detectChange>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d02e      	beq.n	80023da <StartTask06+0x112>
		{
			// Cập nhật giá trị trước đó
			taskDisplayRhDeadline = taskDisplayRhDeadline + pdMS_TO_TICKS(tasks[5].period)
 800237c:	4b2b      	ldr	r3, [pc, #172]	@ (800242c <StartTask06+0x164>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002382:	461a      	mov	r2, r3
 8002384:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002388:	fb02 f303 	mul.w	r3, r2, r3
 800238c:	4a28      	ldr	r2, [pc, #160]	@ (8002430 <StartTask06+0x168>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	099a      	lsrs	r2, r3, #6
 8002394:	4b27      	ldr	r3, [pc, #156]	@ (8002434 <StartTask06+0x16c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	441a      	add	r2, r3
					- pdMS_TO_TICKS(prev_tasks[5].deadline) + pdMS_TO_TICKS(tasks[5].deadline);
 800239a:	4b2e      	ldr	r3, [pc, #184]	@ (8002454 <StartTask06+0x18c>)
 800239c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023a0:	4619      	mov	r1, r3
 80023a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4921      	ldr	r1, [pc, #132]	@ (8002430 <StartTask06+0x168>)
 80023ac:	fba1 1303 	umull	r1, r3, r1, r3
 80023b0:	099b      	lsrs	r3, r3, #6
 80023b2:	1ad2      	subs	r2, r2, r3
 80023b4:	4b1d      	ldr	r3, [pc, #116]	@ (800242c <StartTask06+0x164>)
 80023b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023ba:	4619      	mov	r1, r3
 80023bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	491a      	ldr	r1, [pc, #104]	@ (8002430 <StartTask06+0x168>)
 80023c6:	fba1 1303 	umull	r1, r3, r1, r3
 80023ca:	099b      	lsrs	r3, r3, #6
 80023cc:	4413      	add	r3, r2
			taskDisplayRhDeadline = taskDisplayRhDeadline + pdMS_TO_TICKS(tasks[5].period)
 80023ce:	4a19      	ldr	r2, [pc, #100]	@ (8002434 <StartTask06+0x16c>)
 80023d0:	6013      	str	r3, [r2, #0]
			updatePrevious(&prev_tasks[5], &tasks[5]);
 80023d2:	491f      	ldr	r1, [pc, #124]	@ (8002450 <StartTask06+0x188>)
 80023d4:	481d      	ldr	r0, [pc, #116]	@ (800244c <StartTask06+0x184>)
 80023d6:	f7ff fb25 	bl	8001a24 <updatePrevious>
		 }
		timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 80023da:	f003 fdeb 	bl	8005fb4 <osKernelGetTickCount>
 80023de:	ee07 0a90 	vmov	s15, r0
 80023e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023e6:	eddf 6a15 	vldr	s13, [pc, #84]	@ 800243c <StartTask06+0x174>
 80023ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023ee:	edc7 7a07 	vstr	s15, [r7, #28]
		print_cli("Thoi diem ket thuc task send do am: %.3f\n", timeInSeconds);
 80023f2:	69f8      	ldr	r0, [r7, #28]
 80023f4:	f7fe f900 	bl	80005f8 <__aeabi_f2d>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4816      	ldr	r0, [pc, #88]	@ (8002458 <StartTask06+0x190>)
 80023fe:	f000 f937 	bl	8002670 <print_cli>
		updatePriorities();
 8002402:	f7ff fa47 	bl	8001894 <updatePriorities>
		// Delay until next period
		vTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(tasks[5].period));
 8002406:	4b09      	ldr	r3, [pc, #36]	@ (800242c <StartTask06+0x164>)
 8002408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240c:	461a      	mov	r2, r3
 800240e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	4a06      	ldr	r2, [pc, #24]	@ (8002430 <StartTask06+0x168>)
 8002418:	fba2 2303 	umull	r2, r3, r2, r3
 800241c:	099a      	lsrs	r2, r3, #6
 800241e:	f107 0318 	add.w	r3, r7, #24
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f004 ffff 	bl	8007428 <vTaskDelayUntil>
	  osMessageQueueGet(myQueue03Handle, &rhRecv, NULL, osWaitForever);
 800242a:	e765      	b.n	80022f8 <StartTask06+0x30>
 800242c:	20000000 	.word	0x20000000
 8002430:	10624dd3 	.word	0x10624dd3
 8002434:	200004f8 	.word	0x200004f8
 8002438:	200004d0 	.word	0x200004d0
 800243c:	447a0000 	.word	0x447a0000
 8002440:	0800de90 	.word	0x0800de90
 8002444:	0800debc 	.word	0x0800debc
 8002448:	0800dd0c 	.word	0x0800dd0c
 800244c:	20000134 	.word	0x20000134
 8002450:	2000008c 	.word	0x2000008c
 8002454:	200000a8 	.word	0x200000a8
 8002458:	0800dec4 	.word	0x0800dec4

0800245c <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
void StartTask07(void *argument)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b0a8      	sub	sp, #160	@ 0xa0
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	int field[6];
	int i;
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(myQueue04Handle, &Recv_ISR, NULL, osWaitForever);
 8002464:	4b79      	ldr	r3, [pc, #484]	@ (800264c <StartTask07+0x1f0>)
 8002466:	6818      	ldr	r0, [r3, #0]
 8002468:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800246c:	f04f 33ff 	mov.w	r3, #4294967295
 8002470:	2200      	movs	r2, #0
 8002472:	f003 ff35 	bl	80062e0 <osMessageQueueGet>
	print_cli("Nhan tu ngat yeu cau thay doi thong so lap lich\n");
 8002476:	4876      	ldr	r0, [pc, #472]	@ (8002650 <StartTask07+0x1f4>)
 8002478:	f000 f8fa 	bl	8002670 <print_cli>
	for (int i = 0; i < 12; i++)
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002482:	e013      	b.n	80024ac <StartTask07+0x50>
		fieldRecv[i] = (int)(Recv_ISR[i] - '0');
 8002484:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8002488:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800248c:	4413      	add	r3, r2
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002494:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	33a0      	adds	r3, #160	@ 0xa0
 800249c:	443b      	add	r3, r7
 800249e:	f843 2c80 	str.w	r2, [r3, #-128]
	for (int i = 0; i < 12; i++)
 80024a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024a6:	3301      	adds	r3, #1
 80024a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80024ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024b0:	2b0b      	cmp	r3, #11
 80024b2:	dde7      	ble.n	8002484 <StartTask07+0x28>
	for (int i = 0, j = 0; i < 12; i += 2, j++) {
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80024ba:	2300      	movs	r3, #0
 80024bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80024c0:	e025      	b.n	800250e <StartTask07+0xb2>
	        // Ghép các số tại vị trí i và i+1 thành số có 2 chữ số
		field[j] = fieldRecv[i] * 10 + fieldRecv[i + 1];
 80024c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	33a0      	adds	r3, #160	@ 0xa0
 80024ca:	443b      	add	r3, r7
 80024cc:	f853 2c80 	ldr.w	r2, [r3, #-128]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	461a      	mov	r2, r3
 80024da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024de:	3301      	adds	r3, #1
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	33a0      	adds	r3, #160	@ 0xa0
 80024e4:	443b      	add	r3, r7
 80024e6:	f853 3c80 	ldr.w	r3, [r3, #-128]
 80024ea:	441a      	add	r2, r3
 80024ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	33a0      	adds	r3, #160	@ 0xa0
 80024f4:	443b      	add	r3, r7
 80024f6:	f843 2c98 	str.w	r2, [r3, #-152]
	for (int i = 0, j = 0; i < 12; i += 2, j++) {
 80024fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024fe:	3302      	adds	r3, #2
 8002500:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002504:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002508:	3301      	adds	r3, #1
 800250a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800250e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002512:	2b0b      	cmp	r3, #11
 8002514:	ddd5      	ble.n	80024c2 <StartTask07+0x66>
	    }
	i = field[0];
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	//print_cli("Thay doi thong so Task %d\n", i+1);
	if(field[1] != 0 && tasks[i].period != field[1] *100)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d020      	beq.n	8002564 <StartTask07+0x108>
 8002522:	494c      	ldr	r1, [pc, #304]	@ (8002654 <StartTask07+0x1f8>)
 8002524:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3304      	adds	r3, #4
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2164      	movs	r1, #100	@ 0x64
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	429a      	cmp	r2, r3
 8002540:	d010      	beq.n	8002564 <StartTask07+0x108>
	{
		tasks[i].period = field[1] * 100;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2264      	movs	r2, #100	@ 0x64
 8002546:	fb02 f103 	mul.w	r1, r2, r3
 800254a:	4842      	ldr	r0, [pc, #264]	@ (8002654 <StartTask07+0x1f8>)
 800254c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4403      	add	r3, r0
 800255a:	3304      	adds	r3, #4
 800255c:	6019      	str	r1, [r3, #0]
		print_cli("TASK 04 THAY DOI CHU KY\n");
 800255e:	483e      	ldr	r0, [pc, #248]	@ (8002658 <StartTask07+0x1fc>)
 8002560:	f000 f886 	bl	8002670 <print_cli>
	}
	if(field[2] != 0)
	{
		//print_cli("Thay doi thoi gian thuc thi\n");
	}
	if(field[3] != 0 && tasks[i].deadline != field[3] * 100)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d01d      	beq.n	80025a6 <StartTask07+0x14a>
 800256a:	493a      	ldr	r1, [pc, #232]	@ (8002654 <StartTask07+0x1f8>)
 800256c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	330c      	adds	r3, #12
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2164      	movs	r1, #100	@ 0x64
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	429a      	cmp	r2, r3
 8002588:	d00d      	beq.n	80025a6 <StartTask07+0x14a>
	{
		tasks[i].deadline = field[3] * 100;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2264      	movs	r2, #100	@ 0x64
 800258e:	fb02 f103 	mul.w	r1, r2, r3
 8002592:	4830      	ldr	r0, [pc, #192]	@ (8002654 <StartTask07+0x1f8>)
 8002594:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002598:	4613      	mov	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4403      	add	r3, r0
 80025a2:	330c      	adds	r3, #12
 80025a4:	6019      	str	r1, [r3, #0]
	}
	if(field[4] != 0 && tasks[i].allPeriod != field[4] * 100)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d02d      	beq.n	8002608 <StartTask07+0x1ac>
 80025ac:	4929      	ldr	r1, [pc, #164]	@ (8002654 <StartTask07+0x1f8>)
 80025ae:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	3314      	adds	r3, #20
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	2164      	movs	r1, #100	@ 0x64
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d01d      	beq.n	8002608 <StartTask07+0x1ac>
	{
		print_cli("Thay doi chu ky toan bo\n");
 80025cc:	4823      	ldr	r0, [pc, #140]	@ (800265c <StartTask07+0x200>)
 80025ce:	f000 f84f 	bl	8002670 <print_cli>
		for (int i = 0; i <= 5; i++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025d8:	e012      	b.n	8002600 <StartTask07+0x1a4>
			tasks[i].allPeriod = field[4] * 100;
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	2264      	movs	r2, #100	@ 0x64
 80025de:	fb02 f103 	mul.w	r1, r2, r3
 80025e2:	481c      	ldr	r0, [pc, #112]	@ (8002654 <StartTask07+0x1f8>)
 80025e4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4403      	add	r3, r0
 80025f2:	3314      	adds	r3, #20
 80025f4:	6019      	str	r1, [r3, #0]
		for (int i = 0; i <= 5; i++)
 80025f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025fa:	3301      	adds	r3, #1
 80025fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002600:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002604:	2b05      	cmp	r3, #5
 8002606:	dde8      	ble.n	80025da <StartTask07+0x17e>
	}if(field[5] != 0 && field[5] != tasks[i].priotity)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d01a      	beq.n	8002644 <StartTask07+0x1e8>
 800260e:	69f9      	ldr	r1, [r7, #28]
 8002610:	4810      	ldr	r0, [pc, #64]	@ (8002654 <StartTask07+0x1f8>)
 8002612:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4403      	add	r3, r0
 8002620:	3310      	adds	r3, #16
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4299      	cmp	r1, r3
 8002626:	d00d      	beq.n	8002644 <StartTask07+0x1e8>
	{
		print_cli("Muc uu tien phu thuoc vao deadline\n");
 8002628:	480d      	ldr	r0, [pc, #52]	@ (8002660 <StartTask07+0x204>)
 800262a:	f000 f821 	bl	8002670 <print_cli>
		tasks[i].priotity = field[5];
 800262e:	69f9      	ldr	r1, [r7, #28]
 8002630:	4808      	ldr	r0, [pc, #32]	@ (8002654 <StartTask07+0x1f8>)
 8002632:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4403      	add	r3, r0
 8002640:	3310      	adds	r3, #16
 8002642:	6019      	str	r1, [r3, #0]
//	{
//		printf("Task %d has changed.\n", i + 1);
//		// Cập nhật giá trị trước đó
//		updatePrevious(&prev_tasks[i], &tasks[i]);
//	 }
    osDelay(1);
 8002644:	2001      	movs	r0, #1
 8002646:	f003 fd5c 	bl	8006102 <osDelay>
	osMessageQueueGet(myQueue04Handle, &Recv_ISR, NULL, osWaitForever);
 800264a:	e70b      	b.n	8002464 <StartTask07+0x8>
 800264c:	200004d4 	.word	0x200004d4
 8002650:	0800def0 	.word	0x0800def0
 8002654:	20000000 	.word	0x20000000
 8002658:	0800df24 	.word	0x0800df24
 800265c:	0800df40 	.word	0x0800df40
 8002660:	0800df5c 	.word	0x0800df5c

08002664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002668:	b672      	cpsid	i
}
 800266a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800266c:	bf00      	nop
 800266e:	e7fd      	b.n	800266c <Error_Handler+0x8>

08002670 <print_cli>:
//
//	HAL_UART_Transmit(&huart1,(uint8_t *)stringArray,len_str,200);
//}

void print_cli(const char* format, ...)
{
 8002670:	b40f      	push	{r0, r1, r2, r3}
 8002672:	b580      	push	{r7, lr}
 8002674:	b0c2      	sub	sp, #264	@ 0x108
 8002676:	af00      	add	r7, sp, #0
    // Tăng kích thước bộ đệm nếu cần xử lý chuỗi lớn hơn
    char buffer[256];

    va_list args;
    va_start(args, format);
 8002678:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800267c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002684:	601a      	str	r2, [r3, #0]

    // Sử dụng vsnprintf để đảm bảo an toàn bộ đệm
    int len = vsnprintf(buffer, sizeof(buffer), format, args);
 8002686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800268a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800268e:	1d38      	adds	r0, r7, #4
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8002696:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800269a:	f009 f917 	bl	800b8cc <vsniprintf>
 800269e:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    va_end(args);

    if (len > 0) {
 80026a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	dd0f      	ble.n	80026ca <print_cli+0x5a>
        // Nếu chuỗi dài hơn bộ đệm, chỉ gửi phần vừa bộ đệm
        if (len >= sizeof(buffer)) {
 80026aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026ae:	2bff      	cmp	r3, #255	@ 0xff
 80026b0:	d902      	bls.n	80026b8 <print_cli+0x48>
            len = sizeof(buffer) - 1;
 80026b2:	23ff      	movs	r3, #255	@ 0xff
 80026b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        }
        HAL_UART_Transmit(&huart6, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 80026b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026bc:	b29a      	uxth	r2, r3
 80026be:	1d39      	adds	r1, r7, #4
 80026c0:	f04f 33ff 	mov.w	r3, #4294967295
 80026c4:	4805      	ldr	r0, [pc, #20]	@ (80026dc <print_cli+0x6c>)
 80026c6:	f002 fbf1 	bl	8004eac <HAL_UART_Transmit>
    }
}
 80026ca:	bf00      	nop
 80026cc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80026d0:	46bd      	mov	sp, r7
 80026d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026d6:	b004      	add	sp, #16
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20000464 	.word	0x20000464

080026e0 <SHT2x_Init>:
	
/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 80026e8:	4a04      	ldr	r2, [pc, #16]	@ (80026fc <SHT2x_Init+0x1c>)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6013      	str	r3, [r2, #0]
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000520 	.word	0x20000520

08002700 <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 8002706:	23e7      	movs	r3, #231	@ 0xe7
 8002708:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 800270a:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <SHT2x_ReadUserReg+0x3c>)
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	1dba      	adds	r2, r7, #6
 8002710:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	2301      	movs	r3, #1
 8002718:	2180      	movs	r1, #128	@ 0x80
 800271a:	f001 f869 	bl	80037f0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 800271e:	4b07      	ldr	r3, [pc, #28]	@ (800273c <SHT2x_ReadUserReg+0x3c>)
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	1dfa      	adds	r2, r7, #7
 8002724:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	2301      	movs	r3, #1
 800272c:	2180      	movs	r1, #128	@ 0x80
 800272e:	f001 f95d 	bl	80039ec <HAL_I2C_Master_Receive>
	return val;
 8002732:	79fb      	ldrb	r3, [r7, #7]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000520 	.word	0x20000520

08002740 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af02      	add	r7, sp, #8
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
	uint8_t val[3] = { 0 };
 800274a:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <SHT2x_GetRaw+0x58>)
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	81bb      	strh	r3, [r7, #12]
 8002750:	2300      	movs	r3, #0
 8002752:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8002754:	4b11      	ldr	r3, [pc, #68]	@ (800279c <SHT2x_GetRaw+0x5c>)
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	1dfa      	adds	r2, r7, #7
 800275a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2301      	movs	r3, #1
 8002762:	2180      	movs	r1, #128	@ 0x80
 8002764:	f001 f844 	bl	80037f0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 8002768:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <SHT2x_GetRaw+0x5c>)
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	f107 020c 	add.w	r2, r7, #12
 8002770:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	2303      	movs	r3, #3
 8002778:	2180      	movs	r1, #128	@ 0x80
 800277a:	f001 f937 	bl	80039ec <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 800277e:	7b3b      	ldrb	r3, [r7, #12]
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	b21a      	sxth	r2, r3
 8002784:	7b7b      	ldrb	r3, [r7, #13]
 8002786:	b21b      	sxth	r3, r3
 8002788:	4313      	orrs	r3, r2
 800278a:	b21b      	sxth	r3, r3
 800278c:	b29b      	uxth	r3, r3
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	0800df80 	.word	0x0800df80
 800279c:	20000520 	.word	0x20000520

080027a0 <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <SHT2x_GetTemperature+0x14>
 80027b0:	23e3      	movs	r3, #227	@ 0xe3
 80027b2:	e000      	b.n	80027b6 <SHT2x_GetTemperature+0x16>
 80027b4:	23f3      	movs	r3, #243	@ 0xf3
 80027b6:	73fb      	strb	r3, [r7, #15]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff ffc0 	bl	8002740 <SHT2x_GetRaw>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd ff06 	bl	80005d4 <__aeabi_i2d>
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	4b16      	ldr	r3, [pc, #88]	@ (8002828 <SHT2x_GetTemperature+0x88>)
 80027ce:	f7fe f895 	bl	80008fc <__aeabi_ddiv>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	a30f      	add	r3, pc, #60	@ (adr r3, 8002818 <SHT2x_GetTemperature+0x78>)
 80027dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e0:	f7fd ff62 	bl	80006a8 <__aeabi_dmul>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	a30c      	add	r3, pc, #48	@ (adr r3, 8002820 <SHT2x_GetTemperature+0x80>)
 80027ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f2:	f7fd fda1 	bl	8000338 <__aeabi_dsub>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	f7fe fa2b 	bl	8000c58 <__aeabi_d2f>
 8002802:	4603      	mov	r3, r0
 8002804:	ee07 3a90 	vmov	s15, r3
}
 8002808:	eeb0 0a67 	vmov.f32	s0, s15
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	f3af 8000 	nop.w
 8002818:	3d70a3d7 	.word	0x3d70a3d7
 800281c:	4065f70a 	.word	0x4065f70a
 8002820:	cccccccd 	.word	0xcccccccd
 8002824:	40476ccc 	.word	0x40476ccc
 8002828:	40f00000 	.word	0x40f00000

0800282c <SHT2x_GetRelativeHumidity>:
/**
 * @brief Measures and gets the current relative humidity.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point relative humidity value.
 */
float SHT2x_GetRelativeHumidity(uint8_t hold) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_RH_HOLD : SHT2x_READ_RH_NOHOLD);
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <SHT2x_GetRelativeHumidity+0x14>
 800283c:	23e5      	movs	r3, #229	@ 0xe5
 800283e:	e000      	b.n	8002842 <SHT2x_GetRelativeHumidity+0x16>
 8002840:	23f5      	movs	r3, #245	@ 0xf5
 8002842:	73fb      	strb	r3, [r7, #15]
	return -6 + 125.00 * (SHT2x_GetRaw(cmd) / 65536.0);
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff7a 	bl	8002740 <SHT2x_GetRaw>
 800284c:	4603      	mov	r3, r0
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fec0 	bl	80005d4 <__aeabi_i2d>
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <SHT2x_GetRelativeHumidity+0x74>)
 800285a:	f7fe f84f 	bl	80008fc <__aeabi_ddiv>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	4b0e      	ldr	r3, [pc, #56]	@ (80028a4 <SHT2x_GetRelativeHumidity+0x78>)
 800286c:	f7fd ff1c 	bl	80006a8 <__aeabi_dmul>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	4b0a      	ldr	r3, [pc, #40]	@ (80028a8 <SHT2x_GetRelativeHumidity+0x7c>)
 800287e:	f7fd fd5b 	bl	8000338 <__aeabi_dsub>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	f7fe f9e5 	bl	8000c58 <__aeabi_d2f>
 800288e:	4603      	mov	r3, r0
 8002890:	ee07 3a90 	vmov	s15, r3
}
 8002894:	eeb0 0a67 	vmov.f32	s0, s15
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40f00000 	.word	0x40f00000
 80028a4:	405f4000 	.word	0x405f4000
 80028a8:	40180000 	.word	0x40180000

080028ac <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14-bit temperature and 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	4603      	mov	r3, r0
 80028b4:	71fb      	strb	r3, [r7, #7]
	uint8_t val = SHT2x_ReadUserReg();
 80028b6:	f7ff ff23 	bl	8002700 <SHT2x_ReadUserReg>
 80028ba:	4603      	mov	r3, r0
 80028bc:	73fb      	strb	r3, [r7, #15]
	val = (val & 0x7e) | res;
 80028be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c2:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80028c6:	b25a      	sxtb	r2, r3
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	b25b      	sxtb	r3, r3
 80028d0:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 80028d2:	23e6      	movs	r3, #230	@ 0xe6
 80028d4:	733b      	strb	r3, [r7, #12]
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 80028da:	4b07      	ldr	r3, [pc, #28]	@ (80028f8 <SHT2x_SetResolution+0x4c>)
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	f107 020c 	add.w	r2, r7, #12
 80028e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	2302      	movs	r3, #2
 80028ea:	2180      	movs	r1, #128	@ 0x80
 80028ec:	f000 ff80 	bl	80037f0 <HAL_I2C_Master_Transmit>
}
 80028f0:	bf00      	nop
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000520 	.word	0x20000520

080028fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	607b      	str	r3, [r7, #4]
 8002906:	4b12      	ldr	r3, [pc, #72]	@ (8002950 <HAL_MspInit+0x54>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	4a11      	ldr	r2, [pc, #68]	@ (8002950 <HAL_MspInit+0x54>)
 800290c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002910:	6453      	str	r3, [r2, #68]	@ 0x44
 8002912:	4b0f      	ldr	r3, [pc, #60]	@ (8002950 <HAL_MspInit+0x54>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800291a:	607b      	str	r3, [r7, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	4b0b      	ldr	r3, [pc, #44]	@ (8002950 <HAL_MspInit+0x54>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	4a0a      	ldr	r2, [pc, #40]	@ (8002950 <HAL_MspInit+0x54>)
 8002928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800292c:	6413      	str	r3, [r2, #64]	@ 0x40
 800292e:	4b08      	ldr	r3, [pc, #32]	@ (8002950 <HAL_MspInit+0x54>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	210f      	movs	r1, #15
 800293e:	f06f 0001 	mvn.w	r0, #1
 8002942:	f000 fbc4 	bl	80030ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800

08002954 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08e      	sub	sp, #56	@ 0x38
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a63      	ldr	r2, [pc, #396]	@ (8002b00 <HAL_I2C_MspInit+0x1ac>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d12c      	bne.n	80029d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	623b      	str	r3, [r7, #32]
 800297a:	4b62      	ldr	r3, [pc, #392]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	4a61      	ldr	r2, [pc, #388]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	6313      	str	r3, [r2, #48]	@ 0x30
 8002986:	4b5f      	ldr	r3, [pc, #380]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	623b      	str	r3, [r7, #32]
 8002990:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002992:	23c0      	movs	r3, #192	@ 0xc0
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002996:	2312      	movs	r3, #18
 8002998:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299e:	2303      	movs	r3, #3
 80029a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029a2:	2304      	movs	r3, #4
 80029a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029aa:	4619      	mov	r1, r3
 80029ac:	4856      	ldr	r0, [pc, #344]	@ (8002b08 <HAL_I2C_MspInit+0x1b4>)
 80029ae:	f000 fc57 	bl	8003260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	4b53      	ldr	r3, [pc, #332]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	4a52      	ldr	r2, [pc, #328]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 80029bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c2:	4b50      	ldr	r3, [pc, #320]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029ca:	61fb      	str	r3, [r7, #28]
 80029cc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80029ce:	e093      	b.n	8002af8 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a4d      	ldr	r2, [pc, #308]	@ (8002b0c <HAL_I2C_MspInit+0x1b8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d13d      	bne.n	8002a56 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	4b49      	ldr	r3, [pc, #292]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	4a48      	ldr	r2, [pc, #288]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ea:	4b46      	ldr	r3, [pc, #280]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	61bb      	str	r3, [r7, #24]
 80029f4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029fc:	2312      	movs	r3, #18
 80029fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a04:	2303      	movs	r3, #3
 8002a06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a08:	2304      	movs	r3, #4
 8002a0a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a10:	4619      	mov	r1, r3
 8002a12:	483d      	ldr	r0, [pc, #244]	@ (8002b08 <HAL_I2C_MspInit+0x1b4>)
 8002a14:	f000 fc24 	bl	8003260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a18:	2308      	movs	r3, #8
 8002a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a1c:	2312      	movs	r3, #18
 8002a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a24:	2303      	movs	r3, #3
 8002a26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002a28:	2309      	movs	r3, #9
 8002a2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a30:	4619      	mov	r1, r3
 8002a32:	4835      	ldr	r0, [pc, #212]	@ (8002b08 <HAL_I2C_MspInit+0x1b4>)
 8002a34:	f000 fc14 	bl	8003260 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	4b31      	ldr	r3, [pc, #196]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	4a30      	ldr	r2, [pc, #192]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 8002a42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a46:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a48:	4b2e      	ldr	r3, [pc, #184]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	697b      	ldr	r3, [r7, #20]
}
 8002a54:	e050      	b.n	8002af8 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a2d      	ldr	r2, [pc, #180]	@ (8002b10 <HAL_I2C_MspInit+0x1bc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d14b      	bne.n	8002af8 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a60:	2300      	movs	r3, #0
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	4b27      	ldr	r3, [pc, #156]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a68:	4a26      	ldr	r2, [pc, #152]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 8002a6a:	f043 0304 	orr.w	r3, r3, #4
 8002a6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a70:	4b24      	ldr	r3, [pc, #144]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	4b20      	ldr	r3, [pc, #128]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	4a1f      	ldr	r2, [pc, #124]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a9e:	2312      	movs	r3, #18
 8002aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002aaa:	2304      	movs	r3, #4
 8002aac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4817      	ldr	r0, [pc, #92]	@ (8002b14 <HAL_I2C_MspInit+0x1c0>)
 8002ab6:	f000 fbd3 	bl	8003260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002aba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ac0:	2312      	movs	r3, #18
 8002ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002acc:	2304      	movs	r3, #4
 8002ace:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4810      	ldr	r0, [pc, #64]	@ (8002b18 <HAL_I2C_MspInit+0x1c4>)
 8002ad8:	f000 fbc2 	bl	8003260 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002adc:	2300      	movs	r3, #0
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	4a07      	ldr	r2, [pc, #28]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 8002ae6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002aea:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aec:	4b05      	ldr	r3, [pc, #20]	@ (8002b04 <HAL_I2C_MspInit+0x1b0>)
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]
}
 8002af8:	bf00      	nop
 8002afa:	3738      	adds	r7, #56	@ 0x38
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40005400 	.word	0x40005400
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40020400 	.word	0x40020400
 8002b0c:	40005800 	.word	0x40005800
 8002b10:	40005c00 	.word	0x40005c00
 8002b14:	40020800 	.word	0x40020800
 8002b18:	40020000 	.word	0x40020000

08002b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	@ 0x28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb0 <HAL_UART_MspInit+0x94>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d133      	bne.n	8002ba6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb4 <HAL_UART_MspInit+0x98>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b46:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb4 <HAL_UART_MspInit+0x98>)
 8002b48:	f043 0320 	orr.w	r3, r3, #32
 8002b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b4e:	4b19      	ldr	r3, [pc, #100]	@ (8002bb4 <HAL_UART_MspInit+0x98>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	4b15      	ldr	r3, [pc, #84]	@ (8002bb4 <HAL_UART_MspInit+0x98>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	4a14      	ldr	r2, [pc, #80]	@ (8002bb4 <HAL_UART_MspInit+0x98>)
 8002b64:	f043 0304 	orr.w	r3, r3, #4
 8002b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6a:	4b12      	ldr	r3, [pc, #72]	@ (8002bb4 <HAL_UART_MspInit+0x98>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b76:	23c0      	movs	r3, #192	@ 0xc0
 8002b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b82:	2303      	movs	r3, #3
 8002b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b86:	2308      	movs	r3, #8
 8002b88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b8a:	f107 0314 	add.w	r3, r7, #20
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4809      	ldr	r0, [pc, #36]	@ (8002bb8 <HAL_UART_MspInit+0x9c>)
 8002b92:	f000 fb65 	bl	8003260 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002b96:	2200      	movs	r2, #0
 8002b98:	2105      	movs	r1, #5
 8002b9a:	2047      	movs	r0, #71	@ 0x47
 8002b9c:	f000 fa97 	bl	80030ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002ba0:	2047      	movs	r0, #71	@ 0x47
 8002ba2:	f000 fab0 	bl	8003106 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 8002ba6:	bf00      	nop
 8002ba8:	3728      	adds	r7, #40	@ 0x28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40011400 	.word	0x40011400
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40020800 	.word	0x40020800

08002bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <NMI_Handler+0x4>

08002bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bc8:	bf00      	nop
 8002bca:	e7fd      	b.n	8002bc8 <HardFault_Handler+0x4>

08002bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bd0:	bf00      	nop
 8002bd2:	e7fd      	b.n	8002bd0 <MemManage_Handler+0x4>

08002bd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bd8:	bf00      	nop
 8002bda:	e7fd      	b.n	8002bd8 <BusFault_Handler+0x4>

08002bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be0:	bf00      	nop
 8002be2:	e7fd      	b.n	8002be0 <UsageFault_Handler+0x4>

08002be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bf6:	f000 f94b 	bl	8002e90 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002bfa:	f005 fa01 	bl	8008000 <xTaskGetSchedulerState>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d001      	beq.n	8002c08 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002c04:	f005 fff8 	bl	8008bf8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002c10:	4802      	ldr	r0, [pc, #8]	@ (8002c1c <USART6_IRQHandler+0x10>)
 8002c12:	f002 f9fb 	bl	800500c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000464 	.word	0x20000464

08002c20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return 1;
 8002c24:	2301      	movs	r3, #1
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <_kill>:

int _kill(int pid, int sig)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c3a:	f008 ff29 	bl	800ba90 <__errno>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2216      	movs	r2, #22
 8002c42:	601a      	str	r2, [r3, #0]
  return -1;
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <_exit>:

void _exit (int status)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c58:	f04f 31ff 	mov.w	r1, #4294967295
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff ffe7 	bl	8002c30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c62:	bf00      	nop
 8002c64:	e7fd      	b.n	8002c62 <_exit+0x12>

08002c66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	e00a      	b.n	8002c8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c78:	f3af 8000 	nop.w
 8002c7c:	4601      	mov	r1, r0
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	60ba      	str	r2, [r7, #8]
 8002c84:	b2ca      	uxtb	r2, r1
 8002c86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	dbf0      	blt.n	8002c78 <_read+0x12>
  }

  return len;
 8002c96:	687b      	ldr	r3, [r7, #4]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cc8:	605a      	str	r2, [r3, #4]
  return 0;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <_isatty>:

int _isatty(int file)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ce0:	2301      	movs	r3, #1
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d10:	4a14      	ldr	r2, [pc, #80]	@ (8002d64 <_sbrk+0x5c>)
 8002d12:	4b15      	ldr	r3, [pc, #84]	@ (8002d68 <_sbrk+0x60>)
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d1c:	4b13      	ldr	r3, [pc, #76]	@ (8002d6c <_sbrk+0x64>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d24:	4b11      	ldr	r3, [pc, #68]	@ (8002d6c <_sbrk+0x64>)
 8002d26:	4a12      	ldr	r2, [pc, #72]	@ (8002d70 <_sbrk+0x68>)
 8002d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d2a:	4b10      	ldr	r3, [pc, #64]	@ (8002d6c <_sbrk+0x64>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d207      	bcs.n	8002d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d38:	f008 feaa 	bl	800ba90 <__errno>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	220c      	movs	r2, #12
 8002d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d42:	f04f 33ff 	mov.w	r3, #4294967295
 8002d46:	e009      	b.n	8002d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d48:	4b08      	ldr	r3, [pc, #32]	@ (8002d6c <_sbrk+0x64>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d4e:	4b07      	ldr	r3, [pc, #28]	@ (8002d6c <_sbrk+0x64>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	4a05      	ldr	r2, [pc, #20]	@ (8002d6c <_sbrk+0x64>)
 8002d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20018000 	.word	0x20018000
 8002d68:	00000400 	.word	0x00000400
 8002d6c:	20000524 	.word	0x20000524
 8002d70:	20006648 	.word	0x20006648

08002d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d78:	4b06      	ldr	r3, [pc, #24]	@ (8002d94 <SystemInit+0x20>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7e:	4a05      	ldr	r2, [pc, #20]	@ (8002d94 <SystemInit+0x20>)
 8002d80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002dd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d9c:	f7ff ffea 	bl	8002d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002da0:	480c      	ldr	r0, [pc, #48]	@ (8002dd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002da2:	490d      	ldr	r1, [pc, #52]	@ (8002dd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002da4:	4a0d      	ldr	r2, [pc, #52]	@ (8002ddc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da8:	e002      	b.n	8002db0 <LoopCopyDataInit>

08002daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dae:	3304      	adds	r3, #4

08002db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db4:	d3f9      	bcc.n	8002daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002db6:	4a0a      	ldr	r2, [pc, #40]	@ (8002de0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002db8:	4c0a      	ldr	r4, [pc, #40]	@ (8002de4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dbc:	e001      	b.n	8002dc2 <LoopFillZerobss>

08002dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc0:	3204      	adds	r2, #4

08002dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc4:	d3fb      	bcc.n	8002dbe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002dc6:	f008 fe69 	bl	800ba9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dca:	f7fe facd 	bl	8001368 <main>
  bx  lr    
 8002dce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002dd0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd8:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 8002ddc:	0800e52c 	.word	0x0800e52c
  ldr r2, =_sbss
 8002de0:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8002de4:	20006648 	.word	0x20006648

08002de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002de8:	e7fe      	b.n	8002de8 <ADC_IRQHandler>
	...

08002dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002df0:	4b0e      	ldr	r3, [pc, #56]	@ (8002e2c <HAL_Init+0x40>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0d      	ldr	r2, [pc, #52]	@ (8002e2c <HAL_Init+0x40>)
 8002df6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e2c <HAL_Init+0x40>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0a      	ldr	r2, [pc, #40]	@ (8002e2c <HAL_Init+0x40>)
 8002e02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e08:	4b08      	ldr	r3, [pc, #32]	@ (8002e2c <HAL_Init+0x40>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a07      	ldr	r2, [pc, #28]	@ (8002e2c <HAL_Init+0x40>)
 8002e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e14:	2003      	movs	r0, #3
 8002e16:	f000 f94f 	bl	80030b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e1a:	200f      	movs	r0, #15
 8002e1c:	f000 f808 	bl	8002e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e20:	f7ff fd6c 	bl	80028fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023c00 	.word	0x40023c00

08002e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e38:	4b12      	ldr	r3, [pc, #72]	@ (8002e84 <HAL_InitTick+0x54>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <HAL_InitTick+0x58>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	4619      	mov	r1, r3
 8002e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 f967 	bl	8003122 <HAL_SYSTICK_Config>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e00e      	b.n	8002e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b0f      	cmp	r3, #15
 8002e62:	d80a      	bhi.n	8002e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e64:	2200      	movs	r2, #0
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6c:	f000 f92f 	bl	80030ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e70:	4a06      	ldr	r2, [pc, #24]	@ (8002e8c <HAL_InitTick+0x5c>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	e000      	b.n	8002e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000168 	.word	0x20000168
 8002e88:	20000170 	.word	0x20000170
 8002e8c:	2000016c 	.word	0x2000016c

08002e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e94:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <HAL_IncTick+0x20>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <HAL_IncTick+0x24>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	4a04      	ldr	r2, [pc, #16]	@ (8002eb4 <HAL_IncTick+0x24>)
 8002ea2:	6013      	str	r3, [r2, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	20000170 	.word	0x20000170
 8002eb4:	20000528 	.word	0x20000528

08002eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return uwTick;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	@ (8002ecc <HAL_GetTick+0x14>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000528 	.word	0x20000528

08002ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed8:	f7ff ffee 	bl	8002eb8 <HAL_GetTick>
 8002edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d005      	beq.n	8002ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eea:	4b0a      	ldr	r3, [pc, #40]	@ (8002f14 <HAL_Delay+0x44>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ef6:	bf00      	nop
 8002ef8:	f7ff ffde 	bl	8002eb8 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d8f7      	bhi.n	8002ef8 <HAL_Delay+0x28>
  {
  }
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000170 	.word	0x20000170

08002f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f28:	4b0c      	ldr	r3, [pc, #48]	@ (8002f5c <__NVIC_SetPriorityGrouping+0x44>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f34:	4013      	ands	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f4a:	4a04      	ldr	r2, [pc, #16]	@ (8002f5c <__NVIC_SetPriorityGrouping+0x44>)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	60d3      	str	r3, [r2, #12]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f64:	4b04      	ldr	r3, [pc, #16]	@ (8002f78 <__NVIC_GetPriorityGrouping+0x18>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	0a1b      	lsrs	r3, r3, #8
 8002f6a:	f003 0307 	and.w	r3, r3, #7
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	db0b      	blt.n	8002fa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	f003 021f 	and.w	r2, r3, #31
 8002f94:	4907      	ldr	r1, [pc, #28]	@ (8002fb4 <__NVIC_EnableIRQ+0x38>)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	e000e100 	.word	0xe000e100

08002fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	6039      	str	r1, [r7, #0]
 8002fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	db0a      	blt.n	8002fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	490c      	ldr	r1, [pc, #48]	@ (8003004 <__NVIC_SetPriority+0x4c>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	440b      	add	r3, r1
 8002fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe0:	e00a      	b.n	8002ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4908      	ldr	r1, [pc, #32]	@ (8003008 <__NVIC_SetPriority+0x50>)
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	3b04      	subs	r3, #4
 8002ff0:	0112      	lsls	r2, r2, #4
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	761a      	strb	r2, [r3, #24]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000e100 	.word	0xe000e100
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800300c:	b480      	push	{r7}
 800300e:	b089      	sub	sp, #36	@ 0x24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f1c3 0307 	rsb	r3, r3, #7
 8003026:	2b04      	cmp	r3, #4
 8003028:	bf28      	it	cs
 800302a:	2304      	movcs	r3, #4
 800302c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3304      	adds	r3, #4
 8003032:	2b06      	cmp	r3, #6
 8003034:	d902      	bls.n	800303c <NVIC_EncodePriority+0x30>
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3b03      	subs	r3, #3
 800303a:	e000      	b.n	800303e <NVIC_EncodePriority+0x32>
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003040:	f04f 32ff 	mov.w	r2, #4294967295
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43da      	mvns	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	401a      	ands	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003054:	f04f 31ff 	mov.w	r1, #4294967295
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	43d9      	mvns	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003064:	4313      	orrs	r3, r2
         );
}
 8003066:	4618      	mov	r0, r3
 8003068:	3724      	adds	r7, #36	@ 0x24
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3b01      	subs	r3, #1
 8003080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003084:	d301      	bcc.n	800308a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003086:	2301      	movs	r3, #1
 8003088:	e00f      	b.n	80030aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800308a:	4a0a      	ldr	r2, [pc, #40]	@ (80030b4 <SysTick_Config+0x40>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3b01      	subs	r3, #1
 8003090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003092:	210f      	movs	r1, #15
 8003094:	f04f 30ff 	mov.w	r0, #4294967295
 8003098:	f7ff ff8e 	bl	8002fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800309c:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <SysTick_Config+0x40>)
 800309e:	2200      	movs	r2, #0
 80030a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030a2:	4b04      	ldr	r3, [pc, #16]	@ (80030b4 <SysTick_Config+0x40>)
 80030a4:	2207      	movs	r2, #7
 80030a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	e000e010 	.word	0xe000e010

080030b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ff29 	bl	8002f18 <__NVIC_SetPriorityGrouping>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b086      	sub	sp, #24
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	4603      	mov	r3, r0
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	607a      	str	r2, [r7, #4]
 80030da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030e0:	f7ff ff3e 	bl	8002f60 <__NVIC_GetPriorityGrouping>
 80030e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	6978      	ldr	r0, [r7, #20]
 80030ec:	f7ff ff8e 	bl	800300c <NVIC_EncodePriority>
 80030f0:	4602      	mov	r2, r0
 80030f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff ff5d 	bl	8002fb8 <__NVIC_SetPriority>
}
 80030fe:	bf00      	nop
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	4603      	mov	r3, r0
 800310e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff ff31 	bl	8002f7c <__NVIC_EnableIRQ>
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff ffa2 	bl	8003074 <SysTick_Config>
 8003130:	4603      	mov	r3, r0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003146:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003148:	f7ff feb6 	bl	8002eb8 <HAL_GetTick>
 800314c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d008      	beq.n	800316c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2280      	movs	r2, #128	@ 0x80
 800315e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e052      	b.n	8003212 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0216 	bic.w	r2, r2, #22
 800317a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800318a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003190:	2b00      	cmp	r3, #0
 8003192:	d103      	bne.n	800319c <HAL_DMA_Abort+0x62>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003198:	2b00      	cmp	r3, #0
 800319a:	d007      	beq.n	80031ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0208 	bic.w	r2, r2, #8
 80031aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031bc:	e013      	b.n	80031e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031be:	f7ff fe7b 	bl	8002eb8 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b05      	cmp	r3, #5
 80031ca:	d90c      	bls.n	80031e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2220      	movs	r2, #32
 80031d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2203      	movs	r2, #3
 80031d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e015      	b.n	8003212 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e4      	bne.n	80031be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f8:	223f      	movs	r2, #63	@ 0x3f
 80031fa:	409a      	lsls	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d004      	beq.n	8003238 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2280      	movs	r2, #128	@ 0x80
 8003232:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e00c      	b.n	8003252 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2205      	movs	r2, #5
 800323c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003260:	b480      	push	{r7}
 8003262:	b089      	sub	sp, #36	@ 0x24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	e159      	b.n	8003530 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800327c:	2201      	movs	r2, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	429a      	cmp	r2, r3
 8003296:	f040 8148 	bne.w	800352a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d005      	beq.n	80032b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d130      	bne.n	8003314 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	2203      	movs	r2, #3
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032e8:	2201      	movs	r2, #1
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	f003 0201 	and.w	r2, r3, #1
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b03      	cmp	r3, #3
 800331e:	d017      	beq.n	8003350 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	2203      	movs	r2, #3
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d123      	bne.n	80033a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	08da      	lsrs	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3208      	adds	r2, #8
 8003364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	220f      	movs	r2, #15
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	08da      	lsrs	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3208      	adds	r2, #8
 800339e:	69b9      	ldr	r1, [r7, #24]
 80033a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	2203      	movs	r2, #3
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0203 	and.w	r2, r3, #3
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80a2 	beq.w	800352a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	4b57      	ldr	r3, [pc, #348]	@ (8003548 <HAL_GPIO_Init+0x2e8>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ee:	4a56      	ldr	r2, [pc, #344]	@ (8003548 <HAL_GPIO_Init+0x2e8>)
 80033f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033f6:	4b54      	ldr	r3, [pc, #336]	@ (8003548 <HAL_GPIO_Init+0x2e8>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003402:	4a52      	ldr	r2, [pc, #328]	@ (800354c <HAL_GPIO_Init+0x2ec>)
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	3302      	adds	r3, #2
 800340a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	220f      	movs	r2, #15
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a49      	ldr	r2, [pc, #292]	@ (8003550 <HAL_GPIO_Init+0x2f0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d019      	beq.n	8003462 <HAL_GPIO_Init+0x202>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a48      	ldr	r2, [pc, #288]	@ (8003554 <HAL_GPIO_Init+0x2f4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d013      	beq.n	800345e <HAL_GPIO_Init+0x1fe>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a47      	ldr	r2, [pc, #284]	@ (8003558 <HAL_GPIO_Init+0x2f8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00d      	beq.n	800345a <HAL_GPIO_Init+0x1fa>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a46      	ldr	r2, [pc, #280]	@ (800355c <HAL_GPIO_Init+0x2fc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d007      	beq.n	8003456 <HAL_GPIO_Init+0x1f6>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a45      	ldr	r2, [pc, #276]	@ (8003560 <HAL_GPIO_Init+0x300>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d101      	bne.n	8003452 <HAL_GPIO_Init+0x1f2>
 800344e:	2304      	movs	r3, #4
 8003450:	e008      	b.n	8003464 <HAL_GPIO_Init+0x204>
 8003452:	2307      	movs	r3, #7
 8003454:	e006      	b.n	8003464 <HAL_GPIO_Init+0x204>
 8003456:	2303      	movs	r3, #3
 8003458:	e004      	b.n	8003464 <HAL_GPIO_Init+0x204>
 800345a:	2302      	movs	r3, #2
 800345c:	e002      	b.n	8003464 <HAL_GPIO_Init+0x204>
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <HAL_GPIO_Init+0x204>
 8003462:	2300      	movs	r3, #0
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	f002 0203 	and.w	r2, r2, #3
 800346a:	0092      	lsls	r2, r2, #2
 800346c:	4093      	lsls	r3, r2
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003474:	4935      	ldr	r1, [pc, #212]	@ (800354c <HAL_GPIO_Init+0x2ec>)
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	3302      	adds	r3, #2
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003482:	4b38      	ldr	r3, [pc, #224]	@ (8003564 <HAL_GPIO_Init+0x304>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	43db      	mvns	r3, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003564 <HAL_GPIO_Init+0x304>)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003564 <HAL_GPIO_Init+0x304>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034d0:	4a24      	ldr	r2, [pc, #144]	@ (8003564 <HAL_GPIO_Init+0x304>)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034d6:	4b23      	ldr	r3, [pc, #140]	@ (8003564 <HAL_GPIO_Init+0x304>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003564 <HAL_GPIO_Init+0x304>)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003500:	4b18      	ldr	r3, [pc, #96]	@ (8003564 <HAL_GPIO_Init+0x304>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003524:	4a0f      	ldr	r2, [pc, #60]	@ (8003564 <HAL_GPIO_Init+0x304>)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3301      	adds	r3, #1
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	2b0f      	cmp	r3, #15
 8003534:	f67f aea2 	bls.w	800327c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	3724      	adds	r7, #36	@ 0x24
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40023800 	.word	0x40023800
 800354c:	40013800 	.word	0x40013800
 8003550:	40020000 	.word	0x40020000
 8003554:	40020400 	.word	0x40020400
 8003558:	40020800 	.word	0x40020800
 800355c:	40020c00 	.word	0x40020c00
 8003560:	40021000 	.word	0x40021000
 8003564:	40013c00 	.word	0x40013c00

08003568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e12b      	b.n	80037d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff f9e0 	bl	8002954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2224      	movs	r2, #36	@ 0x24
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0201 	bic.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035cc:	f001 fbf6 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 80035d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4a81      	ldr	r2, [pc, #516]	@ (80037dc <HAL_I2C_Init+0x274>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d807      	bhi.n	80035ec <HAL_I2C_Init+0x84>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4a80      	ldr	r2, [pc, #512]	@ (80037e0 <HAL_I2C_Init+0x278>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	bf94      	ite	ls
 80035e4:	2301      	movls	r3, #1
 80035e6:	2300      	movhi	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	e006      	b.n	80035fa <HAL_I2C_Init+0x92>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a7d      	ldr	r2, [pc, #500]	@ (80037e4 <HAL_I2C_Init+0x27c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	bf94      	ite	ls
 80035f4:	2301      	movls	r3, #1
 80035f6:	2300      	movhi	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e0e7      	b.n	80037d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4a78      	ldr	r2, [pc, #480]	@ (80037e8 <HAL_I2C_Init+0x280>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	0c9b      	lsrs	r3, r3, #18
 800360c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4a6a      	ldr	r2, [pc, #424]	@ (80037dc <HAL_I2C_Init+0x274>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d802      	bhi.n	800363c <HAL_I2C_Init+0xd4>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3301      	adds	r3, #1
 800363a:	e009      	b.n	8003650 <HAL_I2C_Init+0xe8>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	4a69      	ldr	r2, [pc, #420]	@ (80037ec <HAL_I2C_Init+0x284>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	099b      	lsrs	r3, r3, #6
 800364e:	3301      	adds	r3, #1
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	430b      	orrs	r3, r1
 8003656:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003662:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	495c      	ldr	r1, [pc, #368]	@ (80037dc <HAL_I2C_Init+0x274>)
 800366c:	428b      	cmp	r3, r1
 800366e:	d819      	bhi.n	80036a4 <HAL_I2C_Init+0x13c>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	1e59      	subs	r1, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	fbb1 f3f3 	udiv	r3, r1, r3
 800367e:	1c59      	adds	r1, r3, #1
 8003680:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003684:	400b      	ands	r3, r1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_I2C_Init+0x138>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1e59      	subs	r1, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	fbb1 f3f3 	udiv	r3, r1, r3
 8003698:	3301      	adds	r3, #1
 800369a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369e:	e051      	b.n	8003744 <HAL_I2C_Init+0x1dc>
 80036a0:	2304      	movs	r3, #4
 80036a2:	e04f      	b.n	8003744 <HAL_I2C_Init+0x1dc>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d111      	bne.n	80036d0 <HAL_I2C_Init+0x168>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1e58      	subs	r0, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	440b      	add	r3, r1
 80036ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80036be:	3301      	adds	r3, #1
 80036c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e012      	b.n	80036f6 <HAL_I2C_Init+0x18e>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	1e58      	subs	r0, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	0099      	lsls	r1, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e6:	3301      	adds	r3, #1
 80036e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_I2C_Init+0x196>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e022      	b.n	8003744 <HAL_I2C_Init+0x1dc>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10e      	bne.n	8003724 <HAL_I2C_Init+0x1bc>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1e58      	subs	r0, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6859      	ldr	r1, [r3, #4]
 800370e:	460b      	mov	r3, r1
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	440b      	add	r3, r1
 8003714:	fbb0 f3f3 	udiv	r3, r0, r3
 8003718:	3301      	adds	r3, #1
 800371a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003722:	e00f      	b.n	8003744 <HAL_I2C_Init+0x1dc>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1e58      	subs	r0, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	0099      	lsls	r1, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	fbb0 f3f3 	udiv	r3, r0, r3
 800373a:	3301      	adds	r3, #1
 800373c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003740:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	6809      	ldr	r1, [r1, #0]
 8003748:	4313      	orrs	r3, r2
 800374a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69da      	ldr	r2, [r3, #28]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003772:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6911      	ldr	r1, [r2, #16]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68d2      	ldr	r2, [r2, #12]
 800377e:	4311      	orrs	r1, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	430b      	orrs	r3, r1
 8003786:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	000186a0 	.word	0x000186a0
 80037e0:	001e847f 	.word	0x001e847f
 80037e4:	003d08ff 	.word	0x003d08ff
 80037e8:	431bde83 	.word	0x431bde83
 80037ec:	10624dd3 	.word	0x10624dd3

080037f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	461a      	mov	r2, r3
 80037fc:	460b      	mov	r3, r1
 80037fe:	817b      	strh	r3, [r7, #10]
 8003800:	4613      	mov	r3, r2
 8003802:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003804:	f7ff fb58 	bl	8002eb8 <HAL_GetTick>
 8003808:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b20      	cmp	r3, #32
 8003814:	f040 80e0 	bne.w	80039d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	2319      	movs	r3, #25
 800381e:	2201      	movs	r2, #1
 8003820:	4970      	ldr	r1, [pc, #448]	@ (80039e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 fc64 	bl	80040f0 <I2C_WaitOnFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800382e:	2302      	movs	r3, #2
 8003830:	e0d3      	b.n	80039da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_I2C_Master_Transmit+0x50>
 800383c:	2302      	movs	r3, #2
 800383e:	e0cc      	b.n	80039da <HAL_I2C_Master_Transmit+0x1ea>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d007      	beq.n	8003866 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0201 	orr.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003874:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2221      	movs	r2, #33	@ 0x21
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2210      	movs	r2, #16
 8003882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	893a      	ldrh	r2, [r7, #8]
 8003896:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4a50      	ldr	r2, [pc, #320]	@ (80039e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80038a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038a8:	8979      	ldrh	r1, [r7, #10]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	6a3a      	ldr	r2, [r7, #32]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 face 	bl	8003e50 <I2C_MasterRequestWrite>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e08d      	b.n	80039da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038d4:	e066      	b.n	80039a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	6a39      	ldr	r1, [r7, #32]
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 fd22 	bl	8004324 <I2C_WaitOnTXEFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00d      	beq.n	8003902 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d107      	bne.n	80038fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e06b      	b.n	80039da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	781a      	ldrb	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b04      	cmp	r3, #4
 800393e:	d11b      	bne.n	8003978 <HAL_I2C_Master_Transmit+0x188>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	d017      	beq.n	8003978 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394c:	781a      	ldrb	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	6a39      	ldr	r1, [r7, #32]
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 fd19 	bl	80043b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00d      	beq.n	80039a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398c:	2b04      	cmp	r3, #4
 800398e:	d107      	bne.n	80039a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800399e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e01a      	b.n	80039da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d194      	bne.n	80038d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	e000      	b.n	80039da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
  }
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	00100002 	.word	0x00100002
 80039e8:	ffff0000 	.word	0xffff0000

080039ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08c      	sub	sp, #48	@ 0x30
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	461a      	mov	r2, r3
 80039f8:	460b      	mov	r3, r1
 80039fa:	817b      	strh	r3, [r7, #10]
 80039fc:	4613      	mov	r3, r2
 80039fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a00:	f7ff fa5a 	bl	8002eb8 <HAL_GetTick>
 8003a04:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	f040 8217 	bne.w	8003e42 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	2319      	movs	r3, #25
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	497c      	ldr	r1, [pc, #496]	@ (8003c10 <HAL_I2C_Master_Receive+0x224>)
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 fb66 	bl	80040f0 <I2C_WaitOnFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e20a      	b.n	8003e44 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_I2C_Master_Receive+0x50>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e203      	b.n	8003e44 <HAL_I2C_Master_Receive+0x458>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d007      	beq.n	8003a62 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0201 	orr.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2222      	movs	r2, #34	@ 0x22
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2210      	movs	r2, #16
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	893a      	ldrh	r2, [r7, #8]
 8003a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a5c      	ldr	r2, [pc, #368]	@ (8003c14 <HAL_I2C_Master_Receive+0x228>)
 8003aa2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003aa4:	8979      	ldrh	r1, [r7, #10]
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fa52 	bl	8003f54 <I2C_MasterRequestRead>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e1c4      	b.n	8003e44 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d113      	bne.n	8003aea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	623b      	str	r3, [r7, #32]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	623b      	str	r3, [r7, #32]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	623b      	str	r3, [r7, #32]
 8003ad6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	e198      	b.n	8003e1c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d11b      	bne.n	8003b2a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	61fb      	str	r3, [r7, #28]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	e178      	b.n	8003e1c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d11b      	bne.n	8003b6a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b52:	2300      	movs	r3, #0
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	e158      	b.n	8003e1c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b90:	e144      	b.n	8003e1c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	f200 80f1 	bhi.w	8003d7e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d123      	bne.n	8003bec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fc4b 	bl	8004444 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e145      	b.n	8003e44 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bea:	e117      	b.n	8003e1c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d14e      	bne.n	8003c92 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	4906      	ldr	r1, [pc, #24]	@ (8003c18 <HAL_I2C_Master_Receive+0x22c>)
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 fa76 	bl	80040f0 <I2C_WaitOnFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e11a      	b.n	8003e44 <HAL_I2C_Master_Receive+0x458>
 8003c0e:	bf00      	nop
 8003c10:	00100002 	.word	0x00100002
 8003c14:	ffff0000 	.word	0xffff0000
 8003c18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c90:	e0c4      	b.n	8003e1c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c98:	2200      	movs	r2, #0
 8003c9a:	496c      	ldr	r1, [pc, #432]	@ (8003e4c <HAL_I2C_Master_Receive+0x460>)
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 fa27 	bl	80040f0 <I2C_WaitOnFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0cb      	b.n	8003e44 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	4955      	ldr	r1, [pc, #340]	@ (8003e4c <HAL_I2C_Master_Receive+0x460>)
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f9f9 	bl	80040f0 <I2C_WaitOnFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e09d      	b.n	8003e44 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d7c:	e04e      	b.n	8003e1c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 fb5e 	bl	8004444 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e058      	b.n	8003e44 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d124      	bne.n	8003e1c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d107      	bne.n	8003dea <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f47f aeb6 	bne.w	8003b92 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e000      	b.n	8003e44 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003e42:	2302      	movs	r3, #2
  }
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3728      	adds	r7, #40	@ 0x28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	00010004 	.word	0x00010004

08003e50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d006      	beq.n	8003e7a <I2C_MasterRequestWrite+0x2a>
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d003      	beq.n	8003e7a <I2C_MasterRequestWrite+0x2a>
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e78:	d108      	bne.n	8003e8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	e00b      	b.n	8003ea4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e90:	2b12      	cmp	r3, #18
 8003e92:	d107      	bne.n	8003ea4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ea2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f91d 	bl	80040f0 <I2C_WaitOnFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00d      	beq.n	8003ed8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eca:	d103      	bne.n	8003ed4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ed2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e035      	b.n	8003f44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ee0:	d108      	bne.n	8003ef4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ee2:	897b      	ldrh	r3, [r7, #10]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ef0:	611a      	str	r2, [r3, #16]
 8003ef2:	e01b      	b.n	8003f2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ef4:	897b      	ldrh	r3, [r7, #10]
 8003ef6:	11db      	asrs	r3, r3, #7
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f003 0306 	and.w	r3, r3, #6
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f063 030f 	orn	r3, r3, #15
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	490e      	ldr	r1, [pc, #56]	@ (8003f4c <I2C_MasterRequestWrite+0xfc>)
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 f966 	bl	80041e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e010      	b.n	8003f44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f22:	897b      	ldrh	r3, [r7, #10]
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	4907      	ldr	r1, [pc, #28]	@ (8003f50 <I2C_MasterRequestWrite+0x100>)
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 f956 	bl	80041e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	00010008 	.word	0x00010008
 8003f50:	00010002 	.word	0x00010002

08003f54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	460b      	mov	r3, r1
 8003f62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d006      	beq.n	8003f8e <I2C_MasterRequestRead+0x3a>
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d003      	beq.n	8003f8e <I2C_MasterRequestRead+0x3a>
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f8c:	d108      	bne.n	8003fa0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e00b      	b.n	8003fb8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa4:	2b11      	cmp	r3, #17
 8003fa6:	d107      	bne.n	8003fb8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f893 	bl	80040f0 <I2C_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00d      	beq.n	8003fec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fde:	d103      	bne.n	8003fe8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fe6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e079      	b.n	80040e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ff4:	d108      	bne.n	8004008 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ff6:	897b      	ldrh	r3, [r7, #10]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	611a      	str	r2, [r3, #16]
 8004006:	e05f      	b.n	80040c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004008:	897b      	ldrh	r3, [r7, #10]
 800400a:	11db      	asrs	r3, r3, #7
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f003 0306 	and.w	r3, r3, #6
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f063 030f 	orn	r3, r3, #15
 8004018:	b2da      	uxtb	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	4930      	ldr	r1, [pc, #192]	@ (80040e8 <I2C_MasterRequestRead+0x194>)
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f8dc 	bl	80041e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e054      	b.n	80040e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004036:	897b      	ldrh	r3, [r7, #10]
 8004038:	b2da      	uxtb	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	4929      	ldr	r1, [pc, #164]	@ (80040ec <I2C_MasterRequestRead+0x198>)
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f8cc 	bl	80041e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e044      	b.n	80040e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004056:	2300      	movs	r3, #0
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800407a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f831 	bl	80040f0 <I2C_WaitOnFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00d      	beq.n	80040b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040a2:	d103      	bne.n	80040ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040aa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e017      	b.n	80040e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80040b0:	897b      	ldrh	r3, [r7, #10]
 80040b2:	11db      	asrs	r3, r3, #7
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	f003 0306 	and.w	r3, r3, #6
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	f063 030e 	orn	r3, r3, #14
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	4907      	ldr	r1, [pc, #28]	@ (80040ec <I2C_MasterRequestRead+0x198>)
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 f888 	bl	80041e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	00010008 	.word	0x00010008
 80040ec:	00010002 	.word	0x00010002

080040f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	4613      	mov	r3, r2
 80040fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004100:	e048      	b.n	8004194 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d044      	beq.n	8004194 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410a:	f7fe fed5 	bl	8002eb8 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d302      	bcc.n	8004120 <I2C_WaitOnFlagUntilTimeout+0x30>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d139      	bne.n	8004194 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	0c1b      	lsrs	r3, r3, #16
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b01      	cmp	r3, #1
 8004128:	d10d      	bne.n	8004146 <I2C_WaitOnFlagUntilTimeout+0x56>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	43da      	mvns	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4013      	ands	r3, r2
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	e00c      	b.n	8004160 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	43da      	mvns	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4013      	ands	r3, r2
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	429a      	cmp	r2, r3
 8004164:	d116      	bne.n	8004194 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	f043 0220 	orr.w	r2, r3, #32
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e023      	b.n	80041dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	0c1b      	lsrs	r3, r3, #16
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d10d      	bne.n	80041ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	43da      	mvns	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	4013      	ands	r3, r2
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bf0c      	ite	eq
 80041b0:	2301      	moveq	r3, #1
 80041b2:	2300      	movne	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	e00c      	b.n	80041d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	43da      	mvns	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4013      	ands	r3, r2
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	bf0c      	ite	eq
 80041cc:	2301      	moveq	r3, #1
 80041ce:	2300      	movne	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d093      	beq.n	8004102 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041f2:	e071      	b.n	80042d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004202:	d123      	bne.n	800424c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004212:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800421c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004238:	f043 0204 	orr.w	r2, r3, #4
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e067      	b.n	800431c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d041      	beq.n	80042d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004254:	f7fe fe30 	bl	8002eb8 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	429a      	cmp	r2, r3
 8004262:	d302      	bcc.n	800426a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d136      	bne.n	80042d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	d10c      	bne.n	800428e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	43da      	mvns	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4013      	ands	r3, r2
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	bf14      	ite	ne
 8004286:	2301      	movne	r3, #1
 8004288:	2300      	moveq	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	e00b      	b.n	80042a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	43da      	mvns	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	4013      	ands	r3, r2
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	bf14      	ite	ne
 80042a0:	2301      	movne	r3, #1
 80042a2:	2300      	moveq	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d016      	beq.n	80042d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c4:	f043 0220 	orr.w	r2, r3, #32
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e021      	b.n	800431c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	0c1b      	lsrs	r3, r3, #16
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d10c      	bne.n	80042fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	43da      	mvns	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4013      	ands	r3, r2
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf14      	ite	ne
 80042f4:	2301      	movne	r3, #1
 80042f6:	2300      	moveq	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	e00b      	b.n	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	43da      	mvns	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4013      	ands	r3, r2
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf14      	ite	ne
 800430e:	2301      	movne	r3, #1
 8004310:	2300      	moveq	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	f47f af6d 	bne.w	80041f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004330:	e034      	b.n	800439c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f8e3 	bl	80044fe <I2C_IsAcknowledgeFailed>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e034      	b.n	80043ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004348:	d028      	beq.n	800439c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434a:	f7fe fdb5 	bl	8002eb8 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	429a      	cmp	r2, r3
 8004358:	d302      	bcc.n	8004360 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d11d      	bne.n	800439c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800436a:	2b80      	cmp	r3, #128	@ 0x80
 800436c:	d016      	beq.n	800439c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004388:	f043 0220 	orr.w	r2, r3, #32
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e007      	b.n	80043ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a6:	2b80      	cmp	r3, #128	@ 0x80
 80043a8:	d1c3      	bne.n	8004332 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043c0:	e034      	b.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f89b 	bl	80044fe <I2C_IsAcknowledgeFailed>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e034      	b.n	800443c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d028      	beq.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043da:	f7fe fd6d 	bl	8002eb8 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d302      	bcc.n	80043f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d11d      	bne.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d016      	beq.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	f043 0220 	orr.w	r2, r3, #32
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e007      	b.n	800443c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b04      	cmp	r3, #4
 8004438:	d1c3      	bne.n	80043c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004450:	e049      	b.n	80044e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f003 0310 	and.w	r3, r3, #16
 800445c:	2b10      	cmp	r3, #16
 800445e:	d119      	bne.n	8004494 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0210 	mvn.w	r2, #16
 8004468:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e030      	b.n	80044f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004494:	f7fe fd10 	bl	8002eb8 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d302      	bcc.n	80044aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d11d      	bne.n	80044e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b4:	2b40      	cmp	r3, #64	@ 0x40
 80044b6:	d016      	beq.n	80044e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	f043 0220 	orr.w	r2, r3, #32
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e007      	b.n	80044f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f0:	2b40      	cmp	r3, #64	@ 0x40
 80044f2:	d1ae      	bne.n	8004452 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004514:	d11b      	bne.n	800454e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800451e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	f043 0204 	orr.w	r2, r3, #4
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e267      	b.n	8004a3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d075      	beq.n	8004666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800457a:	4b88      	ldr	r3, [pc, #544]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 030c 	and.w	r3, r3, #12
 8004582:	2b04      	cmp	r3, #4
 8004584:	d00c      	beq.n	80045a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004586:	4b85      	ldr	r3, [pc, #532]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800458e:	2b08      	cmp	r3, #8
 8004590:	d112      	bne.n	80045b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004592:	4b82      	ldr	r3, [pc, #520]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800459a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800459e:	d10b      	bne.n	80045b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a0:	4b7e      	ldr	r3, [pc, #504]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d05b      	beq.n	8004664 <HAL_RCC_OscConfig+0x108>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d157      	bne.n	8004664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e242      	b.n	8004a3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c0:	d106      	bne.n	80045d0 <HAL_RCC_OscConfig+0x74>
 80045c2:	4b76      	ldr	r3, [pc, #472]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a75      	ldr	r2, [pc, #468]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 80045c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	e01d      	b.n	800460c <HAL_RCC_OscConfig+0xb0>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045d8:	d10c      	bne.n	80045f4 <HAL_RCC_OscConfig+0x98>
 80045da:	4b70      	ldr	r3, [pc, #448]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a6f      	ldr	r2, [pc, #444]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 80045e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	4b6d      	ldr	r3, [pc, #436]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a6c      	ldr	r2, [pc, #432]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 80045ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	e00b      	b.n	800460c <HAL_RCC_OscConfig+0xb0>
 80045f4:	4b69      	ldr	r3, [pc, #420]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a68      	ldr	r2, [pc, #416]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 80045fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	4b66      	ldr	r3, [pc, #408]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a65      	ldr	r2, [pc, #404]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 8004606:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800460a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d013      	beq.n	800463c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004614:	f7fe fc50 	bl	8002eb8 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800461c:	f7fe fc4c 	bl	8002eb8 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b64      	cmp	r3, #100	@ 0x64
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e207      	b.n	8004a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462e:	4b5b      	ldr	r3, [pc, #364]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0xc0>
 800463a:	e014      	b.n	8004666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463c:	f7fe fc3c 	bl	8002eb8 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004644:	f7fe fc38 	bl	8002eb8 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b64      	cmp	r3, #100	@ 0x64
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e1f3      	b.n	8004a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004656:	4b51      	ldr	r3, [pc, #324]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0xe8>
 8004662:	e000      	b.n	8004666 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d063      	beq.n	800473a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004672:	4b4a      	ldr	r3, [pc, #296]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 030c 	and.w	r3, r3, #12
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00b      	beq.n	8004696 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800467e:	4b47      	ldr	r3, [pc, #284]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004686:	2b08      	cmp	r3, #8
 8004688:	d11c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800468a:	4b44      	ldr	r3, [pc, #272]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d116      	bne.n	80046c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004696:	4b41      	ldr	r3, [pc, #260]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <HAL_RCC_OscConfig+0x152>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d001      	beq.n	80046ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e1c7      	b.n	8004a3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ae:	4b3b      	ldr	r3, [pc, #236]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4937      	ldr	r1, [pc, #220]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046c2:	e03a      	b.n	800473a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d020      	beq.n	800470e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046cc:	4b34      	ldr	r3, [pc, #208]	@ (80047a0 <HAL_RCC_OscConfig+0x244>)
 80046ce:	2201      	movs	r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d2:	f7fe fbf1 	bl	8002eb8 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046da:	f7fe fbed 	bl	8002eb8 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e1a8      	b.n	8004a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ec:	4b2b      	ldr	r3, [pc, #172]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0f0      	beq.n	80046da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f8:	4b28      	ldr	r3, [pc, #160]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	4925      	ldr	r1, [pc, #148]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 8004708:	4313      	orrs	r3, r2
 800470a:	600b      	str	r3, [r1, #0]
 800470c:	e015      	b.n	800473a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800470e:	4b24      	ldr	r3, [pc, #144]	@ (80047a0 <HAL_RCC_OscConfig+0x244>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004714:	f7fe fbd0 	bl	8002eb8 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800471c:	f7fe fbcc 	bl	8002eb8 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e187      	b.n	8004a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800472e:	4b1b      	ldr	r3, [pc, #108]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d036      	beq.n	80047b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d016      	beq.n	800477c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800474e:	4b15      	ldr	r3, [pc, #84]	@ (80047a4 <HAL_RCC_OscConfig+0x248>)
 8004750:	2201      	movs	r2, #1
 8004752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004754:	f7fe fbb0 	bl	8002eb8 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800475c:	f7fe fbac 	bl	8002eb8 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e167      	b.n	8004a3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800476e:	4b0b      	ldr	r3, [pc, #44]	@ (800479c <HAL_RCC_OscConfig+0x240>)
 8004770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0x200>
 800477a:	e01b      	b.n	80047b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800477c:	4b09      	ldr	r3, [pc, #36]	@ (80047a4 <HAL_RCC_OscConfig+0x248>)
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004782:	f7fe fb99 	bl	8002eb8 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004788:	e00e      	b.n	80047a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800478a:	f7fe fb95 	bl	8002eb8 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d907      	bls.n	80047a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e150      	b.n	8004a3e <HAL_RCC_OscConfig+0x4e2>
 800479c:	40023800 	.word	0x40023800
 80047a0:	42470000 	.word	0x42470000
 80047a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a8:	4b88      	ldr	r3, [pc, #544]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 80047aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1ea      	bne.n	800478a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 8097 	beq.w	80048f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c2:	2300      	movs	r3, #0
 80047c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c6:	4b81      	ldr	r3, [pc, #516]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10f      	bne.n	80047f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d2:	2300      	movs	r3, #0
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	4b7d      	ldr	r3, [pc, #500]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 80047d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047da:	4a7c      	ldr	r2, [pc, #496]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 80047dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80047e2:	4b7a      	ldr	r3, [pc, #488]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 80047e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ea:	60bb      	str	r3, [r7, #8]
 80047ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ee:	2301      	movs	r3, #1
 80047f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f2:	4b77      	ldr	r3, [pc, #476]	@ (80049d0 <HAL_RCC_OscConfig+0x474>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d118      	bne.n	8004830 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047fe:	4b74      	ldr	r3, [pc, #464]	@ (80049d0 <HAL_RCC_OscConfig+0x474>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a73      	ldr	r2, [pc, #460]	@ (80049d0 <HAL_RCC_OscConfig+0x474>)
 8004804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800480a:	f7fe fb55 	bl	8002eb8 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004812:	f7fe fb51 	bl	8002eb8 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e10c      	b.n	8004a3e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004824:	4b6a      	ldr	r3, [pc, #424]	@ (80049d0 <HAL_RCC_OscConfig+0x474>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0f0      	beq.n	8004812 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d106      	bne.n	8004846 <HAL_RCC_OscConfig+0x2ea>
 8004838:	4b64      	ldr	r3, [pc, #400]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 800483a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483c:	4a63      	ldr	r2, [pc, #396]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	6713      	str	r3, [r2, #112]	@ 0x70
 8004844:	e01c      	b.n	8004880 <HAL_RCC_OscConfig+0x324>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b05      	cmp	r3, #5
 800484c:	d10c      	bne.n	8004868 <HAL_RCC_OscConfig+0x30c>
 800484e:	4b5f      	ldr	r3, [pc, #380]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004852:	4a5e      	ldr	r2, [pc, #376]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 8004854:	f043 0304 	orr.w	r3, r3, #4
 8004858:	6713      	str	r3, [r2, #112]	@ 0x70
 800485a:	4b5c      	ldr	r3, [pc, #368]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 800485c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485e:	4a5b      	ldr	r2, [pc, #364]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	6713      	str	r3, [r2, #112]	@ 0x70
 8004866:	e00b      	b.n	8004880 <HAL_RCC_OscConfig+0x324>
 8004868:	4b58      	ldr	r3, [pc, #352]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486c:	4a57      	ldr	r2, [pc, #348]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 800486e:	f023 0301 	bic.w	r3, r3, #1
 8004872:	6713      	str	r3, [r2, #112]	@ 0x70
 8004874:	4b55      	ldr	r3, [pc, #340]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 8004876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004878:	4a54      	ldr	r2, [pc, #336]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 800487a:	f023 0304 	bic.w	r3, r3, #4
 800487e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d015      	beq.n	80048b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004888:	f7fe fb16 	bl	8002eb8 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004890:	f7fe fb12 	bl	8002eb8 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e0cb      	b.n	8004a3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a6:	4b49      	ldr	r3, [pc, #292]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 80048a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0ee      	beq.n	8004890 <HAL_RCC_OscConfig+0x334>
 80048b2:	e014      	b.n	80048de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b4:	f7fe fb00 	bl	8002eb8 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ba:	e00a      	b.n	80048d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048bc:	f7fe fafc 	bl	8002eb8 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e0b5      	b.n	8004a3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048d2:	4b3e      	ldr	r3, [pc, #248]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1ee      	bne.n	80048bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048de:	7dfb      	ldrb	r3, [r7, #23]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d105      	bne.n	80048f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e4:	4b39      	ldr	r3, [pc, #228]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 80048e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e8:	4a38      	ldr	r2, [pc, #224]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 80048ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 80a1 	beq.w	8004a3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048fa:	4b34      	ldr	r3, [pc, #208]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 030c 	and.w	r3, r3, #12
 8004902:	2b08      	cmp	r3, #8
 8004904:	d05c      	beq.n	80049c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d141      	bne.n	8004992 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490e:	4b31      	ldr	r3, [pc, #196]	@ (80049d4 <HAL_RCC_OscConfig+0x478>)
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004914:	f7fe fad0 	bl	8002eb8 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491c:	f7fe facc 	bl	8002eb8 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e087      	b.n	8004a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492e:	4b27      	ldr	r3, [pc, #156]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1f0      	bne.n	800491c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69da      	ldr	r2, [r3, #28]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004948:	019b      	lsls	r3, r3, #6
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004950:	085b      	lsrs	r3, r3, #1
 8004952:	3b01      	subs	r3, #1
 8004954:	041b      	lsls	r3, r3, #16
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495c:	061b      	lsls	r3, r3, #24
 800495e:	491b      	ldr	r1, [pc, #108]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 8004960:	4313      	orrs	r3, r2
 8004962:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004964:	4b1b      	ldr	r3, [pc, #108]	@ (80049d4 <HAL_RCC_OscConfig+0x478>)
 8004966:	2201      	movs	r2, #1
 8004968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496a:	f7fe faa5 	bl	8002eb8 <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004972:	f7fe faa1 	bl	8002eb8 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e05c      	b.n	8004a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004984:	4b11      	ldr	r3, [pc, #68]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0f0      	beq.n	8004972 <HAL_RCC_OscConfig+0x416>
 8004990:	e054      	b.n	8004a3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004992:	4b10      	ldr	r3, [pc, #64]	@ (80049d4 <HAL_RCC_OscConfig+0x478>)
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004998:	f7fe fa8e 	bl	8002eb8 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a0:	f7fe fa8a 	bl	8002eb8 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e045      	b.n	8004a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b2:	4b06      	ldr	r3, [pc, #24]	@ (80049cc <HAL_RCC_OscConfig+0x470>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f0      	bne.n	80049a0 <HAL_RCC_OscConfig+0x444>
 80049be:	e03d      	b.n	8004a3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d107      	bne.n	80049d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e038      	b.n	8004a3e <HAL_RCC_OscConfig+0x4e2>
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40007000 	.word	0x40007000
 80049d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a48 <HAL_RCC_OscConfig+0x4ec>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d028      	beq.n	8004a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d121      	bne.n	8004a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d11a      	bne.n	8004a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a08:	4013      	ands	r3, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d111      	bne.n	8004a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1e:	085b      	lsrs	r3, r3, #1
 8004a20:	3b01      	subs	r3, #1
 8004a22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d107      	bne.n	8004a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d001      	beq.n	8004a3c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40023800 	.word	0x40023800

08004a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e0cc      	b.n	8004bfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a60:	4b68      	ldr	r3, [pc, #416]	@ (8004c04 <HAL_RCC_ClockConfig+0x1b8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d90c      	bls.n	8004a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6e:	4b65      	ldr	r3, [pc, #404]	@ (8004c04 <HAL_RCC_ClockConfig+0x1b8>)
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a76:	4b63      	ldr	r3, [pc, #396]	@ (8004c04 <HAL_RCC_ClockConfig+0x1b8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d001      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0b8      	b.n	8004bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d020      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004aa0:	4b59      	ldr	r3, [pc, #356]	@ (8004c08 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	4a58      	ldr	r2, [pc, #352]	@ (8004c08 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004aaa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0308 	and.w	r3, r3, #8
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d005      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ab8:	4b53      	ldr	r3, [pc, #332]	@ (8004c08 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	4a52      	ldr	r2, [pc, #328]	@ (8004c08 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac4:	4b50      	ldr	r3, [pc, #320]	@ (8004c08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	494d      	ldr	r1, [pc, #308]	@ (8004c08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d044      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d107      	bne.n	8004afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aea:	4b47      	ldr	r3, [pc, #284]	@ (8004c08 <HAL_RCC_ClockConfig+0x1bc>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d119      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e07f      	b.n	8004bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d003      	beq.n	8004b0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d107      	bne.n	8004b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b0a:	4b3f      	ldr	r3, [pc, #252]	@ (8004c08 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d109      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e06f      	b.n	8004bfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c08 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e067      	b.n	8004bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b2a:	4b37      	ldr	r3, [pc, #220]	@ (8004c08 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f023 0203 	bic.w	r2, r3, #3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	4934      	ldr	r1, [pc, #208]	@ (8004c08 <HAL_RCC_ClockConfig+0x1bc>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b3c:	f7fe f9bc 	bl	8002eb8 <HAL_GetTick>
 8004b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b42:	e00a      	b.n	8004b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b44:	f7fe f9b8 	bl	8002eb8 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e04f      	b.n	8004bfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8004c08 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 020c 	and.w	r2, r3, #12
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d1eb      	bne.n	8004b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b6c:	4b25      	ldr	r3, [pc, #148]	@ (8004c04 <HAL_RCC_ClockConfig+0x1b8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d20c      	bcs.n	8004b94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7a:	4b22      	ldr	r3, [pc, #136]	@ (8004c04 <HAL_RCC_ClockConfig+0x1b8>)
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b82:	4b20      	ldr	r3, [pc, #128]	@ (8004c04 <HAL_RCC_ClockConfig+0x1b8>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d001      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e032      	b.n	8004bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba0:	4b19      	ldr	r3, [pc, #100]	@ (8004c08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	4916      	ldr	r1, [pc, #88]	@ (8004c08 <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d009      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bbe:	4b12      	ldr	r3, [pc, #72]	@ (8004c08 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	490e      	ldr	r1, [pc, #56]	@ (8004c08 <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bd2:	f000 f821 	bl	8004c18 <HAL_RCC_GetSysClockFreq>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c08 <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	091b      	lsrs	r3, r3, #4
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	490a      	ldr	r1, [pc, #40]	@ (8004c0c <HAL_RCC_ClockConfig+0x1c0>)
 8004be4:	5ccb      	ldrb	r3, [r1, r3]
 8004be6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bea:	4a09      	ldr	r2, [pc, #36]	@ (8004c10 <HAL_RCC_ClockConfig+0x1c4>)
 8004bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004bee:	4b09      	ldr	r3, [pc, #36]	@ (8004c14 <HAL_RCC_ClockConfig+0x1c8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe f91c 	bl	8002e30 <HAL_InitTick>

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40023c00 	.word	0x40023c00
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	0800e168 	.word	0x0800e168
 8004c10:	20000168 	.word	0x20000168
 8004c14:	2000016c 	.word	0x2000016c

08004c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c1c:	b090      	sub	sp, #64	@ 0x40
 8004c1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c30:	4b59      	ldr	r3, [pc, #356]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 030c 	and.w	r3, r3, #12
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d00d      	beq.n	8004c58 <HAL_RCC_GetSysClockFreq+0x40>
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	f200 80a1 	bhi.w	8004d84 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <HAL_RCC_GetSysClockFreq+0x34>
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	d003      	beq.n	8004c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c4a:	e09b      	b.n	8004d84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c4c:	4b53      	ldr	r3, [pc, #332]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x184>)
 8004c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c50:	e09b      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c52:	4b53      	ldr	r3, [pc, #332]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c56:	e098      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c58:	4b4f      	ldr	r3, [pc, #316]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c60:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c62:	4b4d      	ldr	r3, [pc, #308]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d028      	beq.n	8004cc0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	099b      	lsrs	r3, r3, #6
 8004c74:	2200      	movs	r2, #0
 8004c76:	623b      	str	r3, [r7, #32]
 8004c78:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c80:	2100      	movs	r1, #0
 8004c82:	4b47      	ldr	r3, [pc, #284]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c84:	fb03 f201 	mul.w	r2, r3, r1
 8004c88:	2300      	movs	r3, #0
 8004c8a:	fb00 f303 	mul.w	r3, r0, r3
 8004c8e:	4413      	add	r3, r2
 8004c90:	4a43      	ldr	r2, [pc, #268]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c92:	fba0 1202 	umull	r1, r2, r0, r2
 8004c96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c98:	460a      	mov	r2, r1
 8004c9a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004c9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c9e:	4413      	add	r3, r2
 8004ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	61bb      	str	r3, [r7, #24]
 8004ca8:	61fa      	str	r2, [r7, #28]
 8004caa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004cb2:	f7fc f821 	bl	8000cf8 <__aeabi_uldivmod>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4613      	mov	r3, r2
 8004cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cbe:	e053      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc0:	4b35      	ldr	r3, [pc, #212]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	099b      	lsrs	r3, r3, #6
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	617a      	str	r2, [r7, #20]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004cd2:	f04f 0b00 	mov.w	fp, #0
 8004cd6:	4652      	mov	r2, sl
 8004cd8:	465b      	mov	r3, fp
 8004cda:	f04f 0000 	mov.w	r0, #0
 8004cde:	f04f 0100 	mov.w	r1, #0
 8004ce2:	0159      	lsls	r1, r3, #5
 8004ce4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ce8:	0150      	lsls	r0, r2, #5
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	ebb2 080a 	subs.w	r8, r2, sl
 8004cf2:	eb63 090b 	sbc.w	r9, r3, fp
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d0a:	ebb2 0408 	subs.w	r4, r2, r8
 8004d0e:	eb63 0509 	sbc.w	r5, r3, r9
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	00eb      	lsls	r3, r5, #3
 8004d1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d20:	00e2      	lsls	r2, r4, #3
 8004d22:	4614      	mov	r4, r2
 8004d24:	461d      	mov	r5, r3
 8004d26:	eb14 030a 	adds.w	r3, r4, sl
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	eb45 030b 	adc.w	r3, r5, fp
 8004d30:	607b      	str	r3, [r7, #4]
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d3e:	4629      	mov	r1, r5
 8004d40:	028b      	lsls	r3, r1, #10
 8004d42:	4621      	mov	r1, r4
 8004d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d48:	4621      	mov	r1, r4
 8004d4a:	028a      	lsls	r2, r1, #10
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4619      	mov	r1, r3
 8004d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d52:	2200      	movs	r2, #0
 8004d54:	60bb      	str	r3, [r7, #8]
 8004d56:	60fa      	str	r2, [r7, #12]
 8004d58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d5c:	f7fb ffcc 	bl	8000cf8 <__aeabi_uldivmod>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4613      	mov	r3, r2
 8004d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d68:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	0c1b      	lsrs	r3, r3, #16
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	3301      	adds	r3, #1
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004d78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d82:	e002      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d84:	4b05      	ldr	r3, [pc, #20]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x184>)
 8004d86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3740      	adds	r7, #64	@ 0x40
 8004d90:	46bd      	mov	sp, r7
 8004d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d96:	bf00      	nop
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	00f42400 	.word	0x00f42400
 8004da0:	017d7840 	.word	0x017d7840

08004da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da8:	4b03      	ldr	r3, [pc, #12]	@ (8004db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004daa:	681b      	ldr	r3, [r3, #0]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20000168 	.word	0x20000168

08004dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dc0:	f7ff fff0 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	4b05      	ldr	r3, [pc, #20]	@ (8004ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	0a9b      	lsrs	r3, r3, #10
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	4903      	ldr	r1, [pc, #12]	@ (8004de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dd2:	5ccb      	ldrb	r3, [r1, r3]
 8004dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	0800e178 	.word	0x0800e178

08004de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004de8:	f7ff ffdc 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004dec:	4602      	mov	r2, r0
 8004dee:	4b05      	ldr	r3, [pc, #20]	@ (8004e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	0b5b      	lsrs	r3, r3, #13
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	4903      	ldr	r1, [pc, #12]	@ (8004e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dfa:	5ccb      	ldrb	r3, [r1, r3]
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40023800 	.word	0x40023800
 8004e08:	0800e178 	.word	0x0800e178

08004e0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e042      	b.n	8004ea4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fd fe72 	bl	8002b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2224      	movs	r2, #36	@ 0x24
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 fdbd 	bl	80059d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695a      	ldr	r2, [r3, #20]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08a      	sub	sp, #40	@ 0x28
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d175      	bne.n	8004fb8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_UART_Transmit+0x2c>
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e06e      	b.n	8004fba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2221      	movs	r2, #33	@ 0x21
 8004ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eea:	f7fd ffe5 	bl	8002eb8 <HAL_GetTick>
 8004eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	88fa      	ldrh	r2, [r7, #6]
 8004ef4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	88fa      	ldrh	r2, [r7, #6]
 8004efa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f04:	d108      	bne.n	8004f18 <HAL_UART_Transmit+0x6c>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d104      	bne.n	8004f18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	e003      	b.n	8004f20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f20:	e02e      	b.n	8004f80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2180      	movs	r1, #128	@ 0x80
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 fb1f 	bl	8005570 <UART_WaitOnFlagUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e03a      	b.n	8004fba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10b      	bne.n	8004f62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	3302      	adds	r3, #2
 8004f5e:	61bb      	str	r3, [r7, #24]
 8004f60:	e007      	b.n	8004f72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	781a      	ldrb	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1cb      	bne.n	8004f22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2200      	movs	r2, #0
 8004f92:	2140      	movs	r1, #64	@ 0x40
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 faeb 	bl	8005570 <UART_WaitOnFlagUntilTimeout>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e006      	b.n	8004fba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e000      	b.n	8004fba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fb8:	2302      	movs	r3, #2
  }
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3720      	adds	r7, #32
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d112      	bne.n	8005002 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <HAL_UART_Receive_IT+0x26>
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e00b      	b.n	8005004 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ff2:	88fb      	ldrh	r3, [r7, #6]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	68b9      	ldr	r1, [r7, #8]
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 fb12 	bl	8005622 <UART_Start_Receive_IT>
 8004ffe:	4603      	mov	r3, r0
 8005000:	e000      	b.n	8005004 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005002:	2302      	movs	r3, #2
  }
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b0ba      	sub	sp, #232	@ 0xe8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005032:	2300      	movs	r3, #0
 8005034:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005038:	2300      	movs	r3, #0
 800503a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800503e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800504a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10f      	bne.n	8005072 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d009      	beq.n	8005072 <HAL_UART_IRQHandler+0x66>
 800505e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fbf2 	bl	8005854 <UART_Receive_IT>
      return;
 8005070:	e25b      	b.n	800552a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 80de 	beq.w	8005238 <HAL_UART_IRQHandler+0x22c>
 800507c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b00      	cmp	r3, #0
 8005086:	d106      	bne.n	8005096 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800508c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 80d1 	beq.w	8005238 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00b      	beq.n	80050ba <HAL_UART_IRQHandler+0xae>
 80050a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d005      	beq.n	80050ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b2:	f043 0201 	orr.w	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00b      	beq.n	80050de <HAL_UART_IRQHandler+0xd2>
 80050c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d6:	f043 0202 	orr.w	r2, r3, #2
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00b      	beq.n	8005102 <HAL_UART_IRQHandler+0xf6>
 80050ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fa:	f043 0204 	orr.w	r2, r3, #4
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d011      	beq.n	8005132 <HAL_UART_IRQHandler+0x126>
 800510e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b00      	cmp	r3, #0
 8005118:	d105      	bne.n	8005126 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800511a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800512a:	f043 0208 	orr.w	r2, r3, #8
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 81f2 	beq.w	8005520 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800513c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005140:	f003 0320 	and.w	r3, r3, #32
 8005144:	2b00      	cmp	r3, #0
 8005146:	d008      	beq.n	800515a <HAL_UART_IRQHandler+0x14e>
 8005148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800514c:	f003 0320 	and.w	r3, r3, #32
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fb7d 	bl	8005854 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005164:	2b40      	cmp	r3, #64	@ 0x40
 8005166:	bf0c      	ite	eq
 8005168:	2301      	moveq	r3, #1
 800516a:	2300      	movne	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d103      	bne.n	8005186 <HAL_UART_IRQHandler+0x17a>
 800517e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005182:	2b00      	cmp	r3, #0
 8005184:	d04f      	beq.n	8005226 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa85 	bl	8005696 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005196:	2b40      	cmp	r3, #64	@ 0x40
 8005198:	d141      	bne.n	800521e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3314      	adds	r3, #20
 80051a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80051b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3314      	adds	r3, #20
 80051c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80051c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80051ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80051d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80051de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1d9      	bne.n	800519a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d013      	beq.n	8005216 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f2:	4a7e      	ldr	r2, [pc, #504]	@ (80053ec <HAL_UART_IRQHandler+0x3e0>)
 80051f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fe f80d 	bl	800321a <HAL_DMA_Abort_IT>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d016      	beq.n	8005234 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005210:	4610      	mov	r0, r2
 8005212:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005214:	e00e      	b.n	8005234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f994 	bl	8005544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800521c:	e00a      	b.n	8005234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f990 	bl	8005544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005224:	e006      	b.n	8005234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f98c 	bl	8005544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005232:	e175      	b.n	8005520 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005234:	bf00      	nop
    return;
 8005236:	e173      	b.n	8005520 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523c:	2b01      	cmp	r3, #1
 800523e:	f040 814f 	bne.w	80054e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005246:	f003 0310 	and.w	r3, r3, #16
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 8148 	beq.w	80054e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 8141 	beq.w	80054e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800525e:	2300      	movs	r3, #0
 8005260:	60bb      	str	r3, [r7, #8]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60bb      	str	r3, [r7, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	60bb      	str	r3, [r7, #8]
 8005272:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800527e:	2b40      	cmp	r3, #64	@ 0x40
 8005280:	f040 80b6 	bne.w	80053f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005290:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 8145 	beq.w	8005524 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800529e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052a2:	429a      	cmp	r2, r3
 80052a4:	f080 813e 	bcs.w	8005524 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ba:	f000 8088 	beq.w	80053ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	330c      	adds	r3, #12
 80052c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80052d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	330c      	adds	r3, #12
 80052e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80052ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80052f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005302:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1d9      	bne.n	80052be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3314      	adds	r3, #20
 8005310:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800531a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800531c:	f023 0301 	bic.w	r3, r3, #1
 8005320:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3314      	adds	r3, #20
 800532a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800532e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005332:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005336:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005340:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1e1      	bne.n	800530a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3314      	adds	r3, #20
 800534c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800535c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3314      	adds	r3, #20
 8005366:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800536a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800536c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005370:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005378:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e3      	bne.n	8005346 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	330c      	adds	r3, #12
 8005392:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800539c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800539e:	f023 0310 	bic.w	r3, r3, #16
 80053a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	330c      	adds	r3, #12
 80053ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80053b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80053b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e3      	bne.n	800538c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fd feb6 	bl	800313a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2202      	movs	r2, #2
 80053d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053dc:	b29b      	uxth	r3, r3
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f8b7 	bl	8005558 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053ea:	e09b      	b.n	8005524 <HAL_UART_IRQHandler+0x518>
 80053ec:	0800575d 	.word	0x0800575d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 808e 	beq.w	8005528 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800540c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 8089 	beq.w	8005528 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	330c      	adds	r3, #12
 800541c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005420:	e853 3f00 	ldrex	r3, [r3]
 8005424:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005428:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800542c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	330c      	adds	r3, #12
 8005436:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800543a:	647a      	str	r2, [r7, #68]	@ 0x44
 800543c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005440:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005442:	e841 2300 	strex	r3, r2, [r1]
 8005446:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1e3      	bne.n	8005416 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3314      	adds	r3, #20
 8005454:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	623b      	str	r3, [r7, #32]
   return(result);
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3314      	adds	r3, #20
 800546e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005472:	633a      	str	r2, [r7, #48]	@ 0x30
 8005474:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e3      	bne.n	800544e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	330c      	adds	r3, #12
 800549a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0310 	bic.w	r3, r3, #16
 80054aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	330c      	adds	r3, #12
 80054b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80054b8:	61fa      	str	r2, [r7, #28]
 80054ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	69b9      	ldr	r1, [r7, #24]
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	617b      	str	r3, [r7, #20]
   return(result);
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e3      	bne.n	8005494 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054d6:	4619      	mov	r1, r3
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f83d 	bl	8005558 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054de:	e023      	b.n	8005528 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d009      	beq.n	8005500 <HAL_UART_IRQHandler+0x4f4>
 80054ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f943 	bl	8005784 <UART_Transmit_IT>
    return;
 80054fe:	e014      	b.n	800552a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00e      	beq.n	800552a <HAL_UART_IRQHandler+0x51e>
 800550c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005514:	2b00      	cmp	r3, #0
 8005516:	d008      	beq.n	800552a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f983 	bl	8005824 <UART_EndTransmit_IT>
    return;
 800551e:	e004      	b.n	800552a <HAL_UART_IRQHandler+0x51e>
    return;
 8005520:	bf00      	nop
 8005522:	e002      	b.n	800552a <HAL_UART_IRQHandler+0x51e>
      return;
 8005524:	bf00      	nop
 8005526:	e000      	b.n	800552a <HAL_UART_IRQHandler+0x51e>
      return;
 8005528:	bf00      	nop
  }
}
 800552a:	37e8      	adds	r7, #232	@ 0xe8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	4613      	mov	r3, r2
 800557e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005580:	e03b      	b.n	80055fa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d037      	beq.n	80055fa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558a:	f7fd fc95 	bl	8002eb8 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	6a3a      	ldr	r2, [r7, #32]
 8005596:	429a      	cmp	r2, r3
 8005598:	d302      	bcc.n	80055a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e03a      	b.n	800561a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d023      	beq.n	80055fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b80      	cmp	r3, #128	@ 0x80
 80055b6:	d020      	beq.n	80055fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b40      	cmp	r3, #64	@ 0x40
 80055bc:	d01d      	beq.n	80055fa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0308 	and.w	r3, r3, #8
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d116      	bne.n	80055fa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 f857 	bl	8005696 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2208      	movs	r2, #8
 80055ec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e00f      	b.n	800561a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4013      	ands	r3, r2
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	429a      	cmp	r2, r3
 8005608:	bf0c      	ite	eq
 800560a:	2301      	moveq	r3, #1
 800560c:	2300      	movne	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	461a      	mov	r2, r3
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	429a      	cmp	r2, r3
 8005616:	d0b4      	beq.n	8005582 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005622:	b480      	push	{r7}
 8005624:	b085      	sub	sp, #20
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	4613      	mov	r3, r2
 800562e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	88fa      	ldrh	r2, [r7, #6]
 800563a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	88fa      	ldrh	r2, [r7, #6]
 8005640:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2222      	movs	r2, #34	@ 0x22
 800564c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005666:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695a      	ldr	r2, [r3, #20]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0201 	orr.w	r2, r2, #1
 8005676:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68da      	ldr	r2, [r3, #12]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0220 	orr.w	r2, r2, #32
 8005686:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005696:	b480      	push	{r7}
 8005698:	b095      	sub	sp, #84	@ 0x54
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	330c      	adds	r3, #12
 80056a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	330c      	adds	r3, #12
 80056bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056be:	643a      	str	r2, [r7, #64]	@ 0x40
 80056c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e5      	bne.n	800569e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3314      	adds	r3, #20
 80056d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	f023 0301 	bic.w	r3, r3, #1
 80056e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3314      	adds	r3, #20
 80056f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e5      	bne.n	80056d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570a:	2b01      	cmp	r3, #1
 800570c:	d119      	bne.n	8005742 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	330c      	adds	r3, #12
 8005714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	60bb      	str	r3, [r7, #8]
   return(result);
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f023 0310 	bic.w	r3, r3, #16
 8005724:	647b      	str	r3, [r7, #68]	@ 0x44
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	330c      	adds	r3, #12
 800572c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800572e:	61ba      	str	r2, [r7, #24]
 8005730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	6979      	ldr	r1, [r7, #20]
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	613b      	str	r3, [r7, #16]
   return(result);
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e5      	bne.n	800570e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005750:	bf00      	nop
 8005752:	3754      	adds	r7, #84	@ 0x54
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005768:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f7ff fee4 	bl	8005544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800577c:	bf00      	nop
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b21      	cmp	r3, #33	@ 0x21
 8005796:	d13e      	bne.n	8005816 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057a0:	d114      	bne.n	80057cc <UART_Transmit_IT+0x48>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d110      	bne.n	80057cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	461a      	mov	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	1c9a      	adds	r2, r3, #2
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	621a      	str	r2, [r3, #32]
 80057ca:	e008      	b.n	80057de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	1c59      	adds	r1, r3, #1
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6211      	str	r1, [r2, #32]
 80057d6:	781a      	ldrb	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	4619      	mov	r1, r3
 80057ec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10f      	bne.n	8005812 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005800:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005810:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	e000      	b.n	8005818 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005816:	2302      	movs	r3, #2
  }
}
 8005818:	4618      	mov	r0, r3
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800583a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f7ff fe73 	bl	8005530 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08c      	sub	sp, #48	@ 0x30
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b22      	cmp	r3, #34	@ 0x22
 8005866:	f040 80ae 	bne.w	80059c6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005872:	d117      	bne.n	80058a4 <UART_Receive_IT+0x50>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d113      	bne.n	80058a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800587c:	2300      	movs	r3, #0
 800587e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005884:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	b29b      	uxth	r3, r3
 800588e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005892:	b29a      	uxth	r2, r3
 8005894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005896:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589c:	1c9a      	adds	r2, r3, #2
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80058a2:	e026      	b.n	80058f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058b6:	d007      	beq.n	80058c8 <UART_Receive_IT+0x74>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <UART_Receive_IT+0x82>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d106      	bne.n	80058d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d2:	701a      	strb	r2, [r3, #0]
 80058d4:	e008      	b.n	80058e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	4619      	mov	r1, r3
 8005900:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005902:	2b00      	cmp	r3, #0
 8005904:	d15d      	bne.n	80059c2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0220 	bic.w	r2, r2, #32
 8005914:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005924:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	695a      	ldr	r2, [r3, #20]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0201 	bic.w	r2, r2, #1
 8005934:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005948:	2b01      	cmp	r3, #1
 800594a:	d135      	bne.n	80059b8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	330c      	adds	r3, #12
 8005958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	e853 3f00 	ldrex	r3, [r3]
 8005960:	613b      	str	r3, [r7, #16]
   return(result);
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f023 0310 	bic.w	r3, r3, #16
 8005968:	627b      	str	r3, [r7, #36]	@ 0x24
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	330c      	adds	r3, #12
 8005970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005972:	623a      	str	r2, [r7, #32]
 8005974:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	69f9      	ldr	r1, [r7, #28]
 8005978:	6a3a      	ldr	r2, [r7, #32]
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e5      	bne.n	8005952 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b10      	cmp	r3, #16
 8005992:	d10a      	bne.n	80059aa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059ae:	4619      	mov	r1, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7ff fdd1 	bl	8005558 <HAL_UARTEx_RxEventCallback>
 80059b6:	e002      	b.n	80059be <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7fb ff29 	bl	8001810 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	e002      	b.n	80059c8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	e000      	b.n	80059c8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80059c6:	2302      	movs	r3, #2
  }
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3730      	adds	r7, #48	@ 0x30
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059d4:	b0c0      	sub	sp, #256	@ 0x100
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ec:	68d9      	ldr	r1, [r3, #12]
 80059ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	ea40 0301 	orr.w	r3, r0, r1
 80059f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	431a      	orrs	r2, r3
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a28:	f021 010c 	bic.w	r1, r1, #12
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a36:	430b      	orrs	r3, r1
 8005a38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4a:	6999      	ldr	r1, [r3, #24]
 8005a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	ea40 0301 	orr.w	r3, r0, r1
 8005a56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	4b8f      	ldr	r3, [pc, #572]	@ (8005c9c <UART_SetConfig+0x2cc>)
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d005      	beq.n	8005a70 <UART_SetConfig+0xa0>
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b8d      	ldr	r3, [pc, #564]	@ (8005ca0 <UART_SetConfig+0x2d0>)
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d104      	bne.n	8005a7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a70:	f7ff f9b8 	bl	8004de4 <HAL_RCC_GetPCLK2Freq>
 8005a74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a78:	e003      	b.n	8005a82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a7a:	f7ff f99f 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 8005a7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a8c:	f040 810c 	bne.w	8005ca8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a94:	2200      	movs	r2, #0
 8005a96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005aa2:	4622      	mov	r2, r4
 8005aa4:	462b      	mov	r3, r5
 8005aa6:	1891      	adds	r1, r2, r2
 8005aa8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005aaa:	415b      	adcs	r3, r3
 8005aac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005aae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	eb12 0801 	adds.w	r8, r2, r1
 8005ab8:	4629      	mov	r1, r5
 8005aba:	eb43 0901 	adc.w	r9, r3, r1
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	f04f 0300 	mov.w	r3, #0
 8005ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ad2:	4690      	mov	r8, r2
 8005ad4:	4699      	mov	r9, r3
 8005ad6:	4623      	mov	r3, r4
 8005ad8:	eb18 0303 	adds.w	r3, r8, r3
 8005adc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ae0:	462b      	mov	r3, r5
 8005ae2:	eb49 0303 	adc.w	r3, r9, r3
 8005ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005af6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005afa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005afe:	460b      	mov	r3, r1
 8005b00:	18db      	adds	r3, r3, r3
 8005b02:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b04:	4613      	mov	r3, r2
 8005b06:	eb42 0303 	adc.w	r3, r2, r3
 8005b0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b14:	f7fb f8f0 	bl	8000cf8 <__aeabi_uldivmod>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4b61      	ldr	r3, [pc, #388]	@ (8005ca4 <UART_SetConfig+0x2d4>)
 8005b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	011c      	lsls	r4, r3, #4
 8005b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b38:	4642      	mov	r2, r8
 8005b3a:	464b      	mov	r3, r9
 8005b3c:	1891      	adds	r1, r2, r2
 8005b3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b40:	415b      	adcs	r3, r3
 8005b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b48:	4641      	mov	r1, r8
 8005b4a:	eb12 0a01 	adds.w	sl, r2, r1
 8005b4e:	4649      	mov	r1, r9
 8005b50:	eb43 0b01 	adc.w	fp, r3, r1
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b68:	4692      	mov	sl, r2
 8005b6a:	469b      	mov	fp, r3
 8005b6c:	4643      	mov	r3, r8
 8005b6e:	eb1a 0303 	adds.w	r3, sl, r3
 8005b72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b76:	464b      	mov	r3, r9
 8005b78:	eb4b 0303 	adc.w	r3, fp, r3
 8005b7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b94:	460b      	mov	r3, r1
 8005b96:	18db      	adds	r3, r3, r3
 8005b98:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ba2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005ba6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005baa:	f7fb f8a5 	bl	8000cf8 <__aeabi_uldivmod>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ca4 <UART_SetConfig+0x2d4>)
 8005bb6:	fba3 2301 	umull	r2, r3, r3, r1
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	2264      	movs	r2, #100	@ 0x64
 8005bbe:	fb02 f303 	mul.w	r3, r2, r3
 8005bc2:	1acb      	subs	r3, r1, r3
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005bca:	4b36      	ldr	r3, [pc, #216]	@ (8005ca4 <UART_SetConfig+0x2d4>)
 8005bcc:	fba3 2302 	umull	r2, r3, r3, r2
 8005bd0:	095b      	lsrs	r3, r3, #5
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005bd8:	441c      	add	r4, r3
 8005bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005be4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005be8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005bec:	4642      	mov	r2, r8
 8005bee:	464b      	mov	r3, r9
 8005bf0:	1891      	adds	r1, r2, r2
 8005bf2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005bf4:	415b      	adcs	r3, r3
 8005bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005bfc:	4641      	mov	r1, r8
 8005bfe:	1851      	adds	r1, r2, r1
 8005c00:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c02:	4649      	mov	r1, r9
 8005c04:	414b      	adcs	r3, r1
 8005c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c14:	4659      	mov	r1, fp
 8005c16:	00cb      	lsls	r3, r1, #3
 8005c18:	4651      	mov	r1, sl
 8005c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c1e:	4651      	mov	r1, sl
 8005c20:	00ca      	lsls	r2, r1, #3
 8005c22:	4610      	mov	r0, r2
 8005c24:	4619      	mov	r1, r3
 8005c26:	4603      	mov	r3, r0
 8005c28:	4642      	mov	r2, r8
 8005c2a:	189b      	adds	r3, r3, r2
 8005c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c30:	464b      	mov	r3, r9
 8005c32:	460a      	mov	r2, r1
 8005c34:	eb42 0303 	adc.w	r3, r2, r3
 8005c38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c50:	460b      	mov	r3, r1
 8005c52:	18db      	adds	r3, r3, r3
 8005c54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c56:	4613      	mov	r3, r2
 8005c58:	eb42 0303 	adc.w	r3, r2, r3
 8005c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c66:	f7fb f847 	bl	8000cf8 <__aeabi_uldivmod>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca4 <UART_SetConfig+0x2d4>)
 8005c70:	fba3 1302 	umull	r1, r3, r3, r2
 8005c74:	095b      	lsrs	r3, r3, #5
 8005c76:	2164      	movs	r1, #100	@ 0x64
 8005c78:	fb01 f303 	mul.w	r3, r1, r3
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	3332      	adds	r3, #50	@ 0x32
 8005c82:	4a08      	ldr	r2, [pc, #32]	@ (8005ca4 <UART_SetConfig+0x2d4>)
 8005c84:	fba2 2303 	umull	r2, r3, r2, r3
 8005c88:	095b      	lsrs	r3, r3, #5
 8005c8a:	f003 0207 	and.w	r2, r3, #7
 8005c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4422      	add	r2, r4
 8005c96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c98:	e106      	b.n	8005ea8 <UART_SetConfig+0x4d8>
 8005c9a:	bf00      	nop
 8005c9c:	40011000 	.word	0x40011000
 8005ca0:	40011400 	.word	0x40011400
 8005ca4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cac:	2200      	movs	r2, #0
 8005cae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005cb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005cb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005cba:	4642      	mov	r2, r8
 8005cbc:	464b      	mov	r3, r9
 8005cbe:	1891      	adds	r1, r2, r2
 8005cc0:	6239      	str	r1, [r7, #32]
 8005cc2:	415b      	adcs	r3, r3
 8005cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cca:	4641      	mov	r1, r8
 8005ccc:	1854      	adds	r4, r2, r1
 8005cce:	4649      	mov	r1, r9
 8005cd0:	eb43 0501 	adc.w	r5, r3, r1
 8005cd4:	f04f 0200 	mov.w	r2, #0
 8005cd8:	f04f 0300 	mov.w	r3, #0
 8005cdc:	00eb      	lsls	r3, r5, #3
 8005cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ce2:	00e2      	lsls	r2, r4, #3
 8005ce4:	4614      	mov	r4, r2
 8005ce6:	461d      	mov	r5, r3
 8005ce8:	4643      	mov	r3, r8
 8005cea:	18e3      	adds	r3, r4, r3
 8005cec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cf0:	464b      	mov	r3, r9
 8005cf2:	eb45 0303 	adc.w	r3, r5, r3
 8005cf6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d0a:	f04f 0200 	mov.w	r2, #0
 8005d0e:	f04f 0300 	mov.w	r3, #0
 8005d12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d16:	4629      	mov	r1, r5
 8005d18:	008b      	lsls	r3, r1, #2
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d20:	4621      	mov	r1, r4
 8005d22:	008a      	lsls	r2, r1, #2
 8005d24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d28:	f7fa ffe6 	bl	8000cf8 <__aeabi_uldivmod>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4b60      	ldr	r3, [pc, #384]	@ (8005eb4 <UART_SetConfig+0x4e4>)
 8005d32:	fba3 2302 	umull	r2, r3, r3, r2
 8005d36:	095b      	lsrs	r3, r3, #5
 8005d38:	011c      	lsls	r4, r3, #4
 8005d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d4c:	4642      	mov	r2, r8
 8005d4e:	464b      	mov	r3, r9
 8005d50:	1891      	adds	r1, r2, r2
 8005d52:	61b9      	str	r1, [r7, #24]
 8005d54:	415b      	adcs	r3, r3
 8005d56:	61fb      	str	r3, [r7, #28]
 8005d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d5c:	4641      	mov	r1, r8
 8005d5e:	1851      	adds	r1, r2, r1
 8005d60:	6139      	str	r1, [r7, #16]
 8005d62:	4649      	mov	r1, r9
 8005d64:	414b      	adcs	r3, r1
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	f04f 0300 	mov.w	r3, #0
 8005d70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d74:	4659      	mov	r1, fp
 8005d76:	00cb      	lsls	r3, r1, #3
 8005d78:	4651      	mov	r1, sl
 8005d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d7e:	4651      	mov	r1, sl
 8005d80:	00ca      	lsls	r2, r1, #3
 8005d82:	4610      	mov	r0, r2
 8005d84:	4619      	mov	r1, r3
 8005d86:	4603      	mov	r3, r0
 8005d88:	4642      	mov	r2, r8
 8005d8a:	189b      	adds	r3, r3, r2
 8005d8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d90:	464b      	mov	r3, r9
 8005d92:	460a      	mov	r2, r1
 8005d94:	eb42 0303 	adc.w	r3, r2, r3
 8005d98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005da6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	f04f 0300 	mov.w	r3, #0
 8005db0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005db4:	4649      	mov	r1, r9
 8005db6:	008b      	lsls	r3, r1, #2
 8005db8:	4641      	mov	r1, r8
 8005dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dbe:	4641      	mov	r1, r8
 8005dc0:	008a      	lsls	r2, r1, #2
 8005dc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005dc6:	f7fa ff97 	bl	8000cf8 <__aeabi_uldivmod>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4611      	mov	r1, r2
 8005dd0:	4b38      	ldr	r3, [pc, #224]	@ (8005eb4 <UART_SetConfig+0x4e4>)
 8005dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8005dd6:	095b      	lsrs	r3, r3, #5
 8005dd8:	2264      	movs	r2, #100	@ 0x64
 8005dda:	fb02 f303 	mul.w	r3, r2, r3
 8005dde:	1acb      	subs	r3, r1, r3
 8005de0:	011b      	lsls	r3, r3, #4
 8005de2:	3332      	adds	r3, #50	@ 0x32
 8005de4:	4a33      	ldr	r2, [pc, #204]	@ (8005eb4 <UART_SetConfig+0x4e4>)
 8005de6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005df0:	441c      	add	r4, r3
 8005df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005df6:	2200      	movs	r2, #0
 8005df8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dfa:	677a      	str	r2, [r7, #116]	@ 0x74
 8005dfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e00:	4642      	mov	r2, r8
 8005e02:	464b      	mov	r3, r9
 8005e04:	1891      	adds	r1, r2, r2
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	415b      	adcs	r3, r3
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e10:	4641      	mov	r1, r8
 8005e12:	1851      	adds	r1, r2, r1
 8005e14:	6039      	str	r1, [r7, #0]
 8005e16:	4649      	mov	r1, r9
 8005e18:	414b      	adcs	r3, r1
 8005e1a:	607b      	str	r3, [r7, #4]
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	f04f 0300 	mov.w	r3, #0
 8005e24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e28:	4659      	mov	r1, fp
 8005e2a:	00cb      	lsls	r3, r1, #3
 8005e2c:	4651      	mov	r1, sl
 8005e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e32:	4651      	mov	r1, sl
 8005e34:	00ca      	lsls	r2, r1, #3
 8005e36:	4610      	mov	r0, r2
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	4642      	mov	r2, r8
 8005e3e:	189b      	adds	r3, r3, r2
 8005e40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e42:	464b      	mov	r3, r9
 8005e44:	460a      	mov	r2, r1
 8005e46:	eb42 0303 	adc.w	r3, r2, r3
 8005e4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e56:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e64:	4649      	mov	r1, r9
 8005e66:	008b      	lsls	r3, r1, #2
 8005e68:	4641      	mov	r1, r8
 8005e6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e6e:	4641      	mov	r1, r8
 8005e70:	008a      	lsls	r2, r1, #2
 8005e72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e76:	f7fa ff3f 	bl	8000cf8 <__aeabi_uldivmod>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005eb4 <UART_SetConfig+0x4e4>)
 8005e80:	fba3 1302 	umull	r1, r3, r3, r2
 8005e84:	095b      	lsrs	r3, r3, #5
 8005e86:	2164      	movs	r1, #100	@ 0x64
 8005e88:	fb01 f303 	mul.w	r3, r1, r3
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	3332      	adds	r3, #50	@ 0x32
 8005e92:	4a08      	ldr	r2, [pc, #32]	@ (8005eb4 <UART_SetConfig+0x4e4>)
 8005e94:	fba2 2303 	umull	r2, r3, r2, r3
 8005e98:	095b      	lsrs	r3, r3, #5
 8005e9a:	f003 020f 	and.w	r2, r3, #15
 8005e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4422      	add	r2, r4
 8005ea6:	609a      	str	r2, [r3, #8]
}
 8005ea8:	bf00      	nop
 8005eaa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eb4:	51eb851f 	.word	0x51eb851f

08005eb8 <__NVIC_SetPriority>:
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	6039      	str	r1, [r7, #0]
 8005ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	db0a      	blt.n	8005ee2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	490c      	ldr	r1, [pc, #48]	@ (8005f04 <__NVIC_SetPriority+0x4c>)
 8005ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed6:	0112      	lsls	r2, r2, #4
 8005ed8:	b2d2      	uxtb	r2, r2
 8005eda:	440b      	add	r3, r1
 8005edc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005ee0:	e00a      	b.n	8005ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	4908      	ldr	r1, [pc, #32]	@ (8005f08 <__NVIC_SetPriority+0x50>)
 8005ee8:	79fb      	ldrb	r3, [r7, #7]
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	3b04      	subs	r3, #4
 8005ef0:	0112      	lsls	r2, r2, #4
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	761a      	strb	r2, [r3, #24]
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	e000e100 	.word	0xe000e100
 8005f08:	e000ed00 	.word	0xe000ed00

08005f0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005f10:	2100      	movs	r1, #0
 8005f12:	f06f 0004 	mvn.w	r0, #4
 8005f16:	f7ff ffcf 	bl	8005eb8 <__NVIC_SetPriority>
#endif
}
 8005f1a:	bf00      	nop
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f26:	f3ef 8305 	mrs	r3, IPSR
 8005f2a:	603b      	str	r3, [r7, #0]
  return(result);
 8005f2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005f32:	f06f 0305 	mvn.w	r3, #5
 8005f36:	607b      	str	r3, [r7, #4]
 8005f38:	e00c      	b.n	8005f54 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f64 <osKernelInitialize+0x44>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d105      	bne.n	8005f4e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f42:	4b08      	ldr	r3, [pc, #32]	@ (8005f64 <osKernelInitialize+0x44>)
 8005f44:	2201      	movs	r2, #1
 8005f46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	607b      	str	r3, [r7, #4]
 8005f4c:	e002      	b.n	8005f54 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f54:	687b      	ldr	r3, [r7, #4]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	2000052c 	.word	0x2000052c

08005f68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f6e:	f3ef 8305 	mrs	r3, IPSR
 8005f72:	603b      	str	r3, [r7, #0]
  return(result);
 8005f74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005f7a:	f06f 0305 	mvn.w	r3, #5
 8005f7e:	607b      	str	r3, [r7, #4]
 8005f80:	e010      	b.n	8005fa4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f82:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb0 <osKernelStart+0x48>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d109      	bne.n	8005f9e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f8a:	f7ff ffbf 	bl	8005f0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f8e:	4b08      	ldr	r3, [pc, #32]	@ (8005fb0 <osKernelStart+0x48>)
 8005f90:	2202      	movs	r2, #2
 8005f92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f94:	f001 fb9c 	bl	80076d0 <vTaskStartScheduler>
      stat = osOK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	607b      	str	r3, [r7, #4]
 8005f9c:	e002      	b.n	8005fa4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005fa4:	687b      	ldr	r3, [r7, #4]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	2000052c 	.word	0x2000052c

08005fb4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fba:	f3ef 8305 	mrs	r3, IPSR
 8005fbe:	603b      	str	r3, [r7, #0]
  return(result);
 8005fc0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005fc6:	f001 fca7 	bl	8007918 <xTaskGetTickCountFromISR>
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	e002      	b.n	8005fd4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005fce:	f001 fc93 	bl	80078f8 <xTaskGetTickCount>
 8005fd2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005fd4:	687b      	ldr	r3, [r7, #4]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b08e      	sub	sp, #56	@ 0x38
 8005fe2:	af04      	add	r7, sp, #16
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fee:	f3ef 8305 	mrs	r3, IPSR
 8005ff2:	617b      	str	r3, [r7, #20]
  return(result);
 8005ff4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d17e      	bne.n	80060f8 <osThreadNew+0x11a>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d07b      	beq.n	80060f8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006000:	2380      	movs	r3, #128	@ 0x80
 8006002:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006004:	2318      	movs	r3, #24
 8006006:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006008:	2300      	movs	r3, #0
 800600a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800600c:	f04f 33ff 	mov.w	r3, #4294967295
 8006010:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d045      	beq.n	80060a4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <osThreadNew+0x48>
        name = attr->name;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d008      	beq.n	800604c <osThreadNew+0x6e>
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	2b38      	cmp	r3, #56	@ 0x38
 800603e:	d805      	bhi.n	800604c <osThreadNew+0x6e>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <osThreadNew+0x72>
        return (NULL);
 800604c:	2300      	movs	r3, #0
 800604e:	e054      	b.n	80060fa <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	089b      	lsrs	r3, r3, #2
 800605e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00e      	beq.n	8006086 <osThreadNew+0xa8>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	2b5b      	cmp	r3, #91	@ 0x5b
 800606e:	d90a      	bls.n	8006086 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006074:	2b00      	cmp	r3, #0
 8006076:	d006      	beq.n	8006086 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <osThreadNew+0xa8>
        mem = 1;
 8006080:	2301      	movs	r3, #1
 8006082:	61bb      	str	r3, [r7, #24]
 8006084:	e010      	b.n	80060a8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10c      	bne.n	80060a8 <osThreadNew+0xca>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d108      	bne.n	80060a8 <osThreadNew+0xca>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d104      	bne.n	80060a8 <osThreadNew+0xca>
          mem = 0;
 800609e:	2300      	movs	r3, #0
 80060a0:	61bb      	str	r3, [r7, #24]
 80060a2:	e001      	b.n	80060a8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d110      	bne.n	80060d0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060b6:	9202      	str	r2, [sp, #8]
 80060b8:	9301      	str	r3, [sp, #4]
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	6a3a      	ldr	r2, [r7, #32]
 80060c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f001 f809 	bl	80070dc <xTaskCreateStatic>
 80060ca:	4603      	mov	r3, r0
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	e013      	b.n	80060f8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d110      	bne.n	80060f8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	b29a      	uxth	r2, r3
 80060da:	f107 0310 	add.w	r3, r7, #16
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f001 f857 	bl	800719c <xTaskCreate>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d001      	beq.n	80060f8 <osThreadNew+0x11a>
            hTask = NULL;
 80060f4:	2300      	movs	r3, #0
 80060f6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80060f8:	693b      	ldr	r3, [r7, #16]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3728      	adds	r7, #40	@ 0x28
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800610a:	f3ef 8305 	mrs	r3, IPSR
 800610e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006110:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <osDelay+0x1c>
    stat = osErrorISR;
 8006116:	f06f 0305 	mvn.w	r3, #5
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	e007      	b.n	800612e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <osDelay+0x2c>
      vTaskDelay(ticks);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 f9fd 	bl	8007528 <vTaskDelay>
    }
  }

  return (stat);
 800612e:	68fb      	ldr	r3, [r7, #12]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006138:	b580      	push	{r7, lr}
 800613a:	b08a      	sub	sp, #40	@ 0x28
 800613c:	af02      	add	r7, sp, #8
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006148:	f3ef 8305 	mrs	r3, IPSR
 800614c:	613b      	str	r3, [r7, #16]
  return(result);
 800614e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006150:	2b00      	cmp	r3, #0
 8006152:	d15f      	bne.n	8006214 <osMessageQueueNew+0xdc>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d05c      	beq.n	8006214 <osMessageQueueNew+0xdc>
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d059      	beq.n	8006214 <osMessageQueueNew+0xdc>
    mem = -1;
 8006160:	f04f 33ff 	mov.w	r3, #4294967295
 8006164:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d029      	beq.n	80061c0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d012      	beq.n	800619a <osMessageQueueNew+0x62>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	2b4f      	cmp	r3, #79	@ 0x4f
 800617a:	d90e      	bls.n	800619a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00a      	beq.n	800619a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	695a      	ldr	r2, [r3, #20]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	68b9      	ldr	r1, [r7, #8]
 800618c:	fb01 f303 	mul.w	r3, r1, r3
 8006190:	429a      	cmp	r2, r3
 8006192:	d302      	bcc.n	800619a <osMessageQueueNew+0x62>
        mem = 1;
 8006194:	2301      	movs	r3, #1
 8006196:	61bb      	str	r3, [r7, #24]
 8006198:	e014      	b.n	80061c4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d110      	bne.n	80061c4 <osMessageQueueNew+0x8c>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10c      	bne.n	80061c4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d108      	bne.n	80061c4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d104      	bne.n	80061c4 <osMessageQueueNew+0x8c>
          mem = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	e001      	b.n	80061c4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d10b      	bne.n	80061e2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	2100      	movs	r1, #0
 80061d4:	9100      	str	r1, [sp, #0]
 80061d6:	68b9      	ldr	r1, [r7, #8]
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 fa31 	bl	8006640 <xQueueGenericCreateStatic>
 80061de:	61f8      	str	r0, [r7, #28]
 80061e0:	e008      	b.n	80061f4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d105      	bne.n	80061f4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80061e8:	2200      	movs	r2, #0
 80061ea:	68b9      	ldr	r1, [r7, #8]
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 faa4 	bl	800673a <xQueueGenericCreate>
 80061f2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00c      	beq.n	8006214 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	e001      	b.n	800620c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006208:	2300      	movs	r3, #0
 800620a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800620c:	6979      	ldr	r1, [r7, #20]
 800620e:	69f8      	ldr	r0, [r7, #28]
 8006210:	f000 ff06 	bl	8007020 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006214:	69fb      	ldr	r3, [r7, #28]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3720      	adds	r7, #32
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	603b      	str	r3, [r7, #0]
 800622c:	4613      	mov	r3, r2
 800622e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006234:	2300      	movs	r3, #0
 8006236:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006238:	f3ef 8305 	mrs	r3, IPSR
 800623c:	617b      	str	r3, [r7, #20]
  return(result);
 800623e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006240:	2b00      	cmp	r3, #0
 8006242:	d028      	beq.n	8006296 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d005      	beq.n	8006256 <osMessageQueuePut+0x36>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <osMessageQueuePut+0x36>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006256:	f06f 0303 	mvn.w	r3, #3
 800625a:	61fb      	str	r3, [r7, #28]
 800625c:	e038      	b.n	80062d0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800625e:	2300      	movs	r3, #0
 8006260:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006262:	f107 0210 	add.w	r2, r7, #16
 8006266:	2300      	movs	r3, #0
 8006268:	68b9      	ldr	r1, [r7, #8]
 800626a:	69b8      	ldr	r0, [r7, #24]
 800626c:	f000 fbc6 	bl	80069fc <xQueueGenericSendFromISR>
 8006270:	4603      	mov	r3, r0
 8006272:	2b01      	cmp	r3, #1
 8006274:	d003      	beq.n	800627e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006276:	f06f 0302 	mvn.w	r3, #2
 800627a:	61fb      	str	r3, [r7, #28]
 800627c:	e028      	b.n	80062d0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d025      	beq.n	80062d0 <osMessageQueuePut+0xb0>
 8006284:	4b15      	ldr	r3, [pc, #84]	@ (80062dc <osMessageQueuePut+0xbc>)
 8006286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	e01c      	b.n	80062d0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <osMessageQueuePut+0x82>
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d103      	bne.n	80062aa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80062a2:	f06f 0303 	mvn.w	r3, #3
 80062a6:	61fb      	str	r3, [r7, #28]
 80062a8:	e012      	b.n	80062d0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80062aa:	2300      	movs	r3, #0
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	68b9      	ldr	r1, [r7, #8]
 80062b0:	69b8      	ldr	r0, [r7, #24]
 80062b2:	f000 faa1 	bl	80067f8 <xQueueGenericSend>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d009      	beq.n	80062d0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80062c2:	f06f 0301 	mvn.w	r3, #1
 80062c6:	61fb      	str	r3, [r7, #28]
 80062c8:	e002      	b.n	80062d0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80062ca:	f06f 0302 	mvn.w	r3, #2
 80062ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80062d0:	69fb      	ldr	r3, [r7, #28]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3720      	adds	r7, #32
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	e000ed04 	.word	0xe000ed04

080062e0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062f6:	f3ef 8305 	mrs	r3, IPSR
 80062fa:	617b      	str	r3, [r7, #20]
  return(result);
 80062fc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d028      	beq.n	8006354 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <osMessageQueueGet+0x34>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <osMessageQueueGet+0x34>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006314:	f06f 0303 	mvn.w	r3, #3
 8006318:	61fb      	str	r3, [r7, #28]
 800631a:	e037      	b.n	800638c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800631c:	2300      	movs	r3, #0
 800631e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006320:	f107 0310 	add.w	r3, r7, #16
 8006324:	461a      	mov	r2, r3
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	69b8      	ldr	r0, [r7, #24]
 800632a:	f000 fce7 	bl	8006cfc <xQueueReceiveFromISR>
 800632e:	4603      	mov	r3, r0
 8006330:	2b01      	cmp	r3, #1
 8006332:	d003      	beq.n	800633c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006334:	f06f 0302 	mvn.w	r3, #2
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	e027      	b.n	800638c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d024      	beq.n	800638c <osMessageQueueGet+0xac>
 8006342:	4b15      	ldr	r3, [pc, #84]	@ (8006398 <osMessageQueueGet+0xb8>)
 8006344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	e01b      	b.n	800638c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <osMessageQueueGet+0x80>
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d103      	bne.n	8006368 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006360:	f06f 0303 	mvn.w	r3, #3
 8006364:	61fb      	str	r3, [r7, #28]
 8006366:	e011      	b.n	800638c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	69b8      	ldr	r0, [r7, #24]
 800636e:	f000 fbe3 	bl	8006b38 <xQueueReceive>
 8006372:	4603      	mov	r3, r0
 8006374:	2b01      	cmp	r3, #1
 8006376:	d009      	beq.n	800638c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800637e:	f06f 0301 	mvn.w	r3, #1
 8006382:	61fb      	str	r3, [r7, #28]
 8006384:	e002      	b.n	800638c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006386:	f06f 0302 	mvn.w	r3, #2
 800638a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800638c:	69fb      	ldr	r3, [r7, #28]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3720      	adds	r7, #32
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4a07      	ldr	r2, [pc, #28]	@ (80063c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80063ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	4a06      	ldr	r2, [pc, #24]	@ (80063cc <vApplicationGetIdleTaskMemory+0x30>)
 80063b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2280      	movs	r2, #128	@ 0x80
 80063b8:	601a      	str	r2, [r3, #0]
}
 80063ba:	bf00      	nop
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	20000530 	.word	0x20000530
 80063cc:	2000058c 	.word	0x2000058c

080063d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4a07      	ldr	r2, [pc, #28]	@ (80063fc <vApplicationGetTimerTaskMemory+0x2c>)
 80063e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	4a06      	ldr	r2, [pc, #24]	@ (8006400 <vApplicationGetTimerTaskMemory+0x30>)
 80063e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80063ee:	601a      	str	r2, [r3, #0]
}
 80063f0:	bf00      	nop
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	2000078c 	.word	0x2000078c
 8006400:	200007e8 	.word	0x200007e8

08006404 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f103 0208 	add.w	r2, r3, #8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f04f 32ff 	mov.w	r2, #4294967295
 800641c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f103 0208 	add.w	r2, r3, #8
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f103 0208 	add.w	r2, r3, #8
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800645e:	b480      	push	{r7}
 8006460:	b085      	sub	sp, #20
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	601a      	str	r2, [r3, #0]
}
 800649a:	bf00      	nop
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064a6:	b480      	push	{r7}
 80064a8:	b085      	sub	sp, #20
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064bc:	d103      	bne.n	80064c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	e00c      	b.n	80064e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3308      	adds	r3, #8
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	e002      	b.n	80064d4 <vListInsert+0x2e>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d2f6      	bcs.n	80064ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	601a      	str	r2, [r3, #0]
}
 800650c:	bf00      	nop
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6892      	ldr	r2, [r2, #8]
 800652e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6852      	ldr	r2, [r2, #4]
 8006538:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	429a      	cmp	r2, r3
 8006542:	d103      	bne.n	800654c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	1e5a      	subs	r2, r3, #1
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10b      	bne.n	8006598 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006592:	bf00      	nop
 8006594:	bf00      	nop
 8006596:	e7fd      	b.n	8006594 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006598:	f002 fa9e 	bl	8008ad8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a4:	68f9      	ldr	r1, [r7, #12]
 80065a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80065a8:	fb01 f303 	mul.w	r3, r1, r3
 80065ac:	441a      	add	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c8:	3b01      	subs	r3, #1
 80065ca:	68f9      	ldr	r1, [r7, #12]
 80065cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80065ce:	fb01 f303 	mul.w	r3, r1, r3
 80065d2:	441a      	add	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	22ff      	movs	r2, #255	@ 0xff
 80065dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	22ff      	movs	r2, #255	@ 0xff
 80065e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d114      	bne.n	8006618 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d01a      	beq.n	800662c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3310      	adds	r3, #16
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 fb08 	bl	8007c10 <xTaskRemoveFromEventList>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d012      	beq.n	800662c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006606:	4b0d      	ldr	r3, [pc, #52]	@ (800663c <xQueueGenericReset+0xd0>)
 8006608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	e009      	b.n	800662c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3310      	adds	r3, #16
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fef1 	bl	8006404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3324      	adds	r3, #36	@ 0x24
 8006626:	4618      	mov	r0, r3
 8006628:	f7ff feec 	bl	8006404 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800662c:	f002 fa86 	bl	8008b3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006630:	2301      	movs	r3, #1
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	e000ed04 	.word	0xe000ed04

08006640 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08e      	sub	sp, #56	@ 0x38
 8006644:	af02      	add	r7, sp, #8
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
 800664c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10b      	bne.n	800666c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006666:	bf00      	nop
 8006668:	bf00      	nop
 800666a:	e7fd      	b.n	8006668 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10b      	bne.n	800668a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop
 8006688:	e7fd      	b.n	8006686 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <xQueueGenericCreateStatic+0x56>
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <xQueueGenericCreateStatic+0x5a>
 8006696:	2301      	movs	r3, #1
 8006698:	e000      	b.n	800669c <xQueueGenericCreateStatic+0x5c>
 800669a:	2300      	movs	r3, #0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10b      	bne.n	80066b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	623b      	str	r3, [r7, #32]
}
 80066b2:	bf00      	nop
 80066b4:	bf00      	nop
 80066b6:	e7fd      	b.n	80066b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d102      	bne.n	80066c4 <xQueueGenericCreateStatic+0x84>
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <xQueueGenericCreateStatic+0x88>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <xQueueGenericCreateStatic+0x8a>
 80066c8:	2300      	movs	r3, #0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10b      	bne.n	80066e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	61fb      	str	r3, [r7, #28]
}
 80066e0:	bf00      	nop
 80066e2:	bf00      	nop
 80066e4:	e7fd      	b.n	80066e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80066e6:	2350      	movs	r3, #80	@ 0x50
 80066e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	2b50      	cmp	r3, #80	@ 0x50
 80066ee:	d00b      	beq.n	8006708 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	61bb      	str	r3, [r7, #24]
}
 8006702:	bf00      	nop
 8006704:	bf00      	nop
 8006706:	e7fd      	b.n	8006704 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006708:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800670e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00d      	beq.n	8006730 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800671c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	4613      	mov	r3, r2
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	68b9      	ldr	r1, [r7, #8]
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 f840 	bl	80067b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006732:	4618      	mov	r0, r3
 8006734:	3730      	adds	r7, #48	@ 0x30
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800673a:	b580      	push	{r7, lr}
 800673c:	b08a      	sub	sp, #40	@ 0x28
 800673e:	af02      	add	r7, sp, #8
 8006740:	60f8      	str	r0, [r7, #12]
 8006742:	60b9      	str	r1, [r7, #8]
 8006744:	4613      	mov	r3, r2
 8006746:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10b      	bne.n	8006766 <xQueueGenericCreate+0x2c>
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	613b      	str	r3, [r7, #16]
}
 8006760:	bf00      	nop
 8006762:	bf00      	nop
 8006764:	e7fd      	b.n	8006762 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	fb02 f303 	mul.w	r3, r2, r3
 800676e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	3350      	adds	r3, #80	@ 0x50
 8006774:	4618      	mov	r0, r3
 8006776:	f002 fad1 	bl	8008d1c <pvPortMalloc>
 800677a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d011      	beq.n	80067a6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	3350      	adds	r3, #80	@ 0x50
 800678a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006794:	79fa      	ldrb	r2, [r7, #7]
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	4613      	mov	r3, r2
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f805 	bl	80067b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067a6:	69bb      	ldr	r3, [r7, #24]
	}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3720      	adds	r7, #32
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d103      	bne.n	80067cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	e002      	b.n	80067d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067de:	2101      	movs	r1, #1
 80067e0:	69b8      	ldr	r0, [r7, #24]
 80067e2:	f7ff fec3 	bl	800656c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	78fa      	ldrb	r2, [r7, #3]
 80067ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067ee:	bf00      	nop
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08e      	sub	sp, #56	@ 0x38
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006806:	2300      	movs	r3, #0
 8006808:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800680e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10b      	bne.n	800682c <xQueueGenericSend+0x34>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006826:	bf00      	nop
 8006828:	bf00      	nop
 800682a:	e7fd      	b.n	8006828 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d103      	bne.n	800683a <xQueueGenericSend+0x42>
 8006832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <xQueueGenericSend+0x46>
 800683a:	2301      	movs	r3, #1
 800683c:	e000      	b.n	8006840 <xQueueGenericSend+0x48>
 800683e:	2300      	movs	r3, #0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10b      	bne.n	800685c <xQueueGenericSend+0x64>
	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006856:	bf00      	nop
 8006858:	bf00      	nop
 800685a:	e7fd      	b.n	8006858 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b02      	cmp	r3, #2
 8006860:	d103      	bne.n	800686a <xQueueGenericSend+0x72>
 8006862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006866:	2b01      	cmp	r3, #1
 8006868:	d101      	bne.n	800686e <xQueueGenericSend+0x76>
 800686a:	2301      	movs	r3, #1
 800686c:	e000      	b.n	8006870 <xQueueGenericSend+0x78>
 800686e:	2300      	movs	r3, #0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10b      	bne.n	800688c <xQueueGenericSend+0x94>
	__asm volatile
 8006874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	623b      	str	r3, [r7, #32]
}
 8006886:	bf00      	nop
 8006888:	bf00      	nop
 800688a:	e7fd      	b.n	8006888 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800688c:	f001 fbb8 	bl	8008000 <xTaskGetSchedulerState>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d102      	bne.n	800689c <xQueueGenericSend+0xa4>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <xQueueGenericSend+0xa8>
 800689c:	2301      	movs	r3, #1
 800689e:	e000      	b.n	80068a2 <xQueueGenericSend+0xaa>
 80068a0:	2300      	movs	r3, #0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10b      	bne.n	80068be <xQueueGenericSend+0xc6>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	61fb      	str	r3, [r7, #28]
}
 80068b8:	bf00      	nop
 80068ba:	bf00      	nop
 80068bc:	e7fd      	b.n	80068ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068be:	f002 f90b 	bl	8008ad8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d302      	bcc.n	80068d4 <xQueueGenericSend+0xdc>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d129      	bne.n	8006928 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068da:	f000 fa91 	bl	8006e00 <prvCopyDataToQueue>
 80068de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d010      	beq.n	800690a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ea:	3324      	adds	r3, #36	@ 0x24
 80068ec:	4618      	mov	r0, r3
 80068ee:	f001 f98f 	bl	8007c10 <xTaskRemoveFromEventList>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d013      	beq.n	8006920 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80068f8:	4b3f      	ldr	r3, [pc, #252]	@ (80069f8 <xQueueGenericSend+0x200>)
 80068fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	e00a      	b.n	8006920 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800690a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690c:	2b00      	cmp	r3, #0
 800690e:	d007      	beq.n	8006920 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006910:	4b39      	ldr	r3, [pc, #228]	@ (80069f8 <xQueueGenericSend+0x200>)
 8006912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006920:	f002 f90c 	bl	8008b3c <vPortExitCritical>
				return pdPASS;
 8006924:	2301      	movs	r3, #1
 8006926:	e063      	b.n	80069f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d103      	bne.n	8006936 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800692e:	f002 f905 	bl	8008b3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006932:	2300      	movs	r3, #0
 8006934:	e05c      	b.n	80069f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006938:	2b00      	cmp	r3, #0
 800693a:	d106      	bne.n	800694a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800693c:	f107 0314 	add.w	r3, r7, #20
 8006940:	4618      	mov	r0, r3
 8006942:	f001 f9c9 	bl	8007cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006946:	2301      	movs	r3, #1
 8006948:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800694a:	f002 f8f7 	bl	8008b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800694e:	f000 ff27 	bl	80077a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006952:	f002 f8c1 	bl	8008ad8 <vPortEnterCritical>
 8006956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006958:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800695c:	b25b      	sxtb	r3, r3
 800695e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006962:	d103      	bne.n	800696c <xQueueGenericSend+0x174>
 8006964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800696c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006972:	b25b      	sxtb	r3, r3
 8006974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006978:	d103      	bne.n	8006982 <xQueueGenericSend+0x18a>
 800697a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006982:	f002 f8db 	bl	8008b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006986:	1d3a      	adds	r2, r7, #4
 8006988:	f107 0314 	add.w	r3, r7, #20
 800698c:	4611      	mov	r1, r2
 800698e:	4618      	mov	r0, r3
 8006990:	f001 f9b8 	bl	8007d04 <xTaskCheckForTimeOut>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d124      	bne.n	80069e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800699a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800699c:	f000 fb28 	bl	8006ff0 <prvIsQueueFull>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d018      	beq.n	80069d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80069a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a8:	3310      	adds	r3, #16
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	4611      	mov	r1, r2
 80069ae:	4618      	mov	r0, r3
 80069b0:	f001 f8dc 	bl	8007b6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069b6:	f000 fab3 	bl	8006f20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069ba:	f000 feff 	bl	80077bc <xTaskResumeAll>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f47f af7c 	bne.w	80068be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80069c6:	4b0c      	ldr	r3, [pc, #48]	@ (80069f8 <xQueueGenericSend+0x200>)
 80069c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	e772      	b.n	80068be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069da:	f000 faa1 	bl	8006f20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069de:	f000 feed 	bl	80077bc <xTaskResumeAll>
 80069e2:	e76c      	b.n	80068be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069e6:	f000 fa9b 	bl	8006f20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069ea:	f000 fee7 	bl	80077bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80069ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3738      	adds	r7, #56	@ 0x38
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b090      	sub	sp, #64	@ 0x40
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10b      	bne.n	8006a2c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a26:	bf00      	nop
 8006a28:	bf00      	nop
 8006a2a:	e7fd      	b.n	8006a28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d103      	bne.n	8006a3a <xQueueGenericSendFromISR+0x3e>
 8006a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <xQueueGenericSendFromISR+0x42>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e000      	b.n	8006a40 <xQueueGenericSendFromISR+0x44>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10b      	bne.n	8006a5c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a48:	f383 8811 	msr	BASEPRI, r3
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a56:	bf00      	nop
 8006a58:	bf00      	nop
 8006a5a:	e7fd      	b.n	8006a58 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d103      	bne.n	8006a6a <xQueueGenericSendFromISR+0x6e>
 8006a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d101      	bne.n	8006a6e <xQueueGenericSendFromISR+0x72>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e000      	b.n	8006a70 <xQueueGenericSendFromISR+0x74>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10b      	bne.n	8006a8c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	623b      	str	r3, [r7, #32]
}
 8006a86:	bf00      	nop
 8006a88:	bf00      	nop
 8006a8a:	e7fd      	b.n	8006a88 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a8c:	f002 f904 	bl	8008c98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a90:	f3ef 8211 	mrs	r2, BASEPRI
 8006a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	61fa      	str	r2, [r7, #28]
 8006aa6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006aaa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d302      	bcc.n	8006abe <xQueueGenericSendFromISR+0xc2>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d12f      	bne.n	8006b1e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ac4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006ad4:	f000 f994 	bl	8006e00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ad8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae0:	d112      	bne.n	8006b08 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d016      	beq.n	8006b18 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aec:	3324      	adds	r3, #36	@ 0x24
 8006aee:	4618      	mov	r0, r3
 8006af0:	f001 f88e 	bl	8007c10 <xTaskRemoveFromEventList>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00e      	beq.n	8006b18 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00b      	beq.n	8006b18 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	e007      	b.n	8006b18 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	b25a      	sxtb	r2, r3
 8006b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006b1c:	e001      	b.n	8006b22 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b24:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3740      	adds	r7, #64	@ 0x40
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b08c      	sub	sp, #48	@ 0x30
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b44:	2300      	movs	r3, #0
 8006b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10b      	bne.n	8006b6a <xQueueReceive+0x32>
	__asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	623b      	str	r3, [r7, #32]
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop
 8006b68:	e7fd      	b.n	8006b66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d103      	bne.n	8006b78 <xQueueReceive+0x40>
 8006b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <xQueueReceive+0x44>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e000      	b.n	8006b7e <xQueueReceive+0x46>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10b      	bne.n	8006b9a <xQueueReceive+0x62>
	__asm volatile
 8006b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	61fb      	str	r3, [r7, #28]
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop
 8006b98:	e7fd      	b.n	8006b96 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b9a:	f001 fa31 	bl	8008000 <xTaskGetSchedulerState>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d102      	bne.n	8006baa <xQueueReceive+0x72>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <xQueueReceive+0x76>
 8006baa:	2301      	movs	r3, #1
 8006bac:	e000      	b.n	8006bb0 <xQueueReceive+0x78>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10b      	bne.n	8006bcc <xQueueReceive+0x94>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	61bb      	str	r3, [r7, #24]
}
 8006bc6:	bf00      	nop
 8006bc8:	bf00      	nop
 8006bca:	e7fd      	b.n	8006bc8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bcc:	f001 ff84 	bl	8008ad8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d01f      	beq.n	8006c1c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bdc:	68b9      	ldr	r1, [r7, #8]
 8006bde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006be0:	f000 f978 	bl	8006ed4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be6:	1e5a      	subs	r2, r3, #1
 8006be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00f      	beq.n	8006c14 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf6:	3310      	adds	r3, #16
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f001 f809 	bl	8007c10 <xTaskRemoveFromEventList>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d007      	beq.n	8006c14 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c04:	4b3c      	ldr	r3, [pc, #240]	@ (8006cf8 <xQueueReceive+0x1c0>)
 8006c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c14:	f001 ff92 	bl	8008b3c <vPortExitCritical>
				return pdPASS;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e069      	b.n	8006cf0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d103      	bne.n	8006c2a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c22:	f001 ff8b 	bl	8008b3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c26:	2300      	movs	r3, #0
 8006c28:	e062      	b.n	8006cf0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d106      	bne.n	8006c3e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c30:	f107 0310 	add.w	r3, r7, #16
 8006c34:	4618      	mov	r0, r3
 8006c36:	f001 f84f 	bl	8007cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c3e:	f001 ff7d 	bl	8008b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c42:	f000 fdad 	bl	80077a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c46:	f001 ff47 	bl	8008ad8 <vPortEnterCritical>
 8006c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c50:	b25b      	sxtb	r3, r3
 8006c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c56:	d103      	bne.n	8006c60 <xQueueReceive+0x128>
 8006c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c66:	b25b      	sxtb	r3, r3
 8006c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6c:	d103      	bne.n	8006c76 <xQueueReceive+0x13e>
 8006c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c76:	f001 ff61 	bl	8008b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c7a:	1d3a      	adds	r2, r7, #4
 8006c7c:	f107 0310 	add.w	r3, r7, #16
 8006c80:	4611      	mov	r1, r2
 8006c82:	4618      	mov	r0, r3
 8006c84:	f001 f83e 	bl	8007d04 <xTaskCheckForTimeOut>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d123      	bne.n	8006cd6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c90:	f000 f998 	bl	8006fc4 <prvIsQueueEmpty>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d017      	beq.n	8006cca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9c:	3324      	adds	r3, #36	@ 0x24
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 ff62 	bl	8007b6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ca8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006caa:	f000 f939 	bl	8006f20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cae:	f000 fd85 	bl	80077bc <xTaskResumeAll>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d189      	bne.n	8006bcc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8006cf8 <xQueueReceive+0x1c0>)
 8006cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	e780      	b.n	8006bcc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ccc:	f000 f928 	bl	8006f20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cd0:	f000 fd74 	bl	80077bc <xTaskResumeAll>
 8006cd4:	e77a      	b.n	8006bcc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cd8:	f000 f922 	bl	8006f20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cdc:	f000 fd6e 	bl	80077bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ce0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ce2:	f000 f96f 	bl	8006fc4 <prvIsQueueEmpty>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f43f af6f 	beq.w	8006bcc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006cee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3730      	adds	r7, #48	@ 0x30
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	e000ed04 	.word	0xe000ed04

08006cfc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08e      	sub	sp, #56	@ 0x38
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10b      	bne.n	8006d2a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	623b      	str	r3, [r7, #32]
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	e7fd      	b.n	8006d26 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d103      	bne.n	8006d38 <xQueueReceiveFromISR+0x3c>
 8006d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <xQueueReceiveFromISR+0x40>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <xQueueReceiveFromISR+0x42>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10b      	bne.n	8006d5a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	61fb      	str	r3, [r7, #28]
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop
 8006d58:	e7fd      	b.n	8006d56 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d5a:	f001 ff9d 	bl	8008c98 <vPortValidateInterruptPriority>
	__asm volatile
 8006d5e:	f3ef 8211 	mrs	r2, BASEPRI
 8006d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	61ba      	str	r2, [r7, #24]
 8006d74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006d76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d7e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d02f      	beq.n	8006de6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d90:	68b9      	ldr	r1, [r7, #8]
 8006d92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d94:	f000 f89e 	bl	8006ed4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9a:	1e5a      	subs	r2, r3, #1
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006da0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da8:	d112      	bne.n	8006dd0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d016      	beq.n	8006de0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db4:	3310      	adds	r3, #16
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 ff2a 	bl	8007c10 <xTaskRemoveFromEventList>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00e      	beq.n	8006de0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	e007      	b.n	8006de0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	b25a      	sxtb	r2, r3
 8006dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ddc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006de0:	2301      	movs	r3, #1
 8006de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de4:	e001      	b.n	8006dea <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dec:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	f383 8811 	msr	BASEPRI, r3
}
 8006df4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3738      	adds	r7, #56	@ 0x38
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10d      	bne.n	8006e3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d14d      	bne.n	8006ec2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f001 f906 	bl	800803c <xTaskPriorityDisinherit>
 8006e30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	609a      	str	r2, [r3, #8]
 8006e38:	e043      	b.n	8006ec2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d119      	bne.n	8006e74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6858      	ldr	r0, [r3, #4]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e48:	461a      	mov	r2, r3
 8006e4a:	68b9      	ldr	r1, [r7, #8]
 8006e4c:	f004 fe4d 	bl	800baea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e58:	441a      	add	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d32b      	bcc.n	8006ec2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	605a      	str	r2, [r3, #4]
 8006e72:	e026      	b.n	8006ec2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	68d8      	ldr	r0, [r3, #12]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	68b9      	ldr	r1, [r7, #8]
 8006e80:	f004 fe33 	bl	800baea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8c:	425b      	negs	r3, r3
 8006e8e:	441a      	add	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d207      	bcs.n	8006eb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea8:	425b      	negs	r3, r3
 8006eaa:	441a      	add	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d105      	bne.n	8006ec2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006eca:	697b      	ldr	r3, [r7, #20]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3718      	adds	r7, #24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d018      	beq.n	8006f18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eee:	441a      	add	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68da      	ldr	r2, [r3, #12]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d303      	bcc.n	8006f08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68d9      	ldr	r1, [r3, #12]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f10:	461a      	mov	r2, r3
 8006f12:	6838      	ldr	r0, [r7, #0]
 8006f14:	f004 fde9 	bl	800baea <memcpy>
	}
}
 8006f18:	bf00      	nop
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f28:	f001 fdd6 	bl	8008ad8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f34:	e011      	b.n	8006f5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d012      	beq.n	8006f64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3324      	adds	r3, #36	@ 0x24
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 fe64 	bl	8007c10 <xTaskRemoveFromEventList>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f4e:	f000 ff3d 	bl	8007dcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	dce9      	bgt.n	8006f36 <prvUnlockQueue+0x16>
 8006f62:	e000      	b.n	8006f66 <prvUnlockQueue+0x46>
					break;
 8006f64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	22ff      	movs	r2, #255	@ 0xff
 8006f6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006f6e:	f001 fde5 	bl	8008b3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f72:	f001 fdb1 	bl	8008ad8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f7e:	e011      	b.n	8006fa4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d012      	beq.n	8006fae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3310      	adds	r3, #16
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fe3f 	bl	8007c10 <xTaskRemoveFromEventList>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f98:	f000 ff18 	bl	8007dcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	dce9      	bgt.n	8006f80 <prvUnlockQueue+0x60>
 8006fac:	e000      	b.n	8006fb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006fae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	22ff      	movs	r2, #255	@ 0xff
 8006fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006fb8:	f001 fdc0 	bl	8008b3c <vPortExitCritical>
}
 8006fbc:	bf00      	nop
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fcc:	f001 fd84 	bl	8008ad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d102      	bne.n	8006fde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	e001      	b.n	8006fe2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fe2:	f001 fdab 	bl	8008b3c <vPortExitCritical>

	return xReturn;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ff8:	f001 fd6e 	bl	8008ad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007004:	429a      	cmp	r2, r3
 8007006:	d102      	bne.n	800700e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007008:	2301      	movs	r3, #1
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	e001      	b.n	8007012 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007012:	f001 fd93 	bl	8008b3c <vPortExitCritical>

	return xReturn;
 8007016:	68fb      	ldr	r3, [r7, #12]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800702a:	2300      	movs	r3, #0
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	e014      	b.n	800705a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007030:	4a0f      	ldr	r2, [pc, #60]	@ (8007070 <vQueueAddToRegistry+0x50>)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10b      	bne.n	8007054 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800703c:	490c      	ldr	r1, [pc, #48]	@ (8007070 <vQueueAddToRegistry+0x50>)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007046:	4a0a      	ldr	r2, [pc, #40]	@ (8007070 <vQueueAddToRegistry+0x50>)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	4413      	add	r3, r2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007052:	e006      	b.n	8007062 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	3301      	adds	r3, #1
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b07      	cmp	r3, #7
 800705e:	d9e7      	bls.n	8007030 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007060:	bf00      	nop
 8007062:	bf00      	nop
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	20000be8 	.word	0x20000be8

08007074 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007084:	f001 fd28 	bl	8008ad8 <vPortEnterCritical>
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800708e:	b25b      	sxtb	r3, r3
 8007090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007094:	d103      	bne.n	800709e <vQueueWaitForMessageRestricted+0x2a>
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070a4:	b25b      	sxtb	r3, r3
 80070a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070aa:	d103      	bne.n	80070b4 <vQueueWaitForMessageRestricted+0x40>
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070b4:	f001 fd42 	bl	8008b3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d106      	bne.n	80070ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	3324      	adds	r3, #36	@ 0x24
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	68b9      	ldr	r1, [r7, #8]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 fd75 	bl	8007bb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80070ce:	6978      	ldr	r0, [r7, #20]
 80070d0:	f7ff ff26 	bl	8006f20 <prvUnlockQueue>
	}
 80070d4:	bf00      	nop
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08e      	sub	sp, #56	@ 0x38
 80070e0:	af04      	add	r7, sp, #16
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10b      	bne.n	8007108 <xTaskCreateStatic+0x2c>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	623b      	str	r3, [r7, #32]
}
 8007102:	bf00      	nop
 8007104:	bf00      	nop
 8007106:	e7fd      	b.n	8007104 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10b      	bne.n	8007126 <xTaskCreateStatic+0x4a>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	61fb      	str	r3, [r7, #28]
}
 8007120:	bf00      	nop
 8007122:	bf00      	nop
 8007124:	e7fd      	b.n	8007122 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007126:	235c      	movs	r3, #92	@ 0x5c
 8007128:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	2b5c      	cmp	r3, #92	@ 0x5c
 800712e:	d00b      	beq.n	8007148 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	61bb      	str	r3, [r7, #24]
}
 8007142:	bf00      	nop
 8007144:	bf00      	nop
 8007146:	e7fd      	b.n	8007144 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007148:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800714a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714c:	2b00      	cmp	r3, #0
 800714e:	d01e      	beq.n	800718e <xTaskCreateStatic+0xb2>
 8007150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007152:	2b00      	cmp	r3, #0
 8007154:	d01b      	beq.n	800718e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007158:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800715e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007162:	2202      	movs	r2, #2
 8007164:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007168:	2300      	movs	r3, #0
 800716a:	9303      	str	r3, [sp, #12]
 800716c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716e:	9302      	str	r3, [sp, #8]
 8007170:	f107 0314 	add.w	r3, r7, #20
 8007174:	9301      	str	r3, [sp, #4]
 8007176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	68b9      	ldr	r1, [r7, #8]
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f000 f850 	bl	8007226 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007186:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007188:	f000 f8de 	bl	8007348 <prvAddNewTaskToReadyList>
 800718c:	e001      	b.n	8007192 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800718e:	2300      	movs	r3, #0
 8007190:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007192:	697b      	ldr	r3, [r7, #20]
	}
 8007194:	4618      	mov	r0, r3
 8007196:	3728      	adds	r7, #40	@ 0x28
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800719c:	b580      	push	{r7, lr}
 800719e:	b08c      	sub	sp, #48	@ 0x30
 80071a0:	af04      	add	r7, sp, #16
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	603b      	str	r3, [r7, #0]
 80071a8:	4613      	mov	r3, r2
 80071aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071ac:	88fb      	ldrh	r3, [r7, #6]
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4618      	mov	r0, r3
 80071b2:	f001 fdb3 	bl	8008d1c <pvPortMalloc>
 80071b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00e      	beq.n	80071dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071be:	205c      	movs	r0, #92	@ 0x5c
 80071c0:	f001 fdac 	bl	8008d1c <pvPortMalloc>
 80071c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80071d2:	e005      	b.n	80071e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071d4:	6978      	ldr	r0, [r7, #20]
 80071d6:	f001 fe6f 	bl	8008eb8 <vPortFree>
 80071da:	e001      	b.n	80071e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071dc:	2300      	movs	r3, #0
 80071de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d017      	beq.n	8007216 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071ee:	88fa      	ldrh	r2, [r7, #6]
 80071f0:	2300      	movs	r3, #0
 80071f2:	9303      	str	r3, [sp, #12]
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	9302      	str	r3, [sp, #8]
 80071f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	68b9      	ldr	r1, [r7, #8]
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 f80e 	bl	8007226 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800720a:	69f8      	ldr	r0, [r7, #28]
 800720c:	f000 f89c 	bl	8007348 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007210:	2301      	movs	r3, #1
 8007212:	61bb      	str	r3, [r7, #24]
 8007214:	e002      	b.n	800721c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007216:	f04f 33ff 	mov.w	r3, #4294967295
 800721a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800721c:	69bb      	ldr	r3, [r7, #24]
	}
 800721e:	4618      	mov	r0, r3
 8007220:	3720      	adds	r7, #32
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b088      	sub	sp, #32
 800722a:	af00      	add	r7, sp, #0
 800722c:	60f8      	str	r0, [r7, #12]
 800722e:	60b9      	str	r1, [r7, #8]
 8007230:	607a      	str	r2, [r7, #4]
 8007232:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007236:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	461a      	mov	r2, r3
 800723e:	21a5      	movs	r1, #165	@ 0xa5
 8007240:	f004 fbe6 	bl	800ba10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007246:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800724e:	3b01      	subs	r3, #1
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	f023 0307 	bic.w	r3, r3, #7
 800725c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	f003 0307 	and.w	r3, r3, #7
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00b      	beq.n	8007280 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	617b      	str	r3, [r7, #20]
}
 800727a:	bf00      	nop
 800727c:	bf00      	nop
 800727e:	e7fd      	b.n	800727c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d01f      	beq.n	80072c6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007286:	2300      	movs	r3, #0
 8007288:	61fb      	str	r3, [r7, #28]
 800728a:	e012      	b.n	80072b2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	4413      	add	r3, r2
 8007292:	7819      	ldrb	r1, [r3, #0]
 8007294:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	4413      	add	r3, r2
 800729a:	3334      	adds	r3, #52	@ 0x34
 800729c:	460a      	mov	r2, r1
 800729e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	4413      	add	r3, r2
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d006      	beq.n	80072ba <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	3301      	adds	r3, #1
 80072b0:	61fb      	str	r3, [r7, #28]
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	2b0f      	cmp	r3, #15
 80072b6:	d9e9      	bls.n	800728c <prvInitialiseNewTask+0x66>
 80072b8:	e000      	b.n	80072bc <prvInitialiseNewTask+0x96>
			{
				break;
 80072ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072c4:	e003      	b.n	80072ce <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d0:	2b37      	cmp	r3, #55	@ 0x37
 80072d2:	d901      	bls.n	80072d8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072d4:	2337      	movs	r3, #55	@ 0x37
 80072d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072e2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80072e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e6:	2200      	movs	r2, #0
 80072e8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ec:	3304      	adds	r3, #4
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff f8a8 	bl	8006444 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f6:	3318      	adds	r3, #24
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff f8a3 	bl	8006444 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007302:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007306:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007312:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007316:	2200      	movs	r2, #0
 8007318:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800731a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	68f9      	ldr	r1, [r7, #12]
 8007326:	69b8      	ldr	r0, [r7, #24]
 8007328:	f001 faa6 	bl	8008878 <pxPortInitialiseStack>
 800732c:	4602      	mov	r2, r0
 800732e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007330:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800733c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800733e:	bf00      	nop
 8007340:	3720      	adds	r7, #32
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007350:	f001 fbc2 	bl	8008ad8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007354:	4b2d      	ldr	r3, [pc, #180]	@ (800740c <prvAddNewTaskToReadyList+0xc4>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3301      	adds	r3, #1
 800735a:	4a2c      	ldr	r2, [pc, #176]	@ (800740c <prvAddNewTaskToReadyList+0xc4>)
 800735c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800735e:	4b2c      	ldr	r3, [pc, #176]	@ (8007410 <prvAddNewTaskToReadyList+0xc8>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d109      	bne.n	800737a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007366:	4a2a      	ldr	r2, [pc, #168]	@ (8007410 <prvAddNewTaskToReadyList+0xc8>)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800736c:	4b27      	ldr	r3, [pc, #156]	@ (800740c <prvAddNewTaskToReadyList+0xc4>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d110      	bne.n	8007396 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007374:	f000 fd4e 	bl	8007e14 <prvInitialiseTaskLists>
 8007378:	e00d      	b.n	8007396 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800737a:	4b26      	ldr	r3, [pc, #152]	@ (8007414 <prvAddNewTaskToReadyList+0xcc>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d109      	bne.n	8007396 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007382:	4b23      	ldr	r3, [pc, #140]	@ (8007410 <prvAddNewTaskToReadyList+0xc8>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738c:	429a      	cmp	r2, r3
 800738e:	d802      	bhi.n	8007396 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007390:	4a1f      	ldr	r2, [pc, #124]	@ (8007410 <prvAddNewTaskToReadyList+0xc8>)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007396:	4b20      	ldr	r3, [pc, #128]	@ (8007418 <prvAddNewTaskToReadyList+0xd0>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3301      	adds	r3, #1
 800739c:	4a1e      	ldr	r2, [pc, #120]	@ (8007418 <prvAddNewTaskToReadyList+0xd0>)
 800739e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80073a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007418 <prvAddNewTaskToReadyList+0xd0>)
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ac:	4b1b      	ldr	r3, [pc, #108]	@ (800741c <prvAddNewTaskToReadyList+0xd4>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d903      	bls.n	80073bc <prvAddNewTaskToReadyList+0x74>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b8:	4a18      	ldr	r2, [pc, #96]	@ (800741c <prvAddNewTaskToReadyList+0xd4>)
 80073ba:	6013      	str	r3, [r2, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c0:	4613      	mov	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4a15      	ldr	r2, [pc, #84]	@ (8007420 <prvAddNewTaskToReadyList+0xd8>)
 80073ca:	441a      	add	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3304      	adds	r3, #4
 80073d0:	4619      	mov	r1, r3
 80073d2:	4610      	mov	r0, r2
 80073d4:	f7ff f843 	bl	800645e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073d8:	f001 fbb0 	bl	8008b3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007414 <prvAddNewTaskToReadyList+0xcc>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00e      	beq.n	8007402 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007410 <prvAddNewTaskToReadyList+0xc8>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d207      	bcs.n	8007402 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007424 <prvAddNewTaskToReadyList+0xdc>)
 80073f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	f3bf 8f4f 	dsb	sy
 80073fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007402:	bf00      	nop
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	200010fc 	.word	0x200010fc
 8007410:	20000c28 	.word	0x20000c28
 8007414:	20001108 	.word	0x20001108
 8007418:	20001118 	.word	0x20001118
 800741c:	20001104 	.word	0x20001104
 8007420:	20000c2c 	.word	0x20000c2c
 8007424:	e000ed04 	.word	0xe000ed04

08007428 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08a      	sub	sp, #40	@ 0x28
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007432:	2300      	movs	r3, #0
 8007434:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10b      	bne.n	8007454 <vTaskDelayUntil+0x2c>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	617b      	str	r3, [r7, #20]
}
 800744e:	bf00      	nop
 8007450:	bf00      	nop
 8007452:	e7fd      	b.n	8007450 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10b      	bne.n	8007472 <vTaskDelayUntil+0x4a>
	__asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	613b      	str	r3, [r7, #16]
}
 800746c:	bf00      	nop
 800746e:	bf00      	nop
 8007470:	e7fd      	b.n	800746e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8007472:	4b2a      	ldr	r3, [pc, #168]	@ (800751c <vTaskDelayUntil+0xf4>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00b      	beq.n	8007492 <vTaskDelayUntil+0x6a>
	__asm volatile
 800747a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	60fb      	str	r3, [r7, #12]
}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	e7fd      	b.n	800748e <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8007492:	f000 f985 	bl	80077a0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007496:	4b22      	ldr	r3, [pc, #136]	@ (8007520 <vTaskDelayUntil+0xf8>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	4413      	add	r3, r2
 80074a4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6a3a      	ldr	r2, [r7, #32]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d20b      	bcs.n	80074c8 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d211      	bcs.n	80074de <vTaskDelayUntil+0xb6>
 80074ba:	69fa      	ldr	r2, [r7, #28]
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d90d      	bls.n	80074de <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80074c2:	2301      	movs	r3, #1
 80074c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80074c6:	e00a      	b.n	80074de <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	69fa      	ldr	r2, [r7, #28]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d303      	bcc.n	80074da <vTaskDelayUntil+0xb2>
 80074d2:	69fa      	ldr	r2, [r7, #28]
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d901      	bls.n	80074de <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80074da:	2301      	movs	r3, #1
 80074dc:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	69fa      	ldr	r2, [r7, #28]
 80074e2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80074e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d006      	beq.n	80074f8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80074ea:	69fa      	ldr	r2, [r7, #28]
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	2100      	movs	r1, #0
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 fe12 	bl	800811c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80074f8:	f000 f960 	bl	80077bc <xTaskResumeAll>
 80074fc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d107      	bne.n	8007514 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007504:	4b07      	ldr	r3, [pc, #28]	@ (8007524 <vTaskDelayUntil+0xfc>)
 8007506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007514:	bf00      	nop
 8007516:	3728      	adds	r7, #40	@ 0x28
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20001124 	.word	0x20001124
 8007520:	20001100 	.word	0x20001100
 8007524:	e000ed04 	.word	0xe000ed04

08007528 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007530:	2300      	movs	r3, #0
 8007532:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d018      	beq.n	800756c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800753a:	4b14      	ldr	r3, [pc, #80]	@ (800758c <vTaskDelay+0x64>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00b      	beq.n	800755a <vTaskDelay+0x32>
	__asm volatile
 8007542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	60bb      	str	r3, [r7, #8]
}
 8007554:	bf00      	nop
 8007556:	bf00      	nop
 8007558:	e7fd      	b.n	8007556 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800755a:	f000 f921 	bl	80077a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800755e:	2100      	movs	r1, #0
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fddb 	bl	800811c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007566:	f000 f929 	bl	80077bc <xTaskResumeAll>
 800756a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d107      	bne.n	8007582 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007572:	4b07      	ldr	r3, [pc, #28]	@ (8007590 <vTaskDelay+0x68>)
 8007574:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007582:	bf00      	nop
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	20001124 	.word	0x20001124
 8007590:	e000ed04 	.word	0xe000ed04

08007594 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8007594:	b580      	push	{r7, lr}
 8007596:	b088      	sub	sp, #32
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800759e:	2300      	movs	r3, #0
 80075a0:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b37      	cmp	r3, #55	@ 0x37
 80075a6:	d90b      	bls.n	80075c0 <vTaskPrioritySet+0x2c>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	60fb      	str	r3, [r7, #12]
}
 80075ba:	bf00      	nop
 80075bc:	bf00      	nop
 80075be:	e7fd      	b.n	80075bc <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2b37      	cmp	r3, #55	@ 0x37
 80075c4:	d901      	bls.n	80075ca <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075c6:	2337      	movs	r3, #55	@ 0x37
 80075c8:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80075ca:	f001 fa85 	bl	8008ad8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d102      	bne.n	80075da <vTaskPrioritySet+0x46>
 80075d4:	4b3a      	ldr	r3, [pc, #232]	@ (80076c0 <vTaskPrioritySet+0x12c>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	e000      	b.n	80075dc <vTaskPrioritySet+0x48>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e2:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d063      	beq.n	80076b4 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d90d      	bls.n	8007610 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 80075f4:	4b32      	ldr	r3, [pc, #200]	@ (80076c0 <vTaskPrioritySet+0x12c>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d00f      	beq.n	800761e <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80075fe:	4b30      	ldr	r3, [pc, #192]	@ (80076c0 <vTaskPrioritySet+0x12c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	429a      	cmp	r2, r3
 8007608:	d309      	bcc.n	800761e <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800760a:	2301      	movs	r3, #1
 800760c:	61fb      	str	r3, [r7, #28]
 800760e:	e006      	b.n	800761e <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8007610:	4b2b      	ldr	r3, [pc, #172]	@ (80076c0 <vTaskPrioritySet+0x12c>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	429a      	cmp	r2, r3
 8007618:	d101      	bne.n	800761e <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800761a:	2301      	movs	r3, #1
 800761c:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007622:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762c:	429a      	cmp	r2, r3
 800762e:	d102      	bne.n	8007636 <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	2b00      	cmp	r3, #0
 8007642:	db04      	blt.n	800764e <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	6959      	ldr	r1, [r3, #20]
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	4613      	mov	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4a19      	ldr	r2, [pc, #100]	@ (80076c4 <vTaskPrioritySet+0x130>)
 800765e:	4413      	add	r3, r2
 8007660:	4299      	cmp	r1, r3
 8007662:	d11c      	bne.n	800769e <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	3304      	adds	r3, #4
 8007668:	4618      	mov	r0, r3
 800766a:	f7fe ff55 	bl	8006518 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007672:	4b15      	ldr	r3, [pc, #84]	@ (80076c8 <vTaskPrioritySet+0x134>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	429a      	cmp	r2, r3
 8007678:	d903      	bls.n	8007682 <vTaskPrioritySet+0xee>
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767e:	4a12      	ldr	r2, [pc, #72]	@ (80076c8 <vTaskPrioritySet+0x134>)
 8007680:	6013      	str	r3, [r2, #0]
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007686:	4613      	mov	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4a0d      	ldr	r2, [pc, #52]	@ (80076c4 <vTaskPrioritySet+0x130>)
 8007690:	441a      	add	r2, r3
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	3304      	adds	r3, #4
 8007696:	4619      	mov	r1, r3
 8007698:	4610      	mov	r0, r2
 800769a:	f7fe fee0 	bl	800645e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d007      	beq.n	80076b4 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 80076a4:	4b09      	ldr	r3, [pc, #36]	@ (80076cc <vTaskPrioritySet+0x138>)
 80076a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80076b4:	f001 fa42 	bl	8008b3c <vPortExitCritical>
	}
 80076b8:	bf00      	nop
 80076ba:	3720      	adds	r7, #32
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	20000c28 	.word	0x20000c28
 80076c4:	20000c2c 	.word	0x20000c2c
 80076c8:	20001104 	.word	0x20001104
 80076cc:	e000ed04 	.word	0xe000ed04

080076d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b08a      	sub	sp, #40	@ 0x28
 80076d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076da:	2300      	movs	r3, #0
 80076dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076de:	463a      	mov	r2, r7
 80076e0:	1d39      	adds	r1, r7, #4
 80076e2:	f107 0308 	add.w	r3, r7, #8
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe fe58 	bl	800639c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	9202      	str	r2, [sp, #8]
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	2300      	movs	r3, #0
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	2300      	movs	r3, #0
 80076fc:	460a      	mov	r2, r1
 80076fe:	4922      	ldr	r1, [pc, #136]	@ (8007788 <vTaskStartScheduler+0xb8>)
 8007700:	4822      	ldr	r0, [pc, #136]	@ (800778c <vTaskStartScheduler+0xbc>)
 8007702:	f7ff fceb 	bl	80070dc <xTaskCreateStatic>
 8007706:	4603      	mov	r3, r0
 8007708:	4a21      	ldr	r2, [pc, #132]	@ (8007790 <vTaskStartScheduler+0xc0>)
 800770a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800770c:	4b20      	ldr	r3, [pc, #128]	@ (8007790 <vTaskStartScheduler+0xc0>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007714:	2301      	movs	r3, #1
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	e001      	b.n	800771e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800771a:	2300      	movs	r3, #0
 800771c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d102      	bne.n	800772a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007724:	f000 fd4e 	bl	80081c4 <xTimerCreateTimerTask>
 8007728:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d116      	bne.n	800775e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	613b      	str	r3, [r7, #16]
}
 8007742:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007744:	4b13      	ldr	r3, [pc, #76]	@ (8007794 <vTaskStartScheduler+0xc4>)
 8007746:	f04f 32ff 	mov.w	r2, #4294967295
 800774a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800774c:	4b12      	ldr	r3, [pc, #72]	@ (8007798 <vTaskStartScheduler+0xc8>)
 800774e:	2201      	movs	r2, #1
 8007750:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007752:	4b12      	ldr	r3, [pc, #72]	@ (800779c <vTaskStartScheduler+0xcc>)
 8007754:	2200      	movs	r2, #0
 8007756:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007758:	f001 f91a 	bl	8008990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800775c:	e00f      	b.n	800777e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007764:	d10b      	bne.n	800777e <vTaskStartScheduler+0xae>
	__asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	60fb      	str	r3, [r7, #12]
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	e7fd      	b.n	800777a <vTaskStartScheduler+0xaa>
}
 800777e:	bf00      	nop
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	0800df84 	.word	0x0800df84
 800778c:	08007de5 	.word	0x08007de5
 8007790:	20001120 	.word	0x20001120
 8007794:	2000111c 	.word	0x2000111c
 8007798:	20001108 	.word	0x20001108
 800779c:	20001100 	.word	0x20001100

080077a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077a0:	b480      	push	{r7}
 80077a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80077a4:	4b04      	ldr	r3, [pc, #16]	@ (80077b8 <vTaskSuspendAll+0x18>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3301      	adds	r3, #1
 80077aa:	4a03      	ldr	r2, [pc, #12]	@ (80077b8 <vTaskSuspendAll+0x18>)
 80077ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80077ae:	bf00      	nop
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	20001124 	.word	0x20001124

080077bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077c2:	2300      	movs	r3, #0
 80077c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077ca:	4b42      	ldr	r3, [pc, #264]	@ (80078d4 <xTaskResumeAll+0x118>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10b      	bne.n	80077ea <xTaskResumeAll+0x2e>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	603b      	str	r3, [r7, #0]
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop
 80077e8:	e7fd      	b.n	80077e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077ea:	f001 f975 	bl	8008ad8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077ee:	4b39      	ldr	r3, [pc, #228]	@ (80078d4 <xTaskResumeAll+0x118>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	4a37      	ldr	r2, [pc, #220]	@ (80078d4 <xTaskResumeAll+0x118>)
 80077f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077f8:	4b36      	ldr	r3, [pc, #216]	@ (80078d4 <xTaskResumeAll+0x118>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d162      	bne.n	80078c6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007800:	4b35      	ldr	r3, [pc, #212]	@ (80078d8 <xTaskResumeAll+0x11c>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d05e      	beq.n	80078c6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007808:	e02f      	b.n	800786a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800780a:	4b34      	ldr	r3, [pc, #208]	@ (80078dc <xTaskResumeAll+0x120>)
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	3318      	adds	r3, #24
 8007816:	4618      	mov	r0, r3
 8007818:	f7fe fe7e 	bl	8006518 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3304      	adds	r3, #4
 8007820:	4618      	mov	r0, r3
 8007822:	f7fe fe79 	bl	8006518 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800782a:	4b2d      	ldr	r3, [pc, #180]	@ (80078e0 <xTaskResumeAll+0x124>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	429a      	cmp	r2, r3
 8007830:	d903      	bls.n	800783a <xTaskResumeAll+0x7e>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007836:	4a2a      	ldr	r2, [pc, #168]	@ (80078e0 <xTaskResumeAll+0x124>)
 8007838:	6013      	str	r3, [r2, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800783e:	4613      	mov	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	4a27      	ldr	r2, [pc, #156]	@ (80078e4 <xTaskResumeAll+0x128>)
 8007848:	441a      	add	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3304      	adds	r3, #4
 800784e:	4619      	mov	r1, r3
 8007850:	4610      	mov	r0, r2
 8007852:	f7fe fe04 	bl	800645e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800785a:	4b23      	ldr	r3, [pc, #140]	@ (80078e8 <xTaskResumeAll+0x12c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007860:	429a      	cmp	r2, r3
 8007862:	d302      	bcc.n	800786a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007864:	4b21      	ldr	r3, [pc, #132]	@ (80078ec <xTaskResumeAll+0x130>)
 8007866:	2201      	movs	r2, #1
 8007868:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800786a:	4b1c      	ldr	r3, [pc, #112]	@ (80078dc <xTaskResumeAll+0x120>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1cb      	bne.n	800780a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007878:	f000 fba2 	bl	8007fc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800787c:	4b1c      	ldr	r3, [pc, #112]	@ (80078f0 <xTaskResumeAll+0x134>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d010      	beq.n	80078aa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007888:	f000 f858 	bl	800793c <xTaskIncrementTick>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007892:	4b16      	ldr	r3, [pc, #88]	@ (80078ec <xTaskResumeAll+0x130>)
 8007894:	2201      	movs	r2, #1
 8007896:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	3b01      	subs	r3, #1
 800789c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1f1      	bne.n	8007888 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80078a4:	4b12      	ldr	r3, [pc, #72]	@ (80078f0 <xTaskResumeAll+0x134>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078aa:	4b10      	ldr	r3, [pc, #64]	@ (80078ec <xTaskResumeAll+0x130>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d009      	beq.n	80078c6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078b2:	2301      	movs	r3, #1
 80078b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078b6:	4b0f      	ldr	r3, [pc, #60]	@ (80078f4 <xTaskResumeAll+0x138>)
 80078b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078c6:	f001 f939 	bl	8008b3c <vPortExitCritical>

	return xAlreadyYielded;
 80078ca:	68bb      	ldr	r3, [r7, #8]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20001124 	.word	0x20001124
 80078d8:	200010fc 	.word	0x200010fc
 80078dc:	200010bc 	.word	0x200010bc
 80078e0:	20001104 	.word	0x20001104
 80078e4:	20000c2c 	.word	0x20000c2c
 80078e8:	20000c28 	.word	0x20000c28
 80078ec:	20001110 	.word	0x20001110
 80078f0:	2000110c 	.word	0x2000110c
 80078f4:	e000ed04 	.word	0xe000ed04

080078f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078fe:	4b05      	ldr	r3, [pc, #20]	@ (8007914 <xTaskGetTickCount+0x1c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007904:	687b      	ldr	r3, [r7, #4]
}
 8007906:	4618      	mov	r0, r3
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	20001100 	.word	0x20001100

08007918 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800791e:	f001 f9bb 	bl	8008c98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007922:	2300      	movs	r3, #0
 8007924:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007926:	4b04      	ldr	r3, [pc, #16]	@ (8007938 <xTaskGetTickCountFromISR+0x20>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800792c:	683b      	ldr	r3, [r7, #0]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	20001100 	.word	0x20001100

0800793c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007942:	2300      	movs	r3, #0
 8007944:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007946:	4b4f      	ldr	r3, [pc, #316]	@ (8007a84 <xTaskIncrementTick+0x148>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	f040 8090 	bne.w	8007a70 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007950:	4b4d      	ldr	r3, [pc, #308]	@ (8007a88 <xTaskIncrementTick+0x14c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3301      	adds	r3, #1
 8007956:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007958:	4a4b      	ldr	r2, [pc, #300]	@ (8007a88 <xTaskIncrementTick+0x14c>)
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d121      	bne.n	80079a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007964:	4b49      	ldr	r3, [pc, #292]	@ (8007a8c <xTaskIncrementTick+0x150>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00b      	beq.n	8007986 <xTaskIncrementTick+0x4a>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	603b      	str	r3, [r7, #0]
}
 8007980:	bf00      	nop
 8007982:	bf00      	nop
 8007984:	e7fd      	b.n	8007982 <xTaskIncrementTick+0x46>
 8007986:	4b41      	ldr	r3, [pc, #260]	@ (8007a8c <xTaskIncrementTick+0x150>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	4b40      	ldr	r3, [pc, #256]	@ (8007a90 <xTaskIncrementTick+0x154>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a3e      	ldr	r2, [pc, #248]	@ (8007a8c <xTaskIncrementTick+0x150>)
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	4a3e      	ldr	r2, [pc, #248]	@ (8007a90 <xTaskIncrementTick+0x154>)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	4b3e      	ldr	r3, [pc, #248]	@ (8007a94 <xTaskIncrementTick+0x158>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3301      	adds	r3, #1
 80079a0:	4a3c      	ldr	r2, [pc, #240]	@ (8007a94 <xTaskIncrementTick+0x158>)
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	f000 fb0c 	bl	8007fc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079a8:	4b3b      	ldr	r3, [pc, #236]	@ (8007a98 <xTaskIncrementTick+0x15c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d349      	bcc.n	8007a46 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079b2:	4b36      	ldr	r3, [pc, #216]	@ (8007a8c <xTaskIncrementTick+0x150>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d104      	bne.n	80079c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079bc:	4b36      	ldr	r3, [pc, #216]	@ (8007a98 <xTaskIncrementTick+0x15c>)
 80079be:	f04f 32ff 	mov.w	r2, #4294967295
 80079c2:	601a      	str	r2, [r3, #0]
					break;
 80079c4:	e03f      	b.n	8007a46 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079c6:	4b31      	ldr	r3, [pc, #196]	@ (8007a8c <xTaskIncrementTick+0x150>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d203      	bcs.n	80079e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079de:	4a2e      	ldr	r2, [pc, #184]	@ (8007a98 <xTaskIncrementTick+0x15c>)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80079e4:	e02f      	b.n	8007a46 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	3304      	adds	r3, #4
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fe fd94 	bl	8006518 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d004      	beq.n	8007a02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	3318      	adds	r3, #24
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fe fd8b 	bl	8006518 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a06:	4b25      	ldr	r3, [pc, #148]	@ (8007a9c <xTaskIncrementTick+0x160>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d903      	bls.n	8007a16 <xTaskIncrementTick+0xda>
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a12:	4a22      	ldr	r2, [pc, #136]	@ (8007a9c <xTaskIncrementTick+0x160>)
 8007a14:	6013      	str	r3, [r2, #0]
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4a1f      	ldr	r2, [pc, #124]	@ (8007aa0 <xTaskIncrementTick+0x164>)
 8007a24:	441a      	add	r2, r3
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	f7fe fd16 	bl	800645e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a36:	4b1b      	ldr	r3, [pc, #108]	@ (8007aa4 <xTaskIncrementTick+0x168>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d3b8      	bcc.n	80079b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007a40:	2301      	movs	r3, #1
 8007a42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a44:	e7b5      	b.n	80079b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a46:	4b17      	ldr	r3, [pc, #92]	@ (8007aa4 <xTaskIncrementTick+0x168>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a4c:	4914      	ldr	r1, [pc, #80]	@ (8007aa0 <xTaskIncrementTick+0x164>)
 8007a4e:	4613      	mov	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	440b      	add	r3, r1
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d901      	bls.n	8007a62 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a62:	4b11      	ldr	r3, [pc, #68]	@ (8007aa8 <xTaskIncrementTick+0x16c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d007      	beq.n	8007a7a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	617b      	str	r3, [r7, #20]
 8007a6e:	e004      	b.n	8007a7a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a70:	4b0e      	ldr	r3, [pc, #56]	@ (8007aac <xTaskIncrementTick+0x170>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3301      	adds	r3, #1
 8007a76:	4a0d      	ldr	r2, [pc, #52]	@ (8007aac <xTaskIncrementTick+0x170>)
 8007a78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a7a:	697b      	ldr	r3, [r7, #20]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	20001124 	.word	0x20001124
 8007a88:	20001100 	.word	0x20001100
 8007a8c:	200010b4 	.word	0x200010b4
 8007a90:	200010b8 	.word	0x200010b8
 8007a94:	20001114 	.word	0x20001114
 8007a98:	2000111c 	.word	0x2000111c
 8007a9c:	20001104 	.word	0x20001104
 8007aa0:	20000c2c 	.word	0x20000c2c
 8007aa4:	20000c28 	.word	0x20000c28
 8007aa8:	20001110 	.word	0x20001110
 8007aac:	2000110c 	.word	0x2000110c

08007ab0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ab6:	4b28      	ldr	r3, [pc, #160]	@ (8007b58 <vTaskSwitchContext+0xa8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007abe:	4b27      	ldr	r3, [pc, #156]	@ (8007b5c <vTaskSwitchContext+0xac>)
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ac4:	e042      	b.n	8007b4c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007ac6:	4b25      	ldr	r3, [pc, #148]	@ (8007b5c <vTaskSwitchContext+0xac>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007acc:	4b24      	ldr	r3, [pc, #144]	@ (8007b60 <vTaskSwitchContext+0xb0>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	60fb      	str	r3, [r7, #12]
 8007ad2:	e011      	b.n	8007af8 <vTaskSwitchContext+0x48>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10b      	bne.n	8007af2 <vTaskSwitchContext+0x42>
	__asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	607b      	str	r3, [r7, #4]
}
 8007aec:	bf00      	nop
 8007aee:	bf00      	nop
 8007af0:	e7fd      	b.n	8007aee <vTaskSwitchContext+0x3e>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	491a      	ldr	r1, [pc, #104]	@ (8007b64 <vTaskSwitchContext+0xb4>)
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	4613      	mov	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	440b      	add	r3, r1
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d0e3      	beq.n	8007ad4 <vTaskSwitchContext+0x24>
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4a13      	ldr	r2, [pc, #76]	@ (8007b64 <vTaskSwitchContext+0xb4>)
 8007b18:	4413      	add	r3, r2
 8007b1a:	60bb      	str	r3, [r7, #8]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	605a      	str	r2, [r3, #4]
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	685a      	ldr	r2, [r3, #4]
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	3308      	adds	r3, #8
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d104      	bne.n	8007b3c <vTaskSwitchContext+0x8c>
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	605a      	str	r2, [r3, #4]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	4a09      	ldr	r2, [pc, #36]	@ (8007b68 <vTaskSwitchContext+0xb8>)
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	4a06      	ldr	r2, [pc, #24]	@ (8007b60 <vTaskSwitchContext+0xb0>)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6013      	str	r3, [r2, #0]
}
 8007b4c:	bf00      	nop
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	20001124 	.word	0x20001124
 8007b5c:	20001110 	.word	0x20001110
 8007b60:	20001104 	.word	0x20001104
 8007b64:	20000c2c 	.word	0x20000c2c
 8007b68:	20000c28 	.word	0x20000c28

08007b6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10b      	bne.n	8007b94 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	60fb      	str	r3, [r7, #12]
}
 8007b8e:	bf00      	nop
 8007b90:	bf00      	nop
 8007b92:	e7fd      	b.n	8007b90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b94:	4b07      	ldr	r3, [pc, #28]	@ (8007bb4 <vTaskPlaceOnEventList+0x48>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3318      	adds	r3, #24
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7fe fc82 	bl	80064a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	6838      	ldr	r0, [r7, #0]
 8007ba6:	f000 fab9 	bl	800811c <prvAddCurrentTaskToDelayedList>
}
 8007baa:	bf00      	nop
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20000c28 	.word	0x20000c28

08007bb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10b      	bne.n	8007be2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	617b      	str	r3, [r7, #20]
}
 8007bdc:	bf00      	nop
 8007bde:	bf00      	nop
 8007be0:	e7fd      	b.n	8007bde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007be2:	4b0a      	ldr	r3, [pc, #40]	@ (8007c0c <vTaskPlaceOnEventListRestricted+0x54>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3318      	adds	r3, #24
 8007be8:	4619      	mov	r1, r3
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f7fe fc37 	bl	800645e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d002      	beq.n	8007bfc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bfa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007bfc:	6879      	ldr	r1, [r7, #4]
 8007bfe:	68b8      	ldr	r0, [r7, #8]
 8007c00:	f000 fa8c 	bl	800811c <prvAddCurrentTaskToDelayedList>
	}
 8007c04:	bf00      	nop
 8007c06:	3718      	adds	r7, #24
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	20000c28 	.word	0x20000c28

08007c10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10b      	bne.n	8007c3e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2a:	f383 8811 	msr	BASEPRI, r3
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f3bf 8f4f 	dsb	sy
 8007c36:	60fb      	str	r3, [r7, #12]
}
 8007c38:	bf00      	nop
 8007c3a:	bf00      	nop
 8007c3c:	e7fd      	b.n	8007c3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	3318      	adds	r3, #24
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fe fc68 	bl	8006518 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c48:	4b1d      	ldr	r3, [pc, #116]	@ (8007cc0 <xTaskRemoveFromEventList+0xb0>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d11d      	bne.n	8007c8c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	3304      	adds	r3, #4
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fe fc5f 	bl	8006518 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c5e:	4b19      	ldr	r3, [pc, #100]	@ (8007cc4 <xTaskRemoveFromEventList+0xb4>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d903      	bls.n	8007c6e <xTaskRemoveFromEventList+0x5e>
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6a:	4a16      	ldr	r2, [pc, #88]	@ (8007cc4 <xTaskRemoveFromEventList+0xb4>)
 8007c6c:	6013      	str	r3, [r2, #0]
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4a13      	ldr	r2, [pc, #76]	@ (8007cc8 <xTaskRemoveFromEventList+0xb8>)
 8007c7c:	441a      	add	r2, r3
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	3304      	adds	r3, #4
 8007c82:	4619      	mov	r1, r3
 8007c84:	4610      	mov	r0, r2
 8007c86:	f7fe fbea 	bl	800645e <vListInsertEnd>
 8007c8a:	e005      	b.n	8007c98 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	3318      	adds	r3, #24
 8007c90:	4619      	mov	r1, r3
 8007c92:	480e      	ldr	r0, [pc, #56]	@ (8007ccc <xTaskRemoveFromEventList+0xbc>)
 8007c94:	f7fe fbe3 	bl	800645e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8007cd0 <xTaskRemoveFromEventList+0xc0>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d905      	bls.n	8007cb2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007caa:	4b0a      	ldr	r3, [pc, #40]	@ (8007cd4 <xTaskRemoveFromEventList+0xc4>)
 8007cac:	2201      	movs	r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	e001      	b.n	8007cb6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007cb6:	697b      	ldr	r3, [r7, #20]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3718      	adds	r7, #24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	20001124 	.word	0x20001124
 8007cc4:	20001104 	.word	0x20001104
 8007cc8:	20000c2c 	.word	0x20000c2c
 8007ccc:	200010bc 	.word	0x200010bc
 8007cd0:	20000c28 	.word	0x20000c28
 8007cd4:	20001110 	.word	0x20001110

08007cd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ce0:	4b06      	ldr	r3, [pc, #24]	@ (8007cfc <vTaskInternalSetTimeOutState+0x24>)
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ce8:	4b05      	ldr	r3, [pc, #20]	@ (8007d00 <vTaskInternalSetTimeOutState+0x28>)
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	605a      	str	r2, [r3, #4]
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	20001114 	.word	0x20001114
 8007d00:	20001100 	.word	0x20001100

08007d04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10b      	bne.n	8007d2c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	613b      	str	r3, [r7, #16]
}
 8007d26:	bf00      	nop
 8007d28:	bf00      	nop
 8007d2a:	e7fd      	b.n	8007d28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10b      	bne.n	8007d4a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	60fb      	str	r3, [r7, #12]
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	e7fd      	b.n	8007d46 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007d4a:	f000 fec5 	bl	8008ad8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007dc4 <xTaskCheckForTimeOut+0xc0>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	69ba      	ldr	r2, [r7, #24]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d66:	d102      	bne.n	8007d6e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	61fb      	str	r3, [r7, #28]
 8007d6c:	e023      	b.n	8007db6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	4b15      	ldr	r3, [pc, #84]	@ (8007dc8 <xTaskCheckForTimeOut+0xc4>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d007      	beq.n	8007d8a <xTaskCheckForTimeOut+0x86>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d302      	bcc.n	8007d8a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d84:	2301      	movs	r3, #1
 8007d86:	61fb      	str	r3, [r7, #28]
 8007d88:	e015      	b.n	8007db6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d20b      	bcs.n	8007dac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	1ad2      	subs	r2, r2, r3
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7ff ff99 	bl	8007cd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007da6:	2300      	movs	r3, #0
 8007da8:	61fb      	str	r3, [r7, #28]
 8007daa:	e004      	b.n	8007db6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	2200      	movs	r2, #0
 8007db0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007db2:	2301      	movs	r3, #1
 8007db4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007db6:	f000 fec1 	bl	8008b3c <vPortExitCritical>

	return xReturn;
 8007dba:	69fb      	ldr	r3, [r7, #28]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3720      	adds	r7, #32
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	20001100 	.word	0x20001100
 8007dc8:	20001114 	.word	0x20001114

08007dcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007dd0:	4b03      	ldr	r3, [pc, #12]	@ (8007de0 <vTaskMissedYield+0x14>)
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]
}
 8007dd6:	bf00      	nop
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	20001110 	.word	0x20001110

08007de4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007dec:	f000 f852 	bl	8007e94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007df0:	4b06      	ldr	r3, [pc, #24]	@ (8007e0c <prvIdleTask+0x28>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d9f9      	bls.n	8007dec <prvIdleTask+0x8>
			{
				taskYIELD();
 8007df8:	4b05      	ldr	r3, [pc, #20]	@ (8007e10 <prvIdleTask+0x2c>)
 8007dfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e08:	e7f0      	b.n	8007dec <prvIdleTask+0x8>
 8007e0a:	bf00      	nop
 8007e0c:	20000c2c 	.word	0x20000c2c
 8007e10:	e000ed04 	.word	0xe000ed04

08007e14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	607b      	str	r3, [r7, #4]
 8007e1e:	e00c      	b.n	8007e3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4a12      	ldr	r2, [pc, #72]	@ (8007e74 <prvInitialiseTaskLists+0x60>)
 8007e2c:	4413      	add	r3, r2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fe fae8 	bl	8006404 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	3301      	adds	r3, #1
 8007e38:	607b      	str	r3, [r7, #4]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2b37      	cmp	r3, #55	@ 0x37
 8007e3e:	d9ef      	bls.n	8007e20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e40:	480d      	ldr	r0, [pc, #52]	@ (8007e78 <prvInitialiseTaskLists+0x64>)
 8007e42:	f7fe fadf 	bl	8006404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e46:	480d      	ldr	r0, [pc, #52]	@ (8007e7c <prvInitialiseTaskLists+0x68>)
 8007e48:	f7fe fadc 	bl	8006404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e4c:	480c      	ldr	r0, [pc, #48]	@ (8007e80 <prvInitialiseTaskLists+0x6c>)
 8007e4e:	f7fe fad9 	bl	8006404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e52:	480c      	ldr	r0, [pc, #48]	@ (8007e84 <prvInitialiseTaskLists+0x70>)
 8007e54:	f7fe fad6 	bl	8006404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e58:	480b      	ldr	r0, [pc, #44]	@ (8007e88 <prvInitialiseTaskLists+0x74>)
 8007e5a:	f7fe fad3 	bl	8006404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e8c <prvInitialiseTaskLists+0x78>)
 8007e60:	4a05      	ldr	r2, [pc, #20]	@ (8007e78 <prvInitialiseTaskLists+0x64>)
 8007e62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e64:	4b0a      	ldr	r3, [pc, #40]	@ (8007e90 <prvInitialiseTaskLists+0x7c>)
 8007e66:	4a05      	ldr	r2, [pc, #20]	@ (8007e7c <prvInitialiseTaskLists+0x68>)
 8007e68:	601a      	str	r2, [r3, #0]
}
 8007e6a:	bf00      	nop
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	20000c2c 	.word	0x20000c2c
 8007e78:	2000108c 	.word	0x2000108c
 8007e7c:	200010a0 	.word	0x200010a0
 8007e80:	200010bc 	.word	0x200010bc
 8007e84:	200010d0 	.word	0x200010d0
 8007e88:	200010e8 	.word	0x200010e8
 8007e8c:	200010b4 	.word	0x200010b4
 8007e90:	200010b8 	.word	0x200010b8

08007e94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e9a:	e019      	b.n	8007ed0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e9c:	f000 fe1c 	bl	8008ad8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ea0:	4b10      	ldr	r3, [pc, #64]	@ (8007ee4 <prvCheckTasksWaitingTermination+0x50>)
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fe fb33 	bl	8006518 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ee8 <prvCheckTasksWaitingTermination+0x54>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8007ee8 <prvCheckTasksWaitingTermination+0x54>)
 8007eba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8007eec <prvCheckTasksWaitingTermination+0x58>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8007eec <prvCheckTasksWaitingTermination+0x58>)
 8007ec4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ec6:	f000 fe39 	bl	8008b3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f848 	bl	8007f60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ed0:	4b06      	ldr	r3, [pc, #24]	@ (8007eec <prvCheckTasksWaitingTermination+0x58>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1e1      	bne.n	8007e9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ed8:	bf00      	nop
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	200010d0 	.word	0x200010d0
 8007ee8:	200010fc 	.word	0x200010fc
 8007eec:	200010e4 	.word	0x200010e4

08007ef0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007efc:	e005      	b.n	8007f0a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	3301      	adds	r3, #1
 8007f02:	607b      	str	r3, [r7, #4]
			ulCount++;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3301      	adds	r3, #1
 8007f08:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2ba5      	cmp	r3, #165	@ 0xa5
 8007f10:	d0f5      	beq.n	8007efe <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	089b      	lsrs	r3, r3, #2
 8007f16:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	b29b      	uxth	r3, r3
	}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d102      	bne.n	8007f3c <uxTaskGetStackHighWaterMark+0x14>
 8007f36:	4b09      	ldr	r3, [pc, #36]	@ (8007f5c <uxTaskGetStackHighWaterMark+0x34>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	e000      	b.n	8007f3e <uxTaskGetStackHighWaterMark+0x16>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f44:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8007f46:	6938      	ldr	r0, [r7, #16]
 8007f48:	f7ff ffd2 	bl	8007ef0 <prvTaskCheckFreeStackSpace>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8007f50:	68fb      	ldr	r3, [r7, #12]
	}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	20000c28 	.word	0x20000c28

08007f60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d108      	bne.n	8007f84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 ff9e 	bl	8008eb8 <vPortFree>
				vPortFree( pxTCB );
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 ff9b 	bl	8008eb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f82:	e019      	b.n	8007fb8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d103      	bne.n	8007f96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 ff92 	bl	8008eb8 <vPortFree>
	}
 8007f94:	e010      	b.n	8007fb8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d00b      	beq.n	8007fb8 <prvDeleteTCB+0x58>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	60fb      	str	r3, [r7, #12]
}
 8007fb2:	bf00      	nop
 8007fb4:	bf00      	nop
 8007fb6:	e7fd      	b.n	8007fb4 <prvDeleteTCB+0x54>
	}
 8007fb8:	bf00      	nop
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ff8 <prvResetNextTaskUnblockTime+0x38>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d104      	bne.n	8007fda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ffc <prvResetNextTaskUnblockTime+0x3c>)
 8007fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fd8:	e008      	b.n	8007fec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fda:	4b07      	ldr	r3, [pc, #28]	@ (8007ff8 <prvResetNextTaskUnblockTime+0x38>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	4a04      	ldr	r2, [pc, #16]	@ (8007ffc <prvResetNextTaskUnblockTime+0x3c>)
 8007fea:	6013      	str	r3, [r2, #0]
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	200010b4 	.word	0x200010b4
 8007ffc:	2000111c 	.word	0x2000111c

08008000 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008006:	4b0b      	ldr	r3, [pc, #44]	@ (8008034 <xTaskGetSchedulerState+0x34>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800800e:	2301      	movs	r3, #1
 8008010:	607b      	str	r3, [r7, #4]
 8008012:	e008      	b.n	8008026 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008014:	4b08      	ldr	r3, [pc, #32]	@ (8008038 <xTaskGetSchedulerState+0x38>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d102      	bne.n	8008022 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800801c:	2302      	movs	r3, #2
 800801e:	607b      	str	r3, [r7, #4]
 8008020:	e001      	b.n	8008026 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008022:	2300      	movs	r3, #0
 8008024:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008026:	687b      	ldr	r3, [r7, #4]
	}
 8008028:	4618      	mov	r0, r3
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	20001108 	.word	0x20001108
 8008038:	20001124 	.word	0x20001124

0800803c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008048:	2300      	movs	r3, #0
 800804a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d058      	beq.n	8008104 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008052:	4b2f      	ldr	r3, [pc, #188]	@ (8008110 <xTaskPriorityDisinherit+0xd4>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	429a      	cmp	r2, r3
 800805a:	d00b      	beq.n	8008074 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	60fb      	str	r3, [r7, #12]
}
 800806e:	bf00      	nop
 8008070:	bf00      	nop
 8008072:	e7fd      	b.n	8008070 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10b      	bne.n	8008094 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	60bb      	str	r3, [r7, #8]
}
 800808e:	bf00      	nop
 8008090:	bf00      	nop
 8008092:	e7fd      	b.n	8008090 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008098:	1e5a      	subs	r2, r3, #1
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d02c      	beq.n	8008104 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d128      	bne.n	8008104 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	3304      	adds	r3, #4
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe fa2e 	bl	8006518 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080d4:	4b0f      	ldr	r3, [pc, #60]	@ (8008114 <xTaskPriorityDisinherit+0xd8>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d903      	bls.n	80080e4 <xTaskPriorityDisinherit+0xa8>
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e0:	4a0c      	ldr	r2, [pc, #48]	@ (8008114 <xTaskPriorityDisinherit+0xd8>)
 80080e2:	6013      	str	r3, [r2, #0]
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080e8:	4613      	mov	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4a09      	ldr	r2, [pc, #36]	@ (8008118 <xTaskPriorityDisinherit+0xdc>)
 80080f2:	441a      	add	r2, r3
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4619      	mov	r1, r3
 80080fa:	4610      	mov	r0, r2
 80080fc:	f7fe f9af 	bl	800645e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008100:	2301      	movs	r3, #1
 8008102:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008104:	697b      	ldr	r3, [r7, #20]
	}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000c28 	.word	0x20000c28
 8008114:	20001104 	.word	0x20001104
 8008118:	20000c2c 	.word	0x20000c2c

0800811c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008126:	4b21      	ldr	r3, [pc, #132]	@ (80081ac <prvAddCurrentTaskToDelayedList+0x90>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800812c:	4b20      	ldr	r3, [pc, #128]	@ (80081b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3304      	adds	r3, #4
 8008132:	4618      	mov	r0, r3
 8008134:	f7fe f9f0 	bl	8006518 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813e:	d10a      	bne.n	8008156 <prvAddCurrentTaskToDelayedList+0x3a>
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d007      	beq.n	8008156 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008146:	4b1a      	ldr	r3, [pc, #104]	@ (80081b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3304      	adds	r3, #4
 800814c:	4619      	mov	r1, r3
 800814e:	4819      	ldr	r0, [pc, #100]	@ (80081b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008150:	f7fe f985 	bl	800645e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008154:	e026      	b.n	80081a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4413      	add	r3, r2
 800815c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800815e:	4b14      	ldr	r3, [pc, #80]	@ (80081b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	429a      	cmp	r2, r3
 800816c:	d209      	bcs.n	8008182 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800816e:	4b12      	ldr	r3, [pc, #72]	@ (80081b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	4b0f      	ldr	r3, [pc, #60]	@ (80081b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	3304      	adds	r3, #4
 8008178:	4619      	mov	r1, r3
 800817a:	4610      	mov	r0, r2
 800817c:	f7fe f993 	bl	80064a6 <vListInsert>
}
 8008180:	e010      	b.n	80081a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008182:	4b0e      	ldr	r3, [pc, #56]	@ (80081bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	4b0a      	ldr	r3, [pc, #40]	@ (80081b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3304      	adds	r3, #4
 800818c:	4619      	mov	r1, r3
 800818e:	4610      	mov	r0, r2
 8008190:	f7fe f989 	bl	80064a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008194:	4b0a      	ldr	r3, [pc, #40]	@ (80081c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	429a      	cmp	r2, r3
 800819c:	d202      	bcs.n	80081a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800819e:	4a08      	ldr	r2, [pc, #32]	@ (80081c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	6013      	str	r3, [r2, #0]
}
 80081a4:	bf00      	nop
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	20001100 	.word	0x20001100
 80081b0:	20000c28 	.word	0x20000c28
 80081b4:	200010e8 	.word	0x200010e8
 80081b8:	200010b8 	.word	0x200010b8
 80081bc:	200010b4 	.word	0x200010b4
 80081c0:	2000111c 	.word	0x2000111c

080081c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08a      	sub	sp, #40	@ 0x28
 80081c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80081ce:	f000 fb13 	bl	80087f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80081d2:	4b1d      	ldr	r3, [pc, #116]	@ (8008248 <xTimerCreateTimerTask+0x84>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d021      	beq.n	800821e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80081da:	2300      	movs	r3, #0
 80081dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80081de:	2300      	movs	r3, #0
 80081e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081e2:	1d3a      	adds	r2, r7, #4
 80081e4:	f107 0108 	add.w	r1, r7, #8
 80081e8:	f107 030c 	add.w	r3, r7, #12
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fe f8ef 	bl	80063d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	9202      	str	r2, [sp, #8]
 80081fa:	9301      	str	r3, [sp, #4]
 80081fc:	2302      	movs	r3, #2
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	2300      	movs	r3, #0
 8008202:	460a      	mov	r2, r1
 8008204:	4911      	ldr	r1, [pc, #68]	@ (800824c <xTimerCreateTimerTask+0x88>)
 8008206:	4812      	ldr	r0, [pc, #72]	@ (8008250 <xTimerCreateTimerTask+0x8c>)
 8008208:	f7fe ff68 	bl	80070dc <xTaskCreateStatic>
 800820c:	4603      	mov	r3, r0
 800820e:	4a11      	ldr	r2, [pc, #68]	@ (8008254 <xTimerCreateTimerTask+0x90>)
 8008210:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008212:	4b10      	ldr	r3, [pc, #64]	@ (8008254 <xTimerCreateTimerTask+0x90>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800821a:	2301      	movs	r3, #1
 800821c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10b      	bne.n	800823c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	613b      	str	r3, [r7, #16]
}
 8008236:	bf00      	nop
 8008238:	bf00      	nop
 800823a:	e7fd      	b.n	8008238 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800823c:	697b      	ldr	r3, [r7, #20]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3718      	adds	r7, #24
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20001158 	.word	0x20001158
 800824c:	0800df8c 	.word	0x0800df8c
 8008250:	08008391 	.word	0x08008391
 8008254:	2000115c 	.word	0x2000115c

08008258 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b08a      	sub	sp, #40	@ 0x28
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
 8008264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008266:	2300      	movs	r3, #0
 8008268:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10b      	bne.n	8008288 <xTimerGenericCommand+0x30>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	623b      	str	r3, [r7, #32]
}
 8008282:	bf00      	nop
 8008284:	bf00      	nop
 8008286:	e7fd      	b.n	8008284 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008288:	4b19      	ldr	r3, [pc, #100]	@ (80082f0 <xTimerGenericCommand+0x98>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d02a      	beq.n	80082e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2b05      	cmp	r3, #5
 80082a0:	dc18      	bgt.n	80082d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80082a2:	f7ff fead 	bl	8008000 <xTaskGetSchedulerState>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d109      	bne.n	80082c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80082ac:	4b10      	ldr	r3, [pc, #64]	@ (80082f0 <xTimerGenericCommand+0x98>)
 80082ae:	6818      	ldr	r0, [r3, #0]
 80082b0:	f107 0110 	add.w	r1, r7, #16
 80082b4:	2300      	movs	r3, #0
 80082b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082b8:	f7fe fa9e 	bl	80067f8 <xQueueGenericSend>
 80082bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80082be:	e012      	b.n	80082e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80082c0:	4b0b      	ldr	r3, [pc, #44]	@ (80082f0 <xTimerGenericCommand+0x98>)
 80082c2:	6818      	ldr	r0, [r3, #0]
 80082c4:	f107 0110 	add.w	r1, r7, #16
 80082c8:	2300      	movs	r3, #0
 80082ca:	2200      	movs	r2, #0
 80082cc:	f7fe fa94 	bl	80067f8 <xQueueGenericSend>
 80082d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80082d2:	e008      	b.n	80082e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082d4:	4b06      	ldr	r3, [pc, #24]	@ (80082f0 <xTimerGenericCommand+0x98>)
 80082d6:	6818      	ldr	r0, [r3, #0]
 80082d8:	f107 0110 	add.w	r1, r7, #16
 80082dc:	2300      	movs	r3, #0
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	f7fe fb8c 	bl	80069fc <xQueueGenericSendFromISR>
 80082e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80082e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3728      	adds	r7, #40	@ 0x28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	20001158 	.word	0x20001158

080082f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b088      	sub	sp, #32
 80082f8:	af02      	add	r7, sp, #8
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082fe:	4b23      	ldr	r3, [pc, #140]	@ (800838c <prvProcessExpiredTimer+0x98>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	3304      	adds	r3, #4
 800830c:	4618      	mov	r0, r3
 800830e:	f7fe f903 	bl	8006518 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	2b00      	cmp	r3, #0
 800831e:	d023      	beq.n	8008368 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	699a      	ldr	r2, [r3, #24]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	18d1      	adds	r1, r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	6978      	ldr	r0, [r7, #20]
 800832e:	f000 f8d5 	bl	80084dc <prvInsertTimerInActiveList>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d020      	beq.n	800837a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008338:	2300      	movs	r3, #0
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	2300      	movs	r3, #0
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	2100      	movs	r1, #0
 8008342:	6978      	ldr	r0, [r7, #20]
 8008344:	f7ff ff88 	bl	8008258 <xTimerGenericCommand>
 8008348:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d114      	bne.n	800837a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	60fb      	str	r3, [r7, #12]
}
 8008362:	bf00      	nop
 8008364:	bf00      	nop
 8008366:	e7fd      	b.n	8008364 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800836e:	f023 0301 	bic.w	r3, r3, #1
 8008372:	b2da      	uxtb	r2, r3
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	6978      	ldr	r0, [r7, #20]
 8008380:	4798      	blx	r3
}
 8008382:	bf00      	nop
 8008384:	3718      	adds	r7, #24
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	20001150 	.word	0x20001150

08008390 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008398:	f107 0308 	add.w	r3, r7, #8
 800839c:	4618      	mov	r0, r3
 800839e:	f000 f859 	bl	8008454 <prvGetNextExpireTime>
 80083a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	4619      	mov	r1, r3
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 f805 	bl	80083b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80083ae:	f000 f8d7 	bl	8008560 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083b2:	bf00      	nop
 80083b4:	e7f0      	b.n	8008398 <prvTimerTask+0x8>
	...

080083b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80083c2:	f7ff f9ed 	bl	80077a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083c6:	f107 0308 	add.w	r3, r7, #8
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 f866 	bl	800849c <prvSampleTimeNow>
 80083d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d130      	bne.n	800843a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10a      	bne.n	80083f4 <prvProcessTimerOrBlockTask+0x3c>
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d806      	bhi.n	80083f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80083e6:	f7ff f9e9 	bl	80077bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80083ea:	68f9      	ldr	r1, [r7, #12]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7ff ff81 	bl	80082f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80083f2:	e024      	b.n	800843e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d008      	beq.n	800840c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083fa:	4b13      	ldr	r3, [pc, #76]	@ (8008448 <prvProcessTimerOrBlockTask+0x90>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <prvProcessTimerOrBlockTask+0x50>
 8008404:	2301      	movs	r3, #1
 8008406:	e000      	b.n	800840a <prvProcessTimerOrBlockTask+0x52>
 8008408:	2300      	movs	r3, #0
 800840a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800840c:	4b0f      	ldr	r3, [pc, #60]	@ (800844c <prvProcessTimerOrBlockTask+0x94>)
 800840e:	6818      	ldr	r0, [r3, #0]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	4619      	mov	r1, r3
 800841a:	f7fe fe2b 	bl	8007074 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800841e:	f7ff f9cd 	bl	80077bc <xTaskResumeAll>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10a      	bne.n	800843e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008428:	4b09      	ldr	r3, [pc, #36]	@ (8008450 <prvProcessTimerOrBlockTask+0x98>)
 800842a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800842e:	601a      	str	r2, [r3, #0]
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	f3bf 8f6f 	isb	sy
}
 8008438:	e001      	b.n	800843e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800843a:	f7ff f9bf 	bl	80077bc <xTaskResumeAll>
}
 800843e:	bf00      	nop
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20001154 	.word	0x20001154
 800844c:	20001158 	.word	0x20001158
 8008450:	e000ed04 	.word	0xe000ed04

08008454 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800845c:	4b0e      	ldr	r3, [pc, #56]	@ (8008498 <prvGetNextExpireTime+0x44>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <prvGetNextExpireTime+0x16>
 8008466:	2201      	movs	r2, #1
 8008468:	e000      	b.n	800846c <prvGetNextExpireTime+0x18>
 800846a:	2200      	movs	r2, #0
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d105      	bne.n	8008484 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008478:	4b07      	ldr	r3, [pc, #28]	@ (8008498 <prvGetNextExpireTime+0x44>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	60fb      	str	r3, [r7, #12]
 8008482:	e001      	b.n	8008488 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008484:	2300      	movs	r3, #0
 8008486:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008488:	68fb      	ldr	r3, [r7, #12]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	20001150 	.word	0x20001150

0800849c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80084a4:	f7ff fa28 	bl	80078f8 <xTaskGetTickCount>
 80084a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80084aa:	4b0b      	ldr	r3, [pc, #44]	@ (80084d8 <prvSampleTimeNow+0x3c>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d205      	bcs.n	80084c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80084b4:	f000 f93a 	bl	800872c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	e002      	b.n	80084c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80084c6:	4a04      	ldr	r2, [pc, #16]	@ (80084d8 <prvSampleTimeNow+0x3c>)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80084cc:	68fb      	ldr	r3, [r7, #12]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	20001160 	.word	0x20001160

080084dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
 80084e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80084ea:	2300      	movs	r3, #0
 80084ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d812      	bhi.n	8008528 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	1ad2      	subs	r2, r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	429a      	cmp	r2, r3
 800850e:	d302      	bcc.n	8008516 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008510:	2301      	movs	r3, #1
 8008512:	617b      	str	r3, [r7, #20]
 8008514:	e01b      	b.n	800854e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008516:	4b10      	ldr	r3, [pc, #64]	@ (8008558 <prvInsertTimerInActiveList+0x7c>)
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3304      	adds	r3, #4
 800851e:	4619      	mov	r1, r3
 8008520:	4610      	mov	r0, r2
 8008522:	f7fd ffc0 	bl	80064a6 <vListInsert>
 8008526:	e012      	b.n	800854e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	429a      	cmp	r2, r3
 800852e:	d206      	bcs.n	800853e <prvInsertTimerInActiveList+0x62>
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	429a      	cmp	r2, r3
 8008536:	d302      	bcc.n	800853e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008538:	2301      	movs	r3, #1
 800853a:	617b      	str	r3, [r7, #20]
 800853c:	e007      	b.n	800854e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800853e:	4b07      	ldr	r3, [pc, #28]	@ (800855c <prvInsertTimerInActiveList+0x80>)
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3304      	adds	r3, #4
 8008546:	4619      	mov	r1, r3
 8008548:	4610      	mov	r0, r2
 800854a:	f7fd ffac 	bl	80064a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800854e:	697b      	ldr	r3, [r7, #20]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	20001154 	.word	0x20001154
 800855c:	20001150 	.word	0x20001150

08008560 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b08e      	sub	sp, #56	@ 0x38
 8008564:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008566:	e0ce      	b.n	8008706 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	da19      	bge.n	80085a2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800856e:	1d3b      	adds	r3, r7, #4
 8008570:	3304      	adds	r3, #4
 8008572:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10b      	bne.n	8008592 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	61fb      	str	r3, [r7, #28]
}
 800858c:	bf00      	nop
 800858e:	bf00      	nop
 8008590:	e7fd      	b.n	800858e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008598:	6850      	ldr	r0, [r2, #4]
 800859a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800859c:	6892      	ldr	r2, [r2, #8]
 800859e:	4611      	mov	r1, r2
 80085a0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f2c0 80ae 	blt.w	8008706 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80085ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d004      	beq.n	80085c0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b8:	3304      	adds	r3, #4
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fd ffac 	bl	8006518 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085c0:	463b      	mov	r3, r7
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7ff ff6a 	bl	800849c <prvSampleTimeNow>
 80085c8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b09      	cmp	r3, #9
 80085ce:	f200 8097 	bhi.w	8008700 <prvProcessReceivedCommands+0x1a0>
 80085d2:	a201      	add	r2, pc, #4	@ (adr r2, 80085d8 <prvProcessReceivedCommands+0x78>)
 80085d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d8:	08008601 	.word	0x08008601
 80085dc:	08008601 	.word	0x08008601
 80085e0:	08008601 	.word	0x08008601
 80085e4:	08008677 	.word	0x08008677
 80085e8:	0800868b 	.word	0x0800868b
 80085ec:	080086d7 	.word	0x080086d7
 80085f0:	08008601 	.word	0x08008601
 80085f4:	08008601 	.word	0x08008601
 80085f8:	08008677 	.word	0x08008677
 80085fc:	0800868b 	.word	0x0800868b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008602:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008606:	f043 0301 	orr.w	r3, r3, #1
 800860a:	b2da      	uxtb	r2, r3
 800860c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	18d1      	adds	r1, r2, r3
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800861e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008620:	f7ff ff5c 	bl	80084dc <prvInsertTimerInActiveList>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d06c      	beq.n	8008704 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800862a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008630:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008634:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008638:	f003 0304 	and.w	r3, r3, #4
 800863c:	2b00      	cmp	r3, #0
 800863e:	d061      	beq.n	8008704 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	441a      	add	r2, r3
 8008648:	2300      	movs	r3, #0
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	2300      	movs	r3, #0
 800864e:	2100      	movs	r1, #0
 8008650:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008652:	f7ff fe01 	bl	8008258 <xTimerGenericCommand>
 8008656:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d152      	bne.n	8008704 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	61bb      	str	r3, [r7, #24]
}
 8008670:	bf00      	nop
 8008672:	bf00      	nop
 8008674:	e7fd      	b.n	8008672 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008678:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800867c:	f023 0301 	bic.w	r3, r3, #1
 8008680:	b2da      	uxtb	r2, r3
 8008682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008684:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008688:	e03d      	b.n	8008706 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800868a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008690:	f043 0301 	orr.w	r3, r3, #1
 8008694:	b2da      	uxtb	r2, r3
 8008696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008698:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80086a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10b      	bne.n	80086c2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	617b      	str	r3, [r7, #20]
}
 80086bc:	bf00      	nop
 80086be:	bf00      	nop
 80086c0:	e7fd      	b.n	80086be <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80086c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c4:	699a      	ldr	r2, [r3, #24]
 80086c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c8:	18d1      	adds	r1, r2, r3
 80086ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086d0:	f7ff ff04 	bl	80084dc <prvInsertTimerInActiveList>
					break;
 80086d4:	e017      	b.n	8008706 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80086d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086dc:	f003 0302 	and.w	r3, r3, #2
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d103      	bne.n	80086ec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80086e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086e6:	f000 fbe7 	bl	8008eb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80086ea:	e00c      	b.n	8008706 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086f2:	f023 0301 	bic.w	r3, r3, #1
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80086fe:	e002      	b.n	8008706 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008700:	bf00      	nop
 8008702:	e000      	b.n	8008706 <prvProcessReceivedCommands+0x1a6>
					break;
 8008704:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008706:	4b08      	ldr	r3, [pc, #32]	@ (8008728 <prvProcessReceivedCommands+0x1c8>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	1d39      	adds	r1, r7, #4
 800870c:	2200      	movs	r2, #0
 800870e:	4618      	mov	r0, r3
 8008710:	f7fe fa12 	bl	8006b38 <xQueueReceive>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	f47f af26 	bne.w	8008568 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800871c:	bf00      	nop
 800871e:	bf00      	nop
 8008720:	3730      	adds	r7, #48	@ 0x30
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20001158 	.word	0x20001158

0800872c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b088      	sub	sp, #32
 8008730:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008732:	e049      	b.n	80087c8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008734:	4b2e      	ldr	r3, [pc, #184]	@ (80087f0 <prvSwitchTimerLists+0xc4>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800873e:	4b2c      	ldr	r3, [pc, #176]	@ (80087f0 <prvSwitchTimerLists+0xc4>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	3304      	adds	r3, #4
 800874c:	4618      	mov	r0, r3
 800874e:	f7fd fee3 	bl	8006518 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008760:	f003 0304 	and.w	r3, r3, #4
 8008764:	2b00      	cmp	r3, #0
 8008766:	d02f      	beq.n	80087c8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	4413      	add	r3, r2
 8008770:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	429a      	cmp	r2, r3
 8008778:	d90e      	bls.n	8008798 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008786:	4b1a      	ldr	r3, [pc, #104]	@ (80087f0 <prvSwitchTimerLists+0xc4>)
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	3304      	adds	r3, #4
 800878e:	4619      	mov	r1, r3
 8008790:	4610      	mov	r0, r2
 8008792:	f7fd fe88 	bl	80064a6 <vListInsert>
 8008796:	e017      	b.n	80087c8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008798:	2300      	movs	r3, #0
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	2300      	movs	r3, #0
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	2100      	movs	r1, #0
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f7ff fd58 	bl	8008258 <xTimerGenericCommand>
 80087a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10b      	bne.n	80087c8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	603b      	str	r3, [r7, #0]
}
 80087c2:	bf00      	nop
 80087c4:	bf00      	nop
 80087c6:	e7fd      	b.n	80087c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087c8:	4b09      	ldr	r3, [pc, #36]	@ (80087f0 <prvSwitchTimerLists+0xc4>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1b0      	bne.n	8008734 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80087d2:	4b07      	ldr	r3, [pc, #28]	@ (80087f0 <prvSwitchTimerLists+0xc4>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80087d8:	4b06      	ldr	r3, [pc, #24]	@ (80087f4 <prvSwitchTimerLists+0xc8>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a04      	ldr	r2, [pc, #16]	@ (80087f0 <prvSwitchTimerLists+0xc4>)
 80087de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80087e0:	4a04      	ldr	r2, [pc, #16]	@ (80087f4 <prvSwitchTimerLists+0xc8>)
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	6013      	str	r3, [r2, #0]
}
 80087e6:	bf00      	nop
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20001150 	.word	0x20001150
 80087f4:	20001154 	.word	0x20001154

080087f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80087fe:	f000 f96b 	bl	8008ad8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008802:	4b15      	ldr	r3, [pc, #84]	@ (8008858 <prvCheckForValidListAndQueue+0x60>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d120      	bne.n	800884c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800880a:	4814      	ldr	r0, [pc, #80]	@ (800885c <prvCheckForValidListAndQueue+0x64>)
 800880c:	f7fd fdfa 	bl	8006404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008810:	4813      	ldr	r0, [pc, #76]	@ (8008860 <prvCheckForValidListAndQueue+0x68>)
 8008812:	f7fd fdf7 	bl	8006404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008816:	4b13      	ldr	r3, [pc, #76]	@ (8008864 <prvCheckForValidListAndQueue+0x6c>)
 8008818:	4a10      	ldr	r2, [pc, #64]	@ (800885c <prvCheckForValidListAndQueue+0x64>)
 800881a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800881c:	4b12      	ldr	r3, [pc, #72]	@ (8008868 <prvCheckForValidListAndQueue+0x70>)
 800881e:	4a10      	ldr	r2, [pc, #64]	@ (8008860 <prvCheckForValidListAndQueue+0x68>)
 8008820:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008822:	2300      	movs	r3, #0
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	4b11      	ldr	r3, [pc, #68]	@ (800886c <prvCheckForValidListAndQueue+0x74>)
 8008828:	4a11      	ldr	r2, [pc, #68]	@ (8008870 <prvCheckForValidListAndQueue+0x78>)
 800882a:	2110      	movs	r1, #16
 800882c:	200a      	movs	r0, #10
 800882e:	f7fd ff07 	bl	8006640 <xQueueGenericCreateStatic>
 8008832:	4603      	mov	r3, r0
 8008834:	4a08      	ldr	r2, [pc, #32]	@ (8008858 <prvCheckForValidListAndQueue+0x60>)
 8008836:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008838:	4b07      	ldr	r3, [pc, #28]	@ (8008858 <prvCheckForValidListAndQueue+0x60>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d005      	beq.n	800884c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008840:	4b05      	ldr	r3, [pc, #20]	@ (8008858 <prvCheckForValidListAndQueue+0x60>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	490b      	ldr	r1, [pc, #44]	@ (8008874 <prvCheckForValidListAndQueue+0x7c>)
 8008846:	4618      	mov	r0, r3
 8008848:	f7fe fbea 	bl	8007020 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800884c:	f000 f976 	bl	8008b3c <vPortExitCritical>
}
 8008850:	bf00      	nop
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	20001158 	.word	0x20001158
 800885c:	20001128 	.word	0x20001128
 8008860:	2000113c 	.word	0x2000113c
 8008864:	20001150 	.word	0x20001150
 8008868:	20001154 	.word	0x20001154
 800886c:	20001204 	.word	0x20001204
 8008870:	20001164 	.word	0x20001164
 8008874:	0800df94 	.word	0x0800df94

08008878 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	3b04      	subs	r3, #4
 8008888:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3b04      	subs	r3, #4
 8008896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	f023 0201 	bic.w	r2, r3, #1
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3b04      	subs	r3, #4
 80088a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088a8:	4a0c      	ldr	r2, [pc, #48]	@ (80088dc <pxPortInitialiseStack+0x64>)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3b14      	subs	r3, #20
 80088b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3b04      	subs	r3, #4
 80088be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f06f 0202 	mvn.w	r2, #2
 80088c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3b20      	subs	r3, #32
 80088cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088ce:	68fb      	ldr	r3, [r7, #12]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	080088e1 	.word	0x080088e1

080088e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80088e6:	2300      	movs	r3, #0
 80088e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088ea:	4b13      	ldr	r3, [pc, #76]	@ (8008938 <prvTaskExitError+0x58>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f2:	d00b      	beq.n	800890c <prvTaskExitError+0x2c>
	__asm volatile
 80088f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	60fb      	str	r3, [r7, #12]
}
 8008906:	bf00      	nop
 8008908:	bf00      	nop
 800890a:	e7fd      	b.n	8008908 <prvTaskExitError+0x28>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	60bb      	str	r3, [r7, #8]
}
 800891e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008920:	bf00      	nop
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0fc      	beq.n	8008922 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008928:	bf00      	nop
 800892a:	bf00      	nop
 800892c:	3714      	adds	r7, #20
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	20000174 	.word	0x20000174
 800893c:	00000000 	.word	0x00000000

08008940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008940:	4b07      	ldr	r3, [pc, #28]	@ (8008960 <pxCurrentTCBConst2>)
 8008942:	6819      	ldr	r1, [r3, #0]
 8008944:	6808      	ldr	r0, [r1, #0]
 8008946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894a:	f380 8809 	msr	PSP, r0
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f04f 0000 	mov.w	r0, #0
 8008956:	f380 8811 	msr	BASEPRI, r0
 800895a:	4770      	bx	lr
 800895c:	f3af 8000 	nop.w

08008960 <pxCurrentTCBConst2>:
 8008960:	20000c28 	.word	0x20000c28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop

08008968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008968:	4808      	ldr	r0, [pc, #32]	@ (800898c <prvPortStartFirstTask+0x24>)
 800896a:	6800      	ldr	r0, [r0, #0]
 800896c:	6800      	ldr	r0, [r0, #0]
 800896e:	f380 8808 	msr	MSP, r0
 8008972:	f04f 0000 	mov.w	r0, #0
 8008976:	f380 8814 	msr	CONTROL, r0
 800897a:	b662      	cpsie	i
 800897c:	b661      	cpsie	f
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	df00      	svc	0
 8008988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800898a:	bf00      	nop
 800898c:	e000ed08 	.word	0xe000ed08

08008990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008996:	4b47      	ldr	r3, [pc, #284]	@ (8008ab4 <xPortStartScheduler+0x124>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a47      	ldr	r2, [pc, #284]	@ (8008ab8 <xPortStartScheduler+0x128>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d10b      	bne.n	80089b8 <xPortStartScheduler+0x28>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	613b      	str	r3, [r7, #16]
}
 80089b2:	bf00      	nop
 80089b4:	bf00      	nop
 80089b6:	e7fd      	b.n	80089b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80089b8:	4b3e      	ldr	r3, [pc, #248]	@ (8008ab4 <xPortStartScheduler+0x124>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a3f      	ldr	r2, [pc, #252]	@ (8008abc <xPortStartScheduler+0x12c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d10b      	bne.n	80089da <xPortStartScheduler+0x4a>
	__asm volatile
 80089c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c6:	f383 8811 	msr	BASEPRI, r3
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	60fb      	str	r3, [r7, #12]
}
 80089d4:	bf00      	nop
 80089d6:	bf00      	nop
 80089d8:	e7fd      	b.n	80089d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80089da:	4b39      	ldr	r3, [pc, #228]	@ (8008ac0 <xPortStartScheduler+0x130>)
 80089dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	22ff      	movs	r2, #255	@ 0xff
 80089ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089f4:	78fb      	ldrb	r3, [r7, #3]
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	4b31      	ldr	r3, [pc, #196]	@ (8008ac4 <xPortStartScheduler+0x134>)
 8008a00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a02:	4b31      	ldr	r3, [pc, #196]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a04:	2207      	movs	r2, #7
 8008a06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a08:	e009      	b.n	8008a1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	4a2d      	ldr	r2, [pc, #180]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a14:	78fb      	ldrb	r3, [r7, #3]
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a1e:	78fb      	ldrb	r3, [r7, #3]
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a26:	2b80      	cmp	r3, #128	@ 0x80
 8008a28:	d0ef      	beq.n	8008a0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a2a:	4b27      	ldr	r3, [pc, #156]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f1c3 0307 	rsb	r3, r3, #7
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d00b      	beq.n	8008a4e <xPortStartScheduler+0xbe>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	60bb      	str	r3, [r7, #8]
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	e7fd      	b.n	8008a4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	021b      	lsls	r3, r3, #8
 8008a54:	4a1c      	ldr	r2, [pc, #112]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a58:	4b1b      	ldr	r3, [pc, #108]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a60:	4a19      	ldr	r2, [pc, #100]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a6c:	4b17      	ldr	r3, [pc, #92]	@ (8008acc <xPortStartScheduler+0x13c>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a16      	ldr	r2, [pc, #88]	@ (8008acc <xPortStartScheduler+0x13c>)
 8008a72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008a76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a78:	4b14      	ldr	r3, [pc, #80]	@ (8008acc <xPortStartScheduler+0x13c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a13      	ldr	r2, [pc, #76]	@ (8008acc <xPortStartScheduler+0x13c>)
 8008a7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008a82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a84:	f000 f8da 	bl	8008c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a88:	4b11      	ldr	r3, [pc, #68]	@ (8008ad0 <xPortStartScheduler+0x140>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a8e:	f000 f8f9 	bl	8008c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a92:	4b10      	ldr	r3, [pc, #64]	@ (8008ad4 <xPortStartScheduler+0x144>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a0f      	ldr	r2, [pc, #60]	@ (8008ad4 <xPortStartScheduler+0x144>)
 8008a98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008a9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a9e:	f7ff ff63 	bl	8008968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008aa2:	f7ff f805 	bl	8007ab0 <vTaskSwitchContext>
	prvTaskExitError();
 8008aa6:	f7ff ff1b 	bl	80088e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	e000ed00 	.word	0xe000ed00
 8008ab8:	410fc271 	.word	0x410fc271
 8008abc:	410fc270 	.word	0x410fc270
 8008ac0:	e000e400 	.word	0xe000e400
 8008ac4:	20001254 	.word	0x20001254
 8008ac8:	20001258 	.word	0x20001258
 8008acc:	e000ed20 	.word	0xe000ed20
 8008ad0:	20000174 	.word	0x20000174
 8008ad4:	e000ef34 	.word	0xe000ef34

08008ad8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	607b      	str	r3, [r7, #4]
}
 8008af0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008af2:	4b10      	ldr	r3, [pc, #64]	@ (8008b34 <vPortEnterCritical+0x5c>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3301      	adds	r3, #1
 8008af8:	4a0e      	ldr	r2, [pc, #56]	@ (8008b34 <vPortEnterCritical+0x5c>)
 8008afa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008afc:	4b0d      	ldr	r3, [pc, #52]	@ (8008b34 <vPortEnterCritical+0x5c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d110      	bne.n	8008b26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b04:	4b0c      	ldr	r3, [pc, #48]	@ (8008b38 <vPortEnterCritical+0x60>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00b      	beq.n	8008b26 <vPortEnterCritical+0x4e>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	603b      	str	r3, [r7, #0]
}
 8008b20:	bf00      	nop
 8008b22:	bf00      	nop
 8008b24:	e7fd      	b.n	8008b22 <vPortEnterCritical+0x4a>
	}
}
 8008b26:	bf00      	nop
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	20000174 	.word	0x20000174
 8008b38:	e000ed04 	.word	0xe000ed04

08008b3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b42:	4b12      	ldr	r3, [pc, #72]	@ (8008b8c <vPortExitCritical+0x50>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10b      	bne.n	8008b62 <vPortExitCritical+0x26>
	__asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	607b      	str	r3, [r7, #4]
}
 8008b5c:	bf00      	nop
 8008b5e:	bf00      	nop
 8008b60:	e7fd      	b.n	8008b5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b62:	4b0a      	ldr	r3, [pc, #40]	@ (8008b8c <vPortExitCritical+0x50>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	4a08      	ldr	r2, [pc, #32]	@ (8008b8c <vPortExitCritical+0x50>)
 8008b6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b6c:	4b07      	ldr	r3, [pc, #28]	@ (8008b8c <vPortExitCritical+0x50>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d105      	bne.n	8008b80 <vPortExitCritical+0x44>
 8008b74:	2300      	movs	r3, #0
 8008b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	f383 8811 	msr	BASEPRI, r3
}
 8008b7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	20000174 	.word	0x20000174

08008b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b90:	f3ef 8009 	mrs	r0, PSP
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	4b15      	ldr	r3, [pc, #84]	@ (8008bf0 <pxCurrentTCBConst>)
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	f01e 0f10 	tst.w	lr, #16
 8008ba0:	bf08      	it	eq
 8008ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008baa:	6010      	str	r0, [r2, #0]
 8008bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008bb4:	f380 8811 	msr	BASEPRI, r0
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f7fe ff76 	bl	8007ab0 <vTaskSwitchContext>
 8008bc4:	f04f 0000 	mov.w	r0, #0
 8008bc8:	f380 8811 	msr	BASEPRI, r0
 8008bcc:	bc09      	pop	{r0, r3}
 8008bce:	6819      	ldr	r1, [r3, #0]
 8008bd0:	6808      	ldr	r0, [r1, #0]
 8008bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd6:	f01e 0f10 	tst.w	lr, #16
 8008bda:	bf08      	it	eq
 8008bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008be0:	f380 8809 	msr	PSP, r0
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	f3af 8000 	nop.w

08008bf0 <pxCurrentTCBConst>:
 8008bf0:	20000c28 	.word	0x20000c28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop

08008bf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	607b      	str	r3, [r7, #4]
}
 8008c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c12:	f7fe fe93 	bl	800793c <xTaskIncrementTick>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c1c:	4b06      	ldr	r3, [pc, #24]	@ (8008c38 <xPortSysTickHandler+0x40>)
 8008c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	2300      	movs	r3, #0
 8008c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	f383 8811 	msr	BASEPRI, r3
}
 8008c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	e000ed04 	.word	0xe000ed04

08008c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c40:	4b0b      	ldr	r3, [pc, #44]	@ (8008c70 <vPortSetupTimerInterrupt+0x34>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c46:	4b0b      	ldr	r3, [pc, #44]	@ (8008c74 <vPortSetupTimerInterrupt+0x38>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c78 <vPortSetupTimerInterrupt+0x3c>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a0a      	ldr	r2, [pc, #40]	@ (8008c7c <vPortSetupTimerInterrupt+0x40>)
 8008c52:	fba2 2303 	umull	r2, r3, r2, r3
 8008c56:	099b      	lsrs	r3, r3, #6
 8008c58:	4a09      	ldr	r2, [pc, #36]	@ (8008c80 <vPortSetupTimerInterrupt+0x44>)
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c5e:	4b04      	ldr	r3, [pc, #16]	@ (8008c70 <vPortSetupTimerInterrupt+0x34>)
 8008c60:	2207      	movs	r2, #7
 8008c62:	601a      	str	r2, [r3, #0]
}
 8008c64:	bf00      	nop
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	e000e010 	.word	0xe000e010
 8008c74:	e000e018 	.word	0xe000e018
 8008c78:	20000168 	.word	0x20000168
 8008c7c:	10624dd3 	.word	0x10624dd3
 8008c80:	e000e014 	.word	0xe000e014

08008c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008c94 <vPortEnableVFP+0x10>
 8008c88:	6801      	ldr	r1, [r0, #0]
 8008c8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008c8e:	6001      	str	r1, [r0, #0]
 8008c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c92:	bf00      	nop
 8008c94:	e000ed88 	.word	0xe000ed88

08008c98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c9e:	f3ef 8305 	mrs	r3, IPSR
 8008ca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b0f      	cmp	r3, #15
 8008ca8:	d915      	bls.n	8008cd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008caa:	4a18      	ldr	r2, [pc, #96]	@ (8008d0c <vPortValidateInterruptPriority+0x74>)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4413      	add	r3, r2
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008cb4:	4b16      	ldr	r3, [pc, #88]	@ (8008d10 <vPortValidateInterruptPriority+0x78>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	7afa      	ldrb	r2, [r7, #11]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d20b      	bcs.n	8008cd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	607b      	str	r3, [r7, #4]
}
 8008cd0:	bf00      	nop
 8008cd2:	bf00      	nop
 8008cd4:	e7fd      	b.n	8008cd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8008d14 <vPortValidateInterruptPriority+0x7c>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008cde:	4b0e      	ldr	r3, [pc, #56]	@ (8008d18 <vPortValidateInterruptPriority+0x80>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d90b      	bls.n	8008cfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	603b      	str	r3, [r7, #0]
}
 8008cf8:	bf00      	nop
 8008cfa:	bf00      	nop
 8008cfc:	e7fd      	b.n	8008cfa <vPortValidateInterruptPriority+0x62>
	}
 8008cfe:	bf00      	nop
 8008d00:	3714      	adds	r7, #20
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	e000e3f0 	.word	0xe000e3f0
 8008d10:	20001254 	.word	0x20001254
 8008d14:	e000ed0c 	.word	0xe000ed0c
 8008d18:	20001258 	.word	0x20001258

08008d1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08a      	sub	sp, #40	@ 0x28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d24:	2300      	movs	r3, #0
 8008d26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d28:	f7fe fd3a 	bl	80077a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d2c:	4b5c      	ldr	r3, [pc, #368]	@ (8008ea0 <pvPortMalloc+0x184>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d101      	bne.n	8008d38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d34:	f000 f924 	bl	8008f80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d38:	4b5a      	ldr	r3, [pc, #360]	@ (8008ea4 <pvPortMalloc+0x188>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f040 8095 	bne.w	8008e70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d01e      	beq.n	8008d8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008d4c:	2208      	movs	r2, #8
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4413      	add	r3, r2
 8008d52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f003 0307 	and.w	r3, r3, #7
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d015      	beq.n	8008d8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f023 0307 	bic.w	r3, r3, #7
 8008d64:	3308      	adds	r3, #8
 8008d66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f003 0307 	and.w	r3, r3, #7
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00b      	beq.n	8008d8a <pvPortMalloc+0x6e>
	__asm volatile
 8008d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	617b      	str	r3, [r7, #20]
}
 8008d84:	bf00      	nop
 8008d86:	bf00      	nop
 8008d88:	e7fd      	b.n	8008d86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d06f      	beq.n	8008e70 <pvPortMalloc+0x154>
 8008d90:	4b45      	ldr	r3, [pc, #276]	@ (8008ea8 <pvPortMalloc+0x18c>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d86a      	bhi.n	8008e70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d9a:	4b44      	ldr	r3, [pc, #272]	@ (8008eac <pvPortMalloc+0x190>)
 8008d9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d9e:	4b43      	ldr	r3, [pc, #268]	@ (8008eac <pvPortMalloc+0x190>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008da4:	e004      	b.n	8008db0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d903      	bls.n	8008dc2 <pvPortMalloc+0xa6>
 8008dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1f1      	bne.n	8008da6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008dc2:	4b37      	ldr	r3, [pc, #220]	@ (8008ea0 <pvPortMalloc+0x184>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d051      	beq.n	8008e70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2208      	movs	r2, #8
 8008dd2:	4413      	add	r3, r2
 8008dd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de0:	685a      	ldr	r2, [r3, #4]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	1ad2      	subs	r2, r2, r3
 8008de6:	2308      	movs	r3, #8
 8008de8:	005b      	lsls	r3, r3, #1
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d920      	bls.n	8008e30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4413      	add	r3, r2
 8008df4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	f003 0307 	and.w	r3, r3, #7
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00b      	beq.n	8008e18 <pvPortMalloc+0xfc>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	613b      	str	r3, [r7, #16]
}
 8008e12:	bf00      	nop
 8008e14:	bf00      	nop
 8008e16:	e7fd      	b.n	8008e14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	1ad2      	subs	r2, r2, r3
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e2a:	69b8      	ldr	r0, [r7, #24]
 8008e2c:	f000 f90a 	bl	8009044 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e30:	4b1d      	ldr	r3, [pc, #116]	@ (8008ea8 <pvPortMalloc+0x18c>)
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ea8 <pvPortMalloc+0x18c>)
 8008e3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ea8 <pvPortMalloc+0x18c>)
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	4b1b      	ldr	r3, [pc, #108]	@ (8008eb0 <pvPortMalloc+0x194>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d203      	bcs.n	8008e52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e4a:	4b17      	ldr	r3, [pc, #92]	@ (8008ea8 <pvPortMalloc+0x18c>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a18      	ldr	r2, [pc, #96]	@ (8008eb0 <pvPortMalloc+0x194>)
 8008e50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e54:	685a      	ldr	r2, [r3, #4]
 8008e56:	4b13      	ldr	r3, [pc, #76]	@ (8008ea4 <pvPortMalloc+0x188>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	431a      	orrs	r2, r3
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e66:	4b13      	ldr	r3, [pc, #76]	@ (8008eb4 <pvPortMalloc+0x198>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	4a11      	ldr	r2, [pc, #68]	@ (8008eb4 <pvPortMalloc+0x198>)
 8008e6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e70:	f7fe fca4 	bl	80077bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	f003 0307 	and.w	r3, r3, #7
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00b      	beq.n	8008e96 <pvPortMalloc+0x17a>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	60fb      	str	r3, [r7, #12]
}
 8008e90:	bf00      	nop
 8008e92:	bf00      	nop
 8008e94:	e7fd      	b.n	8008e92 <pvPortMalloc+0x176>
	return pvReturn;
 8008e96:	69fb      	ldr	r3, [r7, #28]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3728      	adds	r7, #40	@ 0x28
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	20004e64 	.word	0x20004e64
 8008ea4:	20004e78 	.word	0x20004e78
 8008ea8:	20004e68 	.word	0x20004e68
 8008eac:	20004e5c 	.word	0x20004e5c
 8008eb0:	20004e6c 	.word	0x20004e6c
 8008eb4:	20004e70 	.word	0x20004e70

08008eb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d04f      	beq.n	8008f6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008eca:	2308      	movs	r3, #8
 8008ecc:	425b      	negs	r3, r3
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	4b25      	ldr	r3, [pc, #148]	@ (8008f74 <vPortFree+0xbc>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10b      	bne.n	8008efe <vPortFree+0x46>
	__asm volatile
 8008ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eea:	f383 8811 	msr	BASEPRI, r3
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	60fb      	str	r3, [r7, #12]
}
 8008ef8:	bf00      	nop
 8008efa:	bf00      	nop
 8008efc:	e7fd      	b.n	8008efa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00b      	beq.n	8008f1e <vPortFree+0x66>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	60bb      	str	r3, [r7, #8]
}
 8008f18:	bf00      	nop
 8008f1a:	bf00      	nop
 8008f1c:	e7fd      	b.n	8008f1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	4b14      	ldr	r3, [pc, #80]	@ (8008f74 <vPortFree+0xbc>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4013      	ands	r3, r2
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d01e      	beq.n	8008f6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d11a      	bne.n	8008f6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	4b0e      	ldr	r3, [pc, #56]	@ (8008f74 <vPortFree+0xbc>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	43db      	mvns	r3, r3
 8008f3e:	401a      	ands	r2, r3
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f44:	f7fe fc2c 	bl	80077a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008f78 <vPortFree+0xc0>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4413      	add	r3, r2
 8008f52:	4a09      	ldr	r2, [pc, #36]	@ (8008f78 <vPortFree+0xc0>)
 8008f54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f56:	6938      	ldr	r0, [r7, #16]
 8008f58:	f000 f874 	bl	8009044 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f5c:	4b07      	ldr	r3, [pc, #28]	@ (8008f7c <vPortFree+0xc4>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3301      	adds	r3, #1
 8008f62:	4a06      	ldr	r2, [pc, #24]	@ (8008f7c <vPortFree+0xc4>)
 8008f64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f66:	f7fe fc29 	bl	80077bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f6a:	bf00      	nop
 8008f6c:	3718      	adds	r7, #24
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20004e78 	.word	0x20004e78
 8008f78:	20004e68 	.word	0x20004e68
 8008f7c:	20004e74 	.word	0x20004e74

08008f80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008f8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f8c:	4b27      	ldr	r3, [pc, #156]	@ (800902c <prvHeapInit+0xac>)
 8008f8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f003 0307 	and.w	r3, r3, #7
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00c      	beq.n	8008fb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	3307      	adds	r3, #7
 8008f9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f023 0307 	bic.w	r3, r3, #7
 8008fa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	4a1f      	ldr	r2, [pc, #124]	@ (800902c <prvHeapInit+0xac>)
 8008fb0:	4413      	add	r3, r2
 8008fb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8009030 <prvHeapInit+0xb0>)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8009030 <prvHeapInit+0xb0>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	4413      	add	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fcc:	2208      	movs	r2, #8
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	1a9b      	subs	r3, r3, r2
 8008fd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f023 0307 	bic.w	r3, r3, #7
 8008fda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4a15      	ldr	r2, [pc, #84]	@ (8009034 <prvHeapInit+0xb4>)
 8008fe0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008fe2:	4b14      	ldr	r3, [pc, #80]	@ (8009034 <prvHeapInit+0xb4>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fea:	4b12      	ldr	r3, [pc, #72]	@ (8009034 <prvHeapInit+0xb4>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	1ad2      	subs	r2, r2, r3
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009000:	4b0c      	ldr	r3, [pc, #48]	@ (8009034 <prvHeapInit+0xb4>)
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	4a0a      	ldr	r2, [pc, #40]	@ (8009038 <prvHeapInit+0xb8>)
 800900e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	4a09      	ldr	r2, [pc, #36]	@ (800903c <prvHeapInit+0xbc>)
 8009016:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009018:	4b09      	ldr	r3, [pc, #36]	@ (8009040 <prvHeapInit+0xc0>)
 800901a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800901e:	601a      	str	r2, [r3, #0]
}
 8009020:	bf00      	nop
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	2000125c 	.word	0x2000125c
 8009030:	20004e5c 	.word	0x20004e5c
 8009034:	20004e64 	.word	0x20004e64
 8009038:	20004e6c 	.word	0x20004e6c
 800903c:	20004e68 	.word	0x20004e68
 8009040:	20004e78 	.word	0x20004e78

08009044 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800904c:	4b28      	ldr	r3, [pc, #160]	@ (80090f0 <prvInsertBlockIntoFreeList+0xac>)
 800904e:	60fb      	str	r3, [r7, #12]
 8009050:	e002      	b.n	8009058 <prvInsertBlockIntoFreeList+0x14>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	429a      	cmp	r2, r3
 8009060:	d8f7      	bhi.n	8009052 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	4413      	add	r3, r2
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	429a      	cmp	r2, r3
 8009072:	d108      	bne.n	8009086 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	441a      	add	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	441a      	add	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d118      	bne.n	80090cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	4b15      	ldr	r3, [pc, #84]	@ (80090f4 <prvInsertBlockIntoFreeList+0xb0>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d00d      	beq.n	80090c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	685a      	ldr	r2, [r3, #4]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	441a      	add	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	e008      	b.n	80090d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090c2:	4b0c      	ldr	r3, [pc, #48]	@ (80090f4 <prvInsertBlockIntoFreeList+0xb0>)
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	601a      	str	r2, [r3, #0]
 80090ca:	e003      	b.n	80090d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d002      	beq.n	80090e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090e2:	bf00      	nop
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	20004e5c 	.word	0x20004e5c
 80090f4:	20004e64 	.word	0x20004e64

080090f8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80090f8:	b580      	push	{r7, lr}
 80090fa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80090fc:	4803      	ldr	r0, [pc, #12]	@ (800910c <_cbSendSystemDesc+0x14>)
 80090fe:	f001 fc65 	bl	800a9cc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8009102:	4803      	ldr	r0, [pc, #12]	@ (8009110 <_cbSendSystemDesc+0x18>)
 8009104:	f001 fc62 	bl	800a9cc <SEGGER_SYSVIEW_SendSysDesc>
}
 8009108:	bf00      	nop
 800910a:	bd80      	pop	{r7, pc}
 800910c:	0800df9c 	.word	0x0800df9c
 8009110:	0800dfe0 	.word	0x0800dfe0

08009114 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8009114:	b580      	push	{r7, lr}
 8009116:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8009118:	4b06      	ldr	r3, [pc, #24]	@ (8009134 <SEGGER_SYSVIEW_Conf+0x20>)
 800911a:	6818      	ldr	r0, [r3, #0]
 800911c:	4b05      	ldr	r3, [pc, #20]	@ (8009134 <SEGGER_SYSVIEW_Conf+0x20>)
 800911e:	6819      	ldr	r1, [r3, #0]
 8009120:	4b05      	ldr	r3, [pc, #20]	@ (8009138 <SEGGER_SYSVIEW_Conf+0x24>)
 8009122:	4a06      	ldr	r2, [pc, #24]	@ (800913c <SEGGER_SYSVIEW_Conf+0x28>)
 8009124:	f001 f8d6 	bl	800a2d4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8009128:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800912c:	f001 f916 	bl	800a35c <SEGGER_SYSVIEW_SetRAMBase>
}
 8009130:	bf00      	nop
 8009132:	bd80      	pop	{r7, pc}
 8009134:	20000168 	.word	0x20000168
 8009138:	080090f9 	.word	0x080090f9
 800913c:	0800e180 	.word	0x0800e180

08009140 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8009140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009142:	b085      	sub	sp, #20
 8009144:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8009146:	2300      	movs	r3, #0
 8009148:	607b      	str	r3, [r7, #4]
 800914a:	e048      	b.n	80091de <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800914c:	4929      	ldr	r1, [pc, #164]	@ (80091f4 <_cbSendTaskList+0xb4>)
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	440b      	add	r3, r1
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4618      	mov	r0, r3
 800915e:	f7fe fee3 	bl	8007f28 <uxTaskGetStackHighWaterMark>
 8009162:	4601      	mov	r1, r0
 8009164:	4823      	ldr	r0, [pc, #140]	@ (80091f4 <_cbSendTaskList+0xb4>)
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	4613      	mov	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	4413      	add	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4403      	add	r3, r0
 8009172:	3310      	adds	r3, #16
 8009174:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8009176:	491f      	ldr	r1, [pc, #124]	@ (80091f4 <_cbSendTaskList+0xb4>)
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	4613      	mov	r3, r2
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	4413      	add	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	440b      	add	r3, r1
 8009184:	6818      	ldr	r0, [r3, #0]
 8009186:	491b      	ldr	r1, [pc, #108]	@ (80091f4 <_cbSendTaskList+0xb4>)
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	4613      	mov	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4413      	add	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	440b      	add	r3, r1
 8009194:	3304      	adds	r3, #4
 8009196:	6819      	ldr	r1, [r3, #0]
 8009198:	4c16      	ldr	r4, [pc, #88]	@ (80091f4 <_cbSendTaskList+0xb4>)
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	4613      	mov	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	4413      	add	r3, r2
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4423      	add	r3, r4
 80091a6:	3308      	adds	r3, #8
 80091a8:	681c      	ldr	r4, [r3, #0]
 80091aa:	4d12      	ldr	r5, [pc, #72]	@ (80091f4 <_cbSendTaskList+0xb4>)
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	4613      	mov	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4413      	add	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	442b      	add	r3, r5
 80091b8:	330c      	adds	r3, #12
 80091ba:	681d      	ldr	r5, [r3, #0]
 80091bc:	4e0d      	ldr	r6, [pc, #52]	@ (80091f4 <_cbSendTaskList+0xb4>)
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	4613      	mov	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4433      	add	r3, r6
 80091ca:	3310      	adds	r3, #16
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	462b      	mov	r3, r5
 80091d2:	4622      	mov	r2, r4
 80091d4:	f000 f855 	bl	8009282 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	3301      	adds	r3, #1
 80091dc:	607b      	str	r3, [r7, #4]
 80091de:	4b06      	ldr	r3, [pc, #24]	@ (80091f8 <_cbSendTaskList+0xb8>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d3b1      	bcc.n	800914c <_cbSendTaskList+0xc>
  }
}
 80091e8:	bf00      	nop
 80091ea:	bf00      	nop
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091f2:	bf00      	nop
 80091f4:	20004e7c 	.word	0x20004e7c
 80091f8:	20004f1c 	.word	0x20004f1c

080091fc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80091fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009200:	b082      	sub	sp, #8
 8009202:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8009204:	f7fe fb88 	bl	8007918 <xTaskGetTickCountFromISR>
 8009208:	4603      	mov	r3, r0
 800920a:	2200      	movs	r2, #0
 800920c:	469a      	mov	sl, r3
 800920e:	4693      	mov	fp, r2
 8009210:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8009214:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	f04f 0a00 	mov.w	sl, #0
 8009220:	f04f 0b00 	mov.w	fp, #0
 8009224:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8009228:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800922c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8009230:	4652      	mov	r2, sl
 8009232:	465b      	mov	r3, fp
 8009234:	1a14      	subs	r4, r2, r0
 8009236:	eb63 0501 	sbc.w	r5, r3, r1
 800923a:	f04f 0200 	mov.w	r2, #0
 800923e:	f04f 0300 	mov.w	r3, #0
 8009242:	00ab      	lsls	r3, r5, #2
 8009244:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8009248:	00a2      	lsls	r2, r4, #2
 800924a:	4614      	mov	r4, r2
 800924c:	461d      	mov	r5, r3
 800924e:	eb14 0800 	adds.w	r8, r4, r0
 8009252:	eb45 0901 	adc.w	r9, r5, r1
 8009256:	f04f 0200 	mov.w	r2, #0
 800925a:	f04f 0300 	mov.w	r3, #0
 800925e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800926a:	4690      	mov	r8, r2
 800926c:	4699      	mov	r9, r3
 800926e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8009272:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8009276:	4610      	mov	r0, r2
 8009278:	4619      	mov	r1, r3
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009282 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8009282:	b580      	push	{r7, lr}
 8009284:	b08a      	sub	sp, #40	@ 0x28
 8009286:	af00      	add	r7, sp, #0
 8009288:	60f8      	str	r0, [r7, #12]
 800928a:	60b9      	str	r1, [r7, #8]
 800928c:	607a      	str	r2, [r7, #4]
 800928e:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8009290:	f107 0310 	add.w	r3, r7, #16
 8009294:	2218      	movs	r2, #24
 8009296:	2100      	movs	r1, #0
 8009298:	4618      	mov	r0, r3
 800929a:	f002 fbb9 	bl	800ba10 <memset>
  TaskInfo.TaskID     = TaskID;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80092ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b0:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80092b2:	f107 0310 	add.w	r3, r7, #16
 80092b6:	4618      	mov	r0, r3
 80092b8:	f001 fa90 	bl	800a7dc <SEGGER_SYSVIEW_SendTaskInfo>
}
 80092bc:	bf00      	nop
 80092be:	3728      	adds	r7, #40	@ 0x28
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <__NVIC_EnableIRQ>:
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	4603      	mov	r3, r0
 80092cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	db0b      	blt.n	80092ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80092d6:	79fb      	ldrb	r3, [r7, #7]
 80092d8:	f003 021f 	and.w	r2, r3, #31
 80092dc:	4907      	ldr	r1, [pc, #28]	@ (80092fc <__NVIC_EnableIRQ+0x38>)
 80092de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092e2:	095b      	lsrs	r3, r3, #5
 80092e4:	2001      	movs	r0, #1
 80092e6:	fa00 f202 	lsl.w	r2, r0, r2
 80092ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80092ee:	bf00      	nop
 80092f0:	370c      	adds	r7, #12
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	e000e100 	.word	0xe000e100

08009300 <__NVIC_SetPriority>:
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	6039      	str	r1, [r7, #0]
 800930a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800930c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009310:	2b00      	cmp	r3, #0
 8009312:	db0a      	blt.n	800932a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	b2da      	uxtb	r2, r3
 8009318:	490c      	ldr	r1, [pc, #48]	@ (800934c <__NVIC_SetPriority+0x4c>)
 800931a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800931e:	0112      	lsls	r2, r2, #4
 8009320:	b2d2      	uxtb	r2, r2
 8009322:	440b      	add	r3, r1
 8009324:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009328:	e00a      	b.n	8009340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	b2da      	uxtb	r2, r3
 800932e:	4908      	ldr	r1, [pc, #32]	@ (8009350 <__NVIC_SetPriority+0x50>)
 8009330:	79fb      	ldrb	r3, [r7, #7]
 8009332:	f003 030f 	and.w	r3, r3, #15
 8009336:	3b04      	subs	r3, #4
 8009338:	0112      	lsls	r2, r2, #4
 800933a:	b2d2      	uxtb	r2, r2
 800933c:	440b      	add	r3, r1
 800933e:	761a      	strb	r2, [r3, #24]
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	e000e100 	.word	0xe000e100
 8009350:	e000ed00 	.word	0xe000ed00

08009354 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800935a:	f001 fc73 	bl	800ac44 <SEGGER_SYSVIEW_IsStarted>
 800935e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d101      	bne.n	800936a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8009366:	f001 f8bd 	bl	800a4e4 <SEGGER_SYSVIEW_Start>
  }
}
 800936a:	bf00      	nop
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
	...

08009374 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	4603      	mov	r3, r0
 800937c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800937e:	4b0c      	ldr	r3, [pc, #48]	@ (80093b0 <_cbOnUARTRx+0x3c>)
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	2b03      	cmp	r3, #3
 8009384:	d806      	bhi.n	8009394 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8009386:	4b0a      	ldr	r3, [pc, #40]	@ (80093b0 <_cbOnUARTRx+0x3c>)
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	3301      	adds	r3, #1
 800938c:	b2da      	uxtb	r2, r3
 800938e:	4b08      	ldr	r3, [pc, #32]	@ (80093b0 <_cbOnUARTRx+0x3c>)
 8009390:	701a      	strb	r2, [r3, #0]
    goto Done;
 8009392:	e009      	b.n	80093a8 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8009394:	f7ff ffde 	bl	8009354 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8009398:	4b05      	ldr	r3, [pc, #20]	@ (80093b0 <_cbOnUARTRx+0x3c>)
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	4618      	mov	r0, r3
 800939e:	1dfb      	adds	r3, r7, #7
 80093a0:	2201      	movs	r2, #1
 80093a2:	4619      	mov	r1, r3
 80093a4:	f000 fbec 	bl	8009b80 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80093a8:	bf00      	nop
}
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	20000178 	.word	0x20000178

080093b4 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80093bc:	4b14      	ldr	r3, [pc, #80]	@ (8009410 <_cbOnUARTTx+0x5c>)
 80093be:	785b      	ldrb	r3, [r3, #1]
 80093c0:	2b03      	cmp	r3, #3
 80093c2:	d80f      	bhi.n	80093e4 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80093c4:	4b12      	ldr	r3, [pc, #72]	@ (8009410 <_cbOnUARTTx+0x5c>)
 80093c6:	785b      	ldrb	r3, [r3, #1]
 80093c8:	461a      	mov	r2, r3
 80093ca:	4b12      	ldr	r3, [pc, #72]	@ (8009414 <_cbOnUARTTx+0x60>)
 80093cc:	5c9a      	ldrb	r2, [r3, r2]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80093d2:	4b0f      	ldr	r3, [pc, #60]	@ (8009410 <_cbOnUARTTx+0x5c>)
 80093d4:	785b      	ldrb	r3, [r3, #1]
 80093d6:	3301      	adds	r3, #1
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	4b0d      	ldr	r3, [pc, #52]	@ (8009410 <_cbOnUARTTx+0x5c>)
 80093dc:	705a      	strb	r2, [r3, #1]
    r = 1;
 80093de:	2301      	movs	r3, #1
 80093e0:	60fb      	str	r3, [r7, #12]
    goto Done;
 80093e2:	e00f      	b.n	8009404 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80093e4:	4b0a      	ldr	r3, [pc, #40]	@ (8009410 <_cbOnUARTTx+0x5c>)
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	2201      	movs	r2, #1
 80093ea:	6879      	ldr	r1, [r7, #4]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 fa1b 	bl	8009828 <SEGGER_RTT_ReadUpBufferNoLock>
 80093f2:	4603      	mov	r3, r0
 80093f4:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	da02      	bge.n	8009402 <_cbOnUARTTx+0x4e>
    r = 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	60fb      	str	r3, [r7, #12]
 8009400:	e000      	b.n	8009404 <_cbOnUARTTx+0x50>
  }
Done:
 8009402:	bf00      	nop
  return r;
 8009404:	68fb      	ldr	r3, [r7, #12]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	20000178 	.word	0x20000178
 8009414:	0800e188 	.word	0x0800e188

08009418 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8009420:	4a04      	ldr	r2, [pc, #16]	@ (8009434 <SEGGER_UART_init+0x1c>)
 8009422:	4905      	ldr	r1, [pc, #20]	@ (8009438 <SEGGER_UART_init+0x20>)
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f863 	bl	80094f0 <HIF_UART_Init>
}
 800942a:	bf00      	nop
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	08009375 	.word	0x08009375
 8009438:	080093b5 	.word	0x080093b5

0800943c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8009442:	4b1e      	ldr	r3, [pc, #120]	@ (80094bc <USART2_IRQHandler+0x80>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f003 0320 	and.w	r3, r3, #32
 800944e:	2b00      	cmp	r3, #0
 8009450:	d011      	beq.n	8009476 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8009452:	4b1b      	ldr	r3, [pc, #108]	@ (80094c0 <USART2_IRQHandler+0x84>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	b2db      	uxtb	r3, r3
 8009458:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f003 030b 	and.w	r3, r3, #11
 8009460:	2b00      	cmp	r3, #0
 8009462:	d108      	bne.n	8009476 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8009464:	4b17      	ldr	r3, [pc, #92]	@ (80094c4 <USART2_IRQHandler+0x88>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d004      	beq.n	8009476 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800946c:	4b15      	ldr	r3, [pc, #84]	@ (80094c4 <USART2_IRQHandler+0x88>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	79fa      	ldrb	r2, [r7, #7]
 8009472:	4610      	mov	r0, r2
 8009474:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800947c:	2b00      	cmp	r3, #0
 800947e:	d01a      	beq.n	80094b6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8009480:	4b11      	ldr	r3, [pc, #68]	@ (80094c8 <USART2_IRQHandler+0x8c>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d015      	beq.n	80094b4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8009488:	4b0f      	ldr	r3, [pc, #60]	@ (80094c8 <USART2_IRQHandler+0x8c>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	1dfa      	adds	r2, r7, #7
 800948e:	4610      	mov	r0, r2
 8009490:	4798      	blx	r3
 8009492:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d106      	bne.n	80094a8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800949a:	4b0c      	ldr	r3, [pc, #48]	@ (80094cc <USART2_IRQHandler+0x90>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a0b      	ldr	r2, [pc, #44]	@ (80094cc <USART2_IRQHandler+0x90>)
 80094a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094a4:	6013      	str	r3, [r2, #0]
 80094a6:	e006      	b.n	80094b6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80094a8:	4b04      	ldr	r3, [pc, #16]	@ (80094bc <USART2_IRQHandler+0x80>)
 80094aa:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80094ac:	79fa      	ldrb	r2, [r7, #7]
 80094ae:	4b04      	ldr	r3, [pc, #16]	@ (80094c0 <USART2_IRQHandler+0x84>)
 80094b0:	601a      	str	r2, [r3, #0]
 80094b2:	e000      	b.n	80094b6 <USART2_IRQHandler+0x7a>
      return;
 80094b4:	bf00      	nop
    }
  }
}
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	40004400 	.word	0x40004400
 80094c0:	40004404 	.word	0x40004404
 80094c4:	20004f20 	.word	0x20004f20
 80094c8:	20004f24 	.word	0x20004f24
 80094cc:	4000440c 	.word	0x4000440c

080094d0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80094d0:	b480      	push	{r7}
 80094d2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80094d4:	4b05      	ldr	r3, [pc, #20]	@ (80094ec <HIF_UART_EnableTXEInterrupt+0x1c>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a04      	ldr	r2, [pc, #16]	@ (80094ec <HIF_UART_EnableTXEInterrupt+0x1c>)
 80094da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094de:	6013      	str	r3, [r2, #0]
}
 80094e0:	bf00      	nop
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	4000440c 	.word	0x4000440c

080094f0 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80094fc:	4b2e      	ldr	r3, [pc, #184]	@ (80095b8 <HIF_UART_Init+0xc8>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a2d      	ldr	r2, [pc, #180]	@ (80095b8 <HIF_UART_Init+0xc8>)
 8009502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009506:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8009508:	4b2c      	ldr	r3, [pc, #176]	@ (80095bc <HIF_UART_Init+0xcc>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a2b      	ldr	r2, [pc, #172]	@ (80095bc <HIF_UART_Init+0xcc>)
 800950e:	f043 0301 	orr.w	r3, r3, #1
 8009512:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8009514:	4b2a      	ldr	r3, [pc, #168]	@ (80095c0 <HIF_UART_Init+0xd0>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009520:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8009528:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800952a:	4a25      	ldr	r2, [pc, #148]	@ (80095c0 <HIF_UART_Init+0xd0>)
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8009530:	4b24      	ldr	r3, [pc, #144]	@ (80095c4 <HIF_UART_Init+0xd4>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800953c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8009544:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8009546:	4a1f      	ldr	r2, [pc, #124]	@ (80095c4 <HIF_UART_Init+0xd4>)
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 800954c:	4b1e      	ldr	r3, [pc, #120]	@ (80095c8 <HIF_UART_Init+0xd8>)
 800954e:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8009552:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8009554:	4b1d      	ldr	r3, [pc, #116]	@ (80095cc <HIF_UART_Init+0xdc>)
 8009556:	2200      	movs	r2, #0
 8009558:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800955a:	4b1d      	ldr	r3, [pc, #116]	@ (80095d0 <HIF_UART_Init+0xe0>)
 800955c:	2280      	movs	r2, #128	@ 0x80
 800955e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	00db      	lsls	r3, r3, #3
 8009564:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8009566:	4a1b      	ldr	r2, [pc, #108]	@ (80095d4 <HIF_UART_Init+0xe4>)
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	fbb2 f3f3 	udiv	r3, r2, r3
 800956e:	3301      	adds	r3, #1
 8009570:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	085b      	lsrs	r3, r3, #1
 8009576:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800957e:	d302      	bcc.n	8009586 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8009580:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8009584:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d004      	beq.n	8009596 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	011b      	lsls	r3, r3, #4
 8009590:	4a11      	ldr	r2, [pc, #68]	@ (80095d8 <HIF_UART_Init+0xe8>)
 8009592:	b29b      	uxth	r3, r3
 8009594:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8009596:	4a11      	ldr	r2, [pc, #68]	@ (80095dc <HIF_UART_Init+0xec>)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 800959c:	4a10      	ldr	r2, [pc, #64]	@ (80095e0 <HIF_UART_Init+0xf0>)
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80095a2:	2106      	movs	r1, #6
 80095a4:	2026      	movs	r0, #38	@ 0x26
 80095a6:	f7ff feab 	bl	8009300 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80095aa:	2026      	movs	r0, #38	@ 0x26
 80095ac:	f7ff fe8a 	bl	80092c4 <__NVIC_EnableIRQ>
}
 80095b0:	bf00      	nop
 80095b2:	3718      	adds	r7, #24
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	40023840 	.word	0x40023840
 80095bc:	40023830 	.word	0x40023830
 80095c0:	40020020 	.word	0x40020020
 80095c4:	40020000 	.word	0x40020000
 80095c8:	4000440c 	.word	0x4000440c
 80095cc:	40004410 	.word	0x40004410
 80095d0:	40004414 	.word	0x40004414
 80095d4:	0501bd00 	.word	0x0501bd00
 80095d8:	40004408 	.word	0x40004408
 80095dc:	20004f20 	.word	0x20004f20
 80095e0:	20004f24 	.word	0x20004f24

080095e4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80095ea:	4b26      	ldr	r3, [pc, #152]	@ (8009684 <_DoInit+0xa0>)
 80095ec:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80095ee:	22a8      	movs	r2, #168	@ 0xa8
 80095f0:	2100      	movs	r1, #0
 80095f2:	6838      	ldr	r0, [r7, #0]
 80095f4:	f002 fa0c 	bl	800ba10 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	2203      	movs	r2, #3
 80095fc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	2203      	movs	r2, #3
 8009602:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	4a20      	ldr	r2, [pc, #128]	@ (8009688 <_DoInit+0xa4>)
 8009608:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	4a1f      	ldr	r2, [pc, #124]	@ (800968c <_DoInit+0xa8>)
 800960e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009616:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	2200      	movs	r2, #0
 800961c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2200      	movs	r2, #0
 8009622:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	2200      	movs	r2, #0
 8009628:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	4a16      	ldr	r2, [pc, #88]	@ (8009688 <_DoInit+0xa4>)
 800962e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	4a17      	ldr	r2, [pc, #92]	@ (8009690 <_DoInit+0xac>)
 8009634:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	2210      	movs	r2, #16
 800963a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	2200      	movs	r2, #0
 8009640:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	2200      	movs	r2, #0
 8009646:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	2200      	movs	r2, #0
 800964c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800964e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8009652:	2300      	movs	r3, #0
 8009654:	607b      	str	r3, [r7, #4]
 8009656:	e00c      	b.n	8009672 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f1c3 030f 	rsb	r3, r3, #15
 800965e:	4a0d      	ldr	r2, [pc, #52]	@ (8009694 <_DoInit+0xb0>)
 8009660:	5cd1      	ldrb	r1, [r2, r3]
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4413      	add	r3, r2
 8009668:	460a      	mov	r2, r1
 800966a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	3301      	adds	r3, #1
 8009670:	607b      	str	r3, [r7, #4]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2b0f      	cmp	r3, #15
 8009676:	d9ef      	bls.n	8009658 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8009678:	f3bf 8f5f 	dmb	sy
}
 800967c:	bf00      	nop
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	20004f28 	.word	0x20004f28
 8009688:	0800dff0 	.word	0x0800dff0
 800968c:	20004fd0 	.word	0x20004fd0
 8009690:	200053d0 	.word	0x200053d0
 8009694:	0800e18c 	.word	0x0800e18c

08009698 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8009698:	b580      	push	{r7, lr}
 800969a:	b08a      	sub	sp, #40	@ 0x28
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80096a4:	2300      	movs	r3, #0
 80096a6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80096b4:	69ba      	ldr	r2, [r7, #24]
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d905      	bls.n	80096c8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80096bc:	69ba      	ldr	r2, [r7, #24]
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	3b01      	subs	r3, #1
 80096c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80096c6:	e007      	b.n	80096d8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	689a      	ldr	r2, [r3, #8]
 80096cc:	69b9      	ldr	r1, [r7, #24]
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	1acb      	subs	r3, r1, r3
 80096d2:	4413      	add	r3, r2
 80096d4:	3b01      	subs	r3, #1
 80096d6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	689a      	ldr	r2, [r3, #8]
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096e2:	4293      	cmp	r3, r2
 80096e4:	bf28      	it	cs
 80096e6:	4613      	movcs	r3, r2
 80096e8:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80096ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4293      	cmp	r3, r2
 80096f0:	bf28      	it	cs
 80096f2:	4613      	movcs	r3, r2
 80096f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	4413      	add	r3, r2
 80096fe:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8009700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009702:	68b9      	ldr	r1, [r7, #8]
 8009704:	6978      	ldr	r0, [r7, #20]
 8009706:	f002 f9f0 	bl	800baea <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800970a:	6a3a      	ldr	r2, [r7, #32]
 800970c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970e:	4413      	add	r3, r2
 8009710:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009716:	4413      	add	r3, r2
 8009718:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8009722:	69fa      	ldr	r2, [r7, #28]
 8009724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009726:	4413      	add	r3, r2
 8009728:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	69fa      	ldr	r2, [r7, #28]
 8009730:	429a      	cmp	r2, r3
 8009732:	d101      	bne.n	8009738 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8009734:	2300      	movs	r3, #0
 8009736:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009738:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	69fa      	ldr	r2, [r7, #28]
 8009740:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1b2      	bne.n	80096ae <_WriteBlocking+0x16>
  return NumBytesWritten;
 8009748:	6a3b      	ldr	r3, [r7, #32]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3728      	adds	r7, #40	@ 0x28
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8009752:	b580      	push	{r7, lr}
 8009754:	b088      	sub	sp, #32
 8009756:	af00      	add	r7, sp, #0
 8009758:	60f8      	str	r0, [r7, #12]
 800975a:	60b9      	str	r1, [r7, #8]
 800975c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	689a      	ldr	r2, [r3, #8]
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	1ad3      	subs	r3, r2, r3
 800976c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800976e:	69ba      	ldr	r2, [r7, #24]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	429a      	cmp	r2, r3
 8009774:	d911      	bls.n	800979a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	685a      	ldr	r2, [r3, #4]
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	4413      	add	r3, r2
 800977e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	68b9      	ldr	r1, [r7, #8]
 8009784:	6938      	ldr	r0, [r7, #16]
 8009786:	f002 f9b0 	bl	800baea <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800978a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800978e:	69fa      	ldr	r2, [r7, #28]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	441a      	add	r2, r3
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8009798:	e01f      	b.n	80097da <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	685a      	ldr	r2, [r3, #4]
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	4413      	add	r3, r2
 80097a6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	68b9      	ldr	r1, [r7, #8]
 80097ac:	6938      	ldr	r0, [r7, #16]
 80097ae:	f002 f99c 	bl	800baea <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	4413      	add	r3, r2
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	4619      	mov	r1, r3
 80097ca:	6938      	ldr	r0, [r7, #16]
 80097cc:	f002 f98d 	bl	800baea <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80097d0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	60da      	str	r2, [r3, #12]
}
 80097da:	bf00      	nop
 80097dc:	3720      	adds	r7, #32
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80097e2:	b480      	push	{r7}
 80097e4:	b087      	sub	sp, #28
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d808      	bhi.n	8009810 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	689a      	ldr	r2, [r3, #8]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	1ad2      	subs	r2, r2, r3
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	4413      	add	r3, r2
 800980a:	3b01      	subs	r3, #1
 800980c:	617b      	str	r3, [r7, #20]
 800980e:	e004      	b.n	800981a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	3b01      	subs	r3, #1
 8009818:	617b      	str	r3, [r7, #20]
  }
  return r;
 800981a:	697b      	ldr	r3, [r7, #20]
}
 800981c:	4618      	mov	r0, r3
 800981e:	371c      	adds	r7, #28
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8009828:	b580      	push	{r7, lr}
 800982a:	b08c      	sub	sp, #48	@ 0x30
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8009834:	4b3e      	ldr	r3, [pc, #248]	@ (8009930 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8009836:	623b      	str	r3, [r7, #32]
 8009838:	6a3b      	ldr	r3, [r7, #32]
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2b53      	cmp	r3, #83	@ 0x53
 8009840:	d001      	beq.n	8009846 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8009842:	f7ff fecf 	bl	80095e4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	1c5a      	adds	r2, r3, #1
 800984a:	4613      	mov	r3, r2
 800984c:	005b      	lsls	r3, r3, #1
 800984e:	4413      	add	r3, r2
 8009850:	00db      	lsls	r3, r3, #3
 8009852:	4a37      	ldr	r2, [pc, #220]	@ (8009930 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8009854:	4413      	add	r3, r2
 8009856:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8009868:	2300      	movs	r3, #0
 800986a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800986c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	429a      	cmp	r2, r3
 8009872:	d92b      	bls.n	80098cc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	689a      	ldr	r2, [r3, #8]
 8009878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4293      	cmp	r3, r2
 8009884:	bf28      	it	cs
 8009886:	4613      	movcs	r3, r2
 8009888:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	685a      	ldr	r2, [r3, #4]
 800988e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009890:	4413      	add	r3, r2
 8009892:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	6939      	ldr	r1, [r7, #16]
 8009898:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800989a:	f002 f926 	bl	800baea <memcpy>
    NumBytesRead += NumBytesRem;
 800989e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	4413      	add	r3, r2
 80098a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80098a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	4413      	add	r3, r2
 80098ac:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80098b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	4413      	add	r3, r2
 80098bc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d101      	bne.n	80098cc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80098c8:	2300      	movs	r3, #0
 80098ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80098cc:	69ba      	ldr	r2, [r7, #24]
 80098ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4293      	cmp	r3, r2
 80098da:	bf28      	it	cs
 80098dc:	4613      	movcs	r3, r2
 80098de:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d019      	beq.n	800991a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	685a      	ldr	r2, [r3, #4]
 80098ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ec:	4413      	add	r3, r2
 80098ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80098f0:	697a      	ldr	r2, [r7, #20]
 80098f2:	6939      	ldr	r1, [r7, #16]
 80098f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80098f6:	f002 f8f8 	bl	800baea <memcpy>
    NumBytesRead += NumBytesRem;
 80098fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	4413      	add	r3, r2
 8009900:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8009902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	4413      	add	r3, r2
 8009908:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	1ad3      	subs	r3, r2, r3
 8009910:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8009912:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	4413      	add	r3, r2
 8009918:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800991a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d002      	beq.n	8009926 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009924:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8009926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009928:	4618      	mov	r0, r3
 800992a:	3730      	adds	r7, #48	@ 0x30
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	20004f28 	.word	0x20004f28

08009934 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8009934:	b580      	push	{r7, lr}
 8009936:	b08c      	sub	sp, #48	@ 0x30
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8009940:	4b3e      	ldr	r3, [pc, #248]	@ (8009a3c <SEGGER_RTT_ReadNoLock+0x108>)
 8009942:	623b      	str	r3, [r7, #32]
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b53      	cmp	r3, #83	@ 0x53
 800994c:	d001      	beq.n	8009952 <SEGGER_RTT_ReadNoLock+0x1e>
 800994e:	f7ff fe49 	bl	80095e4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	4613      	mov	r3, r2
 8009956:	005b      	lsls	r3, r3, #1
 8009958:	4413      	add	r3, r2
 800995a:	00db      	lsls	r3, r3, #3
 800995c:	3360      	adds	r3, #96	@ 0x60
 800995e:	4a37      	ldr	r2, [pc, #220]	@ (8009a3c <SEGGER_RTT_ReadNoLock+0x108>)
 8009960:	4413      	add	r3, r2
 8009962:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8009974:	2300      	movs	r3, #0
 8009976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8009978:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	429a      	cmp	r2, r3
 800997e:	d92b      	bls.n	80099d8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	689a      	ldr	r2, [r3, #8]
 8009984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800998a:	697a      	ldr	r2, [r7, #20]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4293      	cmp	r3, r2
 8009990:	bf28      	it	cs
 8009992:	4613      	movcs	r3, r2
 8009994:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800999c:	4413      	add	r3, r2
 800999e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80099a0:	697a      	ldr	r2, [r7, #20]
 80099a2:	6939      	ldr	r1, [r7, #16]
 80099a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80099a6:	f002 f8a0 	bl	800baea <memcpy>
    NumBytesRead += NumBytesRem;
 80099aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	4413      	add	r3, r2
 80099b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80099b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	4413      	add	r3, r2
 80099b8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80099c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	4413      	add	r3, r2
 80099c8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d101      	bne.n	80099d8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80099d4:	2300      	movs	r3, #0
 80099d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80099d8:	69ba      	ldr	r2, [r7, #24]
 80099da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80099e0:	697a      	ldr	r2, [r7, #20]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4293      	cmp	r3, r2
 80099e6:	bf28      	it	cs
 80099e8:	4613      	movcs	r3, r2
 80099ea:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d019      	beq.n	8009a26 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f8:	4413      	add	r3, r2
 80099fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80099fc:	697a      	ldr	r2, [r7, #20]
 80099fe:	6939      	ldr	r1, [r7, #16]
 8009a00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009a02:	f002 f872 	bl	800baea <memcpy>
    NumBytesRead += NumBytesRem;
 8009a06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8009a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	4413      	add	r3, r2
 8009a14:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8009a1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	4413      	add	r3, r2
 8009a24:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8009a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d002      	beq.n	8009a32 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a30:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8009a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3730      	adds	r7, #48	@ 0x30
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	20004f28 	.word	0x20004f28

08009a40 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b088      	sub	sp, #32
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	4613      	mov	r3, r2
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	4413      	add	r3, r2
 8009a58:	00db      	lsls	r3, r3, #3
 8009a5a:	3360      	adds	r3, #96	@ 0x60
 8009a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8009adc <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8009a5e:	4413      	add	r3, r2
 8009a60:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d029      	beq.n	8009abe <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d82e      	bhi.n	8009acc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d002      	beq.n	8009a78 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d013      	beq.n	8009a9e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8009a76:	e029      	b.n	8009acc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8009a78:	6978      	ldr	r0, [r7, #20]
 8009a7a:	f7ff feb2 	bl	80097e2 <_GetAvailWriteSpace>
 8009a7e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8009a80:	693a      	ldr	r2, [r7, #16]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d202      	bcs.n	8009a8e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8009a8c:	e021      	b.n	8009ad2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	69b9      	ldr	r1, [r7, #24]
 8009a96:	6978      	ldr	r0, [r7, #20]
 8009a98:	f7ff fe5b 	bl	8009752 <_WriteNoCheck>
    break;
 8009a9c:	e019      	b.n	8009ad2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8009a9e:	6978      	ldr	r0, [r7, #20]
 8009aa0:	f7ff fe9f 	bl	80097e2 <_GetAvailWriteSpace>
 8009aa4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	bf28      	it	cs
 8009aae:	4613      	movcs	r3, r2
 8009ab0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8009ab2:	69fa      	ldr	r2, [r7, #28]
 8009ab4:	69b9      	ldr	r1, [r7, #24]
 8009ab6:	6978      	ldr	r0, [r7, #20]
 8009ab8:	f7ff fe4b 	bl	8009752 <_WriteNoCheck>
    break;
 8009abc:	e009      	b.n	8009ad2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	69b9      	ldr	r1, [r7, #24]
 8009ac2:	6978      	ldr	r0, [r7, #20]
 8009ac4:	f7ff fde8 	bl	8009698 <_WriteBlocking>
 8009ac8:	61f8      	str	r0, [r7, #28]
    break;
 8009aca:	e002      	b.n	8009ad2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8009acc:	2300      	movs	r3, #0
 8009ace:	61fb      	str	r3, [r7, #28]
    break;
 8009ad0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8009ad2:	69fb      	ldr	r3, [r7, #28]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3720      	adds	r7, #32
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	20004f28 	.word	0x20004f28

08009ae0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b088      	sub	sp, #32
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	4613      	mov	r3, r2
 8009af6:	005b      	lsls	r3, r3, #1
 8009af8:	4413      	add	r3, r2
 8009afa:	00db      	lsls	r3, r3, #3
 8009afc:	4a1f      	ldr	r2, [pc, #124]	@ (8009b7c <SEGGER_RTT_WriteNoLock+0x9c>)
 8009afe:	4413      	add	r3, r2
 8009b00:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d029      	beq.n	8009b5e <SEGGER_RTT_WriteNoLock+0x7e>
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d82e      	bhi.n	8009b6c <SEGGER_RTT_WriteNoLock+0x8c>
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d002      	beq.n	8009b18 <SEGGER_RTT_WriteNoLock+0x38>
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d013      	beq.n	8009b3e <SEGGER_RTT_WriteNoLock+0x5e>
 8009b16:	e029      	b.n	8009b6c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8009b18:	6978      	ldr	r0, [r7, #20]
 8009b1a:	f7ff fe62 	bl	80097e2 <_GetAvailWriteSpace>
 8009b1e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8009b20:	693a      	ldr	r2, [r7, #16]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d202      	bcs.n	8009b2e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8009b2c:	e021      	b.n	8009b72 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	69b9      	ldr	r1, [r7, #24]
 8009b36:	6978      	ldr	r0, [r7, #20]
 8009b38:	f7ff fe0b 	bl	8009752 <_WriteNoCheck>
    break;
 8009b3c:	e019      	b.n	8009b72 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8009b3e:	6978      	ldr	r0, [r7, #20]
 8009b40:	f7ff fe4f 	bl	80097e2 <_GetAvailWriteSpace>
 8009b44:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	bf28      	it	cs
 8009b4e:	4613      	movcs	r3, r2
 8009b50:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8009b52:	69fa      	ldr	r2, [r7, #28]
 8009b54:	69b9      	ldr	r1, [r7, #24]
 8009b56:	6978      	ldr	r0, [r7, #20]
 8009b58:	f7ff fdfb 	bl	8009752 <_WriteNoCheck>
    break;
 8009b5c:	e009      	b.n	8009b72 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	69b9      	ldr	r1, [r7, #24]
 8009b62:	6978      	ldr	r0, [r7, #20]
 8009b64:	f7ff fd98 	bl	8009698 <_WriteBlocking>
 8009b68:	61f8      	str	r0, [r7, #28]
    break;
 8009b6a:	e002      	b.n	8009b72 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	61fb      	str	r3, [r7, #28]
    break;
 8009b70:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8009b72:	69fb      	ldr	r3, [r7, #28]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3720      	adds	r7, #32
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	20004f28 	.word	0x20004f28

08009b80 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b088      	sub	sp, #32
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8009b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8009bc8 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8009b8e:	61fb      	str	r3, [r7, #28]
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b53      	cmp	r3, #83	@ 0x53
 8009b98:	d001      	beq.n	8009b9e <SEGGER_RTT_WriteDownBuffer+0x1e>
 8009b9a:	f7ff fd23 	bl	80095e4 <_DoInit>
  SEGGER_RTT_LOCK();
 8009b9e:	f3ef 8311 	mrs	r3, BASEPRI
 8009ba2:	f04f 0120 	mov.w	r1, #32
 8009ba6:	f381 8811 	msr	BASEPRI, r1
 8009baa:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	68b9      	ldr	r1, [r7, #8]
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f7ff ff45 	bl	8009a40 <SEGGER_RTT_WriteDownBufferNoLock>
 8009bb6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8009bbe:	697b      	ldr	r3, [r7, #20]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3720      	adds	r7, #32
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	20004f28 	.word	0x20004f28

08009bcc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b088      	sub	sp, #32
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8009bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8009c14 <SEGGER_RTT_Write+0x48>)
 8009bda:	61fb      	str	r3, [r7, #28]
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	2b53      	cmp	r3, #83	@ 0x53
 8009be4:	d001      	beq.n	8009bea <SEGGER_RTT_Write+0x1e>
 8009be6:	f7ff fcfd 	bl	80095e4 <_DoInit>
  SEGGER_RTT_LOCK();
 8009bea:	f3ef 8311 	mrs	r3, BASEPRI
 8009bee:	f04f 0120 	mov.w	r1, #32
 8009bf2:	f381 8811 	msr	BASEPRI, r1
 8009bf6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	68b9      	ldr	r1, [r7, #8]
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f7ff ff6f 	bl	8009ae0 <SEGGER_RTT_WriteNoLock>
 8009c02:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8009c0a:	697b      	ldr	r3, [r7, #20]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3720      	adds	r7, #32
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	20004f28 	.word	0x20004f28

08009c18 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b088      	sub	sp, #32
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	607a      	str	r2, [r7, #4]
 8009c24:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8009c26:	4b3d      	ldr	r3, [pc, #244]	@ (8009d1c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8009c28:	61bb      	str	r3, [r7, #24]
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	2b53      	cmp	r3, #83	@ 0x53
 8009c32:	d001      	beq.n	8009c38 <SEGGER_RTT_AllocUpBuffer+0x20>
 8009c34:	f7ff fcd6 	bl	80095e4 <_DoInit>
  SEGGER_RTT_LOCK();
 8009c38:	f3ef 8311 	mrs	r3, BASEPRI
 8009c3c:	f04f 0120 	mov.w	r1, #32
 8009c40:	f381 8811 	msr	BASEPRI, r1
 8009c44:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009c46:	4b35      	ldr	r3, [pc, #212]	@ (8009d1c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8009c48:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8009c4e:	6939      	ldr	r1, [r7, #16]
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	1c5a      	adds	r2, r3, #1
 8009c54:	4613      	mov	r3, r2
 8009c56:	005b      	lsls	r3, r3, #1
 8009c58:	4413      	add	r3, r2
 8009c5a:	00db      	lsls	r3, r3, #3
 8009c5c:	440b      	add	r3, r1
 8009c5e:	3304      	adds	r3, #4
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d008      	beq.n	8009c78 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	69fa      	ldr	r2, [r7, #28]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	dbeb      	blt.n	8009c4e <SEGGER_RTT_AllocUpBuffer+0x36>
 8009c76:	e000      	b.n	8009c7a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8009c78:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	69fa      	ldr	r2, [r7, #28]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	da3f      	bge.n	8009d04 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8009c84:	6939      	ldr	r1, [r7, #16]
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	1c5a      	adds	r2, r3, #1
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	005b      	lsls	r3, r3, #1
 8009c8e:	4413      	add	r3, r2
 8009c90:	00db      	lsls	r3, r3, #3
 8009c92:	440b      	add	r3, r1
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8009c98:	6939      	ldr	r1, [r7, #16]
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	1c5a      	adds	r2, r3, #1
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	4413      	add	r3, r2
 8009ca4:	00db      	lsls	r3, r3, #3
 8009ca6:	440b      	add	r3, r1
 8009ca8:	3304      	adds	r3, #4
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8009cae:	6939      	ldr	r1, [r7, #16]
 8009cb0:	69fa      	ldr	r2, [r7, #28]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	005b      	lsls	r3, r3, #1
 8009cb6:	4413      	add	r3, r2
 8009cb8:	00db      	lsls	r3, r3, #3
 8009cba:	440b      	add	r3, r1
 8009cbc:	3320      	adds	r3, #32
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8009cc2:	6939      	ldr	r1, [r7, #16]
 8009cc4:	69fa      	ldr	r2, [r7, #28]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	005b      	lsls	r3, r3, #1
 8009cca:	4413      	add	r3, r2
 8009ccc:	00db      	lsls	r3, r3, #3
 8009cce:	440b      	add	r3, r1
 8009cd0:	3328      	adds	r3, #40	@ 0x28
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8009cd6:	6939      	ldr	r1, [r7, #16]
 8009cd8:	69fa      	ldr	r2, [r7, #28]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	005b      	lsls	r3, r3, #1
 8009cde:	4413      	add	r3, r2
 8009ce0:	00db      	lsls	r3, r3, #3
 8009ce2:	440b      	add	r3, r1
 8009ce4:	3324      	adds	r3, #36	@ 0x24
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8009cea:	6939      	ldr	r1, [r7, #16]
 8009cec:	69fa      	ldr	r2, [r7, #28]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	005b      	lsls	r3, r3, #1
 8009cf2:	4413      	add	r3, r2
 8009cf4:	00db      	lsls	r3, r3, #3
 8009cf6:	440b      	add	r3, r1
 8009cf8:	332c      	adds	r3, #44	@ 0x2c
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009cfe:	f3bf 8f5f 	dmb	sy
 8009d02:	e002      	b.n	8009d0a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8009d04:	f04f 33ff 	mov.w	r3, #4294967295
 8009d08:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8009d10:	69fb      	ldr	r3, [r7, #28]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3720      	adds	r7, #32
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	20004f28 	.word	0x20004f28

08009d20 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b08a      	sub	sp, #40	@ 0x28
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
 8009d2c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8009d2e:	4b21      	ldr	r3, [pc, #132]	@ (8009db4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8009d30:	623b      	str	r3, [r7, #32]
 8009d32:	6a3b      	ldr	r3, [r7, #32]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	2b53      	cmp	r3, #83	@ 0x53
 8009d3a:	d001      	beq.n	8009d40 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8009d3c:	f7ff fc52 	bl	80095e4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009d40:	4b1c      	ldr	r3, [pc, #112]	@ (8009db4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8009d42:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d82c      	bhi.n	8009da4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8009d4a:	f3ef 8311 	mrs	r3, BASEPRI
 8009d4e:	f04f 0120 	mov.w	r1, #32
 8009d52:	f381 8811 	msr	BASEPRI, r1
 8009d56:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	005b      	lsls	r3, r3, #1
 8009d5e:	4413      	add	r3, r2
 8009d60:	00db      	lsls	r3, r3, #3
 8009d62:	3360      	adds	r3, #96	@ 0x60
 8009d64:	69fa      	ldr	r2, [r7, #28]
 8009d66:	4413      	add	r3, r2
 8009d68:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00e      	beq.n	8009d8e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2200      	movs	r2, #0
 8009d86:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d92:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009d94:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009da2:	e002      	b.n	8009daa <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8009da4:	f04f 33ff 	mov.w	r3, #4294967295
 8009da8:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8009daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3728      	adds	r7, #40	@ 0x28
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	20004f28 	.word	0x20004f28

08009db8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8009db8:	b480      	push	{r7}
 8009dba:	b087      	sub	sp, #28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	1c5a      	adds	r2, r3, #1
 8009dcc:	60fa      	str	r2, [r7, #12]
 8009dce:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b80      	cmp	r3, #128	@ 0x80
 8009dd4:	d90a      	bls.n	8009dec <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8009dd6:	2380      	movs	r3, #128	@ 0x80
 8009dd8:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8009dda:	e007      	b.n	8009dec <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	1c53      	adds	r3, r2, #1
 8009de0:	60bb      	str	r3, [r7, #8]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	1c59      	adds	r1, r3, #1
 8009de6:	60f9      	str	r1, [r7, #12]
 8009de8:	7812      	ldrb	r2, [r2, #0]
 8009dea:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	1e5a      	subs	r2, r3, #1
 8009df0:	607a      	str	r2, [r7, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d003      	beq.n	8009dfe <_EncodeStr+0x46>
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1ee      	bne.n	8009ddc <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	371c      	adds	r7, #28
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	3307      	adds	r3, #7
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009e36:	4b34      	ldr	r3, [pc, #208]	@ (8009f08 <_HandleIncomingPacket+0xd8>)
 8009e38:	7e1b      	ldrb	r3, [r3, #24]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	1cfb      	adds	r3, r7, #3
 8009e3e:	2201      	movs	r2, #1
 8009e40:	4619      	mov	r1, r3
 8009e42:	f7ff fd77 	bl	8009934 <SEGGER_RTT_ReadNoLock>
 8009e46:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d057      	beq.n	8009efe <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8009e4e:	78fb      	ldrb	r3, [r7, #3]
 8009e50:	2b80      	cmp	r3, #128	@ 0x80
 8009e52:	d031      	beq.n	8009eb8 <_HandleIncomingPacket+0x88>
 8009e54:	2b80      	cmp	r3, #128	@ 0x80
 8009e56:	dc40      	bgt.n	8009eda <_HandleIncomingPacket+0xaa>
 8009e58:	2b07      	cmp	r3, #7
 8009e5a:	dc15      	bgt.n	8009e88 <_HandleIncomingPacket+0x58>
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	dd3c      	ble.n	8009eda <_HandleIncomingPacket+0xaa>
 8009e60:	3b01      	subs	r3, #1
 8009e62:	2b06      	cmp	r3, #6
 8009e64:	d839      	bhi.n	8009eda <_HandleIncomingPacket+0xaa>
 8009e66:	a201      	add	r2, pc, #4	@ (adr r2, 8009e6c <_HandleIncomingPacket+0x3c>)
 8009e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6c:	08009e8f 	.word	0x08009e8f
 8009e70:	08009e95 	.word	0x08009e95
 8009e74:	08009e9b 	.word	0x08009e9b
 8009e78:	08009ea1 	.word	0x08009ea1
 8009e7c:	08009ea7 	.word	0x08009ea7
 8009e80:	08009ead 	.word	0x08009ead
 8009e84:	08009eb3 	.word	0x08009eb3
 8009e88:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e8a:	d033      	beq.n	8009ef4 <_HandleIncomingPacket+0xc4>
 8009e8c:	e025      	b.n	8009eda <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8009e8e:	f000 fb29 	bl	800a4e4 <SEGGER_SYSVIEW_Start>
      break;
 8009e92:	e034      	b.n	8009efe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8009e94:	f000 fbe2 	bl	800a65c <SEGGER_SYSVIEW_Stop>
      break;
 8009e98:	e031      	b.n	8009efe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8009e9a:	f000 fdbb 	bl	800aa14 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8009e9e:	e02e      	b.n	8009efe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8009ea0:	f000 fd80 	bl	800a9a4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8009ea4:	e02b      	b.n	8009efe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8009ea6:	f000 fbff 	bl	800a6a8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8009eaa:	e028      	b.n	8009efe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8009eac:	f000 fe8c 	bl	800abc8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8009eb0:	e025      	b.n	8009efe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8009eb2:	f000 fe6b 	bl	800ab8c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8009eb6:	e022      	b.n	8009efe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009eb8:	4b13      	ldr	r3, [pc, #76]	@ (8009f08 <_HandleIncomingPacket+0xd8>)
 8009eba:	7e1b      	ldrb	r3, [r3, #24]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	1cfb      	adds	r3, r7, #3
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	f7ff fd36 	bl	8009934 <SEGGER_RTT_ReadNoLock>
 8009ec8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d013      	beq.n	8009ef8 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8009ed0:	78fb      	ldrb	r3, [r7, #3]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 fdd0 	bl	800aa78 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8009ed8:	e00e      	b.n	8009ef8 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8009eda:	78fb      	ldrb	r3, [r7, #3]
 8009edc:	b25b      	sxtb	r3, r3
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	da0c      	bge.n	8009efc <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009ee2:	4b09      	ldr	r3, [pc, #36]	@ (8009f08 <_HandleIncomingPacket+0xd8>)
 8009ee4:	7e1b      	ldrb	r3, [r3, #24]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	1cfb      	adds	r3, r7, #3
 8009eea:	2201      	movs	r2, #1
 8009eec:	4619      	mov	r1, r3
 8009eee:	f7ff fd21 	bl	8009934 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8009ef2:	e003      	b.n	8009efc <_HandleIncomingPacket+0xcc>
      break;
 8009ef4:	bf00      	nop
 8009ef6:	e002      	b.n	8009efe <_HandleIncomingPacket+0xce>
      break;
 8009ef8:	bf00      	nop
 8009efa:	e000      	b.n	8009efe <_HandleIncomingPacket+0xce>
      break;
 8009efc:	bf00      	nop
    }
  }
}
 8009efe:	bf00      	nop
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	200063e8 	.word	0x200063e8

08009f0c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b08c      	sub	sp, #48	@ 0x30
 8009f10:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8009f12:	2301      	movs	r3, #1
 8009f14:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8009f16:	1d3b      	adds	r3, r7, #4
 8009f18:	3301      	adds	r3, #1
 8009f1a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f20:	4b32      	ldr	r3, [pc, #200]	@ (8009fec <_TrySendOverflowPacket+0xe0>)
 8009f22:	695b      	ldr	r3, [r3, #20]
 8009f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f26:	e00b      	b.n	8009f40 <_TrySendOverflowPacket+0x34>
 8009f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f2a:	b2da      	uxtb	r2, r3
 8009f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f2e:	1c59      	adds	r1, r3, #1
 8009f30:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009f32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009f36:	b2d2      	uxtb	r2, r2
 8009f38:	701a      	strb	r2, [r3, #0]
 8009f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f3c:	09db      	lsrs	r3, r3, #7
 8009f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f42:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f44:	d8f0      	bhi.n	8009f28 <_TrySendOverflowPacket+0x1c>
 8009f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f48:	1c5a      	adds	r2, r3, #1
 8009f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f4e:	b2d2      	uxtb	r2, r2
 8009f50:	701a      	strb	r2, [r3, #0]
 8009f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f54:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009f56:	4b26      	ldr	r3, [pc, #152]	@ (8009ff0 <_TrySendOverflowPacket+0xe4>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8009f5c:	4b23      	ldr	r3, [pc, #140]	@ (8009fec <_TrySendOverflowPacket+0xe0>)
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	69ba      	ldr	r2, [r7, #24]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	623b      	str	r3, [r7, #32]
 8009f6e:	e00b      	b.n	8009f88 <_TrySendOverflowPacket+0x7c>
 8009f70:	6a3b      	ldr	r3, [r7, #32]
 8009f72:	b2da      	uxtb	r2, r3
 8009f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f76:	1c59      	adds	r1, r3, #1
 8009f78:	6279      	str	r1, [r7, #36]	@ 0x24
 8009f7a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009f7e:	b2d2      	uxtb	r2, r2
 8009f80:	701a      	strb	r2, [r3, #0]
 8009f82:	6a3b      	ldr	r3, [r7, #32]
 8009f84:	09db      	lsrs	r3, r3, #7
 8009f86:	623b      	str	r3, [r7, #32]
 8009f88:	6a3b      	ldr	r3, [r7, #32]
 8009f8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f8c:	d8f0      	bhi.n	8009f70 <_TrySendOverflowPacket+0x64>
 8009f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f90:	1c5a      	adds	r2, r3, #1
 8009f92:	627a      	str	r2, [r7, #36]	@ 0x24
 8009f94:	6a3a      	ldr	r2, [r7, #32]
 8009f96:	b2d2      	uxtb	r2, r2
 8009f98:	701a      	strb	r2, [r3, #0]
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f9c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8009f9e:	4b13      	ldr	r3, [pc, #76]	@ (8009fec <_TrySendOverflowPacket+0xe0>)
 8009fa0:	785b      	ldrb	r3, [r3, #1]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	1d3b      	adds	r3, r7, #4
 8009fa6:	69fa      	ldr	r2, [r7, #28]
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	461a      	mov	r2, r3
 8009fac:	1d3b      	adds	r3, r7, #4
 8009fae:	4619      	mov	r1, r3
 8009fb0:	f7f6 f916 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8009fb8:	f7ff fa8a 	bl	80094d0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d009      	beq.n	8009fd6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8009fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8009fec <_TrySendOverflowPacket+0xe0>)
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8009fc8:	4b08      	ldr	r3, [pc, #32]	@ (8009fec <_TrySendOverflowPacket+0xe0>)
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	b2da      	uxtb	r2, r3
 8009fd0:	4b06      	ldr	r3, [pc, #24]	@ (8009fec <_TrySendOverflowPacket+0xe0>)
 8009fd2:	701a      	strb	r2, [r3, #0]
 8009fd4:	e004      	b.n	8009fe0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8009fd6:	4b05      	ldr	r3, [pc, #20]	@ (8009fec <_TrySendOverflowPacket+0xe0>)
 8009fd8:	695b      	ldr	r3, [r3, #20]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	4a03      	ldr	r2, [pc, #12]	@ (8009fec <_TrySendOverflowPacket+0xe0>)
 8009fde:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8009fe0:	693b      	ldr	r3, [r7, #16]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3730      	adds	r7, #48	@ 0x30
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	200063e8 	.word	0x200063e8
 8009ff0:	e0001004 	.word	0xe0001004

08009ff4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b08a      	sub	sp, #40	@ 0x28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800a000:	4b96      	ldr	r3, [pc, #600]	@ (800a25c <_SendPacket+0x268>)
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	2b01      	cmp	r3, #1
 800a006:	d010      	beq.n	800a02a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800a008:	4b94      	ldr	r3, [pc, #592]	@ (800a25c <_SendPacket+0x268>)
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f000 8130 	beq.w	800a272 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800a012:	4b92      	ldr	r3, [pc, #584]	@ (800a25c <_SendPacket+0x268>)
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	2b02      	cmp	r3, #2
 800a018:	d109      	bne.n	800a02e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800a01a:	f7ff ff77 	bl	8009f0c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800a01e:	4b8f      	ldr	r3, [pc, #572]	@ (800a25c <_SendPacket+0x268>)
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	2b01      	cmp	r3, #1
 800a024:	f040 8127 	bne.w	800a276 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 800a028:	e001      	b.n	800a02e <_SendPacket+0x3a>
    goto Send;
 800a02a:	bf00      	nop
 800a02c:	e000      	b.n	800a030 <_SendPacket+0x3c>
Send:
 800a02e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2b1f      	cmp	r3, #31
 800a034:	d809      	bhi.n	800a04a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800a036:	4b89      	ldr	r3, [pc, #548]	@ (800a25c <_SendPacket+0x268>)
 800a038:	69da      	ldr	r2, [r3, #28]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	fa22 f303 	lsr.w	r3, r2, r3
 800a040:	f003 0301 	and.w	r3, r3, #1
 800a044:	2b00      	cmp	r3, #0
 800a046:	f040 8118 	bne.w	800a27a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b17      	cmp	r3, #23
 800a04e:	d807      	bhi.n	800a060 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	3b01      	subs	r3, #1
 800a054:	60fb      	str	r3, [r7, #12]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	b2da      	uxtb	r2, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	701a      	strb	r2, [r3, #0]
 800a05e:	e0c4      	b.n	800a1ea <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a06c:	d912      	bls.n	800a094 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	09da      	lsrs	r2, r3, #7
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	3b01      	subs	r3, #1
 800a076:	60fb      	str	r3, [r7, #12]
 800a078:	b2d2      	uxtb	r2, r2
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	b2db      	uxtb	r3, r3
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	3a01      	subs	r2, #1
 800a086:	60fa      	str	r2, [r7, #12]
 800a088:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a08c:	b2da      	uxtb	r2, r3
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	701a      	strb	r2, [r3, #0]
 800a092:	e006      	b.n	800a0a2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	3b01      	subs	r3, #1
 800a098:	60fb      	str	r3, [r7, #12]
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	b2da      	uxtb	r2, r3
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b7e      	cmp	r3, #126	@ 0x7e
 800a0a6:	d807      	bhi.n	800a0b8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	60fb      	str	r3, [r7, #12]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	701a      	strb	r2, [r3, #0]
 800a0b6:	e098      	b.n	800a1ea <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0be:	d212      	bcs.n	800a0e6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	09da      	lsrs	r2, r3, #7
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	60fb      	str	r3, [r7, #12]
 800a0ca:	b2d2      	uxtb	r2, r2
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	3a01      	subs	r2, #1
 800a0d8:	60fa      	str	r2, [r7, #12]
 800a0da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	701a      	strb	r2, [r3, #0]
 800a0e4:	e081      	b.n	800a1ea <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a0ec:	d21d      	bcs.n	800a12a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	0b9a      	lsrs	r2, r3, #14
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	60fb      	str	r3, [r7, #12]
 800a0f8:	b2d2      	uxtb	r2, r2
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	09db      	lsrs	r3, r3, #7
 800a102:	b2db      	uxtb	r3, r3
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	3a01      	subs	r2, #1
 800a108:	60fa      	str	r2, [r7, #12]
 800a10a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	b2db      	uxtb	r3, r3
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	3a01      	subs	r2, #1
 800a11c:	60fa      	str	r2, [r7, #12]
 800a11e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a122:	b2da      	uxtb	r2, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	701a      	strb	r2, [r3, #0]
 800a128:	e05f      	b.n	800a1ea <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a130:	d228      	bcs.n	800a184 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	0d5a      	lsrs	r2, r3, #21
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	3b01      	subs	r3, #1
 800a13a:	60fb      	str	r3, [r7, #12]
 800a13c:	b2d2      	uxtb	r2, r2
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	0b9b      	lsrs	r3, r3, #14
 800a146:	b2db      	uxtb	r3, r3
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	3a01      	subs	r2, #1
 800a14c:	60fa      	str	r2, [r7, #12]
 800a14e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a152:	b2da      	uxtb	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	09db      	lsrs	r3, r3, #7
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	3a01      	subs	r2, #1
 800a162:	60fa      	str	r2, [r7, #12]
 800a164:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a168:	b2da      	uxtb	r2, r3
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	b2db      	uxtb	r3, r3
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	3a01      	subs	r2, #1
 800a176:	60fa      	str	r2, [r7, #12]
 800a178:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a17c:	b2da      	uxtb	r2, r3
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	701a      	strb	r2, [r3, #0]
 800a182:	e032      	b.n	800a1ea <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	0f1a      	lsrs	r2, r3, #28
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	3b01      	subs	r3, #1
 800a18c:	60fb      	str	r3, [r7, #12]
 800a18e:	b2d2      	uxtb	r2, r2
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	0d5b      	lsrs	r3, r3, #21
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	3a01      	subs	r2, #1
 800a19e:	60fa      	str	r2, [r7, #12]
 800a1a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a1a4:	b2da      	uxtb	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	0b9b      	lsrs	r3, r3, #14
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	3a01      	subs	r2, #1
 800a1b4:	60fa      	str	r2, [r7, #12]
 800a1b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	09db      	lsrs	r3, r3, #7
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	3a01      	subs	r2, #1
 800a1ca:	60fa      	str	r2, [r7, #12]
 800a1cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a1d0:	b2da      	uxtb	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	3a01      	subs	r2, #1
 800a1de:	60fa      	str	r2, [r7, #12]
 800a1e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800a1ea:	4b1d      	ldr	r3, [pc, #116]	@ (800a260 <_SendPacket+0x26c>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800a1f0:	4b1a      	ldr	r3, [pc, #104]	@ (800a25c <_SendPacket+0x268>)
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	69ba      	ldr	r2, [r7, #24]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	623b      	str	r3, [r7, #32]
 800a202:	e00b      	b.n	800a21c <_SendPacket+0x228>
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	b2da      	uxtb	r2, r3
 800a208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20a:	1c59      	adds	r1, r3, #1
 800a20c:	6279      	str	r1, [r7, #36]	@ 0x24
 800a20e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a212:	b2d2      	uxtb	r2, r2
 800a214:	701a      	strb	r2, [r3, #0]
 800a216:	6a3b      	ldr	r3, [r7, #32]
 800a218:	09db      	lsrs	r3, r3, #7
 800a21a:	623b      	str	r3, [r7, #32]
 800a21c:	6a3b      	ldr	r3, [r7, #32]
 800a21e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a220:	d8f0      	bhi.n	800a204 <_SendPacket+0x210>
 800a222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a224:	1c5a      	adds	r2, r3, #1
 800a226:	627a      	str	r2, [r7, #36]	@ 0x24
 800a228:	6a3a      	ldr	r2, [r7, #32]
 800a22a:	b2d2      	uxtb	r2, r2
 800a22c:	701a      	strb	r2, [r3, #0]
 800a22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a230:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800a232:	4b0a      	ldr	r3, [pc, #40]	@ (800a25c <_SendPacket+0x268>)
 800a234:	785b      	ldrb	r3, [r3, #1]
 800a236:	4618      	mov	r0, r3
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	1ad3      	subs	r3, r2, r3
 800a23e:	461a      	mov	r2, r3
 800a240:	68f9      	ldr	r1, [r7, #12]
 800a242:	f7f5 ffcd 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800a246:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800a248:	f7ff f942 	bl	80094d0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d008      	beq.n	800a264 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800a252:	4a02      	ldr	r2, [pc, #8]	@ (800a25c <_SendPacket+0x268>)
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	60d3      	str	r3, [r2, #12]
 800a258:	e010      	b.n	800a27c <_SendPacket+0x288>
 800a25a:	bf00      	nop
 800a25c:	200063e8 	.word	0x200063e8
 800a260:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800a264:	4b19      	ldr	r3, [pc, #100]	@ (800a2cc <_SendPacket+0x2d8>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	3301      	adds	r3, #1
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	4b17      	ldr	r3, [pc, #92]	@ (800a2cc <_SendPacket+0x2d8>)
 800a26e:	701a      	strb	r2, [r3, #0]
 800a270:	e004      	b.n	800a27c <_SendPacket+0x288>
    goto SendDone;
 800a272:	bf00      	nop
 800a274:	e002      	b.n	800a27c <_SendPacket+0x288>
      goto SendDone;
 800a276:	bf00      	nop
 800a278:	e000      	b.n	800a27c <_SendPacket+0x288>
      goto SendDone;
 800a27a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800a27c:	4b13      	ldr	r3, [pc, #76]	@ (800a2cc <_SendPacket+0x2d8>)
 800a27e:	7e1b      	ldrb	r3, [r3, #24]
 800a280:	4619      	mov	r1, r3
 800a282:	4a13      	ldr	r2, [pc, #76]	@ (800a2d0 <_SendPacket+0x2dc>)
 800a284:	460b      	mov	r3, r1
 800a286:	005b      	lsls	r3, r3, #1
 800a288:	440b      	add	r3, r1
 800a28a:	00db      	lsls	r3, r3, #3
 800a28c:	4413      	add	r3, r2
 800a28e:	336c      	adds	r3, #108	@ 0x6c
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	4b0e      	ldr	r3, [pc, #56]	@ (800a2cc <_SendPacket+0x2d8>)
 800a294:	7e1b      	ldrb	r3, [r3, #24]
 800a296:	4618      	mov	r0, r3
 800a298:	490d      	ldr	r1, [pc, #52]	@ (800a2d0 <_SendPacket+0x2dc>)
 800a29a:	4603      	mov	r3, r0
 800a29c:	005b      	lsls	r3, r3, #1
 800a29e:	4403      	add	r3, r0
 800a2a0:	00db      	lsls	r3, r3, #3
 800a2a2:	440b      	add	r3, r1
 800a2a4:	3370      	adds	r3, #112	@ 0x70
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d00b      	beq.n	800a2c4 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800a2ac:	4b07      	ldr	r3, [pc, #28]	@ (800a2cc <_SendPacket+0x2d8>)
 800a2ae:	789b      	ldrb	r3, [r3, #2]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d107      	bne.n	800a2c4 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800a2b4:	4b05      	ldr	r3, [pc, #20]	@ (800a2cc <_SendPacket+0x2d8>)
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800a2ba:	f7ff fdb9 	bl	8009e30 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800a2be:	4b03      	ldr	r3, [pc, #12]	@ (800a2cc <_SendPacket+0x2d8>)
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800a2c4:	bf00      	nop
 800a2c6:	3728      	adds	r7, #40	@ 0x28
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	200063e8 	.word	0x200063e8
 800a2d0:	20004f28 	.word	0x20004f28

0800a2d4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b086      	sub	sp, #24
 800a2d8:	af02      	add	r7, sp, #8
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
 800a2e0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a2e8:	4917      	ldr	r1, [pc, #92]	@ (800a348 <SEGGER_SYSVIEW_Init+0x74>)
 800a2ea:	4818      	ldr	r0, [pc, #96]	@ (800a34c <SEGGER_SYSVIEW_Init+0x78>)
 800a2ec:	f7ff fc94 	bl	8009c18 <SEGGER_RTT_AllocUpBuffer>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	4b16      	ldr	r3, [pc, #88]	@ (800a350 <SEGGER_SYSVIEW_Init+0x7c>)
 800a2f6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800a2f8:	4b15      	ldr	r3, [pc, #84]	@ (800a350 <SEGGER_SYSVIEW_Init+0x7c>)
 800a2fa:	785a      	ldrb	r2, [r3, #1]
 800a2fc:	4b14      	ldr	r3, [pc, #80]	@ (800a350 <SEGGER_SYSVIEW_Init+0x7c>)
 800a2fe:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800a300:	4b13      	ldr	r3, [pc, #76]	@ (800a350 <SEGGER_SYSVIEW_Init+0x7c>)
 800a302:	7e1b      	ldrb	r3, [r3, #24]
 800a304:	4618      	mov	r0, r3
 800a306:	2300      	movs	r3, #0
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	2308      	movs	r3, #8
 800a30c:	4a11      	ldr	r2, [pc, #68]	@ (800a354 <SEGGER_SYSVIEW_Init+0x80>)
 800a30e:	490f      	ldr	r1, [pc, #60]	@ (800a34c <SEGGER_SYSVIEW_Init+0x78>)
 800a310:	f7ff fd06 	bl	8009d20 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800a314:	4b0e      	ldr	r3, [pc, #56]	@ (800a350 <SEGGER_SYSVIEW_Init+0x7c>)
 800a316:	2200      	movs	r2, #0
 800a318:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800a31a:	4b0f      	ldr	r3, [pc, #60]	@ (800a358 <SEGGER_SYSVIEW_Init+0x84>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a0c      	ldr	r2, [pc, #48]	@ (800a350 <SEGGER_SYSVIEW_Init+0x7c>)
 800a320:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800a322:	4a0b      	ldr	r2, [pc, #44]	@ (800a350 <SEGGER_SYSVIEW_Init+0x7c>)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800a328:	4a09      	ldr	r2, [pc, #36]	@ (800a350 <SEGGER_SYSVIEW_Init+0x7c>)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800a32e:	4a08      	ldr	r2, [pc, #32]	@ (800a350 <SEGGER_SYSVIEW_Init+0x7c>)
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800a334:	4a06      	ldr	r2, [pc, #24]	@ (800a350 <SEGGER_SYSVIEW_Init+0x7c>)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800a33a:	4b05      	ldr	r3, [pc, #20]	@ (800a350 <SEGGER_SYSVIEW_Init+0x7c>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800a340:	bf00      	nop
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	200053e0 	.word	0x200053e0
 800a34c:	0800e004 	.word	0x0800e004
 800a350:	200063e8 	.word	0x200063e8
 800a354:	200063e0 	.word	0x200063e0
 800a358:	e0001004 	.word	0xe0001004

0800a35c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800a364:	4a04      	ldr	r2, [pc, #16]	@ (800a378 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6113      	str	r3, [r2, #16]
}
 800a36a:	bf00      	nop
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	200063e8 	.word	0x200063e8

0800a37c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a384:	f3ef 8311 	mrs	r3, BASEPRI
 800a388:	f04f 0120 	mov.w	r1, #32
 800a38c:	f381 8811 	msr	BASEPRI, r1
 800a390:	60fb      	str	r3, [r7, #12]
 800a392:	4808      	ldr	r0, [pc, #32]	@ (800a3b4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800a394:	f7ff fd40 	bl	8009e18 <_PreparePacket>
 800a398:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	68b9      	ldr	r1, [r7, #8]
 800a39e:	68b8      	ldr	r0, [r7, #8]
 800a3a0:	f7ff fe28 	bl	8009ff4 <_SendPacket>
  RECORD_END();
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f383 8811 	msr	BASEPRI, r3
}
 800a3aa:	bf00      	nop
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	20006418 	.word	0x20006418

0800a3b8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a3c2:	f3ef 8311 	mrs	r3, BASEPRI
 800a3c6:	f04f 0120 	mov.w	r1, #32
 800a3ca:	f381 8811 	msr	BASEPRI, r1
 800a3ce:	617b      	str	r3, [r7, #20]
 800a3d0:	4816      	ldr	r0, [pc, #88]	@ (800a42c <SEGGER_SYSVIEW_RecordU32+0x74>)
 800a3d2:	f7ff fd21 	bl	8009e18 <_PreparePacket>
 800a3d6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	61fb      	str	r3, [r7, #28]
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	61bb      	str	r3, [r7, #24]
 800a3e4:	e00b      	b.n	800a3fe <SEGGER_SYSVIEW_RecordU32+0x46>
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	1c59      	adds	r1, r3, #1
 800a3ee:	61f9      	str	r1, [r7, #28]
 800a3f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a3f4:	b2d2      	uxtb	r2, r2
 800a3f6:	701a      	strb	r2, [r3, #0]
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	09db      	lsrs	r3, r3, #7
 800a3fc:	61bb      	str	r3, [r7, #24]
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	2b7f      	cmp	r3, #127	@ 0x7f
 800a402:	d8f0      	bhi.n	800a3e6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	1c5a      	adds	r2, r3, #1
 800a408:	61fa      	str	r2, [r7, #28]
 800a40a:	69ba      	ldr	r2, [r7, #24]
 800a40c:	b2d2      	uxtb	r2, r2
 800a40e:	701a      	strb	r2, [r3, #0]
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	68f9      	ldr	r1, [r7, #12]
 800a418:	6938      	ldr	r0, [r7, #16]
 800a41a:	f7ff fdeb 	bl	8009ff4 <_SendPacket>
  RECORD_END();
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f383 8811 	msr	BASEPRI, r3
}
 800a424:	bf00      	nop
 800a426:	3720      	adds	r7, #32
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	20006418 	.word	0x20006418

0800a430 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800a430:	b580      	push	{r7, lr}
 800a432:	b08c      	sub	sp, #48	@ 0x30
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800a43c:	f3ef 8311 	mrs	r3, BASEPRI
 800a440:	f04f 0120 	mov.w	r1, #32
 800a444:	f381 8811 	msr	BASEPRI, r1
 800a448:	61fb      	str	r3, [r7, #28]
 800a44a:	4825      	ldr	r0, [pc, #148]	@ (800a4e0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800a44c:	f7ff fce4 	bl	8009e18 <_PreparePacket>
 800a450:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a45e:	e00b      	b.n	800a478 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800a460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a462:	b2da      	uxtb	r2, r3
 800a464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a466:	1c59      	adds	r1, r3, #1
 800a468:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800a46a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a46e:	b2d2      	uxtb	r2, r2
 800a470:	701a      	strb	r2, [r3, #0]
 800a472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a474:	09db      	lsrs	r3, r3, #7
 800a476:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a47c:	d8f0      	bhi.n	800a460 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800a47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a480:	1c5a      	adds	r2, r3, #1
 800a482:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a486:	b2d2      	uxtb	r2, r2
 800a488:	701a      	strb	r2, [r3, #0]
 800a48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a48c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	627b      	str	r3, [r7, #36]	@ 0x24
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	623b      	str	r3, [r7, #32]
 800a496:	e00b      	b.n	800a4b0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800a498:	6a3b      	ldr	r3, [r7, #32]
 800a49a:	b2da      	uxtb	r2, r3
 800a49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49e:	1c59      	adds	r1, r3, #1
 800a4a0:	6279      	str	r1, [r7, #36]	@ 0x24
 800a4a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a4a6:	b2d2      	uxtb	r2, r2
 800a4a8:	701a      	strb	r2, [r3, #0]
 800a4aa:	6a3b      	ldr	r3, [r7, #32]
 800a4ac:	09db      	lsrs	r3, r3, #7
 800a4ae:	623b      	str	r3, [r7, #32]
 800a4b0:	6a3b      	ldr	r3, [r7, #32]
 800a4b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a4b4:	d8f0      	bhi.n	800a498 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b8:	1c5a      	adds	r2, r3, #1
 800a4ba:	627a      	str	r2, [r7, #36]	@ 0x24
 800a4bc:	6a3a      	ldr	r2, [r7, #32]
 800a4be:	b2d2      	uxtb	r2, r2
 800a4c0:	701a      	strb	r2, [r3, #0]
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	6979      	ldr	r1, [r7, #20]
 800a4ca:	69b8      	ldr	r0, [r7, #24]
 800a4cc:	f7ff fd92 	bl	8009ff4 <_SendPacket>
  RECORD_END();
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	f383 8811 	msr	BASEPRI, r3
}
 800a4d6:	bf00      	nop
 800a4d8:	3730      	adds	r7, #48	@ 0x30
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	20006418 	.word	0x20006418

0800a4e4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b08c      	sub	sp, #48	@ 0x30
 800a4e8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800a4ea:	4b59      	ldr	r3, [pc, #356]	@ (800a650 <SEGGER_SYSVIEW_Start+0x16c>)
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800a4f0:	f3ef 8311 	mrs	r3, BASEPRI
 800a4f4:	f04f 0120 	mov.w	r1, #32
 800a4f8:	f381 8811 	msr	BASEPRI, r1
 800a4fc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800a4fe:	4b54      	ldr	r3, [pc, #336]	@ (800a650 <SEGGER_SYSVIEW_Start+0x16c>)
 800a500:	785b      	ldrb	r3, [r3, #1]
 800a502:	220a      	movs	r2, #10
 800a504:	4953      	ldr	r1, [pc, #332]	@ (800a654 <SEGGER_SYSVIEW_Start+0x170>)
 800a506:	4618      	mov	r0, r3
 800a508:	f7f5 fe6a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800a512:	f7fe ffdd 	bl	80094d0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800a516:	200a      	movs	r0, #10
 800a518:	f7ff ff30 	bl	800a37c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800a51c:	f3ef 8311 	mrs	r3, BASEPRI
 800a520:	f04f 0120 	mov.w	r1, #32
 800a524:	f381 8811 	msr	BASEPRI, r1
 800a528:	60bb      	str	r3, [r7, #8]
 800a52a:	484b      	ldr	r0, [pc, #300]	@ (800a658 <SEGGER_SYSVIEW_Start+0x174>)
 800a52c:	f7ff fc74 	bl	8009e18 <_PreparePacket>
 800a530:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a53a:	4b45      	ldr	r3, [pc, #276]	@ (800a650 <SEGGER_SYSVIEW_Start+0x16c>)
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a540:	e00b      	b.n	800a55a <SEGGER_SYSVIEW_Start+0x76>
 800a542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a544:	b2da      	uxtb	r2, r3
 800a546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a548:	1c59      	adds	r1, r3, #1
 800a54a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800a54c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a550:	b2d2      	uxtb	r2, r2
 800a552:	701a      	strb	r2, [r3, #0]
 800a554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a556:	09db      	lsrs	r3, r3, #7
 800a558:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a55c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a55e:	d8f0      	bhi.n	800a542 <SEGGER_SYSVIEW_Start+0x5e>
 800a560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a562:	1c5a      	adds	r2, r3, #1
 800a564:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a566:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a568:	b2d2      	uxtb	r2, r2
 800a56a:	701a      	strb	r2, [r3, #0]
 800a56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	627b      	str	r3, [r7, #36]	@ 0x24
 800a574:	4b36      	ldr	r3, [pc, #216]	@ (800a650 <SEGGER_SYSVIEW_Start+0x16c>)
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	623b      	str	r3, [r7, #32]
 800a57a:	e00b      	b.n	800a594 <SEGGER_SYSVIEW_Start+0xb0>
 800a57c:	6a3b      	ldr	r3, [r7, #32]
 800a57e:	b2da      	uxtb	r2, r3
 800a580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a582:	1c59      	adds	r1, r3, #1
 800a584:	6279      	str	r1, [r7, #36]	@ 0x24
 800a586:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a58a:	b2d2      	uxtb	r2, r2
 800a58c:	701a      	strb	r2, [r3, #0]
 800a58e:	6a3b      	ldr	r3, [r7, #32]
 800a590:	09db      	lsrs	r3, r3, #7
 800a592:	623b      	str	r3, [r7, #32]
 800a594:	6a3b      	ldr	r3, [r7, #32]
 800a596:	2b7f      	cmp	r3, #127	@ 0x7f
 800a598:	d8f0      	bhi.n	800a57c <SEGGER_SYSVIEW_Start+0x98>
 800a59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59c:	1c5a      	adds	r2, r3, #1
 800a59e:	627a      	str	r2, [r7, #36]	@ 0x24
 800a5a0:	6a3a      	ldr	r2, [r7, #32]
 800a5a2:	b2d2      	uxtb	r2, r2
 800a5a4:	701a      	strb	r2, [r3, #0]
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	61fb      	str	r3, [r7, #28]
 800a5ae:	4b28      	ldr	r3, [pc, #160]	@ (800a650 <SEGGER_SYSVIEW_Start+0x16c>)
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	61bb      	str	r3, [r7, #24]
 800a5b4:	e00b      	b.n	800a5ce <SEGGER_SYSVIEW_Start+0xea>
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	1c59      	adds	r1, r3, #1
 800a5be:	61f9      	str	r1, [r7, #28]
 800a5c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a5c4:	b2d2      	uxtb	r2, r2
 800a5c6:	701a      	strb	r2, [r3, #0]
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	09db      	lsrs	r3, r3, #7
 800a5cc:	61bb      	str	r3, [r7, #24]
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	2b7f      	cmp	r3, #127	@ 0x7f
 800a5d2:	d8f0      	bhi.n	800a5b6 <SEGGER_SYSVIEW_Start+0xd2>
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	1c5a      	adds	r2, r3, #1
 800a5d8:	61fa      	str	r2, [r7, #28]
 800a5da:	69ba      	ldr	r2, [r7, #24]
 800a5dc:	b2d2      	uxtb	r2, r2
 800a5de:	701a      	strb	r2, [r3, #0]
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	617b      	str	r3, [r7, #20]
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	613b      	str	r3, [r7, #16]
 800a5ec:	e00b      	b.n	800a606 <SEGGER_SYSVIEW_Start+0x122>
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	1c59      	adds	r1, r3, #1
 800a5f6:	6179      	str	r1, [r7, #20]
 800a5f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a5fc:	b2d2      	uxtb	r2, r2
 800a5fe:	701a      	strb	r2, [r3, #0]
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	09db      	lsrs	r3, r3, #7
 800a604:	613b      	str	r3, [r7, #16]
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	2b7f      	cmp	r3, #127	@ 0x7f
 800a60a:	d8f0      	bhi.n	800a5ee <SEGGER_SYSVIEW_Start+0x10a>
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	1c5a      	adds	r2, r3, #1
 800a610:	617a      	str	r2, [r7, #20]
 800a612:	693a      	ldr	r2, [r7, #16]
 800a614:	b2d2      	uxtb	r2, r2
 800a616:	701a      	strb	r2, [r3, #0]
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800a61c:	2218      	movs	r2, #24
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f7ff fce7 	bl	8009ff4 <_SendPacket>
      RECORD_END();
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800a62c:	4b08      	ldr	r3, [pc, #32]	@ (800a650 <SEGGER_SYSVIEW_Start+0x16c>)
 800a62e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a630:	2b00      	cmp	r3, #0
 800a632:	d002      	beq.n	800a63a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800a634:	4b06      	ldr	r3, [pc, #24]	@ (800a650 <SEGGER_SYSVIEW_Start+0x16c>)
 800a636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a638:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800a63a:	f000 f9eb 	bl	800aa14 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800a63e:	f000 f9b1 	bl	800a9a4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800a642:	f000 fac1 	bl	800abc8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800a646:	bf00      	nop
 800a648:	3730      	adds	r7, #48	@ 0x30
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	200063e8 	.word	0x200063e8
 800a654:	0800e1a0 	.word	0x0800e1a0
 800a658:	20006418 	.word	0x20006418

0800a65c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a662:	f3ef 8311 	mrs	r3, BASEPRI
 800a666:	f04f 0120 	mov.w	r1, #32
 800a66a:	f381 8811 	msr	BASEPRI, r1
 800a66e:	607b      	str	r3, [r7, #4]
 800a670:	480b      	ldr	r0, [pc, #44]	@ (800a6a0 <SEGGER_SYSVIEW_Stop+0x44>)
 800a672:	f7ff fbd1 	bl	8009e18 <_PreparePacket>
 800a676:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800a678:	4b0a      	ldr	r3, [pc, #40]	@ (800a6a4 <SEGGER_SYSVIEW_Stop+0x48>)
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d007      	beq.n	800a690 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800a680:	220b      	movs	r2, #11
 800a682:	6839      	ldr	r1, [r7, #0]
 800a684:	6838      	ldr	r0, [r7, #0]
 800a686:	f7ff fcb5 	bl	8009ff4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800a68a:	4b06      	ldr	r3, [pc, #24]	@ (800a6a4 <SEGGER_SYSVIEW_Stop+0x48>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f383 8811 	msr	BASEPRI, r3
}
 800a696:	bf00      	nop
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	20006418 	.word	0x20006418
 800a6a4:	200063e8 	.word	0x200063e8

0800a6a8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b08c      	sub	sp, #48	@ 0x30
 800a6ac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800a6ae:	f3ef 8311 	mrs	r3, BASEPRI
 800a6b2:	f04f 0120 	mov.w	r1, #32
 800a6b6:	f381 8811 	msr	BASEPRI, r1
 800a6ba:	60fb      	str	r3, [r7, #12]
 800a6bc:	4845      	ldr	r0, [pc, #276]	@ (800a7d4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800a6be:	f7ff fbab 	bl	8009e18 <_PreparePacket>
 800a6c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6cc:	4b42      	ldr	r3, [pc, #264]	@ (800a7d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6d2:	e00b      	b.n	800a6ec <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800a6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d6:	b2da      	uxtb	r2, r3
 800a6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6da:	1c59      	adds	r1, r3, #1
 800a6dc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800a6de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a6e2:	b2d2      	uxtb	r2, r2
 800a6e4:	701a      	strb	r2, [r3, #0]
 800a6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e8:	09db      	lsrs	r3, r3, #7
 800a6ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800a6f0:	d8f0      	bhi.n	800a6d4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800a6f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6f4:	1c5a      	adds	r2, r3, #1
 800a6f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a6f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6fa:	b2d2      	uxtb	r2, r2
 800a6fc:	701a      	strb	r2, [r3, #0]
 800a6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a700:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	627b      	str	r3, [r7, #36]	@ 0x24
 800a706:	4b34      	ldr	r3, [pc, #208]	@ (800a7d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	623b      	str	r3, [r7, #32]
 800a70c:	e00b      	b.n	800a726 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800a70e:	6a3b      	ldr	r3, [r7, #32]
 800a710:	b2da      	uxtb	r2, r3
 800a712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a714:	1c59      	adds	r1, r3, #1
 800a716:	6279      	str	r1, [r7, #36]	@ 0x24
 800a718:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a71c:	b2d2      	uxtb	r2, r2
 800a71e:	701a      	strb	r2, [r3, #0]
 800a720:	6a3b      	ldr	r3, [r7, #32]
 800a722:	09db      	lsrs	r3, r3, #7
 800a724:	623b      	str	r3, [r7, #32]
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	2b7f      	cmp	r3, #127	@ 0x7f
 800a72a:	d8f0      	bhi.n	800a70e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800a72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72e:	1c5a      	adds	r2, r3, #1
 800a730:	627a      	str	r2, [r7, #36]	@ 0x24
 800a732:	6a3a      	ldr	r2, [r7, #32]
 800a734:	b2d2      	uxtb	r2, r2
 800a736:	701a      	strb	r2, [r3, #0]
 800a738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	61fb      	str	r3, [r7, #28]
 800a740:	4b25      	ldr	r3, [pc, #148]	@ (800a7d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	61bb      	str	r3, [r7, #24]
 800a746:	e00b      	b.n	800a760 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	b2da      	uxtb	r2, r3
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	1c59      	adds	r1, r3, #1
 800a750:	61f9      	str	r1, [r7, #28]
 800a752:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a756:	b2d2      	uxtb	r2, r2
 800a758:	701a      	strb	r2, [r3, #0]
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	09db      	lsrs	r3, r3, #7
 800a75e:	61bb      	str	r3, [r7, #24]
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	2b7f      	cmp	r3, #127	@ 0x7f
 800a764:	d8f0      	bhi.n	800a748 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	1c5a      	adds	r2, r3, #1
 800a76a:	61fa      	str	r2, [r7, #28]
 800a76c:	69ba      	ldr	r2, [r7, #24]
 800a76e:	b2d2      	uxtb	r2, r2
 800a770:	701a      	strb	r2, [r3, #0]
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	617b      	str	r3, [r7, #20]
 800a77a:	2300      	movs	r3, #0
 800a77c:	613b      	str	r3, [r7, #16]
 800a77e:	e00b      	b.n	800a798 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	b2da      	uxtb	r2, r3
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	1c59      	adds	r1, r3, #1
 800a788:	6179      	str	r1, [r7, #20]
 800a78a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a78e:	b2d2      	uxtb	r2, r2
 800a790:	701a      	strb	r2, [r3, #0]
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	09db      	lsrs	r3, r3, #7
 800a796:	613b      	str	r3, [r7, #16]
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a79c:	d8f0      	bhi.n	800a780 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	1c5a      	adds	r2, r3, #1
 800a7a2:	617a      	str	r2, [r7, #20]
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	b2d2      	uxtb	r2, r2
 800a7a8:	701a      	strb	r2, [r3, #0]
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800a7ae:	2218      	movs	r2, #24
 800a7b0:	6879      	ldr	r1, [r7, #4]
 800a7b2:	68b8      	ldr	r0, [r7, #8]
 800a7b4:	f7ff fc1e 	bl	8009ff4 <_SendPacket>
  RECORD_END();
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800a7be:	4b06      	ldr	r3, [pc, #24]	@ (800a7d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a7c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d002      	beq.n	800a7cc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800a7c6:	4b04      	ldr	r3, [pc, #16]	@ (800a7d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a7c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ca:	4798      	blx	r3
  }
}
 800a7cc:	bf00      	nop
 800a7ce:	3730      	adds	r7, #48	@ 0x30
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	20006418 	.word	0x20006418
 800a7d8:	200063e8 	.word	0x200063e8

0800a7dc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b092      	sub	sp, #72	@ 0x48
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800a7e4:	f3ef 8311 	mrs	r3, BASEPRI
 800a7e8:	f04f 0120 	mov.w	r1, #32
 800a7ec:	f381 8811 	msr	BASEPRI, r1
 800a7f0:	617b      	str	r3, [r7, #20]
 800a7f2:	486a      	ldr	r0, [pc, #424]	@ (800a99c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800a7f4:	f7ff fb10 	bl	8009e18 <_PreparePacket>
 800a7f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	647b      	str	r3, [r7, #68]	@ 0x44
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	4b66      	ldr	r3, [pc, #408]	@ (800a9a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	1ad3      	subs	r3, r2, r3
 800a80c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a80e:	e00b      	b.n	800a828 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800a810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a812:	b2da      	uxtb	r2, r3
 800a814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a816:	1c59      	adds	r1, r3, #1
 800a818:	6479      	str	r1, [r7, #68]	@ 0x44
 800a81a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a81e:	b2d2      	uxtb	r2, r2
 800a820:	701a      	strb	r2, [r3, #0]
 800a822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a824:	09db      	lsrs	r3, r3, #7
 800a826:	643b      	str	r3, [r7, #64]	@ 0x40
 800a828:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a82a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a82c:	d8f0      	bhi.n	800a810 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800a82e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a830:	1c5a      	adds	r2, r3, #1
 800a832:	647a      	str	r2, [r7, #68]	@ 0x44
 800a834:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a836:	b2d2      	uxtb	r2, r2
 800a838:	701a      	strb	r2, [r3, #0]
 800a83a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a83c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a848:	e00b      	b.n	800a862 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800a84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a84c:	b2da      	uxtb	r2, r3
 800a84e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a850:	1c59      	adds	r1, r3, #1
 800a852:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800a854:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a858:	b2d2      	uxtb	r2, r2
 800a85a:	701a      	strb	r2, [r3, #0]
 800a85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a85e:	09db      	lsrs	r3, r3, #7
 800a860:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a864:	2b7f      	cmp	r3, #127	@ 0x7f
 800a866:	d8f0      	bhi.n	800a84a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800a868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a86a:	1c5a      	adds	r2, r3, #1
 800a86c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a86e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a870:	b2d2      	uxtb	r2, r2
 800a872:	701a      	strb	r2, [r3, #0]
 800a874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a876:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	2220      	movs	r2, #32
 800a87e:	4619      	mov	r1, r3
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f7ff fa99 	bl	8009db8 <_EncodeStr>
 800a886:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800a888:	2209      	movs	r2, #9
 800a88a:	68f9      	ldr	r1, [r7, #12]
 800a88c:	6938      	ldr	r0, [r7, #16]
 800a88e:	f7ff fbb1 	bl	8009ff4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	637b      	str	r3, [r7, #52]	@ 0x34
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	4b40      	ldr	r3, [pc, #256]	@ (800a9a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a8a0:	691b      	ldr	r3, [r3, #16]
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8a6:	e00b      	b.n	800a8c0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800a8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ae:	1c59      	adds	r1, r3, #1
 800a8b0:	6379      	str	r1, [r7, #52]	@ 0x34
 800a8b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a8b6:	b2d2      	uxtb	r2, r2
 800a8b8:	701a      	strb	r2, [r3, #0]
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8bc:	09db      	lsrs	r3, r3, #7
 800a8be:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a8c4:	d8f0      	bhi.n	800a8a8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800a8c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8c8:	1c5a      	adds	r2, r3, #1
 800a8ca:	637a      	str	r2, [r7, #52]	@ 0x34
 800a8cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8ce:	b2d2      	uxtb	r2, r2
 800a8d0:	701a      	strb	r2, [r3, #0]
 800a8d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a8e0:	e00b      	b.n	800a8fa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800a8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e4:	b2da      	uxtb	r2, r3
 800a8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e8:	1c59      	adds	r1, r3, #1
 800a8ea:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800a8ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a8f0:	b2d2      	uxtb	r2, r2
 800a8f2:	701a      	strb	r2, [r3, #0]
 800a8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f6:	09db      	lsrs	r3, r3, #7
 800a8f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8fc:	2b7f      	cmp	r3, #127	@ 0x7f
 800a8fe:	d8f0      	bhi.n	800a8e2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800a900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a902:	1c5a      	adds	r2, r3, #1
 800a904:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a906:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a908:	b2d2      	uxtb	r2, r2
 800a90a:	701a      	strb	r2, [r3, #0]
 800a90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a90e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	627b      	str	r3, [r7, #36]	@ 0x24
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	691b      	ldr	r3, [r3, #16]
 800a918:	623b      	str	r3, [r7, #32]
 800a91a:	e00b      	b.n	800a934 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800a91c:	6a3b      	ldr	r3, [r7, #32]
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a922:	1c59      	adds	r1, r3, #1
 800a924:	6279      	str	r1, [r7, #36]	@ 0x24
 800a926:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a92a:	b2d2      	uxtb	r2, r2
 800a92c:	701a      	strb	r2, [r3, #0]
 800a92e:	6a3b      	ldr	r3, [r7, #32]
 800a930:	09db      	lsrs	r3, r3, #7
 800a932:	623b      	str	r3, [r7, #32]
 800a934:	6a3b      	ldr	r3, [r7, #32]
 800a936:	2b7f      	cmp	r3, #127	@ 0x7f
 800a938:	d8f0      	bhi.n	800a91c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800a93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93c:	1c5a      	adds	r2, r3, #1
 800a93e:	627a      	str	r2, [r7, #36]	@ 0x24
 800a940:	6a3a      	ldr	r2, [r7, #32]
 800a942:	b2d2      	uxtb	r2, r2
 800a944:	701a      	strb	r2, [r3, #0]
 800a946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a948:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	61fb      	str	r3, [r7, #28]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	695b      	ldr	r3, [r3, #20]
 800a952:	61bb      	str	r3, [r7, #24]
 800a954:	e00b      	b.n	800a96e <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	1c59      	adds	r1, r3, #1
 800a95e:	61f9      	str	r1, [r7, #28]
 800a960:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a964:	b2d2      	uxtb	r2, r2
 800a966:	701a      	strb	r2, [r3, #0]
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	09db      	lsrs	r3, r3, #7
 800a96c:	61bb      	str	r3, [r7, #24]
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	2b7f      	cmp	r3, #127	@ 0x7f
 800a972:	d8f0      	bhi.n	800a956 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	1c5a      	adds	r2, r3, #1
 800a978:	61fa      	str	r2, [r7, #28]
 800a97a:	69ba      	ldr	r2, [r7, #24]
 800a97c:	b2d2      	uxtb	r2, r2
 800a97e:	701a      	strb	r2, [r3, #0]
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800a984:	2215      	movs	r2, #21
 800a986:	68f9      	ldr	r1, [r7, #12]
 800a988:	6938      	ldr	r0, [r7, #16]
 800a98a:	f7ff fb33 	bl	8009ff4 <_SendPacket>
  RECORD_END();
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f383 8811 	msr	BASEPRI, r3
}
 800a994:	bf00      	nop
 800a996:	3748      	adds	r7, #72	@ 0x48
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	20006418 	.word	0x20006418
 800a9a0:	200063e8 	.word	0x200063e8

0800a9a4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800a9a8:	4b07      	ldr	r3, [pc, #28]	@ (800a9c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a9aa:	6a1b      	ldr	r3, [r3, #32]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d008      	beq.n	800a9c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800a9b0:	4b05      	ldr	r3, [pc, #20]	@ (800a9c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a9b2:	6a1b      	ldr	r3, [r3, #32]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d003      	beq.n	800a9c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800a9ba:	4b03      	ldr	r3, [pc, #12]	@ (800a9c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a9bc:	6a1b      	ldr	r3, [r3, #32]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	4798      	blx	r3
  }
}
 800a9c2:	bf00      	nop
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	200063e8 	.word	0x200063e8

0800a9cc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a9d4:	f3ef 8311 	mrs	r3, BASEPRI
 800a9d8:	f04f 0120 	mov.w	r1, #32
 800a9dc:	f381 8811 	msr	BASEPRI, r1
 800a9e0:	617b      	str	r3, [r7, #20]
 800a9e2:	480b      	ldr	r0, [pc, #44]	@ (800aa10 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800a9e4:	f7ff fa18 	bl	8009e18 <_PreparePacket>
 800a9e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a9ea:	2280      	movs	r2, #128	@ 0x80
 800a9ec:	6879      	ldr	r1, [r7, #4]
 800a9ee:	6938      	ldr	r0, [r7, #16]
 800a9f0:	f7ff f9e2 	bl	8009db8 <_EncodeStr>
 800a9f4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800a9f6:	220e      	movs	r2, #14
 800a9f8:	68f9      	ldr	r1, [r7, #12]
 800a9fa:	6938      	ldr	r0, [r7, #16]
 800a9fc:	f7ff fafa 	bl	8009ff4 <_SendPacket>
  RECORD_END();
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	f383 8811 	msr	BASEPRI, r3
}
 800aa06:	bf00      	nop
 800aa08:	3718      	adds	r7, #24
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	20006418 	.word	0x20006418

0800aa14 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800aa14:	b590      	push	{r4, r7, lr}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800aa1a:	4b15      	ldr	r3, [pc, #84]	@ (800aa70 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800aa1c:	6a1b      	ldr	r3, [r3, #32]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d01a      	beq.n	800aa58 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800aa22:	4b13      	ldr	r3, [pc, #76]	@ (800aa70 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d015      	beq.n	800aa58 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800aa2c:	4b10      	ldr	r3, [pc, #64]	@ (800aa70 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800aa2e:	6a1b      	ldr	r3, [r3, #32]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4798      	blx	r3
 800aa34:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800aa38:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800aa3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa3e:	f04f 0200 	mov.w	r2, #0
 800aa42:	f04f 0300 	mov.w	r3, #0
 800aa46:	000a      	movs	r2, r1
 800aa48:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	4621      	mov	r1, r4
 800aa50:	200d      	movs	r0, #13
 800aa52:	f7ff fced 	bl	800a430 <SEGGER_SYSVIEW_RecordU32x2>
 800aa56:	e006      	b.n	800aa66 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800aa58:	4b06      	ldr	r3, [pc, #24]	@ (800aa74 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	200c      	movs	r0, #12
 800aa60:	f7ff fcaa 	bl	800a3b8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800aa64:	bf00      	nop
 800aa66:	bf00      	nop
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd90      	pop	{r4, r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	200063e8 	.word	0x200063e8
 800aa74:	e0001004 	.word	0xe0001004

0800aa78 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b08c      	sub	sp, #48	@ 0x30
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	4603      	mov	r3, r0
 800aa80:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800aa82:	4b40      	ldr	r3, [pc, #256]	@ (800ab84 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d077      	beq.n	800ab7a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800aa8a:	4b3e      	ldr	r3, [pc, #248]	@ (800ab84 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800aa90:	2300      	movs	r3, #0
 800aa92:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa94:	e008      	b.n	800aaa8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800aa96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800aa9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d007      	beq.n	800aab2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800aaa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aaa8:	79fb      	ldrb	r3, [r7, #7]
 800aaaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d3f2      	bcc.n	800aa96 <SEGGER_SYSVIEW_SendModule+0x1e>
 800aab0:	e000      	b.n	800aab4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800aab2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800aab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d055      	beq.n	800ab66 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800aaba:	f3ef 8311 	mrs	r3, BASEPRI
 800aabe:	f04f 0120 	mov.w	r1, #32
 800aac2:	f381 8811 	msr	BASEPRI, r1
 800aac6:	617b      	str	r3, [r7, #20]
 800aac8:	482f      	ldr	r0, [pc, #188]	@ (800ab88 <SEGGER_SYSVIEW_SendModule+0x110>)
 800aaca:	f7ff f9a5 	bl	8009e18 <_PreparePacket>
 800aace:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	627b      	str	r3, [r7, #36]	@ 0x24
 800aad8:	79fb      	ldrb	r3, [r7, #7]
 800aada:	623b      	str	r3, [r7, #32]
 800aadc:	e00b      	b.n	800aaf6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800aade:	6a3b      	ldr	r3, [r7, #32]
 800aae0:	b2da      	uxtb	r2, r3
 800aae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae4:	1c59      	adds	r1, r3, #1
 800aae6:	6279      	str	r1, [r7, #36]	@ 0x24
 800aae8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800aaec:	b2d2      	uxtb	r2, r2
 800aaee:	701a      	strb	r2, [r3, #0]
 800aaf0:	6a3b      	ldr	r3, [r7, #32]
 800aaf2:	09db      	lsrs	r3, r3, #7
 800aaf4:	623b      	str	r3, [r7, #32]
 800aaf6:	6a3b      	ldr	r3, [r7, #32]
 800aaf8:	2b7f      	cmp	r3, #127	@ 0x7f
 800aafa:	d8f0      	bhi.n	800aade <SEGGER_SYSVIEW_SendModule+0x66>
 800aafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafe:	1c5a      	adds	r2, r3, #1
 800ab00:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab02:	6a3a      	ldr	r2, [r7, #32]
 800ab04:	b2d2      	uxtb	r2, r2
 800ab06:	701a      	strb	r2, [r3, #0]
 800ab08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	61fb      	str	r3, [r7, #28]
 800ab10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	61bb      	str	r3, [r7, #24]
 800ab16:	e00b      	b.n	800ab30 <SEGGER_SYSVIEW_SendModule+0xb8>
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	b2da      	uxtb	r2, r3
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	1c59      	adds	r1, r3, #1
 800ab20:	61f9      	str	r1, [r7, #28]
 800ab22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ab26:	b2d2      	uxtb	r2, r2
 800ab28:	701a      	strb	r2, [r3, #0]
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	09db      	lsrs	r3, r3, #7
 800ab2e:	61bb      	str	r3, [r7, #24]
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	2b7f      	cmp	r3, #127	@ 0x7f
 800ab34:	d8f0      	bhi.n	800ab18 <SEGGER_SYSVIEW_SendModule+0xa0>
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	61fa      	str	r2, [r7, #28]
 800ab3c:	69ba      	ldr	r2, [r7, #24]
 800ab3e:	b2d2      	uxtb	r2, r2
 800ab40:	701a      	strb	r2, [r3, #0]
 800ab42:	69fb      	ldr	r3, [r7, #28]
 800ab44:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ab46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2280      	movs	r2, #128	@ 0x80
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f7ff f932 	bl	8009db8 <_EncodeStr>
 800ab54:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800ab56:	2216      	movs	r2, #22
 800ab58:	68f9      	ldr	r1, [r7, #12]
 800ab5a:	6938      	ldr	r0, [r7, #16]
 800ab5c:	f7ff fa4a 	bl	8009ff4 <_SendPacket>
      RECORD_END();
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800ab66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d006      	beq.n	800ab7a <SEGGER_SYSVIEW_SendModule+0x102>
 800ab6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800ab74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	4798      	blx	r3
    }
  }
}
 800ab7a:	bf00      	nop
 800ab7c:	3730      	adds	r7, #48	@ 0x30
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20006410 	.word	0x20006410
 800ab88:	20006418 	.word	0x20006418

0800ab8c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800ab92:	4b0c      	ldr	r3, [pc, #48]	@ (800abc4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00f      	beq.n	800abba <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800ab9a:	4b0a      	ldr	r3, [pc, #40]	@ (800abc4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d002      	beq.n	800abae <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d1f2      	bne.n	800aba0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800abba:	bf00      	nop
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	20006410 	.word	0x20006410

0800abc8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800abce:	f3ef 8311 	mrs	r3, BASEPRI
 800abd2:	f04f 0120 	mov.w	r1, #32
 800abd6:	f381 8811 	msr	BASEPRI, r1
 800abda:	60fb      	str	r3, [r7, #12]
 800abdc:	4817      	ldr	r0, [pc, #92]	@ (800ac3c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800abde:	f7ff f91b 	bl	8009e18 <_PreparePacket>
 800abe2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	617b      	str	r3, [r7, #20]
 800abec:	4b14      	ldr	r3, [pc, #80]	@ (800ac40 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	613b      	str	r3, [r7, #16]
 800abf2:	e00b      	b.n	800ac0c <SEGGER_SYSVIEW_SendNumModules+0x44>
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	b2da      	uxtb	r2, r3
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	1c59      	adds	r1, r3, #1
 800abfc:	6179      	str	r1, [r7, #20]
 800abfe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ac02:	b2d2      	uxtb	r2, r2
 800ac04:	701a      	strb	r2, [r3, #0]
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	09db      	lsrs	r3, r3, #7
 800ac0a:	613b      	str	r3, [r7, #16]
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ac10:	d8f0      	bhi.n	800abf4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	1c5a      	adds	r2, r3, #1
 800ac16:	617a      	str	r2, [r7, #20]
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	b2d2      	uxtb	r2, r2
 800ac1c:	701a      	strb	r2, [r3, #0]
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800ac22:	221b      	movs	r2, #27
 800ac24:	6879      	ldr	r1, [r7, #4]
 800ac26:	68b8      	ldr	r0, [r7, #8]
 800ac28:	f7ff f9e4 	bl	8009ff4 <_SendPacket>
  RECORD_END();
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f383 8811 	msr	BASEPRI, r3
}
 800ac32:	bf00      	nop
 800ac34:	3718      	adds	r7, #24
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	20006418 	.word	0x20006418
 800ac40:	20006414 	.word	0x20006414

0800ac44 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800ac44:	b580      	push	{r7, lr}
 800ac46:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800ac48:	4b13      	ldr	r3, [pc, #76]	@ (800ac98 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800ac4a:	7e1b      	ldrb	r3, [r3, #24]
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	4a13      	ldr	r2, [pc, #76]	@ (800ac9c <SEGGER_SYSVIEW_IsStarted+0x58>)
 800ac50:	460b      	mov	r3, r1
 800ac52:	005b      	lsls	r3, r3, #1
 800ac54:	440b      	add	r3, r1
 800ac56:	00db      	lsls	r3, r3, #3
 800ac58:	4413      	add	r3, r2
 800ac5a:	336c      	adds	r3, #108	@ 0x6c
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ac98 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800ac60:	7e1b      	ldrb	r3, [r3, #24]
 800ac62:	4618      	mov	r0, r3
 800ac64:	490d      	ldr	r1, [pc, #52]	@ (800ac9c <SEGGER_SYSVIEW_IsStarted+0x58>)
 800ac66:	4603      	mov	r3, r0
 800ac68:	005b      	lsls	r3, r3, #1
 800ac6a:	4403      	add	r3, r0
 800ac6c:	00db      	lsls	r3, r3, #3
 800ac6e:	440b      	add	r3, r1
 800ac70:	3370      	adds	r3, #112	@ 0x70
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d00b      	beq.n	800ac90 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800ac78:	4b07      	ldr	r3, [pc, #28]	@ (800ac98 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800ac7a:	789b      	ldrb	r3, [r3, #2]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d107      	bne.n	800ac90 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800ac80:	4b05      	ldr	r3, [pc, #20]	@ (800ac98 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800ac82:	2201      	movs	r2, #1
 800ac84:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800ac86:	f7ff f8d3 	bl	8009e30 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800ac8a:	4b03      	ldr	r3, [pc, #12]	@ (800ac98 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800ac90:	4b01      	ldr	r3, [pc, #4]	@ (800ac98 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800ac92:	781b      	ldrb	r3, [r3, #0]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	200063e8 	.word	0x200063e8
 800ac9c:	20004f28 	.word	0x20004f28

0800aca0 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
 800acac:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800acae:	683a      	ldr	r2, [r7, #0]
 800acb0:	6879      	ldr	r1, [r7, #4]
 800acb2:	2000      	movs	r0, #0
 800acb4:	f7fe ff8a 	bl	8009bcc <SEGGER_RTT_Write>
  return len;
 800acb8:	683b      	ldr	r3, [r7, #0]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <__cvt>:
 800acc2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acc6:	ec57 6b10 	vmov	r6, r7, d0
 800acca:	2f00      	cmp	r7, #0
 800accc:	460c      	mov	r4, r1
 800acce:	4619      	mov	r1, r3
 800acd0:	463b      	mov	r3, r7
 800acd2:	bfbb      	ittet	lt
 800acd4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800acd8:	461f      	movlt	r7, r3
 800acda:	2300      	movge	r3, #0
 800acdc:	232d      	movlt	r3, #45	@ 0x2d
 800acde:	700b      	strb	r3, [r1, #0]
 800ace0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ace2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ace6:	4691      	mov	r9, r2
 800ace8:	f023 0820 	bic.w	r8, r3, #32
 800acec:	bfbc      	itt	lt
 800acee:	4632      	movlt	r2, r6
 800acf0:	4616      	movlt	r6, r2
 800acf2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800acf6:	d005      	beq.n	800ad04 <__cvt+0x42>
 800acf8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800acfc:	d100      	bne.n	800ad00 <__cvt+0x3e>
 800acfe:	3401      	adds	r4, #1
 800ad00:	2102      	movs	r1, #2
 800ad02:	e000      	b.n	800ad06 <__cvt+0x44>
 800ad04:	2103      	movs	r1, #3
 800ad06:	ab03      	add	r3, sp, #12
 800ad08:	9301      	str	r3, [sp, #4]
 800ad0a:	ab02      	add	r3, sp, #8
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	ec47 6b10 	vmov	d0, r6, r7
 800ad12:	4653      	mov	r3, sl
 800ad14:	4622      	mov	r2, r4
 800ad16:	f000 ff9f 	bl	800bc58 <_dtoa_r>
 800ad1a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ad1e:	4605      	mov	r5, r0
 800ad20:	d119      	bne.n	800ad56 <__cvt+0x94>
 800ad22:	f019 0f01 	tst.w	r9, #1
 800ad26:	d00e      	beq.n	800ad46 <__cvt+0x84>
 800ad28:	eb00 0904 	add.w	r9, r0, r4
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	2300      	movs	r3, #0
 800ad30:	4630      	mov	r0, r6
 800ad32:	4639      	mov	r1, r7
 800ad34:	f7f5 ff20 	bl	8000b78 <__aeabi_dcmpeq>
 800ad38:	b108      	cbz	r0, 800ad3e <__cvt+0x7c>
 800ad3a:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad3e:	2230      	movs	r2, #48	@ 0x30
 800ad40:	9b03      	ldr	r3, [sp, #12]
 800ad42:	454b      	cmp	r3, r9
 800ad44:	d31e      	bcc.n	800ad84 <__cvt+0xc2>
 800ad46:	9b03      	ldr	r3, [sp, #12]
 800ad48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad4a:	1b5b      	subs	r3, r3, r5
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	6013      	str	r3, [r2, #0]
 800ad50:	b004      	add	sp, #16
 800ad52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad56:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad5a:	eb00 0904 	add.w	r9, r0, r4
 800ad5e:	d1e5      	bne.n	800ad2c <__cvt+0x6a>
 800ad60:	7803      	ldrb	r3, [r0, #0]
 800ad62:	2b30      	cmp	r3, #48	@ 0x30
 800ad64:	d10a      	bne.n	800ad7c <__cvt+0xba>
 800ad66:	2200      	movs	r2, #0
 800ad68:	2300      	movs	r3, #0
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	4639      	mov	r1, r7
 800ad6e:	f7f5 ff03 	bl	8000b78 <__aeabi_dcmpeq>
 800ad72:	b918      	cbnz	r0, 800ad7c <__cvt+0xba>
 800ad74:	f1c4 0401 	rsb	r4, r4, #1
 800ad78:	f8ca 4000 	str.w	r4, [sl]
 800ad7c:	f8da 3000 	ldr.w	r3, [sl]
 800ad80:	4499      	add	r9, r3
 800ad82:	e7d3      	b.n	800ad2c <__cvt+0x6a>
 800ad84:	1c59      	adds	r1, r3, #1
 800ad86:	9103      	str	r1, [sp, #12]
 800ad88:	701a      	strb	r2, [r3, #0]
 800ad8a:	e7d9      	b.n	800ad40 <__cvt+0x7e>

0800ad8c <__exponent>:
 800ad8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad8e:	2900      	cmp	r1, #0
 800ad90:	bfba      	itte	lt
 800ad92:	4249      	neglt	r1, r1
 800ad94:	232d      	movlt	r3, #45	@ 0x2d
 800ad96:	232b      	movge	r3, #43	@ 0x2b
 800ad98:	2909      	cmp	r1, #9
 800ad9a:	7002      	strb	r2, [r0, #0]
 800ad9c:	7043      	strb	r3, [r0, #1]
 800ad9e:	dd29      	ble.n	800adf4 <__exponent+0x68>
 800ada0:	f10d 0307 	add.w	r3, sp, #7
 800ada4:	461d      	mov	r5, r3
 800ada6:	270a      	movs	r7, #10
 800ada8:	461a      	mov	r2, r3
 800adaa:	fbb1 f6f7 	udiv	r6, r1, r7
 800adae:	fb07 1416 	mls	r4, r7, r6, r1
 800adb2:	3430      	adds	r4, #48	@ 0x30
 800adb4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800adb8:	460c      	mov	r4, r1
 800adba:	2c63      	cmp	r4, #99	@ 0x63
 800adbc:	f103 33ff 	add.w	r3, r3, #4294967295
 800adc0:	4631      	mov	r1, r6
 800adc2:	dcf1      	bgt.n	800ada8 <__exponent+0x1c>
 800adc4:	3130      	adds	r1, #48	@ 0x30
 800adc6:	1e94      	subs	r4, r2, #2
 800adc8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800adcc:	1c41      	adds	r1, r0, #1
 800adce:	4623      	mov	r3, r4
 800add0:	42ab      	cmp	r3, r5
 800add2:	d30a      	bcc.n	800adea <__exponent+0x5e>
 800add4:	f10d 0309 	add.w	r3, sp, #9
 800add8:	1a9b      	subs	r3, r3, r2
 800adda:	42ac      	cmp	r4, r5
 800addc:	bf88      	it	hi
 800adde:	2300      	movhi	r3, #0
 800ade0:	3302      	adds	r3, #2
 800ade2:	4403      	add	r3, r0
 800ade4:	1a18      	subs	r0, r3, r0
 800ade6:	b003      	add	sp, #12
 800ade8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adea:	f813 6b01 	ldrb.w	r6, [r3], #1
 800adee:	f801 6f01 	strb.w	r6, [r1, #1]!
 800adf2:	e7ed      	b.n	800add0 <__exponent+0x44>
 800adf4:	2330      	movs	r3, #48	@ 0x30
 800adf6:	3130      	adds	r1, #48	@ 0x30
 800adf8:	7083      	strb	r3, [r0, #2]
 800adfa:	70c1      	strb	r1, [r0, #3]
 800adfc:	1d03      	adds	r3, r0, #4
 800adfe:	e7f1      	b.n	800ade4 <__exponent+0x58>

0800ae00 <_printf_float>:
 800ae00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae04:	b08d      	sub	sp, #52	@ 0x34
 800ae06:	460c      	mov	r4, r1
 800ae08:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ae0c:	4616      	mov	r6, r2
 800ae0e:	461f      	mov	r7, r3
 800ae10:	4605      	mov	r5, r0
 800ae12:	f000 fe05 	bl	800ba20 <_localeconv_r>
 800ae16:	6803      	ldr	r3, [r0, #0]
 800ae18:	9304      	str	r3, [sp, #16]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7f5 fa80 	bl	8000320 <strlen>
 800ae20:	2300      	movs	r3, #0
 800ae22:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae24:	f8d8 3000 	ldr.w	r3, [r8]
 800ae28:	9005      	str	r0, [sp, #20]
 800ae2a:	3307      	adds	r3, #7
 800ae2c:	f023 0307 	bic.w	r3, r3, #7
 800ae30:	f103 0208 	add.w	r2, r3, #8
 800ae34:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ae38:	f8d4 b000 	ldr.w	fp, [r4]
 800ae3c:	f8c8 2000 	str.w	r2, [r8]
 800ae40:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae44:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ae48:	9307      	str	r3, [sp, #28]
 800ae4a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae4e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ae52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae56:	4b9c      	ldr	r3, [pc, #624]	@ (800b0c8 <_printf_float+0x2c8>)
 800ae58:	f04f 32ff 	mov.w	r2, #4294967295
 800ae5c:	f7f5 febe 	bl	8000bdc <__aeabi_dcmpun>
 800ae60:	bb70      	cbnz	r0, 800aec0 <_printf_float+0xc0>
 800ae62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae66:	4b98      	ldr	r3, [pc, #608]	@ (800b0c8 <_printf_float+0x2c8>)
 800ae68:	f04f 32ff 	mov.w	r2, #4294967295
 800ae6c:	f7f5 fe98 	bl	8000ba0 <__aeabi_dcmple>
 800ae70:	bb30      	cbnz	r0, 800aec0 <_printf_float+0xc0>
 800ae72:	2200      	movs	r2, #0
 800ae74:	2300      	movs	r3, #0
 800ae76:	4640      	mov	r0, r8
 800ae78:	4649      	mov	r1, r9
 800ae7a:	f7f5 fe87 	bl	8000b8c <__aeabi_dcmplt>
 800ae7e:	b110      	cbz	r0, 800ae86 <_printf_float+0x86>
 800ae80:	232d      	movs	r3, #45	@ 0x2d
 800ae82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae86:	4a91      	ldr	r2, [pc, #580]	@ (800b0cc <_printf_float+0x2cc>)
 800ae88:	4b91      	ldr	r3, [pc, #580]	@ (800b0d0 <_printf_float+0x2d0>)
 800ae8a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ae8e:	bf94      	ite	ls
 800ae90:	4690      	movls	r8, r2
 800ae92:	4698      	movhi	r8, r3
 800ae94:	2303      	movs	r3, #3
 800ae96:	6123      	str	r3, [r4, #16]
 800ae98:	f02b 0304 	bic.w	r3, fp, #4
 800ae9c:	6023      	str	r3, [r4, #0]
 800ae9e:	f04f 0900 	mov.w	r9, #0
 800aea2:	9700      	str	r7, [sp, #0]
 800aea4:	4633      	mov	r3, r6
 800aea6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aea8:	4621      	mov	r1, r4
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f000 f9d2 	bl	800b254 <_printf_common>
 800aeb0:	3001      	adds	r0, #1
 800aeb2:	f040 808d 	bne.w	800afd0 <_printf_float+0x1d0>
 800aeb6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeba:	b00d      	add	sp, #52	@ 0x34
 800aebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aec0:	4642      	mov	r2, r8
 800aec2:	464b      	mov	r3, r9
 800aec4:	4640      	mov	r0, r8
 800aec6:	4649      	mov	r1, r9
 800aec8:	f7f5 fe88 	bl	8000bdc <__aeabi_dcmpun>
 800aecc:	b140      	cbz	r0, 800aee0 <_printf_float+0xe0>
 800aece:	464b      	mov	r3, r9
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	bfbc      	itt	lt
 800aed4:	232d      	movlt	r3, #45	@ 0x2d
 800aed6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aeda:	4a7e      	ldr	r2, [pc, #504]	@ (800b0d4 <_printf_float+0x2d4>)
 800aedc:	4b7e      	ldr	r3, [pc, #504]	@ (800b0d8 <_printf_float+0x2d8>)
 800aede:	e7d4      	b.n	800ae8a <_printf_float+0x8a>
 800aee0:	6863      	ldr	r3, [r4, #4]
 800aee2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800aee6:	9206      	str	r2, [sp, #24]
 800aee8:	1c5a      	adds	r2, r3, #1
 800aeea:	d13b      	bne.n	800af64 <_printf_float+0x164>
 800aeec:	2306      	movs	r3, #6
 800aeee:	6063      	str	r3, [r4, #4]
 800aef0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800aef4:	2300      	movs	r3, #0
 800aef6:	6022      	str	r2, [r4, #0]
 800aef8:	9303      	str	r3, [sp, #12]
 800aefa:	ab0a      	add	r3, sp, #40	@ 0x28
 800aefc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800af00:	ab09      	add	r3, sp, #36	@ 0x24
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	6861      	ldr	r1, [r4, #4]
 800af06:	ec49 8b10 	vmov	d0, r8, r9
 800af0a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800af0e:	4628      	mov	r0, r5
 800af10:	f7ff fed7 	bl	800acc2 <__cvt>
 800af14:	9b06      	ldr	r3, [sp, #24]
 800af16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af18:	2b47      	cmp	r3, #71	@ 0x47
 800af1a:	4680      	mov	r8, r0
 800af1c:	d129      	bne.n	800af72 <_printf_float+0x172>
 800af1e:	1cc8      	adds	r0, r1, #3
 800af20:	db02      	blt.n	800af28 <_printf_float+0x128>
 800af22:	6863      	ldr	r3, [r4, #4]
 800af24:	4299      	cmp	r1, r3
 800af26:	dd41      	ble.n	800afac <_printf_float+0x1ac>
 800af28:	f1aa 0a02 	sub.w	sl, sl, #2
 800af2c:	fa5f fa8a 	uxtb.w	sl, sl
 800af30:	3901      	subs	r1, #1
 800af32:	4652      	mov	r2, sl
 800af34:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800af38:	9109      	str	r1, [sp, #36]	@ 0x24
 800af3a:	f7ff ff27 	bl	800ad8c <__exponent>
 800af3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af40:	1813      	adds	r3, r2, r0
 800af42:	2a01      	cmp	r2, #1
 800af44:	4681      	mov	r9, r0
 800af46:	6123      	str	r3, [r4, #16]
 800af48:	dc02      	bgt.n	800af50 <_printf_float+0x150>
 800af4a:	6822      	ldr	r2, [r4, #0]
 800af4c:	07d2      	lsls	r2, r2, #31
 800af4e:	d501      	bpl.n	800af54 <_printf_float+0x154>
 800af50:	3301      	adds	r3, #1
 800af52:	6123      	str	r3, [r4, #16]
 800af54:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d0a2      	beq.n	800aea2 <_printf_float+0xa2>
 800af5c:	232d      	movs	r3, #45	@ 0x2d
 800af5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af62:	e79e      	b.n	800aea2 <_printf_float+0xa2>
 800af64:	9a06      	ldr	r2, [sp, #24]
 800af66:	2a47      	cmp	r2, #71	@ 0x47
 800af68:	d1c2      	bne.n	800aef0 <_printf_float+0xf0>
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d1c0      	bne.n	800aef0 <_printf_float+0xf0>
 800af6e:	2301      	movs	r3, #1
 800af70:	e7bd      	b.n	800aeee <_printf_float+0xee>
 800af72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800af76:	d9db      	bls.n	800af30 <_printf_float+0x130>
 800af78:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800af7c:	d118      	bne.n	800afb0 <_printf_float+0x1b0>
 800af7e:	2900      	cmp	r1, #0
 800af80:	6863      	ldr	r3, [r4, #4]
 800af82:	dd0b      	ble.n	800af9c <_printf_float+0x19c>
 800af84:	6121      	str	r1, [r4, #16]
 800af86:	b913      	cbnz	r3, 800af8e <_printf_float+0x18e>
 800af88:	6822      	ldr	r2, [r4, #0]
 800af8a:	07d0      	lsls	r0, r2, #31
 800af8c:	d502      	bpl.n	800af94 <_printf_float+0x194>
 800af8e:	3301      	adds	r3, #1
 800af90:	440b      	add	r3, r1
 800af92:	6123      	str	r3, [r4, #16]
 800af94:	65a1      	str	r1, [r4, #88]	@ 0x58
 800af96:	f04f 0900 	mov.w	r9, #0
 800af9a:	e7db      	b.n	800af54 <_printf_float+0x154>
 800af9c:	b913      	cbnz	r3, 800afa4 <_printf_float+0x1a4>
 800af9e:	6822      	ldr	r2, [r4, #0]
 800afa0:	07d2      	lsls	r2, r2, #31
 800afa2:	d501      	bpl.n	800afa8 <_printf_float+0x1a8>
 800afa4:	3302      	adds	r3, #2
 800afa6:	e7f4      	b.n	800af92 <_printf_float+0x192>
 800afa8:	2301      	movs	r3, #1
 800afaa:	e7f2      	b.n	800af92 <_printf_float+0x192>
 800afac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800afb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afb2:	4299      	cmp	r1, r3
 800afb4:	db05      	blt.n	800afc2 <_printf_float+0x1c2>
 800afb6:	6823      	ldr	r3, [r4, #0]
 800afb8:	6121      	str	r1, [r4, #16]
 800afba:	07d8      	lsls	r0, r3, #31
 800afbc:	d5ea      	bpl.n	800af94 <_printf_float+0x194>
 800afbe:	1c4b      	adds	r3, r1, #1
 800afc0:	e7e7      	b.n	800af92 <_printf_float+0x192>
 800afc2:	2900      	cmp	r1, #0
 800afc4:	bfd4      	ite	le
 800afc6:	f1c1 0202 	rsble	r2, r1, #2
 800afca:	2201      	movgt	r2, #1
 800afcc:	4413      	add	r3, r2
 800afce:	e7e0      	b.n	800af92 <_printf_float+0x192>
 800afd0:	6823      	ldr	r3, [r4, #0]
 800afd2:	055a      	lsls	r2, r3, #21
 800afd4:	d407      	bmi.n	800afe6 <_printf_float+0x1e6>
 800afd6:	6923      	ldr	r3, [r4, #16]
 800afd8:	4642      	mov	r2, r8
 800afda:	4631      	mov	r1, r6
 800afdc:	4628      	mov	r0, r5
 800afde:	47b8      	blx	r7
 800afe0:	3001      	adds	r0, #1
 800afe2:	d12b      	bne.n	800b03c <_printf_float+0x23c>
 800afe4:	e767      	b.n	800aeb6 <_printf_float+0xb6>
 800afe6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800afea:	f240 80dd 	bls.w	800b1a8 <_printf_float+0x3a8>
 800afee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aff2:	2200      	movs	r2, #0
 800aff4:	2300      	movs	r3, #0
 800aff6:	f7f5 fdbf 	bl	8000b78 <__aeabi_dcmpeq>
 800affa:	2800      	cmp	r0, #0
 800affc:	d033      	beq.n	800b066 <_printf_float+0x266>
 800affe:	4a37      	ldr	r2, [pc, #220]	@ (800b0dc <_printf_float+0x2dc>)
 800b000:	2301      	movs	r3, #1
 800b002:	4631      	mov	r1, r6
 800b004:	4628      	mov	r0, r5
 800b006:	47b8      	blx	r7
 800b008:	3001      	adds	r0, #1
 800b00a:	f43f af54 	beq.w	800aeb6 <_printf_float+0xb6>
 800b00e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b012:	4543      	cmp	r3, r8
 800b014:	db02      	blt.n	800b01c <_printf_float+0x21c>
 800b016:	6823      	ldr	r3, [r4, #0]
 800b018:	07d8      	lsls	r0, r3, #31
 800b01a:	d50f      	bpl.n	800b03c <_printf_float+0x23c>
 800b01c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b020:	4631      	mov	r1, r6
 800b022:	4628      	mov	r0, r5
 800b024:	47b8      	blx	r7
 800b026:	3001      	adds	r0, #1
 800b028:	f43f af45 	beq.w	800aeb6 <_printf_float+0xb6>
 800b02c:	f04f 0900 	mov.w	r9, #0
 800b030:	f108 38ff 	add.w	r8, r8, #4294967295
 800b034:	f104 0a1a 	add.w	sl, r4, #26
 800b038:	45c8      	cmp	r8, r9
 800b03a:	dc09      	bgt.n	800b050 <_printf_float+0x250>
 800b03c:	6823      	ldr	r3, [r4, #0]
 800b03e:	079b      	lsls	r3, r3, #30
 800b040:	f100 8103 	bmi.w	800b24a <_printf_float+0x44a>
 800b044:	68e0      	ldr	r0, [r4, #12]
 800b046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b048:	4298      	cmp	r0, r3
 800b04a:	bfb8      	it	lt
 800b04c:	4618      	movlt	r0, r3
 800b04e:	e734      	b.n	800aeba <_printf_float+0xba>
 800b050:	2301      	movs	r3, #1
 800b052:	4652      	mov	r2, sl
 800b054:	4631      	mov	r1, r6
 800b056:	4628      	mov	r0, r5
 800b058:	47b8      	blx	r7
 800b05a:	3001      	adds	r0, #1
 800b05c:	f43f af2b 	beq.w	800aeb6 <_printf_float+0xb6>
 800b060:	f109 0901 	add.w	r9, r9, #1
 800b064:	e7e8      	b.n	800b038 <_printf_float+0x238>
 800b066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b068:	2b00      	cmp	r3, #0
 800b06a:	dc39      	bgt.n	800b0e0 <_printf_float+0x2e0>
 800b06c:	4a1b      	ldr	r2, [pc, #108]	@ (800b0dc <_printf_float+0x2dc>)
 800b06e:	2301      	movs	r3, #1
 800b070:	4631      	mov	r1, r6
 800b072:	4628      	mov	r0, r5
 800b074:	47b8      	blx	r7
 800b076:	3001      	adds	r0, #1
 800b078:	f43f af1d 	beq.w	800aeb6 <_printf_float+0xb6>
 800b07c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b080:	ea59 0303 	orrs.w	r3, r9, r3
 800b084:	d102      	bne.n	800b08c <_printf_float+0x28c>
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	07d9      	lsls	r1, r3, #31
 800b08a:	d5d7      	bpl.n	800b03c <_printf_float+0x23c>
 800b08c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b090:	4631      	mov	r1, r6
 800b092:	4628      	mov	r0, r5
 800b094:	47b8      	blx	r7
 800b096:	3001      	adds	r0, #1
 800b098:	f43f af0d 	beq.w	800aeb6 <_printf_float+0xb6>
 800b09c:	f04f 0a00 	mov.w	sl, #0
 800b0a0:	f104 0b1a 	add.w	fp, r4, #26
 800b0a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0a6:	425b      	negs	r3, r3
 800b0a8:	4553      	cmp	r3, sl
 800b0aa:	dc01      	bgt.n	800b0b0 <_printf_float+0x2b0>
 800b0ac:	464b      	mov	r3, r9
 800b0ae:	e793      	b.n	800afd8 <_printf_float+0x1d8>
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	465a      	mov	r2, fp
 800b0b4:	4631      	mov	r1, r6
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	47b8      	blx	r7
 800b0ba:	3001      	adds	r0, #1
 800b0bc:	f43f aefb 	beq.w	800aeb6 <_printf_float+0xb6>
 800b0c0:	f10a 0a01 	add.w	sl, sl, #1
 800b0c4:	e7ee      	b.n	800b0a4 <_printf_float+0x2a4>
 800b0c6:	bf00      	nop
 800b0c8:	7fefffff 	.word	0x7fefffff
 800b0cc:	0800e1aa 	.word	0x0800e1aa
 800b0d0:	0800e1ae 	.word	0x0800e1ae
 800b0d4:	0800e1b2 	.word	0x0800e1b2
 800b0d8:	0800e1b6 	.word	0x0800e1b6
 800b0dc:	0800e1ba 	.word	0x0800e1ba
 800b0e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0e2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b0e6:	4553      	cmp	r3, sl
 800b0e8:	bfa8      	it	ge
 800b0ea:	4653      	movge	r3, sl
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	4699      	mov	r9, r3
 800b0f0:	dc36      	bgt.n	800b160 <_printf_float+0x360>
 800b0f2:	f04f 0b00 	mov.w	fp, #0
 800b0f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0fa:	f104 021a 	add.w	r2, r4, #26
 800b0fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b100:	9306      	str	r3, [sp, #24]
 800b102:	eba3 0309 	sub.w	r3, r3, r9
 800b106:	455b      	cmp	r3, fp
 800b108:	dc31      	bgt.n	800b16e <_printf_float+0x36e>
 800b10a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b10c:	459a      	cmp	sl, r3
 800b10e:	dc3a      	bgt.n	800b186 <_printf_float+0x386>
 800b110:	6823      	ldr	r3, [r4, #0]
 800b112:	07da      	lsls	r2, r3, #31
 800b114:	d437      	bmi.n	800b186 <_printf_float+0x386>
 800b116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b118:	ebaa 0903 	sub.w	r9, sl, r3
 800b11c:	9b06      	ldr	r3, [sp, #24]
 800b11e:	ebaa 0303 	sub.w	r3, sl, r3
 800b122:	4599      	cmp	r9, r3
 800b124:	bfa8      	it	ge
 800b126:	4699      	movge	r9, r3
 800b128:	f1b9 0f00 	cmp.w	r9, #0
 800b12c:	dc33      	bgt.n	800b196 <_printf_float+0x396>
 800b12e:	f04f 0800 	mov.w	r8, #0
 800b132:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b136:	f104 0b1a 	add.w	fp, r4, #26
 800b13a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b13c:	ebaa 0303 	sub.w	r3, sl, r3
 800b140:	eba3 0309 	sub.w	r3, r3, r9
 800b144:	4543      	cmp	r3, r8
 800b146:	f77f af79 	ble.w	800b03c <_printf_float+0x23c>
 800b14a:	2301      	movs	r3, #1
 800b14c:	465a      	mov	r2, fp
 800b14e:	4631      	mov	r1, r6
 800b150:	4628      	mov	r0, r5
 800b152:	47b8      	blx	r7
 800b154:	3001      	adds	r0, #1
 800b156:	f43f aeae 	beq.w	800aeb6 <_printf_float+0xb6>
 800b15a:	f108 0801 	add.w	r8, r8, #1
 800b15e:	e7ec      	b.n	800b13a <_printf_float+0x33a>
 800b160:	4642      	mov	r2, r8
 800b162:	4631      	mov	r1, r6
 800b164:	4628      	mov	r0, r5
 800b166:	47b8      	blx	r7
 800b168:	3001      	adds	r0, #1
 800b16a:	d1c2      	bne.n	800b0f2 <_printf_float+0x2f2>
 800b16c:	e6a3      	b.n	800aeb6 <_printf_float+0xb6>
 800b16e:	2301      	movs	r3, #1
 800b170:	4631      	mov	r1, r6
 800b172:	4628      	mov	r0, r5
 800b174:	9206      	str	r2, [sp, #24]
 800b176:	47b8      	blx	r7
 800b178:	3001      	adds	r0, #1
 800b17a:	f43f ae9c 	beq.w	800aeb6 <_printf_float+0xb6>
 800b17e:	9a06      	ldr	r2, [sp, #24]
 800b180:	f10b 0b01 	add.w	fp, fp, #1
 800b184:	e7bb      	b.n	800b0fe <_printf_float+0x2fe>
 800b186:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b18a:	4631      	mov	r1, r6
 800b18c:	4628      	mov	r0, r5
 800b18e:	47b8      	blx	r7
 800b190:	3001      	adds	r0, #1
 800b192:	d1c0      	bne.n	800b116 <_printf_float+0x316>
 800b194:	e68f      	b.n	800aeb6 <_printf_float+0xb6>
 800b196:	9a06      	ldr	r2, [sp, #24]
 800b198:	464b      	mov	r3, r9
 800b19a:	4442      	add	r2, r8
 800b19c:	4631      	mov	r1, r6
 800b19e:	4628      	mov	r0, r5
 800b1a0:	47b8      	blx	r7
 800b1a2:	3001      	adds	r0, #1
 800b1a4:	d1c3      	bne.n	800b12e <_printf_float+0x32e>
 800b1a6:	e686      	b.n	800aeb6 <_printf_float+0xb6>
 800b1a8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b1ac:	f1ba 0f01 	cmp.w	sl, #1
 800b1b0:	dc01      	bgt.n	800b1b6 <_printf_float+0x3b6>
 800b1b2:	07db      	lsls	r3, r3, #31
 800b1b4:	d536      	bpl.n	800b224 <_printf_float+0x424>
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	4642      	mov	r2, r8
 800b1ba:	4631      	mov	r1, r6
 800b1bc:	4628      	mov	r0, r5
 800b1be:	47b8      	blx	r7
 800b1c0:	3001      	adds	r0, #1
 800b1c2:	f43f ae78 	beq.w	800aeb6 <_printf_float+0xb6>
 800b1c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1ca:	4631      	mov	r1, r6
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	47b8      	blx	r7
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	f43f ae70 	beq.w	800aeb6 <_printf_float+0xb6>
 800b1d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b1da:	2200      	movs	r2, #0
 800b1dc:	2300      	movs	r3, #0
 800b1de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1e2:	f7f5 fcc9 	bl	8000b78 <__aeabi_dcmpeq>
 800b1e6:	b9c0      	cbnz	r0, 800b21a <_printf_float+0x41a>
 800b1e8:	4653      	mov	r3, sl
 800b1ea:	f108 0201 	add.w	r2, r8, #1
 800b1ee:	4631      	mov	r1, r6
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	47b8      	blx	r7
 800b1f4:	3001      	adds	r0, #1
 800b1f6:	d10c      	bne.n	800b212 <_printf_float+0x412>
 800b1f8:	e65d      	b.n	800aeb6 <_printf_float+0xb6>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	465a      	mov	r2, fp
 800b1fe:	4631      	mov	r1, r6
 800b200:	4628      	mov	r0, r5
 800b202:	47b8      	blx	r7
 800b204:	3001      	adds	r0, #1
 800b206:	f43f ae56 	beq.w	800aeb6 <_printf_float+0xb6>
 800b20a:	f108 0801 	add.w	r8, r8, #1
 800b20e:	45d0      	cmp	r8, sl
 800b210:	dbf3      	blt.n	800b1fa <_printf_float+0x3fa>
 800b212:	464b      	mov	r3, r9
 800b214:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b218:	e6df      	b.n	800afda <_printf_float+0x1da>
 800b21a:	f04f 0800 	mov.w	r8, #0
 800b21e:	f104 0b1a 	add.w	fp, r4, #26
 800b222:	e7f4      	b.n	800b20e <_printf_float+0x40e>
 800b224:	2301      	movs	r3, #1
 800b226:	4642      	mov	r2, r8
 800b228:	e7e1      	b.n	800b1ee <_printf_float+0x3ee>
 800b22a:	2301      	movs	r3, #1
 800b22c:	464a      	mov	r2, r9
 800b22e:	4631      	mov	r1, r6
 800b230:	4628      	mov	r0, r5
 800b232:	47b8      	blx	r7
 800b234:	3001      	adds	r0, #1
 800b236:	f43f ae3e 	beq.w	800aeb6 <_printf_float+0xb6>
 800b23a:	f108 0801 	add.w	r8, r8, #1
 800b23e:	68e3      	ldr	r3, [r4, #12]
 800b240:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b242:	1a5b      	subs	r3, r3, r1
 800b244:	4543      	cmp	r3, r8
 800b246:	dcf0      	bgt.n	800b22a <_printf_float+0x42a>
 800b248:	e6fc      	b.n	800b044 <_printf_float+0x244>
 800b24a:	f04f 0800 	mov.w	r8, #0
 800b24e:	f104 0919 	add.w	r9, r4, #25
 800b252:	e7f4      	b.n	800b23e <_printf_float+0x43e>

0800b254 <_printf_common>:
 800b254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b258:	4616      	mov	r6, r2
 800b25a:	4698      	mov	r8, r3
 800b25c:	688a      	ldr	r2, [r1, #8]
 800b25e:	690b      	ldr	r3, [r1, #16]
 800b260:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b264:	4293      	cmp	r3, r2
 800b266:	bfb8      	it	lt
 800b268:	4613      	movlt	r3, r2
 800b26a:	6033      	str	r3, [r6, #0]
 800b26c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b270:	4607      	mov	r7, r0
 800b272:	460c      	mov	r4, r1
 800b274:	b10a      	cbz	r2, 800b27a <_printf_common+0x26>
 800b276:	3301      	adds	r3, #1
 800b278:	6033      	str	r3, [r6, #0]
 800b27a:	6823      	ldr	r3, [r4, #0]
 800b27c:	0699      	lsls	r1, r3, #26
 800b27e:	bf42      	ittt	mi
 800b280:	6833      	ldrmi	r3, [r6, #0]
 800b282:	3302      	addmi	r3, #2
 800b284:	6033      	strmi	r3, [r6, #0]
 800b286:	6825      	ldr	r5, [r4, #0]
 800b288:	f015 0506 	ands.w	r5, r5, #6
 800b28c:	d106      	bne.n	800b29c <_printf_common+0x48>
 800b28e:	f104 0a19 	add.w	sl, r4, #25
 800b292:	68e3      	ldr	r3, [r4, #12]
 800b294:	6832      	ldr	r2, [r6, #0]
 800b296:	1a9b      	subs	r3, r3, r2
 800b298:	42ab      	cmp	r3, r5
 800b29a:	dc26      	bgt.n	800b2ea <_printf_common+0x96>
 800b29c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2a0:	6822      	ldr	r2, [r4, #0]
 800b2a2:	3b00      	subs	r3, #0
 800b2a4:	bf18      	it	ne
 800b2a6:	2301      	movne	r3, #1
 800b2a8:	0692      	lsls	r2, r2, #26
 800b2aa:	d42b      	bmi.n	800b304 <_printf_common+0xb0>
 800b2ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2b0:	4641      	mov	r1, r8
 800b2b2:	4638      	mov	r0, r7
 800b2b4:	47c8      	blx	r9
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	d01e      	beq.n	800b2f8 <_printf_common+0xa4>
 800b2ba:	6823      	ldr	r3, [r4, #0]
 800b2bc:	6922      	ldr	r2, [r4, #16]
 800b2be:	f003 0306 	and.w	r3, r3, #6
 800b2c2:	2b04      	cmp	r3, #4
 800b2c4:	bf02      	ittt	eq
 800b2c6:	68e5      	ldreq	r5, [r4, #12]
 800b2c8:	6833      	ldreq	r3, [r6, #0]
 800b2ca:	1aed      	subeq	r5, r5, r3
 800b2cc:	68a3      	ldr	r3, [r4, #8]
 800b2ce:	bf0c      	ite	eq
 800b2d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2d4:	2500      	movne	r5, #0
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	bfc4      	itt	gt
 800b2da:	1a9b      	subgt	r3, r3, r2
 800b2dc:	18ed      	addgt	r5, r5, r3
 800b2de:	2600      	movs	r6, #0
 800b2e0:	341a      	adds	r4, #26
 800b2e2:	42b5      	cmp	r5, r6
 800b2e4:	d11a      	bne.n	800b31c <_printf_common+0xc8>
 800b2e6:	2000      	movs	r0, #0
 800b2e8:	e008      	b.n	800b2fc <_printf_common+0xa8>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	4652      	mov	r2, sl
 800b2ee:	4641      	mov	r1, r8
 800b2f0:	4638      	mov	r0, r7
 800b2f2:	47c8      	blx	r9
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	d103      	bne.n	800b300 <_printf_common+0xac>
 800b2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b300:	3501      	adds	r5, #1
 800b302:	e7c6      	b.n	800b292 <_printf_common+0x3e>
 800b304:	18e1      	adds	r1, r4, r3
 800b306:	1c5a      	adds	r2, r3, #1
 800b308:	2030      	movs	r0, #48	@ 0x30
 800b30a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b30e:	4422      	add	r2, r4
 800b310:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b314:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b318:	3302      	adds	r3, #2
 800b31a:	e7c7      	b.n	800b2ac <_printf_common+0x58>
 800b31c:	2301      	movs	r3, #1
 800b31e:	4622      	mov	r2, r4
 800b320:	4641      	mov	r1, r8
 800b322:	4638      	mov	r0, r7
 800b324:	47c8      	blx	r9
 800b326:	3001      	adds	r0, #1
 800b328:	d0e6      	beq.n	800b2f8 <_printf_common+0xa4>
 800b32a:	3601      	adds	r6, #1
 800b32c:	e7d9      	b.n	800b2e2 <_printf_common+0x8e>
	...

0800b330 <_printf_i>:
 800b330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b334:	7e0f      	ldrb	r7, [r1, #24]
 800b336:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b338:	2f78      	cmp	r7, #120	@ 0x78
 800b33a:	4691      	mov	r9, r2
 800b33c:	4680      	mov	r8, r0
 800b33e:	460c      	mov	r4, r1
 800b340:	469a      	mov	sl, r3
 800b342:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b346:	d807      	bhi.n	800b358 <_printf_i+0x28>
 800b348:	2f62      	cmp	r7, #98	@ 0x62
 800b34a:	d80a      	bhi.n	800b362 <_printf_i+0x32>
 800b34c:	2f00      	cmp	r7, #0
 800b34e:	f000 80d2 	beq.w	800b4f6 <_printf_i+0x1c6>
 800b352:	2f58      	cmp	r7, #88	@ 0x58
 800b354:	f000 80b9 	beq.w	800b4ca <_printf_i+0x19a>
 800b358:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b35c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b360:	e03a      	b.n	800b3d8 <_printf_i+0xa8>
 800b362:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b366:	2b15      	cmp	r3, #21
 800b368:	d8f6      	bhi.n	800b358 <_printf_i+0x28>
 800b36a:	a101      	add	r1, pc, #4	@ (adr r1, 800b370 <_printf_i+0x40>)
 800b36c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b370:	0800b3c9 	.word	0x0800b3c9
 800b374:	0800b3dd 	.word	0x0800b3dd
 800b378:	0800b359 	.word	0x0800b359
 800b37c:	0800b359 	.word	0x0800b359
 800b380:	0800b359 	.word	0x0800b359
 800b384:	0800b359 	.word	0x0800b359
 800b388:	0800b3dd 	.word	0x0800b3dd
 800b38c:	0800b359 	.word	0x0800b359
 800b390:	0800b359 	.word	0x0800b359
 800b394:	0800b359 	.word	0x0800b359
 800b398:	0800b359 	.word	0x0800b359
 800b39c:	0800b4dd 	.word	0x0800b4dd
 800b3a0:	0800b407 	.word	0x0800b407
 800b3a4:	0800b497 	.word	0x0800b497
 800b3a8:	0800b359 	.word	0x0800b359
 800b3ac:	0800b359 	.word	0x0800b359
 800b3b0:	0800b4ff 	.word	0x0800b4ff
 800b3b4:	0800b359 	.word	0x0800b359
 800b3b8:	0800b407 	.word	0x0800b407
 800b3bc:	0800b359 	.word	0x0800b359
 800b3c0:	0800b359 	.word	0x0800b359
 800b3c4:	0800b49f 	.word	0x0800b49f
 800b3c8:	6833      	ldr	r3, [r6, #0]
 800b3ca:	1d1a      	adds	r2, r3, #4
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	6032      	str	r2, [r6, #0]
 800b3d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e09d      	b.n	800b518 <_printf_i+0x1e8>
 800b3dc:	6833      	ldr	r3, [r6, #0]
 800b3de:	6820      	ldr	r0, [r4, #0]
 800b3e0:	1d19      	adds	r1, r3, #4
 800b3e2:	6031      	str	r1, [r6, #0]
 800b3e4:	0606      	lsls	r6, r0, #24
 800b3e6:	d501      	bpl.n	800b3ec <_printf_i+0xbc>
 800b3e8:	681d      	ldr	r5, [r3, #0]
 800b3ea:	e003      	b.n	800b3f4 <_printf_i+0xc4>
 800b3ec:	0645      	lsls	r5, r0, #25
 800b3ee:	d5fb      	bpl.n	800b3e8 <_printf_i+0xb8>
 800b3f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3f4:	2d00      	cmp	r5, #0
 800b3f6:	da03      	bge.n	800b400 <_printf_i+0xd0>
 800b3f8:	232d      	movs	r3, #45	@ 0x2d
 800b3fa:	426d      	negs	r5, r5
 800b3fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b400:	4859      	ldr	r0, [pc, #356]	@ (800b568 <_printf_i+0x238>)
 800b402:	230a      	movs	r3, #10
 800b404:	e011      	b.n	800b42a <_printf_i+0xfa>
 800b406:	6821      	ldr	r1, [r4, #0]
 800b408:	6833      	ldr	r3, [r6, #0]
 800b40a:	0608      	lsls	r0, r1, #24
 800b40c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b410:	d402      	bmi.n	800b418 <_printf_i+0xe8>
 800b412:	0649      	lsls	r1, r1, #25
 800b414:	bf48      	it	mi
 800b416:	b2ad      	uxthmi	r5, r5
 800b418:	2f6f      	cmp	r7, #111	@ 0x6f
 800b41a:	4853      	ldr	r0, [pc, #332]	@ (800b568 <_printf_i+0x238>)
 800b41c:	6033      	str	r3, [r6, #0]
 800b41e:	bf14      	ite	ne
 800b420:	230a      	movne	r3, #10
 800b422:	2308      	moveq	r3, #8
 800b424:	2100      	movs	r1, #0
 800b426:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b42a:	6866      	ldr	r6, [r4, #4]
 800b42c:	60a6      	str	r6, [r4, #8]
 800b42e:	2e00      	cmp	r6, #0
 800b430:	bfa2      	ittt	ge
 800b432:	6821      	ldrge	r1, [r4, #0]
 800b434:	f021 0104 	bicge.w	r1, r1, #4
 800b438:	6021      	strge	r1, [r4, #0]
 800b43a:	b90d      	cbnz	r5, 800b440 <_printf_i+0x110>
 800b43c:	2e00      	cmp	r6, #0
 800b43e:	d04b      	beq.n	800b4d8 <_printf_i+0x1a8>
 800b440:	4616      	mov	r6, r2
 800b442:	fbb5 f1f3 	udiv	r1, r5, r3
 800b446:	fb03 5711 	mls	r7, r3, r1, r5
 800b44a:	5dc7      	ldrb	r7, [r0, r7]
 800b44c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b450:	462f      	mov	r7, r5
 800b452:	42bb      	cmp	r3, r7
 800b454:	460d      	mov	r5, r1
 800b456:	d9f4      	bls.n	800b442 <_printf_i+0x112>
 800b458:	2b08      	cmp	r3, #8
 800b45a:	d10b      	bne.n	800b474 <_printf_i+0x144>
 800b45c:	6823      	ldr	r3, [r4, #0]
 800b45e:	07df      	lsls	r7, r3, #31
 800b460:	d508      	bpl.n	800b474 <_printf_i+0x144>
 800b462:	6923      	ldr	r3, [r4, #16]
 800b464:	6861      	ldr	r1, [r4, #4]
 800b466:	4299      	cmp	r1, r3
 800b468:	bfde      	ittt	le
 800b46a:	2330      	movle	r3, #48	@ 0x30
 800b46c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b470:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b474:	1b92      	subs	r2, r2, r6
 800b476:	6122      	str	r2, [r4, #16]
 800b478:	f8cd a000 	str.w	sl, [sp]
 800b47c:	464b      	mov	r3, r9
 800b47e:	aa03      	add	r2, sp, #12
 800b480:	4621      	mov	r1, r4
 800b482:	4640      	mov	r0, r8
 800b484:	f7ff fee6 	bl	800b254 <_printf_common>
 800b488:	3001      	adds	r0, #1
 800b48a:	d14a      	bne.n	800b522 <_printf_i+0x1f2>
 800b48c:	f04f 30ff 	mov.w	r0, #4294967295
 800b490:	b004      	add	sp, #16
 800b492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	f043 0320 	orr.w	r3, r3, #32
 800b49c:	6023      	str	r3, [r4, #0]
 800b49e:	4833      	ldr	r0, [pc, #204]	@ (800b56c <_printf_i+0x23c>)
 800b4a0:	2778      	movs	r7, #120	@ 0x78
 800b4a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4a6:	6823      	ldr	r3, [r4, #0]
 800b4a8:	6831      	ldr	r1, [r6, #0]
 800b4aa:	061f      	lsls	r7, r3, #24
 800b4ac:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4b0:	d402      	bmi.n	800b4b8 <_printf_i+0x188>
 800b4b2:	065f      	lsls	r7, r3, #25
 800b4b4:	bf48      	it	mi
 800b4b6:	b2ad      	uxthmi	r5, r5
 800b4b8:	6031      	str	r1, [r6, #0]
 800b4ba:	07d9      	lsls	r1, r3, #31
 800b4bc:	bf44      	itt	mi
 800b4be:	f043 0320 	orrmi.w	r3, r3, #32
 800b4c2:	6023      	strmi	r3, [r4, #0]
 800b4c4:	b11d      	cbz	r5, 800b4ce <_printf_i+0x19e>
 800b4c6:	2310      	movs	r3, #16
 800b4c8:	e7ac      	b.n	800b424 <_printf_i+0xf4>
 800b4ca:	4827      	ldr	r0, [pc, #156]	@ (800b568 <_printf_i+0x238>)
 800b4cc:	e7e9      	b.n	800b4a2 <_printf_i+0x172>
 800b4ce:	6823      	ldr	r3, [r4, #0]
 800b4d0:	f023 0320 	bic.w	r3, r3, #32
 800b4d4:	6023      	str	r3, [r4, #0]
 800b4d6:	e7f6      	b.n	800b4c6 <_printf_i+0x196>
 800b4d8:	4616      	mov	r6, r2
 800b4da:	e7bd      	b.n	800b458 <_printf_i+0x128>
 800b4dc:	6833      	ldr	r3, [r6, #0]
 800b4de:	6825      	ldr	r5, [r4, #0]
 800b4e0:	6961      	ldr	r1, [r4, #20]
 800b4e2:	1d18      	adds	r0, r3, #4
 800b4e4:	6030      	str	r0, [r6, #0]
 800b4e6:	062e      	lsls	r6, r5, #24
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	d501      	bpl.n	800b4f0 <_printf_i+0x1c0>
 800b4ec:	6019      	str	r1, [r3, #0]
 800b4ee:	e002      	b.n	800b4f6 <_printf_i+0x1c6>
 800b4f0:	0668      	lsls	r0, r5, #25
 800b4f2:	d5fb      	bpl.n	800b4ec <_printf_i+0x1bc>
 800b4f4:	8019      	strh	r1, [r3, #0]
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	6123      	str	r3, [r4, #16]
 800b4fa:	4616      	mov	r6, r2
 800b4fc:	e7bc      	b.n	800b478 <_printf_i+0x148>
 800b4fe:	6833      	ldr	r3, [r6, #0]
 800b500:	1d1a      	adds	r2, r3, #4
 800b502:	6032      	str	r2, [r6, #0]
 800b504:	681e      	ldr	r6, [r3, #0]
 800b506:	6862      	ldr	r2, [r4, #4]
 800b508:	2100      	movs	r1, #0
 800b50a:	4630      	mov	r0, r6
 800b50c:	f7f4 feb8 	bl	8000280 <memchr>
 800b510:	b108      	cbz	r0, 800b516 <_printf_i+0x1e6>
 800b512:	1b80      	subs	r0, r0, r6
 800b514:	6060      	str	r0, [r4, #4]
 800b516:	6863      	ldr	r3, [r4, #4]
 800b518:	6123      	str	r3, [r4, #16]
 800b51a:	2300      	movs	r3, #0
 800b51c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b520:	e7aa      	b.n	800b478 <_printf_i+0x148>
 800b522:	6923      	ldr	r3, [r4, #16]
 800b524:	4632      	mov	r2, r6
 800b526:	4649      	mov	r1, r9
 800b528:	4640      	mov	r0, r8
 800b52a:	47d0      	blx	sl
 800b52c:	3001      	adds	r0, #1
 800b52e:	d0ad      	beq.n	800b48c <_printf_i+0x15c>
 800b530:	6823      	ldr	r3, [r4, #0]
 800b532:	079b      	lsls	r3, r3, #30
 800b534:	d413      	bmi.n	800b55e <_printf_i+0x22e>
 800b536:	68e0      	ldr	r0, [r4, #12]
 800b538:	9b03      	ldr	r3, [sp, #12]
 800b53a:	4298      	cmp	r0, r3
 800b53c:	bfb8      	it	lt
 800b53e:	4618      	movlt	r0, r3
 800b540:	e7a6      	b.n	800b490 <_printf_i+0x160>
 800b542:	2301      	movs	r3, #1
 800b544:	4632      	mov	r2, r6
 800b546:	4649      	mov	r1, r9
 800b548:	4640      	mov	r0, r8
 800b54a:	47d0      	blx	sl
 800b54c:	3001      	adds	r0, #1
 800b54e:	d09d      	beq.n	800b48c <_printf_i+0x15c>
 800b550:	3501      	adds	r5, #1
 800b552:	68e3      	ldr	r3, [r4, #12]
 800b554:	9903      	ldr	r1, [sp, #12]
 800b556:	1a5b      	subs	r3, r3, r1
 800b558:	42ab      	cmp	r3, r5
 800b55a:	dcf2      	bgt.n	800b542 <_printf_i+0x212>
 800b55c:	e7eb      	b.n	800b536 <_printf_i+0x206>
 800b55e:	2500      	movs	r5, #0
 800b560:	f104 0619 	add.w	r6, r4, #25
 800b564:	e7f5      	b.n	800b552 <_printf_i+0x222>
 800b566:	bf00      	nop
 800b568:	0800e1bc 	.word	0x0800e1bc
 800b56c:	0800e1cd 	.word	0x0800e1cd

0800b570 <std>:
 800b570:	2300      	movs	r3, #0
 800b572:	b510      	push	{r4, lr}
 800b574:	4604      	mov	r4, r0
 800b576:	e9c0 3300 	strd	r3, r3, [r0]
 800b57a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b57e:	6083      	str	r3, [r0, #8]
 800b580:	8181      	strh	r1, [r0, #12]
 800b582:	6643      	str	r3, [r0, #100]	@ 0x64
 800b584:	81c2      	strh	r2, [r0, #14]
 800b586:	6183      	str	r3, [r0, #24]
 800b588:	4619      	mov	r1, r3
 800b58a:	2208      	movs	r2, #8
 800b58c:	305c      	adds	r0, #92	@ 0x5c
 800b58e:	f000 fa3f 	bl	800ba10 <memset>
 800b592:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c8 <std+0x58>)
 800b594:	6263      	str	r3, [r4, #36]	@ 0x24
 800b596:	4b0d      	ldr	r3, [pc, #52]	@ (800b5cc <std+0x5c>)
 800b598:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b59a:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d0 <std+0x60>)
 800b59c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b59e:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d4 <std+0x64>)
 800b5a0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b5a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d8 <std+0x68>)
 800b5a4:	6224      	str	r4, [r4, #32]
 800b5a6:	429c      	cmp	r4, r3
 800b5a8:	d006      	beq.n	800b5b8 <std+0x48>
 800b5aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b5ae:	4294      	cmp	r4, r2
 800b5b0:	d002      	beq.n	800b5b8 <std+0x48>
 800b5b2:	33d0      	adds	r3, #208	@ 0xd0
 800b5b4:	429c      	cmp	r4, r3
 800b5b6:	d105      	bne.n	800b5c4 <std+0x54>
 800b5b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5c0:	f000 ba90 	b.w	800bae4 <__retarget_lock_init_recursive>
 800b5c4:	bd10      	pop	{r4, pc}
 800b5c6:	bf00      	nop
 800b5c8:	0800b7f1 	.word	0x0800b7f1
 800b5cc:	0800b813 	.word	0x0800b813
 800b5d0:	0800b84b 	.word	0x0800b84b
 800b5d4:	0800b86f 	.word	0x0800b86f
 800b5d8:	200064fc 	.word	0x200064fc

0800b5dc <stdio_exit_handler>:
 800b5dc:	4a02      	ldr	r2, [pc, #8]	@ (800b5e8 <stdio_exit_handler+0xc>)
 800b5de:	4903      	ldr	r1, [pc, #12]	@ (800b5ec <stdio_exit_handler+0x10>)
 800b5e0:	4803      	ldr	r0, [pc, #12]	@ (800b5f0 <stdio_exit_handler+0x14>)
 800b5e2:	f000 b869 	b.w	800b6b8 <_fwalk_sglue>
 800b5e6:	bf00      	nop
 800b5e8:	20000180 	.word	0x20000180
 800b5ec:	0800d49d 	.word	0x0800d49d
 800b5f0:	20000190 	.word	0x20000190

0800b5f4 <cleanup_stdio>:
 800b5f4:	6841      	ldr	r1, [r0, #4]
 800b5f6:	4b0c      	ldr	r3, [pc, #48]	@ (800b628 <cleanup_stdio+0x34>)
 800b5f8:	4299      	cmp	r1, r3
 800b5fa:	b510      	push	{r4, lr}
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	d001      	beq.n	800b604 <cleanup_stdio+0x10>
 800b600:	f001 ff4c 	bl	800d49c <_fflush_r>
 800b604:	68a1      	ldr	r1, [r4, #8]
 800b606:	4b09      	ldr	r3, [pc, #36]	@ (800b62c <cleanup_stdio+0x38>)
 800b608:	4299      	cmp	r1, r3
 800b60a:	d002      	beq.n	800b612 <cleanup_stdio+0x1e>
 800b60c:	4620      	mov	r0, r4
 800b60e:	f001 ff45 	bl	800d49c <_fflush_r>
 800b612:	68e1      	ldr	r1, [r4, #12]
 800b614:	4b06      	ldr	r3, [pc, #24]	@ (800b630 <cleanup_stdio+0x3c>)
 800b616:	4299      	cmp	r1, r3
 800b618:	d004      	beq.n	800b624 <cleanup_stdio+0x30>
 800b61a:	4620      	mov	r0, r4
 800b61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b620:	f001 bf3c 	b.w	800d49c <_fflush_r>
 800b624:	bd10      	pop	{r4, pc}
 800b626:	bf00      	nop
 800b628:	200064fc 	.word	0x200064fc
 800b62c:	20006564 	.word	0x20006564
 800b630:	200065cc 	.word	0x200065cc

0800b634 <global_stdio_init.part.0>:
 800b634:	b510      	push	{r4, lr}
 800b636:	4b0b      	ldr	r3, [pc, #44]	@ (800b664 <global_stdio_init.part.0+0x30>)
 800b638:	4c0b      	ldr	r4, [pc, #44]	@ (800b668 <global_stdio_init.part.0+0x34>)
 800b63a:	4a0c      	ldr	r2, [pc, #48]	@ (800b66c <global_stdio_init.part.0+0x38>)
 800b63c:	601a      	str	r2, [r3, #0]
 800b63e:	4620      	mov	r0, r4
 800b640:	2200      	movs	r2, #0
 800b642:	2104      	movs	r1, #4
 800b644:	f7ff ff94 	bl	800b570 <std>
 800b648:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b64c:	2201      	movs	r2, #1
 800b64e:	2109      	movs	r1, #9
 800b650:	f7ff ff8e 	bl	800b570 <std>
 800b654:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b658:	2202      	movs	r2, #2
 800b65a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b65e:	2112      	movs	r1, #18
 800b660:	f7ff bf86 	b.w	800b570 <std>
 800b664:	20006634 	.word	0x20006634
 800b668:	200064fc 	.word	0x200064fc
 800b66c:	0800b5dd 	.word	0x0800b5dd

0800b670 <__sfp_lock_acquire>:
 800b670:	4801      	ldr	r0, [pc, #4]	@ (800b678 <__sfp_lock_acquire+0x8>)
 800b672:	f000 ba38 	b.w	800bae6 <__retarget_lock_acquire_recursive>
 800b676:	bf00      	nop
 800b678:	2000663d 	.word	0x2000663d

0800b67c <__sfp_lock_release>:
 800b67c:	4801      	ldr	r0, [pc, #4]	@ (800b684 <__sfp_lock_release+0x8>)
 800b67e:	f000 ba33 	b.w	800bae8 <__retarget_lock_release_recursive>
 800b682:	bf00      	nop
 800b684:	2000663d 	.word	0x2000663d

0800b688 <__sinit>:
 800b688:	b510      	push	{r4, lr}
 800b68a:	4604      	mov	r4, r0
 800b68c:	f7ff fff0 	bl	800b670 <__sfp_lock_acquire>
 800b690:	6a23      	ldr	r3, [r4, #32]
 800b692:	b11b      	cbz	r3, 800b69c <__sinit+0x14>
 800b694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b698:	f7ff bff0 	b.w	800b67c <__sfp_lock_release>
 800b69c:	4b04      	ldr	r3, [pc, #16]	@ (800b6b0 <__sinit+0x28>)
 800b69e:	6223      	str	r3, [r4, #32]
 800b6a0:	4b04      	ldr	r3, [pc, #16]	@ (800b6b4 <__sinit+0x2c>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1f5      	bne.n	800b694 <__sinit+0xc>
 800b6a8:	f7ff ffc4 	bl	800b634 <global_stdio_init.part.0>
 800b6ac:	e7f2      	b.n	800b694 <__sinit+0xc>
 800b6ae:	bf00      	nop
 800b6b0:	0800b5f5 	.word	0x0800b5f5
 800b6b4:	20006634 	.word	0x20006634

0800b6b8 <_fwalk_sglue>:
 800b6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6bc:	4607      	mov	r7, r0
 800b6be:	4688      	mov	r8, r1
 800b6c0:	4614      	mov	r4, r2
 800b6c2:	2600      	movs	r6, #0
 800b6c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6c8:	f1b9 0901 	subs.w	r9, r9, #1
 800b6cc:	d505      	bpl.n	800b6da <_fwalk_sglue+0x22>
 800b6ce:	6824      	ldr	r4, [r4, #0]
 800b6d0:	2c00      	cmp	r4, #0
 800b6d2:	d1f7      	bne.n	800b6c4 <_fwalk_sglue+0xc>
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6da:	89ab      	ldrh	r3, [r5, #12]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d907      	bls.n	800b6f0 <_fwalk_sglue+0x38>
 800b6e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	d003      	beq.n	800b6f0 <_fwalk_sglue+0x38>
 800b6e8:	4629      	mov	r1, r5
 800b6ea:	4638      	mov	r0, r7
 800b6ec:	47c0      	blx	r8
 800b6ee:	4306      	orrs	r6, r0
 800b6f0:	3568      	adds	r5, #104	@ 0x68
 800b6f2:	e7e9      	b.n	800b6c8 <_fwalk_sglue+0x10>

0800b6f4 <_puts_r>:
 800b6f4:	6a03      	ldr	r3, [r0, #32]
 800b6f6:	b570      	push	{r4, r5, r6, lr}
 800b6f8:	6884      	ldr	r4, [r0, #8]
 800b6fa:	4605      	mov	r5, r0
 800b6fc:	460e      	mov	r6, r1
 800b6fe:	b90b      	cbnz	r3, 800b704 <_puts_r+0x10>
 800b700:	f7ff ffc2 	bl	800b688 <__sinit>
 800b704:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b706:	07db      	lsls	r3, r3, #31
 800b708:	d405      	bmi.n	800b716 <_puts_r+0x22>
 800b70a:	89a3      	ldrh	r3, [r4, #12]
 800b70c:	0598      	lsls	r0, r3, #22
 800b70e:	d402      	bmi.n	800b716 <_puts_r+0x22>
 800b710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b712:	f000 f9e8 	bl	800bae6 <__retarget_lock_acquire_recursive>
 800b716:	89a3      	ldrh	r3, [r4, #12]
 800b718:	0719      	lsls	r1, r3, #28
 800b71a:	d502      	bpl.n	800b722 <_puts_r+0x2e>
 800b71c:	6923      	ldr	r3, [r4, #16]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d135      	bne.n	800b78e <_puts_r+0x9a>
 800b722:	4621      	mov	r1, r4
 800b724:	4628      	mov	r0, r5
 800b726:	f000 f91d 	bl	800b964 <__swsetup_r>
 800b72a:	b380      	cbz	r0, 800b78e <_puts_r+0x9a>
 800b72c:	f04f 35ff 	mov.w	r5, #4294967295
 800b730:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b732:	07da      	lsls	r2, r3, #31
 800b734:	d405      	bmi.n	800b742 <_puts_r+0x4e>
 800b736:	89a3      	ldrh	r3, [r4, #12]
 800b738:	059b      	lsls	r3, r3, #22
 800b73a:	d402      	bmi.n	800b742 <_puts_r+0x4e>
 800b73c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b73e:	f000 f9d3 	bl	800bae8 <__retarget_lock_release_recursive>
 800b742:	4628      	mov	r0, r5
 800b744:	bd70      	pop	{r4, r5, r6, pc}
 800b746:	2b00      	cmp	r3, #0
 800b748:	da04      	bge.n	800b754 <_puts_r+0x60>
 800b74a:	69a2      	ldr	r2, [r4, #24]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	dc17      	bgt.n	800b780 <_puts_r+0x8c>
 800b750:	290a      	cmp	r1, #10
 800b752:	d015      	beq.n	800b780 <_puts_r+0x8c>
 800b754:	6823      	ldr	r3, [r4, #0]
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	6022      	str	r2, [r4, #0]
 800b75a:	7019      	strb	r1, [r3, #0]
 800b75c:	68a3      	ldr	r3, [r4, #8]
 800b75e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b762:	3b01      	subs	r3, #1
 800b764:	60a3      	str	r3, [r4, #8]
 800b766:	2900      	cmp	r1, #0
 800b768:	d1ed      	bne.n	800b746 <_puts_r+0x52>
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	da11      	bge.n	800b792 <_puts_r+0x9e>
 800b76e:	4622      	mov	r2, r4
 800b770:	210a      	movs	r1, #10
 800b772:	4628      	mov	r0, r5
 800b774:	f000 f8b8 	bl	800b8e8 <__swbuf_r>
 800b778:	3001      	adds	r0, #1
 800b77a:	d0d7      	beq.n	800b72c <_puts_r+0x38>
 800b77c:	250a      	movs	r5, #10
 800b77e:	e7d7      	b.n	800b730 <_puts_r+0x3c>
 800b780:	4622      	mov	r2, r4
 800b782:	4628      	mov	r0, r5
 800b784:	f000 f8b0 	bl	800b8e8 <__swbuf_r>
 800b788:	3001      	adds	r0, #1
 800b78a:	d1e7      	bne.n	800b75c <_puts_r+0x68>
 800b78c:	e7ce      	b.n	800b72c <_puts_r+0x38>
 800b78e:	3e01      	subs	r6, #1
 800b790:	e7e4      	b.n	800b75c <_puts_r+0x68>
 800b792:	6823      	ldr	r3, [r4, #0]
 800b794:	1c5a      	adds	r2, r3, #1
 800b796:	6022      	str	r2, [r4, #0]
 800b798:	220a      	movs	r2, #10
 800b79a:	701a      	strb	r2, [r3, #0]
 800b79c:	e7ee      	b.n	800b77c <_puts_r+0x88>
	...

0800b7a0 <puts>:
 800b7a0:	4b02      	ldr	r3, [pc, #8]	@ (800b7ac <puts+0xc>)
 800b7a2:	4601      	mov	r1, r0
 800b7a4:	6818      	ldr	r0, [r3, #0]
 800b7a6:	f7ff bfa5 	b.w	800b6f4 <_puts_r>
 800b7aa:	bf00      	nop
 800b7ac:	2000018c 	.word	0x2000018c

0800b7b0 <siprintf>:
 800b7b0:	b40e      	push	{r1, r2, r3}
 800b7b2:	b500      	push	{lr}
 800b7b4:	b09c      	sub	sp, #112	@ 0x70
 800b7b6:	ab1d      	add	r3, sp, #116	@ 0x74
 800b7b8:	9002      	str	r0, [sp, #8]
 800b7ba:	9006      	str	r0, [sp, #24]
 800b7bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b7c0:	4809      	ldr	r0, [pc, #36]	@ (800b7e8 <siprintf+0x38>)
 800b7c2:	9107      	str	r1, [sp, #28]
 800b7c4:	9104      	str	r1, [sp, #16]
 800b7c6:	4909      	ldr	r1, [pc, #36]	@ (800b7ec <siprintf+0x3c>)
 800b7c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7cc:	9105      	str	r1, [sp, #20]
 800b7ce:	6800      	ldr	r0, [r0, #0]
 800b7d0:	9301      	str	r3, [sp, #4]
 800b7d2:	a902      	add	r1, sp, #8
 800b7d4:	f001 fce2 	bl	800d19c <_svfiprintf_r>
 800b7d8:	9b02      	ldr	r3, [sp, #8]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	701a      	strb	r2, [r3, #0]
 800b7de:	b01c      	add	sp, #112	@ 0x70
 800b7e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7e4:	b003      	add	sp, #12
 800b7e6:	4770      	bx	lr
 800b7e8:	2000018c 	.word	0x2000018c
 800b7ec:	ffff0208 	.word	0xffff0208

0800b7f0 <__sread>:
 800b7f0:	b510      	push	{r4, lr}
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7f8:	f000 f938 	bl	800ba6c <_read_r>
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	bfab      	itete	ge
 800b800:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b802:	89a3      	ldrhlt	r3, [r4, #12]
 800b804:	181b      	addge	r3, r3, r0
 800b806:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b80a:	bfac      	ite	ge
 800b80c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b80e:	81a3      	strhlt	r3, [r4, #12]
 800b810:	bd10      	pop	{r4, pc}

0800b812 <__swrite>:
 800b812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b816:	461f      	mov	r7, r3
 800b818:	898b      	ldrh	r3, [r1, #12]
 800b81a:	05db      	lsls	r3, r3, #23
 800b81c:	4605      	mov	r5, r0
 800b81e:	460c      	mov	r4, r1
 800b820:	4616      	mov	r6, r2
 800b822:	d505      	bpl.n	800b830 <__swrite+0x1e>
 800b824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b828:	2302      	movs	r3, #2
 800b82a:	2200      	movs	r2, #0
 800b82c:	f000 f90c 	bl	800ba48 <_lseek_r>
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b836:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b83a:	81a3      	strh	r3, [r4, #12]
 800b83c:	4632      	mov	r2, r6
 800b83e:	463b      	mov	r3, r7
 800b840:	4628      	mov	r0, r5
 800b842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b846:	f7ff ba2b 	b.w	800aca0 <_write_r>

0800b84a <__sseek>:
 800b84a:	b510      	push	{r4, lr}
 800b84c:	460c      	mov	r4, r1
 800b84e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b852:	f000 f8f9 	bl	800ba48 <_lseek_r>
 800b856:	1c43      	adds	r3, r0, #1
 800b858:	89a3      	ldrh	r3, [r4, #12]
 800b85a:	bf15      	itete	ne
 800b85c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b85e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b862:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b866:	81a3      	strheq	r3, [r4, #12]
 800b868:	bf18      	it	ne
 800b86a:	81a3      	strhne	r3, [r4, #12]
 800b86c:	bd10      	pop	{r4, pc}

0800b86e <__sclose>:
 800b86e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b872:	f000 b8d9 	b.w	800ba28 <_close_r>

0800b876 <_vsniprintf_r>:
 800b876:	b530      	push	{r4, r5, lr}
 800b878:	4614      	mov	r4, r2
 800b87a:	2c00      	cmp	r4, #0
 800b87c:	b09b      	sub	sp, #108	@ 0x6c
 800b87e:	4605      	mov	r5, r0
 800b880:	461a      	mov	r2, r3
 800b882:	da05      	bge.n	800b890 <_vsniprintf_r+0x1a>
 800b884:	238b      	movs	r3, #139	@ 0x8b
 800b886:	6003      	str	r3, [r0, #0]
 800b888:	f04f 30ff 	mov.w	r0, #4294967295
 800b88c:	b01b      	add	sp, #108	@ 0x6c
 800b88e:	bd30      	pop	{r4, r5, pc}
 800b890:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b894:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b898:	bf14      	ite	ne
 800b89a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b89e:	4623      	moveq	r3, r4
 800b8a0:	9302      	str	r3, [sp, #8]
 800b8a2:	9305      	str	r3, [sp, #20]
 800b8a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b8a8:	9100      	str	r1, [sp, #0]
 800b8aa:	9104      	str	r1, [sp, #16]
 800b8ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b8b0:	4669      	mov	r1, sp
 800b8b2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b8b4:	f001 fc72 	bl	800d19c <_svfiprintf_r>
 800b8b8:	1c43      	adds	r3, r0, #1
 800b8ba:	bfbc      	itt	lt
 800b8bc:	238b      	movlt	r3, #139	@ 0x8b
 800b8be:	602b      	strlt	r3, [r5, #0]
 800b8c0:	2c00      	cmp	r4, #0
 800b8c2:	d0e3      	beq.n	800b88c <_vsniprintf_r+0x16>
 800b8c4:	9b00      	ldr	r3, [sp, #0]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	701a      	strb	r2, [r3, #0]
 800b8ca:	e7df      	b.n	800b88c <_vsniprintf_r+0x16>

0800b8cc <vsniprintf>:
 800b8cc:	b507      	push	{r0, r1, r2, lr}
 800b8ce:	9300      	str	r3, [sp, #0]
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	460a      	mov	r2, r1
 800b8d4:	4601      	mov	r1, r0
 800b8d6:	4803      	ldr	r0, [pc, #12]	@ (800b8e4 <vsniprintf+0x18>)
 800b8d8:	6800      	ldr	r0, [r0, #0]
 800b8da:	f7ff ffcc 	bl	800b876 <_vsniprintf_r>
 800b8de:	b003      	add	sp, #12
 800b8e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8e4:	2000018c 	.word	0x2000018c

0800b8e8 <__swbuf_r>:
 800b8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ea:	460e      	mov	r6, r1
 800b8ec:	4614      	mov	r4, r2
 800b8ee:	4605      	mov	r5, r0
 800b8f0:	b118      	cbz	r0, 800b8fa <__swbuf_r+0x12>
 800b8f2:	6a03      	ldr	r3, [r0, #32]
 800b8f4:	b90b      	cbnz	r3, 800b8fa <__swbuf_r+0x12>
 800b8f6:	f7ff fec7 	bl	800b688 <__sinit>
 800b8fa:	69a3      	ldr	r3, [r4, #24]
 800b8fc:	60a3      	str	r3, [r4, #8]
 800b8fe:	89a3      	ldrh	r3, [r4, #12]
 800b900:	071a      	lsls	r2, r3, #28
 800b902:	d501      	bpl.n	800b908 <__swbuf_r+0x20>
 800b904:	6923      	ldr	r3, [r4, #16]
 800b906:	b943      	cbnz	r3, 800b91a <__swbuf_r+0x32>
 800b908:	4621      	mov	r1, r4
 800b90a:	4628      	mov	r0, r5
 800b90c:	f000 f82a 	bl	800b964 <__swsetup_r>
 800b910:	b118      	cbz	r0, 800b91a <__swbuf_r+0x32>
 800b912:	f04f 37ff 	mov.w	r7, #4294967295
 800b916:	4638      	mov	r0, r7
 800b918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b91a:	6823      	ldr	r3, [r4, #0]
 800b91c:	6922      	ldr	r2, [r4, #16]
 800b91e:	1a98      	subs	r0, r3, r2
 800b920:	6963      	ldr	r3, [r4, #20]
 800b922:	b2f6      	uxtb	r6, r6
 800b924:	4283      	cmp	r3, r0
 800b926:	4637      	mov	r7, r6
 800b928:	dc05      	bgt.n	800b936 <__swbuf_r+0x4e>
 800b92a:	4621      	mov	r1, r4
 800b92c:	4628      	mov	r0, r5
 800b92e:	f001 fdb5 	bl	800d49c <_fflush_r>
 800b932:	2800      	cmp	r0, #0
 800b934:	d1ed      	bne.n	800b912 <__swbuf_r+0x2a>
 800b936:	68a3      	ldr	r3, [r4, #8]
 800b938:	3b01      	subs	r3, #1
 800b93a:	60a3      	str	r3, [r4, #8]
 800b93c:	6823      	ldr	r3, [r4, #0]
 800b93e:	1c5a      	adds	r2, r3, #1
 800b940:	6022      	str	r2, [r4, #0]
 800b942:	701e      	strb	r6, [r3, #0]
 800b944:	6962      	ldr	r2, [r4, #20]
 800b946:	1c43      	adds	r3, r0, #1
 800b948:	429a      	cmp	r2, r3
 800b94a:	d004      	beq.n	800b956 <__swbuf_r+0x6e>
 800b94c:	89a3      	ldrh	r3, [r4, #12]
 800b94e:	07db      	lsls	r3, r3, #31
 800b950:	d5e1      	bpl.n	800b916 <__swbuf_r+0x2e>
 800b952:	2e0a      	cmp	r6, #10
 800b954:	d1df      	bne.n	800b916 <__swbuf_r+0x2e>
 800b956:	4621      	mov	r1, r4
 800b958:	4628      	mov	r0, r5
 800b95a:	f001 fd9f 	bl	800d49c <_fflush_r>
 800b95e:	2800      	cmp	r0, #0
 800b960:	d0d9      	beq.n	800b916 <__swbuf_r+0x2e>
 800b962:	e7d6      	b.n	800b912 <__swbuf_r+0x2a>

0800b964 <__swsetup_r>:
 800b964:	b538      	push	{r3, r4, r5, lr}
 800b966:	4b29      	ldr	r3, [pc, #164]	@ (800ba0c <__swsetup_r+0xa8>)
 800b968:	4605      	mov	r5, r0
 800b96a:	6818      	ldr	r0, [r3, #0]
 800b96c:	460c      	mov	r4, r1
 800b96e:	b118      	cbz	r0, 800b978 <__swsetup_r+0x14>
 800b970:	6a03      	ldr	r3, [r0, #32]
 800b972:	b90b      	cbnz	r3, 800b978 <__swsetup_r+0x14>
 800b974:	f7ff fe88 	bl	800b688 <__sinit>
 800b978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b97c:	0719      	lsls	r1, r3, #28
 800b97e:	d422      	bmi.n	800b9c6 <__swsetup_r+0x62>
 800b980:	06da      	lsls	r2, r3, #27
 800b982:	d407      	bmi.n	800b994 <__swsetup_r+0x30>
 800b984:	2209      	movs	r2, #9
 800b986:	602a      	str	r2, [r5, #0]
 800b988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b98c:	81a3      	strh	r3, [r4, #12]
 800b98e:	f04f 30ff 	mov.w	r0, #4294967295
 800b992:	e033      	b.n	800b9fc <__swsetup_r+0x98>
 800b994:	0758      	lsls	r0, r3, #29
 800b996:	d512      	bpl.n	800b9be <__swsetup_r+0x5a>
 800b998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b99a:	b141      	cbz	r1, 800b9ae <__swsetup_r+0x4a>
 800b99c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9a0:	4299      	cmp	r1, r3
 800b9a2:	d002      	beq.n	800b9aa <__swsetup_r+0x46>
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	f000 ff1b 	bl	800c7e0 <_free_r>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9ae:	89a3      	ldrh	r3, [r4, #12]
 800b9b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b9b4:	81a3      	strh	r3, [r4, #12]
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	6063      	str	r3, [r4, #4]
 800b9ba:	6923      	ldr	r3, [r4, #16]
 800b9bc:	6023      	str	r3, [r4, #0]
 800b9be:	89a3      	ldrh	r3, [r4, #12]
 800b9c0:	f043 0308 	orr.w	r3, r3, #8
 800b9c4:	81a3      	strh	r3, [r4, #12]
 800b9c6:	6923      	ldr	r3, [r4, #16]
 800b9c8:	b94b      	cbnz	r3, 800b9de <__swsetup_r+0x7a>
 800b9ca:	89a3      	ldrh	r3, [r4, #12]
 800b9cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b9d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9d4:	d003      	beq.n	800b9de <__swsetup_r+0x7a>
 800b9d6:	4621      	mov	r1, r4
 800b9d8:	4628      	mov	r0, r5
 800b9da:	f001 fdbf 	bl	800d55c <__smakebuf_r>
 800b9de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9e2:	f013 0201 	ands.w	r2, r3, #1
 800b9e6:	d00a      	beq.n	800b9fe <__swsetup_r+0x9a>
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	60a2      	str	r2, [r4, #8]
 800b9ec:	6962      	ldr	r2, [r4, #20]
 800b9ee:	4252      	negs	r2, r2
 800b9f0:	61a2      	str	r2, [r4, #24]
 800b9f2:	6922      	ldr	r2, [r4, #16]
 800b9f4:	b942      	cbnz	r2, 800ba08 <__swsetup_r+0xa4>
 800b9f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b9fa:	d1c5      	bne.n	800b988 <__swsetup_r+0x24>
 800b9fc:	bd38      	pop	{r3, r4, r5, pc}
 800b9fe:	0799      	lsls	r1, r3, #30
 800ba00:	bf58      	it	pl
 800ba02:	6962      	ldrpl	r2, [r4, #20]
 800ba04:	60a2      	str	r2, [r4, #8]
 800ba06:	e7f4      	b.n	800b9f2 <__swsetup_r+0x8e>
 800ba08:	2000      	movs	r0, #0
 800ba0a:	e7f7      	b.n	800b9fc <__swsetup_r+0x98>
 800ba0c:	2000018c 	.word	0x2000018c

0800ba10 <memset>:
 800ba10:	4402      	add	r2, r0
 800ba12:	4603      	mov	r3, r0
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d100      	bne.n	800ba1a <memset+0xa>
 800ba18:	4770      	bx	lr
 800ba1a:	f803 1b01 	strb.w	r1, [r3], #1
 800ba1e:	e7f9      	b.n	800ba14 <memset+0x4>

0800ba20 <_localeconv_r>:
 800ba20:	4800      	ldr	r0, [pc, #0]	@ (800ba24 <_localeconv_r+0x4>)
 800ba22:	4770      	bx	lr
 800ba24:	200002cc 	.word	0x200002cc

0800ba28 <_close_r>:
 800ba28:	b538      	push	{r3, r4, r5, lr}
 800ba2a:	4d06      	ldr	r5, [pc, #24]	@ (800ba44 <_close_r+0x1c>)
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	4604      	mov	r4, r0
 800ba30:	4608      	mov	r0, r1
 800ba32:	602b      	str	r3, [r5, #0]
 800ba34:	f7f7 f934 	bl	8002ca0 <_close>
 800ba38:	1c43      	adds	r3, r0, #1
 800ba3a:	d102      	bne.n	800ba42 <_close_r+0x1a>
 800ba3c:	682b      	ldr	r3, [r5, #0]
 800ba3e:	b103      	cbz	r3, 800ba42 <_close_r+0x1a>
 800ba40:	6023      	str	r3, [r4, #0]
 800ba42:	bd38      	pop	{r3, r4, r5, pc}
 800ba44:	20006638 	.word	0x20006638

0800ba48 <_lseek_r>:
 800ba48:	b538      	push	{r3, r4, r5, lr}
 800ba4a:	4d07      	ldr	r5, [pc, #28]	@ (800ba68 <_lseek_r+0x20>)
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	4608      	mov	r0, r1
 800ba50:	4611      	mov	r1, r2
 800ba52:	2200      	movs	r2, #0
 800ba54:	602a      	str	r2, [r5, #0]
 800ba56:	461a      	mov	r2, r3
 800ba58:	f7f7 f949 	bl	8002cee <_lseek>
 800ba5c:	1c43      	adds	r3, r0, #1
 800ba5e:	d102      	bne.n	800ba66 <_lseek_r+0x1e>
 800ba60:	682b      	ldr	r3, [r5, #0]
 800ba62:	b103      	cbz	r3, 800ba66 <_lseek_r+0x1e>
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	bd38      	pop	{r3, r4, r5, pc}
 800ba68:	20006638 	.word	0x20006638

0800ba6c <_read_r>:
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	4d07      	ldr	r5, [pc, #28]	@ (800ba8c <_read_r+0x20>)
 800ba70:	4604      	mov	r4, r0
 800ba72:	4608      	mov	r0, r1
 800ba74:	4611      	mov	r1, r2
 800ba76:	2200      	movs	r2, #0
 800ba78:	602a      	str	r2, [r5, #0]
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	f7f7 f8f3 	bl	8002c66 <_read>
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	d102      	bne.n	800ba8a <_read_r+0x1e>
 800ba84:	682b      	ldr	r3, [r5, #0]
 800ba86:	b103      	cbz	r3, 800ba8a <_read_r+0x1e>
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	bd38      	pop	{r3, r4, r5, pc}
 800ba8c:	20006638 	.word	0x20006638

0800ba90 <__errno>:
 800ba90:	4b01      	ldr	r3, [pc, #4]	@ (800ba98 <__errno+0x8>)
 800ba92:	6818      	ldr	r0, [r3, #0]
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop
 800ba98:	2000018c 	.word	0x2000018c

0800ba9c <__libc_init_array>:
 800ba9c:	b570      	push	{r4, r5, r6, lr}
 800ba9e:	4d0d      	ldr	r5, [pc, #52]	@ (800bad4 <__libc_init_array+0x38>)
 800baa0:	4c0d      	ldr	r4, [pc, #52]	@ (800bad8 <__libc_init_array+0x3c>)
 800baa2:	1b64      	subs	r4, r4, r5
 800baa4:	10a4      	asrs	r4, r4, #2
 800baa6:	2600      	movs	r6, #0
 800baa8:	42a6      	cmp	r6, r4
 800baaa:	d109      	bne.n	800bac0 <__libc_init_array+0x24>
 800baac:	4d0b      	ldr	r5, [pc, #44]	@ (800badc <__libc_init_array+0x40>)
 800baae:	4c0c      	ldr	r4, [pc, #48]	@ (800bae0 <__libc_init_array+0x44>)
 800bab0:	f001 ffd2 	bl	800da58 <_init>
 800bab4:	1b64      	subs	r4, r4, r5
 800bab6:	10a4      	asrs	r4, r4, #2
 800bab8:	2600      	movs	r6, #0
 800baba:	42a6      	cmp	r6, r4
 800babc:	d105      	bne.n	800baca <__libc_init_array+0x2e>
 800babe:	bd70      	pop	{r4, r5, r6, pc}
 800bac0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bac4:	4798      	blx	r3
 800bac6:	3601      	adds	r6, #1
 800bac8:	e7ee      	b.n	800baa8 <__libc_init_array+0xc>
 800baca:	f855 3b04 	ldr.w	r3, [r5], #4
 800bace:	4798      	blx	r3
 800bad0:	3601      	adds	r6, #1
 800bad2:	e7f2      	b.n	800baba <__libc_init_array+0x1e>
 800bad4:	0800e524 	.word	0x0800e524
 800bad8:	0800e524 	.word	0x0800e524
 800badc:	0800e524 	.word	0x0800e524
 800bae0:	0800e528 	.word	0x0800e528

0800bae4 <__retarget_lock_init_recursive>:
 800bae4:	4770      	bx	lr

0800bae6 <__retarget_lock_acquire_recursive>:
 800bae6:	4770      	bx	lr

0800bae8 <__retarget_lock_release_recursive>:
 800bae8:	4770      	bx	lr

0800baea <memcpy>:
 800baea:	440a      	add	r2, r1
 800baec:	4291      	cmp	r1, r2
 800baee:	f100 33ff 	add.w	r3, r0, #4294967295
 800baf2:	d100      	bne.n	800baf6 <memcpy+0xc>
 800baf4:	4770      	bx	lr
 800baf6:	b510      	push	{r4, lr}
 800baf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bafc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb00:	4291      	cmp	r1, r2
 800bb02:	d1f9      	bne.n	800baf8 <memcpy+0xe>
 800bb04:	bd10      	pop	{r4, pc}
	...

0800bb08 <__assert_func>:
 800bb08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb0a:	4614      	mov	r4, r2
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	4b09      	ldr	r3, [pc, #36]	@ (800bb34 <__assert_func+0x2c>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4605      	mov	r5, r0
 800bb14:	68d8      	ldr	r0, [r3, #12]
 800bb16:	b954      	cbnz	r4, 800bb2e <__assert_func+0x26>
 800bb18:	4b07      	ldr	r3, [pc, #28]	@ (800bb38 <__assert_func+0x30>)
 800bb1a:	461c      	mov	r4, r3
 800bb1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb20:	9100      	str	r1, [sp, #0]
 800bb22:	462b      	mov	r3, r5
 800bb24:	4905      	ldr	r1, [pc, #20]	@ (800bb3c <__assert_func+0x34>)
 800bb26:	f001 fce1 	bl	800d4ec <fiprintf>
 800bb2a:	f001 fd9f 	bl	800d66c <abort>
 800bb2e:	4b04      	ldr	r3, [pc, #16]	@ (800bb40 <__assert_func+0x38>)
 800bb30:	e7f4      	b.n	800bb1c <__assert_func+0x14>
 800bb32:	bf00      	nop
 800bb34:	2000018c 	.word	0x2000018c
 800bb38:	0800e219 	.word	0x0800e219
 800bb3c:	0800e1eb 	.word	0x0800e1eb
 800bb40:	0800e1de 	.word	0x0800e1de

0800bb44 <quorem>:
 800bb44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb48:	6903      	ldr	r3, [r0, #16]
 800bb4a:	690c      	ldr	r4, [r1, #16]
 800bb4c:	42a3      	cmp	r3, r4
 800bb4e:	4607      	mov	r7, r0
 800bb50:	db7e      	blt.n	800bc50 <quorem+0x10c>
 800bb52:	3c01      	subs	r4, #1
 800bb54:	f101 0814 	add.w	r8, r1, #20
 800bb58:	00a3      	lsls	r3, r4, #2
 800bb5a:	f100 0514 	add.w	r5, r0, #20
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb64:	9301      	str	r3, [sp, #4]
 800bb66:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	429a      	cmp	r2, r3
 800bb72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb76:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb7a:	d32e      	bcc.n	800bbda <quorem+0x96>
 800bb7c:	f04f 0a00 	mov.w	sl, #0
 800bb80:	46c4      	mov	ip, r8
 800bb82:	46ae      	mov	lr, r5
 800bb84:	46d3      	mov	fp, sl
 800bb86:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb8a:	b298      	uxth	r0, r3
 800bb8c:	fb06 a000 	mla	r0, r6, r0, sl
 800bb90:	0c02      	lsrs	r2, r0, #16
 800bb92:	0c1b      	lsrs	r3, r3, #16
 800bb94:	fb06 2303 	mla	r3, r6, r3, r2
 800bb98:	f8de 2000 	ldr.w	r2, [lr]
 800bb9c:	b280      	uxth	r0, r0
 800bb9e:	b292      	uxth	r2, r2
 800bba0:	1a12      	subs	r2, r2, r0
 800bba2:	445a      	add	r2, fp
 800bba4:	f8de 0000 	ldr.w	r0, [lr]
 800bba8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bbb2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bbb6:	b292      	uxth	r2, r2
 800bbb8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bbbc:	45e1      	cmp	r9, ip
 800bbbe:	f84e 2b04 	str.w	r2, [lr], #4
 800bbc2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bbc6:	d2de      	bcs.n	800bb86 <quorem+0x42>
 800bbc8:	9b00      	ldr	r3, [sp, #0]
 800bbca:	58eb      	ldr	r3, [r5, r3]
 800bbcc:	b92b      	cbnz	r3, 800bbda <quorem+0x96>
 800bbce:	9b01      	ldr	r3, [sp, #4]
 800bbd0:	3b04      	subs	r3, #4
 800bbd2:	429d      	cmp	r5, r3
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	d32f      	bcc.n	800bc38 <quorem+0xf4>
 800bbd8:	613c      	str	r4, [r7, #16]
 800bbda:	4638      	mov	r0, r7
 800bbdc:	f001 f97a 	bl	800ced4 <__mcmp>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	db25      	blt.n	800bc30 <quorem+0xec>
 800bbe4:	4629      	mov	r1, r5
 800bbe6:	2000      	movs	r0, #0
 800bbe8:	f858 2b04 	ldr.w	r2, [r8], #4
 800bbec:	f8d1 c000 	ldr.w	ip, [r1]
 800bbf0:	fa1f fe82 	uxth.w	lr, r2
 800bbf4:	fa1f f38c 	uxth.w	r3, ip
 800bbf8:	eba3 030e 	sub.w	r3, r3, lr
 800bbfc:	4403      	add	r3, r0
 800bbfe:	0c12      	lsrs	r2, r2, #16
 800bc00:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bc04:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc0e:	45c1      	cmp	r9, r8
 800bc10:	f841 3b04 	str.w	r3, [r1], #4
 800bc14:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc18:	d2e6      	bcs.n	800bbe8 <quorem+0xa4>
 800bc1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc22:	b922      	cbnz	r2, 800bc2e <quorem+0xea>
 800bc24:	3b04      	subs	r3, #4
 800bc26:	429d      	cmp	r5, r3
 800bc28:	461a      	mov	r2, r3
 800bc2a:	d30b      	bcc.n	800bc44 <quorem+0x100>
 800bc2c:	613c      	str	r4, [r7, #16]
 800bc2e:	3601      	adds	r6, #1
 800bc30:	4630      	mov	r0, r6
 800bc32:	b003      	add	sp, #12
 800bc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc38:	6812      	ldr	r2, [r2, #0]
 800bc3a:	3b04      	subs	r3, #4
 800bc3c:	2a00      	cmp	r2, #0
 800bc3e:	d1cb      	bne.n	800bbd8 <quorem+0x94>
 800bc40:	3c01      	subs	r4, #1
 800bc42:	e7c6      	b.n	800bbd2 <quorem+0x8e>
 800bc44:	6812      	ldr	r2, [r2, #0]
 800bc46:	3b04      	subs	r3, #4
 800bc48:	2a00      	cmp	r2, #0
 800bc4a:	d1ef      	bne.n	800bc2c <quorem+0xe8>
 800bc4c:	3c01      	subs	r4, #1
 800bc4e:	e7ea      	b.n	800bc26 <quorem+0xe2>
 800bc50:	2000      	movs	r0, #0
 800bc52:	e7ee      	b.n	800bc32 <quorem+0xee>
 800bc54:	0000      	movs	r0, r0
	...

0800bc58 <_dtoa_r>:
 800bc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5c:	69c7      	ldr	r7, [r0, #28]
 800bc5e:	b099      	sub	sp, #100	@ 0x64
 800bc60:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bc64:	ec55 4b10 	vmov	r4, r5, d0
 800bc68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bc6a:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc6c:	4683      	mov	fp, r0
 800bc6e:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc70:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc72:	b97f      	cbnz	r7, 800bc94 <_dtoa_r+0x3c>
 800bc74:	2010      	movs	r0, #16
 800bc76:	f000 fdfd 	bl	800c874 <malloc>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	f8cb 001c 	str.w	r0, [fp, #28]
 800bc80:	b920      	cbnz	r0, 800bc8c <_dtoa_r+0x34>
 800bc82:	4ba7      	ldr	r3, [pc, #668]	@ (800bf20 <_dtoa_r+0x2c8>)
 800bc84:	21ef      	movs	r1, #239	@ 0xef
 800bc86:	48a7      	ldr	r0, [pc, #668]	@ (800bf24 <_dtoa_r+0x2cc>)
 800bc88:	f7ff ff3e 	bl	800bb08 <__assert_func>
 800bc8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bc90:	6007      	str	r7, [r0, #0]
 800bc92:	60c7      	str	r7, [r0, #12]
 800bc94:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc98:	6819      	ldr	r1, [r3, #0]
 800bc9a:	b159      	cbz	r1, 800bcb4 <_dtoa_r+0x5c>
 800bc9c:	685a      	ldr	r2, [r3, #4]
 800bc9e:	604a      	str	r2, [r1, #4]
 800bca0:	2301      	movs	r3, #1
 800bca2:	4093      	lsls	r3, r2
 800bca4:	608b      	str	r3, [r1, #8]
 800bca6:	4658      	mov	r0, fp
 800bca8:	f000 feda 	bl	800ca60 <_Bfree>
 800bcac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	601a      	str	r2, [r3, #0]
 800bcb4:	1e2b      	subs	r3, r5, #0
 800bcb6:	bfb9      	ittee	lt
 800bcb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bcbc:	9303      	strlt	r3, [sp, #12]
 800bcbe:	2300      	movge	r3, #0
 800bcc0:	6033      	strge	r3, [r6, #0]
 800bcc2:	9f03      	ldr	r7, [sp, #12]
 800bcc4:	4b98      	ldr	r3, [pc, #608]	@ (800bf28 <_dtoa_r+0x2d0>)
 800bcc6:	bfbc      	itt	lt
 800bcc8:	2201      	movlt	r2, #1
 800bcca:	6032      	strlt	r2, [r6, #0]
 800bccc:	43bb      	bics	r3, r7
 800bcce:	d112      	bne.n	800bcf6 <_dtoa_r+0x9e>
 800bcd0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bcd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bcd6:	6013      	str	r3, [r2, #0]
 800bcd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bcdc:	4323      	orrs	r3, r4
 800bcde:	f000 854d 	beq.w	800c77c <_dtoa_r+0xb24>
 800bce2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bce4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bf3c <_dtoa_r+0x2e4>
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f000 854f 	beq.w	800c78c <_dtoa_r+0xb34>
 800bcee:	f10a 0303 	add.w	r3, sl, #3
 800bcf2:	f000 bd49 	b.w	800c788 <_dtoa_r+0xb30>
 800bcf6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	ec51 0b17 	vmov	r0, r1, d7
 800bd00:	2300      	movs	r3, #0
 800bd02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bd06:	f7f4 ff37 	bl	8000b78 <__aeabi_dcmpeq>
 800bd0a:	4680      	mov	r8, r0
 800bd0c:	b158      	cbz	r0, 800bd26 <_dtoa_r+0xce>
 800bd0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bd10:	2301      	movs	r3, #1
 800bd12:	6013      	str	r3, [r2, #0]
 800bd14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd16:	b113      	cbz	r3, 800bd1e <_dtoa_r+0xc6>
 800bd18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bd1a:	4b84      	ldr	r3, [pc, #528]	@ (800bf2c <_dtoa_r+0x2d4>)
 800bd1c:	6013      	str	r3, [r2, #0]
 800bd1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bf40 <_dtoa_r+0x2e8>
 800bd22:	f000 bd33 	b.w	800c78c <_dtoa_r+0xb34>
 800bd26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bd2a:	aa16      	add	r2, sp, #88	@ 0x58
 800bd2c:	a917      	add	r1, sp, #92	@ 0x5c
 800bd2e:	4658      	mov	r0, fp
 800bd30:	f001 f980 	bl	800d034 <__d2b>
 800bd34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bd38:	4681      	mov	r9, r0
 800bd3a:	2e00      	cmp	r6, #0
 800bd3c:	d077      	beq.n	800be2e <_dtoa_r+0x1d6>
 800bd3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bd44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bd50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bd54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bd58:	4619      	mov	r1, r3
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	4b74      	ldr	r3, [pc, #464]	@ (800bf30 <_dtoa_r+0x2d8>)
 800bd5e:	f7f4 faeb 	bl	8000338 <__aeabi_dsub>
 800bd62:	a369      	add	r3, pc, #420	@ (adr r3, 800bf08 <_dtoa_r+0x2b0>)
 800bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd68:	f7f4 fc9e 	bl	80006a8 <__aeabi_dmul>
 800bd6c:	a368      	add	r3, pc, #416	@ (adr r3, 800bf10 <_dtoa_r+0x2b8>)
 800bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd72:	f7f4 fae3 	bl	800033c <__adddf3>
 800bd76:	4604      	mov	r4, r0
 800bd78:	4630      	mov	r0, r6
 800bd7a:	460d      	mov	r5, r1
 800bd7c:	f7f4 fc2a 	bl	80005d4 <__aeabi_i2d>
 800bd80:	a365      	add	r3, pc, #404	@ (adr r3, 800bf18 <_dtoa_r+0x2c0>)
 800bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd86:	f7f4 fc8f 	bl	80006a8 <__aeabi_dmul>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	4620      	mov	r0, r4
 800bd90:	4629      	mov	r1, r5
 800bd92:	f7f4 fad3 	bl	800033c <__adddf3>
 800bd96:	4604      	mov	r4, r0
 800bd98:	460d      	mov	r5, r1
 800bd9a:	f7f4 ff35 	bl	8000c08 <__aeabi_d2iz>
 800bd9e:	2200      	movs	r2, #0
 800bda0:	4607      	mov	r7, r0
 800bda2:	2300      	movs	r3, #0
 800bda4:	4620      	mov	r0, r4
 800bda6:	4629      	mov	r1, r5
 800bda8:	f7f4 fef0 	bl	8000b8c <__aeabi_dcmplt>
 800bdac:	b140      	cbz	r0, 800bdc0 <_dtoa_r+0x168>
 800bdae:	4638      	mov	r0, r7
 800bdb0:	f7f4 fc10 	bl	80005d4 <__aeabi_i2d>
 800bdb4:	4622      	mov	r2, r4
 800bdb6:	462b      	mov	r3, r5
 800bdb8:	f7f4 fede 	bl	8000b78 <__aeabi_dcmpeq>
 800bdbc:	b900      	cbnz	r0, 800bdc0 <_dtoa_r+0x168>
 800bdbe:	3f01      	subs	r7, #1
 800bdc0:	2f16      	cmp	r7, #22
 800bdc2:	d851      	bhi.n	800be68 <_dtoa_r+0x210>
 800bdc4:	4b5b      	ldr	r3, [pc, #364]	@ (800bf34 <_dtoa_r+0x2dc>)
 800bdc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdd2:	f7f4 fedb 	bl	8000b8c <__aeabi_dcmplt>
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	d048      	beq.n	800be6c <_dtoa_r+0x214>
 800bdda:	3f01      	subs	r7, #1
 800bddc:	2300      	movs	r3, #0
 800bdde:	9312      	str	r3, [sp, #72]	@ 0x48
 800bde0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bde2:	1b9b      	subs	r3, r3, r6
 800bde4:	1e5a      	subs	r2, r3, #1
 800bde6:	bf44      	itt	mi
 800bde8:	f1c3 0801 	rsbmi	r8, r3, #1
 800bdec:	2300      	movmi	r3, #0
 800bdee:	9208      	str	r2, [sp, #32]
 800bdf0:	bf54      	ite	pl
 800bdf2:	f04f 0800 	movpl.w	r8, #0
 800bdf6:	9308      	strmi	r3, [sp, #32]
 800bdf8:	2f00      	cmp	r7, #0
 800bdfa:	db39      	blt.n	800be70 <_dtoa_r+0x218>
 800bdfc:	9b08      	ldr	r3, [sp, #32]
 800bdfe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800be00:	443b      	add	r3, r7
 800be02:	9308      	str	r3, [sp, #32]
 800be04:	2300      	movs	r3, #0
 800be06:	930a      	str	r3, [sp, #40]	@ 0x28
 800be08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be0a:	2b09      	cmp	r3, #9
 800be0c:	d864      	bhi.n	800bed8 <_dtoa_r+0x280>
 800be0e:	2b05      	cmp	r3, #5
 800be10:	bfc4      	itt	gt
 800be12:	3b04      	subgt	r3, #4
 800be14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800be16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be18:	f1a3 0302 	sub.w	r3, r3, #2
 800be1c:	bfcc      	ite	gt
 800be1e:	2400      	movgt	r4, #0
 800be20:	2401      	movle	r4, #1
 800be22:	2b03      	cmp	r3, #3
 800be24:	d863      	bhi.n	800beee <_dtoa_r+0x296>
 800be26:	e8df f003 	tbb	[pc, r3]
 800be2a:	372a      	.short	0x372a
 800be2c:	5535      	.short	0x5535
 800be2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800be32:	441e      	add	r6, r3
 800be34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800be38:	2b20      	cmp	r3, #32
 800be3a:	bfc1      	itttt	gt
 800be3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800be40:	409f      	lslgt	r7, r3
 800be42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800be46:	fa24 f303 	lsrgt.w	r3, r4, r3
 800be4a:	bfd6      	itet	le
 800be4c:	f1c3 0320 	rsble	r3, r3, #32
 800be50:	ea47 0003 	orrgt.w	r0, r7, r3
 800be54:	fa04 f003 	lslle.w	r0, r4, r3
 800be58:	f7f4 fbac 	bl	80005b4 <__aeabi_ui2d>
 800be5c:	2201      	movs	r2, #1
 800be5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800be62:	3e01      	subs	r6, #1
 800be64:	9214      	str	r2, [sp, #80]	@ 0x50
 800be66:	e777      	b.n	800bd58 <_dtoa_r+0x100>
 800be68:	2301      	movs	r3, #1
 800be6a:	e7b8      	b.n	800bdde <_dtoa_r+0x186>
 800be6c:	9012      	str	r0, [sp, #72]	@ 0x48
 800be6e:	e7b7      	b.n	800bde0 <_dtoa_r+0x188>
 800be70:	427b      	negs	r3, r7
 800be72:	930a      	str	r3, [sp, #40]	@ 0x28
 800be74:	2300      	movs	r3, #0
 800be76:	eba8 0807 	sub.w	r8, r8, r7
 800be7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be7c:	e7c4      	b.n	800be08 <_dtoa_r+0x1b0>
 800be7e:	2300      	movs	r3, #0
 800be80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be84:	2b00      	cmp	r3, #0
 800be86:	dc35      	bgt.n	800bef4 <_dtoa_r+0x29c>
 800be88:	2301      	movs	r3, #1
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	9307      	str	r3, [sp, #28]
 800be8e:	461a      	mov	r2, r3
 800be90:	920e      	str	r2, [sp, #56]	@ 0x38
 800be92:	e00b      	b.n	800beac <_dtoa_r+0x254>
 800be94:	2301      	movs	r3, #1
 800be96:	e7f3      	b.n	800be80 <_dtoa_r+0x228>
 800be98:	2300      	movs	r3, #0
 800be9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be9e:	18fb      	adds	r3, r7, r3
 800bea0:	9300      	str	r3, [sp, #0]
 800bea2:	3301      	adds	r3, #1
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	9307      	str	r3, [sp, #28]
 800bea8:	bfb8      	it	lt
 800beaa:	2301      	movlt	r3, #1
 800beac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800beb0:	2100      	movs	r1, #0
 800beb2:	2204      	movs	r2, #4
 800beb4:	f102 0514 	add.w	r5, r2, #20
 800beb8:	429d      	cmp	r5, r3
 800beba:	d91f      	bls.n	800befc <_dtoa_r+0x2a4>
 800bebc:	6041      	str	r1, [r0, #4]
 800bebe:	4658      	mov	r0, fp
 800bec0:	f000 fd8e 	bl	800c9e0 <_Balloc>
 800bec4:	4682      	mov	sl, r0
 800bec6:	2800      	cmp	r0, #0
 800bec8:	d13c      	bne.n	800bf44 <_dtoa_r+0x2ec>
 800beca:	4b1b      	ldr	r3, [pc, #108]	@ (800bf38 <_dtoa_r+0x2e0>)
 800becc:	4602      	mov	r2, r0
 800bece:	f240 11af 	movw	r1, #431	@ 0x1af
 800bed2:	e6d8      	b.n	800bc86 <_dtoa_r+0x2e>
 800bed4:	2301      	movs	r3, #1
 800bed6:	e7e0      	b.n	800be9a <_dtoa_r+0x242>
 800bed8:	2401      	movs	r4, #1
 800beda:	2300      	movs	r3, #0
 800bedc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bede:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bee0:	f04f 33ff 	mov.w	r3, #4294967295
 800bee4:	9300      	str	r3, [sp, #0]
 800bee6:	9307      	str	r3, [sp, #28]
 800bee8:	2200      	movs	r2, #0
 800beea:	2312      	movs	r3, #18
 800beec:	e7d0      	b.n	800be90 <_dtoa_r+0x238>
 800beee:	2301      	movs	r3, #1
 800bef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bef2:	e7f5      	b.n	800bee0 <_dtoa_r+0x288>
 800bef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	9307      	str	r3, [sp, #28]
 800befa:	e7d7      	b.n	800beac <_dtoa_r+0x254>
 800befc:	3101      	adds	r1, #1
 800befe:	0052      	lsls	r2, r2, #1
 800bf00:	e7d8      	b.n	800beb4 <_dtoa_r+0x25c>
 800bf02:	bf00      	nop
 800bf04:	f3af 8000 	nop.w
 800bf08:	636f4361 	.word	0x636f4361
 800bf0c:	3fd287a7 	.word	0x3fd287a7
 800bf10:	8b60c8b3 	.word	0x8b60c8b3
 800bf14:	3fc68a28 	.word	0x3fc68a28
 800bf18:	509f79fb 	.word	0x509f79fb
 800bf1c:	3fd34413 	.word	0x3fd34413
 800bf20:	0800e227 	.word	0x0800e227
 800bf24:	0800e23e 	.word	0x0800e23e
 800bf28:	7ff00000 	.word	0x7ff00000
 800bf2c:	0800e1bb 	.word	0x0800e1bb
 800bf30:	3ff80000 	.word	0x3ff80000
 800bf34:	0800e338 	.word	0x0800e338
 800bf38:	0800e296 	.word	0x0800e296
 800bf3c:	0800e223 	.word	0x0800e223
 800bf40:	0800e1ba 	.word	0x0800e1ba
 800bf44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bf48:	6018      	str	r0, [r3, #0]
 800bf4a:	9b07      	ldr	r3, [sp, #28]
 800bf4c:	2b0e      	cmp	r3, #14
 800bf4e:	f200 80a4 	bhi.w	800c09a <_dtoa_r+0x442>
 800bf52:	2c00      	cmp	r4, #0
 800bf54:	f000 80a1 	beq.w	800c09a <_dtoa_r+0x442>
 800bf58:	2f00      	cmp	r7, #0
 800bf5a:	dd33      	ble.n	800bfc4 <_dtoa_r+0x36c>
 800bf5c:	4bad      	ldr	r3, [pc, #692]	@ (800c214 <_dtoa_r+0x5bc>)
 800bf5e:	f007 020f 	and.w	r2, r7, #15
 800bf62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf66:	ed93 7b00 	vldr	d7, [r3]
 800bf6a:	05f8      	lsls	r0, r7, #23
 800bf6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bf70:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bf74:	d516      	bpl.n	800bfa4 <_dtoa_r+0x34c>
 800bf76:	4ba8      	ldr	r3, [pc, #672]	@ (800c218 <_dtoa_r+0x5c0>)
 800bf78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf80:	f7f4 fcbc 	bl	80008fc <__aeabi_ddiv>
 800bf84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf88:	f004 040f 	and.w	r4, r4, #15
 800bf8c:	2603      	movs	r6, #3
 800bf8e:	4da2      	ldr	r5, [pc, #648]	@ (800c218 <_dtoa_r+0x5c0>)
 800bf90:	b954      	cbnz	r4, 800bfa8 <_dtoa_r+0x350>
 800bf92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf9a:	f7f4 fcaf 	bl	80008fc <__aeabi_ddiv>
 800bf9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfa2:	e028      	b.n	800bff6 <_dtoa_r+0x39e>
 800bfa4:	2602      	movs	r6, #2
 800bfa6:	e7f2      	b.n	800bf8e <_dtoa_r+0x336>
 800bfa8:	07e1      	lsls	r1, r4, #31
 800bfaa:	d508      	bpl.n	800bfbe <_dtoa_r+0x366>
 800bfac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bfb4:	f7f4 fb78 	bl	80006a8 <__aeabi_dmul>
 800bfb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfbc:	3601      	adds	r6, #1
 800bfbe:	1064      	asrs	r4, r4, #1
 800bfc0:	3508      	adds	r5, #8
 800bfc2:	e7e5      	b.n	800bf90 <_dtoa_r+0x338>
 800bfc4:	f000 80d2 	beq.w	800c16c <_dtoa_r+0x514>
 800bfc8:	427c      	negs	r4, r7
 800bfca:	4b92      	ldr	r3, [pc, #584]	@ (800c214 <_dtoa_r+0x5bc>)
 800bfcc:	4d92      	ldr	r5, [pc, #584]	@ (800c218 <_dtoa_r+0x5c0>)
 800bfce:	f004 020f 	and.w	r2, r4, #15
 800bfd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfde:	f7f4 fb63 	bl	80006a8 <__aeabi_dmul>
 800bfe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfe6:	1124      	asrs	r4, r4, #4
 800bfe8:	2300      	movs	r3, #0
 800bfea:	2602      	movs	r6, #2
 800bfec:	2c00      	cmp	r4, #0
 800bfee:	f040 80b2 	bne.w	800c156 <_dtoa_r+0x4fe>
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d1d3      	bne.n	800bf9e <_dtoa_r+0x346>
 800bff6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bff8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	f000 80b7 	beq.w	800c170 <_dtoa_r+0x518>
 800c002:	4b86      	ldr	r3, [pc, #536]	@ (800c21c <_dtoa_r+0x5c4>)
 800c004:	2200      	movs	r2, #0
 800c006:	4620      	mov	r0, r4
 800c008:	4629      	mov	r1, r5
 800c00a:	f7f4 fdbf 	bl	8000b8c <__aeabi_dcmplt>
 800c00e:	2800      	cmp	r0, #0
 800c010:	f000 80ae 	beq.w	800c170 <_dtoa_r+0x518>
 800c014:	9b07      	ldr	r3, [sp, #28]
 800c016:	2b00      	cmp	r3, #0
 800c018:	f000 80aa 	beq.w	800c170 <_dtoa_r+0x518>
 800c01c:	9b00      	ldr	r3, [sp, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	dd37      	ble.n	800c092 <_dtoa_r+0x43a>
 800c022:	1e7b      	subs	r3, r7, #1
 800c024:	9304      	str	r3, [sp, #16]
 800c026:	4620      	mov	r0, r4
 800c028:	4b7d      	ldr	r3, [pc, #500]	@ (800c220 <_dtoa_r+0x5c8>)
 800c02a:	2200      	movs	r2, #0
 800c02c:	4629      	mov	r1, r5
 800c02e:	f7f4 fb3b 	bl	80006a8 <__aeabi_dmul>
 800c032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c036:	9c00      	ldr	r4, [sp, #0]
 800c038:	3601      	adds	r6, #1
 800c03a:	4630      	mov	r0, r6
 800c03c:	f7f4 faca 	bl	80005d4 <__aeabi_i2d>
 800c040:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c044:	f7f4 fb30 	bl	80006a8 <__aeabi_dmul>
 800c048:	4b76      	ldr	r3, [pc, #472]	@ (800c224 <_dtoa_r+0x5cc>)
 800c04a:	2200      	movs	r2, #0
 800c04c:	f7f4 f976 	bl	800033c <__adddf3>
 800c050:	4605      	mov	r5, r0
 800c052:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c056:	2c00      	cmp	r4, #0
 800c058:	f040 808d 	bne.w	800c176 <_dtoa_r+0x51e>
 800c05c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c060:	4b71      	ldr	r3, [pc, #452]	@ (800c228 <_dtoa_r+0x5d0>)
 800c062:	2200      	movs	r2, #0
 800c064:	f7f4 f968 	bl	8000338 <__aeabi_dsub>
 800c068:	4602      	mov	r2, r0
 800c06a:	460b      	mov	r3, r1
 800c06c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c070:	462a      	mov	r2, r5
 800c072:	4633      	mov	r3, r6
 800c074:	f7f4 fda8 	bl	8000bc8 <__aeabi_dcmpgt>
 800c078:	2800      	cmp	r0, #0
 800c07a:	f040 828b 	bne.w	800c594 <_dtoa_r+0x93c>
 800c07e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c082:	462a      	mov	r2, r5
 800c084:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c088:	f7f4 fd80 	bl	8000b8c <__aeabi_dcmplt>
 800c08c:	2800      	cmp	r0, #0
 800c08e:	f040 8128 	bne.w	800c2e2 <_dtoa_r+0x68a>
 800c092:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c096:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c09a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	f2c0 815a 	blt.w	800c356 <_dtoa_r+0x6fe>
 800c0a2:	2f0e      	cmp	r7, #14
 800c0a4:	f300 8157 	bgt.w	800c356 <_dtoa_r+0x6fe>
 800c0a8:	4b5a      	ldr	r3, [pc, #360]	@ (800c214 <_dtoa_r+0x5bc>)
 800c0aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c0ae:	ed93 7b00 	vldr	d7, [r3]
 800c0b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	ed8d 7b00 	vstr	d7, [sp]
 800c0ba:	da03      	bge.n	800c0c4 <_dtoa_r+0x46c>
 800c0bc:	9b07      	ldr	r3, [sp, #28]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	f340 8101 	ble.w	800c2c6 <_dtoa_r+0x66e>
 800c0c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c0c8:	4656      	mov	r6, sl
 800c0ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	f7f4 fc13 	bl	80008fc <__aeabi_ddiv>
 800c0d6:	f7f4 fd97 	bl	8000c08 <__aeabi_d2iz>
 800c0da:	4680      	mov	r8, r0
 800c0dc:	f7f4 fa7a 	bl	80005d4 <__aeabi_i2d>
 800c0e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0e4:	f7f4 fae0 	bl	80006a8 <__aeabi_dmul>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	4629      	mov	r1, r5
 800c0f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c0f4:	f7f4 f920 	bl	8000338 <__aeabi_dsub>
 800c0f8:	f806 4b01 	strb.w	r4, [r6], #1
 800c0fc:	9d07      	ldr	r5, [sp, #28]
 800c0fe:	eba6 040a 	sub.w	r4, r6, sl
 800c102:	42a5      	cmp	r5, r4
 800c104:	4602      	mov	r2, r0
 800c106:	460b      	mov	r3, r1
 800c108:	f040 8117 	bne.w	800c33a <_dtoa_r+0x6e2>
 800c10c:	f7f4 f916 	bl	800033c <__adddf3>
 800c110:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c114:	4604      	mov	r4, r0
 800c116:	460d      	mov	r5, r1
 800c118:	f7f4 fd56 	bl	8000bc8 <__aeabi_dcmpgt>
 800c11c:	2800      	cmp	r0, #0
 800c11e:	f040 80f9 	bne.w	800c314 <_dtoa_r+0x6bc>
 800c122:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c126:	4620      	mov	r0, r4
 800c128:	4629      	mov	r1, r5
 800c12a:	f7f4 fd25 	bl	8000b78 <__aeabi_dcmpeq>
 800c12e:	b118      	cbz	r0, 800c138 <_dtoa_r+0x4e0>
 800c130:	f018 0f01 	tst.w	r8, #1
 800c134:	f040 80ee 	bne.w	800c314 <_dtoa_r+0x6bc>
 800c138:	4649      	mov	r1, r9
 800c13a:	4658      	mov	r0, fp
 800c13c:	f000 fc90 	bl	800ca60 <_Bfree>
 800c140:	2300      	movs	r3, #0
 800c142:	7033      	strb	r3, [r6, #0]
 800c144:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c146:	3701      	adds	r7, #1
 800c148:	601f      	str	r7, [r3, #0]
 800c14a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f000 831d 	beq.w	800c78c <_dtoa_r+0xb34>
 800c152:	601e      	str	r6, [r3, #0]
 800c154:	e31a      	b.n	800c78c <_dtoa_r+0xb34>
 800c156:	07e2      	lsls	r2, r4, #31
 800c158:	d505      	bpl.n	800c166 <_dtoa_r+0x50e>
 800c15a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c15e:	f7f4 faa3 	bl	80006a8 <__aeabi_dmul>
 800c162:	3601      	adds	r6, #1
 800c164:	2301      	movs	r3, #1
 800c166:	1064      	asrs	r4, r4, #1
 800c168:	3508      	adds	r5, #8
 800c16a:	e73f      	b.n	800bfec <_dtoa_r+0x394>
 800c16c:	2602      	movs	r6, #2
 800c16e:	e742      	b.n	800bff6 <_dtoa_r+0x39e>
 800c170:	9c07      	ldr	r4, [sp, #28]
 800c172:	9704      	str	r7, [sp, #16]
 800c174:	e761      	b.n	800c03a <_dtoa_r+0x3e2>
 800c176:	4b27      	ldr	r3, [pc, #156]	@ (800c214 <_dtoa_r+0x5bc>)
 800c178:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c17a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c17e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c182:	4454      	add	r4, sl
 800c184:	2900      	cmp	r1, #0
 800c186:	d053      	beq.n	800c230 <_dtoa_r+0x5d8>
 800c188:	4928      	ldr	r1, [pc, #160]	@ (800c22c <_dtoa_r+0x5d4>)
 800c18a:	2000      	movs	r0, #0
 800c18c:	f7f4 fbb6 	bl	80008fc <__aeabi_ddiv>
 800c190:	4633      	mov	r3, r6
 800c192:	462a      	mov	r2, r5
 800c194:	f7f4 f8d0 	bl	8000338 <__aeabi_dsub>
 800c198:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c19c:	4656      	mov	r6, sl
 800c19e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1a2:	f7f4 fd31 	bl	8000c08 <__aeabi_d2iz>
 800c1a6:	4605      	mov	r5, r0
 800c1a8:	f7f4 fa14 	bl	80005d4 <__aeabi_i2d>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1b4:	f7f4 f8c0 	bl	8000338 <__aeabi_dsub>
 800c1b8:	3530      	adds	r5, #48	@ 0x30
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	460b      	mov	r3, r1
 800c1be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c1c2:	f806 5b01 	strb.w	r5, [r6], #1
 800c1c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c1ca:	f7f4 fcdf 	bl	8000b8c <__aeabi_dcmplt>
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	d171      	bne.n	800c2b6 <_dtoa_r+0x65e>
 800c1d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1d6:	4911      	ldr	r1, [pc, #68]	@ (800c21c <_dtoa_r+0x5c4>)
 800c1d8:	2000      	movs	r0, #0
 800c1da:	f7f4 f8ad 	bl	8000338 <__aeabi_dsub>
 800c1de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c1e2:	f7f4 fcd3 	bl	8000b8c <__aeabi_dcmplt>
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	f040 8095 	bne.w	800c316 <_dtoa_r+0x6be>
 800c1ec:	42a6      	cmp	r6, r4
 800c1ee:	f43f af50 	beq.w	800c092 <_dtoa_r+0x43a>
 800c1f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c1f6:	4b0a      	ldr	r3, [pc, #40]	@ (800c220 <_dtoa_r+0x5c8>)
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f7f4 fa55 	bl	80006a8 <__aeabi_dmul>
 800c1fe:	4b08      	ldr	r3, [pc, #32]	@ (800c220 <_dtoa_r+0x5c8>)
 800c200:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c204:	2200      	movs	r2, #0
 800c206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c20a:	f7f4 fa4d 	bl	80006a8 <__aeabi_dmul>
 800c20e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c212:	e7c4      	b.n	800c19e <_dtoa_r+0x546>
 800c214:	0800e338 	.word	0x0800e338
 800c218:	0800e310 	.word	0x0800e310
 800c21c:	3ff00000 	.word	0x3ff00000
 800c220:	40240000 	.word	0x40240000
 800c224:	401c0000 	.word	0x401c0000
 800c228:	40140000 	.word	0x40140000
 800c22c:	3fe00000 	.word	0x3fe00000
 800c230:	4631      	mov	r1, r6
 800c232:	4628      	mov	r0, r5
 800c234:	f7f4 fa38 	bl	80006a8 <__aeabi_dmul>
 800c238:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c23c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c23e:	4656      	mov	r6, sl
 800c240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c244:	f7f4 fce0 	bl	8000c08 <__aeabi_d2iz>
 800c248:	4605      	mov	r5, r0
 800c24a:	f7f4 f9c3 	bl	80005d4 <__aeabi_i2d>
 800c24e:	4602      	mov	r2, r0
 800c250:	460b      	mov	r3, r1
 800c252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c256:	f7f4 f86f 	bl	8000338 <__aeabi_dsub>
 800c25a:	3530      	adds	r5, #48	@ 0x30
 800c25c:	f806 5b01 	strb.w	r5, [r6], #1
 800c260:	4602      	mov	r2, r0
 800c262:	460b      	mov	r3, r1
 800c264:	42a6      	cmp	r6, r4
 800c266:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c26a:	f04f 0200 	mov.w	r2, #0
 800c26e:	d124      	bne.n	800c2ba <_dtoa_r+0x662>
 800c270:	4bac      	ldr	r3, [pc, #688]	@ (800c524 <_dtoa_r+0x8cc>)
 800c272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c276:	f7f4 f861 	bl	800033c <__adddf3>
 800c27a:	4602      	mov	r2, r0
 800c27c:	460b      	mov	r3, r1
 800c27e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c282:	f7f4 fca1 	bl	8000bc8 <__aeabi_dcmpgt>
 800c286:	2800      	cmp	r0, #0
 800c288:	d145      	bne.n	800c316 <_dtoa_r+0x6be>
 800c28a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c28e:	49a5      	ldr	r1, [pc, #660]	@ (800c524 <_dtoa_r+0x8cc>)
 800c290:	2000      	movs	r0, #0
 800c292:	f7f4 f851 	bl	8000338 <__aeabi_dsub>
 800c296:	4602      	mov	r2, r0
 800c298:	460b      	mov	r3, r1
 800c29a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c29e:	f7f4 fc75 	bl	8000b8c <__aeabi_dcmplt>
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	f43f aef5 	beq.w	800c092 <_dtoa_r+0x43a>
 800c2a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c2aa:	1e73      	subs	r3, r6, #1
 800c2ac:	9315      	str	r3, [sp, #84]	@ 0x54
 800c2ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c2b2:	2b30      	cmp	r3, #48	@ 0x30
 800c2b4:	d0f8      	beq.n	800c2a8 <_dtoa_r+0x650>
 800c2b6:	9f04      	ldr	r7, [sp, #16]
 800c2b8:	e73e      	b.n	800c138 <_dtoa_r+0x4e0>
 800c2ba:	4b9b      	ldr	r3, [pc, #620]	@ (800c528 <_dtoa_r+0x8d0>)
 800c2bc:	f7f4 f9f4 	bl	80006a8 <__aeabi_dmul>
 800c2c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2c4:	e7bc      	b.n	800c240 <_dtoa_r+0x5e8>
 800c2c6:	d10c      	bne.n	800c2e2 <_dtoa_r+0x68a>
 800c2c8:	4b98      	ldr	r3, [pc, #608]	@ (800c52c <_dtoa_r+0x8d4>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2d0:	f7f4 f9ea 	bl	80006a8 <__aeabi_dmul>
 800c2d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2d8:	f7f4 fc6c 	bl	8000bb4 <__aeabi_dcmpge>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	f000 8157 	beq.w	800c590 <_dtoa_r+0x938>
 800c2e2:	2400      	movs	r4, #0
 800c2e4:	4625      	mov	r5, r4
 800c2e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2e8:	43db      	mvns	r3, r3
 800c2ea:	9304      	str	r3, [sp, #16]
 800c2ec:	4656      	mov	r6, sl
 800c2ee:	2700      	movs	r7, #0
 800c2f0:	4621      	mov	r1, r4
 800c2f2:	4658      	mov	r0, fp
 800c2f4:	f000 fbb4 	bl	800ca60 <_Bfree>
 800c2f8:	2d00      	cmp	r5, #0
 800c2fa:	d0dc      	beq.n	800c2b6 <_dtoa_r+0x65e>
 800c2fc:	b12f      	cbz	r7, 800c30a <_dtoa_r+0x6b2>
 800c2fe:	42af      	cmp	r7, r5
 800c300:	d003      	beq.n	800c30a <_dtoa_r+0x6b2>
 800c302:	4639      	mov	r1, r7
 800c304:	4658      	mov	r0, fp
 800c306:	f000 fbab 	bl	800ca60 <_Bfree>
 800c30a:	4629      	mov	r1, r5
 800c30c:	4658      	mov	r0, fp
 800c30e:	f000 fba7 	bl	800ca60 <_Bfree>
 800c312:	e7d0      	b.n	800c2b6 <_dtoa_r+0x65e>
 800c314:	9704      	str	r7, [sp, #16]
 800c316:	4633      	mov	r3, r6
 800c318:	461e      	mov	r6, r3
 800c31a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c31e:	2a39      	cmp	r2, #57	@ 0x39
 800c320:	d107      	bne.n	800c332 <_dtoa_r+0x6da>
 800c322:	459a      	cmp	sl, r3
 800c324:	d1f8      	bne.n	800c318 <_dtoa_r+0x6c0>
 800c326:	9a04      	ldr	r2, [sp, #16]
 800c328:	3201      	adds	r2, #1
 800c32a:	9204      	str	r2, [sp, #16]
 800c32c:	2230      	movs	r2, #48	@ 0x30
 800c32e:	f88a 2000 	strb.w	r2, [sl]
 800c332:	781a      	ldrb	r2, [r3, #0]
 800c334:	3201      	adds	r2, #1
 800c336:	701a      	strb	r2, [r3, #0]
 800c338:	e7bd      	b.n	800c2b6 <_dtoa_r+0x65e>
 800c33a:	4b7b      	ldr	r3, [pc, #492]	@ (800c528 <_dtoa_r+0x8d0>)
 800c33c:	2200      	movs	r2, #0
 800c33e:	f7f4 f9b3 	bl	80006a8 <__aeabi_dmul>
 800c342:	2200      	movs	r2, #0
 800c344:	2300      	movs	r3, #0
 800c346:	4604      	mov	r4, r0
 800c348:	460d      	mov	r5, r1
 800c34a:	f7f4 fc15 	bl	8000b78 <__aeabi_dcmpeq>
 800c34e:	2800      	cmp	r0, #0
 800c350:	f43f aebb 	beq.w	800c0ca <_dtoa_r+0x472>
 800c354:	e6f0      	b.n	800c138 <_dtoa_r+0x4e0>
 800c356:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c358:	2a00      	cmp	r2, #0
 800c35a:	f000 80db 	beq.w	800c514 <_dtoa_r+0x8bc>
 800c35e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c360:	2a01      	cmp	r2, #1
 800c362:	f300 80bf 	bgt.w	800c4e4 <_dtoa_r+0x88c>
 800c366:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c368:	2a00      	cmp	r2, #0
 800c36a:	f000 80b7 	beq.w	800c4dc <_dtoa_r+0x884>
 800c36e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c372:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c374:	4646      	mov	r6, r8
 800c376:	9a08      	ldr	r2, [sp, #32]
 800c378:	2101      	movs	r1, #1
 800c37a:	441a      	add	r2, r3
 800c37c:	4658      	mov	r0, fp
 800c37e:	4498      	add	r8, r3
 800c380:	9208      	str	r2, [sp, #32]
 800c382:	f000 fc21 	bl	800cbc8 <__i2b>
 800c386:	4605      	mov	r5, r0
 800c388:	b15e      	cbz	r6, 800c3a2 <_dtoa_r+0x74a>
 800c38a:	9b08      	ldr	r3, [sp, #32]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	dd08      	ble.n	800c3a2 <_dtoa_r+0x74a>
 800c390:	42b3      	cmp	r3, r6
 800c392:	9a08      	ldr	r2, [sp, #32]
 800c394:	bfa8      	it	ge
 800c396:	4633      	movge	r3, r6
 800c398:	eba8 0803 	sub.w	r8, r8, r3
 800c39c:	1af6      	subs	r6, r6, r3
 800c39e:	1ad3      	subs	r3, r2, r3
 800c3a0:	9308      	str	r3, [sp, #32]
 800c3a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3a4:	b1f3      	cbz	r3, 800c3e4 <_dtoa_r+0x78c>
 800c3a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	f000 80b7 	beq.w	800c51c <_dtoa_r+0x8c4>
 800c3ae:	b18c      	cbz	r4, 800c3d4 <_dtoa_r+0x77c>
 800c3b0:	4629      	mov	r1, r5
 800c3b2:	4622      	mov	r2, r4
 800c3b4:	4658      	mov	r0, fp
 800c3b6:	f000 fcc7 	bl	800cd48 <__pow5mult>
 800c3ba:	464a      	mov	r2, r9
 800c3bc:	4601      	mov	r1, r0
 800c3be:	4605      	mov	r5, r0
 800c3c0:	4658      	mov	r0, fp
 800c3c2:	f000 fc17 	bl	800cbf4 <__multiply>
 800c3c6:	4649      	mov	r1, r9
 800c3c8:	9004      	str	r0, [sp, #16]
 800c3ca:	4658      	mov	r0, fp
 800c3cc:	f000 fb48 	bl	800ca60 <_Bfree>
 800c3d0:	9b04      	ldr	r3, [sp, #16]
 800c3d2:	4699      	mov	r9, r3
 800c3d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3d6:	1b1a      	subs	r2, r3, r4
 800c3d8:	d004      	beq.n	800c3e4 <_dtoa_r+0x78c>
 800c3da:	4649      	mov	r1, r9
 800c3dc:	4658      	mov	r0, fp
 800c3de:	f000 fcb3 	bl	800cd48 <__pow5mult>
 800c3e2:	4681      	mov	r9, r0
 800c3e4:	2101      	movs	r1, #1
 800c3e6:	4658      	mov	r0, fp
 800c3e8:	f000 fbee 	bl	800cbc8 <__i2b>
 800c3ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f000 81cf 	beq.w	800c794 <_dtoa_r+0xb3c>
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	4601      	mov	r1, r0
 800c3fa:	4658      	mov	r0, fp
 800c3fc:	f000 fca4 	bl	800cd48 <__pow5mult>
 800c400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c402:	2b01      	cmp	r3, #1
 800c404:	4604      	mov	r4, r0
 800c406:	f300 8095 	bgt.w	800c534 <_dtoa_r+0x8dc>
 800c40a:	9b02      	ldr	r3, [sp, #8]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f040 8087 	bne.w	800c520 <_dtoa_r+0x8c8>
 800c412:	9b03      	ldr	r3, [sp, #12]
 800c414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f040 8089 	bne.w	800c530 <_dtoa_r+0x8d8>
 800c41e:	9b03      	ldr	r3, [sp, #12]
 800c420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c424:	0d1b      	lsrs	r3, r3, #20
 800c426:	051b      	lsls	r3, r3, #20
 800c428:	b12b      	cbz	r3, 800c436 <_dtoa_r+0x7de>
 800c42a:	9b08      	ldr	r3, [sp, #32]
 800c42c:	3301      	adds	r3, #1
 800c42e:	9308      	str	r3, [sp, #32]
 800c430:	f108 0801 	add.w	r8, r8, #1
 800c434:	2301      	movs	r3, #1
 800c436:	930a      	str	r3, [sp, #40]	@ 0x28
 800c438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	f000 81b0 	beq.w	800c7a0 <_dtoa_r+0xb48>
 800c440:	6923      	ldr	r3, [r4, #16]
 800c442:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c446:	6918      	ldr	r0, [r3, #16]
 800c448:	f000 fb72 	bl	800cb30 <__hi0bits>
 800c44c:	f1c0 0020 	rsb	r0, r0, #32
 800c450:	9b08      	ldr	r3, [sp, #32]
 800c452:	4418      	add	r0, r3
 800c454:	f010 001f 	ands.w	r0, r0, #31
 800c458:	d077      	beq.n	800c54a <_dtoa_r+0x8f2>
 800c45a:	f1c0 0320 	rsb	r3, r0, #32
 800c45e:	2b04      	cmp	r3, #4
 800c460:	dd6b      	ble.n	800c53a <_dtoa_r+0x8e2>
 800c462:	9b08      	ldr	r3, [sp, #32]
 800c464:	f1c0 001c 	rsb	r0, r0, #28
 800c468:	4403      	add	r3, r0
 800c46a:	4480      	add	r8, r0
 800c46c:	4406      	add	r6, r0
 800c46e:	9308      	str	r3, [sp, #32]
 800c470:	f1b8 0f00 	cmp.w	r8, #0
 800c474:	dd05      	ble.n	800c482 <_dtoa_r+0x82a>
 800c476:	4649      	mov	r1, r9
 800c478:	4642      	mov	r2, r8
 800c47a:	4658      	mov	r0, fp
 800c47c:	f000 fcbe 	bl	800cdfc <__lshift>
 800c480:	4681      	mov	r9, r0
 800c482:	9b08      	ldr	r3, [sp, #32]
 800c484:	2b00      	cmp	r3, #0
 800c486:	dd05      	ble.n	800c494 <_dtoa_r+0x83c>
 800c488:	4621      	mov	r1, r4
 800c48a:	461a      	mov	r2, r3
 800c48c:	4658      	mov	r0, fp
 800c48e:	f000 fcb5 	bl	800cdfc <__lshift>
 800c492:	4604      	mov	r4, r0
 800c494:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c496:	2b00      	cmp	r3, #0
 800c498:	d059      	beq.n	800c54e <_dtoa_r+0x8f6>
 800c49a:	4621      	mov	r1, r4
 800c49c:	4648      	mov	r0, r9
 800c49e:	f000 fd19 	bl	800ced4 <__mcmp>
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	da53      	bge.n	800c54e <_dtoa_r+0x8f6>
 800c4a6:	1e7b      	subs	r3, r7, #1
 800c4a8:	9304      	str	r3, [sp, #16]
 800c4aa:	4649      	mov	r1, r9
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	220a      	movs	r2, #10
 800c4b0:	4658      	mov	r0, fp
 800c4b2:	f000 faf7 	bl	800caa4 <__multadd>
 800c4b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4b8:	4681      	mov	r9, r0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f000 8172 	beq.w	800c7a4 <_dtoa_r+0xb4c>
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	4629      	mov	r1, r5
 800c4c4:	220a      	movs	r2, #10
 800c4c6:	4658      	mov	r0, fp
 800c4c8:	f000 faec 	bl	800caa4 <__multadd>
 800c4cc:	9b00      	ldr	r3, [sp, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	4605      	mov	r5, r0
 800c4d2:	dc67      	bgt.n	800c5a4 <_dtoa_r+0x94c>
 800c4d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	dc41      	bgt.n	800c55e <_dtoa_r+0x906>
 800c4da:	e063      	b.n	800c5a4 <_dtoa_r+0x94c>
 800c4dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c4de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c4e2:	e746      	b.n	800c372 <_dtoa_r+0x71a>
 800c4e4:	9b07      	ldr	r3, [sp, #28]
 800c4e6:	1e5c      	subs	r4, r3, #1
 800c4e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4ea:	42a3      	cmp	r3, r4
 800c4ec:	bfbf      	itttt	lt
 800c4ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c4f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c4f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c4f4:	1ae3      	sublt	r3, r4, r3
 800c4f6:	bfb4      	ite	lt
 800c4f8:	18d2      	addlt	r2, r2, r3
 800c4fa:	1b1c      	subge	r4, r3, r4
 800c4fc:	9b07      	ldr	r3, [sp, #28]
 800c4fe:	bfbc      	itt	lt
 800c500:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c502:	2400      	movlt	r4, #0
 800c504:	2b00      	cmp	r3, #0
 800c506:	bfb5      	itete	lt
 800c508:	eba8 0603 	sublt.w	r6, r8, r3
 800c50c:	9b07      	ldrge	r3, [sp, #28]
 800c50e:	2300      	movlt	r3, #0
 800c510:	4646      	movge	r6, r8
 800c512:	e730      	b.n	800c376 <_dtoa_r+0x71e>
 800c514:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c516:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c518:	4646      	mov	r6, r8
 800c51a:	e735      	b.n	800c388 <_dtoa_r+0x730>
 800c51c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c51e:	e75c      	b.n	800c3da <_dtoa_r+0x782>
 800c520:	2300      	movs	r3, #0
 800c522:	e788      	b.n	800c436 <_dtoa_r+0x7de>
 800c524:	3fe00000 	.word	0x3fe00000
 800c528:	40240000 	.word	0x40240000
 800c52c:	40140000 	.word	0x40140000
 800c530:	9b02      	ldr	r3, [sp, #8]
 800c532:	e780      	b.n	800c436 <_dtoa_r+0x7de>
 800c534:	2300      	movs	r3, #0
 800c536:	930a      	str	r3, [sp, #40]	@ 0x28
 800c538:	e782      	b.n	800c440 <_dtoa_r+0x7e8>
 800c53a:	d099      	beq.n	800c470 <_dtoa_r+0x818>
 800c53c:	9a08      	ldr	r2, [sp, #32]
 800c53e:	331c      	adds	r3, #28
 800c540:	441a      	add	r2, r3
 800c542:	4498      	add	r8, r3
 800c544:	441e      	add	r6, r3
 800c546:	9208      	str	r2, [sp, #32]
 800c548:	e792      	b.n	800c470 <_dtoa_r+0x818>
 800c54a:	4603      	mov	r3, r0
 800c54c:	e7f6      	b.n	800c53c <_dtoa_r+0x8e4>
 800c54e:	9b07      	ldr	r3, [sp, #28]
 800c550:	9704      	str	r7, [sp, #16]
 800c552:	2b00      	cmp	r3, #0
 800c554:	dc20      	bgt.n	800c598 <_dtoa_r+0x940>
 800c556:	9300      	str	r3, [sp, #0]
 800c558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c55a:	2b02      	cmp	r3, #2
 800c55c:	dd1e      	ble.n	800c59c <_dtoa_r+0x944>
 800c55e:	9b00      	ldr	r3, [sp, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	f47f aec0 	bne.w	800c2e6 <_dtoa_r+0x68e>
 800c566:	4621      	mov	r1, r4
 800c568:	2205      	movs	r2, #5
 800c56a:	4658      	mov	r0, fp
 800c56c:	f000 fa9a 	bl	800caa4 <__multadd>
 800c570:	4601      	mov	r1, r0
 800c572:	4604      	mov	r4, r0
 800c574:	4648      	mov	r0, r9
 800c576:	f000 fcad 	bl	800ced4 <__mcmp>
 800c57a:	2800      	cmp	r0, #0
 800c57c:	f77f aeb3 	ble.w	800c2e6 <_dtoa_r+0x68e>
 800c580:	4656      	mov	r6, sl
 800c582:	2331      	movs	r3, #49	@ 0x31
 800c584:	f806 3b01 	strb.w	r3, [r6], #1
 800c588:	9b04      	ldr	r3, [sp, #16]
 800c58a:	3301      	adds	r3, #1
 800c58c:	9304      	str	r3, [sp, #16]
 800c58e:	e6ae      	b.n	800c2ee <_dtoa_r+0x696>
 800c590:	9c07      	ldr	r4, [sp, #28]
 800c592:	9704      	str	r7, [sp, #16]
 800c594:	4625      	mov	r5, r4
 800c596:	e7f3      	b.n	800c580 <_dtoa_r+0x928>
 800c598:	9b07      	ldr	r3, [sp, #28]
 800c59a:	9300      	str	r3, [sp, #0]
 800c59c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f000 8104 	beq.w	800c7ac <_dtoa_r+0xb54>
 800c5a4:	2e00      	cmp	r6, #0
 800c5a6:	dd05      	ble.n	800c5b4 <_dtoa_r+0x95c>
 800c5a8:	4629      	mov	r1, r5
 800c5aa:	4632      	mov	r2, r6
 800c5ac:	4658      	mov	r0, fp
 800c5ae:	f000 fc25 	bl	800cdfc <__lshift>
 800c5b2:	4605      	mov	r5, r0
 800c5b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d05a      	beq.n	800c670 <_dtoa_r+0xa18>
 800c5ba:	6869      	ldr	r1, [r5, #4]
 800c5bc:	4658      	mov	r0, fp
 800c5be:	f000 fa0f 	bl	800c9e0 <_Balloc>
 800c5c2:	4606      	mov	r6, r0
 800c5c4:	b928      	cbnz	r0, 800c5d2 <_dtoa_r+0x97a>
 800c5c6:	4b84      	ldr	r3, [pc, #528]	@ (800c7d8 <_dtoa_r+0xb80>)
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c5ce:	f7ff bb5a 	b.w	800bc86 <_dtoa_r+0x2e>
 800c5d2:	692a      	ldr	r2, [r5, #16]
 800c5d4:	3202      	adds	r2, #2
 800c5d6:	0092      	lsls	r2, r2, #2
 800c5d8:	f105 010c 	add.w	r1, r5, #12
 800c5dc:	300c      	adds	r0, #12
 800c5de:	f7ff fa84 	bl	800baea <memcpy>
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	4631      	mov	r1, r6
 800c5e6:	4658      	mov	r0, fp
 800c5e8:	f000 fc08 	bl	800cdfc <__lshift>
 800c5ec:	f10a 0301 	add.w	r3, sl, #1
 800c5f0:	9307      	str	r3, [sp, #28]
 800c5f2:	9b00      	ldr	r3, [sp, #0]
 800c5f4:	4453      	add	r3, sl
 800c5f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5f8:	9b02      	ldr	r3, [sp, #8]
 800c5fa:	f003 0301 	and.w	r3, r3, #1
 800c5fe:	462f      	mov	r7, r5
 800c600:	930a      	str	r3, [sp, #40]	@ 0x28
 800c602:	4605      	mov	r5, r0
 800c604:	9b07      	ldr	r3, [sp, #28]
 800c606:	4621      	mov	r1, r4
 800c608:	3b01      	subs	r3, #1
 800c60a:	4648      	mov	r0, r9
 800c60c:	9300      	str	r3, [sp, #0]
 800c60e:	f7ff fa99 	bl	800bb44 <quorem>
 800c612:	4639      	mov	r1, r7
 800c614:	9002      	str	r0, [sp, #8]
 800c616:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c61a:	4648      	mov	r0, r9
 800c61c:	f000 fc5a 	bl	800ced4 <__mcmp>
 800c620:	462a      	mov	r2, r5
 800c622:	9008      	str	r0, [sp, #32]
 800c624:	4621      	mov	r1, r4
 800c626:	4658      	mov	r0, fp
 800c628:	f000 fc70 	bl	800cf0c <__mdiff>
 800c62c:	68c2      	ldr	r2, [r0, #12]
 800c62e:	4606      	mov	r6, r0
 800c630:	bb02      	cbnz	r2, 800c674 <_dtoa_r+0xa1c>
 800c632:	4601      	mov	r1, r0
 800c634:	4648      	mov	r0, r9
 800c636:	f000 fc4d 	bl	800ced4 <__mcmp>
 800c63a:	4602      	mov	r2, r0
 800c63c:	4631      	mov	r1, r6
 800c63e:	4658      	mov	r0, fp
 800c640:	920e      	str	r2, [sp, #56]	@ 0x38
 800c642:	f000 fa0d 	bl	800ca60 <_Bfree>
 800c646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c648:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c64a:	9e07      	ldr	r6, [sp, #28]
 800c64c:	ea43 0102 	orr.w	r1, r3, r2
 800c650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c652:	4319      	orrs	r1, r3
 800c654:	d110      	bne.n	800c678 <_dtoa_r+0xa20>
 800c656:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c65a:	d029      	beq.n	800c6b0 <_dtoa_r+0xa58>
 800c65c:	9b08      	ldr	r3, [sp, #32]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	dd02      	ble.n	800c668 <_dtoa_r+0xa10>
 800c662:	9b02      	ldr	r3, [sp, #8]
 800c664:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c668:	9b00      	ldr	r3, [sp, #0]
 800c66a:	f883 8000 	strb.w	r8, [r3]
 800c66e:	e63f      	b.n	800c2f0 <_dtoa_r+0x698>
 800c670:	4628      	mov	r0, r5
 800c672:	e7bb      	b.n	800c5ec <_dtoa_r+0x994>
 800c674:	2201      	movs	r2, #1
 800c676:	e7e1      	b.n	800c63c <_dtoa_r+0x9e4>
 800c678:	9b08      	ldr	r3, [sp, #32]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	db04      	blt.n	800c688 <_dtoa_r+0xa30>
 800c67e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c680:	430b      	orrs	r3, r1
 800c682:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c684:	430b      	orrs	r3, r1
 800c686:	d120      	bne.n	800c6ca <_dtoa_r+0xa72>
 800c688:	2a00      	cmp	r2, #0
 800c68a:	dded      	ble.n	800c668 <_dtoa_r+0xa10>
 800c68c:	4649      	mov	r1, r9
 800c68e:	2201      	movs	r2, #1
 800c690:	4658      	mov	r0, fp
 800c692:	f000 fbb3 	bl	800cdfc <__lshift>
 800c696:	4621      	mov	r1, r4
 800c698:	4681      	mov	r9, r0
 800c69a:	f000 fc1b 	bl	800ced4 <__mcmp>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	dc03      	bgt.n	800c6aa <_dtoa_r+0xa52>
 800c6a2:	d1e1      	bne.n	800c668 <_dtoa_r+0xa10>
 800c6a4:	f018 0f01 	tst.w	r8, #1
 800c6a8:	d0de      	beq.n	800c668 <_dtoa_r+0xa10>
 800c6aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c6ae:	d1d8      	bne.n	800c662 <_dtoa_r+0xa0a>
 800c6b0:	9a00      	ldr	r2, [sp, #0]
 800c6b2:	2339      	movs	r3, #57	@ 0x39
 800c6b4:	7013      	strb	r3, [r2, #0]
 800c6b6:	4633      	mov	r3, r6
 800c6b8:	461e      	mov	r6, r3
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c6c0:	2a39      	cmp	r2, #57	@ 0x39
 800c6c2:	d052      	beq.n	800c76a <_dtoa_r+0xb12>
 800c6c4:	3201      	adds	r2, #1
 800c6c6:	701a      	strb	r2, [r3, #0]
 800c6c8:	e612      	b.n	800c2f0 <_dtoa_r+0x698>
 800c6ca:	2a00      	cmp	r2, #0
 800c6cc:	dd07      	ble.n	800c6de <_dtoa_r+0xa86>
 800c6ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c6d2:	d0ed      	beq.n	800c6b0 <_dtoa_r+0xa58>
 800c6d4:	9a00      	ldr	r2, [sp, #0]
 800c6d6:	f108 0301 	add.w	r3, r8, #1
 800c6da:	7013      	strb	r3, [r2, #0]
 800c6dc:	e608      	b.n	800c2f0 <_dtoa_r+0x698>
 800c6de:	9b07      	ldr	r3, [sp, #28]
 800c6e0:	9a07      	ldr	r2, [sp, #28]
 800c6e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c6e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d028      	beq.n	800c73e <_dtoa_r+0xae6>
 800c6ec:	4649      	mov	r1, r9
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	220a      	movs	r2, #10
 800c6f2:	4658      	mov	r0, fp
 800c6f4:	f000 f9d6 	bl	800caa4 <__multadd>
 800c6f8:	42af      	cmp	r7, r5
 800c6fa:	4681      	mov	r9, r0
 800c6fc:	f04f 0300 	mov.w	r3, #0
 800c700:	f04f 020a 	mov.w	r2, #10
 800c704:	4639      	mov	r1, r7
 800c706:	4658      	mov	r0, fp
 800c708:	d107      	bne.n	800c71a <_dtoa_r+0xac2>
 800c70a:	f000 f9cb 	bl	800caa4 <__multadd>
 800c70e:	4607      	mov	r7, r0
 800c710:	4605      	mov	r5, r0
 800c712:	9b07      	ldr	r3, [sp, #28]
 800c714:	3301      	adds	r3, #1
 800c716:	9307      	str	r3, [sp, #28]
 800c718:	e774      	b.n	800c604 <_dtoa_r+0x9ac>
 800c71a:	f000 f9c3 	bl	800caa4 <__multadd>
 800c71e:	4629      	mov	r1, r5
 800c720:	4607      	mov	r7, r0
 800c722:	2300      	movs	r3, #0
 800c724:	220a      	movs	r2, #10
 800c726:	4658      	mov	r0, fp
 800c728:	f000 f9bc 	bl	800caa4 <__multadd>
 800c72c:	4605      	mov	r5, r0
 800c72e:	e7f0      	b.n	800c712 <_dtoa_r+0xaba>
 800c730:	9b00      	ldr	r3, [sp, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	bfcc      	ite	gt
 800c736:	461e      	movgt	r6, r3
 800c738:	2601      	movle	r6, #1
 800c73a:	4456      	add	r6, sl
 800c73c:	2700      	movs	r7, #0
 800c73e:	4649      	mov	r1, r9
 800c740:	2201      	movs	r2, #1
 800c742:	4658      	mov	r0, fp
 800c744:	f000 fb5a 	bl	800cdfc <__lshift>
 800c748:	4621      	mov	r1, r4
 800c74a:	4681      	mov	r9, r0
 800c74c:	f000 fbc2 	bl	800ced4 <__mcmp>
 800c750:	2800      	cmp	r0, #0
 800c752:	dcb0      	bgt.n	800c6b6 <_dtoa_r+0xa5e>
 800c754:	d102      	bne.n	800c75c <_dtoa_r+0xb04>
 800c756:	f018 0f01 	tst.w	r8, #1
 800c75a:	d1ac      	bne.n	800c6b6 <_dtoa_r+0xa5e>
 800c75c:	4633      	mov	r3, r6
 800c75e:	461e      	mov	r6, r3
 800c760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c764:	2a30      	cmp	r2, #48	@ 0x30
 800c766:	d0fa      	beq.n	800c75e <_dtoa_r+0xb06>
 800c768:	e5c2      	b.n	800c2f0 <_dtoa_r+0x698>
 800c76a:	459a      	cmp	sl, r3
 800c76c:	d1a4      	bne.n	800c6b8 <_dtoa_r+0xa60>
 800c76e:	9b04      	ldr	r3, [sp, #16]
 800c770:	3301      	adds	r3, #1
 800c772:	9304      	str	r3, [sp, #16]
 800c774:	2331      	movs	r3, #49	@ 0x31
 800c776:	f88a 3000 	strb.w	r3, [sl]
 800c77a:	e5b9      	b.n	800c2f0 <_dtoa_r+0x698>
 800c77c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c77e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c7dc <_dtoa_r+0xb84>
 800c782:	b11b      	cbz	r3, 800c78c <_dtoa_r+0xb34>
 800c784:	f10a 0308 	add.w	r3, sl, #8
 800c788:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c78a:	6013      	str	r3, [r2, #0]
 800c78c:	4650      	mov	r0, sl
 800c78e:	b019      	add	sp, #100	@ 0x64
 800c790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c796:	2b01      	cmp	r3, #1
 800c798:	f77f ae37 	ble.w	800c40a <_dtoa_r+0x7b2>
 800c79c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c79e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7a0:	2001      	movs	r0, #1
 800c7a2:	e655      	b.n	800c450 <_dtoa_r+0x7f8>
 800c7a4:	9b00      	ldr	r3, [sp, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f77f aed6 	ble.w	800c558 <_dtoa_r+0x900>
 800c7ac:	4656      	mov	r6, sl
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	4648      	mov	r0, r9
 800c7b2:	f7ff f9c7 	bl	800bb44 <quorem>
 800c7b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c7ba:	f806 8b01 	strb.w	r8, [r6], #1
 800c7be:	9b00      	ldr	r3, [sp, #0]
 800c7c0:	eba6 020a 	sub.w	r2, r6, sl
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	ddb3      	ble.n	800c730 <_dtoa_r+0xad8>
 800c7c8:	4649      	mov	r1, r9
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	220a      	movs	r2, #10
 800c7ce:	4658      	mov	r0, fp
 800c7d0:	f000 f968 	bl	800caa4 <__multadd>
 800c7d4:	4681      	mov	r9, r0
 800c7d6:	e7ea      	b.n	800c7ae <_dtoa_r+0xb56>
 800c7d8:	0800e296 	.word	0x0800e296
 800c7dc:	0800e21a 	.word	0x0800e21a

0800c7e0 <_free_r>:
 800c7e0:	b538      	push	{r3, r4, r5, lr}
 800c7e2:	4605      	mov	r5, r0
 800c7e4:	2900      	cmp	r1, #0
 800c7e6:	d041      	beq.n	800c86c <_free_r+0x8c>
 800c7e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7ec:	1f0c      	subs	r4, r1, #4
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	bfb8      	it	lt
 800c7f2:	18e4      	addlt	r4, r4, r3
 800c7f4:	f000 f8e8 	bl	800c9c8 <__malloc_lock>
 800c7f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c870 <_free_r+0x90>)
 800c7fa:	6813      	ldr	r3, [r2, #0]
 800c7fc:	b933      	cbnz	r3, 800c80c <_free_r+0x2c>
 800c7fe:	6063      	str	r3, [r4, #4]
 800c800:	6014      	str	r4, [r2, #0]
 800c802:	4628      	mov	r0, r5
 800c804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c808:	f000 b8e4 	b.w	800c9d4 <__malloc_unlock>
 800c80c:	42a3      	cmp	r3, r4
 800c80e:	d908      	bls.n	800c822 <_free_r+0x42>
 800c810:	6820      	ldr	r0, [r4, #0]
 800c812:	1821      	adds	r1, r4, r0
 800c814:	428b      	cmp	r3, r1
 800c816:	bf01      	itttt	eq
 800c818:	6819      	ldreq	r1, [r3, #0]
 800c81a:	685b      	ldreq	r3, [r3, #4]
 800c81c:	1809      	addeq	r1, r1, r0
 800c81e:	6021      	streq	r1, [r4, #0]
 800c820:	e7ed      	b.n	800c7fe <_free_r+0x1e>
 800c822:	461a      	mov	r2, r3
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	b10b      	cbz	r3, 800c82c <_free_r+0x4c>
 800c828:	42a3      	cmp	r3, r4
 800c82a:	d9fa      	bls.n	800c822 <_free_r+0x42>
 800c82c:	6811      	ldr	r1, [r2, #0]
 800c82e:	1850      	adds	r0, r2, r1
 800c830:	42a0      	cmp	r0, r4
 800c832:	d10b      	bne.n	800c84c <_free_r+0x6c>
 800c834:	6820      	ldr	r0, [r4, #0]
 800c836:	4401      	add	r1, r0
 800c838:	1850      	adds	r0, r2, r1
 800c83a:	4283      	cmp	r3, r0
 800c83c:	6011      	str	r1, [r2, #0]
 800c83e:	d1e0      	bne.n	800c802 <_free_r+0x22>
 800c840:	6818      	ldr	r0, [r3, #0]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	6053      	str	r3, [r2, #4]
 800c846:	4408      	add	r0, r1
 800c848:	6010      	str	r0, [r2, #0]
 800c84a:	e7da      	b.n	800c802 <_free_r+0x22>
 800c84c:	d902      	bls.n	800c854 <_free_r+0x74>
 800c84e:	230c      	movs	r3, #12
 800c850:	602b      	str	r3, [r5, #0]
 800c852:	e7d6      	b.n	800c802 <_free_r+0x22>
 800c854:	6820      	ldr	r0, [r4, #0]
 800c856:	1821      	adds	r1, r4, r0
 800c858:	428b      	cmp	r3, r1
 800c85a:	bf04      	itt	eq
 800c85c:	6819      	ldreq	r1, [r3, #0]
 800c85e:	685b      	ldreq	r3, [r3, #4]
 800c860:	6063      	str	r3, [r4, #4]
 800c862:	bf04      	itt	eq
 800c864:	1809      	addeq	r1, r1, r0
 800c866:	6021      	streq	r1, [r4, #0]
 800c868:	6054      	str	r4, [r2, #4]
 800c86a:	e7ca      	b.n	800c802 <_free_r+0x22>
 800c86c:	bd38      	pop	{r3, r4, r5, pc}
 800c86e:	bf00      	nop
 800c870:	20006644 	.word	0x20006644

0800c874 <malloc>:
 800c874:	4b02      	ldr	r3, [pc, #8]	@ (800c880 <malloc+0xc>)
 800c876:	4601      	mov	r1, r0
 800c878:	6818      	ldr	r0, [r3, #0]
 800c87a:	f000 b825 	b.w	800c8c8 <_malloc_r>
 800c87e:	bf00      	nop
 800c880:	2000018c 	.word	0x2000018c

0800c884 <sbrk_aligned>:
 800c884:	b570      	push	{r4, r5, r6, lr}
 800c886:	4e0f      	ldr	r6, [pc, #60]	@ (800c8c4 <sbrk_aligned+0x40>)
 800c888:	460c      	mov	r4, r1
 800c88a:	6831      	ldr	r1, [r6, #0]
 800c88c:	4605      	mov	r5, r0
 800c88e:	b911      	cbnz	r1, 800c896 <sbrk_aligned+0x12>
 800c890:	f000 fedc 	bl	800d64c <_sbrk_r>
 800c894:	6030      	str	r0, [r6, #0]
 800c896:	4621      	mov	r1, r4
 800c898:	4628      	mov	r0, r5
 800c89a:	f000 fed7 	bl	800d64c <_sbrk_r>
 800c89e:	1c43      	adds	r3, r0, #1
 800c8a0:	d103      	bne.n	800c8aa <sbrk_aligned+0x26>
 800c8a2:	f04f 34ff 	mov.w	r4, #4294967295
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	bd70      	pop	{r4, r5, r6, pc}
 800c8aa:	1cc4      	adds	r4, r0, #3
 800c8ac:	f024 0403 	bic.w	r4, r4, #3
 800c8b0:	42a0      	cmp	r0, r4
 800c8b2:	d0f8      	beq.n	800c8a6 <sbrk_aligned+0x22>
 800c8b4:	1a21      	subs	r1, r4, r0
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	f000 fec8 	bl	800d64c <_sbrk_r>
 800c8bc:	3001      	adds	r0, #1
 800c8be:	d1f2      	bne.n	800c8a6 <sbrk_aligned+0x22>
 800c8c0:	e7ef      	b.n	800c8a2 <sbrk_aligned+0x1e>
 800c8c2:	bf00      	nop
 800c8c4:	20006640 	.word	0x20006640

0800c8c8 <_malloc_r>:
 800c8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8cc:	1ccd      	adds	r5, r1, #3
 800c8ce:	f025 0503 	bic.w	r5, r5, #3
 800c8d2:	3508      	adds	r5, #8
 800c8d4:	2d0c      	cmp	r5, #12
 800c8d6:	bf38      	it	cc
 800c8d8:	250c      	movcc	r5, #12
 800c8da:	2d00      	cmp	r5, #0
 800c8dc:	4606      	mov	r6, r0
 800c8de:	db01      	blt.n	800c8e4 <_malloc_r+0x1c>
 800c8e0:	42a9      	cmp	r1, r5
 800c8e2:	d904      	bls.n	800c8ee <_malloc_r+0x26>
 800c8e4:	230c      	movs	r3, #12
 800c8e6:	6033      	str	r3, [r6, #0]
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c9c4 <_malloc_r+0xfc>
 800c8f2:	f000 f869 	bl	800c9c8 <__malloc_lock>
 800c8f6:	f8d8 3000 	ldr.w	r3, [r8]
 800c8fa:	461c      	mov	r4, r3
 800c8fc:	bb44      	cbnz	r4, 800c950 <_malloc_r+0x88>
 800c8fe:	4629      	mov	r1, r5
 800c900:	4630      	mov	r0, r6
 800c902:	f7ff ffbf 	bl	800c884 <sbrk_aligned>
 800c906:	1c43      	adds	r3, r0, #1
 800c908:	4604      	mov	r4, r0
 800c90a:	d158      	bne.n	800c9be <_malloc_r+0xf6>
 800c90c:	f8d8 4000 	ldr.w	r4, [r8]
 800c910:	4627      	mov	r7, r4
 800c912:	2f00      	cmp	r7, #0
 800c914:	d143      	bne.n	800c99e <_malloc_r+0xd6>
 800c916:	2c00      	cmp	r4, #0
 800c918:	d04b      	beq.n	800c9b2 <_malloc_r+0xea>
 800c91a:	6823      	ldr	r3, [r4, #0]
 800c91c:	4639      	mov	r1, r7
 800c91e:	4630      	mov	r0, r6
 800c920:	eb04 0903 	add.w	r9, r4, r3
 800c924:	f000 fe92 	bl	800d64c <_sbrk_r>
 800c928:	4581      	cmp	r9, r0
 800c92a:	d142      	bne.n	800c9b2 <_malloc_r+0xea>
 800c92c:	6821      	ldr	r1, [r4, #0]
 800c92e:	1a6d      	subs	r5, r5, r1
 800c930:	4629      	mov	r1, r5
 800c932:	4630      	mov	r0, r6
 800c934:	f7ff ffa6 	bl	800c884 <sbrk_aligned>
 800c938:	3001      	adds	r0, #1
 800c93a:	d03a      	beq.n	800c9b2 <_malloc_r+0xea>
 800c93c:	6823      	ldr	r3, [r4, #0]
 800c93e:	442b      	add	r3, r5
 800c940:	6023      	str	r3, [r4, #0]
 800c942:	f8d8 3000 	ldr.w	r3, [r8]
 800c946:	685a      	ldr	r2, [r3, #4]
 800c948:	bb62      	cbnz	r2, 800c9a4 <_malloc_r+0xdc>
 800c94a:	f8c8 7000 	str.w	r7, [r8]
 800c94e:	e00f      	b.n	800c970 <_malloc_r+0xa8>
 800c950:	6822      	ldr	r2, [r4, #0]
 800c952:	1b52      	subs	r2, r2, r5
 800c954:	d420      	bmi.n	800c998 <_malloc_r+0xd0>
 800c956:	2a0b      	cmp	r2, #11
 800c958:	d917      	bls.n	800c98a <_malloc_r+0xc2>
 800c95a:	1961      	adds	r1, r4, r5
 800c95c:	42a3      	cmp	r3, r4
 800c95e:	6025      	str	r5, [r4, #0]
 800c960:	bf18      	it	ne
 800c962:	6059      	strne	r1, [r3, #4]
 800c964:	6863      	ldr	r3, [r4, #4]
 800c966:	bf08      	it	eq
 800c968:	f8c8 1000 	streq.w	r1, [r8]
 800c96c:	5162      	str	r2, [r4, r5]
 800c96e:	604b      	str	r3, [r1, #4]
 800c970:	4630      	mov	r0, r6
 800c972:	f000 f82f 	bl	800c9d4 <__malloc_unlock>
 800c976:	f104 000b 	add.w	r0, r4, #11
 800c97a:	1d23      	adds	r3, r4, #4
 800c97c:	f020 0007 	bic.w	r0, r0, #7
 800c980:	1ac2      	subs	r2, r0, r3
 800c982:	bf1c      	itt	ne
 800c984:	1a1b      	subne	r3, r3, r0
 800c986:	50a3      	strne	r3, [r4, r2]
 800c988:	e7af      	b.n	800c8ea <_malloc_r+0x22>
 800c98a:	6862      	ldr	r2, [r4, #4]
 800c98c:	42a3      	cmp	r3, r4
 800c98e:	bf0c      	ite	eq
 800c990:	f8c8 2000 	streq.w	r2, [r8]
 800c994:	605a      	strne	r2, [r3, #4]
 800c996:	e7eb      	b.n	800c970 <_malloc_r+0xa8>
 800c998:	4623      	mov	r3, r4
 800c99a:	6864      	ldr	r4, [r4, #4]
 800c99c:	e7ae      	b.n	800c8fc <_malloc_r+0x34>
 800c99e:	463c      	mov	r4, r7
 800c9a0:	687f      	ldr	r7, [r7, #4]
 800c9a2:	e7b6      	b.n	800c912 <_malloc_r+0x4a>
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	42a3      	cmp	r3, r4
 800c9aa:	d1fb      	bne.n	800c9a4 <_malloc_r+0xdc>
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	6053      	str	r3, [r2, #4]
 800c9b0:	e7de      	b.n	800c970 <_malloc_r+0xa8>
 800c9b2:	230c      	movs	r3, #12
 800c9b4:	6033      	str	r3, [r6, #0]
 800c9b6:	4630      	mov	r0, r6
 800c9b8:	f000 f80c 	bl	800c9d4 <__malloc_unlock>
 800c9bc:	e794      	b.n	800c8e8 <_malloc_r+0x20>
 800c9be:	6005      	str	r5, [r0, #0]
 800c9c0:	e7d6      	b.n	800c970 <_malloc_r+0xa8>
 800c9c2:	bf00      	nop
 800c9c4:	20006644 	.word	0x20006644

0800c9c8 <__malloc_lock>:
 800c9c8:	4801      	ldr	r0, [pc, #4]	@ (800c9d0 <__malloc_lock+0x8>)
 800c9ca:	f7ff b88c 	b.w	800bae6 <__retarget_lock_acquire_recursive>
 800c9ce:	bf00      	nop
 800c9d0:	2000663c 	.word	0x2000663c

0800c9d4 <__malloc_unlock>:
 800c9d4:	4801      	ldr	r0, [pc, #4]	@ (800c9dc <__malloc_unlock+0x8>)
 800c9d6:	f7ff b887 	b.w	800bae8 <__retarget_lock_release_recursive>
 800c9da:	bf00      	nop
 800c9dc:	2000663c 	.word	0x2000663c

0800c9e0 <_Balloc>:
 800c9e0:	b570      	push	{r4, r5, r6, lr}
 800c9e2:	69c6      	ldr	r6, [r0, #28]
 800c9e4:	4604      	mov	r4, r0
 800c9e6:	460d      	mov	r5, r1
 800c9e8:	b976      	cbnz	r6, 800ca08 <_Balloc+0x28>
 800c9ea:	2010      	movs	r0, #16
 800c9ec:	f7ff ff42 	bl	800c874 <malloc>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	61e0      	str	r0, [r4, #28]
 800c9f4:	b920      	cbnz	r0, 800ca00 <_Balloc+0x20>
 800c9f6:	4b18      	ldr	r3, [pc, #96]	@ (800ca58 <_Balloc+0x78>)
 800c9f8:	4818      	ldr	r0, [pc, #96]	@ (800ca5c <_Balloc+0x7c>)
 800c9fa:	216b      	movs	r1, #107	@ 0x6b
 800c9fc:	f7ff f884 	bl	800bb08 <__assert_func>
 800ca00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca04:	6006      	str	r6, [r0, #0]
 800ca06:	60c6      	str	r6, [r0, #12]
 800ca08:	69e6      	ldr	r6, [r4, #28]
 800ca0a:	68f3      	ldr	r3, [r6, #12]
 800ca0c:	b183      	cbz	r3, 800ca30 <_Balloc+0x50>
 800ca0e:	69e3      	ldr	r3, [r4, #28]
 800ca10:	68db      	ldr	r3, [r3, #12]
 800ca12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca16:	b9b8      	cbnz	r0, 800ca48 <_Balloc+0x68>
 800ca18:	2101      	movs	r1, #1
 800ca1a:	fa01 f605 	lsl.w	r6, r1, r5
 800ca1e:	1d72      	adds	r2, r6, #5
 800ca20:	0092      	lsls	r2, r2, #2
 800ca22:	4620      	mov	r0, r4
 800ca24:	f000 fe29 	bl	800d67a <_calloc_r>
 800ca28:	b160      	cbz	r0, 800ca44 <_Balloc+0x64>
 800ca2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca2e:	e00e      	b.n	800ca4e <_Balloc+0x6e>
 800ca30:	2221      	movs	r2, #33	@ 0x21
 800ca32:	2104      	movs	r1, #4
 800ca34:	4620      	mov	r0, r4
 800ca36:	f000 fe20 	bl	800d67a <_calloc_r>
 800ca3a:	69e3      	ldr	r3, [r4, #28]
 800ca3c:	60f0      	str	r0, [r6, #12]
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d1e4      	bne.n	800ca0e <_Balloc+0x2e>
 800ca44:	2000      	movs	r0, #0
 800ca46:	bd70      	pop	{r4, r5, r6, pc}
 800ca48:	6802      	ldr	r2, [r0, #0]
 800ca4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca4e:	2300      	movs	r3, #0
 800ca50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca54:	e7f7      	b.n	800ca46 <_Balloc+0x66>
 800ca56:	bf00      	nop
 800ca58:	0800e227 	.word	0x0800e227
 800ca5c:	0800e2a7 	.word	0x0800e2a7

0800ca60 <_Bfree>:
 800ca60:	b570      	push	{r4, r5, r6, lr}
 800ca62:	69c6      	ldr	r6, [r0, #28]
 800ca64:	4605      	mov	r5, r0
 800ca66:	460c      	mov	r4, r1
 800ca68:	b976      	cbnz	r6, 800ca88 <_Bfree+0x28>
 800ca6a:	2010      	movs	r0, #16
 800ca6c:	f7ff ff02 	bl	800c874 <malloc>
 800ca70:	4602      	mov	r2, r0
 800ca72:	61e8      	str	r0, [r5, #28]
 800ca74:	b920      	cbnz	r0, 800ca80 <_Bfree+0x20>
 800ca76:	4b09      	ldr	r3, [pc, #36]	@ (800ca9c <_Bfree+0x3c>)
 800ca78:	4809      	ldr	r0, [pc, #36]	@ (800caa0 <_Bfree+0x40>)
 800ca7a:	218f      	movs	r1, #143	@ 0x8f
 800ca7c:	f7ff f844 	bl	800bb08 <__assert_func>
 800ca80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca84:	6006      	str	r6, [r0, #0]
 800ca86:	60c6      	str	r6, [r0, #12]
 800ca88:	b13c      	cbz	r4, 800ca9a <_Bfree+0x3a>
 800ca8a:	69eb      	ldr	r3, [r5, #28]
 800ca8c:	6862      	ldr	r2, [r4, #4]
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca94:	6021      	str	r1, [r4, #0]
 800ca96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca9a:	bd70      	pop	{r4, r5, r6, pc}
 800ca9c:	0800e227 	.word	0x0800e227
 800caa0:	0800e2a7 	.word	0x0800e2a7

0800caa4 <__multadd>:
 800caa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa8:	690d      	ldr	r5, [r1, #16]
 800caaa:	4607      	mov	r7, r0
 800caac:	460c      	mov	r4, r1
 800caae:	461e      	mov	r6, r3
 800cab0:	f101 0c14 	add.w	ip, r1, #20
 800cab4:	2000      	movs	r0, #0
 800cab6:	f8dc 3000 	ldr.w	r3, [ip]
 800caba:	b299      	uxth	r1, r3
 800cabc:	fb02 6101 	mla	r1, r2, r1, r6
 800cac0:	0c1e      	lsrs	r6, r3, #16
 800cac2:	0c0b      	lsrs	r3, r1, #16
 800cac4:	fb02 3306 	mla	r3, r2, r6, r3
 800cac8:	b289      	uxth	r1, r1
 800caca:	3001      	adds	r0, #1
 800cacc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cad0:	4285      	cmp	r5, r0
 800cad2:	f84c 1b04 	str.w	r1, [ip], #4
 800cad6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cada:	dcec      	bgt.n	800cab6 <__multadd+0x12>
 800cadc:	b30e      	cbz	r6, 800cb22 <__multadd+0x7e>
 800cade:	68a3      	ldr	r3, [r4, #8]
 800cae0:	42ab      	cmp	r3, r5
 800cae2:	dc19      	bgt.n	800cb18 <__multadd+0x74>
 800cae4:	6861      	ldr	r1, [r4, #4]
 800cae6:	4638      	mov	r0, r7
 800cae8:	3101      	adds	r1, #1
 800caea:	f7ff ff79 	bl	800c9e0 <_Balloc>
 800caee:	4680      	mov	r8, r0
 800caf0:	b928      	cbnz	r0, 800cafe <__multadd+0x5a>
 800caf2:	4602      	mov	r2, r0
 800caf4:	4b0c      	ldr	r3, [pc, #48]	@ (800cb28 <__multadd+0x84>)
 800caf6:	480d      	ldr	r0, [pc, #52]	@ (800cb2c <__multadd+0x88>)
 800caf8:	21ba      	movs	r1, #186	@ 0xba
 800cafa:	f7ff f805 	bl	800bb08 <__assert_func>
 800cafe:	6922      	ldr	r2, [r4, #16]
 800cb00:	3202      	adds	r2, #2
 800cb02:	f104 010c 	add.w	r1, r4, #12
 800cb06:	0092      	lsls	r2, r2, #2
 800cb08:	300c      	adds	r0, #12
 800cb0a:	f7fe ffee 	bl	800baea <memcpy>
 800cb0e:	4621      	mov	r1, r4
 800cb10:	4638      	mov	r0, r7
 800cb12:	f7ff ffa5 	bl	800ca60 <_Bfree>
 800cb16:	4644      	mov	r4, r8
 800cb18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb1c:	3501      	adds	r5, #1
 800cb1e:	615e      	str	r6, [r3, #20]
 800cb20:	6125      	str	r5, [r4, #16]
 800cb22:	4620      	mov	r0, r4
 800cb24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb28:	0800e296 	.word	0x0800e296
 800cb2c:	0800e2a7 	.word	0x0800e2a7

0800cb30 <__hi0bits>:
 800cb30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cb34:	4603      	mov	r3, r0
 800cb36:	bf36      	itet	cc
 800cb38:	0403      	lslcc	r3, r0, #16
 800cb3a:	2000      	movcs	r0, #0
 800cb3c:	2010      	movcc	r0, #16
 800cb3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cb42:	bf3c      	itt	cc
 800cb44:	021b      	lslcc	r3, r3, #8
 800cb46:	3008      	addcc	r0, #8
 800cb48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb4c:	bf3c      	itt	cc
 800cb4e:	011b      	lslcc	r3, r3, #4
 800cb50:	3004      	addcc	r0, #4
 800cb52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb56:	bf3c      	itt	cc
 800cb58:	009b      	lslcc	r3, r3, #2
 800cb5a:	3002      	addcc	r0, #2
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	db05      	blt.n	800cb6c <__hi0bits+0x3c>
 800cb60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cb64:	f100 0001 	add.w	r0, r0, #1
 800cb68:	bf08      	it	eq
 800cb6a:	2020      	moveq	r0, #32
 800cb6c:	4770      	bx	lr

0800cb6e <__lo0bits>:
 800cb6e:	6803      	ldr	r3, [r0, #0]
 800cb70:	4602      	mov	r2, r0
 800cb72:	f013 0007 	ands.w	r0, r3, #7
 800cb76:	d00b      	beq.n	800cb90 <__lo0bits+0x22>
 800cb78:	07d9      	lsls	r1, r3, #31
 800cb7a:	d421      	bmi.n	800cbc0 <__lo0bits+0x52>
 800cb7c:	0798      	lsls	r0, r3, #30
 800cb7e:	bf49      	itett	mi
 800cb80:	085b      	lsrmi	r3, r3, #1
 800cb82:	089b      	lsrpl	r3, r3, #2
 800cb84:	2001      	movmi	r0, #1
 800cb86:	6013      	strmi	r3, [r2, #0]
 800cb88:	bf5c      	itt	pl
 800cb8a:	6013      	strpl	r3, [r2, #0]
 800cb8c:	2002      	movpl	r0, #2
 800cb8e:	4770      	bx	lr
 800cb90:	b299      	uxth	r1, r3
 800cb92:	b909      	cbnz	r1, 800cb98 <__lo0bits+0x2a>
 800cb94:	0c1b      	lsrs	r3, r3, #16
 800cb96:	2010      	movs	r0, #16
 800cb98:	b2d9      	uxtb	r1, r3
 800cb9a:	b909      	cbnz	r1, 800cba0 <__lo0bits+0x32>
 800cb9c:	3008      	adds	r0, #8
 800cb9e:	0a1b      	lsrs	r3, r3, #8
 800cba0:	0719      	lsls	r1, r3, #28
 800cba2:	bf04      	itt	eq
 800cba4:	091b      	lsreq	r3, r3, #4
 800cba6:	3004      	addeq	r0, #4
 800cba8:	0799      	lsls	r1, r3, #30
 800cbaa:	bf04      	itt	eq
 800cbac:	089b      	lsreq	r3, r3, #2
 800cbae:	3002      	addeq	r0, #2
 800cbb0:	07d9      	lsls	r1, r3, #31
 800cbb2:	d403      	bmi.n	800cbbc <__lo0bits+0x4e>
 800cbb4:	085b      	lsrs	r3, r3, #1
 800cbb6:	f100 0001 	add.w	r0, r0, #1
 800cbba:	d003      	beq.n	800cbc4 <__lo0bits+0x56>
 800cbbc:	6013      	str	r3, [r2, #0]
 800cbbe:	4770      	bx	lr
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	4770      	bx	lr
 800cbc4:	2020      	movs	r0, #32
 800cbc6:	4770      	bx	lr

0800cbc8 <__i2b>:
 800cbc8:	b510      	push	{r4, lr}
 800cbca:	460c      	mov	r4, r1
 800cbcc:	2101      	movs	r1, #1
 800cbce:	f7ff ff07 	bl	800c9e0 <_Balloc>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	b928      	cbnz	r0, 800cbe2 <__i2b+0x1a>
 800cbd6:	4b05      	ldr	r3, [pc, #20]	@ (800cbec <__i2b+0x24>)
 800cbd8:	4805      	ldr	r0, [pc, #20]	@ (800cbf0 <__i2b+0x28>)
 800cbda:	f240 1145 	movw	r1, #325	@ 0x145
 800cbde:	f7fe ff93 	bl	800bb08 <__assert_func>
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	6144      	str	r4, [r0, #20]
 800cbe6:	6103      	str	r3, [r0, #16]
 800cbe8:	bd10      	pop	{r4, pc}
 800cbea:	bf00      	nop
 800cbec:	0800e296 	.word	0x0800e296
 800cbf0:	0800e2a7 	.word	0x0800e2a7

0800cbf4 <__multiply>:
 800cbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf8:	4614      	mov	r4, r2
 800cbfa:	690a      	ldr	r2, [r1, #16]
 800cbfc:	6923      	ldr	r3, [r4, #16]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	bfa8      	it	ge
 800cc02:	4623      	movge	r3, r4
 800cc04:	460f      	mov	r7, r1
 800cc06:	bfa4      	itt	ge
 800cc08:	460c      	movge	r4, r1
 800cc0a:	461f      	movge	r7, r3
 800cc0c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cc10:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cc14:	68a3      	ldr	r3, [r4, #8]
 800cc16:	6861      	ldr	r1, [r4, #4]
 800cc18:	eb0a 0609 	add.w	r6, sl, r9
 800cc1c:	42b3      	cmp	r3, r6
 800cc1e:	b085      	sub	sp, #20
 800cc20:	bfb8      	it	lt
 800cc22:	3101      	addlt	r1, #1
 800cc24:	f7ff fedc 	bl	800c9e0 <_Balloc>
 800cc28:	b930      	cbnz	r0, 800cc38 <__multiply+0x44>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	4b44      	ldr	r3, [pc, #272]	@ (800cd40 <__multiply+0x14c>)
 800cc2e:	4845      	ldr	r0, [pc, #276]	@ (800cd44 <__multiply+0x150>)
 800cc30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cc34:	f7fe ff68 	bl	800bb08 <__assert_func>
 800cc38:	f100 0514 	add.w	r5, r0, #20
 800cc3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cc40:	462b      	mov	r3, r5
 800cc42:	2200      	movs	r2, #0
 800cc44:	4543      	cmp	r3, r8
 800cc46:	d321      	bcc.n	800cc8c <__multiply+0x98>
 800cc48:	f107 0114 	add.w	r1, r7, #20
 800cc4c:	f104 0214 	add.w	r2, r4, #20
 800cc50:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cc54:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cc58:	9302      	str	r3, [sp, #8]
 800cc5a:	1b13      	subs	r3, r2, r4
 800cc5c:	3b15      	subs	r3, #21
 800cc5e:	f023 0303 	bic.w	r3, r3, #3
 800cc62:	3304      	adds	r3, #4
 800cc64:	f104 0715 	add.w	r7, r4, #21
 800cc68:	42ba      	cmp	r2, r7
 800cc6a:	bf38      	it	cc
 800cc6c:	2304      	movcc	r3, #4
 800cc6e:	9301      	str	r3, [sp, #4]
 800cc70:	9b02      	ldr	r3, [sp, #8]
 800cc72:	9103      	str	r1, [sp, #12]
 800cc74:	428b      	cmp	r3, r1
 800cc76:	d80c      	bhi.n	800cc92 <__multiply+0x9e>
 800cc78:	2e00      	cmp	r6, #0
 800cc7a:	dd03      	ble.n	800cc84 <__multiply+0x90>
 800cc7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d05b      	beq.n	800cd3c <__multiply+0x148>
 800cc84:	6106      	str	r6, [r0, #16]
 800cc86:	b005      	add	sp, #20
 800cc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc8c:	f843 2b04 	str.w	r2, [r3], #4
 800cc90:	e7d8      	b.n	800cc44 <__multiply+0x50>
 800cc92:	f8b1 a000 	ldrh.w	sl, [r1]
 800cc96:	f1ba 0f00 	cmp.w	sl, #0
 800cc9a:	d024      	beq.n	800cce6 <__multiply+0xf2>
 800cc9c:	f104 0e14 	add.w	lr, r4, #20
 800cca0:	46a9      	mov	r9, r5
 800cca2:	f04f 0c00 	mov.w	ip, #0
 800cca6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ccaa:	f8d9 3000 	ldr.w	r3, [r9]
 800ccae:	fa1f fb87 	uxth.w	fp, r7
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	fb0a 330b 	mla	r3, sl, fp, r3
 800ccb8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ccbc:	f8d9 7000 	ldr.w	r7, [r9]
 800ccc0:	4463      	add	r3, ip
 800ccc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ccc6:	fb0a c70b 	mla	r7, sl, fp, ip
 800ccca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ccd4:	4572      	cmp	r2, lr
 800ccd6:	f849 3b04 	str.w	r3, [r9], #4
 800ccda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ccde:	d8e2      	bhi.n	800cca6 <__multiply+0xb2>
 800cce0:	9b01      	ldr	r3, [sp, #4]
 800cce2:	f845 c003 	str.w	ip, [r5, r3]
 800cce6:	9b03      	ldr	r3, [sp, #12]
 800cce8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ccec:	3104      	adds	r1, #4
 800ccee:	f1b9 0f00 	cmp.w	r9, #0
 800ccf2:	d021      	beq.n	800cd38 <__multiply+0x144>
 800ccf4:	682b      	ldr	r3, [r5, #0]
 800ccf6:	f104 0c14 	add.w	ip, r4, #20
 800ccfa:	46ae      	mov	lr, r5
 800ccfc:	f04f 0a00 	mov.w	sl, #0
 800cd00:	f8bc b000 	ldrh.w	fp, [ip]
 800cd04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cd08:	fb09 770b 	mla	r7, r9, fp, r7
 800cd0c:	4457      	add	r7, sl
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cd14:	f84e 3b04 	str.w	r3, [lr], #4
 800cd18:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cd1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd20:	f8be 3000 	ldrh.w	r3, [lr]
 800cd24:	fb09 330a 	mla	r3, r9, sl, r3
 800cd28:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cd2c:	4562      	cmp	r2, ip
 800cd2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd32:	d8e5      	bhi.n	800cd00 <__multiply+0x10c>
 800cd34:	9f01      	ldr	r7, [sp, #4]
 800cd36:	51eb      	str	r3, [r5, r7]
 800cd38:	3504      	adds	r5, #4
 800cd3a:	e799      	b.n	800cc70 <__multiply+0x7c>
 800cd3c:	3e01      	subs	r6, #1
 800cd3e:	e79b      	b.n	800cc78 <__multiply+0x84>
 800cd40:	0800e296 	.word	0x0800e296
 800cd44:	0800e2a7 	.word	0x0800e2a7

0800cd48 <__pow5mult>:
 800cd48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd4c:	4615      	mov	r5, r2
 800cd4e:	f012 0203 	ands.w	r2, r2, #3
 800cd52:	4607      	mov	r7, r0
 800cd54:	460e      	mov	r6, r1
 800cd56:	d007      	beq.n	800cd68 <__pow5mult+0x20>
 800cd58:	4c25      	ldr	r4, [pc, #148]	@ (800cdf0 <__pow5mult+0xa8>)
 800cd5a:	3a01      	subs	r2, #1
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd62:	f7ff fe9f 	bl	800caa4 <__multadd>
 800cd66:	4606      	mov	r6, r0
 800cd68:	10ad      	asrs	r5, r5, #2
 800cd6a:	d03d      	beq.n	800cde8 <__pow5mult+0xa0>
 800cd6c:	69fc      	ldr	r4, [r7, #28]
 800cd6e:	b97c      	cbnz	r4, 800cd90 <__pow5mult+0x48>
 800cd70:	2010      	movs	r0, #16
 800cd72:	f7ff fd7f 	bl	800c874 <malloc>
 800cd76:	4602      	mov	r2, r0
 800cd78:	61f8      	str	r0, [r7, #28]
 800cd7a:	b928      	cbnz	r0, 800cd88 <__pow5mult+0x40>
 800cd7c:	4b1d      	ldr	r3, [pc, #116]	@ (800cdf4 <__pow5mult+0xac>)
 800cd7e:	481e      	ldr	r0, [pc, #120]	@ (800cdf8 <__pow5mult+0xb0>)
 800cd80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cd84:	f7fe fec0 	bl	800bb08 <__assert_func>
 800cd88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd8c:	6004      	str	r4, [r0, #0]
 800cd8e:	60c4      	str	r4, [r0, #12]
 800cd90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cd94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd98:	b94c      	cbnz	r4, 800cdae <__pow5mult+0x66>
 800cd9a:	f240 2171 	movw	r1, #625	@ 0x271
 800cd9e:	4638      	mov	r0, r7
 800cda0:	f7ff ff12 	bl	800cbc8 <__i2b>
 800cda4:	2300      	movs	r3, #0
 800cda6:	f8c8 0008 	str.w	r0, [r8, #8]
 800cdaa:	4604      	mov	r4, r0
 800cdac:	6003      	str	r3, [r0, #0]
 800cdae:	f04f 0900 	mov.w	r9, #0
 800cdb2:	07eb      	lsls	r3, r5, #31
 800cdb4:	d50a      	bpl.n	800cdcc <__pow5mult+0x84>
 800cdb6:	4631      	mov	r1, r6
 800cdb8:	4622      	mov	r2, r4
 800cdba:	4638      	mov	r0, r7
 800cdbc:	f7ff ff1a 	bl	800cbf4 <__multiply>
 800cdc0:	4631      	mov	r1, r6
 800cdc2:	4680      	mov	r8, r0
 800cdc4:	4638      	mov	r0, r7
 800cdc6:	f7ff fe4b 	bl	800ca60 <_Bfree>
 800cdca:	4646      	mov	r6, r8
 800cdcc:	106d      	asrs	r5, r5, #1
 800cdce:	d00b      	beq.n	800cde8 <__pow5mult+0xa0>
 800cdd0:	6820      	ldr	r0, [r4, #0]
 800cdd2:	b938      	cbnz	r0, 800cde4 <__pow5mult+0x9c>
 800cdd4:	4622      	mov	r2, r4
 800cdd6:	4621      	mov	r1, r4
 800cdd8:	4638      	mov	r0, r7
 800cdda:	f7ff ff0b 	bl	800cbf4 <__multiply>
 800cdde:	6020      	str	r0, [r4, #0]
 800cde0:	f8c0 9000 	str.w	r9, [r0]
 800cde4:	4604      	mov	r4, r0
 800cde6:	e7e4      	b.n	800cdb2 <__pow5mult+0x6a>
 800cde8:	4630      	mov	r0, r6
 800cdea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdee:	bf00      	nop
 800cdf0:	0800e300 	.word	0x0800e300
 800cdf4:	0800e227 	.word	0x0800e227
 800cdf8:	0800e2a7 	.word	0x0800e2a7

0800cdfc <__lshift>:
 800cdfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce00:	460c      	mov	r4, r1
 800ce02:	6849      	ldr	r1, [r1, #4]
 800ce04:	6923      	ldr	r3, [r4, #16]
 800ce06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce0a:	68a3      	ldr	r3, [r4, #8]
 800ce0c:	4607      	mov	r7, r0
 800ce0e:	4691      	mov	r9, r2
 800ce10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce14:	f108 0601 	add.w	r6, r8, #1
 800ce18:	42b3      	cmp	r3, r6
 800ce1a:	db0b      	blt.n	800ce34 <__lshift+0x38>
 800ce1c:	4638      	mov	r0, r7
 800ce1e:	f7ff fddf 	bl	800c9e0 <_Balloc>
 800ce22:	4605      	mov	r5, r0
 800ce24:	b948      	cbnz	r0, 800ce3a <__lshift+0x3e>
 800ce26:	4602      	mov	r2, r0
 800ce28:	4b28      	ldr	r3, [pc, #160]	@ (800cecc <__lshift+0xd0>)
 800ce2a:	4829      	ldr	r0, [pc, #164]	@ (800ced0 <__lshift+0xd4>)
 800ce2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ce30:	f7fe fe6a 	bl	800bb08 <__assert_func>
 800ce34:	3101      	adds	r1, #1
 800ce36:	005b      	lsls	r3, r3, #1
 800ce38:	e7ee      	b.n	800ce18 <__lshift+0x1c>
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	f100 0114 	add.w	r1, r0, #20
 800ce40:	f100 0210 	add.w	r2, r0, #16
 800ce44:	4618      	mov	r0, r3
 800ce46:	4553      	cmp	r3, sl
 800ce48:	db33      	blt.n	800ceb2 <__lshift+0xb6>
 800ce4a:	6920      	ldr	r0, [r4, #16]
 800ce4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce50:	f104 0314 	add.w	r3, r4, #20
 800ce54:	f019 091f 	ands.w	r9, r9, #31
 800ce58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce60:	d02b      	beq.n	800ceba <__lshift+0xbe>
 800ce62:	f1c9 0e20 	rsb	lr, r9, #32
 800ce66:	468a      	mov	sl, r1
 800ce68:	2200      	movs	r2, #0
 800ce6a:	6818      	ldr	r0, [r3, #0]
 800ce6c:	fa00 f009 	lsl.w	r0, r0, r9
 800ce70:	4310      	orrs	r0, r2
 800ce72:	f84a 0b04 	str.w	r0, [sl], #4
 800ce76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce7a:	459c      	cmp	ip, r3
 800ce7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce80:	d8f3      	bhi.n	800ce6a <__lshift+0x6e>
 800ce82:	ebac 0304 	sub.w	r3, ip, r4
 800ce86:	3b15      	subs	r3, #21
 800ce88:	f023 0303 	bic.w	r3, r3, #3
 800ce8c:	3304      	adds	r3, #4
 800ce8e:	f104 0015 	add.w	r0, r4, #21
 800ce92:	4584      	cmp	ip, r0
 800ce94:	bf38      	it	cc
 800ce96:	2304      	movcc	r3, #4
 800ce98:	50ca      	str	r2, [r1, r3]
 800ce9a:	b10a      	cbz	r2, 800cea0 <__lshift+0xa4>
 800ce9c:	f108 0602 	add.w	r6, r8, #2
 800cea0:	3e01      	subs	r6, #1
 800cea2:	4638      	mov	r0, r7
 800cea4:	612e      	str	r6, [r5, #16]
 800cea6:	4621      	mov	r1, r4
 800cea8:	f7ff fdda 	bl	800ca60 <_Bfree>
 800ceac:	4628      	mov	r0, r5
 800ceae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	e7c5      	b.n	800ce46 <__lshift+0x4a>
 800ceba:	3904      	subs	r1, #4
 800cebc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cec0:	f841 2f04 	str.w	r2, [r1, #4]!
 800cec4:	459c      	cmp	ip, r3
 800cec6:	d8f9      	bhi.n	800cebc <__lshift+0xc0>
 800cec8:	e7ea      	b.n	800cea0 <__lshift+0xa4>
 800ceca:	bf00      	nop
 800cecc:	0800e296 	.word	0x0800e296
 800ced0:	0800e2a7 	.word	0x0800e2a7

0800ced4 <__mcmp>:
 800ced4:	690a      	ldr	r2, [r1, #16]
 800ced6:	4603      	mov	r3, r0
 800ced8:	6900      	ldr	r0, [r0, #16]
 800ceda:	1a80      	subs	r0, r0, r2
 800cedc:	b530      	push	{r4, r5, lr}
 800cede:	d10e      	bne.n	800cefe <__mcmp+0x2a>
 800cee0:	3314      	adds	r3, #20
 800cee2:	3114      	adds	r1, #20
 800cee4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cee8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ceec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cef0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cef4:	4295      	cmp	r5, r2
 800cef6:	d003      	beq.n	800cf00 <__mcmp+0x2c>
 800cef8:	d205      	bcs.n	800cf06 <__mcmp+0x32>
 800cefa:	f04f 30ff 	mov.w	r0, #4294967295
 800cefe:	bd30      	pop	{r4, r5, pc}
 800cf00:	42a3      	cmp	r3, r4
 800cf02:	d3f3      	bcc.n	800ceec <__mcmp+0x18>
 800cf04:	e7fb      	b.n	800cefe <__mcmp+0x2a>
 800cf06:	2001      	movs	r0, #1
 800cf08:	e7f9      	b.n	800cefe <__mcmp+0x2a>
	...

0800cf0c <__mdiff>:
 800cf0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf10:	4689      	mov	r9, r1
 800cf12:	4606      	mov	r6, r0
 800cf14:	4611      	mov	r1, r2
 800cf16:	4648      	mov	r0, r9
 800cf18:	4614      	mov	r4, r2
 800cf1a:	f7ff ffdb 	bl	800ced4 <__mcmp>
 800cf1e:	1e05      	subs	r5, r0, #0
 800cf20:	d112      	bne.n	800cf48 <__mdiff+0x3c>
 800cf22:	4629      	mov	r1, r5
 800cf24:	4630      	mov	r0, r6
 800cf26:	f7ff fd5b 	bl	800c9e0 <_Balloc>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	b928      	cbnz	r0, 800cf3a <__mdiff+0x2e>
 800cf2e:	4b3f      	ldr	r3, [pc, #252]	@ (800d02c <__mdiff+0x120>)
 800cf30:	f240 2137 	movw	r1, #567	@ 0x237
 800cf34:	483e      	ldr	r0, [pc, #248]	@ (800d030 <__mdiff+0x124>)
 800cf36:	f7fe fde7 	bl	800bb08 <__assert_func>
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf40:	4610      	mov	r0, r2
 800cf42:	b003      	add	sp, #12
 800cf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf48:	bfbc      	itt	lt
 800cf4a:	464b      	movlt	r3, r9
 800cf4c:	46a1      	movlt	r9, r4
 800cf4e:	4630      	mov	r0, r6
 800cf50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cf54:	bfba      	itte	lt
 800cf56:	461c      	movlt	r4, r3
 800cf58:	2501      	movlt	r5, #1
 800cf5a:	2500      	movge	r5, #0
 800cf5c:	f7ff fd40 	bl	800c9e0 <_Balloc>
 800cf60:	4602      	mov	r2, r0
 800cf62:	b918      	cbnz	r0, 800cf6c <__mdiff+0x60>
 800cf64:	4b31      	ldr	r3, [pc, #196]	@ (800d02c <__mdiff+0x120>)
 800cf66:	f240 2145 	movw	r1, #581	@ 0x245
 800cf6a:	e7e3      	b.n	800cf34 <__mdiff+0x28>
 800cf6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cf70:	6926      	ldr	r6, [r4, #16]
 800cf72:	60c5      	str	r5, [r0, #12]
 800cf74:	f109 0310 	add.w	r3, r9, #16
 800cf78:	f109 0514 	add.w	r5, r9, #20
 800cf7c:	f104 0e14 	add.w	lr, r4, #20
 800cf80:	f100 0b14 	add.w	fp, r0, #20
 800cf84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cf88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cf8c:	9301      	str	r3, [sp, #4]
 800cf8e:	46d9      	mov	r9, fp
 800cf90:	f04f 0c00 	mov.w	ip, #0
 800cf94:	9b01      	ldr	r3, [sp, #4]
 800cf96:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cf9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cf9e:	9301      	str	r3, [sp, #4]
 800cfa0:	fa1f f38a 	uxth.w	r3, sl
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	b283      	uxth	r3, r0
 800cfa8:	1acb      	subs	r3, r1, r3
 800cfaa:	0c00      	lsrs	r0, r0, #16
 800cfac:	4463      	add	r3, ip
 800cfae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cfb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cfbc:	4576      	cmp	r6, lr
 800cfbe:	f849 3b04 	str.w	r3, [r9], #4
 800cfc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cfc6:	d8e5      	bhi.n	800cf94 <__mdiff+0x88>
 800cfc8:	1b33      	subs	r3, r6, r4
 800cfca:	3b15      	subs	r3, #21
 800cfcc:	f023 0303 	bic.w	r3, r3, #3
 800cfd0:	3415      	adds	r4, #21
 800cfd2:	3304      	adds	r3, #4
 800cfd4:	42a6      	cmp	r6, r4
 800cfd6:	bf38      	it	cc
 800cfd8:	2304      	movcc	r3, #4
 800cfda:	441d      	add	r5, r3
 800cfdc:	445b      	add	r3, fp
 800cfde:	461e      	mov	r6, r3
 800cfe0:	462c      	mov	r4, r5
 800cfe2:	4544      	cmp	r4, r8
 800cfe4:	d30e      	bcc.n	800d004 <__mdiff+0xf8>
 800cfe6:	f108 0103 	add.w	r1, r8, #3
 800cfea:	1b49      	subs	r1, r1, r5
 800cfec:	f021 0103 	bic.w	r1, r1, #3
 800cff0:	3d03      	subs	r5, #3
 800cff2:	45a8      	cmp	r8, r5
 800cff4:	bf38      	it	cc
 800cff6:	2100      	movcc	r1, #0
 800cff8:	440b      	add	r3, r1
 800cffa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cffe:	b191      	cbz	r1, 800d026 <__mdiff+0x11a>
 800d000:	6117      	str	r7, [r2, #16]
 800d002:	e79d      	b.n	800cf40 <__mdiff+0x34>
 800d004:	f854 1b04 	ldr.w	r1, [r4], #4
 800d008:	46e6      	mov	lr, ip
 800d00a:	0c08      	lsrs	r0, r1, #16
 800d00c:	fa1c fc81 	uxtah	ip, ip, r1
 800d010:	4471      	add	r1, lr
 800d012:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d016:	b289      	uxth	r1, r1
 800d018:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d01c:	f846 1b04 	str.w	r1, [r6], #4
 800d020:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d024:	e7dd      	b.n	800cfe2 <__mdiff+0xd6>
 800d026:	3f01      	subs	r7, #1
 800d028:	e7e7      	b.n	800cffa <__mdiff+0xee>
 800d02a:	bf00      	nop
 800d02c:	0800e296 	.word	0x0800e296
 800d030:	0800e2a7 	.word	0x0800e2a7

0800d034 <__d2b>:
 800d034:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d038:	460f      	mov	r7, r1
 800d03a:	2101      	movs	r1, #1
 800d03c:	ec59 8b10 	vmov	r8, r9, d0
 800d040:	4616      	mov	r6, r2
 800d042:	f7ff fccd 	bl	800c9e0 <_Balloc>
 800d046:	4604      	mov	r4, r0
 800d048:	b930      	cbnz	r0, 800d058 <__d2b+0x24>
 800d04a:	4602      	mov	r2, r0
 800d04c:	4b23      	ldr	r3, [pc, #140]	@ (800d0dc <__d2b+0xa8>)
 800d04e:	4824      	ldr	r0, [pc, #144]	@ (800d0e0 <__d2b+0xac>)
 800d050:	f240 310f 	movw	r1, #783	@ 0x30f
 800d054:	f7fe fd58 	bl	800bb08 <__assert_func>
 800d058:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d05c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d060:	b10d      	cbz	r5, 800d066 <__d2b+0x32>
 800d062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d066:	9301      	str	r3, [sp, #4]
 800d068:	f1b8 0300 	subs.w	r3, r8, #0
 800d06c:	d023      	beq.n	800d0b6 <__d2b+0x82>
 800d06e:	4668      	mov	r0, sp
 800d070:	9300      	str	r3, [sp, #0]
 800d072:	f7ff fd7c 	bl	800cb6e <__lo0bits>
 800d076:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d07a:	b1d0      	cbz	r0, 800d0b2 <__d2b+0x7e>
 800d07c:	f1c0 0320 	rsb	r3, r0, #32
 800d080:	fa02 f303 	lsl.w	r3, r2, r3
 800d084:	430b      	orrs	r3, r1
 800d086:	40c2      	lsrs	r2, r0
 800d088:	6163      	str	r3, [r4, #20]
 800d08a:	9201      	str	r2, [sp, #4]
 800d08c:	9b01      	ldr	r3, [sp, #4]
 800d08e:	61a3      	str	r3, [r4, #24]
 800d090:	2b00      	cmp	r3, #0
 800d092:	bf0c      	ite	eq
 800d094:	2201      	moveq	r2, #1
 800d096:	2202      	movne	r2, #2
 800d098:	6122      	str	r2, [r4, #16]
 800d09a:	b1a5      	cbz	r5, 800d0c6 <__d2b+0x92>
 800d09c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d0a0:	4405      	add	r5, r0
 800d0a2:	603d      	str	r5, [r7, #0]
 800d0a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d0a8:	6030      	str	r0, [r6, #0]
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	b003      	add	sp, #12
 800d0ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0b2:	6161      	str	r1, [r4, #20]
 800d0b4:	e7ea      	b.n	800d08c <__d2b+0x58>
 800d0b6:	a801      	add	r0, sp, #4
 800d0b8:	f7ff fd59 	bl	800cb6e <__lo0bits>
 800d0bc:	9b01      	ldr	r3, [sp, #4]
 800d0be:	6163      	str	r3, [r4, #20]
 800d0c0:	3020      	adds	r0, #32
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	e7e8      	b.n	800d098 <__d2b+0x64>
 800d0c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d0ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d0ce:	6038      	str	r0, [r7, #0]
 800d0d0:	6918      	ldr	r0, [r3, #16]
 800d0d2:	f7ff fd2d 	bl	800cb30 <__hi0bits>
 800d0d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d0da:	e7e5      	b.n	800d0a8 <__d2b+0x74>
 800d0dc:	0800e296 	.word	0x0800e296
 800d0e0:	0800e2a7 	.word	0x0800e2a7

0800d0e4 <__ssputs_r>:
 800d0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e8:	688e      	ldr	r6, [r1, #8]
 800d0ea:	461f      	mov	r7, r3
 800d0ec:	42be      	cmp	r6, r7
 800d0ee:	680b      	ldr	r3, [r1, #0]
 800d0f0:	4682      	mov	sl, r0
 800d0f2:	460c      	mov	r4, r1
 800d0f4:	4690      	mov	r8, r2
 800d0f6:	d82d      	bhi.n	800d154 <__ssputs_r+0x70>
 800d0f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d0fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d100:	d026      	beq.n	800d150 <__ssputs_r+0x6c>
 800d102:	6965      	ldr	r5, [r4, #20]
 800d104:	6909      	ldr	r1, [r1, #16]
 800d106:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d10a:	eba3 0901 	sub.w	r9, r3, r1
 800d10e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d112:	1c7b      	adds	r3, r7, #1
 800d114:	444b      	add	r3, r9
 800d116:	106d      	asrs	r5, r5, #1
 800d118:	429d      	cmp	r5, r3
 800d11a:	bf38      	it	cc
 800d11c:	461d      	movcc	r5, r3
 800d11e:	0553      	lsls	r3, r2, #21
 800d120:	d527      	bpl.n	800d172 <__ssputs_r+0x8e>
 800d122:	4629      	mov	r1, r5
 800d124:	f7ff fbd0 	bl	800c8c8 <_malloc_r>
 800d128:	4606      	mov	r6, r0
 800d12a:	b360      	cbz	r0, 800d186 <__ssputs_r+0xa2>
 800d12c:	6921      	ldr	r1, [r4, #16]
 800d12e:	464a      	mov	r2, r9
 800d130:	f7fe fcdb 	bl	800baea <memcpy>
 800d134:	89a3      	ldrh	r3, [r4, #12]
 800d136:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d13a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d13e:	81a3      	strh	r3, [r4, #12]
 800d140:	6126      	str	r6, [r4, #16]
 800d142:	6165      	str	r5, [r4, #20]
 800d144:	444e      	add	r6, r9
 800d146:	eba5 0509 	sub.w	r5, r5, r9
 800d14a:	6026      	str	r6, [r4, #0]
 800d14c:	60a5      	str	r5, [r4, #8]
 800d14e:	463e      	mov	r6, r7
 800d150:	42be      	cmp	r6, r7
 800d152:	d900      	bls.n	800d156 <__ssputs_r+0x72>
 800d154:	463e      	mov	r6, r7
 800d156:	6820      	ldr	r0, [r4, #0]
 800d158:	4632      	mov	r2, r6
 800d15a:	4641      	mov	r1, r8
 800d15c:	f000 fa3a 	bl	800d5d4 <memmove>
 800d160:	68a3      	ldr	r3, [r4, #8]
 800d162:	1b9b      	subs	r3, r3, r6
 800d164:	60a3      	str	r3, [r4, #8]
 800d166:	6823      	ldr	r3, [r4, #0]
 800d168:	4433      	add	r3, r6
 800d16a:	6023      	str	r3, [r4, #0]
 800d16c:	2000      	movs	r0, #0
 800d16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d172:	462a      	mov	r2, r5
 800d174:	f000 faa7 	bl	800d6c6 <_realloc_r>
 800d178:	4606      	mov	r6, r0
 800d17a:	2800      	cmp	r0, #0
 800d17c:	d1e0      	bne.n	800d140 <__ssputs_r+0x5c>
 800d17e:	6921      	ldr	r1, [r4, #16]
 800d180:	4650      	mov	r0, sl
 800d182:	f7ff fb2d 	bl	800c7e0 <_free_r>
 800d186:	230c      	movs	r3, #12
 800d188:	f8ca 3000 	str.w	r3, [sl]
 800d18c:	89a3      	ldrh	r3, [r4, #12]
 800d18e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d192:	81a3      	strh	r3, [r4, #12]
 800d194:	f04f 30ff 	mov.w	r0, #4294967295
 800d198:	e7e9      	b.n	800d16e <__ssputs_r+0x8a>
	...

0800d19c <_svfiprintf_r>:
 800d19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a0:	4698      	mov	r8, r3
 800d1a2:	898b      	ldrh	r3, [r1, #12]
 800d1a4:	061b      	lsls	r3, r3, #24
 800d1a6:	b09d      	sub	sp, #116	@ 0x74
 800d1a8:	4607      	mov	r7, r0
 800d1aa:	460d      	mov	r5, r1
 800d1ac:	4614      	mov	r4, r2
 800d1ae:	d510      	bpl.n	800d1d2 <_svfiprintf_r+0x36>
 800d1b0:	690b      	ldr	r3, [r1, #16]
 800d1b2:	b973      	cbnz	r3, 800d1d2 <_svfiprintf_r+0x36>
 800d1b4:	2140      	movs	r1, #64	@ 0x40
 800d1b6:	f7ff fb87 	bl	800c8c8 <_malloc_r>
 800d1ba:	6028      	str	r0, [r5, #0]
 800d1bc:	6128      	str	r0, [r5, #16]
 800d1be:	b930      	cbnz	r0, 800d1ce <_svfiprintf_r+0x32>
 800d1c0:	230c      	movs	r3, #12
 800d1c2:	603b      	str	r3, [r7, #0]
 800d1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c8:	b01d      	add	sp, #116	@ 0x74
 800d1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ce:	2340      	movs	r3, #64	@ 0x40
 800d1d0:	616b      	str	r3, [r5, #20]
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1d6:	2320      	movs	r3, #32
 800d1d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d1dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1e0:	2330      	movs	r3, #48	@ 0x30
 800d1e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d380 <_svfiprintf_r+0x1e4>
 800d1e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d1ea:	f04f 0901 	mov.w	r9, #1
 800d1ee:	4623      	mov	r3, r4
 800d1f0:	469a      	mov	sl, r3
 800d1f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1f6:	b10a      	cbz	r2, 800d1fc <_svfiprintf_r+0x60>
 800d1f8:	2a25      	cmp	r2, #37	@ 0x25
 800d1fa:	d1f9      	bne.n	800d1f0 <_svfiprintf_r+0x54>
 800d1fc:	ebba 0b04 	subs.w	fp, sl, r4
 800d200:	d00b      	beq.n	800d21a <_svfiprintf_r+0x7e>
 800d202:	465b      	mov	r3, fp
 800d204:	4622      	mov	r2, r4
 800d206:	4629      	mov	r1, r5
 800d208:	4638      	mov	r0, r7
 800d20a:	f7ff ff6b 	bl	800d0e4 <__ssputs_r>
 800d20e:	3001      	adds	r0, #1
 800d210:	f000 80a7 	beq.w	800d362 <_svfiprintf_r+0x1c6>
 800d214:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d216:	445a      	add	r2, fp
 800d218:	9209      	str	r2, [sp, #36]	@ 0x24
 800d21a:	f89a 3000 	ldrb.w	r3, [sl]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	f000 809f 	beq.w	800d362 <_svfiprintf_r+0x1c6>
 800d224:	2300      	movs	r3, #0
 800d226:	f04f 32ff 	mov.w	r2, #4294967295
 800d22a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d22e:	f10a 0a01 	add.w	sl, sl, #1
 800d232:	9304      	str	r3, [sp, #16]
 800d234:	9307      	str	r3, [sp, #28]
 800d236:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d23a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d23c:	4654      	mov	r4, sl
 800d23e:	2205      	movs	r2, #5
 800d240:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d244:	484e      	ldr	r0, [pc, #312]	@ (800d380 <_svfiprintf_r+0x1e4>)
 800d246:	f7f3 f81b 	bl	8000280 <memchr>
 800d24a:	9a04      	ldr	r2, [sp, #16]
 800d24c:	b9d8      	cbnz	r0, 800d286 <_svfiprintf_r+0xea>
 800d24e:	06d0      	lsls	r0, r2, #27
 800d250:	bf44      	itt	mi
 800d252:	2320      	movmi	r3, #32
 800d254:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d258:	0711      	lsls	r1, r2, #28
 800d25a:	bf44      	itt	mi
 800d25c:	232b      	movmi	r3, #43	@ 0x2b
 800d25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d262:	f89a 3000 	ldrb.w	r3, [sl]
 800d266:	2b2a      	cmp	r3, #42	@ 0x2a
 800d268:	d015      	beq.n	800d296 <_svfiprintf_r+0xfa>
 800d26a:	9a07      	ldr	r2, [sp, #28]
 800d26c:	4654      	mov	r4, sl
 800d26e:	2000      	movs	r0, #0
 800d270:	f04f 0c0a 	mov.w	ip, #10
 800d274:	4621      	mov	r1, r4
 800d276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d27a:	3b30      	subs	r3, #48	@ 0x30
 800d27c:	2b09      	cmp	r3, #9
 800d27e:	d94b      	bls.n	800d318 <_svfiprintf_r+0x17c>
 800d280:	b1b0      	cbz	r0, 800d2b0 <_svfiprintf_r+0x114>
 800d282:	9207      	str	r2, [sp, #28]
 800d284:	e014      	b.n	800d2b0 <_svfiprintf_r+0x114>
 800d286:	eba0 0308 	sub.w	r3, r0, r8
 800d28a:	fa09 f303 	lsl.w	r3, r9, r3
 800d28e:	4313      	orrs	r3, r2
 800d290:	9304      	str	r3, [sp, #16]
 800d292:	46a2      	mov	sl, r4
 800d294:	e7d2      	b.n	800d23c <_svfiprintf_r+0xa0>
 800d296:	9b03      	ldr	r3, [sp, #12]
 800d298:	1d19      	adds	r1, r3, #4
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	9103      	str	r1, [sp, #12]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	bfbb      	ittet	lt
 800d2a2:	425b      	neglt	r3, r3
 800d2a4:	f042 0202 	orrlt.w	r2, r2, #2
 800d2a8:	9307      	strge	r3, [sp, #28]
 800d2aa:	9307      	strlt	r3, [sp, #28]
 800d2ac:	bfb8      	it	lt
 800d2ae:	9204      	strlt	r2, [sp, #16]
 800d2b0:	7823      	ldrb	r3, [r4, #0]
 800d2b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2b4:	d10a      	bne.n	800d2cc <_svfiprintf_r+0x130>
 800d2b6:	7863      	ldrb	r3, [r4, #1]
 800d2b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2ba:	d132      	bne.n	800d322 <_svfiprintf_r+0x186>
 800d2bc:	9b03      	ldr	r3, [sp, #12]
 800d2be:	1d1a      	adds	r2, r3, #4
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	9203      	str	r2, [sp, #12]
 800d2c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d2c8:	3402      	adds	r4, #2
 800d2ca:	9305      	str	r3, [sp, #20]
 800d2cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d390 <_svfiprintf_r+0x1f4>
 800d2d0:	7821      	ldrb	r1, [r4, #0]
 800d2d2:	2203      	movs	r2, #3
 800d2d4:	4650      	mov	r0, sl
 800d2d6:	f7f2 ffd3 	bl	8000280 <memchr>
 800d2da:	b138      	cbz	r0, 800d2ec <_svfiprintf_r+0x150>
 800d2dc:	9b04      	ldr	r3, [sp, #16]
 800d2de:	eba0 000a 	sub.w	r0, r0, sl
 800d2e2:	2240      	movs	r2, #64	@ 0x40
 800d2e4:	4082      	lsls	r2, r0
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	3401      	adds	r4, #1
 800d2ea:	9304      	str	r3, [sp, #16]
 800d2ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2f0:	4824      	ldr	r0, [pc, #144]	@ (800d384 <_svfiprintf_r+0x1e8>)
 800d2f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d2f6:	2206      	movs	r2, #6
 800d2f8:	f7f2 ffc2 	bl	8000280 <memchr>
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	d036      	beq.n	800d36e <_svfiprintf_r+0x1d2>
 800d300:	4b21      	ldr	r3, [pc, #132]	@ (800d388 <_svfiprintf_r+0x1ec>)
 800d302:	bb1b      	cbnz	r3, 800d34c <_svfiprintf_r+0x1b0>
 800d304:	9b03      	ldr	r3, [sp, #12]
 800d306:	3307      	adds	r3, #7
 800d308:	f023 0307 	bic.w	r3, r3, #7
 800d30c:	3308      	adds	r3, #8
 800d30e:	9303      	str	r3, [sp, #12]
 800d310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d312:	4433      	add	r3, r6
 800d314:	9309      	str	r3, [sp, #36]	@ 0x24
 800d316:	e76a      	b.n	800d1ee <_svfiprintf_r+0x52>
 800d318:	fb0c 3202 	mla	r2, ip, r2, r3
 800d31c:	460c      	mov	r4, r1
 800d31e:	2001      	movs	r0, #1
 800d320:	e7a8      	b.n	800d274 <_svfiprintf_r+0xd8>
 800d322:	2300      	movs	r3, #0
 800d324:	3401      	adds	r4, #1
 800d326:	9305      	str	r3, [sp, #20]
 800d328:	4619      	mov	r1, r3
 800d32a:	f04f 0c0a 	mov.w	ip, #10
 800d32e:	4620      	mov	r0, r4
 800d330:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d334:	3a30      	subs	r2, #48	@ 0x30
 800d336:	2a09      	cmp	r2, #9
 800d338:	d903      	bls.n	800d342 <_svfiprintf_r+0x1a6>
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d0c6      	beq.n	800d2cc <_svfiprintf_r+0x130>
 800d33e:	9105      	str	r1, [sp, #20]
 800d340:	e7c4      	b.n	800d2cc <_svfiprintf_r+0x130>
 800d342:	fb0c 2101 	mla	r1, ip, r1, r2
 800d346:	4604      	mov	r4, r0
 800d348:	2301      	movs	r3, #1
 800d34a:	e7f0      	b.n	800d32e <_svfiprintf_r+0x192>
 800d34c:	ab03      	add	r3, sp, #12
 800d34e:	9300      	str	r3, [sp, #0]
 800d350:	462a      	mov	r2, r5
 800d352:	4b0e      	ldr	r3, [pc, #56]	@ (800d38c <_svfiprintf_r+0x1f0>)
 800d354:	a904      	add	r1, sp, #16
 800d356:	4638      	mov	r0, r7
 800d358:	f7fd fd52 	bl	800ae00 <_printf_float>
 800d35c:	1c42      	adds	r2, r0, #1
 800d35e:	4606      	mov	r6, r0
 800d360:	d1d6      	bne.n	800d310 <_svfiprintf_r+0x174>
 800d362:	89ab      	ldrh	r3, [r5, #12]
 800d364:	065b      	lsls	r3, r3, #25
 800d366:	f53f af2d 	bmi.w	800d1c4 <_svfiprintf_r+0x28>
 800d36a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d36c:	e72c      	b.n	800d1c8 <_svfiprintf_r+0x2c>
 800d36e:	ab03      	add	r3, sp, #12
 800d370:	9300      	str	r3, [sp, #0]
 800d372:	462a      	mov	r2, r5
 800d374:	4b05      	ldr	r3, [pc, #20]	@ (800d38c <_svfiprintf_r+0x1f0>)
 800d376:	a904      	add	r1, sp, #16
 800d378:	4638      	mov	r0, r7
 800d37a:	f7fd ffd9 	bl	800b330 <_printf_i>
 800d37e:	e7ed      	b.n	800d35c <_svfiprintf_r+0x1c0>
 800d380:	0800e400 	.word	0x0800e400
 800d384:	0800e40a 	.word	0x0800e40a
 800d388:	0800ae01 	.word	0x0800ae01
 800d38c:	0800d0e5 	.word	0x0800d0e5
 800d390:	0800e406 	.word	0x0800e406

0800d394 <__sflush_r>:
 800d394:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d39c:	0716      	lsls	r6, r2, #28
 800d39e:	4605      	mov	r5, r0
 800d3a0:	460c      	mov	r4, r1
 800d3a2:	d454      	bmi.n	800d44e <__sflush_r+0xba>
 800d3a4:	684b      	ldr	r3, [r1, #4]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	dc02      	bgt.n	800d3b0 <__sflush_r+0x1c>
 800d3aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	dd48      	ble.n	800d442 <__sflush_r+0xae>
 800d3b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d3b2:	2e00      	cmp	r6, #0
 800d3b4:	d045      	beq.n	800d442 <__sflush_r+0xae>
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d3bc:	682f      	ldr	r7, [r5, #0]
 800d3be:	6a21      	ldr	r1, [r4, #32]
 800d3c0:	602b      	str	r3, [r5, #0]
 800d3c2:	d030      	beq.n	800d426 <__sflush_r+0x92>
 800d3c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d3c6:	89a3      	ldrh	r3, [r4, #12]
 800d3c8:	0759      	lsls	r1, r3, #29
 800d3ca:	d505      	bpl.n	800d3d8 <__sflush_r+0x44>
 800d3cc:	6863      	ldr	r3, [r4, #4]
 800d3ce:	1ad2      	subs	r2, r2, r3
 800d3d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d3d2:	b10b      	cbz	r3, 800d3d8 <__sflush_r+0x44>
 800d3d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d3d6:	1ad2      	subs	r2, r2, r3
 800d3d8:	2300      	movs	r3, #0
 800d3da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d3dc:	6a21      	ldr	r1, [r4, #32]
 800d3de:	4628      	mov	r0, r5
 800d3e0:	47b0      	blx	r6
 800d3e2:	1c43      	adds	r3, r0, #1
 800d3e4:	89a3      	ldrh	r3, [r4, #12]
 800d3e6:	d106      	bne.n	800d3f6 <__sflush_r+0x62>
 800d3e8:	6829      	ldr	r1, [r5, #0]
 800d3ea:	291d      	cmp	r1, #29
 800d3ec:	d82b      	bhi.n	800d446 <__sflush_r+0xb2>
 800d3ee:	4a2a      	ldr	r2, [pc, #168]	@ (800d498 <__sflush_r+0x104>)
 800d3f0:	410a      	asrs	r2, r1
 800d3f2:	07d6      	lsls	r6, r2, #31
 800d3f4:	d427      	bmi.n	800d446 <__sflush_r+0xb2>
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	6062      	str	r2, [r4, #4]
 800d3fa:	04d9      	lsls	r1, r3, #19
 800d3fc:	6922      	ldr	r2, [r4, #16]
 800d3fe:	6022      	str	r2, [r4, #0]
 800d400:	d504      	bpl.n	800d40c <__sflush_r+0x78>
 800d402:	1c42      	adds	r2, r0, #1
 800d404:	d101      	bne.n	800d40a <__sflush_r+0x76>
 800d406:	682b      	ldr	r3, [r5, #0]
 800d408:	b903      	cbnz	r3, 800d40c <__sflush_r+0x78>
 800d40a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d40c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d40e:	602f      	str	r7, [r5, #0]
 800d410:	b1b9      	cbz	r1, 800d442 <__sflush_r+0xae>
 800d412:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d416:	4299      	cmp	r1, r3
 800d418:	d002      	beq.n	800d420 <__sflush_r+0x8c>
 800d41a:	4628      	mov	r0, r5
 800d41c:	f7ff f9e0 	bl	800c7e0 <_free_r>
 800d420:	2300      	movs	r3, #0
 800d422:	6363      	str	r3, [r4, #52]	@ 0x34
 800d424:	e00d      	b.n	800d442 <__sflush_r+0xae>
 800d426:	2301      	movs	r3, #1
 800d428:	4628      	mov	r0, r5
 800d42a:	47b0      	blx	r6
 800d42c:	4602      	mov	r2, r0
 800d42e:	1c50      	adds	r0, r2, #1
 800d430:	d1c9      	bne.n	800d3c6 <__sflush_r+0x32>
 800d432:	682b      	ldr	r3, [r5, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d0c6      	beq.n	800d3c6 <__sflush_r+0x32>
 800d438:	2b1d      	cmp	r3, #29
 800d43a:	d001      	beq.n	800d440 <__sflush_r+0xac>
 800d43c:	2b16      	cmp	r3, #22
 800d43e:	d11e      	bne.n	800d47e <__sflush_r+0xea>
 800d440:	602f      	str	r7, [r5, #0]
 800d442:	2000      	movs	r0, #0
 800d444:	e022      	b.n	800d48c <__sflush_r+0xf8>
 800d446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d44a:	b21b      	sxth	r3, r3
 800d44c:	e01b      	b.n	800d486 <__sflush_r+0xf2>
 800d44e:	690f      	ldr	r7, [r1, #16]
 800d450:	2f00      	cmp	r7, #0
 800d452:	d0f6      	beq.n	800d442 <__sflush_r+0xae>
 800d454:	0793      	lsls	r3, r2, #30
 800d456:	680e      	ldr	r6, [r1, #0]
 800d458:	bf08      	it	eq
 800d45a:	694b      	ldreq	r3, [r1, #20]
 800d45c:	600f      	str	r7, [r1, #0]
 800d45e:	bf18      	it	ne
 800d460:	2300      	movne	r3, #0
 800d462:	eba6 0807 	sub.w	r8, r6, r7
 800d466:	608b      	str	r3, [r1, #8]
 800d468:	f1b8 0f00 	cmp.w	r8, #0
 800d46c:	dde9      	ble.n	800d442 <__sflush_r+0xae>
 800d46e:	6a21      	ldr	r1, [r4, #32]
 800d470:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d472:	4643      	mov	r3, r8
 800d474:	463a      	mov	r2, r7
 800d476:	4628      	mov	r0, r5
 800d478:	47b0      	blx	r6
 800d47a:	2800      	cmp	r0, #0
 800d47c:	dc08      	bgt.n	800d490 <__sflush_r+0xfc>
 800d47e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d486:	81a3      	strh	r3, [r4, #12]
 800d488:	f04f 30ff 	mov.w	r0, #4294967295
 800d48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d490:	4407      	add	r7, r0
 800d492:	eba8 0800 	sub.w	r8, r8, r0
 800d496:	e7e7      	b.n	800d468 <__sflush_r+0xd4>
 800d498:	dfbffffe 	.word	0xdfbffffe

0800d49c <_fflush_r>:
 800d49c:	b538      	push	{r3, r4, r5, lr}
 800d49e:	690b      	ldr	r3, [r1, #16]
 800d4a0:	4605      	mov	r5, r0
 800d4a2:	460c      	mov	r4, r1
 800d4a4:	b913      	cbnz	r3, 800d4ac <_fflush_r+0x10>
 800d4a6:	2500      	movs	r5, #0
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	bd38      	pop	{r3, r4, r5, pc}
 800d4ac:	b118      	cbz	r0, 800d4b6 <_fflush_r+0x1a>
 800d4ae:	6a03      	ldr	r3, [r0, #32]
 800d4b0:	b90b      	cbnz	r3, 800d4b6 <_fflush_r+0x1a>
 800d4b2:	f7fe f8e9 	bl	800b688 <__sinit>
 800d4b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d0f3      	beq.n	800d4a6 <_fflush_r+0xa>
 800d4be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d4c0:	07d0      	lsls	r0, r2, #31
 800d4c2:	d404      	bmi.n	800d4ce <_fflush_r+0x32>
 800d4c4:	0599      	lsls	r1, r3, #22
 800d4c6:	d402      	bmi.n	800d4ce <_fflush_r+0x32>
 800d4c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d4ca:	f7fe fb0c 	bl	800bae6 <__retarget_lock_acquire_recursive>
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	4621      	mov	r1, r4
 800d4d2:	f7ff ff5f 	bl	800d394 <__sflush_r>
 800d4d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d4d8:	07da      	lsls	r2, r3, #31
 800d4da:	4605      	mov	r5, r0
 800d4dc:	d4e4      	bmi.n	800d4a8 <_fflush_r+0xc>
 800d4de:	89a3      	ldrh	r3, [r4, #12]
 800d4e0:	059b      	lsls	r3, r3, #22
 800d4e2:	d4e1      	bmi.n	800d4a8 <_fflush_r+0xc>
 800d4e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d4e6:	f7fe faff 	bl	800bae8 <__retarget_lock_release_recursive>
 800d4ea:	e7dd      	b.n	800d4a8 <_fflush_r+0xc>

0800d4ec <fiprintf>:
 800d4ec:	b40e      	push	{r1, r2, r3}
 800d4ee:	b503      	push	{r0, r1, lr}
 800d4f0:	4601      	mov	r1, r0
 800d4f2:	ab03      	add	r3, sp, #12
 800d4f4:	4805      	ldr	r0, [pc, #20]	@ (800d50c <fiprintf+0x20>)
 800d4f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4fa:	6800      	ldr	r0, [r0, #0]
 800d4fc:	9301      	str	r3, [sp, #4]
 800d4fe:	f000 f947 	bl	800d790 <_vfiprintf_r>
 800d502:	b002      	add	sp, #8
 800d504:	f85d eb04 	ldr.w	lr, [sp], #4
 800d508:	b003      	add	sp, #12
 800d50a:	4770      	bx	lr
 800d50c:	2000018c 	.word	0x2000018c

0800d510 <__swhatbuf_r>:
 800d510:	b570      	push	{r4, r5, r6, lr}
 800d512:	460c      	mov	r4, r1
 800d514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d518:	2900      	cmp	r1, #0
 800d51a:	b096      	sub	sp, #88	@ 0x58
 800d51c:	4615      	mov	r5, r2
 800d51e:	461e      	mov	r6, r3
 800d520:	da0d      	bge.n	800d53e <__swhatbuf_r+0x2e>
 800d522:	89a3      	ldrh	r3, [r4, #12]
 800d524:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d528:	f04f 0100 	mov.w	r1, #0
 800d52c:	bf14      	ite	ne
 800d52e:	2340      	movne	r3, #64	@ 0x40
 800d530:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d534:	2000      	movs	r0, #0
 800d536:	6031      	str	r1, [r6, #0]
 800d538:	602b      	str	r3, [r5, #0]
 800d53a:	b016      	add	sp, #88	@ 0x58
 800d53c:	bd70      	pop	{r4, r5, r6, pc}
 800d53e:	466a      	mov	r2, sp
 800d540:	f000 f862 	bl	800d608 <_fstat_r>
 800d544:	2800      	cmp	r0, #0
 800d546:	dbec      	blt.n	800d522 <__swhatbuf_r+0x12>
 800d548:	9901      	ldr	r1, [sp, #4]
 800d54a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d54e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d552:	4259      	negs	r1, r3
 800d554:	4159      	adcs	r1, r3
 800d556:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d55a:	e7eb      	b.n	800d534 <__swhatbuf_r+0x24>

0800d55c <__smakebuf_r>:
 800d55c:	898b      	ldrh	r3, [r1, #12]
 800d55e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d560:	079d      	lsls	r5, r3, #30
 800d562:	4606      	mov	r6, r0
 800d564:	460c      	mov	r4, r1
 800d566:	d507      	bpl.n	800d578 <__smakebuf_r+0x1c>
 800d568:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d56c:	6023      	str	r3, [r4, #0]
 800d56e:	6123      	str	r3, [r4, #16]
 800d570:	2301      	movs	r3, #1
 800d572:	6163      	str	r3, [r4, #20]
 800d574:	b003      	add	sp, #12
 800d576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d578:	ab01      	add	r3, sp, #4
 800d57a:	466a      	mov	r2, sp
 800d57c:	f7ff ffc8 	bl	800d510 <__swhatbuf_r>
 800d580:	9f00      	ldr	r7, [sp, #0]
 800d582:	4605      	mov	r5, r0
 800d584:	4639      	mov	r1, r7
 800d586:	4630      	mov	r0, r6
 800d588:	f7ff f99e 	bl	800c8c8 <_malloc_r>
 800d58c:	b948      	cbnz	r0, 800d5a2 <__smakebuf_r+0x46>
 800d58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d592:	059a      	lsls	r2, r3, #22
 800d594:	d4ee      	bmi.n	800d574 <__smakebuf_r+0x18>
 800d596:	f023 0303 	bic.w	r3, r3, #3
 800d59a:	f043 0302 	orr.w	r3, r3, #2
 800d59e:	81a3      	strh	r3, [r4, #12]
 800d5a0:	e7e2      	b.n	800d568 <__smakebuf_r+0xc>
 800d5a2:	89a3      	ldrh	r3, [r4, #12]
 800d5a4:	6020      	str	r0, [r4, #0]
 800d5a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5aa:	81a3      	strh	r3, [r4, #12]
 800d5ac:	9b01      	ldr	r3, [sp, #4]
 800d5ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d5b2:	b15b      	cbz	r3, 800d5cc <__smakebuf_r+0x70>
 800d5b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5b8:	4630      	mov	r0, r6
 800d5ba:	f000 f837 	bl	800d62c <_isatty_r>
 800d5be:	b128      	cbz	r0, 800d5cc <__smakebuf_r+0x70>
 800d5c0:	89a3      	ldrh	r3, [r4, #12]
 800d5c2:	f023 0303 	bic.w	r3, r3, #3
 800d5c6:	f043 0301 	orr.w	r3, r3, #1
 800d5ca:	81a3      	strh	r3, [r4, #12]
 800d5cc:	89a3      	ldrh	r3, [r4, #12]
 800d5ce:	431d      	orrs	r5, r3
 800d5d0:	81a5      	strh	r5, [r4, #12]
 800d5d2:	e7cf      	b.n	800d574 <__smakebuf_r+0x18>

0800d5d4 <memmove>:
 800d5d4:	4288      	cmp	r0, r1
 800d5d6:	b510      	push	{r4, lr}
 800d5d8:	eb01 0402 	add.w	r4, r1, r2
 800d5dc:	d902      	bls.n	800d5e4 <memmove+0x10>
 800d5de:	4284      	cmp	r4, r0
 800d5e0:	4623      	mov	r3, r4
 800d5e2:	d807      	bhi.n	800d5f4 <memmove+0x20>
 800d5e4:	1e43      	subs	r3, r0, #1
 800d5e6:	42a1      	cmp	r1, r4
 800d5e8:	d008      	beq.n	800d5fc <memmove+0x28>
 800d5ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5f2:	e7f8      	b.n	800d5e6 <memmove+0x12>
 800d5f4:	4402      	add	r2, r0
 800d5f6:	4601      	mov	r1, r0
 800d5f8:	428a      	cmp	r2, r1
 800d5fa:	d100      	bne.n	800d5fe <memmove+0x2a>
 800d5fc:	bd10      	pop	{r4, pc}
 800d5fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d606:	e7f7      	b.n	800d5f8 <memmove+0x24>

0800d608 <_fstat_r>:
 800d608:	b538      	push	{r3, r4, r5, lr}
 800d60a:	4d07      	ldr	r5, [pc, #28]	@ (800d628 <_fstat_r+0x20>)
 800d60c:	2300      	movs	r3, #0
 800d60e:	4604      	mov	r4, r0
 800d610:	4608      	mov	r0, r1
 800d612:	4611      	mov	r1, r2
 800d614:	602b      	str	r3, [r5, #0]
 800d616:	f7f5 fb4f 	bl	8002cb8 <_fstat>
 800d61a:	1c43      	adds	r3, r0, #1
 800d61c:	d102      	bne.n	800d624 <_fstat_r+0x1c>
 800d61e:	682b      	ldr	r3, [r5, #0]
 800d620:	b103      	cbz	r3, 800d624 <_fstat_r+0x1c>
 800d622:	6023      	str	r3, [r4, #0]
 800d624:	bd38      	pop	{r3, r4, r5, pc}
 800d626:	bf00      	nop
 800d628:	20006638 	.word	0x20006638

0800d62c <_isatty_r>:
 800d62c:	b538      	push	{r3, r4, r5, lr}
 800d62e:	4d06      	ldr	r5, [pc, #24]	@ (800d648 <_isatty_r+0x1c>)
 800d630:	2300      	movs	r3, #0
 800d632:	4604      	mov	r4, r0
 800d634:	4608      	mov	r0, r1
 800d636:	602b      	str	r3, [r5, #0]
 800d638:	f7f5 fb4e 	bl	8002cd8 <_isatty>
 800d63c:	1c43      	adds	r3, r0, #1
 800d63e:	d102      	bne.n	800d646 <_isatty_r+0x1a>
 800d640:	682b      	ldr	r3, [r5, #0]
 800d642:	b103      	cbz	r3, 800d646 <_isatty_r+0x1a>
 800d644:	6023      	str	r3, [r4, #0]
 800d646:	bd38      	pop	{r3, r4, r5, pc}
 800d648:	20006638 	.word	0x20006638

0800d64c <_sbrk_r>:
 800d64c:	b538      	push	{r3, r4, r5, lr}
 800d64e:	4d06      	ldr	r5, [pc, #24]	@ (800d668 <_sbrk_r+0x1c>)
 800d650:	2300      	movs	r3, #0
 800d652:	4604      	mov	r4, r0
 800d654:	4608      	mov	r0, r1
 800d656:	602b      	str	r3, [r5, #0]
 800d658:	f7f5 fb56 	bl	8002d08 <_sbrk>
 800d65c:	1c43      	adds	r3, r0, #1
 800d65e:	d102      	bne.n	800d666 <_sbrk_r+0x1a>
 800d660:	682b      	ldr	r3, [r5, #0]
 800d662:	b103      	cbz	r3, 800d666 <_sbrk_r+0x1a>
 800d664:	6023      	str	r3, [r4, #0]
 800d666:	bd38      	pop	{r3, r4, r5, pc}
 800d668:	20006638 	.word	0x20006638

0800d66c <abort>:
 800d66c:	b508      	push	{r3, lr}
 800d66e:	2006      	movs	r0, #6
 800d670:	f000 f9ce 	bl	800da10 <raise>
 800d674:	2001      	movs	r0, #1
 800d676:	f7f5 faeb 	bl	8002c50 <_exit>

0800d67a <_calloc_r>:
 800d67a:	b570      	push	{r4, r5, r6, lr}
 800d67c:	fba1 5402 	umull	r5, r4, r1, r2
 800d680:	b93c      	cbnz	r4, 800d692 <_calloc_r+0x18>
 800d682:	4629      	mov	r1, r5
 800d684:	f7ff f920 	bl	800c8c8 <_malloc_r>
 800d688:	4606      	mov	r6, r0
 800d68a:	b928      	cbnz	r0, 800d698 <_calloc_r+0x1e>
 800d68c:	2600      	movs	r6, #0
 800d68e:	4630      	mov	r0, r6
 800d690:	bd70      	pop	{r4, r5, r6, pc}
 800d692:	220c      	movs	r2, #12
 800d694:	6002      	str	r2, [r0, #0]
 800d696:	e7f9      	b.n	800d68c <_calloc_r+0x12>
 800d698:	462a      	mov	r2, r5
 800d69a:	4621      	mov	r1, r4
 800d69c:	f7fe f9b8 	bl	800ba10 <memset>
 800d6a0:	e7f5      	b.n	800d68e <_calloc_r+0x14>

0800d6a2 <__ascii_mbtowc>:
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	b901      	cbnz	r1, 800d6a8 <__ascii_mbtowc+0x6>
 800d6a6:	a901      	add	r1, sp, #4
 800d6a8:	b142      	cbz	r2, 800d6bc <__ascii_mbtowc+0x1a>
 800d6aa:	b14b      	cbz	r3, 800d6c0 <__ascii_mbtowc+0x1e>
 800d6ac:	7813      	ldrb	r3, [r2, #0]
 800d6ae:	600b      	str	r3, [r1, #0]
 800d6b0:	7812      	ldrb	r2, [r2, #0]
 800d6b2:	1e10      	subs	r0, r2, #0
 800d6b4:	bf18      	it	ne
 800d6b6:	2001      	movne	r0, #1
 800d6b8:	b002      	add	sp, #8
 800d6ba:	4770      	bx	lr
 800d6bc:	4610      	mov	r0, r2
 800d6be:	e7fb      	b.n	800d6b8 <__ascii_mbtowc+0x16>
 800d6c0:	f06f 0001 	mvn.w	r0, #1
 800d6c4:	e7f8      	b.n	800d6b8 <__ascii_mbtowc+0x16>

0800d6c6 <_realloc_r>:
 800d6c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ca:	4680      	mov	r8, r0
 800d6cc:	4615      	mov	r5, r2
 800d6ce:	460c      	mov	r4, r1
 800d6d0:	b921      	cbnz	r1, 800d6dc <_realloc_r+0x16>
 800d6d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d6:	4611      	mov	r1, r2
 800d6d8:	f7ff b8f6 	b.w	800c8c8 <_malloc_r>
 800d6dc:	b92a      	cbnz	r2, 800d6ea <_realloc_r+0x24>
 800d6de:	f7ff f87f 	bl	800c7e0 <_free_r>
 800d6e2:	2400      	movs	r4, #0
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6ea:	f000 f9ad 	bl	800da48 <_malloc_usable_size_r>
 800d6ee:	4285      	cmp	r5, r0
 800d6f0:	4606      	mov	r6, r0
 800d6f2:	d802      	bhi.n	800d6fa <_realloc_r+0x34>
 800d6f4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d6f8:	d8f4      	bhi.n	800d6e4 <_realloc_r+0x1e>
 800d6fa:	4629      	mov	r1, r5
 800d6fc:	4640      	mov	r0, r8
 800d6fe:	f7ff f8e3 	bl	800c8c8 <_malloc_r>
 800d702:	4607      	mov	r7, r0
 800d704:	2800      	cmp	r0, #0
 800d706:	d0ec      	beq.n	800d6e2 <_realloc_r+0x1c>
 800d708:	42b5      	cmp	r5, r6
 800d70a:	462a      	mov	r2, r5
 800d70c:	4621      	mov	r1, r4
 800d70e:	bf28      	it	cs
 800d710:	4632      	movcs	r2, r6
 800d712:	f7fe f9ea 	bl	800baea <memcpy>
 800d716:	4621      	mov	r1, r4
 800d718:	4640      	mov	r0, r8
 800d71a:	f7ff f861 	bl	800c7e0 <_free_r>
 800d71e:	463c      	mov	r4, r7
 800d720:	e7e0      	b.n	800d6e4 <_realloc_r+0x1e>

0800d722 <__ascii_wctomb>:
 800d722:	4603      	mov	r3, r0
 800d724:	4608      	mov	r0, r1
 800d726:	b141      	cbz	r1, 800d73a <__ascii_wctomb+0x18>
 800d728:	2aff      	cmp	r2, #255	@ 0xff
 800d72a:	d904      	bls.n	800d736 <__ascii_wctomb+0x14>
 800d72c:	228a      	movs	r2, #138	@ 0x8a
 800d72e:	601a      	str	r2, [r3, #0]
 800d730:	f04f 30ff 	mov.w	r0, #4294967295
 800d734:	4770      	bx	lr
 800d736:	700a      	strb	r2, [r1, #0]
 800d738:	2001      	movs	r0, #1
 800d73a:	4770      	bx	lr

0800d73c <__sfputc_r>:
 800d73c:	6893      	ldr	r3, [r2, #8]
 800d73e:	3b01      	subs	r3, #1
 800d740:	2b00      	cmp	r3, #0
 800d742:	b410      	push	{r4}
 800d744:	6093      	str	r3, [r2, #8]
 800d746:	da08      	bge.n	800d75a <__sfputc_r+0x1e>
 800d748:	6994      	ldr	r4, [r2, #24]
 800d74a:	42a3      	cmp	r3, r4
 800d74c:	db01      	blt.n	800d752 <__sfputc_r+0x16>
 800d74e:	290a      	cmp	r1, #10
 800d750:	d103      	bne.n	800d75a <__sfputc_r+0x1e>
 800d752:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d756:	f7fe b8c7 	b.w	800b8e8 <__swbuf_r>
 800d75a:	6813      	ldr	r3, [r2, #0]
 800d75c:	1c58      	adds	r0, r3, #1
 800d75e:	6010      	str	r0, [r2, #0]
 800d760:	7019      	strb	r1, [r3, #0]
 800d762:	4608      	mov	r0, r1
 800d764:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d768:	4770      	bx	lr

0800d76a <__sfputs_r>:
 800d76a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d76c:	4606      	mov	r6, r0
 800d76e:	460f      	mov	r7, r1
 800d770:	4614      	mov	r4, r2
 800d772:	18d5      	adds	r5, r2, r3
 800d774:	42ac      	cmp	r4, r5
 800d776:	d101      	bne.n	800d77c <__sfputs_r+0x12>
 800d778:	2000      	movs	r0, #0
 800d77a:	e007      	b.n	800d78c <__sfputs_r+0x22>
 800d77c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d780:	463a      	mov	r2, r7
 800d782:	4630      	mov	r0, r6
 800d784:	f7ff ffda 	bl	800d73c <__sfputc_r>
 800d788:	1c43      	adds	r3, r0, #1
 800d78a:	d1f3      	bne.n	800d774 <__sfputs_r+0xa>
 800d78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d790 <_vfiprintf_r>:
 800d790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d794:	460d      	mov	r5, r1
 800d796:	b09d      	sub	sp, #116	@ 0x74
 800d798:	4614      	mov	r4, r2
 800d79a:	4698      	mov	r8, r3
 800d79c:	4606      	mov	r6, r0
 800d79e:	b118      	cbz	r0, 800d7a8 <_vfiprintf_r+0x18>
 800d7a0:	6a03      	ldr	r3, [r0, #32]
 800d7a2:	b90b      	cbnz	r3, 800d7a8 <_vfiprintf_r+0x18>
 800d7a4:	f7fd ff70 	bl	800b688 <__sinit>
 800d7a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7aa:	07d9      	lsls	r1, r3, #31
 800d7ac:	d405      	bmi.n	800d7ba <_vfiprintf_r+0x2a>
 800d7ae:	89ab      	ldrh	r3, [r5, #12]
 800d7b0:	059a      	lsls	r2, r3, #22
 800d7b2:	d402      	bmi.n	800d7ba <_vfiprintf_r+0x2a>
 800d7b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7b6:	f7fe f996 	bl	800bae6 <__retarget_lock_acquire_recursive>
 800d7ba:	89ab      	ldrh	r3, [r5, #12]
 800d7bc:	071b      	lsls	r3, r3, #28
 800d7be:	d501      	bpl.n	800d7c4 <_vfiprintf_r+0x34>
 800d7c0:	692b      	ldr	r3, [r5, #16]
 800d7c2:	b99b      	cbnz	r3, 800d7ec <_vfiprintf_r+0x5c>
 800d7c4:	4629      	mov	r1, r5
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	f7fe f8cc 	bl	800b964 <__swsetup_r>
 800d7cc:	b170      	cbz	r0, 800d7ec <_vfiprintf_r+0x5c>
 800d7ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7d0:	07dc      	lsls	r4, r3, #31
 800d7d2:	d504      	bpl.n	800d7de <_vfiprintf_r+0x4e>
 800d7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d8:	b01d      	add	sp, #116	@ 0x74
 800d7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7de:	89ab      	ldrh	r3, [r5, #12]
 800d7e0:	0598      	lsls	r0, r3, #22
 800d7e2:	d4f7      	bmi.n	800d7d4 <_vfiprintf_r+0x44>
 800d7e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7e6:	f7fe f97f 	bl	800bae8 <__retarget_lock_release_recursive>
 800d7ea:	e7f3      	b.n	800d7d4 <_vfiprintf_r+0x44>
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7f0:	2320      	movs	r3, #32
 800d7f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d7f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7fa:	2330      	movs	r3, #48	@ 0x30
 800d7fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d9ac <_vfiprintf_r+0x21c>
 800d800:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d804:	f04f 0901 	mov.w	r9, #1
 800d808:	4623      	mov	r3, r4
 800d80a:	469a      	mov	sl, r3
 800d80c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d810:	b10a      	cbz	r2, 800d816 <_vfiprintf_r+0x86>
 800d812:	2a25      	cmp	r2, #37	@ 0x25
 800d814:	d1f9      	bne.n	800d80a <_vfiprintf_r+0x7a>
 800d816:	ebba 0b04 	subs.w	fp, sl, r4
 800d81a:	d00b      	beq.n	800d834 <_vfiprintf_r+0xa4>
 800d81c:	465b      	mov	r3, fp
 800d81e:	4622      	mov	r2, r4
 800d820:	4629      	mov	r1, r5
 800d822:	4630      	mov	r0, r6
 800d824:	f7ff ffa1 	bl	800d76a <__sfputs_r>
 800d828:	3001      	adds	r0, #1
 800d82a:	f000 80a7 	beq.w	800d97c <_vfiprintf_r+0x1ec>
 800d82e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d830:	445a      	add	r2, fp
 800d832:	9209      	str	r2, [sp, #36]	@ 0x24
 800d834:	f89a 3000 	ldrb.w	r3, [sl]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	f000 809f 	beq.w	800d97c <_vfiprintf_r+0x1ec>
 800d83e:	2300      	movs	r3, #0
 800d840:	f04f 32ff 	mov.w	r2, #4294967295
 800d844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d848:	f10a 0a01 	add.w	sl, sl, #1
 800d84c:	9304      	str	r3, [sp, #16]
 800d84e:	9307      	str	r3, [sp, #28]
 800d850:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d854:	931a      	str	r3, [sp, #104]	@ 0x68
 800d856:	4654      	mov	r4, sl
 800d858:	2205      	movs	r2, #5
 800d85a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d85e:	4853      	ldr	r0, [pc, #332]	@ (800d9ac <_vfiprintf_r+0x21c>)
 800d860:	f7f2 fd0e 	bl	8000280 <memchr>
 800d864:	9a04      	ldr	r2, [sp, #16]
 800d866:	b9d8      	cbnz	r0, 800d8a0 <_vfiprintf_r+0x110>
 800d868:	06d1      	lsls	r1, r2, #27
 800d86a:	bf44      	itt	mi
 800d86c:	2320      	movmi	r3, #32
 800d86e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d872:	0713      	lsls	r3, r2, #28
 800d874:	bf44      	itt	mi
 800d876:	232b      	movmi	r3, #43	@ 0x2b
 800d878:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d87c:	f89a 3000 	ldrb.w	r3, [sl]
 800d880:	2b2a      	cmp	r3, #42	@ 0x2a
 800d882:	d015      	beq.n	800d8b0 <_vfiprintf_r+0x120>
 800d884:	9a07      	ldr	r2, [sp, #28]
 800d886:	4654      	mov	r4, sl
 800d888:	2000      	movs	r0, #0
 800d88a:	f04f 0c0a 	mov.w	ip, #10
 800d88e:	4621      	mov	r1, r4
 800d890:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d894:	3b30      	subs	r3, #48	@ 0x30
 800d896:	2b09      	cmp	r3, #9
 800d898:	d94b      	bls.n	800d932 <_vfiprintf_r+0x1a2>
 800d89a:	b1b0      	cbz	r0, 800d8ca <_vfiprintf_r+0x13a>
 800d89c:	9207      	str	r2, [sp, #28]
 800d89e:	e014      	b.n	800d8ca <_vfiprintf_r+0x13a>
 800d8a0:	eba0 0308 	sub.w	r3, r0, r8
 800d8a4:	fa09 f303 	lsl.w	r3, r9, r3
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	9304      	str	r3, [sp, #16]
 800d8ac:	46a2      	mov	sl, r4
 800d8ae:	e7d2      	b.n	800d856 <_vfiprintf_r+0xc6>
 800d8b0:	9b03      	ldr	r3, [sp, #12]
 800d8b2:	1d19      	adds	r1, r3, #4
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	9103      	str	r1, [sp, #12]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	bfbb      	ittet	lt
 800d8bc:	425b      	neglt	r3, r3
 800d8be:	f042 0202 	orrlt.w	r2, r2, #2
 800d8c2:	9307      	strge	r3, [sp, #28]
 800d8c4:	9307      	strlt	r3, [sp, #28]
 800d8c6:	bfb8      	it	lt
 800d8c8:	9204      	strlt	r2, [sp, #16]
 800d8ca:	7823      	ldrb	r3, [r4, #0]
 800d8cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8ce:	d10a      	bne.n	800d8e6 <_vfiprintf_r+0x156>
 800d8d0:	7863      	ldrb	r3, [r4, #1]
 800d8d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8d4:	d132      	bne.n	800d93c <_vfiprintf_r+0x1ac>
 800d8d6:	9b03      	ldr	r3, [sp, #12]
 800d8d8:	1d1a      	adds	r2, r3, #4
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	9203      	str	r2, [sp, #12]
 800d8de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d8e2:	3402      	adds	r4, #2
 800d8e4:	9305      	str	r3, [sp, #20]
 800d8e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d9bc <_vfiprintf_r+0x22c>
 800d8ea:	7821      	ldrb	r1, [r4, #0]
 800d8ec:	2203      	movs	r2, #3
 800d8ee:	4650      	mov	r0, sl
 800d8f0:	f7f2 fcc6 	bl	8000280 <memchr>
 800d8f4:	b138      	cbz	r0, 800d906 <_vfiprintf_r+0x176>
 800d8f6:	9b04      	ldr	r3, [sp, #16]
 800d8f8:	eba0 000a 	sub.w	r0, r0, sl
 800d8fc:	2240      	movs	r2, #64	@ 0x40
 800d8fe:	4082      	lsls	r2, r0
 800d900:	4313      	orrs	r3, r2
 800d902:	3401      	adds	r4, #1
 800d904:	9304      	str	r3, [sp, #16]
 800d906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d90a:	4829      	ldr	r0, [pc, #164]	@ (800d9b0 <_vfiprintf_r+0x220>)
 800d90c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d910:	2206      	movs	r2, #6
 800d912:	f7f2 fcb5 	bl	8000280 <memchr>
 800d916:	2800      	cmp	r0, #0
 800d918:	d03f      	beq.n	800d99a <_vfiprintf_r+0x20a>
 800d91a:	4b26      	ldr	r3, [pc, #152]	@ (800d9b4 <_vfiprintf_r+0x224>)
 800d91c:	bb1b      	cbnz	r3, 800d966 <_vfiprintf_r+0x1d6>
 800d91e:	9b03      	ldr	r3, [sp, #12]
 800d920:	3307      	adds	r3, #7
 800d922:	f023 0307 	bic.w	r3, r3, #7
 800d926:	3308      	adds	r3, #8
 800d928:	9303      	str	r3, [sp, #12]
 800d92a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d92c:	443b      	add	r3, r7
 800d92e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d930:	e76a      	b.n	800d808 <_vfiprintf_r+0x78>
 800d932:	fb0c 3202 	mla	r2, ip, r2, r3
 800d936:	460c      	mov	r4, r1
 800d938:	2001      	movs	r0, #1
 800d93a:	e7a8      	b.n	800d88e <_vfiprintf_r+0xfe>
 800d93c:	2300      	movs	r3, #0
 800d93e:	3401      	adds	r4, #1
 800d940:	9305      	str	r3, [sp, #20]
 800d942:	4619      	mov	r1, r3
 800d944:	f04f 0c0a 	mov.w	ip, #10
 800d948:	4620      	mov	r0, r4
 800d94a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d94e:	3a30      	subs	r2, #48	@ 0x30
 800d950:	2a09      	cmp	r2, #9
 800d952:	d903      	bls.n	800d95c <_vfiprintf_r+0x1cc>
 800d954:	2b00      	cmp	r3, #0
 800d956:	d0c6      	beq.n	800d8e6 <_vfiprintf_r+0x156>
 800d958:	9105      	str	r1, [sp, #20]
 800d95a:	e7c4      	b.n	800d8e6 <_vfiprintf_r+0x156>
 800d95c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d960:	4604      	mov	r4, r0
 800d962:	2301      	movs	r3, #1
 800d964:	e7f0      	b.n	800d948 <_vfiprintf_r+0x1b8>
 800d966:	ab03      	add	r3, sp, #12
 800d968:	9300      	str	r3, [sp, #0]
 800d96a:	462a      	mov	r2, r5
 800d96c:	4b12      	ldr	r3, [pc, #72]	@ (800d9b8 <_vfiprintf_r+0x228>)
 800d96e:	a904      	add	r1, sp, #16
 800d970:	4630      	mov	r0, r6
 800d972:	f7fd fa45 	bl	800ae00 <_printf_float>
 800d976:	4607      	mov	r7, r0
 800d978:	1c78      	adds	r0, r7, #1
 800d97a:	d1d6      	bne.n	800d92a <_vfiprintf_r+0x19a>
 800d97c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d97e:	07d9      	lsls	r1, r3, #31
 800d980:	d405      	bmi.n	800d98e <_vfiprintf_r+0x1fe>
 800d982:	89ab      	ldrh	r3, [r5, #12]
 800d984:	059a      	lsls	r2, r3, #22
 800d986:	d402      	bmi.n	800d98e <_vfiprintf_r+0x1fe>
 800d988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d98a:	f7fe f8ad 	bl	800bae8 <__retarget_lock_release_recursive>
 800d98e:	89ab      	ldrh	r3, [r5, #12]
 800d990:	065b      	lsls	r3, r3, #25
 800d992:	f53f af1f 	bmi.w	800d7d4 <_vfiprintf_r+0x44>
 800d996:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d998:	e71e      	b.n	800d7d8 <_vfiprintf_r+0x48>
 800d99a:	ab03      	add	r3, sp, #12
 800d99c:	9300      	str	r3, [sp, #0]
 800d99e:	462a      	mov	r2, r5
 800d9a0:	4b05      	ldr	r3, [pc, #20]	@ (800d9b8 <_vfiprintf_r+0x228>)
 800d9a2:	a904      	add	r1, sp, #16
 800d9a4:	4630      	mov	r0, r6
 800d9a6:	f7fd fcc3 	bl	800b330 <_printf_i>
 800d9aa:	e7e4      	b.n	800d976 <_vfiprintf_r+0x1e6>
 800d9ac:	0800e400 	.word	0x0800e400
 800d9b0:	0800e40a 	.word	0x0800e40a
 800d9b4:	0800ae01 	.word	0x0800ae01
 800d9b8:	0800d76b 	.word	0x0800d76b
 800d9bc:	0800e406 	.word	0x0800e406

0800d9c0 <_raise_r>:
 800d9c0:	291f      	cmp	r1, #31
 800d9c2:	b538      	push	{r3, r4, r5, lr}
 800d9c4:	4605      	mov	r5, r0
 800d9c6:	460c      	mov	r4, r1
 800d9c8:	d904      	bls.n	800d9d4 <_raise_r+0x14>
 800d9ca:	2316      	movs	r3, #22
 800d9cc:	6003      	str	r3, [r0, #0]
 800d9ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d2:	bd38      	pop	{r3, r4, r5, pc}
 800d9d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d9d6:	b112      	cbz	r2, 800d9de <_raise_r+0x1e>
 800d9d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9dc:	b94b      	cbnz	r3, 800d9f2 <_raise_r+0x32>
 800d9de:	4628      	mov	r0, r5
 800d9e0:	f000 f830 	bl	800da44 <_getpid_r>
 800d9e4:	4622      	mov	r2, r4
 800d9e6:	4601      	mov	r1, r0
 800d9e8:	4628      	mov	r0, r5
 800d9ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9ee:	f000 b817 	b.w	800da20 <_kill_r>
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d00a      	beq.n	800da0c <_raise_r+0x4c>
 800d9f6:	1c59      	adds	r1, r3, #1
 800d9f8:	d103      	bne.n	800da02 <_raise_r+0x42>
 800d9fa:	2316      	movs	r3, #22
 800d9fc:	6003      	str	r3, [r0, #0]
 800d9fe:	2001      	movs	r0, #1
 800da00:	e7e7      	b.n	800d9d2 <_raise_r+0x12>
 800da02:	2100      	movs	r1, #0
 800da04:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800da08:	4620      	mov	r0, r4
 800da0a:	4798      	blx	r3
 800da0c:	2000      	movs	r0, #0
 800da0e:	e7e0      	b.n	800d9d2 <_raise_r+0x12>

0800da10 <raise>:
 800da10:	4b02      	ldr	r3, [pc, #8]	@ (800da1c <raise+0xc>)
 800da12:	4601      	mov	r1, r0
 800da14:	6818      	ldr	r0, [r3, #0]
 800da16:	f7ff bfd3 	b.w	800d9c0 <_raise_r>
 800da1a:	bf00      	nop
 800da1c:	2000018c 	.word	0x2000018c

0800da20 <_kill_r>:
 800da20:	b538      	push	{r3, r4, r5, lr}
 800da22:	4d07      	ldr	r5, [pc, #28]	@ (800da40 <_kill_r+0x20>)
 800da24:	2300      	movs	r3, #0
 800da26:	4604      	mov	r4, r0
 800da28:	4608      	mov	r0, r1
 800da2a:	4611      	mov	r1, r2
 800da2c:	602b      	str	r3, [r5, #0]
 800da2e:	f7f5 f8ff 	bl	8002c30 <_kill>
 800da32:	1c43      	adds	r3, r0, #1
 800da34:	d102      	bne.n	800da3c <_kill_r+0x1c>
 800da36:	682b      	ldr	r3, [r5, #0]
 800da38:	b103      	cbz	r3, 800da3c <_kill_r+0x1c>
 800da3a:	6023      	str	r3, [r4, #0]
 800da3c:	bd38      	pop	{r3, r4, r5, pc}
 800da3e:	bf00      	nop
 800da40:	20006638 	.word	0x20006638

0800da44 <_getpid_r>:
 800da44:	f7f5 b8ec 	b.w	8002c20 <_getpid>

0800da48 <_malloc_usable_size_r>:
 800da48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da4c:	1f18      	subs	r0, r3, #4
 800da4e:	2b00      	cmp	r3, #0
 800da50:	bfbc      	itt	lt
 800da52:	580b      	ldrlt	r3, [r1, r0]
 800da54:	18c0      	addlt	r0, r0, r3
 800da56:	4770      	bx	lr

0800da58 <_init>:
 800da58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da5a:	bf00      	nop
 800da5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da5e:	bc08      	pop	{r3}
 800da60:	469e      	mov	lr, r3
 800da62:	4770      	bx	lr

0800da64 <_fini>:
 800da64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da66:	bf00      	nop
 800da68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da6a:	bc08      	pop	{r3}
 800da6c:	469e      	mov	lr, r3
 800da6e:	4770      	bx	lr
