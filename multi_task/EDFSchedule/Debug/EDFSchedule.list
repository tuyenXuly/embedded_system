
EDFSchedule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdd8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b1c  0800bf78  0800bf78  0000cf78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca94  0800ca94  0000e328  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca94  0800ca94  0000da94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca9c  0800ca9c  0000e328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca9c  0800ca9c  0000da9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800caa0  0800caa0  0000daa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000328  20000000  0800caa4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c80  20000328  0800cdcc  0000e328  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004fa8  0800cdcc  0000efa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e328  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017801  00000000  00000000  0000e358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003941  00000000  00000000  00025b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  000294a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f57  00000000  00000000  0002a878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017efd  00000000  00000000  0002b7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018329  00000000  00000000  000436cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094c54  00000000  00000000  0005b9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0649  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000643c  00000000  00000000  000f068c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000f6ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000328 	.word	0x20000328
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bf60 	.word	0x0800bf60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000032c 	.word	0x2000032c
 80001dc:	0800bf60 	.word	0x0800bf60

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <Decimal2BCD>:
#define RTC_ADDRESS (0x68<<1) // do dia chi cua module ds3231 la 7 bit , bit 0 o cuoi la bit write
//cach 1
//extern I2C_HandleTypeDef hi2c1;
//cach 2
 static I2C_HandleTypeDef *ds_i2c; // bien static tuc la chi dung trong file nay
uint8_t Decimal2BCD(uint8_t num){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  return (num/10)<<4 | (num%10);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <Decimal2BCD+0x44>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	08db      	lsrs	r3, r3, #3
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	b258      	sxtb	r0, r3
 8000f62:	79fa      	ldrb	r2, [r7, #7]
 8000f64:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <Decimal2BCD+0x44>)
 8000f66:	fba3 1302 	umull	r1, r3, r3, r2
 8000f6a:	08d9      	lsrs	r1, r3, #3
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	4303      	orrs	r3, r0
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	b2db      	uxtb	r3, r3
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	cccccccd 	.word	0xcccccccd

08000f90 <BCD2Decimal>:
uint8_t BCD2Decimal(uint8_t num){
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  return (num>>4)*10 + (num&0x0F);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	4413      	add	r3, r2
 8000fb4:	b2db      	uxtb	r3, r3
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <rtc_write_time>:
// ghi du lieu
void rtc_write_time(DateTime *dt){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	6078      	str	r0, [r7, #4]
	uint8_t data[8];
	data[0]=0x00;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	723b      	strb	r3, [r7, #8]
	data[1]= Decimal2BCD(dt->sec);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	789b      	ldrb	r3, [r3, #2]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ffb7 	bl	8000f48 <Decimal2BCD>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	727b      	strb	r3, [r7, #9]
	data[2]= Decimal2BCD(dt->min);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	785b      	ldrb	r3, [r3, #1]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ffb0 	bl	8000f48 <Decimal2BCD>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	72bb      	strb	r3, [r7, #10]
	data[3]= Decimal2BCD(dt->hour);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ffa9 	bl	8000f48 <Decimal2BCD>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	72fb      	strb	r3, [r7, #11]
	data[4]= Decimal2BCD(dt->day);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	78db      	ldrb	r3, [r3, #3]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ffa2 	bl	8000f48 <Decimal2BCD>
 8001004:	4603      	mov	r3, r0
 8001006:	733b      	strb	r3, [r7, #12]
	data[5]= Decimal2BCD(dt->date);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	791b      	ldrb	r3, [r3, #4]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff9b 	bl	8000f48 <Decimal2BCD>
 8001012:	4603      	mov	r3, r0
 8001014:	737b      	strb	r3, [r7, #13]
	data[6]= Decimal2BCD(dt->mon);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	795b      	ldrb	r3, [r3, #5]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff94 	bl	8000f48 <Decimal2BCD>
 8001020:	4603      	mov	r3, r0
 8001022:	73bb      	strb	r3, [r7, #14]
	data[7]= Decimal2BCD(dt->year);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	799b      	ldrb	r3, [r3, #6]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff8d 	bl	8000f48 <Decimal2BCD>
 800102e:	4603      	mov	r3, r0
 8001030:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(ds_i2c,RTC_ADDRESS,data,8,100);
 8001032:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <rtc_write_time+0x8c>)
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	f107 0208 	add.w	r2, r7, #8
 800103a:	2364      	movs	r3, #100	@ 0x64
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2308      	movs	r3, #8
 8001040:	21d0      	movs	r1, #208	@ 0xd0
 8001042:	f002 fc95 	bl	8003970 <HAL_I2C_Master_Transmit>
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000344 	.word	0x20000344

08001054 <rtc_read_time>:
// doc du lieu
void rtc_read_time(DateTime *dt){
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af02      	add	r7, sp, #8
 800105a:	6078      	str	r0, [r7, #4]
	uint8_t data[7];
	uint8_t add_reg=0x00; // dia chi cua thanh ghi cua slave ma master muon doc du lieu
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(ds_i2c,RTC_ADDRESS,&add_reg,1,100); // gui dia chi thanh ghi ma master muon doc du lieu
 8001060:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <rtc_read_time+0xac>)
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	f107 020f 	add.w	r2, r7, #15
 8001068:	2364      	movs	r3, #100	@ 0x64
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	21d0      	movs	r1, #208	@ 0xd0
 8001070:	f002 fc7e 	bl	8003970 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ds_i2c,RTC_ADDRESS,data,7,100); // doc du lieu
 8001074:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <rtc_read_time+0xac>)
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	f107 0210 	add.w	r2, r7, #16
 800107c:	2364      	movs	r3, #100	@ 0x64
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2307      	movs	r3, #7
 8001082:	21d0      	movs	r1, #208	@ 0xd0
 8001084:	f002 fd72 	bl	8003b6c <HAL_I2C_Master_Receive>
	dt->sec= BCD2Decimal(data[0]);
 8001088:	7c3b      	ldrb	r3, [r7, #16]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ff80 	bl	8000f90 <BCD2Decimal>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	709a      	strb	r2, [r3, #2]
	dt->min= BCD2Decimal(data[1]);
 8001098:	7c7b      	ldrb	r3, [r7, #17]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff78 	bl	8000f90 <BCD2Decimal>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	705a      	strb	r2, [r3, #1]
	dt->hour= BCD2Decimal(data[2]);
 80010a8:	7cbb      	ldrb	r3, [r7, #18]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ff70 	bl	8000f90 <BCD2Decimal>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	701a      	strb	r2, [r3, #0]
	dt->day= BCD2Decimal(data[3]);
 80010b8:	7cfb      	ldrb	r3, [r7, #19]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff68 	bl	8000f90 <BCD2Decimal>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	70da      	strb	r2, [r3, #3]
	dt->date= BCD2Decimal(data[4]);
 80010c8:	7d3b      	ldrb	r3, [r7, #20]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff60 	bl	8000f90 <BCD2Decimal>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	711a      	strb	r2, [r3, #4]
	dt->mon= BCD2Decimal(data[5]);
 80010d8:	7d7b      	ldrb	r3, [r7, #21]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff58 	bl	8000f90 <BCD2Decimal>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	715a      	strb	r2, [r3, #5]
	dt->year= BCD2Decimal(data[6]);
 80010e8:	7dbb      	ldrb	r3, [r7, #22]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff50 	bl	8000f90 <BCD2Decimal>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	719a      	strb	r2, [r3, #6]
}
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000344 	.word	0x20000344

08001104 <rtc_init>:
	else if (data[1]==0x40) temperarate=0.25;
	else if(data[1]==0x80) temperarate=0.5;
	else temperarate=0.75;
	return data[0]+temperarate;
}
void rtc_init(I2C_HandleTypeDef *i2c){
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  ds_i2c=i2c;
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <rtc_init+0x1c>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6013      	str	r3, [r2, #0]
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000344 	.word	0x20000344

08001124 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af02      	add	r7, sp, #8
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f023 030f 	bic.w	r3, r3, #15
 8001134:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	f043 030c 	orr.w	r3, r3, #12
 8001142:	b2db      	uxtb	r3, r3
 8001144:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	b2db      	uxtb	r3, r3
 800114e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	f043 030c 	orr.w	r3, r3, #12
 8001156:	b2db      	uxtb	r3, r3
 8001158:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	b2db      	uxtb	r3, r3
 8001162:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001164:	f107 0208 	add.w	r2, r7, #8
 8001168:	2364      	movs	r3, #100	@ 0x64
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2304      	movs	r3, #4
 800116e:	214e      	movs	r1, #78	@ 0x4e
 8001170:	4803      	ldr	r0, [pc, #12]	@ (8001180 <lcd_send_cmd+0x5c>)
 8001172:	f002 fbfd 	bl	8003970 <HAL_I2C_Master_Transmit>
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000039c 	.word	0x2000039c

08001184 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f023 030f 	bic.w	r3, r3, #15
 8001194:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	f043 030d 	orr.w	r3, r3, #13
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	f043 0309 	orr.w	r3, r3, #9
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	f043 030d 	orr.w	r3, r3, #13
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 80011ba:	7bbb      	ldrb	r3, [r7, #14]
 80011bc:	f043 0309 	orr.w	r3, r3, #9
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011c4:	f107 0208 	add.w	r2, r7, #8
 80011c8:	2364      	movs	r3, #100	@ 0x64
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2304      	movs	r3, #4
 80011ce:	214e      	movs	r1, #78	@ 0x4e
 80011d0:	4803      	ldr	r0, [pc, #12]	@ (80011e0 <lcd_send_data+0x5c>)
 80011d2:	f002 fbcd 	bl	8003970 <HAL_I2C_Master_Transmit>
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000039c 	.word	0x2000039c

080011e4 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
    switch (row)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <lcd_put_cur+0x18>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d005      	beq.n	8001206 <lcd_put_cur+0x22>
 80011fa:	e009      	b.n	8001210 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001202:	603b      	str	r3, [r7, #0]
            break;
 8001204:	e004      	b.n	8001210 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800120c:	603b      	str	r3, [r7, #0]
            break;
 800120e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff85 	bl	8001124 <lcd_send_cmd>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <lcd_init>:


void lcd_init (void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001226:	2032      	movs	r0, #50	@ 0x32
 8001228:	f001 ff12 	bl	8003050 <HAL_Delay>
	lcd_send_cmd (0x30);
 800122c:	2030      	movs	r0, #48	@ 0x30
 800122e:	f7ff ff79 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001232:	2005      	movs	r0, #5
 8001234:	f001 ff0c 	bl	8003050 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001238:	2030      	movs	r0, #48	@ 0x30
 800123a:	f7ff ff73 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800123e:	2001      	movs	r0, #1
 8001240:	f001 ff06 	bl	8003050 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001244:	2030      	movs	r0, #48	@ 0x30
 8001246:	f7ff ff6d 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(10);
 800124a:	200a      	movs	r0, #10
 800124c:	f001 ff00 	bl	8003050 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001250:	2020      	movs	r0, #32
 8001252:	f7ff ff67 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(10);
 8001256:	200a      	movs	r0, #10
 8001258:	f001 fefa 	bl	8003050 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800125c:	2028      	movs	r0, #40	@ 0x28
 800125e:	f7ff ff61 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(1);
 8001262:	2001      	movs	r0, #1
 8001264:	f001 fef4 	bl	8003050 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001268:	2008      	movs	r0, #8
 800126a:	f7ff ff5b 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(1);
 800126e:	2001      	movs	r0, #1
 8001270:	f001 feee 	bl	8003050 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff ff55 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f001 fee8 	bl	8003050 <HAL_Delay>
	HAL_Delay(1);
 8001280:	2001      	movs	r0, #1
 8001282:	f001 fee5 	bl	8003050 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001286:	2006      	movs	r0, #6
 8001288:	f7ff ff4c 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(1);
 800128c:	2001      	movs	r0, #1
 800128e:	f001 fedf 	bl	8003050 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001292:	200c      	movs	r0, #12
 8001294:	f7ff ff46 	bl	8001124 <lcd_send_cmd>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80012a4:	e006      	b.n	80012b4 <lcd_send_string+0x18>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff68 	bl	8001184 <lcd_send_data>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f4      	bne.n	80012a6 <lcd_send_string+0xa>
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012cc:	f001 fe4e 	bl	8002f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d0:	f000 f8dc 	bl	800148c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d4:	f000 f9f8 	bl	80016c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012d8:	f000 f942 	bl	8001560 <MX_I2C1_Init>
  MX_I2C2_Init();
 80012dc:	f000 f96e 	bl	80015bc <MX_I2C2_Init>
  MX_I2C3_Init();
 80012e0:	f000 f99a 	bl	8001618 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80012e4:	f000 f9c6 	bl	8001674 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //Init SHT21, set resolution
    SHT2x_Init(&hi2c1);
 80012e8:	4845      	ldr	r0, [pc, #276]	@ (8001400 <main+0x138>)
 80012ea:	f001 fa9b 	bl	8002824 <SHT2x_Init>
    SHT2x_SetResolution(RES_14_12);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f001 fb80 	bl	80029f4 <SHT2x_SetResolution>
    print_cli("Inited SHT21 successfully\n");
 80012f4:	4843      	ldr	r0, [pc, #268]	@ (8001404 <main+0x13c>)
 80012f6:	f001 fa5d 	bl	80027b4 <print_cli>

    //Init LCD, set start time
    rtc_init(&hi2c3);
 80012fa:	4843      	ldr	r0, [pc, #268]	@ (8001408 <main+0x140>)
 80012fc:	f7ff ff02 	bl	8001104 <rtc_init>
    date_time.date = 20;
 8001300:	4b42      	ldr	r3, [pc, #264]	@ (800140c <main+0x144>)
 8001302:	2214      	movs	r2, #20
 8001304:	711a      	strb	r2, [r3, #4]
    date_time.day = 20;
 8001306:	4b41      	ldr	r3, [pc, #260]	@ (800140c <main+0x144>)
 8001308:	2214      	movs	r2, #20
 800130a:	70da      	strb	r2, [r3, #3]
    date_time.hour = 10;
 800130c:	4b3f      	ldr	r3, [pc, #252]	@ (800140c <main+0x144>)
 800130e:	220a      	movs	r2, #10
 8001310:	701a      	strb	r2, [r3, #0]
    date_time.i2c = 02;
 8001312:	4b3e      	ldr	r3, [pc, #248]	@ (800140c <main+0x144>)
 8001314:	2202      	movs	r2, #2
 8001316:	609a      	str	r2, [r3, #8]
    date_time.min = 41;
 8001318:	4b3c      	ldr	r3, [pc, #240]	@ (800140c <main+0x144>)
 800131a:	2229      	movs	r2, #41	@ 0x29
 800131c:	705a      	strb	r2, [r3, #1]
    date_time.mon = 1;
 800131e:	4b3b      	ldr	r3, [pc, #236]	@ (800140c <main+0x144>)
 8001320:	2201      	movs	r2, #1
 8001322:	715a      	strb	r2, [r3, #5]
    date_time.sec = 12;
 8001324:	4b39      	ldr	r3, [pc, #228]	@ (800140c <main+0x144>)
 8001326:	220c      	movs	r2, #12
 8001328:	709a      	strb	r2, [r3, #2]
    date_time.year = 25;
 800132a:	4b38      	ldr	r3, [pc, #224]	@ (800140c <main+0x144>)
 800132c:	2219      	movs	r2, #25
 800132e:	719a      	strb	r2, [r3, #6]
    rtc_write_time(&date_time);
 8001330:	4836      	ldr	r0, [pc, #216]	@ (800140c <main+0x144>)
 8001332:	f7ff fe47 	bl	8000fc4 <rtc_write_time>

    //Init lcd
    lcd_init();
 8001336:	f7ff ff74 	bl	8001222 <lcd_init>
    HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 800133a:	2201      	movs	r2, #1
 800133c:	4934      	ldr	r1, [pc, #208]	@ (8001410 <main+0x148>)
 800133e:	4835      	ldr	r0, [pc, #212]	@ (8001414 <main+0x14c>)
 8001340:	f003 feff 	bl	8005142 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001344:	f004 feac 	bl	80060a0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(float), &myQueue01_attributes);
 8001348:	4a33      	ldr	r2, [pc, #204]	@ (8001418 <main+0x150>)
 800134a:	2104      	movs	r1, #4
 800134c:	2010      	movs	r0, #16
 800134e:	f004 ffb9 	bl	80062c4 <osMessageQueueNew>
 8001352:	4603      	mov	r3, r0
 8001354:	4a31      	ldr	r2, [pc, #196]	@ (800141c <main+0x154>)
 8001356:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (16, sizeof(DateTime), &myQueue02_attributes);
 8001358:	4a31      	ldr	r2, [pc, #196]	@ (8001420 <main+0x158>)
 800135a:	210c      	movs	r1, #12
 800135c:	2010      	movs	r0, #16
 800135e:	f004 ffb1 	bl	80062c4 <osMessageQueueNew>
 8001362:	4603      	mov	r3, r0
 8001364:	4a2f      	ldr	r2, [pc, #188]	@ (8001424 <main+0x15c>)
 8001366:	6013      	str	r3, [r2, #0]

  /* creation of myQueue03 */
  myQueue03Handle = osMessageQueueNew (16, sizeof(float), &myQueue03_attributes);
 8001368:	4a2f      	ldr	r2, [pc, #188]	@ (8001428 <main+0x160>)
 800136a:	2104      	movs	r1, #4
 800136c:	2010      	movs	r0, #16
 800136e:	f004 ffa9 	bl	80062c4 <osMessageQueueNew>
 8001372:	4603      	mov	r3, r0
 8001374:	4a2d      	ldr	r2, [pc, #180]	@ (800142c <main+0x164>)
 8001376:	6013      	str	r3, [r2, #0]

  /* creation of myQueue04 */
  myQueue04Handle = osMessageQueueNew (16, sizeof(uint8_t) * 15, &myQueue04_attributes);
 8001378:	4a2d      	ldr	r2, [pc, #180]	@ (8001430 <main+0x168>)
 800137a:	210f      	movs	r1, #15
 800137c:	2010      	movs	r0, #16
 800137e:	f004 ffa1 	bl	80062c4 <osMessageQueueNew>
 8001382:	4603      	mov	r3, r0
 8001384:	4a2b      	ldr	r2, [pc, #172]	@ (8001434 <main+0x16c>)
 8001386:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001388:	4a2b      	ldr	r2, [pc, #172]	@ (8001438 <main+0x170>)
 800138a:	2100      	movs	r1, #0
 800138c:	482b      	ldr	r0, [pc, #172]	@ (800143c <main+0x174>)
 800138e:	f004 fee6 	bl	800615e <osThreadNew>
 8001392:	4603      	mov	r3, r0
 8001394:	4a2a      	ldr	r2, [pc, #168]	@ (8001440 <main+0x178>)
 8001396:	6013      	str	r3, [r2, #0]

  /* creation of RealTime */
  RealTimeHandle = osThreadNew(StartTask02, NULL, &RealTime_attributes);
 8001398:	4a2a      	ldr	r2, [pc, #168]	@ (8001444 <main+0x17c>)
 800139a:	2100      	movs	r1, #0
 800139c:	482a      	ldr	r0, [pc, #168]	@ (8001448 <main+0x180>)
 800139e:	f004 fede 	bl	800615e <osThreadNew>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4a29      	ldr	r2, [pc, #164]	@ (800144c <main+0x184>)
 80013a6:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTemp */
  DisplayTempHandle = osThreadNew(StartTask03, NULL, &DisplayTemp_attributes);
 80013a8:	4a29      	ldr	r2, [pc, #164]	@ (8001450 <main+0x188>)
 80013aa:	2100      	movs	r1, #0
 80013ac:	4829      	ldr	r0, [pc, #164]	@ (8001454 <main+0x18c>)
 80013ae:	f004 fed6 	bl	800615e <osThreadNew>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4a28      	ldr	r2, [pc, #160]	@ (8001458 <main+0x190>)
 80013b6:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTime */
  DisplayTimeHandle = osThreadNew(StartTask04, NULL, &DisplayTime_attributes);
 80013b8:	4a28      	ldr	r2, [pc, #160]	@ (800145c <main+0x194>)
 80013ba:	2100      	movs	r1, #0
 80013bc:	4828      	ldr	r0, [pc, #160]	@ (8001460 <main+0x198>)
 80013be:	f004 fece 	bl	800615e <osThreadNew>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a27      	ldr	r2, [pc, #156]	@ (8001464 <main+0x19c>)
 80013c6:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 80013c8:	4a27      	ldr	r2, [pc, #156]	@ (8001468 <main+0x1a0>)
 80013ca:	2100      	movs	r1, #0
 80013cc:	4827      	ldr	r0, [pc, #156]	@ (800146c <main+0x1a4>)
 80013ce:	f004 fec6 	bl	800615e <osThreadNew>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a26      	ldr	r2, [pc, #152]	@ (8001470 <main+0x1a8>)
 80013d6:	6013      	str	r3, [r2, #0]

  /* creation of myTask06 */
  myTask06Handle = osThreadNew(StartTask06, NULL, &myTask06_attributes);
 80013d8:	4a26      	ldr	r2, [pc, #152]	@ (8001474 <main+0x1ac>)
 80013da:	2100      	movs	r1, #0
 80013dc:	4826      	ldr	r0, [pc, #152]	@ (8001478 <main+0x1b0>)
 80013de:	f004 febe 	bl	800615e <osThreadNew>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a25      	ldr	r2, [pc, #148]	@ (800147c <main+0x1b4>)
 80013e6:	6013      	str	r3, [r2, #0]

  /* creation of myTask07 */
  myTask07Handle = osThreadNew(StartTask07, NULL, &myTask07_attributes);
 80013e8:	4a25      	ldr	r2, [pc, #148]	@ (8001480 <main+0x1b8>)
 80013ea:	2100      	movs	r1, #0
 80013ec:	4825      	ldr	r0, [pc, #148]	@ (8001484 <main+0x1bc>)
 80013ee:	f004 feb6 	bl	800615e <osThreadNew>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4a24      	ldr	r2, [pc, #144]	@ (8001488 <main+0x1c0>)
 80013f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013f8:	f004 fe76 	bl	80060e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <main+0x134>
 8001400:	20000348 	.word	0x20000348
 8001404:	0800bffc 	.word	0x0800bffc
 8001408:	200003f0 	.word	0x200003f0
 800140c:	200004b8 	.word	0x200004b8
 8001410:	200004fa 	.word	0x200004fa
 8001414:	20000444 	.word	0x20000444
 8001418:	0800c6ac 	.word	0x0800c6ac
 800141c:	200004a8 	.word	0x200004a8
 8001420:	0800c6c4 	.word	0x0800c6c4
 8001424:	200004ac 	.word	0x200004ac
 8001428:	0800c6dc 	.word	0x0800c6dc
 800142c:	200004b0 	.word	0x200004b0
 8001430:	0800c6f4 	.word	0x0800c6f4
 8001434:	200004b4 	.word	0x200004b4
 8001438:	0800c5b0 	.word	0x0800c5b0
 800143c:	08001a09 	.word	0x08001a09
 8001440:	2000048c 	.word	0x2000048c
 8001444:	0800c5d4 	.word	0x0800c5d4
 8001448:	08001ba5 	.word	0x08001ba5
 800144c:	20000490 	.word	0x20000490
 8001450:	0800c5f8 	.word	0x0800c5f8
 8001454:	08001d49 	.word	0x08001d49
 8001458:	20000494 	.word	0x20000494
 800145c:	0800c61c 	.word	0x0800c61c
 8001460:	08001f21 	.word	0x08001f21
 8001464:	20000498 	.word	0x20000498
 8001468:	0800c640 	.word	0x0800c640
 800146c:	08002135 	.word	0x08002135
 8001470:	2000049c 	.word	0x2000049c
 8001474:	0800c664 	.word	0x0800c664
 8001478:	080022f9 	.word	0x080022f9
 800147c:	200004a0 	.word	0x200004a0
 8001480:	0800c688 	.word	0x0800c688
 8001484:	080024dd 	.word	0x080024dd
 8001488:	200004a4 	.word	0x200004a4

0800148c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b094      	sub	sp, #80	@ 0x50
 8001490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001492:	f107 0320 	add.w	r3, r7, #32
 8001496:	2230      	movs	r2, #48	@ 0x30
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f008 fd2c 	bl	8009ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	4b28      	ldr	r3, [pc, #160]	@ (8001558 <SystemClock_Config+0xcc>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b8:	4a27      	ldr	r2, [pc, #156]	@ (8001558 <SystemClock_Config+0xcc>)
 80014ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014be:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c0:	4b25      	ldr	r3, [pc, #148]	@ (8001558 <SystemClock_Config+0xcc>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	4b22      	ldr	r3, [pc, #136]	@ (800155c <SystemClock_Config+0xd0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014d8:	4a20      	ldr	r2, [pc, #128]	@ (800155c <SystemClock_Config+0xd0>)
 80014da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <SystemClock_Config+0xd0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ec:	2302      	movs	r3, #2
 80014ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f0:	2301      	movs	r3, #1
 80014f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014f4:	2310      	movs	r3, #16
 80014f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f8:	2302      	movs	r3, #2
 80014fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014fc:	2300      	movs	r3, #0
 80014fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001500:	2308      	movs	r3, #8
 8001502:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001504:	2354      	movs	r3, #84	@ 0x54
 8001506:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001508:	2302      	movs	r3, #2
 800150a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800150c:	2304      	movs	r3, #4
 800150e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001510:	f107 0320 	add.w	r3, r7, #32
 8001514:	4618      	mov	r0, r3
 8001516:	f003 f8e1 	bl	80046dc <HAL_RCC_OscConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001520:	f001 f942 	bl	80027a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001524:	230f      	movs	r3, #15
 8001526:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001528:	2302      	movs	r3, #2
 800152a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001530:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001534:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	2102      	movs	r1, #2
 8001540:	4618      	mov	r0, r3
 8001542:	f003 fb43 	bl	8004bcc <HAL_RCC_ClockConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800154c:	f001 f92c 	bl	80027a8 <Error_Handler>
  }
}
 8001550:	bf00      	nop
 8001552:	3750      	adds	r7, #80	@ 0x50
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800
 800155c:	40007000 	.word	0x40007000

08001560 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001566:	4a13      	ldr	r2, [pc, #76]	@ (80015b4 <MX_I2C1_Init+0x54>)
 8001568:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800156a:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800156c:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <MX_I2C1_Init+0x58>)
 800156e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800157e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001582:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001584:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001590:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800159e:	f002 f8a3 	bl	80036e8 <HAL_I2C_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a8:	f001 f8fe 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000348 	.word	0x20000348
 80015b4:	40005400 	.word	0x40005400
 80015b8:	000186a0 	.word	0x000186a0

080015bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <MX_I2C2_Init+0x50>)
 80015c2:	4a13      	ldr	r2, [pc, #76]	@ (8001610 <MX_I2C2_Init+0x54>)
 80015c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015c6:	4b11      	ldr	r3, [pc, #68]	@ (800160c <MX_I2C2_Init+0x50>)
 80015c8:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <MX_I2C2_Init+0x58>)
 80015ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <MX_I2C2_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_I2C2_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <MX_I2C2_Init+0x50>)
 80015da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e0:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <MX_I2C2_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015e6:	4b09      	ldr	r3, [pc, #36]	@ (800160c <MX_I2C2_Init+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ec:	4b07      	ldr	r3, [pc, #28]	@ (800160c <MX_I2C2_Init+0x50>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <MX_I2C2_Init+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015f8:	4804      	ldr	r0, [pc, #16]	@ (800160c <MX_I2C2_Init+0x50>)
 80015fa:	f002 f875 	bl	80036e8 <HAL_I2C_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001604:	f001 f8d0 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000039c 	.word	0x2000039c
 8001610:	40005800 	.word	0x40005800
 8001614:	000186a0 	.word	0x000186a0

08001618 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <MX_I2C3_Init+0x50>)
 800161e:	4a13      	ldr	r2, [pc, #76]	@ (800166c <MX_I2C3_Init+0x54>)
 8001620:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <MX_I2C3_Init+0x50>)
 8001624:	4a12      	ldr	r2, [pc, #72]	@ (8001670 <MX_I2C3_Init+0x58>)
 8001626:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001628:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <MX_I2C3_Init+0x50>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800162e:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <MX_I2C3_Init+0x50>)
 8001630:	2200      	movs	r2, #0
 8001632:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <MX_I2C3_Init+0x50>)
 8001636:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800163a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800163c:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <MX_I2C3_Init+0x50>)
 800163e:	2200      	movs	r2, #0
 8001640:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <MX_I2C3_Init+0x50>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001648:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <MX_I2C3_Init+0x50>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <MX_I2C3_Init+0x50>)
 8001650:	2200      	movs	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001654:	4804      	ldr	r0, [pc, #16]	@ (8001668 <MX_I2C3_Init+0x50>)
 8001656:	f002 f847 	bl	80036e8 <HAL_I2C_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001660:	f001 f8a2 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200003f0 	.word	0x200003f0
 800166c:	40005c00 	.word	0x40005c00
 8001670:	000186a0 	.word	0x000186a0

08001674 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <MX_USART1_UART_Init+0x4c>)
 800167a:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <MX_USART1_UART_Init+0x50>)
 800167c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800167e:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <MX_USART1_UART_Init+0x4c>)
 8001680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001684:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <MX_USART1_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <MX_USART1_UART_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <MX_USART1_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <MX_USART1_UART_Init+0x4c>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <MX_USART1_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <MX_USART1_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <MX_USART1_UART_Init+0x4c>)
 80016ac:	f003 fc6e 	bl	8004f8c <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016b6:	f001 f877 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000444 	.word	0x20000444
 80016c4:	40011000 	.word	0x40011000

080016c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b1e      	ldr	r3, [pc, #120]	@ (800174c <MX_GPIO_Init+0x84>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a1d      	ldr	r2, [pc, #116]	@ (800174c <MX_GPIO_Init+0x84>)
 80016d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <MX_GPIO_Init+0x84>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b17      	ldr	r3, [pc, #92]	@ (800174c <MX_GPIO_Init+0x84>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a16      	ldr	r2, [pc, #88]	@ (800174c <MX_GPIO_Init+0x84>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b14      	ldr	r3, [pc, #80]	@ (800174c <MX_GPIO_Init+0x84>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b10      	ldr	r3, [pc, #64]	@ (800174c <MX_GPIO_Init+0x84>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	4a0f      	ldr	r2, [pc, #60]	@ (800174c <MX_GPIO_Init+0x84>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	6313      	str	r3, [r2, #48]	@ 0x30
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <MX_GPIO_Init+0x84>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <MX_GPIO_Init+0x84>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	4a08      	ldr	r2, [pc, #32]	@ (800174c <MX_GPIO_Init+0x84>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	@ 0x30
 8001732:	4b06      	ldr	r3, [pc, #24]	@ (800174c <MX_GPIO_Init+0x84>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {  // Thay USART1 bằng UART của bạn
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a17      	ldr	r2, [pc, #92]	@ (80017bc <HAL_UART_RxCpltCallback+0x6c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d128      	bne.n	80017b4 <HAL_UART_RxCpltCallback+0x64>
        if (rx_byte == '\n') {       // Kiểm tra ký tự LF
 8001762:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <HAL_UART_RxCpltCallback+0x70>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b0a      	cmp	r3, #10
 8001768:	d110      	bne.n	800178c <HAL_UART_RxCpltCallback+0x3c>
            rx_buffer[rx_index] = '\0'; // Kết thúc chuỗi
 800176a:	4b16      	ldr	r3, [pc, #88]	@ (80017c4 <HAL_UART_RxCpltCallback+0x74>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <HAL_UART_RxCpltCallback+0x78>)
 8001772:	2100      	movs	r1, #0
 8001774:	5499      	strb	r1, [r3, r2]
            rx_index = 0;            // Reset index
 8001776:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <HAL_UART_RxCpltCallback+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	801a      	strh	r2, [r3, #0]
			osMessageQueuePut(myQueue04Handle, &rx_buffer, 0U, 0U);
 800177c:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <HAL_UART_RxCpltCallback+0x7c>)
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	2300      	movs	r3, #0
 8001782:	2200      	movs	r2, #0
 8001784:	4910      	ldr	r1, [pc, #64]	@ (80017c8 <HAL_UART_RxCpltCallback+0x78>)
 8001786:	f004 fe11 	bl	80063ac <osMessageQueuePut>
 800178a:	e00e      	b.n	80017aa <HAL_UART_RxCpltCallback+0x5a>
        }
         else {
            if (rx_index < RX_BUFFER_SIZE - 1) {
 800178c:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <HAL_UART_RxCpltCallback+0x74>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	2b1c      	cmp	r3, #28
 8001792:	d80a      	bhi.n	80017aa <HAL_UART_RxCpltCallback+0x5a>
                rx_buffer[rx_index++] = rx_byte; // Lưu byte vào buffer
 8001794:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <HAL_UART_RxCpltCallback+0x74>)
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	b291      	uxth	r1, r2
 800179c:	4a09      	ldr	r2, [pc, #36]	@ (80017c4 <HAL_UART_RxCpltCallback+0x74>)
 800179e:	8011      	strh	r1, [r2, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b07      	ldr	r3, [pc, #28]	@ (80017c0 <HAL_UART_RxCpltCallback+0x70>)
 80017a4:	7819      	ldrb	r1, [r3, #0]
 80017a6:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <HAL_UART_RxCpltCallback+0x78>)
 80017a8:	5499      	strb	r1, [r3, r2]
            }
        }
        // Nhận tiếp byte mới
        HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 80017aa:	2201      	movs	r2, #1
 80017ac:	4904      	ldr	r1, [pc, #16]	@ (80017c0 <HAL_UART_RxCpltCallback+0x70>)
 80017ae:	4808      	ldr	r0, [pc, #32]	@ (80017d0 <HAL_UART_RxCpltCallback+0x80>)
 80017b0:	f003 fcc7 	bl	8005142 <HAL_UART_Receive_IT>
    }
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40011000 	.word	0x40011000
 80017c0:	200004fa 	.word	0x200004fa
 80017c4:	200004fc 	.word	0x200004fc
 80017c8:	200004dc 	.word	0x200004dc
 80017cc:	200004b4 	.word	0x200004b4
 80017d0:	20000444 	.word	0x20000444

080017d4 <updatePriorities>:
void updatePriorities(void) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
    TickType_t now = xTaskGetTickCount();
 80017da:	f006 f91d 	bl	8007a18 <xTaskGetTickCount>
 80017de:	61f8      	str	r0, [r7, #28]

    // Calculate time remaining for each task
    TickType_t timeToDeadlineTemp = taskReadTempDeadline - now;
 80017e0:	4b4e      	ldr	r3, [pc, #312]	@ (800191c <updatePriorities+0x148>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	61bb      	str	r3, [r7, #24]
    TickType_t timeToDeadlineTime = taskReadTimeDeadline - now;
 80017ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001920 <updatePriorities+0x14c>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	617b      	str	r3, [r7, #20]
    TickType_t timeToDeadlineDispTemp = taskDisplayTempDeadline - now;
 80017f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001924 <updatePriorities+0x150>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	613b      	str	r3, [r7, #16]
    TickType_t timeToDeadlineDispTime = taskDisplayTimeDeadline - now;
 80017fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001928 <updatePriorities+0x154>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	60fb      	str	r3, [r7, #12]
    TickType_t timeToDeadlineRh  = taskReadRhDeadline - now;
 8001808:	4b48      	ldr	r3, [pc, #288]	@ (800192c <updatePriorities+0x158>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	60bb      	str	r3, [r7, #8]
    TickType_t timeToDeadlineDispRh = taskDisplayRhDeadline - now;
 8001812:	4b47      	ldr	r3, [pc, #284]	@ (8001930 <updatePriorities+0x15c>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	607b      	str	r3, [r7, #4]

    // Update priorities dynamically
    vTaskPrioritySet(NULL, osPriorityLow); // Default priority for the current task
 800181c:	2108      	movs	r1, #8
 800181e:	2000      	movs	r0, #0
 8001820:	f005 ff48 	bl	80076b4 <vTaskPrioritySet>

    if (timeToDeadlineTemp <= timeToDeadlineTime &&
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	429a      	cmp	r2, r3
 800182a:	d819      	bhi.n	8001860 <updatePriorities+0x8c>
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d815      	bhi.n	8001860 <updatePriorities+0x8c>
        timeToDeadlineTemp <= timeToDeadlineDispTemp &&
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	429a      	cmp	r2, r3
 800183a:	d811      	bhi.n	8001860 <updatePriorities+0x8c>
        timeToDeadlineTemp <= timeToDeadlineDispTime &&
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	429a      	cmp	r2, r3
 8001842:	d80d      	bhi.n	8001860 <updatePriorities+0x8c>
		timeToDeadlineTemp <= timeToDeadlineDispRh &&
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	429a      	cmp	r2, r3
 800184a:	d809      	bhi.n	8001860 <updatePriorities+0x8c>
		timeToDeadlineTemp <= timeToDeadlineRh) {
        vTaskPrioritySet(defaultTaskHandle, osPriorityHigh);
 800184c:	4b39      	ldr	r3, [pc, #228]	@ (8001934 <updatePriorities+0x160>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2128      	movs	r1, #40	@ 0x28
 8001852:	4618      	mov	r0, r3
 8001854:	f005 ff2e 	bl	80076b4 <vTaskPrioritySet>
        printf("Task 01 cao nhat\n");
 8001858:	4837      	ldr	r0, [pc, #220]	@ (8001938 <updatePriorities+0x164>)
 800185a:	f008 fa15 	bl	8009c88 <puts>
 800185e:	e059      	b.n	8001914 <updatePriorities+0x140>
    } else if (timeToDeadlineTime <= timeToDeadlineDispTemp &&
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	429a      	cmp	r2, r3
 8001866:	d815      	bhi.n	8001894 <updatePriorities+0xc0>
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d811      	bhi.n	8001894 <updatePriorities+0xc0>
               timeToDeadlineTime <= timeToDeadlineDispTime &&
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	429a      	cmp	r2, r3
 8001876:	d80d      	bhi.n	8001894 <updatePriorities+0xc0>
			   timeToDeadlineTime <= timeToDeadlineRh &&
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	429a      	cmp	r2, r3
 800187e:	d809      	bhi.n	8001894 <updatePriorities+0xc0>
			   timeToDeadlineTime <= timeToDeadlineDispRh) {
        vTaskPrioritySet(RealTimeHandle, osPriorityHigh);
 8001880:	4b2e      	ldr	r3, [pc, #184]	@ (800193c <updatePriorities+0x168>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2128      	movs	r1, #40	@ 0x28
 8001886:	4618      	mov	r0, r3
 8001888:	f005 ff14 	bl	80076b4 <vTaskPrioritySet>
        printf("Task 02 cao nhat\n");
 800188c:	482c      	ldr	r0, [pc, #176]	@ (8001940 <updatePriorities+0x16c>)
 800188e:	f008 f9fb 	bl	8009c88 <puts>
 8001892:	e03f      	b.n	8001914 <updatePriorities+0x140>
    } else if (timeToDeadlineDispTemp <= timeToDeadlineDispTime &&
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d811      	bhi.n	80018c0 <updatePriorities+0xec>
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d80d      	bhi.n	80018c0 <updatePriorities+0xec>
    		timeToDeadlineDispTemp <= timeToDeadlineDispRh &&
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d809      	bhi.n	80018c0 <updatePriorities+0xec>
			timeToDeadlineDispTemp <= timeToDeadlineRh) {
        vTaskPrioritySet(DisplayTempHandle, osPriorityHigh);
 80018ac:	4b25      	ldr	r3, [pc, #148]	@ (8001944 <updatePriorities+0x170>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2128      	movs	r1, #40	@ 0x28
 80018b2:	4618      	mov	r0, r3
 80018b4:	f005 fefe 	bl	80076b4 <vTaskPrioritySet>
        print_cli("Task 3 cao nhat\n");
 80018b8:	4823      	ldr	r0, [pc, #140]	@ (8001948 <updatePriorities+0x174>)
 80018ba:	f000 ff7b 	bl	80027b4 <print_cli>
 80018be:	e029      	b.n	8001914 <updatePriorities+0x140>
    }else if(timeToDeadlineRh <= timeToDeadlineDispRh &&
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d80d      	bhi.n	80018e4 <updatePriorities+0x110>
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d809      	bhi.n	80018e4 <updatePriorities+0x110>
    		timeToDeadlineRh <= timeToDeadlineDispTime){
    	vTaskPrioritySet(myTask05Handle, osPriorityHigh);
 80018d0:	4b1e      	ldr	r3, [pc, #120]	@ (800194c <updatePriorities+0x178>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2128      	movs	r1, #40	@ 0x28
 80018d6:	4618      	mov	r0, r3
 80018d8:	f005 feec 	bl	80076b4 <vTaskPrioritySet>
    	print_cli("Task 5 cao nhat\n");
 80018dc:	481c      	ldr	r0, [pc, #112]	@ (8001950 <updatePriorities+0x17c>)
 80018de:	f000 ff69 	bl	80027b4 <print_cli>
 80018e2:	e017      	b.n	8001914 <updatePriorities+0x140>
    }else if(timeToDeadlineDispRh <= timeToDeadlineDispTime){
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d809      	bhi.n	8001900 <updatePriorities+0x12c>
    	vTaskPrioritySet(myTask06Handle, osPriorityHigh);
 80018ec:	4b19      	ldr	r3, [pc, #100]	@ (8001954 <updatePriorities+0x180>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2128      	movs	r1, #40	@ 0x28
 80018f2:	4618      	mov	r0, r3
 80018f4:	f005 fede 	bl	80076b4 <vTaskPrioritySet>
    	print_cli("Task 6 cao nhat\n");
 80018f8:	4817      	ldr	r0, [pc, #92]	@ (8001958 <updatePriorities+0x184>)
 80018fa:	f000 ff5b 	bl	80027b4 <print_cli>
    }else {
        vTaskPrioritySet(DisplayTimeHandle, osPriorityHigh);
        print_cli("Task 4 cao nhat\n");

    }
}
 80018fe:	e009      	b.n	8001914 <updatePriorities+0x140>
        vTaskPrioritySet(DisplayTimeHandle, osPriorityHigh);
 8001900:	4b16      	ldr	r3, [pc, #88]	@ (800195c <updatePriorities+0x188>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2128      	movs	r1, #40	@ 0x28
 8001906:	4618      	mov	r0, r3
 8001908:	f005 fed4 	bl	80076b4 <vTaskPrioritySet>
        print_cli("Task 4 cao nhat\n");
 800190c:	4814      	ldr	r0, [pc, #80]	@ (8001960 <updatePriorities+0x18c>)
 800190e:	f000 ff51 	bl	80027b4 <print_cli>
}
 8001912:	e7ff      	b.n	8001914 <updatePriorities+0x140>
 8001914:	bf00      	nop
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200004c4 	.word	0x200004c4
 8001920:	200004c8 	.word	0x200004c8
 8001924:	200004cc 	.word	0x200004cc
 8001928:	200004d0 	.word	0x200004d0
 800192c:	200004d4 	.word	0x200004d4
 8001930:	200004d8 	.word	0x200004d8
 8001934:	2000048c 	.word	0x2000048c
 8001938:	0800c018 	.word	0x0800c018
 800193c:	20000490 	.word	0x20000490
 8001940:	0800c02c 	.word	0x0800c02c
 8001944:	20000494 	.word	0x20000494
 8001948:	0800c040 	.word	0x0800c040
 800194c:	2000049c 	.word	0x2000049c
 8001950:	0800c054 	.word	0x0800c054
 8001954:	200004a0 	.word	0x200004a0
 8001958:	0800c068 	.word	0x0800c068
 800195c:	20000498 	.word	0x20000498
 8001960:	0800c07c 	.word	0x0800c07c

08001964 <updatePrevious>:
void updatePrevious(Task *previous, Task *current) {
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
    previous->period = current->period;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	605a      	str	r2, [r3, #4]
    previous->execTime = current->execTime;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	609a      	str	r2, [r3, #8]
    previous->deadline = current->deadline;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	60da      	str	r2, [r3, #12]
    previous->allPeriod = current->allPeriod;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	615a      	str	r2, [r3, #20]
    previous->priotity = current->priotity;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	691a      	ldr	r2, [r3, #16]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	611a      	str	r2, [r3, #16]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <detectChange>:
bool detectChange(Task *current, Task *previous){
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
    // So sánh từng trường
    if (current->period != previous->period ||
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d117      	bne.n	80019e8 <detectChange+0x46>
        current->execTime != previous->execTime ||
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
    if (current->period != previous->period ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d111      	bne.n	80019e8 <detectChange+0x46>
        current->deadline != previous->deadline ||
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
        current->execTime != previous->execTime ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d10b      	bne.n	80019e8 <detectChange+0x46>
        current->priotity != previous->priotity ||
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	691b      	ldr	r3, [r3, #16]
        current->deadline != previous->deadline ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d105      	bne.n	80019e8 <detectChange+0x46>
		current->allPeriod != previous->allPeriod) {
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	695a      	ldr	r2, [r3, #20]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	695b      	ldr	r3, [r3, #20]
        current->priotity != previous->priotity ||
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d004      	beq.n	80019f2 <detectChange+0x50>
        current->changed = true; // Đánh dấu thay đổi
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	761a      	strb	r2, [r3, #24]
        return true;             // Có thay đổi
 80019ee:	2301      	movs	r3, #1
 80019f0:	e003      	b.n	80019fa <detectChange+0x58>
    }
    current->changed = false;    // Không có thay đổi
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	761a      	strb	r2, [r3, #24]
    return false;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t lastWakeTime = osKernelGetTickCount();
 8001a10:	f004 fb90 	bl	8006134 <osKernelGetTickCount>
 8001a14:	4603      	mov	r3, r0
 8001a16:	613b      	str	r3, [r7, #16]
	taskReadTempDeadline = lastWakeTime + pdMS_TO_TICKS(tasks[0].deadline);
 8001a18:	4b58      	ldr	r3, [pc, #352]	@ (8001b7c <StartDefaultTask+0x174>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	4a56      	ldr	r2, [pc, #344]	@ (8001b80 <StartDefaultTask+0x178>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	099a      	lsrs	r2, r3, #6
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4413      	add	r3, r2
 8001a32:	4a54      	ldr	r2, [pc, #336]	@ (8001b84 <StartDefaultTask+0x17c>)
 8001a34:	6013      	str	r3, [r2, #0]
	float temp;
	float timeInSeconds;
  /* Infinite loop */
  for(;;)
  {
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001a36:	f004 fb7d 	bl	8006134 <osKernelGetTickCount>
 8001a3a:	ee07 0a90 	vmov	s15, r0
 8001a3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a42:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8001b88 <StartDefaultTask+0x180>
 8001a46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4a:	edc7 7a05 	vstr	s15, [r7, #20]
	  print_cli("The start time of get temperature task: %.3f\n", timeInSeconds);
 8001a4e:	6978      	ldr	r0, [r7, #20]
 8001a50:	f7fe fd82 	bl	8000558 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	484c      	ldr	r0, [pc, #304]	@ (8001b8c <StartDefaultTask+0x184>)
 8001a5a:	f000 feab 	bl	80027b4 <print_cli>
	  temp = SHT2x_GetTemperature(1);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f000 ff42 	bl	80028e8 <SHT2x_GetTemperature>
 8001a64:	eef0 7a40 	vmov.f32	s15, s0
 8001a68:	edc7 7a03 	vstr	s15, [r7, #12]

	  //Check Deadline
	  if (osKernelGetTickCount() > taskReadTempDeadline)
 8001a6c:	f004 fb62 	bl	8006134 <osKernelGetTickCount>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b44      	ldr	r3, [pc, #272]	@ (8001b84 <StartDefaultTask+0x17c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d902      	bls.n	8001a80 <StartDefaultTask+0x78>
	  {
		  print_cli("Task Read Temperature missed deadline\n");
 8001a7a:	4845      	ldr	r0, [pc, #276]	@ (8001b90 <StartDefaultTask+0x188>)
 8001a7c:	f000 fe9a 	bl	80027b4 <print_cli>
	  }
	  if (detectChange(&tasks[0], &prev_tasks[0]))
 8001a80:	4944      	ldr	r1, [pc, #272]	@ (8001b94 <StartDefaultTask+0x18c>)
 8001a82:	483e      	ldr	r0, [pc, #248]	@ (8001b7c <StartDefaultTask+0x174>)
 8001a84:	f7ff ff8d 	bl	80019a2 <detectChange>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d035      	beq.n	8001afa <StartDefaultTask+0xf2>
		{
		  if(tasks[0].deadline != prev_tasks[0].deadline)
 8001a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b7c <StartDefaultTask+0x174>)
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	4b40      	ldr	r3, [pc, #256]	@ (8001b94 <StartDefaultTask+0x18c>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d02a      	beq.n	8001af0 <StartDefaultTask+0xe8>
			{
				taskReadTempDeadline += pdMS_TO_TICKS(tasks[0].period)
 8001a9a:	4b38      	ldr	r3, [pc, #224]	@ (8001b7c <StartDefaultTask+0x174>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aa4:	fb02 f303 	mul.w	r3, r2, r3
 8001aa8:	4a35      	ldr	r2, [pc, #212]	@ (8001b80 <StartDefaultTask+0x178>)
 8001aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001aae:	099a      	lsrs	r2, r3, #6
						- pdMS_TO_TICKS(prev_tasks[0].deadline) + pdMS_TO_TICKS(tasks[0].deadline);
 8001ab0:	4b38      	ldr	r3, [pc, #224]	@ (8001b94 <StartDefaultTask+0x18c>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aba:	fb01 f303 	mul.w	r3, r1, r3
 8001abe:	4930      	ldr	r1, [pc, #192]	@ (8001b80 <StartDefaultTask+0x178>)
 8001ac0:	fba1 1303 	umull	r1, r3, r1, r3
 8001ac4:	099b      	lsrs	r3, r3, #6
 8001ac6:	1ad2      	subs	r2, r2, r3
 8001ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b7c <StartDefaultTask+0x174>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4619      	mov	r1, r3
 8001ace:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ad2:	fb01 f303 	mul.w	r3, r1, r3
 8001ad6:	492a      	ldr	r1, [pc, #168]	@ (8001b80 <StartDefaultTask+0x178>)
 8001ad8:	fba1 1303 	umull	r1, r3, r1, r3
 8001adc:	099b      	lsrs	r3, r3, #6
 8001ade:	441a      	add	r2, r3
				taskReadTempDeadline += pdMS_TO_TICKS(tasks[0].period)
 8001ae0:	4b28      	ldr	r3, [pc, #160]	@ (8001b84 <StartDefaultTask+0x17c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4a27      	ldr	r2, [pc, #156]	@ (8001b84 <StartDefaultTask+0x17c>)
 8001ae8:	6013      	str	r3, [r2, #0]
				print_cli("TASK 01 THAY DOI DEADLINE\n");
 8001aea:	482b      	ldr	r0, [pc, #172]	@ (8001b98 <StartDefaultTask+0x190>)
 8001aec:	f000 fe62 	bl	80027b4 <print_cli>
			}
			updatePrevious(&prev_tasks[0], &tasks[0]);
 8001af0:	4922      	ldr	r1, [pc, #136]	@ (8001b7c <StartDefaultTask+0x174>)
 8001af2:	4828      	ldr	r0, [pc, #160]	@ (8001b94 <StartDefaultTask+0x18c>)
 8001af4:	f7ff ff36 	bl	8001964 <updatePrevious>
 8001af8:	e00f      	b.n	8001b1a <StartDefaultTask+0x112>
		 }else
		 {
			 taskReadTempDeadline += pdMS_TO_TICKS(tasks[0].period);
 8001afa:	4b20      	ldr	r3, [pc, #128]	@ (8001b7c <StartDefaultTask+0x174>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	461a      	mov	r2, r3
 8001b00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b04:	fb02 f303 	mul.w	r3, r2, r3
 8001b08:	4a1d      	ldr	r2, [pc, #116]	@ (8001b80 <StartDefaultTask+0x178>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	099a      	lsrs	r2, r3, #6
 8001b10:	4b1c      	ldr	r3, [pc, #112]	@ (8001b84 <StartDefaultTask+0x17c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4413      	add	r3, r2
 8001b16:	4a1b      	ldr	r2, [pc, #108]	@ (8001b84 <StartDefaultTask+0x17c>)
 8001b18:	6013      	str	r3, [r2, #0]
		 }
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001b1a:	f004 fb0b 	bl	8006134 <osKernelGetTickCount>
 8001b1e:	ee07 0a90 	vmov	s15, r0
 8001b22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b26:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001b88 <StartDefaultTask+0x180>
 8001b2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b2e:	edc7 7a05 	vstr	s15, [r7, #20]
	  print_cli("The end time of get temperature task: %.3f\n", timeInSeconds);
 8001b32:	6978      	ldr	r0, [r7, #20]
 8001b34:	f7fe fd10 	bl	8000558 <__aeabi_f2d>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4817      	ldr	r0, [pc, #92]	@ (8001b9c <StartDefaultTask+0x194>)
 8001b3e:	f000 fe39 	bl	80027b4 <print_cli>
	  osMessageQueuePut(myQueue01Handle, &temp, 0U, 0U);
 8001b42:	4b17      	ldr	r3, [pc, #92]	@ (8001ba0 <StartDefaultTask+0x198>)
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	f107 010c 	add.w	r1, r7, #12
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f004 fc2d 	bl	80063ac <osMessageQueuePut>
	  updatePriorities();
 8001b52:	f7ff fe3f 	bl	80017d4 <updatePriorities>
	  vTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(tasks[0].period));
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <StartDefaultTask+0x174>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b60:	fb02 f303 	mul.w	r3, r2, r3
 8001b64:	4a06      	ldr	r2, [pc, #24]	@ (8001b80 <StartDefaultTask+0x178>)
 8001b66:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6a:	099a      	lsrs	r2, r3, #6
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	4611      	mov	r1, r2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f005 fd1e 	bl	80075b4 <vTaskDelayUntil>
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001b78:	e75d      	b.n	8001a36 <StartDefaultTask+0x2e>
 8001b7a:	bf00      	nop
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	10624dd3 	.word	0x10624dd3
 8001b84:	200004c4 	.word	0x200004c4
 8001b88:	447a0000 	.word	0x447a0000
 8001b8c:	0800c090 	.word	0x0800c090
 8001b90:	0800c0c0 	.word	0x0800c0c0
 8001b94:	200000a8 	.word	0x200000a8
 8001b98:	0800c0e8 	.word	0x0800c0e8
 8001b9c:	0800c104 	.word	0x0800c104
 8001ba0:	200004a8 	.word	0x200004a8

08001ba4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	DateTime dateTimeSend;
	TickType_t lastWakeTime = osKernelGetTickCount();
 8001bac:	f004 fac2 	bl	8006134 <osKernelGetTickCount>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60fb      	str	r3, [r7, #12]
	taskReadTimeDeadline = lastWakeTime + pdMS_TO_TICKS(tasks[1].deadline);
 8001bb4:	4b57      	ldr	r3, [pc, #348]	@ (8001d14 <StartTask02+0x170>)
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb8:	461a      	mov	r2, r3
 8001bba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	4a55      	ldr	r2, [pc, #340]	@ (8001d18 <StartTask02+0x174>)
 8001bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc8:	099a      	lsrs	r2, r3, #6
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4413      	add	r3, r2
 8001bce:	4a53      	ldr	r2, [pc, #332]	@ (8001d1c <StartTask02+0x178>)
 8001bd0:	6013      	str	r3, [r2, #0]
	float timeInSeconds;
  /* Infinite loop */
  for(;;)
  {
	timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001bd2:	f004 faaf 	bl	8006134 <osKernelGetTickCount>
 8001bd6:	ee07 0a90 	vmov	s15, r0
 8001bda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bde:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8001d20 <StartTask02+0x17c>
 8001be2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001be6:	edc7 7a07 	vstr	s15, [r7, #28]
	print_cli("The start time of get real time task: %.3f\n", timeInSeconds);
 8001bea:	69f8      	ldr	r0, [r7, #28]
 8001bec:	f7fe fcb4 	bl	8000558 <__aeabi_f2d>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	484b      	ldr	r0, [pc, #300]	@ (8001d24 <StartTask02+0x180>)
 8001bf6:	f000 fddd 	bl	80027b4 <print_cli>
	rtc_read_time(&dateTimeSend);
 8001bfa:	f107 0310 	add.w	r3, r7, #16
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fa28 	bl	8001054 <rtc_read_time>

	//Check Deadline
	if (osKernelGetTickCount() > taskReadTimeDeadline)
 8001c04:	f004 fa96 	bl	8006134 <osKernelGetTickCount>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	4b44      	ldr	r3, [pc, #272]	@ (8001d1c <StartTask02+0x178>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d902      	bls.n	8001c18 <StartTask02+0x74>
	{
		print_cli("Task Read Time missed deadline\n");
 8001c12:	4845      	ldr	r0, [pc, #276]	@ (8001d28 <StartTask02+0x184>)
 8001c14:	f000 fdce 	bl	80027b4 <print_cli>
	}
	if (detectChange(&tasks[1], &prev_tasks[1]))
 8001c18:	4944      	ldr	r1, [pc, #272]	@ (8001d2c <StartTask02+0x188>)
 8001c1a:	4845      	ldr	r0, [pc, #276]	@ (8001d30 <StartTask02+0x18c>)
 8001c1c:	f7ff fec1 	bl	80019a2 <detectChange>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d035      	beq.n	8001c92 <StartTask02+0xee>
	{
		if(tasks[0].deadline != prev_tasks[0].deadline)
 8001c26:	4b3b      	ldr	r3, [pc, #236]	@ (8001d14 <StartTask02+0x170>)
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	4b42      	ldr	r3, [pc, #264]	@ (8001d34 <StartTask02+0x190>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d02a      	beq.n	8001c88 <StartTask02+0xe4>
		{
			taskReadTempDeadline += pdMS_TO_TICKS(tasks[0].period)
 8001c32:	4b38      	ldr	r3, [pc, #224]	@ (8001d14 <StartTask02+0x170>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	461a      	mov	r2, r3
 8001c38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c3c:	fb02 f303 	mul.w	r3, r2, r3
 8001c40:	4a35      	ldr	r2, [pc, #212]	@ (8001d18 <StartTask02+0x174>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	099a      	lsrs	r2, r3, #6
					- pdMS_TO_TICKS(prev_tasks[0].deadline) + pdMS_TO_TICKS(tasks[0].deadline);
 8001c48:	4b3a      	ldr	r3, [pc, #232]	@ (8001d34 <StartTask02+0x190>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c52:	fb01 f303 	mul.w	r3, r1, r3
 8001c56:	4930      	ldr	r1, [pc, #192]	@ (8001d18 <StartTask02+0x174>)
 8001c58:	fba1 1303 	umull	r1, r3, r1, r3
 8001c5c:	099b      	lsrs	r3, r3, #6
 8001c5e:	1ad2      	subs	r2, r2, r3
 8001c60:	4b2c      	ldr	r3, [pc, #176]	@ (8001d14 <StartTask02+0x170>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4619      	mov	r1, r3
 8001c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	492a      	ldr	r1, [pc, #168]	@ (8001d18 <StartTask02+0x174>)
 8001c70:	fba1 1303 	umull	r1, r3, r1, r3
 8001c74:	099b      	lsrs	r3, r3, #6
 8001c76:	441a      	add	r2, r3
			taskReadTempDeadline += pdMS_TO_TICKS(tasks[0].period)
 8001c78:	4b2f      	ldr	r3, [pc, #188]	@ (8001d38 <StartTask02+0x194>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4a2e      	ldr	r2, [pc, #184]	@ (8001d38 <StartTask02+0x194>)
 8001c80:	6013      	str	r3, [r2, #0]
			print_cli("TASK 02 THAY DOI DEADLINE\n");
 8001c82:	482e      	ldr	r0, [pc, #184]	@ (8001d3c <StartTask02+0x198>)
 8001c84:	f000 fd96 	bl	80027b4 <print_cli>
		}
		updatePrevious(&prev_tasks[1], &tasks[1]);
 8001c88:	4929      	ldr	r1, [pc, #164]	@ (8001d30 <StartTask02+0x18c>)
 8001c8a:	4828      	ldr	r0, [pc, #160]	@ (8001d2c <StartTask02+0x188>)
 8001c8c:	f7ff fe6a 	bl	8001964 <updatePrevious>
 8001c90:	e00f      	b.n	8001cb2 <StartTask02+0x10e>
	 }
	else
		 {
			 taskReadTimeDeadline += pdMS_TO_TICKS(tasks[1].period);
 8001c92:	4b20      	ldr	r3, [pc, #128]	@ (8001d14 <StartTask02+0x170>)
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	461a      	mov	r2, r3
 8001c98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d18 <StartTask02+0x174>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	099a      	lsrs	r2, r3, #6
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d1c <StartTask02+0x178>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4413      	add	r3, r2
 8001cae:	4a1b      	ldr	r2, [pc, #108]	@ (8001d1c <StartTask02+0x178>)
 8001cb0:	6013      	str	r3, [r2, #0]
		 }
	timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001cb2:	f004 fa3f 	bl	8006134 <osKernelGetTickCount>
 8001cb6:	ee07 0a90 	vmov	s15, r0
 8001cba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cbe:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001d20 <StartTask02+0x17c>
 8001cc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cc6:	edc7 7a07 	vstr	s15, [r7, #28]
	print_cli("The end time of get real time task: %.3f\n", timeInSeconds);
 8001cca:	69f8      	ldr	r0, [r7, #28]
 8001ccc:	f7fe fc44 	bl	8000558 <__aeabi_f2d>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	481a      	ldr	r0, [pc, #104]	@ (8001d40 <StartTask02+0x19c>)
 8001cd6:	f000 fd6d 	bl	80027b4 <print_cli>

	osMessageQueuePut(myQueue02Handle, &dateTimeSend, 0U, 0U);
 8001cda:	4b1a      	ldr	r3, [pc, #104]	@ (8001d44 <StartTask02+0x1a0>)
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	f107 0110 	add.w	r1, r7, #16
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f004 fb61 	bl	80063ac <osMessageQueuePut>
	updatePriorities();
 8001cea:	f7ff fd73 	bl	80017d4 <updatePriorities>
	vTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(tasks[1].period));
 8001cee:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <StartTask02+0x170>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf8:	fb02 f303 	mul.w	r3, r2, r3
 8001cfc:	4a06      	ldr	r2, [pc, #24]	@ (8001d18 <StartTask02+0x174>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	099a      	lsrs	r2, r3, #6
 8001d04:	f107 030c 	add.w	r3, r7, #12
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f005 fc52 	bl	80075b4 <vTaskDelayUntil>
	timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001d10:	e75f      	b.n	8001bd2 <StartTask02+0x2e>
 8001d12:	bf00      	nop
 8001d14:	20000000 	.word	0x20000000
 8001d18:	10624dd3 	.word	0x10624dd3
 8001d1c:	200004c8 	.word	0x200004c8
 8001d20:	447a0000 	.word	0x447a0000
 8001d24:	0800c130 	.word	0x0800c130
 8001d28:	0800c15c 	.word	0x0800c15c
 8001d2c:	200000c4 	.word	0x200000c4
 8001d30:	2000001c 	.word	0x2000001c
 8001d34:	200000a8 	.word	0x200000a8
 8001d38:	200004c4 	.word	0x200004c4
 8001d3c:	0800c17c 	.word	0x0800c17c
 8001d40:	0800c198 	.word	0x0800c198
 8001d44:	200004ac 	.word	0x200004ac

08001d48 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	TickType_t lastWakeTime = osKernelGetTickCount();
 8001d50:	f004 f9f0 	bl	8006134 <osKernelGetTickCount>
 8001d54:	4603      	mov	r3, r0
 8001d56:	61bb      	str	r3, [r7, #24]
	taskDisplayTempDeadline = lastWakeTime + pdMS_TO_TICKS(tasks[2].deadline);
 8001d58:	4b63      	ldr	r3, [pc, #396]	@ (8001ee8 <StartTask03+0x1a0>)
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	4a61      	ldr	r2, [pc, #388]	@ (8001eec <StartTask03+0x1a4>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	099a      	lsrs	r2, r3, #6
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a5f      	ldr	r2, [pc, #380]	@ (8001ef0 <StartTask03+0x1a8>)
 8001d74:	6013      	str	r3, [r2, #0]
	char temStr[6];
	float timeInSeconds;
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(myQueue01Handle, &tempRecv, NULL, osWaitForever);
 8001d76:	4b5f      	ldr	r3, [pc, #380]	@ (8001ef4 <StartTask03+0x1ac>)
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	f107 0114 	add.w	r1, r7, #20
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	2200      	movs	r2, #0
 8001d84:	f004 fb72 	bl	800646c <osMessageQueueGet>
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001d88:	f004 f9d4 	bl	8006134 <osKernelGetTickCount>
 8001d8c:	ee07 0a90 	vmov	s15, r0
 8001d90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d94:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001ef8 <StartTask03+0x1b0>
 8001d98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d9c:	edc7 7a07 	vstr	s15, [r7, #28]
	  print_cli("The start time of display temperature over UART, LCD: %.3f\n", timeInSeconds);
 8001da0:	69f8      	ldr	r0, [r7, #28]
 8001da2:	f7fe fbd9 	bl	8000558 <__aeabi_f2d>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4854      	ldr	r0, [pc, #336]	@ (8001efc <StartTask03+0x1b4>)
 8001dac:	f000 fd02 	bl	80027b4 <print_cli>
	  sprintf(temStr, "T:%.3f", tempRecv);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fbd0 	bl	8000558 <__aeabi_f2d>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	f107 000c 	add.w	r0, r7, #12
 8001dc0:	494f      	ldr	r1, [pc, #316]	@ (8001f00 <StartTask03+0x1b8>)
 8001dc2:	f007 ff69 	bl	8009c98 <siprintf>
	  lcd_put_cur(0, 9);
 8001dc6:	2109      	movs	r1, #9
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f7ff fa0b 	bl	80011e4 <lcd_put_cur>
	  lcd_send_string(&temStr);
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fa62 	bl	800129c <lcd_send_string>
	  print_cli("Temperature is: %.2f\n", tempRecv);
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fbbc 	bl	8000558 <__aeabi_f2d>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4847      	ldr	r0, [pc, #284]	@ (8001f04 <StartTask03+0x1bc>)
 8001de6:	f000 fce5 	bl	80027b4 <print_cli>
	  // Check deadline
		if (xTaskGetTickCount() > taskDisplayTempDeadline) {
 8001dea:	f005 fe15 	bl	8007a18 <xTaskGetTickCount>
 8001dee:	4602      	mov	r2, r0
 8001df0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ef0 <StartTask03+0x1a8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d902      	bls.n	8001dfe <StartTask03+0xb6>
			print_cli("Task Display Temperature missed deadline\n");
 8001df8:	4843      	ldr	r0, [pc, #268]	@ (8001f08 <StartTask03+0x1c0>)
 8001dfa:	f000 fcdb 	bl	80027b4 <print_cli>
		}
		if (detectChange(&tasks[2], &prev_tasks[2]))
 8001dfe:	4943      	ldr	r1, [pc, #268]	@ (8001f0c <StartTask03+0x1c4>)
 8001e00:	4843      	ldr	r0, [pc, #268]	@ (8001f10 <StartTask03+0x1c8>)
 8001e02:	f7ff fdce 	bl	80019a2 <detectChange>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d035      	beq.n	8001e78 <StartTask03+0x130>
		{
			if(tasks[2].deadline != prev_tasks[2].deadline)
 8001e0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ee8 <StartTask03+0x1a0>)
 8001e0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e10:	4b40      	ldr	r3, [pc, #256]	@ (8001f14 <StartTask03+0x1cc>)
 8001e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d02a      	beq.n	8001e6e <StartTask03+0x126>
			{
				taskDisplayTempDeadline += pdMS_TO_TICKS(tasks[2].period)
 8001e18:	4b33      	ldr	r3, [pc, #204]	@ (8001ee8 <StartTask03+0x1a0>)
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e22:	fb02 f303 	mul.w	r3, r2, r3
 8001e26:	4a31      	ldr	r2, [pc, #196]	@ (8001eec <StartTask03+0x1a4>)
 8001e28:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2c:	099a      	lsrs	r2, r3, #6
									- pdMS_TO_TICKS(prev_tasks[2].deadline) + pdMS_TO_TICKS(tasks[2].deadline);
 8001e2e:	4b39      	ldr	r3, [pc, #228]	@ (8001f14 <StartTask03+0x1cc>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e32:	4619      	mov	r1, r3
 8001e34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	492b      	ldr	r1, [pc, #172]	@ (8001eec <StartTask03+0x1a4>)
 8001e3e:	fba1 1303 	umull	r1, r3, r1, r3
 8001e42:	099b      	lsrs	r3, r3, #6
 8001e44:	1ad2      	subs	r2, r2, r3
 8001e46:	4b28      	ldr	r3, [pc, #160]	@ (8001ee8 <StartTask03+0x1a0>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e50:	fb01 f303 	mul.w	r3, r1, r3
 8001e54:	4925      	ldr	r1, [pc, #148]	@ (8001eec <StartTask03+0x1a4>)
 8001e56:	fba1 1303 	umull	r1, r3, r1, r3
 8001e5a:	099b      	lsrs	r3, r3, #6
 8001e5c:	441a      	add	r2, r3
				taskDisplayTempDeadline += pdMS_TO_TICKS(tasks[2].period)
 8001e5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ef0 <StartTask03+0x1a8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	4a22      	ldr	r2, [pc, #136]	@ (8001ef0 <StartTask03+0x1a8>)
 8001e66:	6013      	str	r3, [r2, #0]
				print_cli("TASK 3 THAY DOI DEADLINE\n");
 8001e68:	482b      	ldr	r0, [pc, #172]	@ (8001f18 <StartTask03+0x1d0>)
 8001e6a:	f000 fca3 	bl	80027b4 <print_cli>
			}
			updatePrevious(&prev_tasks[2], &tasks[2]);
 8001e6e:	4928      	ldr	r1, [pc, #160]	@ (8001f10 <StartTask03+0x1c8>)
 8001e70:	4826      	ldr	r0, [pc, #152]	@ (8001f0c <StartTask03+0x1c4>)
 8001e72:	f7ff fd77 	bl	8001964 <updatePrevious>
 8001e76:	e00f      	b.n	8001e98 <StartTask03+0x150>
		 }else
		 {
			 taskDisplayTempDeadline += pdMS_TO_TICKS(tasks[2].period);
 8001e78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee8 <StartTask03+0x1a0>)
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	4a19      	ldr	r2, [pc, #100]	@ (8001eec <StartTask03+0x1a4>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	099a      	lsrs	r2, r3, #6
 8001e8e:	4b18      	ldr	r3, [pc, #96]	@ (8001ef0 <StartTask03+0x1a8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	4a16      	ldr	r2, [pc, #88]	@ (8001ef0 <StartTask03+0x1a8>)
 8001e96:	6013      	str	r3, [r2, #0]
		 }
		timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001e98:	f004 f94c 	bl	8006134 <osKernelGetTickCount>
 8001e9c:	ee07 0a90 	vmov	s15, r0
 8001ea0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ea4:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001ef8 <StartTask03+0x1b0>
 8001ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eac:	edc7 7a07 	vstr	s15, [r7, #28]
		print_cli("The end time of display temperature over UART, LCD: %.3f\n", timeInSeconds);
 8001eb0:	69f8      	ldr	r0, [r7, #28]
 8001eb2:	f7fe fb51 	bl	8000558 <__aeabi_f2d>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4818      	ldr	r0, [pc, #96]	@ (8001f1c <StartTask03+0x1d4>)
 8001ebc:	f000 fc7a 	bl	80027b4 <print_cli>
		updatePriorities();
 8001ec0:	f7ff fc88 	bl	80017d4 <updatePriorities>
		// Delay until next period
		vTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(tasks[2].period));
 8001ec4:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <StartTask03+0x1a0>)
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ece:	fb02 f303 	mul.w	r3, r2, r3
 8001ed2:	4a06      	ldr	r2, [pc, #24]	@ (8001eec <StartTask03+0x1a4>)
 8001ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed8:	099a      	lsrs	r2, r3, #6
 8001eda:	f107 0318 	add.w	r3, r7, #24
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f005 fb67 	bl	80075b4 <vTaskDelayUntil>
	  osMessageQueueGet(myQueue01Handle, &tempRecv, NULL, osWaitForever);
 8001ee6:	e746      	b.n	8001d76 <StartTask03+0x2e>
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	10624dd3 	.word	0x10624dd3
 8001ef0:	200004cc 	.word	0x200004cc
 8001ef4:	200004a8 	.word	0x200004a8
 8001ef8:	447a0000 	.word	0x447a0000
 8001efc:	0800c1c4 	.word	0x0800c1c4
 8001f00:	0800c200 	.word	0x0800c200
 8001f04:	0800c208 	.word	0x0800c208
 8001f08:	0800c220 	.word	0x0800c220
 8001f0c:	200000e0 	.word	0x200000e0
 8001f10:	20000038 	.word	0x20000038
 8001f14:	200000a8 	.word	0x200000a8
 8001f18:	0800c24c 	.word	0x0800c24c
 8001f1c:	0800c268 	.word	0x0800c268

08001f20 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b090      	sub	sp, #64	@ 0x40
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	TickType_t lastWakeTime = osKernelGetTickCount();
 8001f28:	f004 f904 	bl	8006134 <osKernelGetTickCount>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	633b      	str	r3, [r7, #48]	@ 0x30
	taskDisplayTimeDeadline = lastWakeTime + pdMS_TO_TICKS(tasks[3].deadline);
 8001f30:	4b71      	ldr	r3, [pc, #452]	@ (80020f8 <StartTask04+0x1d8>)
 8001f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f34:	461a      	mov	r2, r3
 8001f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	4a6f      	ldr	r2, [pc, #444]	@ (80020fc <StartTask04+0x1dc>)
 8001f40:	fba2 2303 	umull	r2, r3, r2, r3
 8001f44:	099a      	lsrs	r2, r3, #6
 8001f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a6d      	ldr	r2, [pc, #436]	@ (8002100 <StartTask04+0x1e0>)
 8001f4c:	6013      	str	r3, [r2, #0]
	char timeStrDay[10];
	float timeInSeconds;
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(myQueue02Handle, &dateTimeRecv, NULL, osWaitForever);
 8001f4e:	4b6d      	ldr	r3, [pc, #436]	@ (8002104 <StartTask04+0x1e4>)
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f004 fa86 	bl	800646c <osMessageQueueGet>
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8001f60:	f004 f8e8 	bl	8006134 <osKernelGetTickCount>
 8001f64:	ee07 0a90 	vmov	s15, r0
 8001f68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f6c:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8002108 <StartTask04+0x1e8>
 8001f70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f74:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	  print_cli("The start time of display real time over UART, LCD: %.3f\n", timeInSeconds);
 8001f78:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001f7a:	f7fe faed 	bl	8000558 <__aeabi_f2d>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4862      	ldr	r0, [pc, #392]	@ (800210c <StartTask04+0x1ec>)
 8001f84:	f000 fc16 	bl	80027b4 <print_cli>
	  sprintf(timeStrTime, "%02d:%02d:%02d", dateTimeRecv.hour, dateTimeRecv.min, dateTimeRecv.sec);
 8001f88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f92:	4619      	mov	r1, r3
 8001f94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f98:	f107 0018 	add.w	r0, r7, #24
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	495b      	ldr	r1, [pc, #364]	@ (8002110 <StartTask04+0x1f0>)
 8001fa2:	f007 fe79 	bl	8009c98 <siprintf>
	  sprintf(timeStrDay, "%02d/%02d/20%02d", dateTimeRecv.date, dateTimeRecv.mon, dateTimeRecv.year);
 8001fa6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001faa:	461a      	mov	r2, r3
 8001fac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001fb6:	f107 000c 	add.w	r0, r7, #12
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4955      	ldr	r1, [pc, #340]	@ (8002114 <StartTask04+0x1f4>)
 8001fc0:	f007 fe6a 	bl	8009c98 <siprintf>
	  lcd_put_cur(0, 0);
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff f90c 	bl	80011e4 <lcd_put_cur>
	  lcd_send_string(&timeStrTime);
 8001fcc:	f107 0318 	add.w	r3, r7, #24
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff f963 	bl	800129c <lcd_send_string>
	  print_cli("Current time: %s \nDay: %s\n", timeStrTime, timeStrDay);
 8001fd6:	f107 020c 	add.w	r2, r7, #12
 8001fda:	f107 0318 	add.w	r3, r7, #24
 8001fde:	4619      	mov	r1, r3
 8001fe0:	484d      	ldr	r0, [pc, #308]	@ (8002118 <StartTask04+0x1f8>)
 8001fe2:	f000 fbe7 	bl	80027b4 <print_cli>
	  lcd_put_cur(1, 0);
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f7ff f8fb 	bl	80011e4 <lcd_put_cur>
	  lcd_send_string(&timeStrDay);
 8001fee:	f107 030c 	add.w	r3, r7, #12
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff f952 	bl	800129c <lcd_send_string>
	  // Check deadline
	  	if (xTaskGetTickCount() > taskDisplayTimeDeadline) {
 8001ff8:	f005 fd0e 	bl	8007a18 <xTaskGetTickCount>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	4b40      	ldr	r3, [pc, #256]	@ (8002100 <StartTask04+0x1e0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d902      	bls.n	800200c <StartTask04+0xec>
	  		print_cli("Task Display Time missed deadline\n");
 8002006:	4845      	ldr	r0, [pc, #276]	@ (800211c <StartTask04+0x1fc>)
 8002008:	f000 fbd4 	bl	80027b4 <print_cli>
	  	}
	  	if (detectChange(&tasks[3], &prev_tasks[3]))
 800200c:	4944      	ldr	r1, [pc, #272]	@ (8002120 <StartTask04+0x200>)
 800200e:	4845      	ldr	r0, [pc, #276]	@ (8002124 <StartTask04+0x204>)
 8002010:	f7ff fcc7 	bl	80019a2 <detectChange>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d035      	beq.n	8002086 <StartTask04+0x166>
		{
	  		if(tasks[3].deadline != prev_tasks[3].deadline)
 800201a:	4b37      	ldr	r3, [pc, #220]	@ (80020f8 <StartTask04+0x1d8>)
 800201c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800201e:	4b42      	ldr	r3, [pc, #264]	@ (8002128 <StartTask04+0x208>)
 8002020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002022:	429a      	cmp	r2, r3
 8002024:	d02a      	beq.n	800207c <StartTask04+0x15c>
			{
				taskDisplayTimeDeadline += pdMS_TO_TICKS(tasks[3].period)
 8002026:	4b34      	ldr	r3, [pc, #208]	@ (80020f8 <StartTask04+0x1d8>)
 8002028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202a:	461a      	mov	r2, r3
 800202c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002030:	fb02 f303 	mul.w	r3, r2, r3
 8002034:	4a31      	ldr	r2, [pc, #196]	@ (80020fc <StartTask04+0x1dc>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	099a      	lsrs	r2, r3, #6
								- pdMS_TO_TICKS(prev_tasks[3].deadline) + pdMS_TO_TICKS(tasks[3].deadline);
 800203c:	4b3a      	ldr	r3, [pc, #232]	@ (8002128 <StartTask04+0x208>)
 800203e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002040:	4619      	mov	r1, r3
 8002042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	492c      	ldr	r1, [pc, #176]	@ (80020fc <StartTask04+0x1dc>)
 800204c:	fba1 1303 	umull	r1, r3, r1, r3
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	1ad2      	subs	r2, r2, r3
 8002054:	4b28      	ldr	r3, [pc, #160]	@ (80020f8 <StartTask04+0x1d8>)
 8002056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002058:	4619      	mov	r1, r3
 800205a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4926      	ldr	r1, [pc, #152]	@ (80020fc <StartTask04+0x1dc>)
 8002064:	fba1 1303 	umull	r1, r3, r1, r3
 8002068:	099b      	lsrs	r3, r3, #6
 800206a:	441a      	add	r2, r3
				taskDisplayTimeDeadline += pdMS_TO_TICKS(tasks[3].period)
 800206c:	4b24      	ldr	r3, [pc, #144]	@ (8002100 <StartTask04+0x1e0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4413      	add	r3, r2
 8002072:	4a23      	ldr	r2, [pc, #140]	@ (8002100 <StartTask04+0x1e0>)
 8002074:	6013      	str	r3, [r2, #0]
				print_cli("TASK 4 THAY DOI DEADLINE\n");
 8002076:	482d      	ldr	r0, [pc, #180]	@ (800212c <StartTask04+0x20c>)
 8002078:	f000 fb9c 	bl	80027b4 <print_cli>
			}
			updatePrevious(&prev_tasks[3], &tasks[3]);
 800207c:	4929      	ldr	r1, [pc, #164]	@ (8002124 <StartTask04+0x204>)
 800207e:	4828      	ldr	r0, [pc, #160]	@ (8002120 <StartTask04+0x200>)
 8002080:	f7ff fc70 	bl	8001964 <updatePrevious>
 8002084:	e00f      	b.n	80020a6 <StartTask04+0x186>
		 }else
		 {
			 taskDisplayTimeDeadline += pdMS_TO_TICKS(tasks[3].period);
 8002086:	4b1c      	ldr	r3, [pc, #112]	@ (80020f8 <StartTask04+0x1d8>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208a:	461a      	mov	r2, r3
 800208c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002090:	fb02 f303 	mul.w	r3, r2, r3
 8002094:	4a19      	ldr	r2, [pc, #100]	@ (80020fc <StartTask04+0x1dc>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	099a      	lsrs	r2, r3, #6
 800209c:	4b18      	ldr	r3, [pc, #96]	@ (8002100 <StartTask04+0x1e0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a17      	ldr	r2, [pc, #92]	@ (8002100 <StartTask04+0x1e0>)
 80020a4:	6013      	str	r3, [r2, #0]
		 }
	  	timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 80020a6:	f004 f845 	bl	8006134 <osKernelGetTickCount>
 80020aa:	ee07 0a90 	vmov	s15, r0
 80020ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020b2:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002108 <StartTask04+0x1e8>
 80020b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ba:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	  	print_cli("The end time of display real time over UART, LCD: %.3f\n", timeInSeconds);
 80020be:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80020c0:	f7fe fa4a 	bl	8000558 <__aeabi_f2d>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4819      	ldr	r0, [pc, #100]	@ (8002130 <StartTask04+0x210>)
 80020ca:	f000 fb73 	bl	80027b4 <print_cli>
	  	updatePriorities();
 80020ce:	f7ff fb81 	bl	80017d4 <updatePriorities>
	  	// Delay until next period
	  	vTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(tasks[3].period));
 80020d2:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <StartTask04+0x1d8>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d6:	461a      	mov	r2, r3
 80020d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020dc:	fb02 f303 	mul.w	r3, r2, r3
 80020e0:	4a06      	ldr	r2, [pc, #24]	@ (80020fc <StartTask04+0x1dc>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	099a      	lsrs	r2, r3, #6
 80020e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f005 fa60 	bl	80075b4 <vTaskDelayUntil>
	  osMessageQueueGet(myQueue02Handle, &dateTimeRecv, NULL, osWaitForever);
 80020f4:	e72b      	b.n	8001f4e <StartTask04+0x2e>
 80020f6:	bf00      	nop
 80020f8:	20000000 	.word	0x20000000
 80020fc:	10624dd3 	.word	0x10624dd3
 8002100:	200004d0 	.word	0x200004d0
 8002104:	200004ac 	.word	0x200004ac
 8002108:	447a0000 	.word	0x447a0000
 800210c:	0800c2a4 	.word	0x0800c2a4
 8002110:	0800c2e0 	.word	0x0800c2e0
 8002114:	0800c2f0 	.word	0x0800c2f0
 8002118:	0800c304 	.word	0x0800c304
 800211c:	0800c320 	.word	0x0800c320
 8002120:	200000fc 	.word	0x200000fc
 8002124:	20000054 	.word	0x20000054
 8002128:	200000a8 	.word	0x200000a8
 800212c:	0800c344 	.word	0x0800c344
 8002130:	0800c360 	.word	0x0800c360

08002134 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	float rh;
	TickType_t lastWakeTime = osKernelGetTickCount();
 800213c:	f003 fffa 	bl	8006134 <osKernelGetTickCount>
 8002140:	4603      	mov	r3, r0
 8002142:	60fb      	str	r3, [r7, #12]
	taskReadRhDeadline = lastWakeTime + pdMS_TO_TICKS(tasks[4].deadline);
 8002144:	4b60      	ldr	r3, [pc, #384]	@ (80022c8 <StartTask05+0x194>)
 8002146:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002148:	461a      	mov	r2, r3
 800214a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	4a5e      	ldr	r2, [pc, #376]	@ (80022cc <StartTask05+0x198>)
 8002154:	fba2 2303 	umull	r2, r3, r2, r3
 8002158:	099a      	lsrs	r2, r3, #6
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4413      	add	r3, r2
 800215e:	4a5c      	ldr	r2, [pc, #368]	@ (80022d0 <StartTask05+0x19c>)
 8002160:	6013      	str	r3, [r2, #0]
	//updatePriorities();
	float timeInSeconds;
  /* Infinite loop */
  for(;;)
  {
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8002162:	f003 ffe7 	bl	8006134 <osKernelGetTickCount>
 8002166:	ee07 0a90 	vmov	s15, r0
 800216a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800216e:	eddf 6a59 	vldr	s13, [pc, #356]	@ 80022d4 <StartTask05+0x1a0>
 8002172:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002176:	edc7 7a05 	vstr	s15, [r7, #20]
	  print_cli("The start time of get rh task: %.3f\n", timeInSeconds);
 800217a:	6978      	ldr	r0, [r7, #20]
 800217c:	f7fe f9ec 	bl	8000558 <__aeabi_f2d>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4854      	ldr	r0, [pc, #336]	@ (80022d8 <StartTask05+0x1a4>)
 8002186:	f000 fb15 	bl	80027b4 <print_cli>
	  rh = SHT2x_GetRelativeHumidity(1);
 800218a:	2001      	movs	r0, #1
 800218c:	f000 fbf2 	bl	8002974 <SHT2x_GetRelativeHumidity>
 8002190:	eef0 7a40 	vmov.f32	s15, s0
 8002194:	edc7 7a04 	vstr	s15, [r7, #16]
	  if (osKernelGetTickCount() > taskReadRhDeadline)
 8002198:	f003 ffcc 	bl	8006134 <osKernelGetTickCount>
 800219c:	4602      	mov	r2, r0
 800219e:	4b4c      	ldr	r3, [pc, #304]	@ (80022d0 <StartTask05+0x19c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d902      	bls.n	80021ac <StartTask05+0x78>
		  {
			  print_cli("Task Read Temperature missed deadline\n");
 80021a6:	484d      	ldr	r0, [pc, #308]	@ (80022dc <StartTask05+0x1a8>)
 80021a8:	f000 fb04 	bl	80027b4 <print_cli>
		  }
	 if (detectChange(&tasks[4], &prev_tasks[4]))
 80021ac:	494c      	ldr	r1, [pc, #304]	@ (80022e0 <StartTask05+0x1ac>)
 80021ae:	484d      	ldr	r0, [pc, #308]	@ (80022e4 <StartTask05+0x1b0>)
 80021b0:	f7ff fbf7 	bl	80019a2 <detectChange>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d035      	beq.n	8002226 <StartTask05+0xf2>
	{
		  if(tasks[4].deadline != prev_tasks[4].deadline)
 80021ba:	4b43      	ldr	r3, [pc, #268]	@ (80022c8 <StartTask05+0x194>)
 80021bc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80021be:	4b4a      	ldr	r3, [pc, #296]	@ (80022e8 <StartTask05+0x1b4>)
 80021c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d02a      	beq.n	800221c <StartTask05+0xe8>
		  {
			  taskReadRhDeadline += pdMS_TO_TICKS(tasks[4].period)
 80021c6:	4b40      	ldr	r3, [pc, #256]	@ (80022c8 <StartTask05+0x194>)
 80021c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ca:	461a      	mov	r2, r3
 80021cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021d0:	fb02 f303 	mul.w	r3, r2, r3
 80021d4:	4a3d      	ldr	r2, [pc, #244]	@ (80022cc <StartTask05+0x198>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	099a      	lsrs	r2, r3, #6
							- pdMS_TO_TICKS(prev_tasks[4].deadline) + pdMS_TO_TICKS(tasks[4].deadline);
 80021dc:	4b42      	ldr	r3, [pc, #264]	@ (80022e8 <StartTask05+0x1b4>)
 80021de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021e0:	4619      	mov	r1, r3
 80021e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4938      	ldr	r1, [pc, #224]	@ (80022cc <StartTask05+0x198>)
 80021ec:	fba1 1303 	umull	r1, r3, r1, r3
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	1ad2      	subs	r2, r2, r3
 80021f4:	4b34      	ldr	r3, [pc, #208]	@ (80022c8 <StartTask05+0x194>)
 80021f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021f8:	4619      	mov	r1, r3
 80021fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4932      	ldr	r1, [pc, #200]	@ (80022cc <StartTask05+0x198>)
 8002204:	fba1 1303 	umull	r1, r3, r1, r3
 8002208:	099b      	lsrs	r3, r3, #6
 800220a:	441a      	add	r2, r3
			  taskReadRhDeadline += pdMS_TO_TICKS(tasks[4].period)
 800220c:	4b30      	ldr	r3, [pc, #192]	@ (80022d0 <StartTask05+0x19c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4413      	add	r3, r2
 8002212:	4a2f      	ldr	r2, [pc, #188]	@ (80022d0 <StartTask05+0x19c>)
 8002214:	6013      	str	r3, [r2, #0]
			  print_cli("TASK 05 THAY DOI DEADLINE\n");
 8002216:	4835      	ldr	r0, [pc, #212]	@ (80022ec <StartTask05+0x1b8>)
 8002218:	f000 facc 	bl	80027b4 <print_cli>
		  }
		updatePrevious(&prev_tasks[4], &tasks[4]);
 800221c:	4931      	ldr	r1, [pc, #196]	@ (80022e4 <StartTask05+0x1b0>)
 800221e:	4830      	ldr	r0, [pc, #192]	@ (80022e0 <StartTask05+0x1ac>)
 8002220:	f7ff fba0 	bl	8001964 <updatePrevious>
 8002224:	e00f      	b.n	8002246 <StartTask05+0x112>
	 }else
	 {
		 taskReadRhDeadline += pdMS_TO_TICKS(tasks[4].period);
 8002226:	4b28      	ldr	r3, [pc, #160]	@ (80022c8 <StartTask05+0x194>)
 8002228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800222a:	461a      	mov	r2, r3
 800222c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	4a25      	ldr	r2, [pc, #148]	@ (80022cc <StartTask05+0x198>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	099a      	lsrs	r2, r3, #6
 800223c:	4b24      	ldr	r3, [pc, #144]	@ (80022d0 <StartTask05+0x19c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4413      	add	r3, r2
 8002242:	4a23      	ldr	r2, [pc, #140]	@ (80022d0 <StartTask05+0x19c>)
 8002244:	6013      	str	r3, [r2, #0]
	 }
	  taskReadRhDeadline += pdMS_TO_TICKS(tasks[4].period);
 8002246:	4b20      	ldr	r3, [pc, #128]	@ (80022c8 <StartTask05+0x194>)
 8002248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800224a:	461a      	mov	r2, r3
 800224c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002250:	fb02 f303 	mul.w	r3, r2, r3
 8002254:	4a1d      	ldr	r2, [pc, #116]	@ (80022cc <StartTask05+0x198>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	099a      	lsrs	r2, r3, #6
 800225c:	4b1c      	ldr	r3, [pc, #112]	@ (80022d0 <StartTask05+0x19c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4413      	add	r3, r2
 8002262:	4a1b      	ldr	r2, [pc, #108]	@ (80022d0 <StartTask05+0x19c>)
 8002264:	6013      	str	r3, [r2, #0]
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8002266:	f003 ff65 	bl	8006134 <osKernelGetTickCount>
 800226a:	ee07 0a90 	vmov	s15, r0
 800226e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002272:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80022d4 <StartTask05+0x1a0>
 8002276:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800227a:	edc7 7a05 	vstr	s15, [r7, #20]
	  print_cli("The end time of get rh task: %.3f\n", timeInSeconds);
 800227e:	6978      	ldr	r0, [r7, #20]
 8002280:	f7fe f96a 	bl	8000558 <__aeabi_f2d>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4819      	ldr	r0, [pc, #100]	@ (80022f0 <StartTask05+0x1bc>)
 800228a:	f000 fa93 	bl	80027b4 <print_cli>
	  osMessageQueuePut(myQueue03Handle, &rh, 0U, 0U);
 800228e:	4b19      	ldr	r3, [pc, #100]	@ (80022f4 <StartTask05+0x1c0>)
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	f107 0110 	add.w	r1, r7, #16
 8002296:	2300      	movs	r3, #0
 8002298:	2200      	movs	r2, #0
 800229a:	f004 f887 	bl	80063ac <osMessageQueuePut>
	  updatePriorities();
 800229e:	f7ff fa99 	bl	80017d4 <updatePriorities>
	  vTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(tasks[4].period));
 80022a2:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <StartTask05+0x194>)
 80022a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022a6:	461a      	mov	r2, r3
 80022a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ac:	fb02 f303 	mul.w	r3, r2, r3
 80022b0:	4a06      	ldr	r2, [pc, #24]	@ (80022cc <StartTask05+0x198>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	099a      	lsrs	r2, r3, #6
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f005 f978 	bl	80075b4 <vTaskDelayUntil>
	  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 80022c4:	e74d      	b.n	8002162 <StartTask05+0x2e>
 80022c6:	bf00      	nop
 80022c8:	20000000 	.word	0x20000000
 80022cc:	10624dd3 	.word	0x10624dd3
 80022d0:	200004d4 	.word	0x200004d4
 80022d4:	447a0000 	.word	0x447a0000
 80022d8:	0800c398 	.word	0x0800c398
 80022dc:	0800c0c0 	.word	0x0800c0c0
 80022e0:	20000118 	.word	0x20000118
 80022e4:	20000070 	.word	0x20000070
 80022e8:	200000a8 	.word	0x200000a8
 80022ec:	0800c3c0 	.word	0x0800c3c0
 80022f0:	0800c3dc 	.word	0x0800c3dc
 80022f4:	200004b0 	.word	0x200004b0

080022f8 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
	TickType_t lastWakeTime = osKernelGetTickCount();
 8002300:	f003 ff18 	bl	8006134 <osKernelGetTickCount>
 8002304:	4603      	mov	r3, r0
 8002306:	61bb      	str	r3, [r7, #24]
	taskDisplayRhDeadline = lastWakeTime + pdMS_TO_TICKS(tasks[5].deadline);
 8002308:	4b66      	ldr	r3, [pc, #408]	@ (80024a4 <StartTask06+0x1ac>)
 800230a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800230e:	461a      	mov	r2, r3
 8002310:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	4a63      	ldr	r2, [pc, #396]	@ (80024a8 <StartTask06+0x1b0>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	099a      	lsrs	r2, r3, #6
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	4413      	add	r3, r2
 8002324:	4a61      	ldr	r2, [pc, #388]	@ (80024ac <StartTask06+0x1b4>)
 8002326:	6013      	str	r3, [r2, #0]
	//updatePriorities();
	float timeInSeconds;
  /* Infinite loop */
  for(;;)
  {
  osMessageQueueGet(myQueue03Handle, &rhRecv, NULL, osWaitForever);
 8002328:	4b61      	ldr	r3, [pc, #388]	@ (80024b0 <StartTask06+0x1b8>)
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	f107 0114 	add.w	r1, r7, #20
 8002330:	f04f 33ff 	mov.w	r3, #4294967295
 8002334:	2200      	movs	r2, #0
 8002336:	f004 f899 	bl	800646c <osMessageQueueGet>
  timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 800233a:	f003 fefb 	bl	8006134 <osKernelGetTickCount>
 800233e:	ee07 0a90 	vmov	s15, r0
 8002342:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002346:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 80024b4 <StartTask06+0x1bc>
 800234a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800234e:	edc7 7a07 	vstr	s15, [r7, #28]
  print_cli("The start time of display rh over UART, LCD: %.3f\n", timeInSeconds);
 8002352:	69f8      	ldr	r0, [r7, #28]
 8002354:	f7fe f900 	bl	8000558 <__aeabi_f2d>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4856      	ldr	r0, [pc, #344]	@ (80024b8 <StartTask06+0x1c0>)
 800235e:	f000 fa29 	bl	80027b4 <print_cli>
  sprintf(rhStr, "r:%.1f", rhRecv);
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f8f7 	bl	8000558 <__aeabi_f2d>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	f107 000c 	add.w	r0, r7, #12
 8002372:	4952      	ldr	r1, [pc, #328]	@ (80024bc <StartTask06+0x1c4>)
 8002374:	f007 fc90 	bl	8009c98 <siprintf>
  lcd_put_cur(1, 10);
 8002378:	210a      	movs	r1, #10
 800237a:	2001      	movs	r0, #1
 800237c:	f7fe ff32 	bl	80011e4 <lcd_put_cur>
  lcd_send_string(&rhStr);
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe ff89 	bl	800129c <lcd_send_string>
  print_cli("DO AM LA %s\n", rhStr);
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	4619      	mov	r1, r3
 8002390:	484b      	ldr	r0, [pc, #300]	@ (80024c0 <StartTask06+0x1c8>)
 8002392:	f000 fa0f 	bl	80027b4 <print_cli>
  // Check deadline
	if (xTaskGetTickCount() > taskDisplayRhDeadline) {
 8002396:	f005 fb3f 	bl	8007a18 <xTaskGetTickCount>
 800239a:	4602      	mov	r2, r0
 800239c:	4b43      	ldr	r3, [pc, #268]	@ (80024ac <StartTask06+0x1b4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d902      	bls.n	80023aa <StartTask06+0xb2>
		print_cli("Task Display Temperature missed deadline\n");
 80023a4:	4847      	ldr	r0, [pc, #284]	@ (80024c4 <StartTask06+0x1cc>)
 80023a6:	f000 fa05 	bl	80027b4 <print_cli>
	}
	if (detectChange(&tasks[5], &prev_tasks[5]))
 80023aa:	4947      	ldr	r1, [pc, #284]	@ (80024c8 <StartTask06+0x1d0>)
 80023ac:	4847      	ldr	r0, [pc, #284]	@ (80024cc <StartTask06+0x1d4>)
 80023ae:	f7ff faf8 	bl	80019a2 <detectChange>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d03a      	beq.n	800242e <StartTask06+0x136>
	{
	if(tasks[5].deadline != prev_tasks[5].deadline)
 80023b8:	4b3a      	ldr	r3, [pc, #232]	@ (80024a4 <StartTask06+0x1ac>)
 80023ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80023be:	4b44      	ldr	r3, [pc, #272]	@ (80024d0 <StartTask06+0x1d8>)
 80023c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d02d      	beq.n	8002424 <StartTask06+0x12c>
	  {
		  taskDisplayRhDeadline += pdMS_TO_TICKS(tasks[5].period)
 80023c8:	4b36      	ldr	r3, [pc, #216]	@ (80024a4 <StartTask06+0x1ac>)
 80023ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ce:	461a      	mov	r2, r3
 80023d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023d4:	fb02 f303 	mul.w	r3, r2, r3
 80023d8:	4a33      	ldr	r2, [pc, #204]	@ (80024a8 <StartTask06+0x1b0>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	099a      	lsrs	r2, r3, #6
						- pdMS_TO_TICKS(prev_tasks[5].deadline) + pdMS_TO_TICKS(tasks[5].deadline);
 80023e0:	4b3b      	ldr	r3, [pc, #236]	@ (80024d0 <StartTask06+0x1d8>)
 80023e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023e6:	4619      	mov	r1, r3
 80023e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	492d      	ldr	r1, [pc, #180]	@ (80024a8 <StartTask06+0x1b0>)
 80023f2:	fba1 1303 	umull	r1, r3, r1, r3
 80023f6:	099b      	lsrs	r3, r3, #6
 80023f8:	1ad2      	subs	r2, r2, r3
 80023fa:	4b2a      	ldr	r3, [pc, #168]	@ (80024a4 <StartTask06+0x1ac>)
 80023fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002400:	4619      	mov	r1, r3
 8002402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	4927      	ldr	r1, [pc, #156]	@ (80024a8 <StartTask06+0x1b0>)
 800240c:	fba1 1303 	umull	r1, r3, r1, r3
 8002410:	099b      	lsrs	r3, r3, #6
 8002412:	441a      	add	r2, r3
		  taskDisplayRhDeadline += pdMS_TO_TICKS(tasks[5].period)
 8002414:	4b25      	ldr	r3, [pc, #148]	@ (80024ac <StartTask06+0x1b4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4413      	add	r3, r2
 800241a:	4a24      	ldr	r2, [pc, #144]	@ (80024ac <StartTask06+0x1b4>)
 800241c:	6013      	str	r3, [r2, #0]
		  print_cli("TASK 06 THAY DOI DEADLINE\n");
 800241e:	482d      	ldr	r0, [pc, #180]	@ (80024d4 <StartTask06+0x1dc>)
 8002420:	f000 f9c8 	bl	80027b4 <print_cli>
	  }
	updatePrevious(&prev_tasks[5], &tasks[5]);
 8002424:	4929      	ldr	r1, [pc, #164]	@ (80024cc <StartTask06+0x1d4>)
 8002426:	4828      	ldr	r0, [pc, #160]	@ (80024c8 <StartTask06+0x1d0>)
 8002428:	f7ff fa9c 	bl	8001964 <updatePrevious>
 800242c:	e010      	b.n	8002450 <StartTask06+0x158>
	 }else
	 {
	taskDisplayRhDeadline += pdMS_TO_TICKS(tasks[5].period);
 800242e:	4b1d      	ldr	r3, [pc, #116]	@ (80024a4 <StartTask06+0x1ac>)
 8002430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002434:	461a      	mov	r2, r3
 8002436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800243a:	fb02 f303 	mul.w	r3, r2, r3
 800243e:	4a1a      	ldr	r2, [pc, #104]	@ (80024a8 <StartTask06+0x1b0>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	099a      	lsrs	r2, r3, #6
 8002446:	4b19      	ldr	r3, [pc, #100]	@ (80024ac <StartTask06+0x1b4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4413      	add	r3, r2
 800244c:	4a17      	ldr	r2, [pc, #92]	@ (80024ac <StartTask06+0x1b4>)
 800244e:	6013      	str	r3, [r2, #0]
	 }
	timeInSeconds = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8002450:	f003 fe70 	bl	8006134 <osKernelGetTickCount>
 8002454:	ee07 0a90 	vmov	s15, r0
 8002458:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800245c:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80024b4 <StartTask06+0x1bc>
 8002460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002464:	edc7 7a07 	vstr	s15, [r7, #28]
	print_cli("The end time of display rh over UART, LCD: %.3f\n", timeInSeconds);
 8002468:	69f8      	ldr	r0, [r7, #28]
 800246a:	f7fe f875 	bl	8000558 <__aeabi_f2d>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4819      	ldr	r0, [pc, #100]	@ (80024d8 <StartTask06+0x1e0>)
 8002474:	f000 f99e 	bl	80027b4 <print_cli>
	updatePriorities();
 8002478:	f7ff f9ac 	bl	80017d4 <updatePriorities>
	// Delay until next period
	vTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(tasks[5].period));
 800247c:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <StartTask06+0x1ac>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002482:	461a      	mov	r2, r3
 8002484:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002488:	fb02 f303 	mul.w	r3, r2, r3
 800248c:	4a06      	ldr	r2, [pc, #24]	@ (80024a8 <StartTask06+0x1b0>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	099a      	lsrs	r2, r3, #6
 8002494:	f107 0318 	add.w	r3, r7, #24
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f005 f88a 	bl	80075b4 <vTaskDelayUntil>
  osMessageQueueGet(myQueue03Handle, &rhRecv, NULL, osWaitForever);
 80024a0:	e742      	b.n	8002328 <StartTask06+0x30>
 80024a2:	bf00      	nop
 80024a4:	20000000 	.word	0x20000000
 80024a8:	10624dd3 	.word	0x10624dd3
 80024ac:	200004d8 	.word	0x200004d8
 80024b0:	200004b0 	.word	0x200004b0
 80024b4:	447a0000 	.word	0x447a0000
 80024b8:	0800c400 	.word	0x0800c400
 80024bc:	0800c434 	.word	0x0800c434
 80024c0:	0800c43c 	.word	0x0800c43c
 80024c4:	0800c220 	.word	0x0800c220
 80024c8:	20000134 	.word	0x20000134
 80024cc:	2000008c 	.word	0x2000008c
 80024d0:	200000a8 	.word	0x200000a8
 80024d4:	0800c44c 	.word	0x0800c44c
 80024d8:	0800c468 	.word	0x0800c468

080024dc <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
void StartTask07(void *argument)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b0aa      	sub	sp, #168	@ 0xa8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask07 */
	uint8_t Recv_ISR[20];
	TaskData taskData;
	int size;
	char m;
	int fieldRecv[12] = {0};
 80024e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024e8:	2230      	movs	r2, #48	@ 0x30
 80024ea:	2100      	movs	r1, #0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f007 fd03 	bl	8009ef8 <memset>
	int field[6] = {0};
 80024f2:	f107 030c 	add.w	r3, r7, #12
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	60da      	str	r2, [r3, #12]
 8002500:	611a      	str	r2, [r3, #16]
 8002502:	615a      	str	r2, [r3, #20]
	int idx;
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(myQueue04Handle, &Recv_ISR, NULL, osWaitForever);
 8002504:	4b9c      	ldr	r3, [pc, #624]	@ (8002778 <StartTask07+0x29c>)
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
 8002510:	2200      	movs	r2, #0
 8002512:	f003 ffab 	bl	800646c <osMessageQueueGet>
	print_cli("Nhan tu ngat yeu cau thay doi thong so lap lich\n");
 8002516:	4899      	ldr	r0, [pc, #612]	@ (800277c <StartTask07+0x2a0>)
 8002518:	f000 f94c 	bl	80027b4 <print_cli>
	// Chuyển đổi ký tự ASCII sang số nguyên
		    for (int i = 0; i < 12; i++) {
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002522:	e013      	b.n	800254c <StartTask07+0x70>
		        fieldRecv[i] = Recv_ISR[i] - '0'; // Trừ '0' để chuyển ký tự sang số
 8002524:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8002528:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800252c:	4413      	add	r3, r2
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002534:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	33a8      	adds	r3, #168	@ 0xa8
 800253c:	443b      	add	r3, r7
 800253e:	f843 2c84 	str.w	r2, [r3, #-132]
		    for (int i = 0; i < 12; i++) {
 8002542:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002546:	3301      	adds	r3, #1
 8002548:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800254c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002550:	2b0b      	cmp	r3, #11
 8002552:	dde7      	ble.n	8002524 <StartTask07+0x48>
		    }
		    // Ghép các cặp số thành số có 2 chữ số
		    for (int j = 0; j < 6; j++) {
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800255a:	e022      	b.n	80025a2 <StartTask07+0xc6>
		        field[j] = fieldRecv[2 * j] * 10 + fieldRecv[2 * j + 1]; // Ghép số
 800255c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	33a8      	adds	r3, #168	@ 0xa8
 8002566:	443b      	add	r3, r7
 8002568:	f853 2c84 	ldr.w	r2, [r3, #-132]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	461a      	mov	r2, r3
 8002576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	3301      	adds	r3, #1
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	33a8      	adds	r3, #168	@ 0xa8
 8002582:	443b      	add	r3, r7
 8002584:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002588:	441a      	add	r2, r3
 800258a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	33a8      	adds	r3, #168	@ 0xa8
 8002592:	443b      	add	r3, r7
 8002594:	f843 2c9c 	str.w	r2, [r3, #-156]
		    for (int j = 0; j < 6; j++) {
 8002598:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800259c:	3301      	adds	r3, #1
 800259e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025a6:	2b05      	cmp	r3, #5
 80025a8:	ddd8      	ble.n	800255c <StartTask07+0x80>
		    }
		idx = field[0];
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		print_cli("TASK %d\n", field[0] + 1);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3301      	adds	r3, #1
 80025b4:	4619      	mov	r1, r3
 80025b6:	4872      	ldr	r0, [pc, #456]	@ (8002780 <StartTask07+0x2a4>)
 80025b8:	f000 f8fc 	bl	80027b4 <print_cli>
		print_cli("Period is %d\n", field[1]);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4619      	mov	r1, r3
 80025c0:	4870      	ldr	r0, [pc, #448]	@ (8002784 <StartTask07+0x2a8>)
 80025c2:	f000 f8f7 	bl	80027b4 <print_cli>
		print_cli("EXECUTION TIME is %d\n", field[2]);
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	4619      	mov	r1, r3
 80025ca:	486f      	ldr	r0, [pc, #444]	@ (8002788 <StartTask07+0x2ac>)
 80025cc:	f000 f8f2 	bl	80027b4 <print_cli>
		print_cli("DEADLINE is %d\n", field[3]);
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	4619      	mov	r1, r3
 80025d4:	486d      	ldr	r0, [pc, #436]	@ (800278c <StartTask07+0x2b0>)
 80025d6:	f000 f8ed 	bl	80027b4 <print_cli>
		print_cli("AllPERIOD is %d\n", field[4]);
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	4619      	mov	r1, r3
 80025de:	486c      	ldr	r0, [pc, #432]	@ (8002790 <StartTask07+0x2b4>)
 80025e0:	f000 f8e8 	bl	80027b4 <print_cli>
		print_cli("PRIORITY is %d\n", field[5]);
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	4619      	mov	r1, r3
 80025e8:	486a      	ldr	r0, [pc, #424]	@ (8002794 <StartTask07+0x2b8>)
 80025ea:	f000 f8e3 	bl	80027b4 <print_cli>
//print_cli("Thay doi thong so Task %d\n", i+1);
	if(field[1] != 0 && tasks[idx].period != field[1] *100)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d024      	beq.n	800263e <StartTask07+0x162>
 80025f4:	4968      	ldr	r1, [pc, #416]	@ (8002798 <StartTask07+0x2bc>)
 80025f6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	3304      	adds	r3, #4
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	2164      	movs	r1, #100	@ 0x64
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	429a      	cmp	r2, r3
 8002612:	d014      	beq.n	800263e <StartTask07+0x162>
	{
		tasks[idx].period = field[1] * 100;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2264      	movs	r2, #100	@ 0x64
 8002618:	fb02 f103 	mul.w	r1, r2, r3
 800261c:	485e      	ldr	r0, [pc, #376]	@ (8002798 <StartTask07+0x2bc>)
 800261e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4403      	add	r3, r0
 800262c:	3304      	adds	r3, #4
 800262e:	6019      	str	r1, [r3, #0]
		print_cli("TASK %d THAY DOI CHU KY\n", idx + 1);
 8002630:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002634:	3301      	adds	r3, #1
 8002636:	4619      	mov	r1, r3
 8002638:	4858      	ldr	r0, [pc, #352]	@ (800279c <StartTask07+0x2c0>)
 800263a:	f000 f8bb 	bl	80027b4 <print_cli>
	}
	if(field[2] != 0)
	{
		//print_cli("Thay doi thoi gian thuc thi\n");
	}
	if(field[3] != 0 && tasks[idx].deadline != field[3] * 100)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d01d      	beq.n	8002680 <StartTask07+0x1a4>
 8002644:	4954      	ldr	r1, [pc, #336]	@ (8002798 <StartTask07+0x2bc>)
 8002646:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800264a:	4613      	mov	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	330c      	adds	r3, #12
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	2164      	movs	r1, #100	@ 0x64
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	429a      	cmp	r2, r3
 8002662:	d00d      	beq.n	8002680 <StartTask07+0x1a4>
	{
		tasks[idx].deadline = field[3] * 100;
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2264      	movs	r2, #100	@ 0x64
 8002668:	fb02 f103 	mul.w	r1, r2, r3
 800266c:	484a      	ldr	r0, [pc, #296]	@ (8002798 <StartTask07+0x2bc>)
 800266e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002672:	4613      	mov	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4403      	add	r3, r0
 800267c:	330c      	adds	r3, #12
 800267e:	6019      	str	r1, [r3, #0]
	}
	if(field[4] != 0 && tasks[idx].allPeriod != field[4] * 100)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d02d      	beq.n	80026e2 <StartTask07+0x206>
 8002686:	4944      	ldr	r1, [pc, #272]	@ (8002798 <StartTask07+0x2bc>)
 8002688:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	3314      	adds	r3, #20
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	2164      	movs	r1, #100	@ 0x64
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d01d      	beq.n	80026e2 <StartTask07+0x206>
	{
		print_cli("Thay doi chu ky toan bo\n");
 80026a6:	483e      	ldr	r0, [pc, #248]	@ (80027a0 <StartTask07+0x2c4>)
 80026a8:	f000 f884 	bl	80027b4 <print_cli>
		for (int i = 0; i <= 5; i++)
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80026b2:	e012      	b.n	80026da <StartTask07+0x1fe>
			tasks[i].allPeriod = field[4] * 100;
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	2264      	movs	r2, #100	@ 0x64
 80026b8:	fb02 f103 	mul.w	r1, r2, r3
 80026bc:	4836      	ldr	r0, [pc, #216]	@ (8002798 <StartTask07+0x2bc>)
 80026be:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4403      	add	r3, r0
 80026cc:	3314      	adds	r3, #20
 80026ce:	6019      	str	r1, [r3, #0]
		for (int i = 0; i <= 5; i++)
 80026d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026d4:	3301      	adds	r3, #1
 80026d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80026da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026de:	2b05      	cmp	r3, #5
 80026e0:	dde8      	ble.n	80026b4 <StartTask07+0x1d8>
	}if(field[5] != 0 && field[5] != tasks[idx].priotity)
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d01a      	beq.n	800271e <StartTask07+0x242>
 80026e8:	6a39      	ldr	r1, [r7, #32]
 80026ea:	482b      	ldr	r0, [pc, #172]	@ (8002798 <StartTask07+0x2bc>)
 80026ec:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80026f0:	4613      	mov	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4403      	add	r3, r0
 80026fa:	3310      	adds	r3, #16
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4299      	cmp	r1, r3
 8002700:	d00d      	beq.n	800271e <StartTask07+0x242>
	{
		print_cli("Muc uu tien phu thuoc vao deadline\n");
 8002702:	4828      	ldr	r0, [pc, #160]	@ (80027a4 <StartTask07+0x2c8>)
 8002704:	f000 f856 	bl	80027b4 <print_cli>
		tasks[idx].priotity = field[5];
 8002708:	6a39      	ldr	r1, [r7, #32]
 800270a:	4823      	ldr	r0, [pc, #140]	@ (8002798 <StartTask07+0x2bc>)
 800270c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4403      	add	r3, r0
 800271a:	3310      	adds	r3, #16
 800271c:	6019      	str	r1, [r3, #0]
	}
	for (int i = 0; i <= 5; i++)
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002724:	e00c      	b.n	8002740 <StartTask07+0x264>
			field[i] = 0;
 8002726:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	33a8      	adds	r3, #168	@ 0xa8
 800272e:	443b      	add	r3, r7
 8002730:	2200      	movs	r2, #0
 8002732:	f843 2c9c 	str.w	r2, [r3, #-156]
	for (int i = 0; i <= 5; i++)
 8002736:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800273a:	3301      	adds	r3, #1
 800273c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002740:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002744:	2b05      	cmp	r3, #5
 8002746:	ddee      	ble.n	8002726 <StartTask07+0x24a>
		for (int i = 0; i <= 11; i++)
 8002748:	2300      	movs	r3, #0
 800274a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800274e:	e00c      	b.n	800276a <StartTask07+0x28e>
			fieldRecv[i] = 0;
 8002750:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	33a8      	adds	r3, #168	@ 0xa8
 8002758:	443b      	add	r3, r7
 800275a:	2200      	movs	r2, #0
 800275c:	f843 2c84 	str.w	r2, [r3, #-132]
		for (int i = 0; i <= 11; i++)
 8002760:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002764:	3301      	adds	r3, #1
 8002766:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800276a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800276e:	2b0b      	cmp	r3, #11
 8002770:	ddee      	ble.n	8002750 <StartTask07+0x274>
	    osThreadYield();
 8002772:	f003 fd87 	bl	8006284 <osThreadYield>
	osMessageQueueGet(myQueue04Handle, &Recv_ISR, NULL, osWaitForever);
 8002776:	e6c5      	b.n	8002504 <StartTask07+0x28>
 8002778:	200004b4 	.word	0x200004b4
 800277c:	0800c49c 	.word	0x0800c49c
 8002780:	0800c4d0 	.word	0x0800c4d0
 8002784:	0800c4dc 	.word	0x0800c4dc
 8002788:	0800c4ec 	.word	0x0800c4ec
 800278c:	0800c504 	.word	0x0800c504
 8002790:	0800c514 	.word	0x0800c514
 8002794:	0800c528 	.word	0x0800c528
 8002798:	20000000 	.word	0x20000000
 800279c:	0800c538 	.word	0x0800c538
 80027a0:	0800c554 	.word	0x0800c554
 80027a4:	0800c570 	.word	0x0800c570

080027a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027ac:	b672      	cpsid	i
}
 80027ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <Error_Handler+0x8>

080027b4 <print_cli>:
//
//	HAL_UART_Transmit(&huart1,(uint8_t *)stringArray,len_str,200);
//}

void print_cli(const char* format, ...)
{
 80027b4:	b40f      	push	{r0, r1, r2, r3}
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b0c2      	sub	sp, #264	@ 0x108
 80027ba:	af00      	add	r7, sp, #0
    // Tăng kích thước bộ đệm nếu cần xử lý chuỗi lớn hơn
    char buffer[256];

    va_list args;
    va_start(args, format);
 80027bc:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80027c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80027c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80027c8:	601a      	str	r2, [r3, #0]

    // Sử dụng vsnprintf để đảm bảo an toàn bộ đệm
    int len = vsnprintf(buffer, sizeof(buffer), format, args);
 80027ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80027ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80027d2:	1d38      	adds	r0, r7, #4
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80027da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027de:	f007 fae9 	bl	8009db4 <vsniprintf>
 80027e2:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    va_end(args);

    if (len > 0) {
 80027e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	dd0f      	ble.n	800280e <print_cli+0x5a>
        // Nếu chuỗi dài hơn bộ đệm, chỉ gửi phần vừa bộ đệm
        if (len >= sizeof(buffer)) {
 80027ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027f2:	2bff      	cmp	r3, #255	@ 0xff
 80027f4:	d902      	bls.n	80027fc <print_cli+0x48>
            len = sizeof(buffer) - 1;
 80027f6:	23ff      	movs	r3, #255	@ 0xff
 80027f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        }
        HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 80027fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002800:	b29a      	uxth	r2, r3
 8002802:	1d39      	adds	r1, r7, #4
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
 8002808:	4805      	ldr	r0, [pc, #20]	@ (8002820 <print_cli+0x6c>)
 800280a:	f002 fc0f 	bl	800502c <HAL_UART_Transmit>
    }
}
 800280e:	bf00      	nop
 8002810:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002814:	46bd      	mov	sp, r7
 8002816:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800281a:	b004      	add	sp, #16
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	20000444 	.word	0x20000444

08002824 <SHT2x_Init>:
	
/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 800282c:	4a04      	ldr	r2, [pc, #16]	@ (8002840 <SHT2x_Init+0x1c>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6013      	str	r3, [r2, #0]
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000500 	.word	0x20000500

08002844 <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 800284a:	23e7      	movs	r3, #231	@ 0xe7
 800284c:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 800284e:	4b0c      	ldr	r3, [pc, #48]	@ (8002880 <SHT2x_ReadUserReg+0x3c>)
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	1dba      	adds	r2, r7, #6
 8002854:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2301      	movs	r3, #1
 800285c:	2180      	movs	r1, #128	@ 0x80
 800285e:	f001 f887 	bl	8003970 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 8002862:	4b07      	ldr	r3, [pc, #28]	@ (8002880 <SHT2x_ReadUserReg+0x3c>)
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	1dfa      	adds	r2, r7, #7
 8002868:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	2301      	movs	r3, #1
 8002870:	2180      	movs	r1, #128	@ 0x80
 8002872:	f001 f97b 	bl	8003b6c <HAL_I2C_Master_Receive>
	return val;
 8002876:	79fb      	ldrb	r3, [r7, #7]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20000500 	.word	0x20000500

08002884 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af02      	add	r7, sp, #8
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
	uint8_t val[3] = { 0 };
 800288e:	4b13      	ldr	r3, [pc, #76]	@ (80028dc <SHT2x_GetRaw+0x58>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	81bb      	strh	r3, [r7, #12]
 8002894:	2300      	movs	r3, #0
 8002896:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8002898:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <SHT2x_GetRaw+0x5c>)
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	1dfa      	adds	r2, r7, #7
 800289e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2301      	movs	r3, #1
 80028a6:	2180      	movs	r1, #128	@ 0x80
 80028a8:	f001 f862 	bl	8003970 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 80028ac:	4b0c      	ldr	r3, [pc, #48]	@ (80028e0 <SHT2x_GetRaw+0x5c>)
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	f107 020c 	add.w	r2, r7, #12
 80028b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2303      	movs	r3, #3
 80028bc:	2180      	movs	r1, #128	@ 0x80
 80028be:	f001 f955 	bl	8003b6c <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 80028c2:	7b3b      	ldrb	r3, [r7, #12]
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	b21a      	sxth	r2, r3
 80028c8:	7b7b      	ldrb	r3, [r7, #13]
 80028ca:	b21b      	sxth	r3, r3
 80028cc:	4313      	orrs	r3, r2
 80028ce:	b21b      	sxth	r3, r3
 80028d0:	b29b      	uxth	r3, r3
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	0800c594 	.word	0x0800c594
 80028e0:	20000500 	.word	0x20000500
 80028e4:	00000000 	.word	0x00000000

080028e8 <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <SHT2x_GetTemperature+0x14>
 80028f8:	23e3      	movs	r3, #227	@ 0xe3
 80028fa:	e000      	b.n	80028fe <SHT2x_GetTemperature+0x16>
 80028fc:	23f3      	movs	r3, #243	@ 0xf3
 80028fe:	73fb      	strb	r3, [r7, #15]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff ffbe 	bl	8002884 <SHT2x_GetRaw>
 8002908:	4603      	mov	r3, r0
 800290a:	4618      	mov	r0, r3
 800290c:	f7fd fe12 	bl	8000534 <__aeabi_i2d>
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	4b16      	ldr	r3, [pc, #88]	@ (8002970 <SHT2x_GetTemperature+0x88>)
 8002916:	f7fd ffa1 	bl	800085c <__aeabi_ddiv>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4610      	mov	r0, r2
 8002920:	4619      	mov	r1, r3
 8002922:	a30f      	add	r3, pc, #60	@ (adr r3, 8002960 <SHT2x_GetTemperature+0x78>)
 8002924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002928:	f7fd fe6e 	bl	8000608 <__aeabi_dmul>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	a30c      	add	r3, pc, #48	@ (adr r3, 8002968 <SHT2x_GetTemperature+0x80>)
 8002936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293a:	f7fd fcad 	bl	8000298 <__aeabi_dsub>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	f7fe f937 	bl	8000bb8 <__aeabi_d2f>
 800294a:	4603      	mov	r3, r0
 800294c:	ee07 3a90 	vmov	s15, r3
}
 8002950:	eeb0 0a67 	vmov.f32	s0, s15
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	f3af 8000 	nop.w
 8002960:	3d70a3d7 	.word	0x3d70a3d7
 8002964:	4065f70a 	.word	0x4065f70a
 8002968:	cccccccd 	.word	0xcccccccd
 800296c:	40476ccc 	.word	0x40476ccc
 8002970:	40f00000 	.word	0x40f00000

08002974 <SHT2x_GetRelativeHumidity>:
/**
 * @brief Measures and gets the current relative humidity.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point relative humidity value.
 */
float SHT2x_GetRelativeHumidity(uint8_t hold) {
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_RH_HOLD : SHT2x_READ_RH_NOHOLD);
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <SHT2x_GetRelativeHumidity+0x14>
 8002984:	23e5      	movs	r3, #229	@ 0xe5
 8002986:	e000      	b.n	800298a <SHT2x_GetRelativeHumidity+0x16>
 8002988:	23f5      	movs	r3, #245	@ 0xf5
 800298a:	73fb      	strb	r3, [r7, #15]
	return -6 + 125.00 * (SHT2x_GetRaw(cmd) / 65536.0);
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff ff78 	bl	8002884 <SHT2x_GetRaw>
 8002994:	4603      	mov	r3, r0
 8002996:	4618      	mov	r0, r3
 8002998:	f7fd fdcc 	bl	8000534 <__aeabi_i2d>
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <SHT2x_GetRelativeHumidity+0x74>)
 80029a2:	f7fd ff5b 	bl	800085c <__aeabi_ddiv>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	4b0e      	ldr	r3, [pc, #56]	@ (80029ec <SHT2x_GetRelativeHumidity+0x78>)
 80029b4:	f7fd fe28 	bl	8000608 <__aeabi_dmul>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <SHT2x_GetRelativeHumidity+0x7c>)
 80029c6:	f7fd fc67 	bl	8000298 <__aeabi_dsub>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4610      	mov	r0, r2
 80029d0:	4619      	mov	r1, r3
 80029d2:	f7fe f8f1 	bl	8000bb8 <__aeabi_d2f>
 80029d6:	4603      	mov	r3, r0
 80029d8:	ee07 3a90 	vmov	s15, r3
}
 80029dc:	eeb0 0a67 	vmov.f32	s0, s15
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40f00000 	.word	0x40f00000
 80029ec:	405f4000 	.word	0x405f4000
 80029f0:	40180000 	.word	0x40180000

080029f4 <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14-bit temperature and 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	4603      	mov	r3, r0
 80029fc:	71fb      	strb	r3, [r7, #7]
	uint8_t val = SHT2x_ReadUserReg();
 80029fe:	f7ff ff21 	bl	8002844 <SHT2x_ReadUserReg>
 8002a02:	4603      	mov	r3, r0
 8002a04:	73fb      	strb	r3, [r7, #15]
	val = (val & 0x7e) | res;
 8002a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a0a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002a0e:	b25a      	sxtb	r2, r3
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	b25b      	sxtb	r3, r3
 8002a18:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 8002a1a:	23e6      	movs	r3, #230	@ 0xe6
 8002a1c:	733b      	strb	r3, [r7, #12]
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 8002a22:	4b07      	ldr	r3, [pc, #28]	@ (8002a40 <SHT2x_SetResolution+0x4c>)
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	f107 020c 	add.w	r2, r7, #12
 8002a2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	2302      	movs	r3, #2
 8002a32:	2180      	movs	r1, #128	@ 0x80
 8002a34:	f000 ff9c 	bl	8003970 <HAL_I2C_Master_Transmit>
}
 8002a38:	bf00      	nop
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20000500 	.word	0x20000500

08002a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	607b      	str	r3, [r7, #4]
 8002a4e:	4b12      	ldr	r3, [pc, #72]	@ (8002a98 <HAL_MspInit+0x54>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	4a11      	ldr	r2, [pc, #68]	@ (8002a98 <HAL_MspInit+0x54>)
 8002a54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a98 <HAL_MspInit+0x54>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a62:	607b      	str	r3, [r7, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	603b      	str	r3, [r7, #0]
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a98 <HAL_MspInit+0x54>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a98 <HAL_MspInit+0x54>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a76:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <HAL_MspInit+0x54>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	210f      	movs	r1, #15
 8002a86:	f06f 0001 	mvn.w	r0, #1
 8002a8a:	f000 fbe0 	bl	800324e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800

08002a9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08e      	sub	sp, #56	@ 0x38
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a63      	ldr	r2, [pc, #396]	@ (8002c48 <HAL_I2C_MspInit+0x1ac>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d12c      	bne.n	8002b18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
 8002ac2:	4b62      	ldr	r3, [pc, #392]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	4a61      	ldr	r2, [pc, #388]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ace:	4b5f      	ldr	r3, [pc, #380]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ada:	23c0      	movs	r3, #192	@ 0xc0
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ade:	2312      	movs	r3, #18
 8002ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002aea:	2304      	movs	r3, #4
 8002aec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002af2:	4619      	mov	r1, r3
 8002af4:	4856      	ldr	r0, [pc, #344]	@ (8002c50 <HAL_I2C_MspInit+0x1b4>)
 8002af6:	f000 fc73 	bl	80033e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	4b53      	ldr	r3, [pc, #332]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	4a52      	ldr	r2, [pc, #328]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002b04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b0a:	4b50      	ldr	r3, [pc, #320]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b16:	e093      	b.n	8002c40 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a4d      	ldr	r2, [pc, #308]	@ (8002c54 <HAL_I2C_MspInit+0x1b8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d13d      	bne.n	8002b9e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	4b49      	ldr	r3, [pc, #292]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	4a48      	ldr	r2, [pc, #288]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b32:	4b46      	ldr	r3, [pc, #280]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	61bb      	str	r3, [r7, #24]
 8002b3c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b44:	2312      	movs	r3, #18
 8002b46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b50:	2304      	movs	r3, #4
 8002b52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b58:	4619      	mov	r1, r3
 8002b5a:	483d      	ldr	r0, [pc, #244]	@ (8002c50 <HAL_I2C_MspInit+0x1b4>)
 8002b5c:	f000 fc40 	bl	80033e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b60:	2308      	movs	r3, #8
 8002b62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b64:	2312      	movs	r3, #18
 8002b66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002b70:	2309      	movs	r3, #9
 8002b72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4835      	ldr	r0, [pc, #212]	@ (8002c50 <HAL_I2C_MspInit+0x1b4>)
 8002b7c:	f000 fc30 	bl	80033e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	4b31      	ldr	r3, [pc, #196]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	4a30      	ldr	r2, [pc, #192]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002b8a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b90:	4b2e      	ldr	r3, [pc, #184]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	697b      	ldr	r3, [r7, #20]
}
 8002b9c:	e050      	b.n	8002c40 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8002c58 <HAL_I2C_MspInit+0x1bc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d14b      	bne.n	8002c40 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	4b27      	ldr	r3, [pc, #156]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb0:	4a26      	ldr	r2, [pc, #152]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002bb2:	f043 0304 	orr.w	r3, r3, #4
 8002bb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb8:	4b24      	ldr	r3, [pc, #144]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	4b20      	ldr	r3, [pc, #128]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002be0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002be6:	2312      	movs	r3, #18
 8002be8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bf2:	2304      	movs	r3, #4
 8002bf4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4817      	ldr	r0, [pc, #92]	@ (8002c5c <HAL_I2C_MspInit+0x1c0>)
 8002bfe:	f000 fbef 	bl	80033e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c08:	2312      	movs	r3, #18
 8002c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c10:	2303      	movs	r3, #3
 8002c12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c14:	2304      	movs	r3, #4
 8002c16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4810      	ldr	r0, [pc, #64]	@ (8002c60 <HAL_I2C_MspInit+0x1c4>)
 8002c20:	f000 fbde 	bl	80033e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	4b08      	ldr	r3, [pc, #32]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2c:	4a07      	ldr	r2, [pc, #28]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002c2e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c32:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c34:	4b05      	ldr	r3, [pc, #20]	@ (8002c4c <HAL_I2C_MspInit+0x1b0>)
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
}
 8002c40:	bf00      	nop
 8002c42:	3738      	adds	r7, #56	@ 0x38
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40005400 	.word	0x40005400
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40020400 	.word	0x40020400
 8002c54:	40005800 	.word	0x40005800
 8002c58:	40005c00 	.word	0x40005c00
 8002c5c:	40020800 	.word	0x40020800
 8002c60:	40020000 	.word	0x40020000

08002c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	@ 0x28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 0314 	add.w	r3, r7, #20
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf8 <HAL_UART_MspInit+0x94>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d134      	bne.n	8002cf0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cfc <HAL_UART_MspInit+0x98>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8002cfc <HAL_UART_MspInit+0x98>)
 8002c90:	f043 0310 	orr.w	r3, r3, #16
 8002c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c96:	4b19      	ldr	r3, [pc, #100]	@ (8002cfc <HAL_UART_MspInit+0x98>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	4b15      	ldr	r3, [pc, #84]	@ (8002cfc <HAL_UART_MspInit+0x98>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	4a14      	ldr	r2, [pc, #80]	@ (8002cfc <HAL_UART_MspInit+0x98>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb2:	4b12      	ldr	r3, [pc, #72]	@ (8002cfc <HAL_UART_MspInit+0x98>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cbe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cd0:	2307      	movs	r3, #7
 8002cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd4:	f107 0314 	add.w	r3, r7, #20
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4809      	ldr	r0, [pc, #36]	@ (8002d00 <HAL_UART_MspInit+0x9c>)
 8002cdc:	f000 fb80 	bl	80033e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2105      	movs	r1, #5
 8002ce4:	2025      	movs	r0, #37	@ 0x25
 8002ce6:	f000 fab2 	bl	800324e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cea:	2025      	movs	r0, #37	@ 0x25
 8002cec:	f000 facb 	bl	8003286 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002cf0:	bf00      	nop
 8002cf2:	3728      	adds	r7, #40	@ 0x28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40011000 	.word	0x40011000
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40020000 	.word	0x40020000

08002d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d08:	bf00      	nop
 8002d0a:	e7fd      	b.n	8002d08 <NMI_Handler+0x4>

08002d0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d10:	bf00      	nop
 8002d12:	e7fd      	b.n	8002d10 <HardFault_Handler+0x4>

08002d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d18:	bf00      	nop
 8002d1a:	e7fd      	b.n	8002d18 <MemManage_Handler+0x4>

08002d1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <BusFault_Handler+0x4>

08002d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <UsageFault_Handler+0x4>

08002d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d3e:	f000 f967 	bl	8003010 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002d42:	f005 f9b5 	bl	80080b0 <xTaskGetSchedulerState>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d001      	beq.n	8002d50 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002d4c:	f005 ffac 	bl	8008ca8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d58:	4802      	ldr	r0, [pc, #8]	@ (8002d64 <USART1_IRQHandler+0x10>)
 8002d5a:	f002 fa17 	bl	800518c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000444 	.word	0x20000444

08002d68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return 1;
 8002d6c:	2301      	movs	r3, #1
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <_kill>:

int _kill(int pid, int sig)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d82:	f007 f90b 	bl	8009f9c <__errno>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2216      	movs	r2, #22
 8002d8a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <_exit>:

void _exit (int status)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002da0:	f04f 31ff 	mov.w	r1, #4294967295
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ffe7 	bl	8002d78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002daa:	bf00      	nop
 8002dac:	e7fd      	b.n	8002daa <_exit+0x12>

08002dae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	e00a      	b.n	8002dd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dc0:	f3af 8000 	nop.w
 8002dc4:	4601      	mov	r1, r0
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	60ba      	str	r2, [r7, #8]
 8002dcc:	b2ca      	uxtb	r2, r1
 8002dce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	dbf0      	blt.n	8002dc0 <_read+0x12>
  }

  return len;
 8002dde:	687b      	ldr	r3, [r7, #4]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e009      	b.n	8002e0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	60ba      	str	r2, [r7, #8]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	dbf1      	blt.n	8002dfa <_write+0x12>
  }
  return len;
 8002e16:	687b      	ldr	r3, [r7, #4]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <_close>:

int _close(int file)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e48:	605a      	str	r2, [r3, #4]
  return 0;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <_isatty>:

int _isatty(int file)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e60:	2301      	movs	r3, #1
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e90:	4a14      	ldr	r2, [pc, #80]	@ (8002ee4 <_sbrk+0x5c>)
 8002e92:	4b15      	ldr	r3, [pc, #84]	@ (8002ee8 <_sbrk+0x60>)
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e9c:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <_sbrk+0x64>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ea4:	4b11      	ldr	r3, [pc, #68]	@ (8002eec <_sbrk+0x64>)
 8002ea6:	4a12      	ldr	r2, [pc, #72]	@ (8002ef0 <_sbrk+0x68>)
 8002ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eaa:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <_sbrk+0x64>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d207      	bcs.n	8002ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eb8:	f007 f870 	bl	8009f9c <__errno>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	220c      	movs	r2, #12
 8002ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec6:	e009      	b.n	8002edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ec8:	4b08      	ldr	r3, [pc, #32]	@ (8002eec <_sbrk+0x64>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ece:	4b07      	ldr	r3, [pc, #28]	@ (8002eec <_sbrk+0x64>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	4a05      	ldr	r2, [pc, #20]	@ (8002eec <_sbrk+0x64>)
 8002ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eda:	68fb      	ldr	r3, [r7, #12]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20018000 	.word	0x20018000
 8002ee8:	00000400 	.word	0x00000400
 8002eec:	20000504 	.word	0x20000504
 8002ef0:	20004fa8 	.word	0x20004fa8

08002ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ef8:	4b06      	ldr	r3, [pc, #24]	@ (8002f14 <SystemInit+0x20>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002efe:	4a05      	ldr	r2, [pc, #20]	@ (8002f14 <SystemInit+0x20>)
 8002f00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002f1c:	f7ff ffea 	bl	8002ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f20:	480c      	ldr	r0, [pc, #48]	@ (8002f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f22:	490d      	ldr	r1, [pc, #52]	@ (8002f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f24:	4a0d      	ldr	r2, [pc, #52]	@ (8002f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f28:	e002      	b.n	8002f30 <LoopCopyDataInit>

08002f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f2e:	3304      	adds	r3, #4

08002f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f34:	d3f9      	bcc.n	8002f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f36:	4a0a      	ldr	r2, [pc, #40]	@ (8002f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f38:	4c0a      	ldr	r4, [pc, #40]	@ (8002f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f3c:	e001      	b.n	8002f42 <LoopFillZerobss>

08002f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f40:	3204      	adds	r2, #4

08002f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f44:	d3fb      	bcc.n	8002f3e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002f46:	f007 f82f 	bl	8009fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f4a:	f7fe f9bd 	bl	80012c8 <main>
  bx  lr    
 8002f4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f58:	20000328 	.word	0x20000328
  ldr r2, =_sidata
 8002f5c:	0800caa4 	.word	0x0800caa4
  ldr r2, =_sbss
 8002f60:	20000328 	.word	0x20000328
  ldr r4, =_ebss
 8002f64:	20004fa8 	.word	0x20004fa8

08002f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f68:	e7fe      	b.n	8002f68 <ADC_IRQHandler>
	...

08002f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f70:	4b0e      	ldr	r3, [pc, #56]	@ (8002fac <HAL_Init+0x40>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0d      	ldr	r2, [pc, #52]	@ (8002fac <HAL_Init+0x40>)
 8002f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <HAL_Init+0x40>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0a      	ldr	r2, [pc, #40]	@ (8002fac <HAL_Init+0x40>)
 8002f82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f88:	4b08      	ldr	r3, [pc, #32]	@ (8002fac <HAL_Init+0x40>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a07      	ldr	r2, [pc, #28]	@ (8002fac <HAL_Init+0x40>)
 8002f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f94:	2003      	movs	r0, #3
 8002f96:	f000 f94f 	bl	8003238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f9a:	200f      	movs	r0, #15
 8002f9c:	f000 f808 	bl	8002fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fa0:	f7ff fd50 	bl	8002a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023c00 	.word	0x40023c00

08002fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fb8:	4b12      	ldr	r3, [pc, #72]	@ (8003004 <HAL_InitTick+0x54>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b12      	ldr	r3, [pc, #72]	@ (8003008 <HAL_InitTick+0x58>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f967 	bl	80032a2 <HAL_SYSTICK_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00e      	b.n	8002ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b0f      	cmp	r3, #15
 8002fe2:	d80a      	bhi.n	8002ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	f000 f92f 	bl	800324e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ff0:	4a06      	ldr	r2, [pc, #24]	@ (800300c <HAL_InitTick+0x5c>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000150 	.word	0x20000150
 8003008:	20000158 	.word	0x20000158
 800300c:	20000154 	.word	0x20000154

08003010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003014:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <HAL_IncTick+0x20>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <HAL_IncTick+0x24>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4413      	add	r3, r2
 8003020:	4a04      	ldr	r2, [pc, #16]	@ (8003034 <HAL_IncTick+0x24>)
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000158 	.word	0x20000158
 8003034:	20000508 	.word	0x20000508

08003038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return uwTick;
 800303c:	4b03      	ldr	r3, [pc, #12]	@ (800304c <HAL_GetTick+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000508 	.word	0x20000508

08003050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003058:	f7ff ffee 	bl	8003038 <HAL_GetTick>
 800305c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d005      	beq.n	8003076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800306a:	4b0a      	ldr	r3, [pc, #40]	@ (8003094 <HAL_Delay+0x44>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4413      	add	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003076:	bf00      	nop
 8003078:	f7ff ffde 	bl	8003038 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	429a      	cmp	r2, r3
 8003086:	d8f7      	bhi.n	8003078 <HAL_Delay+0x28>
  {
  }
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000158 	.word	0x20000158

08003098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a8:	4b0c      	ldr	r3, [pc, #48]	@ (80030dc <__NVIC_SetPriorityGrouping+0x44>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030b4:	4013      	ands	r3, r2
 80030b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ca:	4a04      	ldr	r2, [pc, #16]	@ (80030dc <__NVIC_SetPriorityGrouping+0x44>)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	60d3      	str	r3, [r2, #12]
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e4:	4b04      	ldr	r3, [pc, #16]	@ (80030f8 <__NVIC_GetPriorityGrouping+0x18>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	0a1b      	lsrs	r3, r3, #8
 80030ea:	f003 0307 	and.w	r3, r3, #7
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	2b00      	cmp	r3, #0
 800310c:	db0b      	blt.n	8003126 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	f003 021f 	and.w	r2, r3, #31
 8003114:	4907      	ldr	r1, [pc, #28]	@ (8003134 <__NVIC_EnableIRQ+0x38>)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	2001      	movs	r0, #1
 800311e:	fa00 f202 	lsl.w	r2, r0, r2
 8003122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	e000e100 	.word	0xe000e100

08003138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	6039      	str	r1, [r7, #0]
 8003142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003148:	2b00      	cmp	r3, #0
 800314a:	db0a      	blt.n	8003162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	490c      	ldr	r1, [pc, #48]	@ (8003184 <__NVIC_SetPriority+0x4c>)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	0112      	lsls	r2, r2, #4
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	440b      	add	r3, r1
 800315c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003160:	e00a      	b.n	8003178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	b2da      	uxtb	r2, r3
 8003166:	4908      	ldr	r1, [pc, #32]	@ (8003188 <__NVIC_SetPriority+0x50>)
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	3b04      	subs	r3, #4
 8003170:	0112      	lsls	r2, r2, #4
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	440b      	add	r3, r1
 8003176:	761a      	strb	r2, [r3, #24]
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000e100 	.word	0xe000e100
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800318c:	b480      	push	{r7}
 800318e:	b089      	sub	sp, #36	@ 0x24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f1c3 0307 	rsb	r3, r3, #7
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	bf28      	it	cs
 80031aa:	2304      	movcs	r3, #4
 80031ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3304      	adds	r3, #4
 80031b2:	2b06      	cmp	r3, #6
 80031b4:	d902      	bls.n	80031bc <NVIC_EncodePriority+0x30>
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3b03      	subs	r3, #3
 80031ba:	e000      	b.n	80031be <NVIC_EncodePriority+0x32>
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43da      	mvns	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	401a      	ands	r2, r3
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d4:	f04f 31ff 	mov.w	r1, #4294967295
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	fa01 f303 	lsl.w	r3, r1, r3
 80031de:	43d9      	mvns	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e4:	4313      	orrs	r3, r2
         );
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3724      	adds	r7, #36	@ 0x24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3b01      	subs	r3, #1
 8003200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003204:	d301      	bcc.n	800320a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003206:	2301      	movs	r3, #1
 8003208:	e00f      	b.n	800322a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800320a:	4a0a      	ldr	r2, [pc, #40]	@ (8003234 <SysTick_Config+0x40>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003212:	210f      	movs	r1, #15
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	f7ff ff8e 	bl	8003138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800321c:	4b05      	ldr	r3, [pc, #20]	@ (8003234 <SysTick_Config+0x40>)
 800321e:	2200      	movs	r2, #0
 8003220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003222:	4b04      	ldr	r3, [pc, #16]	@ (8003234 <SysTick_Config+0x40>)
 8003224:	2207      	movs	r2, #7
 8003226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	e000e010 	.word	0xe000e010

08003238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ff29 	bl	8003098 <__NVIC_SetPriorityGrouping>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800324e:	b580      	push	{r7, lr}
 8003250:	b086      	sub	sp, #24
 8003252:	af00      	add	r7, sp, #0
 8003254:	4603      	mov	r3, r0
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003260:	f7ff ff3e 	bl	80030e0 <__NVIC_GetPriorityGrouping>
 8003264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	6978      	ldr	r0, [r7, #20]
 800326c:	f7ff ff8e 	bl	800318c <NVIC_EncodePriority>
 8003270:	4602      	mov	r2, r0
 8003272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff5d 	bl	8003138 <__NVIC_SetPriority>
}
 800327e:	bf00      	nop
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	4603      	mov	r3, r0
 800328e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff ff31 	bl	80030fc <__NVIC_EnableIRQ>
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff ffa2 	bl	80031f4 <SysTick_Config>
 80032b0:	4603      	mov	r3, r0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032c8:	f7ff feb6 	bl	8003038 <HAL_GetTick>
 80032cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d008      	beq.n	80032ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2280      	movs	r2, #128	@ 0x80
 80032de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e052      	b.n	8003392 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0216 	bic.w	r2, r2, #22
 80032fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800330a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d103      	bne.n	800331c <HAL_DMA_Abort+0x62>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0208 	bic.w	r2, r2, #8
 800332a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800333c:	e013      	b.n	8003366 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800333e:	f7ff fe7b 	bl	8003038 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b05      	cmp	r3, #5
 800334a:	d90c      	bls.n	8003366 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2203      	movs	r2, #3
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e015      	b.n	8003392 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1e4      	bne.n	800333e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003378:	223f      	movs	r2, #63	@ 0x3f
 800337a:	409a      	lsls	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d004      	beq.n	80033b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2280      	movs	r2, #128	@ 0x80
 80033b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e00c      	b.n	80033d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2205      	movs	r2, #5
 80033bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0201 	bic.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	@ 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	e159      	b.n	80036b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033fc:	2201      	movs	r2, #1
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4013      	ands	r3, r2
 800340e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	429a      	cmp	r2, r3
 8003416:	f040 8148 	bne.w	80036aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b01      	cmp	r3, #1
 8003424:	d005      	beq.n	8003432 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800342e:	2b02      	cmp	r3, #2
 8003430:	d130      	bne.n	8003494 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	2203      	movs	r2, #3
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003468:	2201      	movs	r2, #1
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f003 0201 	and.w	r2, r3, #1
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b03      	cmp	r3, #3
 800349e:	d017      	beq.n	80034d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	2203      	movs	r2, #3
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d123      	bne.n	8003524 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	08da      	lsrs	r2, r3, #3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3208      	adds	r2, #8
 80034e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	220f      	movs	r2, #15
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	08da      	lsrs	r2, r3, #3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3208      	adds	r2, #8
 800351e:	69b9      	ldr	r1, [r7, #24]
 8003520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	2203      	movs	r2, #3
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 0203 	and.w	r2, r3, #3
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80a2 	beq.w	80036aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	4b57      	ldr	r3, [pc, #348]	@ (80036c8 <HAL_GPIO_Init+0x2e8>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356e:	4a56      	ldr	r2, [pc, #344]	@ (80036c8 <HAL_GPIO_Init+0x2e8>)
 8003570:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003574:	6453      	str	r3, [r2, #68]	@ 0x44
 8003576:	4b54      	ldr	r3, [pc, #336]	@ (80036c8 <HAL_GPIO_Init+0x2e8>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003582:	4a52      	ldr	r2, [pc, #328]	@ (80036cc <HAL_GPIO_Init+0x2ec>)
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	089b      	lsrs	r3, r3, #2
 8003588:	3302      	adds	r3, #2
 800358a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	220f      	movs	r2, #15
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43db      	mvns	r3, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4013      	ands	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a49      	ldr	r2, [pc, #292]	@ (80036d0 <HAL_GPIO_Init+0x2f0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d019      	beq.n	80035e2 <HAL_GPIO_Init+0x202>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a48      	ldr	r2, [pc, #288]	@ (80036d4 <HAL_GPIO_Init+0x2f4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <HAL_GPIO_Init+0x1fe>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a47      	ldr	r2, [pc, #284]	@ (80036d8 <HAL_GPIO_Init+0x2f8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00d      	beq.n	80035da <HAL_GPIO_Init+0x1fa>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a46      	ldr	r2, [pc, #280]	@ (80036dc <HAL_GPIO_Init+0x2fc>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d007      	beq.n	80035d6 <HAL_GPIO_Init+0x1f6>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a45      	ldr	r2, [pc, #276]	@ (80036e0 <HAL_GPIO_Init+0x300>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d101      	bne.n	80035d2 <HAL_GPIO_Init+0x1f2>
 80035ce:	2304      	movs	r3, #4
 80035d0:	e008      	b.n	80035e4 <HAL_GPIO_Init+0x204>
 80035d2:	2307      	movs	r3, #7
 80035d4:	e006      	b.n	80035e4 <HAL_GPIO_Init+0x204>
 80035d6:	2303      	movs	r3, #3
 80035d8:	e004      	b.n	80035e4 <HAL_GPIO_Init+0x204>
 80035da:	2302      	movs	r3, #2
 80035dc:	e002      	b.n	80035e4 <HAL_GPIO_Init+0x204>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_GPIO_Init+0x204>
 80035e2:	2300      	movs	r3, #0
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	f002 0203 	and.w	r2, r2, #3
 80035ea:	0092      	lsls	r2, r2, #2
 80035ec:	4093      	lsls	r3, r2
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035f4:	4935      	ldr	r1, [pc, #212]	@ (80036cc <HAL_GPIO_Init+0x2ec>)
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	3302      	adds	r3, #2
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003602:	4b38      	ldr	r3, [pc, #224]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003626:	4a2f      	ldr	r2, [pc, #188]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800362c:	4b2d      	ldr	r3, [pc, #180]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003650:	4a24      	ldr	r2, [pc, #144]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003656:	4b23      	ldr	r3, [pc, #140]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	43db      	mvns	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800367a:	4a1a      	ldr	r2, [pc, #104]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003680:	4b18      	ldr	r3, [pc, #96]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036a4:	4a0f      	ldr	r2, [pc, #60]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3301      	adds	r3, #1
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	2b0f      	cmp	r3, #15
 80036b4:	f67f aea2 	bls.w	80033fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	3724      	adds	r7, #36	@ 0x24
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40013800 	.word	0x40013800
 80036d0:	40020000 	.word	0x40020000
 80036d4:	40020400 	.word	0x40020400
 80036d8:	40020800 	.word	0x40020800
 80036dc:	40020c00 	.word	0x40020c00
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40013c00 	.word	0x40013c00

080036e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e12b      	b.n	8003952 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff f9c4 	bl	8002a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2224      	movs	r2, #36	@ 0x24
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800373a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800374a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800374c:	f001 fbf6 	bl	8004f3c <HAL_RCC_GetPCLK1Freq>
 8003750:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4a81      	ldr	r2, [pc, #516]	@ (800395c <HAL_I2C_Init+0x274>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d807      	bhi.n	800376c <HAL_I2C_Init+0x84>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a80      	ldr	r2, [pc, #512]	@ (8003960 <HAL_I2C_Init+0x278>)
 8003760:	4293      	cmp	r3, r2
 8003762:	bf94      	ite	ls
 8003764:	2301      	movls	r3, #1
 8003766:	2300      	movhi	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	e006      	b.n	800377a <HAL_I2C_Init+0x92>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a7d      	ldr	r2, [pc, #500]	@ (8003964 <HAL_I2C_Init+0x27c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	bf94      	ite	ls
 8003774:	2301      	movls	r3, #1
 8003776:	2300      	movhi	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e0e7      	b.n	8003952 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4a78      	ldr	r2, [pc, #480]	@ (8003968 <HAL_I2C_Init+0x280>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	0c9b      	lsrs	r3, r3, #18
 800378c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a6a      	ldr	r2, [pc, #424]	@ (800395c <HAL_I2C_Init+0x274>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d802      	bhi.n	80037bc <HAL_I2C_Init+0xd4>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	3301      	adds	r3, #1
 80037ba:	e009      	b.n	80037d0 <HAL_I2C_Init+0xe8>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	4a69      	ldr	r2, [pc, #420]	@ (800396c <HAL_I2C_Init+0x284>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	099b      	lsrs	r3, r3, #6
 80037ce:	3301      	adds	r3, #1
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	430b      	orrs	r3, r1
 80037d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	495c      	ldr	r1, [pc, #368]	@ (800395c <HAL_I2C_Init+0x274>)
 80037ec:	428b      	cmp	r3, r1
 80037ee:	d819      	bhi.n	8003824 <HAL_I2C_Init+0x13c>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1e59      	subs	r1, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80037fe:	1c59      	adds	r1, r3, #1
 8003800:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003804:	400b      	ands	r3, r1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_I2C_Init+0x138>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1e59      	subs	r1, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	fbb1 f3f3 	udiv	r3, r1, r3
 8003818:	3301      	adds	r3, #1
 800381a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381e:	e051      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 8003820:	2304      	movs	r3, #4
 8003822:	e04f      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d111      	bne.n	8003850 <HAL_I2C_Init+0x168>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1e58      	subs	r0, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	440b      	add	r3, r1
 800383a:	fbb0 f3f3 	udiv	r3, r0, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	e012      	b.n	8003876 <HAL_I2C_Init+0x18e>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1e58      	subs	r0, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	0099      	lsls	r1, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	fbb0 f3f3 	udiv	r3, r0, r3
 8003866:	3301      	adds	r3, #1
 8003868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_Init+0x196>
 800387a:	2301      	movs	r3, #1
 800387c:	e022      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10e      	bne.n	80038a4 <HAL_I2C_Init+0x1bc>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1e58      	subs	r0, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6859      	ldr	r1, [r3, #4]
 800388e:	460b      	mov	r3, r1
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	440b      	add	r3, r1
 8003894:	fbb0 f3f3 	udiv	r3, r0, r3
 8003898:	3301      	adds	r3, #1
 800389a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038a2:	e00f      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1e58      	subs	r0, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	0099      	lsls	r1, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ba:	3301      	adds	r3, #1
 80038bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	6809      	ldr	r1, [r1, #0]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6911      	ldr	r1, [r2, #16]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68d2      	ldr	r2, [r2, #12]
 80038fe:	4311      	orrs	r1, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	430b      	orrs	r3, r1
 8003906:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	000186a0 	.word	0x000186a0
 8003960:	001e847f 	.word	0x001e847f
 8003964:	003d08ff 	.word	0x003d08ff
 8003968:	431bde83 	.word	0x431bde83
 800396c:	10624dd3 	.word	0x10624dd3

08003970 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	461a      	mov	r2, r3
 800397c:	460b      	mov	r3, r1
 800397e:	817b      	strh	r3, [r7, #10]
 8003980:	4613      	mov	r3, r2
 8003982:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003984:	f7ff fb58 	bl	8003038 <HAL_GetTick>
 8003988:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b20      	cmp	r3, #32
 8003994:	f040 80e0 	bne.w	8003b58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	2319      	movs	r3, #25
 800399e:	2201      	movs	r2, #1
 80039a0:	4970      	ldr	r1, [pc, #448]	@ (8003b64 <HAL_I2C_Master_Transmit+0x1f4>)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 fc64 	bl	8004270 <I2C_WaitOnFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
 80039b0:	e0d3      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_I2C_Master_Transmit+0x50>
 80039bc:	2302      	movs	r3, #2
 80039be:	e0cc      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d007      	beq.n	80039e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0201 	orr.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2221      	movs	r2, #33	@ 0x21
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2210      	movs	r2, #16
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	893a      	ldrh	r2, [r7, #8]
 8003a16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4a50      	ldr	r2, [pc, #320]	@ (8003b68 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a28:	8979      	ldrh	r1, [r7, #10]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	6a3a      	ldr	r2, [r7, #32]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 face 	bl	8003fd0 <I2C_MasterRequestWrite>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e08d      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a54:	e066      	b.n	8003b24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	6a39      	ldr	r1, [r7, #32]
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 fd22 	bl	80044a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00d      	beq.n	8003a82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d107      	bne.n	8003a7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e06b      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	781a      	ldrb	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d11b      	bne.n	8003af8 <HAL_I2C_Master_Transmit+0x188>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d017      	beq.n	8003af8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	781a      	ldrb	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	6a39      	ldr	r1, [r7, #32]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fd19 	bl	8004534 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00d      	beq.n	8003b24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d107      	bne.n	8003b20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e01a      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d194      	bne.n	8003a56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e000      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	00100002 	.word	0x00100002
 8003b68:	ffff0000 	.word	0xffff0000

08003b6c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08c      	sub	sp, #48	@ 0x30
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	461a      	mov	r2, r3
 8003b78:	460b      	mov	r3, r1
 8003b7a:	817b      	strh	r3, [r7, #10]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b80:	f7ff fa5a 	bl	8003038 <HAL_GetTick>
 8003b84:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	f040 8217 	bne.w	8003fc2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	2319      	movs	r3, #25
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	497c      	ldr	r1, [pc, #496]	@ (8003d90 <HAL_I2C_Master_Receive+0x224>)
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fb66 	bl	8004270 <I2C_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003baa:	2302      	movs	r3, #2
 8003bac:	e20a      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_I2C_Master_Receive+0x50>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e203      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x458>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d007      	beq.n	8003be2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0201 	orr.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bf0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2222      	movs	r2, #34	@ 0x22
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2210      	movs	r2, #16
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	893a      	ldrh	r2, [r7, #8]
 8003c12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a5c      	ldr	r2, [pc, #368]	@ (8003d94 <HAL_I2C_Master_Receive+0x228>)
 8003c22:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c24:	8979      	ldrh	r1, [r7, #10]
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 fa52 	bl	80040d4 <I2C_MasterRequestRead>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e1c4      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d113      	bne.n	8003c6a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c42:	2300      	movs	r3, #0
 8003c44:	623b      	str	r3, [r7, #32]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	623b      	str	r3, [r7, #32]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	623b      	str	r3, [r7, #32]
 8003c56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	e198      	b.n	8003f9c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d11b      	bne.n	8003caa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c82:	2300      	movs	r3, #0
 8003c84:	61fb      	str	r3, [r7, #28]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	61fb      	str	r3, [r7, #28]
 8003c96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	e178      	b.n	8003f9c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d11b      	bne.n	8003cea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	e158      	b.n	8003f9c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d10:	e144      	b.n	8003f9c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	f200 80f1 	bhi.w	8003efe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d123      	bne.n	8003d6c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d26:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fc4b 	bl	80045c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e145      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d6a:	e117      	b.n	8003f9c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d14e      	bne.n	8003e12 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	4906      	ldr	r1, [pc, #24]	@ (8003d98 <HAL_I2C_Master_Receive+0x22c>)
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fa76 	bl	8004270 <I2C_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e11a      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x458>
 8003d8e:	bf00      	nop
 8003d90:	00100002 	.word	0x00100002
 8003d94:	ffff0000 	.word	0xffff0000
 8003d98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e10:	e0c4      	b.n	8003f9c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e18:	2200      	movs	r2, #0
 8003e1a:	496c      	ldr	r1, [pc, #432]	@ (8003fcc <HAL_I2C_Master_Receive+0x460>)
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 fa27 	bl	8004270 <I2C_WaitOnFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0cb      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e74:	2200      	movs	r2, #0
 8003e76:	4955      	ldr	r1, [pc, #340]	@ (8003fcc <HAL_I2C_Master_Receive+0x460>)
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f9f9 	bl	8004270 <I2C_WaitOnFlagUntilTimeout>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e09d      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003efc:	e04e      	b.n	8003f9c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fb5e 	bl	80045c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e058      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d124      	bne.n	8003f9c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d107      	bne.n	8003f6a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f68:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f47f aeb6 	bne.w	8003d12 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e000      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
  }
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3728      	adds	r7, #40	@ 0x28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	00010004 	.word	0x00010004

08003fd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d006      	beq.n	8003ffa <I2C_MasterRequestWrite+0x2a>
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d003      	beq.n	8003ffa <I2C_MasterRequestWrite+0x2a>
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ff8:	d108      	bne.n	800400c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	e00b      	b.n	8004024 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004010:	2b12      	cmp	r3, #18
 8004012:	d107      	bne.n	8004024 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004022:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f91d 	bl	8004270 <I2C_WaitOnFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00d      	beq.n	8004058 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800404a:	d103      	bne.n	8004054 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004052:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e035      	b.n	80040c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004060:	d108      	bne.n	8004074 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004062:	897b      	ldrh	r3, [r7, #10]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004070:	611a      	str	r2, [r3, #16]
 8004072:	e01b      	b.n	80040ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004074:	897b      	ldrh	r3, [r7, #10]
 8004076:	11db      	asrs	r3, r3, #7
 8004078:	b2db      	uxtb	r3, r3
 800407a:	f003 0306 	and.w	r3, r3, #6
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f063 030f 	orn	r3, r3, #15
 8004084:	b2da      	uxtb	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	490e      	ldr	r1, [pc, #56]	@ (80040cc <I2C_MasterRequestWrite+0xfc>)
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f966 	bl	8004364 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e010      	b.n	80040c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040a2:	897b      	ldrh	r3, [r7, #10]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	4907      	ldr	r1, [pc, #28]	@ (80040d0 <I2C_MasterRequestWrite+0x100>)
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f956 	bl	8004364 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	00010008 	.word	0x00010008
 80040d0:	00010002 	.word	0x00010002

080040d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	460b      	mov	r3, r1
 80040e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d006      	beq.n	800410e <I2C_MasterRequestRead+0x3a>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d003      	beq.n	800410e <I2C_MasterRequestRead+0x3a>
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800410c:	d108      	bne.n	8004120 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	e00b      	b.n	8004138 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004124:	2b11      	cmp	r3, #17
 8004126:	d107      	bne.n	8004138 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004136:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f893 	bl	8004270 <I2C_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00d      	beq.n	800416c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800415e:	d103      	bne.n	8004168 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004166:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e079      	b.n	8004260 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004174:	d108      	bne.n	8004188 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004176:	897b      	ldrh	r3, [r7, #10]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	611a      	str	r2, [r3, #16]
 8004186:	e05f      	b.n	8004248 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004188:	897b      	ldrh	r3, [r7, #10]
 800418a:	11db      	asrs	r3, r3, #7
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 0306 	and.w	r3, r3, #6
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f063 030f 	orn	r3, r3, #15
 8004198:	b2da      	uxtb	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	4930      	ldr	r1, [pc, #192]	@ (8004268 <I2C_MasterRequestRead+0x194>)
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f8dc 	bl	8004364 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e054      	b.n	8004260 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4929      	ldr	r1, [pc, #164]	@ (800426c <I2C_MasterRequestRead+0x198>)
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f8cc 	bl	8004364 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e044      	b.n	8004260 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f831 	bl	8004270 <I2C_WaitOnFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00d      	beq.n	8004230 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004222:	d103      	bne.n	800422c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800422a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e017      	b.n	8004260 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004230:	897b      	ldrh	r3, [r7, #10]
 8004232:	11db      	asrs	r3, r3, #7
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f003 0306 	and.w	r3, r3, #6
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f063 030e 	orn	r3, r3, #14
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	4907      	ldr	r1, [pc, #28]	@ (800426c <I2C_MasterRequestRead+0x198>)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f888 	bl	8004364 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	00010008 	.word	0x00010008
 800426c:	00010002 	.word	0x00010002

08004270 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004280:	e048      	b.n	8004314 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d044      	beq.n	8004314 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428a:	f7fe fed5 	bl	8003038 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d302      	bcc.n	80042a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d139      	bne.n	8004314 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	0c1b      	lsrs	r3, r3, #16
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d10d      	bne.n	80042c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	43da      	mvns	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4013      	ands	r3, r2
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bf0c      	ite	eq
 80042bc:	2301      	moveq	r3, #1
 80042be:	2300      	movne	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	e00c      	b.n	80042e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	43da      	mvns	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4013      	ands	r3, r2
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	79fb      	ldrb	r3, [r7, #7]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d116      	bne.n	8004314 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004300:	f043 0220 	orr.w	r2, r3, #32
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e023      	b.n	800435c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	0c1b      	lsrs	r3, r3, #16
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b01      	cmp	r3, #1
 800431c:	d10d      	bne.n	800433a <I2C_WaitOnFlagUntilTimeout+0xca>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	43da      	mvns	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4013      	ands	r3, r2
 800432a:	b29b      	uxth	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	e00c      	b.n	8004354 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	43da      	mvns	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	4013      	ands	r3, r2
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	bf0c      	ite	eq
 800434c:	2301      	moveq	r3, #1
 800434e:	2300      	movne	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	461a      	mov	r2, r3
 8004354:	79fb      	ldrb	r3, [r7, #7]
 8004356:	429a      	cmp	r2, r3
 8004358:	d093      	beq.n	8004282 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004372:	e071      	b.n	8004458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800437e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004382:	d123      	bne.n	80043cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004392:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800439c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b8:	f043 0204 	orr.w	r2, r3, #4
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e067      	b.n	800449c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d2:	d041      	beq.n	8004458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d4:	f7fe fe30 	bl	8003038 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d302      	bcc.n	80043ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d136      	bne.n	8004458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d10c      	bne.n	800440e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	43da      	mvns	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4013      	ands	r3, r2
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	bf14      	ite	ne
 8004406:	2301      	movne	r3, #1
 8004408:	2300      	moveq	r3, #0
 800440a:	b2db      	uxtb	r3, r3
 800440c:	e00b      	b.n	8004426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	43da      	mvns	r2, r3
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4013      	ands	r3, r2
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	bf14      	ite	ne
 8004420:	2301      	movne	r3, #1
 8004422:	2300      	moveq	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d016      	beq.n	8004458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004444:	f043 0220 	orr.w	r2, r3, #32
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e021      	b.n	800449c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	0c1b      	lsrs	r3, r3, #16
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b01      	cmp	r3, #1
 8004460:	d10c      	bne.n	800447c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	43da      	mvns	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4013      	ands	r3, r2
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	bf14      	ite	ne
 8004474:	2301      	movne	r3, #1
 8004476:	2300      	moveq	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	e00b      	b.n	8004494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	43da      	mvns	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4013      	ands	r3, r2
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	bf14      	ite	ne
 800448e:	2301      	movne	r3, #1
 8004490:	2300      	moveq	r3, #0
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	f47f af6d 	bne.w	8004374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044b0:	e034      	b.n	800451c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 f8e3 	bl	800467e <I2C_IsAcknowledgeFailed>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e034      	b.n	800452c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c8:	d028      	beq.n	800451c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ca:	f7fe fdb5 	bl	8003038 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d302      	bcc.n	80044e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d11d      	bne.n	800451c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ea:	2b80      	cmp	r3, #128	@ 0x80
 80044ec:	d016      	beq.n	800451c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004508:	f043 0220 	orr.w	r2, r3, #32
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e007      	b.n	800452c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004526:	2b80      	cmp	r3, #128	@ 0x80
 8004528:	d1c3      	bne.n	80044b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004540:	e034      	b.n	80045ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f89b 	bl	800467e <I2C_IsAcknowledgeFailed>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e034      	b.n	80045bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d028      	beq.n	80045ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455a:	f7fe fd6d 	bl	8003038 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d11d      	bne.n	80045ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b04      	cmp	r3, #4
 800457c:	d016      	beq.n	80045ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004598:	f043 0220 	orr.w	r2, r3, #32
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e007      	b.n	80045bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f003 0304 	and.w	r3, r3, #4
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d1c3      	bne.n	8004542 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045d0:	e049      	b.n	8004666 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b10      	cmp	r3, #16
 80045de:	d119      	bne.n	8004614 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0210 	mvn.w	r2, #16
 80045e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e030      	b.n	8004676 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004614:	f7fe fd10 	bl	8003038 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	429a      	cmp	r2, r3
 8004622:	d302      	bcc.n	800462a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d11d      	bne.n	8004666 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004634:	2b40      	cmp	r3, #64	@ 0x40
 8004636:	d016      	beq.n	8004666 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	f043 0220 	orr.w	r2, r3, #32
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e007      	b.n	8004676 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004670:	2b40      	cmp	r3, #64	@ 0x40
 8004672:	d1ae      	bne.n	80045d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004690:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004694:	d11b      	bne.n	80046ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800469e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ba:	f043 0204 	orr.w	r2, r3, #4
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e267      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d075      	beq.n	80047e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046fa:	4b88      	ldr	r3, [pc, #544]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	2b04      	cmp	r3, #4
 8004704:	d00c      	beq.n	8004720 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004706:	4b85      	ldr	r3, [pc, #532]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800470e:	2b08      	cmp	r3, #8
 8004710:	d112      	bne.n	8004738 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004712:	4b82      	ldr	r3, [pc, #520]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800471a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800471e:	d10b      	bne.n	8004738 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004720:	4b7e      	ldr	r3, [pc, #504]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d05b      	beq.n	80047e4 <HAL_RCC_OscConfig+0x108>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d157      	bne.n	80047e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e242      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004740:	d106      	bne.n	8004750 <HAL_RCC_OscConfig+0x74>
 8004742:	4b76      	ldr	r3, [pc, #472]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a75      	ldr	r2, [pc, #468]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e01d      	b.n	800478c <HAL_RCC_OscConfig+0xb0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0x98>
 800475a:	4b70      	ldr	r3, [pc, #448]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a6f      	ldr	r2, [pc, #444]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b6d      	ldr	r3, [pc, #436]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a6c      	ldr	r2, [pc, #432]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e00b      	b.n	800478c <HAL_RCC_OscConfig+0xb0>
 8004774:	4b69      	ldr	r3, [pc, #420]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a68      	ldr	r2, [pc, #416]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 800477a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b66      	ldr	r3, [pc, #408]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a65      	ldr	r2, [pc, #404]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800478a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d013      	beq.n	80047bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fe fc50 	bl	8003038 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800479c:	f7fe fc4c 	bl	8003038 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	@ 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e207      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	4b5b      	ldr	r3, [pc, #364]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0xc0>
 80047ba:	e014      	b.n	80047e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047bc:	f7fe fc3c 	bl	8003038 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fe fc38 	bl	8003038 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	@ 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e1f3      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d6:	4b51      	ldr	r3, [pc, #324]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0xe8>
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d063      	beq.n	80048ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047f2:	4b4a      	ldr	r3, [pc, #296]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047fe:	4b47      	ldr	r3, [pc, #284]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004806:	2b08      	cmp	r3, #8
 8004808:	d11c      	bne.n	8004844 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800480a:	4b44      	ldr	r3, [pc, #272]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d116      	bne.n	8004844 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004816:	4b41      	ldr	r3, [pc, #260]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_RCC_OscConfig+0x152>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d001      	beq.n	800482e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e1c7      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482e:	4b3b      	ldr	r3, [pc, #236]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4937      	ldr	r1, [pc, #220]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004842:	e03a      	b.n	80048ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d020      	beq.n	800488e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800484c:	4b34      	ldr	r3, [pc, #208]	@ (8004920 <HAL_RCC_OscConfig+0x244>)
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004852:	f7fe fbf1 	bl	8003038 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800485a:	f7fe fbed 	bl	8003038 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e1a8      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486c:	4b2b      	ldr	r3, [pc, #172]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004878:	4b28      	ldr	r3, [pc, #160]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4925      	ldr	r1, [pc, #148]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004888:	4313      	orrs	r3, r2
 800488a:	600b      	str	r3, [r1, #0]
 800488c:	e015      	b.n	80048ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800488e:	4b24      	ldr	r3, [pc, #144]	@ (8004920 <HAL_RCC_OscConfig+0x244>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fe fbd0 	bl	8003038 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800489c:	f7fe fbcc 	bl	8003038 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e187      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ae:	4b1b      	ldr	r3, [pc, #108]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d036      	beq.n	8004934 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d016      	beq.n	80048fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ce:	4b15      	ldr	r3, [pc, #84]	@ (8004924 <HAL_RCC_OscConfig+0x248>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d4:	f7fe fbb0 	bl	8003038 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048dc:	f7fe fbac 	bl	8003038 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e167      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ee:	4b0b      	ldr	r3, [pc, #44]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 80048f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0x200>
 80048fa:	e01b      	b.n	8004934 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048fc:	4b09      	ldr	r3, [pc, #36]	@ (8004924 <HAL_RCC_OscConfig+0x248>)
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004902:	f7fe fb99 	bl	8003038 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004908:	e00e      	b.n	8004928 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800490a:	f7fe fb95 	bl	8003038 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d907      	bls.n	8004928 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e150      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
 800491c:	40023800 	.word	0x40023800
 8004920:	42470000 	.word	0x42470000
 8004924:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004928:	4b88      	ldr	r3, [pc, #544]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 800492a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1ea      	bne.n	800490a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8097 	beq.w	8004a70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004942:	2300      	movs	r3, #0
 8004944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004946:	4b81      	ldr	r3, [pc, #516]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10f      	bne.n	8004972 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004952:	2300      	movs	r3, #0
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	4b7d      	ldr	r3, [pc, #500]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 800495c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004960:	6413      	str	r3, [r2, #64]	@ 0x40
 8004962:	4b7a      	ldr	r3, [pc, #488]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800496a:	60bb      	str	r3, [r7, #8]
 800496c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800496e:	2301      	movs	r3, #1
 8004970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004972:	4b77      	ldr	r3, [pc, #476]	@ (8004b50 <HAL_RCC_OscConfig+0x474>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d118      	bne.n	80049b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800497e:	4b74      	ldr	r3, [pc, #464]	@ (8004b50 <HAL_RCC_OscConfig+0x474>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a73      	ldr	r2, [pc, #460]	@ (8004b50 <HAL_RCC_OscConfig+0x474>)
 8004984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800498a:	f7fe fb55 	bl	8003038 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004992:	f7fe fb51 	bl	8003038 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e10c      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004b50 <HAL_RCC_OscConfig+0x474>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0f0      	beq.n	8004992 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d106      	bne.n	80049c6 <HAL_RCC_OscConfig+0x2ea>
 80049b8:	4b64      	ldr	r3, [pc, #400]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049bc:	4a63      	ldr	r2, [pc, #396]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049c4:	e01c      	b.n	8004a00 <HAL_RCC_OscConfig+0x324>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b05      	cmp	r3, #5
 80049cc:	d10c      	bne.n	80049e8 <HAL_RCC_OscConfig+0x30c>
 80049ce:	4b5f      	ldr	r3, [pc, #380]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d2:	4a5e      	ldr	r2, [pc, #376]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049d4:	f043 0304 	orr.w	r3, r3, #4
 80049d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049da:	4b5c      	ldr	r3, [pc, #368]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049de:	4a5b      	ldr	r2, [pc, #364]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049e0:	f043 0301 	orr.w	r3, r3, #1
 80049e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049e6:	e00b      	b.n	8004a00 <HAL_RCC_OscConfig+0x324>
 80049e8:	4b58      	ldr	r3, [pc, #352]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ec:	4a57      	ldr	r2, [pc, #348]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049f4:	4b55      	ldr	r3, [pc, #340]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f8:	4a54      	ldr	r2, [pc, #336]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 80049fa:	f023 0304 	bic.w	r3, r3, #4
 80049fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d015      	beq.n	8004a34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a08:	f7fe fb16 	bl	8003038 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0e:	e00a      	b.n	8004a26 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a10:	f7fe fb12 	bl	8003038 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e0cb      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a26:	4b49      	ldr	r3, [pc, #292]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0ee      	beq.n	8004a10 <HAL_RCC_OscConfig+0x334>
 8004a32:	e014      	b.n	8004a5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a34:	f7fe fb00 	bl	8003038 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a3a:	e00a      	b.n	8004a52 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3c:	f7fe fafc 	bl	8003038 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e0b5      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a52:	4b3e      	ldr	r3, [pc, #248]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1ee      	bne.n	8004a3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a5e:	7dfb      	ldrb	r3, [r7, #23]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d105      	bne.n	8004a70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a64:	4b39      	ldr	r3, [pc, #228]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a68:	4a38      	ldr	r2, [pc, #224]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004a6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 80a1 	beq.w	8004bbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a7a:	4b34      	ldr	r3, [pc, #208]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d05c      	beq.n	8004b40 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d141      	bne.n	8004b12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a8e:	4b31      	ldr	r3, [pc, #196]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a94:	f7fe fad0 	bl	8003038 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a9c:	f7fe facc 	bl	8003038 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e087      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aae:	4b27      	ldr	r3, [pc, #156]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f0      	bne.n	8004a9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69da      	ldr	r2, [r3, #28]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	019b      	lsls	r3, r3, #6
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad0:	085b      	lsrs	r3, r3, #1
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	041b      	lsls	r3, r3, #16
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004adc:	061b      	lsls	r3, r3, #24
 8004ade:	491b      	ldr	r1, [pc, #108]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aea:	f7fe faa5 	bl	8003038 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af2:	f7fe faa1 	bl	8003038 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e05c      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b04:	4b11      	ldr	r3, [pc, #68]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x416>
 8004b10:	e054      	b.n	8004bbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b12:	4b10      	ldr	r3, [pc, #64]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b18:	f7fe fa8e 	bl	8003038 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b20:	f7fe fa8a 	bl	8003038 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e045      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b32:	4b06      	ldr	r3, [pc, #24]	@ (8004b4c <HAL_RCC_OscConfig+0x470>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0x444>
 8004b3e:	e03d      	b.n	8004bbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d107      	bne.n	8004b58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e038      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	40007000 	.word	0x40007000
 8004b54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b58:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc8 <HAL_RCC_OscConfig+0x4ec>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d028      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d121      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d11a      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b88:	4013      	ands	r3, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d111      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9e:	085b      	lsrs	r3, r3, #1
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d107      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d001      	beq.n	8004bbc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e000      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40023800 	.word	0x40023800

08004bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0cc      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004be0:	4b68      	ldr	r3, [pc, #416]	@ (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d90c      	bls.n	8004c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bee:	4b65      	ldr	r3, [pc, #404]	@ (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf6:	4b63      	ldr	r3, [pc, #396]	@ (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d001      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0b8      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d020      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c20:	4b59      	ldr	r3, [pc, #356]	@ (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4a58      	ldr	r2, [pc, #352]	@ (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c38:	4b53      	ldr	r3, [pc, #332]	@ (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	4a52      	ldr	r2, [pc, #328]	@ (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c44:	4b50      	ldr	r3, [pc, #320]	@ (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	494d      	ldr	r1, [pc, #308]	@ (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d044      	beq.n	8004cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d107      	bne.n	8004c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6a:	4b47      	ldr	r3, [pc, #284]	@ (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d119      	bne.n	8004caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e07f      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d003      	beq.n	8004c8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d107      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8a:	4b3f      	ldr	r3, [pc, #252]	@ (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e06f      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e067      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004caa:	4b37      	ldr	r3, [pc, #220]	@ (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f023 0203 	bic.w	r2, r3, #3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4934      	ldr	r1, [pc, #208]	@ (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cbc:	f7fe f9bc 	bl	8003038 <HAL_GetTick>
 8004cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc2:	e00a      	b.n	8004cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc4:	f7fe f9b8 	bl	8003038 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e04f      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cda:	4b2b      	ldr	r3, [pc, #172]	@ (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 020c 	and.w	r2, r3, #12
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d1eb      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cec:	4b25      	ldr	r3, [pc, #148]	@ (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d20c      	bcs.n	8004d14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfa:	4b22      	ldr	r3, [pc, #136]	@ (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d02:	4b20      	ldr	r3, [pc, #128]	@ (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d001      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e032      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d20:	4b19      	ldr	r3, [pc, #100]	@ (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	4916      	ldr	r1, [pc, #88]	@ (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d009      	beq.n	8004d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d3e:	4b12      	ldr	r3, [pc, #72]	@ (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	490e      	ldr	r1, [pc, #56]	@ (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d52:	f000 f821 	bl	8004d98 <HAL_RCC_GetSysClockFreq>
 8004d56:	4602      	mov	r2, r0
 8004d58:	4b0b      	ldr	r3, [pc, #44]	@ (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	490a      	ldr	r1, [pc, #40]	@ (8004d8c <HAL_RCC_ClockConfig+0x1c0>)
 8004d64:	5ccb      	ldrb	r3, [r1, r3]
 8004d66:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6a:	4a09      	ldr	r2, [pc, #36]	@ (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d6e:	4b09      	ldr	r3, [pc, #36]	@ (8004d94 <HAL_RCC_ClockConfig+0x1c8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fe f91c 	bl	8002fb0 <HAL_InitTick>

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40023c00 	.word	0x40023c00
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	0800c70c 	.word	0x0800c70c
 8004d90:	20000150 	.word	0x20000150
 8004d94:	20000154 	.word	0x20000154

08004d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d9c:	b090      	sub	sp, #64	@ 0x40
 8004d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004db0:	4b59      	ldr	r3, [pc, #356]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 030c 	and.w	r3, r3, #12
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d00d      	beq.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x40>
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	f200 80a1 	bhi.w	8004f04 <HAL_RCC_GetSysClockFreq+0x16c>
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <HAL_RCC_GetSysClockFreq+0x34>
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d003      	beq.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dca:	e09b      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dcc:	4b53      	ldr	r3, [pc, #332]	@ (8004f1c <HAL_RCC_GetSysClockFreq+0x184>)
 8004dce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004dd0:	e09b      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dd2:	4b53      	ldr	r3, [pc, #332]	@ (8004f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8004dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004dd6:	e098      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dd8:	4b4f      	ldr	r3, [pc, #316]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004de0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004de2:	4b4d      	ldr	r3, [pc, #308]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d028      	beq.n	8004e40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dee:	4b4a      	ldr	r3, [pc, #296]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	099b      	lsrs	r3, r3, #6
 8004df4:	2200      	movs	r2, #0
 8004df6:	623b      	str	r3, [r7, #32]
 8004df8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e00:	2100      	movs	r1, #0
 8004e02:	4b47      	ldr	r3, [pc, #284]	@ (8004f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e04:	fb03 f201 	mul.w	r2, r3, r1
 8004e08:	2300      	movs	r3, #0
 8004e0a:	fb00 f303 	mul.w	r3, r0, r3
 8004e0e:	4413      	add	r3, r2
 8004e10:	4a43      	ldr	r2, [pc, #268]	@ (8004f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e12:	fba0 1202 	umull	r1, r2, r0, r2
 8004e16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e18:	460a      	mov	r2, r1
 8004e1a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004e1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e1e:	4413      	add	r3, r2
 8004e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e24:	2200      	movs	r2, #0
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	61fa      	str	r2, [r7, #28]
 8004e2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004e32:	f7fb ff11 	bl	8000c58 <__aeabi_uldivmod>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e3e:	e053      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e40:	4b35      	ldr	r3, [pc, #212]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	099b      	lsrs	r3, r3, #6
 8004e46:	2200      	movs	r2, #0
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	617a      	str	r2, [r7, #20]
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e52:	f04f 0b00 	mov.w	fp, #0
 8004e56:	4652      	mov	r2, sl
 8004e58:	465b      	mov	r3, fp
 8004e5a:	f04f 0000 	mov.w	r0, #0
 8004e5e:	f04f 0100 	mov.w	r1, #0
 8004e62:	0159      	lsls	r1, r3, #5
 8004e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e68:	0150      	lsls	r0, r2, #5
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	ebb2 080a 	subs.w	r8, r2, sl
 8004e72:	eb63 090b 	sbc.w	r9, r3, fp
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e8a:	ebb2 0408 	subs.w	r4, r2, r8
 8004e8e:	eb63 0509 	sbc.w	r5, r3, r9
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	00eb      	lsls	r3, r5, #3
 8004e9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ea0:	00e2      	lsls	r2, r4, #3
 8004ea2:	4614      	mov	r4, r2
 8004ea4:	461d      	mov	r5, r3
 8004ea6:	eb14 030a 	adds.w	r3, r4, sl
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	eb45 030b 	adc.w	r3, r5, fp
 8004eb0:	607b      	str	r3, [r7, #4]
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	028b      	lsls	r3, r1, #10
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ec8:	4621      	mov	r1, r4
 8004eca:	028a      	lsls	r2, r1, #10
 8004ecc:	4610      	mov	r0, r2
 8004ece:	4619      	mov	r1, r3
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	60fa      	str	r2, [r7, #12]
 8004ed8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004edc:	f7fb febc 	bl	8000c58 <__aeabi_uldivmod>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	0c1b      	lsrs	r3, r3, #16
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004ef8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f00:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f02:	e002      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f04:	4b05      	ldr	r3, [pc, #20]	@ (8004f1c <HAL_RCC_GetSysClockFreq+0x184>)
 8004f06:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3740      	adds	r7, #64	@ 0x40
 8004f10:	46bd      	mov	sp, r7
 8004f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f16:	bf00      	nop
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	00f42400 	.word	0x00f42400
 8004f20:	017d7840 	.word	0x017d7840

08004f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f28:	4b03      	ldr	r3, [pc, #12]	@ (8004f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	20000150 	.word	0x20000150

08004f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f40:	f7ff fff0 	bl	8004f24 <HAL_RCC_GetHCLKFreq>
 8004f44:	4602      	mov	r2, r0
 8004f46:	4b05      	ldr	r3, [pc, #20]	@ (8004f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	0a9b      	lsrs	r3, r3, #10
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	4903      	ldr	r1, [pc, #12]	@ (8004f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f52:	5ccb      	ldrb	r3, [r1, r3]
 8004f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	0800c71c 	.word	0x0800c71c

08004f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f68:	f7ff ffdc 	bl	8004f24 <HAL_RCC_GetHCLKFreq>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	4b05      	ldr	r3, [pc, #20]	@ (8004f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	0b5b      	lsrs	r3, r3, #13
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	4903      	ldr	r1, [pc, #12]	@ (8004f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f7a:	5ccb      	ldrb	r3, [r1, r3]
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40023800 	.word	0x40023800
 8004f88:	0800c71c 	.word	0x0800c71c

08004f8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e042      	b.n	8005024 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fd fe56 	bl	8002c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2224      	movs	r2, #36	@ 0x24
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fdbd 	bl	8005b50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ff4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005004:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08a      	sub	sp, #40	@ 0x28
 8005030:	af02      	add	r7, sp, #8
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	4613      	mov	r3, r2
 800503a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b20      	cmp	r3, #32
 800504a:	d175      	bne.n	8005138 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d002      	beq.n	8005058 <HAL_UART_Transmit+0x2c>
 8005052:	88fb      	ldrh	r3, [r7, #6]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e06e      	b.n	800513a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2221      	movs	r2, #33	@ 0x21
 8005066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800506a:	f7fd ffe5 	bl	8003038 <HAL_GetTick>
 800506e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	88fa      	ldrh	r2, [r7, #6]
 8005074:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	88fa      	ldrh	r2, [r7, #6]
 800507a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005084:	d108      	bne.n	8005098 <HAL_UART_Transmit+0x6c>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d104      	bne.n	8005098 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	e003      	b.n	80050a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800509c:	2300      	movs	r3, #0
 800509e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050a0:	e02e      	b.n	8005100 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2200      	movs	r2, #0
 80050aa:	2180      	movs	r1, #128	@ 0x80
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 fb1f 	bl	80056f0 <UART_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e03a      	b.n	800513a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10b      	bne.n	80050e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	3302      	adds	r3, #2
 80050de:	61bb      	str	r3, [r7, #24]
 80050e0:	e007      	b.n	80050f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	781a      	ldrb	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	3301      	adds	r3, #1
 80050f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1cb      	bne.n	80050a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2200      	movs	r2, #0
 8005112:	2140      	movs	r1, #64	@ 0x40
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 faeb 	bl	80056f0 <UART_WaitOnFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e006      	b.n	800513a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2220      	movs	r2, #32
 8005130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	e000      	b.n	800513a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005138:	2302      	movs	r3, #2
  }
}
 800513a:	4618      	mov	r0, r3
 800513c:	3720      	adds	r7, #32
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	4613      	mov	r3, r2
 800514e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b20      	cmp	r3, #32
 800515a:	d112      	bne.n	8005182 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <HAL_UART_Receive_IT+0x26>
 8005162:	88fb      	ldrh	r3, [r7, #6]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e00b      	b.n	8005184 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	461a      	mov	r2, r3
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 fb12 	bl	80057a2 <UART_Start_Receive_IT>
 800517e:	4603      	mov	r3, r0
 8005180:	e000      	b.n	8005184 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005182:	2302      	movs	r3, #2
  }
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b0ba      	sub	sp, #232	@ 0xe8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80051ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10f      	bne.n	80051f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <HAL_UART_IRQHandler+0x66>
 80051de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fbf2 	bl	80059d4 <UART_Receive_IT>
      return;
 80051f0:	e25b      	b.n	80056aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 80de 	beq.w	80053b8 <HAL_UART_IRQHandler+0x22c>
 80051fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d106      	bne.n	8005216 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800520c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 80d1 	beq.w	80053b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00b      	beq.n	800523a <HAL_UART_IRQHandler+0xae>
 8005222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005232:	f043 0201 	orr.w	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800523a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00b      	beq.n	800525e <HAL_UART_IRQHandler+0xd2>
 8005246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005256:	f043 0202 	orr.w	r2, r3, #2
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800525e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00b      	beq.n	8005282 <HAL_UART_IRQHandler+0xf6>
 800526a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527a:	f043 0204 	orr.w	r2, r3, #4
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005286:	f003 0308 	and.w	r3, r3, #8
 800528a:	2b00      	cmp	r3, #0
 800528c:	d011      	beq.n	80052b2 <HAL_UART_IRQHandler+0x126>
 800528e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	d105      	bne.n	80052a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800529a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d005      	beq.n	80052b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052aa:	f043 0208 	orr.w	r2, r3, #8
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 81f2 	beq.w	80056a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <HAL_UART_IRQHandler+0x14e>
 80052c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fb7d 	bl	80059d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e4:	2b40      	cmp	r3, #64	@ 0x40
 80052e6:	bf0c      	ite	eq
 80052e8:	2301      	moveq	r3, #1
 80052ea:	2300      	movne	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d103      	bne.n	8005306 <HAL_UART_IRQHandler+0x17a>
 80052fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005302:	2b00      	cmp	r3, #0
 8005304:	d04f      	beq.n	80053a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fa85 	bl	8005816 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005316:	2b40      	cmp	r3, #64	@ 0x40
 8005318:	d141      	bne.n	800539e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3314      	adds	r3, #20
 8005320:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005324:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005330:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005334:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005338:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3314      	adds	r3, #20
 8005342:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005346:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800534a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005352:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800535e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1d9      	bne.n	800531a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d013      	beq.n	8005396 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005372:	4a7e      	ldr	r2, [pc, #504]	@ (800556c <HAL_UART_IRQHandler+0x3e0>)
 8005374:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800537a:	4618      	mov	r0, r3
 800537c:	f7fe f80d 	bl	800339a <HAL_DMA_Abort_IT>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d016      	beq.n	80053b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005390:	4610      	mov	r0, r2
 8005392:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005394:	e00e      	b.n	80053b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f994 	bl	80056c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800539c:	e00a      	b.n	80053b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f990 	bl	80056c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a4:	e006      	b.n	80053b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f98c 	bl	80056c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80053b2:	e175      	b.n	80056a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b4:	bf00      	nop
    return;
 80053b6:	e173      	b.n	80056a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053bc:	2b01      	cmp	r3, #1
 80053be:	f040 814f 	bne.w	8005660 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c6:	f003 0310 	and.w	r3, r3, #16
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 8148 	beq.w	8005660 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 8141 	beq.w	8005660 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053de:	2300      	movs	r3, #0
 80053e0:	60bb      	str	r3, [r7, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	60bb      	str	r3, [r7, #8]
 80053f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053fe:	2b40      	cmp	r3, #64	@ 0x40
 8005400:	f040 80b6 	bne.w	8005570 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005410:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 8145 	beq.w	80056a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800541e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005422:	429a      	cmp	r2, r3
 8005424:	f080 813e 	bcs.w	80056a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800542e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800543a:	f000 8088 	beq.w	800554e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	330c      	adds	r3, #12
 8005444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005454:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005458:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800545c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	330c      	adds	r3, #12
 8005466:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800546a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800546e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005472:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005476:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1d9      	bne.n	800543e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3314      	adds	r3, #20
 8005490:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800549a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3314      	adds	r3, #20
 80054aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80054ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80054b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80054b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80054c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e1      	bne.n	800548a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3314      	adds	r3, #20
 80054cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054d0:	e853 3f00 	ldrex	r3, [r3]
 80054d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80054d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3314      	adds	r3, #20
 80054e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80054ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80054f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80054f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e3      	bne.n	80054c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	330c      	adds	r3, #12
 8005512:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800551c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800551e:	f023 0310 	bic.w	r3, r3, #16
 8005522:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	330c      	adds	r3, #12
 800552c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005530:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005532:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005534:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005536:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005538:	e841 2300 	strex	r3, r2, [r1]
 800553c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800553e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1e3      	bne.n	800550c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005548:	4618      	mov	r0, r3
 800554a:	f7fd feb6 	bl	80032ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2202      	movs	r2, #2
 8005552:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800555c:	b29b      	uxth	r3, r3
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	b29b      	uxth	r3, r3
 8005562:	4619      	mov	r1, r3
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f8b7 	bl	80056d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800556a:	e09b      	b.n	80056a4 <HAL_UART_IRQHandler+0x518>
 800556c:	080058dd 	.word	0x080058dd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005578:	b29b      	uxth	r3, r3
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005584:	b29b      	uxth	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 808e 	beq.w	80056a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800558c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 8089 	beq.w	80056a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	330c      	adds	r3, #12
 800559c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	330c      	adds	r3, #12
 80055b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80055ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80055bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e3      	bne.n	8005596 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3314      	adds	r3, #20
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	623b      	str	r3, [r7, #32]
   return(result);
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	f023 0301 	bic.w	r3, r3, #1
 80055e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3314      	adds	r3, #20
 80055ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80055f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80055f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e3      	bne.n	80055ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	330c      	adds	r3, #12
 800561a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	60fb      	str	r3, [r7, #12]
   return(result);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0310 	bic.w	r3, r3, #16
 800562a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	330c      	adds	r3, #12
 8005634:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005638:	61fa      	str	r2, [r7, #28]
 800563a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	69b9      	ldr	r1, [r7, #24]
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	617b      	str	r3, [r7, #20]
   return(result);
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e3      	bne.n	8005614 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005652:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f83d 	bl	80056d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800565e:	e023      	b.n	80056a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005668:	2b00      	cmp	r3, #0
 800566a:	d009      	beq.n	8005680 <HAL_UART_IRQHandler+0x4f4>
 800566c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f943 	bl	8005904 <UART_Transmit_IT>
    return;
 800567e:	e014      	b.n	80056aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00e      	beq.n	80056aa <HAL_UART_IRQHandler+0x51e>
 800568c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f983 	bl	80059a4 <UART_EndTransmit_IT>
    return;
 800569e:	e004      	b.n	80056aa <HAL_UART_IRQHandler+0x51e>
    return;
 80056a0:	bf00      	nop
 80056a2:	e002      	b.n	80056aa <HAL_UART_IRQHandler+0x51e>
      return;
 80056a4:	bf00      	nop
 80056a6:	e000      	b.n	80056aa <HAL_UART_IRQHandler+0x51e>
      return;
 80056a8:	bf00      	nop
  }
}
 80056aa:	37e8      	adds	r7, #232	@ 0xe8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	4613      	mov	r3, r2
 80056fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005700:	e03b      	b.n	800577a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005708:	d037      	beq.n	800577a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800570a:	f7fd fc95 	bl	8003038 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	6a3a      	ldr	r2, [r7, #32]
 8005716:	429a      	cmp	r2, r3
 8005718:	d302      	bcc.n	8005720 <UART_WaitOnFlagUntilTimeout+0x30>
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e03a      	b.n	800579a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	2b00      	cmp	r3, #0
 8005730:	d023      	beq.n	800577a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b80      	cmp	r3, #128	@ 0x80
 8005736:	d020      	beq.n	800577a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b40      	cmp	r3, #64	@ 0x40
 800573c:	d01d      	beq.n	800577a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b08      	cmp	r3, #8
 800574a:	d116      	bne.n	800577a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 f857 	bl	8005816 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2208      	movs	r2, #8
 800576c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e00f      	b.n	800579a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4013      	ands	r3, r2
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	429a      	cmp	r2, r3
 8005788:	bf0c      	ite	eq
 800578a:	2301      	moveq	r3, #1
 800578c:	2300      	movne	r3, #0
 800578e:	b2db      	uxtb	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	429a      	cmp	r2, r3
 8005796:	d0b4      	beq.n	8005702 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b085      	sub	sp, #20
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	4613      	mov	r3, r2
 80057ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	88fa      	ldrh	r2, [r7, #6]
 80057ba:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	88fa      	ldrh	r2, [r7, #6]
 80057c0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2222      	movs	r2, #34	@ 0x22
 80057cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d007      	beq.n	80057e8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057e6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695a      	ldr	r2, [r3, #20]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0220 	orr.w	r2, r2, #32
 8005806:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005816:	b480      	push	{r7}
 8005818:	b095      	sub	sp, #84	@ 0x54
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	330c      	adds	r3, #12
 8005824:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005828:	e853 3f00 	ldrex	r3, [r3]
 800582c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800582e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005830:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005834:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	330c      	adds	r3, #12
 800583c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800583e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005840:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005842:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005844:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005846:	e841 2300 	strex	r3, r2, [r1]
 800584a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800584c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1e5      	bne.n	800581e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3314      	adds	r3, #20
 8005858:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	e853 3f00 	ldrex	r3, [r3]
 8005860:	61fb      	str	r3, [r7, #28]
   return(result);
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	f023 0301 	bic.w	r3, r3, #1
 8005868:	64bb      	str	r3, [r7, #72]	@ 0x48
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3314      	adds	r3, #20
 8005870:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005872:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005874:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1e5      	bne.n	8005852 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588a:	2b01      	cmp	r3, #1
 800588c:	d119      	bne.n	80058c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	330c      	adds	r3, #12
 8005894:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	60bb      	str	r3, [r7, #8]
   return(result);
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f023 0310 	bic.w	r3, r3, #16
 80058a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	330c      	adds	r3, #12
 80058ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058ae:	61ba      	str	r2, [r7, #24]
 80058b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b2:	6979      	ldr	r1, [r7, #20]
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	e841 2300 	strex	r3, r2, [r1]
 80058ba:	613b      	str	r3, [r7, #16]
   return(result);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1e5      	bne.n	800588e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058d0:	bf00      	nop
 80058d2:	3754      	adds	r7, #84	@ 0x54
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f7ff fee4 	bl	80056c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058fc:	bf00      	nop
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b21      	cmp	r3, #33	@ 0x21
 8005916:	d13e      	bne.n	8005996 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005920:	d114      	bne.n	800594c <UART_Transmit_IT+0x48>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d110      	bne.n	800594c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800593e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	1c9a      	adds	r2, r3, #2
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	621a      	str	r2, [r3, #32]
 800594a:	e008      	b.n	800595e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	1c59      	adds	r1, r3, #1
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6211      	str	r1, [r2, #32]
 8005956:	781a      	ldrb	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29b      	uxth	r3, r3
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	4619      	mov	r1, r3
 800596c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10f      	bne.n	8005992 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005980:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005990:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	e000      	b.n	8005998 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005996:	2302      	movs	r3, #2
  }
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff fe73 	bl	80056b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08c      	sub	sp, #48	@ 0x30
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b22      	cmp	r3, #34	@ 0x22
 80059e6:	f040 80ae 	bne.w	8005b46 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059f2:	d117      	bne.n	8005a24 <UART_Receive_IT+0x50>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d113      	bne.n	8005a24 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059fc:	2300      	movs	r3, #0
 80059fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a04:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1c:	1c9a      	adds	r2, r3, #2
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a22:	e026      	b.n	8005a72 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a36:	d007      	beq.n	8005a48 <UART_Receive_IT+0x74>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10a      	bne.n	8005a56 <UART_Receive_IT+0x82>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a52:	701a      	strb	r2, [r3, #0]
 8005a54:	e008      	b.n	8005a68 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	4619      	mov	r1, r3
 8005a80:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d15d      	bne.n	8005b42 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0220 	bic.w	r2, r2, #32
 8005a94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005aa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695a      	ldr	r2, [r3, #20]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 0201 	bic.w	r2, r2, #1
 8005ab4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d135      	bne.n	8005b38 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	330c      	adds	r3, #12
 8005ad8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f023 0310 	bic.w	r3, r3, #16
 8005ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	330c      	adds	r3, #12
 8005af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af2:	623a      	str	r2, [r7, #32]
 8005af4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	69f9      	ldr	r1, [r7, #28]
 8005af8:	6a3a      	ldr	r2, [r7, #32]
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1e5      	bne.n	8005ad2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	2b10      	cmp	r3, #16
 8005b12:	d10a      	bne.n	8005b2a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b14:	2300      	movs	r3, #0
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b2e:	4619      	mov	r1, r3
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff fdd1 	bl	80056d8 <HAL_UARTEx_RxEventCallback>
 8005b36:	e002      	b.n	8005b3e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7fb fe09 	bl	8001750 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e002      	b.n	8005b48 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	e000      	b.n	8005b48 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b46:	2302      	movs	r3, #2
  }
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3730      	adds	r7, #48	@ 0x30
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b54:	b0c0      	sub	sp, #256	@ 0x100
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6c:	68d9      	ldr	r1, [r3, #12]
 8005b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	ea40 0301 	orr.w	r3, r0, r1
 8005b78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ba8:	f021 010c 	bic.w	r1, r1, #12
 8005bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005bb6:	430b      	orrs	r3, r1
 8005bb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bca:	6999      	ldr	r1, [r3, #24]
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	ea40 0301 	orr.w	r3, r0, r1
 8005bd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b8f      	ldr	r3, [pc, #572]	@ (8005e1c <UART_SetConfig+0x2cc>)
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d005      	beq.n	8005bf0 <UART_SetConfig+0xa0>
 8005be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4b8d      	ldr	r3, [pc, #564]	@ (8005e20 <UART_SetConfig+0x2d0>)
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d104      	bne.n	8005bfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bf0:	f7ff f9b8 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 8005bf4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005bf8:	e003      	b.n	8005c02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bfa:	f7ff f99f 	bl	8004f3c <HAL_RCC_GetPCLK1Freq>
 8005bfe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c0c:	f040 810c 	bne.w	8005e28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c14:	2200      	movs	r2, #0
 8005c16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c1a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c22:	4622      	mov	r2, r4
 8005c24:	462b      	mov	r3, r5
 8005c26:	1891      	adds	r1, r2, r2
 8005c28:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c2a:	415b      	adcs	r3, r3
 8005c2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c32:	4621      	mov	r1, r4
 8005c34:	eb12 0801 	adds.w	r8, r2, r1
 8005c38:	4629      	mov	r1, r5
 8005c3a:	eb43 0901 	adc.w	r9, r3, r1
 8005c3e:	f04f 0200 	mov.w	r2, #0
 8005c42:	f04f 0300 	mov.w	r3, #0
 8005c46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c52:	4690      	mov	r8, r2
 8005c54:	4699      	mov	r9, r3
 8005c56:	4623      	mov	r3, r4
 8005c58:	eb18 0303 	adds.w	r3, r8, r3
 8005c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c60:	462b      	mov	r3, r5
 8005c62:	eb49 0303 	adc.w	r3, r9, r3
 8005c66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c76:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c7e:	460b      	mov	r3, r1
 8005c80:	18db      	adds	r3, r3, r3
 8005c82:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c84:	4613      	mov	r3, r2
 8005c86:	eb42 0303 	adc.w	r3, r2, r3
 8005c8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c94:	f7fa ffe0 	bl	8000c58 <__aeabi_uldivmod>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4b61      	ldr	r3, [pc, #388]	@ (8005e24 <UART_SetConfig+0x2d4>)
 8005c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005ca2:	095b      	lsrs	r3, r3, #5
 8005ca4:	011c      	lsls	r4, r3, #4
 8005ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cb0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005cb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005cb8:	4642      	mov	r2, r8
 8005cba:	464b      	mov	r3, r9
 8005cbc:	1891      	adds	r1, r2, r2
 8005cbe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005cc0:	415b      	adcs	r3, r3
 8005cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005cc8:	4641      	mov	r1, r8
 8005cca:	eb12 0a01 	adds.w	sl, r2, r1
 8005cce:	4649      	mov	r1, r9
 8005cd0:	eb43 0b01 	adc.w	fp, r3, r1
 8005cd4:	f04f 0200 	mov.w	r2, #0
 8005cd8:	f04f 0300 	mov.w	r3, #0
 8005cdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ce0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ce4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ce8:	4692      	mov	sl, r2
 8005cea:	469b      	mov	fp, r3
 8005cec:	4643      	mov	r3, r8
 8005cee:	eb1a 0303 	adds.w	r3, sl, r3
 8005cf2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cf6:	464b      	mov	r3, r9
 8005cf8:	eb4b 0303 	adc.w	r3, fp, r3
 8005cfc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d0c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d14:	460b      	mov	r3, r1
 8005d16:	18db      	adds	r3, r3, r3
 8005d18:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	eb42 0303 	adc.w	r3, r2, r3
 8005d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d2a:	f7fa ff95 	bl	8000c58 <__aeabi_uldivmod>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4611      	mov	r1, r2
 8005d34:	4b3b      	ldr	r3, [pc, #236]	@ (8005e24 <UART_SetConfig+0x2d4>)
 8005d36:	fba3 2301 	umull	r2, r3, r3, r1
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	2264      	movs	r2, #100	@ 0x64
 8005d3e:	fb02 f303 	mul.w	r3, r2, r3
 8005d42:	1acb      	subs	r3, r1, r3
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d4a:	4b36      	ldr	r3, [pc, #216]	@ (8005e24 <UART_SetConfig+0x2d4>)
 8005d4c:	fba3 2302 	umull	r2, r3, r3, r2
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d58:	441c      	add	r4, r3
 8005d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d64:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d6c:	4642      	mov	r2, r8
 8005d6e:	464b      	mov	r3, r9
 8005d70:	1891      	adds	r1, r2, r2
 8005d72:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d74:	415b      	adcs	r3, r3
 8005d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d7c:	4641      	mov	r1, r8
 8005d7e:	1851      	adds	r1, r2, r1
 8005d80:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d82:	4649      	mov	r1, r9
 8005d84:	414b      	adcs	r3, r1
 8005d86:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d94:	4659      	mov	r1, fp
 8005d96:	00cb      	lsls	r3, r1, #3
 8005d98:	4651      	mov	r1, sl
 8005d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d9e:	4651      	mov	r1, sl
 8005da0:	00ca      	lsls	r2, r1, #3
 8005da2:	4610      	mov	r0, r2
 8005da4:	4619      	mov	r1, r3
 8005da6:	4603      	mov	r3, r0
 8005da8:	4642      	mov	r2, r8
 8005daa:	189b      	adds	r3, r3, r2
 8005dac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005db0:	464b      	mov	r3, r9
 8005db2:	460a      	mov	r2, r1
 8005db4:	eb42 0303 	adc.w	r3, r2, r3
 8005db8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005dc8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005dcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	18db      	adds	r3, r3, r3
 8005dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	eb42 0303 	adc.w	r3, r2, r3
 8005ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005de2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005de6:	f7fa ff37 	bl	8000c58 <__aeabi_uldivmod>
 8005dea:	4602      	mov	r2, r0
 8005dec:	460b      	mov	r3, r1
 8005dee:	4b0d      	ldr	r3, [pc, #52]	@ (8005e24 <UART_SetConfig+0x2d4>)
 8005df0:	fba3 1302 	umull	r1, r3, r3, r2
 8005df4:	095b      	lsrs	r3, r3, #5
 8005df6:	2164      	movs	r1, #100	@ 0x64
 8005df8:	fb01 f303 	mul.w	r3, r1, r3
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	3332      	adds	r3, #50	@ 0x32
 8005e02:	4a08      	ldr	r2, [pc, #32]	@ (8005e24 <UART_SetConfig+0x2d4>)
 8005e04:	fba2 2303 	umull	r2, r3, r2, r3
 8005e08:	095b      	lsrs	r3, r3, #5
 8005e0a:	f003 0207 	and.w	r2, r3, #7
 8005e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4422      	add	r2, r4
 8005e16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e18:	e106      	b.n	8006028 <UART_SetConfig+0x4d8>
 8005e1a:	bf00      	nop
 8005e1c:	40011000 	.word	0x40011000
 8005e20:	40011400 	.word	0x40011400
 8005e24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e32:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e3a:	4642      	mov	r2, r8
 8005e3c:	464b      	mov	r3, r9
 8005e3e:	1891      	adds	r1, r2, r2
 8005e40:	6239      	str	r1, [r7, #32]
 8005e42:	415b      	adcs	r3, r3
 8005e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e4a:	4641      	mov	r1, r8
 8005e4c:	1854      	adds	r4, r2, r1
 8005e4e:	4649      	mov	r1, r9
 8005e50:	eb43 0501 	adc.w	r5, r3, r1
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	00eb      	lsls	r3, r5, #3
 8005e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e62:	00e2      	lsls	r2, r4, #3
 8005e64:	4614      	mov	r4, r2
 8005e66:	461d      	mov	r5, r3
 8005e68:	4643      	mov	r3, r8
 8005e6a:	18e3      	adds	r3, r4, r3
 8005e6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e70:	464b      	mov	r3, r9
 8005e72:	eb45 0303 	adc.w	r3, r5, r3
 8005e76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e8a:	f04f 0200 	mov.w	r2, #0
 8005e8e:	f04f 0300 	mov.w	r3, #0
 8005e92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e96:	4629      	mov	r1, r5
 8005e98:	008b      	lsls	r3, r1, #2
 8005e9a:	4621      	mov	r1, r4
 8005e9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	008a      	lsls	r2, r1, #2
 8005ea4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ea8:	f7fa fed6 	bl	8000c58 <__aeabi_uldivmod>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4b60      	ldr	r3, [pc, #384]	@ (8006034 <UART_SetConfig+0x4e4>)
 8005eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8005eb6:	095b      	lsrs	r3, r3, #5
 8005eb8:	011c      	lsls	r4, r3, #4
 8005eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ec4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ec8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ecc:	4642      	mov	r2, r8
 8005ece:	464b      	mov	r3, r9
 8005ed0:	1891      	adds	r1, r2, r2
 8005ed2:	61b9      	str	r1, [r7, #24]
 8005ed4:	415b      	adcs	r3, r3
 8005ed6:	61fb      	str	r3, [r7, #28]
 8005ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005edc:	4641      	mov	r1, r8
 8005ede:	1851      	adds	r1, r2, r1
 8005ee0:	6139      	str	r1, [r7, #16]
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	414b      	adcs	r3, r1
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	f04f 0300 	mov.w	r3, #0
 8005ef0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ef4:	4659      	mov	r1, fp
 8005ef6:	00cb      	lsls	r3, r1, #3
 8005ef8:	4651      	mov	r1, sl
 8005efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005efe:	4651      	mov	r1, sl
 8005f00:	00ca      	lsls	r2, r1, #3
 8005f02:	4610      	mov	r0, r2
 8005f04:	4619      	mov	r1, r3
 8005f06:	4603      	mov	r3, r0
 8005f08:	4642      	mov	r2, r8
 8005f0a:	189b      	adds	r3, r3, r2
 8005f0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f10:	464b      	mov	r3, r9
 8005f12:	460a      	mov	r2, r1
 8005f14:	eb42 0303 	adc.w	r3, r2, r3
 8005f18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f26:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f28:	f04f 0200 	mov.w	r2, #0
 8005f2c:	f04f 0300 	mov.w	r3, #0
 8005f30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f34:	4649      	mov	r1, r9
 8005f36:	008b      	lsls	r3, r1, #2
 8005f38:	4641      	mov	r1, r8
 8005f3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f3e:	4641      	mov	r1, r8
 8005f40:	008a      	lsls	r2, r1, #2
 8005f42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f46:	f7fa fe87 	bl	8000c58 <__aeabi_uldivmod>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4611      	mov	r1, r2
 8005f50:	4b38      	ldr	r3, [pc, #224]	@ (8006034 <UART_SetConfig+0x4e4>)
 8005f52:	fba3 2301 	umull	r2, r3, r3, r1
 8005f56:	095b      	lsrs	r3, r3, #5
 8005f58:	2264      	movs	r2, #100	@ 0x64
 8005f5a:	fb02 f303 	mul.w	r3, r2, r3
 8005f5e:	1acb      	subs	r3, r1, r3
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	3332      	adds	r3, #50	@ 0x32
 8005f64:	4a33      	ldr	r2, [pc, #204]	@ (8006034 <UART_SetConfig+0x4e4>)
 8005f66:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f70:	441c      	add	r4, r3
 8005f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f76:	2200      	movs	r2, #0
 8005f78:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f80:	4642      	mov	r2, r8
 8005f82:	464b      	mov	r3, r9
 8005f84:	1891      	adds	r1, r2, r2
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	415b      	adcs	r3, r3
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f90:	4641      	mov	r1, r8
 8005f92:	1851      	adds	r1, r2, r1
 8005f94:	6039      	str	r1, [r7, #0]
 8005f96:	4649      	mov	r1, r9
 8005f98:	414b      	adcs	r3, r1
 8005f9a:	607b      	str	r3, [r7, #4]
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fa8:	4659      	mov	r1, fp
 8005faa:	00cb      	lsls	r3, r1, #3
 8005fac:	4651      	mov	r1, sl
 8005fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fb2:	4651      	mov	r1, sl
 8005fb4:	00ca      	lsls	r2, r1, #3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4603      	mov	r3, r0
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	189b      	adds	r3, r3, r2
 8005fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fc2:	464b      	mov	r3, r9
 8005fc4:	460a      	mov	r2, r1
 8005fc6:	eb42 0303 	adc.w	r3, r2, r3
 8005fca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fd6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	f04f 0300 	mov.w	r3, #0
 8005fe0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	008b      	lsls	r3, r1, #2
 8005fe8:	4641      	mov	r1, r8
 8005fea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fee:	4641      	mov	r1, r8
 8005ff0:	008a      	lsls	r2, r1, #2
 8005ff2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ff6:	f7fa fe2f 	bl	8000c58 <__aeabi_uldivmod>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8006034 <UART_SetConfig+0x4e4>)
 8006000:	fba3 1302 	umull	r1, r3, r3, r2
 8006004:	095b      	lsrs	r3, r3, #5
 8006006:	2164      	movs	r1, #100	@ 0x64
 8006008:	fb01 f303 	mul.w	r3, r1, r3
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	3332      	adds	r3, #50	@ 0x32
 8006012:	4a08      	ldr	r2, [pc, #32]	@ (8006034 <UART_SetConfig+0x4e4>)
 8006014:	fba2 2303 	umull	r2, r3, r2, r3
 8006018:	095b      	lsrs	r3, r3, #5
 800601a:	f003 020f 	and.w	r2, r3, #15
 800601e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4422      	add	r2, r4
 8006026:	609a      	str	r2, [r3, #8]
}
 8006028:	bf00      	nop
 800602a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800602e:	46bd      	mov	sp, r7
 8006030:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006034:	51eb851f 	.word	0x51eb851f

08006038 <__NVIC_SetPriority>:
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	6039      	str	r1, [r7, #0]
 8006042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006048:	2b00      	cmp	r3, #0
 800604a:	db0a      	blt.n	8006062 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	b2da      	uxtb	r2, r3
 8006050:	490c      	ldr	r1, [pc, #48]	@ (8006084 <__NVIC_SetPriority+0x4c>)
 8006052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006056:	0112      	lsls	r2, r2, #4
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	440b      	add	r3, r1
 800605c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006060:	e00a      	b.n	8006078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	b2da      	uxtb	r2, r3
 8006066:	4908      	ldr	r1, [pc, #32]	@ (8006088 <__NVIC_SetPriority+0x50>)
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	3b04      	subs	r3, #4
 8006070:	0112      	lsls	r2, r2, #4
 8006072:	b2d2      	uxtb	r2, r2
 8006074:	440b      	add	r3, r1
 8006076:	761a      	strb	r2, [r3, #24]
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	e000e100 	.word	0xe000e100
 8006088:	e000ed00 	.word	0xe000ed00

0800608c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006090:	2100      	movs	r1, #0
 8006092:	f06f 0004 	mvn.w	r0, #4
 8006096:	f7ff ffcf 	bl	8006038 <__NVIC_SetPriority>
#endif
}
 800609a:	bf00      	nop
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060a6:	f3ef 8305 	mrs	r3, IPSR
 80060aa:	603b      	str	r3, [r7, #0]
  return(result);
 80060ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80060b2:	f06f 0305 	mvn.w	r3, #5
 80060b6:	607b      	str	r3, [r7, #4]
 80060b8:	e00c      	b.n	80060d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80060ba:	4b0a      	ldr	r3, [pc, #40]	@ (80060e4 <osKernelInitialize+0x44>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d105      	bne.n	80060ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80060c2:	4b08      	ldr	r3, [pc, #32]	@ (80060e4 <osKernelInitialize+0x44>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	607b      	str	r3, [r7, #4]
 80060cc:	e002      	b.n	80060d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80060ce:	f04f 33ff 	mov.w	r3, #4294967295
 80060d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80060d4:	687b      	ldr	r3, [r7, #4]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	2000050c 	.word	0x2000050c

080060e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060ee:	f3ef 8305 	mrs	r3, IPSR
 80060f2:	603b      	str	r3, [r7, #0]
  return(result);
 80060f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <osKernelStart+0x1a>
    stat = osErrorISR;
 80060fa:	f06f 0305 	mvn.w	r3, #5
 80060fe:	607b      	str	r3, [r7, #4]
 8006100:	e010      	b.n	8006124 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006102:	4b0b      	ldr	r3, [pc, #44]	@ (8006130 <osKernelStart+0x48>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d109      	bne.n	800611e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800610a:	f7ff ffbf 	bl	800608c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800610e:	4b08      	ldr	r3, [pc, #32]	@ (8006130 <osKernelStart+0x48>)
 8006110:	2202      	movs	r2, #2
 8006112:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006114:	f001 fb6c 	bl	80077f0 <vTaskStartScheduler>
      stat = osOK;
 8006118:	2300      	movs	r3, #0
 800611a:	607b      	str	r3, [r7, #4]
 800611c:	e002      	b.n	8006124 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800611e:	f04f 33ff 	mov.w	r3, #4294967295
 8006122:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006124:	687b      	ldr	r3, [r7, #4]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	2000050c 	.word	0x2000050c

08006134 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800613a:	f3ef 8305 	mrs	r3, IPSR
 800613e:	603b      	str	r3, [r7, #0]
  return(result);
 8006140:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8006146:	f001 fc77 	bl	8007a38 <xTaskGetTickCountFromISR>
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	e002      	b.n	8006154 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800614e:	f001 fc63 	bl	8007a18 <xTaskGetTickCount>
 8006152:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8006154:	687b      	ldr	r3, [r7, #4]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800615e:	b580      	push	{r7, lr}
 8006160:	b08e      	sub	sp, #56	@ 0x38
 8006162:	af04      	add	r7, sp, #16
 8006164:	60f8      	str	r0, [r7, #12]
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800616e:	f3ef 8305 	mrs	r3, IPSR
 8006172:	617b      	str	r3, [r7, #20]
  return(result);
 8006174:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006176:	2b00      	cmp	r3, #0
 8006178:	d17e      	bne.n	8006278 <osThreadNew+0x11a>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d07b      	beq.n	8006278 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006180:	2380      	movs	r3, #128	@ 0x80
 8006182:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006184:	2318      	movs	r3, #24
 8006186:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006188:	2300      	movs	r3, #0
 800618a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800618c:	f04f 33ff 	mov.w	r3, #4294967295
 8006190:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d045      	beq.n	8006224 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <osThreadNew+0x48>
        name = attr->name;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d008      	beq.n	80061cc <osThreadNew+0x6e>
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	2b38      	cmp	r3, #56	@ 0x38
 80061be:	d805      	bhi.n	80061cc <osThreadNew+0x6e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <osThreadNew+0x72>
        return (NULL);
 80061cc:	2300      	movs	r3, #0
 80061ce:	e054      	b.n	800627a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d003      	beq.n	80061e0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	089b      	lsrs	r3, r3, #2
 80061de:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00e      	beq.n	8006206 <osThreadNew+0xa8>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	2b5b      	cmp	r3, #91	@ 0x5b
 80061ee:	d90a      	bls.n	8006206 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d006      	beq.n	8006206 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <osThreadNew+0xa8>
        mem = 1;
 8006200:	2301      	movs	r3, #1
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	e010      	b.n	8006228 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10c      	bne.n	8006228 <osThreadNew+0xca>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d108      	bne.n	8006228 <osThreadNew+0xca>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d104      	bne.n	8006228 <osThreadNew+0xca>
          mem = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	61bb      	str	r3, [r7, #24]
 8006222:	e001      	b.n	8006228 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006224:	2300      	movs	r3, #0
 8006226:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d110      	bne.n	8006250 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006236:	9202      	str	r2, [sp, #8]
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	6a3a      	ldr	r2, [r7, #32]
 8006242:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f001 f80f 	bl	8007268 <xTaskCreateStatic>
 800624a:	4603      	mov	r3, r0
 800624c:	613b      	str	r3, [r7, #16]
 800624e:	e013      	b.n	8006278 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d110      	bne.n	8006278 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	b29a      	uxth	r2, r3
 800625a:	f107 0310 	add.w	r3, r7, #16
 800625e:	9301      	str	r3, [sp, #4]
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f001 f85d 	bl	8007328 <xTaskCreate>
 800626e:	4603      	mov	r3, r0
 8006270:	2b01      	cmp	r3, #1
 8006272:	d001      	beq.n	8006278 <osThreadNew+0x11a>
            hTask = NULL;
 8006274:	2300      	movs	r3, #0
 8006276:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006278:	693b      	ldr	r3, [r7, #16]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3728      	adds	r7, #40	@ 0x28
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800628a:	f3ef 8305 	mrs	r3, IPSR
 800628e:	603b      	str	r3, [r7, #0]
  return(result);
 8006290:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <osThreadYield+0x1a>
    stat = osErrorISR;
 8006296:	f06f 0305 	mvn.w	r3, #5
 800629a:	607b      	str	r3, [r7, #4]
 800629c:	e009      	b.n	80062b2 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800629e:	2300      	movs	r3, #0
 80062a0:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80062a2:	4b07      	ldr	r3, [pc, #28]	@ (80062c0 <osThreadYield+0x3c>)
 80062a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80062b2:	687b      	ldr	r3, [r7, #4]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	e000ed04 	.word	0xe000ed04

080062c4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08a      	sub	sp, #40	@ 0x28
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062d4:	f3ef 8305 	mrs	r3, IPSR
 80062d8:	613b      	str	r3, [r7, #16]
  return(result);
 80062da:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d15f      	bne.n	80063a0 <osMessageQueueNew+0xdc>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d05c      	beq.n	80063a0 <osMessageQueueNew+0xdc>
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d059      	beq.n	80063a0 <osMessageQueueNew+0xdc>
    mem = -1;
 80062ec:	f04f 33ff 	mov.w	r3, #4294967295
 80062f0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d029      	beq.n	800634c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d012      	beq.n	8006326 <osMessageQueueNew+0x62>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	2b4f      	cmp	r3, #79	@ 0x4f
 8006306:	d90e      	bls.n	8006326 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00a      	beq.n	8006326 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	695a      	ldr	r2, [r3, #20]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	fb01 f303 	mul.w	r3, r1, r3
 800631c:	429a      	cmp	r2, r3
 800631e:	d302      	bcc.n	8006326 <osMessageQueueNew+0x62>
        mem = 1;
 8006320:	2301      	movs	r3, #1
 8006322:	61bb      	str	r3, [r7, #24]
 8006324:	e014      	b.n	8006350 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d110      	bne.n	8006350 <osMessageQueueNew+0x8c>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10c      	bne.n	8006350 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800633a:	2b00      	cmp	r3, #0
 800633c:	d108      	bne.n	8006350 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d104      	bne.n	8006350 <osMessageQueueNew+0x8c>
          mem = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	61bb      	str	r3, [r7, #24]
 800634a:	e001      	b.n	8006350 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d10b      	bne.n	800636e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691a      	ldr	r2, [r3, #16]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	2100      	movs	r1, #0
 8006360:	9100      	str	r1, [sp, #0]
 8006362:	68b9      	ldr	r1, [r7, #8]
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 fa31 	bl	80067cc <xQueueGenericCreateStatic>
 800636a:	61f8      	str	r0, [r7, #28]
 800636c:	e008      	b.n	8006380 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d105      	bne.n	8006380 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006374:	2200      	movs	r2, #0
 8006376:	68b9      	ldr	r1, [r7, #8]
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 faa4 	bl	80068c6 <xQueueGenericCreate>
 800637e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00c      	beq.n	80063a0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <osMessageQueueNew+0xd0>
        name = attr->name;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	e001      	b.n	8006398 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006394:	2300      	movs	r3, #0
 8006396:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006398:	6979      	ldr	r1, [r7, #20]
 800639a:	69f8      	ldr	r0, [r7, #28]
 800639c:	f000 ff06 	bl	80071ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80063a0:	69fb      	ldr	r3, [r7, #28]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3720      	adds	r7, #32
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b088      	sub	sp, #32
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063c4:	f3ef 8305 	mrs	r3, IPSR
 80063c8:	617b      	str	r3, [r7, #20]
  return(result);
 80063ca:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d028      	beq.n	8006422 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d005      	beq.n	80063e2 <osMessageQueuePut+0x36>
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <osMessageQueuePut+0x36>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80063e2:	f06f 0303 	mvn.w	r3, #3
 80063e6:	61fb      	str	r3, [r7, #28]
 80063e8:	e038      	b.n	800645c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80063ee:	f107 0210 	add.w	r2, r7, #16
 80063f2:	2300      	movs	r3, #0
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	69b8      	ldr	r0, [r7, #24]
 80063f8:	f000 fbc6 	bl	8006b88 <xQueueGenericSendFromISR>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d003      	beq.n	800640a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006402:	f06f 0302 	mvn.w	r3, #2
 8006406:	61fb      	str	r3, [r7, #28]
 8006408:	e028      	b.n	800645c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d025      	beq.n	800645c <osMessageQueuePut+0xb0>
 8006410:	4b15      	ldr	r3, [pc, #84]	@ (8006468 <osMessageQueuePut+0xbc>)
 8006412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	e01c      	b.n	800645c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <osMessageQueuePut+0x82>
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d103      	bne.n	8006436 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800642e:	f06f 0303 	mvn.w	r3, #3
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	e012      	b.n	800645c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006436:	2300      	movs	r3, #0
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	69b8      	ldr	r0, [r7, #24]
 800643e:	f000 faa1 	bl	8006984 <xQueueGenericSend>
 8006442:	4603      	mov	r3, r0
 8006444:	2b01      	cmp	r3, #1
 8006446:	d009      	beq.n	800645c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800644e:	f06f 0301 	mvn.w	r3, #1
 8006452:	61fb      	str	r3, [r7, #28]
 8006454:	e002      	b.n	800645c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006456:	f06f 0302 	mvn.w	r3, #2
 800645a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800645c:	69fb      	ldr	r3, [r7, #28]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3720      	adds	r7, #32
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006482:	f3ef 8305 	mrs	r3, IPSR
 8006486:	617b      	str	r3, [r7, #20]
  return(result);
 8006488:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800648a:	2b00      	cmp	r3, #0
 800648c:	d028      	beq.n	80064e0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d005      	beq.n	80064a0 <osMessageQueueGet+0x34>
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <osMessageQueueGet+0x34>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d003      	beq.n	80064a8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80064a0:	f06f 0303 	mvn.w	r3, #3
 80064a4:	61fb      	str	r3, [r7, #28]
 80064a6:	e037      	b.n	8006518 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80064a8:	2300      	movs	r3, #0
 80064aa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80064ac:	f107 0310 	add.w	r3, r7, #16
 80064b0:	461a      	mov	r2, r3
 80064b2:	68b9      	ldr	r1, [r7, #8]
 80064b4:	69b8      	ldr	r0, [r7, #24]
 80064b6:	f000 fce7 	bl	8006e88 <xQueueReceiveFromISR>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d003      	beq.n	80064c8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80064c0:	f06f 0302 	mvn.w	r3, #2
 80064c4:	61fb      	str	r3, [r7, #28]
 80064c6:	e027      	b.n	8006518 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d024      	beq.n	8006518 <osMessageQueueGet+0xac>
 80064ce:	4b15      	ldr	r3, [pc, #84]	@ (8006524 <osMessageQueueGet+0xb8>)
 80064d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	e01b      	b.n	8006518 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <osMessageQueueGet+0x80>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d103      	bne.n	80064f4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80064ec:	f06f 0303 	mvn.w	r3, #3
 80064f0:	61fb      	str	r3, [r7, #28]
 80064f2:	e011      	b.n	8006518 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	68b9      	ldr	r1, [r7, #8]
 80064f8:	69b8      	ldr	r0, [r7, #24]
 80064fa:	f000 fbe3 	bl	8006cc4 <xQueueReceive>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b01      	cmp	r3, #1
 8006502:	d009      	beq.n	8006518 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800650a:	f06f 0301 	mvn.w	r3, #1
 800650e:	61fb      	str	r3, [r7, #28]
 8006510:	e002      	b.n	8006518 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006512:	f06f 0302 	mvn.w	r3, #2
 8006516:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006518:	69fb      	ldr	r3, [r7, #28]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3720      	adds	r7, #32
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	e000ed04 	.word	0xe000ed04

08006528 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4a07      	ldr	r2, [pc, #28]	@ (8006554 <vApplicationGetIdleTaskMemory+0x2c>)
 8006538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4a06      	ldr	r2, [pc, #24]	@ (8006558 <vApplicationGetIdleTaskMemory+0x30>)
 800653e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2280      	movs	r2, #128	@ 0x80
 8006544:	601a      	str	r2, [r3, #0]
}
 8006546:	bf00      	nop
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20000510 	.word	0x20000510
 8006558:	2000056c 	.word	0x2000056c

0800655c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4a07      	ldr	r2, [pc, #28]	@ (8006588 <vApplicationGetTimerTaskMemory+0x2c>)
 800656c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	4a06      	ldr	r2, [pc, #24]	@ (800658c <vApplicationGetTimerTaskMemory+0x30>)
 8006572:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800657a:	601a      	str	r2, [r3, #0]
}
 800657c:	bf00      	nop
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	2000076c 	.word	0x2000076c
 800658c:	200007c8 	.word	0x200007c8

08006590 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f103 0208 	add.w	r2, r3, #8
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f04f 32ff 	mov.w	r2, #4294967295
 80065a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f103 0208 	add.w	r2, r3, #8
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f103 0208 	add.w	r2, r3, #8
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065de:	bf00      	nop
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065ea:	b480      	push	{r7}
 80065ec:	b085      	sub	sp, #20
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	601a      	str	r2, [r3, #0]
}
 8006626:	bf00      	nop
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006632:	b480      	push	{r7}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006648:	d103      	bne.n	8006652 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	e00c      	b.n	800666c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3308      	adds	r3, #8
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	e002      	b.n	8006660 <vListInsert+0x2e>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	429a      	cmp	r2, r3
 800666a:	d2f6      	bcs.n	800665a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	601a      	str	r2, [r3, #0]
}
 8006698:	bf00      	nop
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6892      	ldr	r2, [r2, #8]
 80066ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6852      	ldr	r2, [r2, #4]
 80066c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d103      	bne.n	80066d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	1e5a      	subs	r2, r3, #1
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10b      	bne.n	8006724 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800671e:	bf00      	nop
 8006720:	bf00      	nop
 8006722:	e7fd      	b.n	8006720 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006724:	f002 fa30 	bl	8008b88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006730:	68f9      	ldr	r1, [r7, #12]
 8006732:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006734:	fb01 f303 	mul.w	r3, r1, r3
 8006738:	441a      	add	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006754:	3b01      	subs	r3, #1
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800675a:	fb01 f303 	mul.w	r3, r1, r3
 800675e:	441a      	add	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	22ff      	movs	r2, #255	@ 0xff
 8006768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	22ff      	movs	r2, #255	@ 0xff
 8006770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d114      	bne.n	80067a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d01a      	beq.n	80067b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3310      	adds	r3, #16
 8006786:	4618      	mov	r0, r3
 8006788:	f001 fad2 	bl	8007d30 <xTaskRemoveFromEventList>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d012      	beq.n	80067b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006792:	4b0d      	ldr	r3, [pc, #52]	@ (80067c8 <xQueueGenericReset+0xd0>)
 8006794:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	e009      	b.n	80067b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	3310      	adds	r3, #16
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7ff fef1 	bl	8006590 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3324      	adds	r3, #36	@ 0x24
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff feec 	bl	8006590 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067b8:	f002 fa18 	bl	8008bec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067bc:	2301      	movs	r3, #1
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	e000ed04 	.word	0xe000ed04

080067cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08e      	sub	sp, #56	@ 0x38
 80067d0:	af02      	add	r7, sp, #8
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
 80067d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10b      	bne.n	80067f8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80067f2:	bf00      	nop
 80067f4:	bf00      	nop
 80067f6:	e7fd      	b.n	80067f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10b      	bne.n	8006816 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006810:	bf00      	nop
 8006812:	bf00      	nop
 8006814:	e7fd      	b.n	8006812 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <xQueueGenericCreateStatic+0x56>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <xQueueGenericCreateStatic+0x5a>
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <xQueueGenericCreateStatic+0x5c>
 8006826:	2300      	movs	r3, #0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10b      	bne.n	8006844 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	623b      	str	r3, [r7, #32]
}
 800683e:	bf00      	nop
 8006840:	bf00      	nop
 8006842:	e7fd      	b.n	8006840 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d102      	bne.n	8006850 <xQueueGenericCreateStatic+0x84>
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <xQueueGenericCreateStatic+0x88>
 8006850:	2301      	movs	r3, #1
 8006852:	e000      	b.n	8006856 <xQueueGenericCreateStatic+0x8a>
 8006854:	2300      	movs	r3, #0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10b      	bne.n	8006872 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	61fb      	str	r3, [r7, #28]
}
 800686c:	bf00      	nop
 800686e:	bf00      	nop
 8006870:	e7fd      	b.n	800686e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006872:	2350      	movs	r3, #80	@ 0x50
 8006874:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b50      	cmp	r3, #80	@ 0x50
 800687a:	d00b      	beq.n	8006894 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	61bb      	str	r3, [r7, #24]
}
 800688e:	bf00      	nop
 8006890:	bf00      	nop
 8006892:	e7fd      	b.n	8006890 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006894:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800689a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00d      	beq.n	80068bc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80068a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80068ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	4613      	mov	r3, r2
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f840 	bl	800693c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80068be:	4618      	mov	r0, r3
 80068c0:	3730      	adds	r7, #48	@ 0x30
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b08a      	sub	sp, #40	@ 0x28
 80068ca:	af02      	add	r7, sp, #8
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	4613      	mov	r3, r2
 80068d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10b      	bne.n	80068f2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	613b      	str	r3, [r7, #16]
}
 80068ec:	bf00      	nop
 80068ee:	bf00      	nop
 80068f0:	e7fd      	b.n	80068ee <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	fb02 f303 	mul.w	r3, r2, r3
 80068fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	3350      	adds	r3, #80	@ 0x50
 8006900:	4618      	mov	r0, r3
 8006902:	f002 fa63 	bl	8008dcc <pvPortMalloc>
 8006906:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d011      	beq.n	8006932 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	3350      	adds	r3, #80	@ 0x50
 8006916:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006920:	79fa      	ldrb	r2, [r7, #7]
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	4613      	mov	r3, r2
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 f805 	bl	800693c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006932:	69bb      	ldr	r3, [r7, #24]
	}
 8006934:	4618      	mov	r0, r3
 8006936:	3720      	adds	r7, #32
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d103      	bne.n	8006958 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	e002      	b.n	800695e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800696a:	2101      	movs	r1, #1
 800696c:	69b8      	ldr	r0, [r7, #24]
 800696e:	f7ff fec3 	bl	80066f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	78fa      	ldrb	r2, [r7, #3]
 8006976:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800697a:	bf00      	nop
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08e      	sub	sp, #56	@ 0x38
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006992:	2300      	movs	r3, #0
 8006994:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800699a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10b      	bne.n	80069b8 <xQueueGenericSend+0x34>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80069b2:	bf00      	nop
 80069b4:	bf00      	nop
 80069b6:	e7fd      	b.n	80069b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d103      	bne.n	80069c6 <xQueueGenericSend+0x42>
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <xQueueGenericSend+0x46>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <xQueueGenericSend+0x48>
 80069ca:	2300      	movs	r3, #0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10b      	bne.n	80069e8 <xQueueGenericSend+0x64>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80069e2:	bf00      	nop
 80069e4:	bf00      	nop
 80069e6:	e7fd      	b.n	80069e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d103      	bne.n	80069f6 <xQueueGenericSend+0x72>
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d101      	bne.n	80069fa <xQueueGenericSend+0x76>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e000      	b.n	80069fc <xQueueGenericSend+0x78>
 80069fa:	2300      	movs	r3, #0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10b      	bne.n	8006a18 <xQueueGenericSend+0x94>
	__asm volatile
 8006a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	623b      	str	r3, [r7, #32]
}
 8006a12:	bf00      	nop
 8006a14:	bf00      	nop
 8006a16:	e7fd      	b.n	8006a14 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a18:	f001 fb4a 	bl	80080b0 <xTaskGetSchedulerState>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d102      	bne.n	8006a28 <xQueueGenericSend+0xa4>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <xQueueGenericSend+0xa8>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e000      	b.n	8006a2e <xQueueGenericSend+0xaa>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10b      	bne.n	8006a4a <xQueueGenericSend+0xc6>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	61fb      	str	r3, [r7, #28]
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop
 8006a48:	e7fd      	b.n	8006a46 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a4a:	f002 f89d 	bl	8008b88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d302      	bcc.n	8006a60 <xQueueGenericSend+0xdc>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d129      	bne.n	8006ab4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	68b9      	ldr	r1, [r7, #8]
 8006a64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a66:	f000 fa91 	bl	8006f8c <prvCopyDataToQueue>
 8006a6a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d010      	beq.n	8006a96 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a76:	3324      	adds	r3, #36	@ 0x24
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f001 f959 	bl	8007d30 <xTaskRemoveFromEventList>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d013      	beq.n	8006aac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a84:	4b3f      	ldr	r3, [pc, #252]	@ (8006b84 <xQueueGenericSend+0x200>)
 8006a86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	e00a      	b.n	8006aac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d007      	beq.n	8006aac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a9c:	4b39      	ldr	r3, [pc, #228]	@ (8006b84 <xQueueGenericSend+0x200>)
 8006a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006aac:	f002 f89e 	bl	8008bec <vPortExitCritical>
				return pdPASS;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e063      	b.n	8006b7c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d103      	bne.n	8006ac2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006aba:	f002 f897 	bl	8008bec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e05c      	b.n	8006b7c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d106      	bne.n	8006ad6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ac8:	f107 0314 	add.w	r3, r7, #20
 8006acc:	4618      	mov	r0, r3
 8006ace:	f001 f993 	bl	8007df8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ad6:	f002 f889 	bl	8008bec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ada:	f000 fef1 	bl	80078c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ade:	f002 f853 	bl	8008b88 <vPortEnterCritical>
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ae8:	b25b      	sxtb	r3, r3
 8006aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aee:	d103      	bne.n	8006af8 <xQueueGenericSend+0x174>
 8006af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006afe:	b25b      	sxtb	r3, r3
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b04:	d103      	bne.n	8006b0e <xQueueGenericSend+0x18a>
 8006b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b0e:	f002 f86d 	bl	8008bec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b12:	1d3a      	adds	r2, r7, #4
 8006b14:	f107 0314 	add.w	r3, r7, #20
 8006b18:	4611      	mov	r1, r2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f001 f982 	bl	8007e24 <xTaskCheckForTimeOut>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d124      	bne.n	8006b70 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b28:	f000 fb28 	bl	800717c <prvIsQueueFull>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d018      	beq.n	8006b64 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	3310      	adds	r3, #16
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	4611      	mov	r1, r2
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f001 f8a6 	bl	8007c8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b42:	f000 fab3 	bl	80070ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b46:	f000 fec9 	bl	80078dc <xTaskResumeAll>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f47f af7c 	bne.w	8006a4a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006b52:	4b0c      	ldr	r3, [pc, #48]	@ (8006b84 <xQueueGenericSend+0x200>)
 8006b54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	e772      	b.n	8006a4a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b66:	f000 faa1 	bl	80070ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b6a:	f000 feb7 	bl	80078dc <xTaskResumeAll>
 8006b6e:	e76c      	b.n	8006a4a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b72:	f000 fa9b 	bl	80070ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b76:	f000 feb1 	bl	80078dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3738      	adds	r7, #56	@ 0x38
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	e000ed04 	.word	0xe000ed04

08006b88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b090      	sub	sp, #64	@ 0x40
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10b      	bne.n	8006bb8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006bb2:	bf00      	nop
 8006bb4:	bf00      	nop
 8006bb6:	e7fd      	b.n	8006bb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d103      	bne.n	8006bc6 <xQueueGenericSendFromISR+0x3e>
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <xQueueGenericSendFromISR+0x42>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e000      	b.n	8006bcc <xQueueGenericSendFromISR+0x44>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10b      	bne.n	8006be8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006be2:	bf00      	nop
 8006be4:	bf00      	nop
 8006be6:	e7fd      	b.n	8006be4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d103      	bne.n	8006bf6 <xQueueGenericSendFromISR+0x6e>
 8006bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d101      	bne.n	8006bfa <xQueueGenericSendFromISR+0x72>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e000      	b.n	8006bfc <xQueueGenericSendFromISR+0x74>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10b      	bne.n	8006c18 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	623b      	str	r3, [r7, #32]
}
 8006c12:	bf00      	nop
 8006c14:	bf00      	nop
 8006c16:	e7fd      	b.n	8006c14 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c18:	f002 f896 	bl	8008d48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c1c:	f3ef 8211 	mrs	r2, BASEPRI
 8006c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	61fa      	str	r2, [r7, #28]
 8006c32:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c34:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c36:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d302      	bcc.n	8006c4a <xQueueGenericSendFromISR+0xc2>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d12f      	bne.n	8006caa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006c60:	f000 f994 	bl	8006f8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c64:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6c:	d112      	bne.n	8006c94 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d016      	beq.n	8006ca4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c78:	3324      	adds	r3, #36	@ 0x24
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f001 f858 	bl	8007d30 <xTaskRemoveFromEventList>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00e      	beq.n	8006ca4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00b      	beq.n	8006ca4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	e007      	b.n	8006ca4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006c98:	3301      	adds	r3, #1
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	b25a      	sxtb	r2, r3
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006ca8:	e001      	b.n	8006cae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cb0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006cb8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3740      	adds	r7, #64	@ 0x40
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b08c      	sub	sp, #48	@ 0x30
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10b      	bne.n	8006cf6 <xQueueReceive+0x32>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	623b      	str	r3, [r7, #32]
}
 8006cf0:	bf00      	nop
 8006cf2:	bf00      	nop
 8006cf4:	e7fd      	b.n	8006cf2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d103      	bne.n	8006d04 <xQueueReceive+0x40>
 8006cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <xQueueReceive+0x44>
 8006d04:	2301      	movs	r3, #1
 8006d06:	e000      	b.n	8006d0a <xQueueReceive+0x46>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10b      	bne.n	8006d26 <xQueueReceive+0x62>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	61fb      	str	r3, [r7, #28]
}
 8006d20:	bf00      	nop
 8006d22:	bf00      	nop
 8006d24:	e7fd      	b.n	8006d22 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d26:	f001 f9c3 	bl	80080b0 <xTaskGetSchedulerState>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d102      	bne.n	8006d36 <xQueueReceive+0x72>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <xQueueReceive+0x76>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <xQueueReceive+0x78>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10b      	bne.n	8006d58 <xQueueReceive+0x94>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	61bb      	str	r3, [r7, #24]
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	e7fd      	b.n	8006d54 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d58:	f001 ff16 	bl	8008b88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d60:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d01f      	beq.n	8006da8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d68:	68b9      	ldr	r1, [r7, #8]
 8006d6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d6c:	f000 f978 	bl	8007060 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	1e5a      	subs	r2, r3, #1
 8006d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d76:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00f      	beq.n	8006da0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d82:	3310      	adds	r3, #16
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 ffd3 	bl	8007d30 <xTaskRemoveFromEventList>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d007      	beq.n	8006da0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d90:	4b3c      	ldr	r3, [pc, #240]	@ (8006e84 <xQueueReceive+0x1c0>)
 8006d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006da0:	f001 ff24 	bl	8008bec <vPortExitCritical>
				return pdPASS;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e069      	b.n	8006e7c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d103      	bne.n	8006db6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dae:	f001 ff1d 	bl	8008bec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006db2:	2300      	movs	r3, #0
 8006db4:	e062      	b.n	8006e7c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d106      	bne.n	8006dca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dbc:	f107 0310 	add.w	r3, r7, #16
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f001 f819 	bl	8007df8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006dca:	f001 ff0f 	bl	8008bec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dce:	f000 fd77 	bl	80078c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dd2:	f001 fed9 	bl	8008b88 <vPortEnterCritical>
 8006dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ddc:	b25b      	sxtb	r3, r3
 8006dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de2:	d103      	bne.n	8006dec <xQueueReceive+0x128>
 8006de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006df2:	b25b      	sxtb	r3, r3
 8006df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df8:	d103      	bne.n	8006e02 <xQueueReceive+0x13e>
 8006dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e02:	f001 fef3 	bl	8008bec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e06:	1d3a      	adds	r2, r7, #4
 8006e08:	f107 0310 	add.w	r3, r7, #16
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f001 f808 	bl	8007e24 <xTaskCheckForTimeOut>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d123      	bne.n	8006e62 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e1c:	f000 f998 	bl	8007150 <prvIsQueueEmpty>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d017      	beq.n	8006e56 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e28:	3324      	adds	r3, #36	@ 0x24
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 ff2c 	bl	8007c8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e36:	f000 f939 	bl	80070ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e3a:	f000 fd4f 	bl	80078dc <xTaskResumeAll>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d189      	bne.n	8006d58 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006e44:	4b0f      	ldr	r3, [pc, #60]	@ (8006e84 <xQueueReceive+0x1c0>)
 8006e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	e780      	b.n	8006d58 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e58:	f000 f928 	bl	80070ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e5c:	f000 fd3e 	bl	80078dc <xTaskResumeAll>
 8006e60:	e77a      	b.n	8006d58 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e64:	f000 f922 	bl	80070ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e68:	f000 fd38 	bl	80078dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e6e:	f000 f96f 	bl	8007150 <prvIsQueueEmpty>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f43f af6f 	beq.w	8006d58 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3730      	adds	r7, #48	@ 0x30
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	e000ed04 	.word	0xe000ed04

08006e88 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08e      	sub	sp, #56	@ 0x38
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10b      	bne.n	8006eb6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	623b      	str	r3, [r7, #32]
}
 8006eb0:	bf00      	nop
 8006eb2:	bf00      	nop
 8006eb4:	e7fd      	b.n	8006eb2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d103      	bne.n	8006ec4 <xQueueReceiveFromISR+0x3c>
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <xQueueReceiveFromISR+0x40>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <xQueueReceiveFromISR+0x42>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10b      	bne.n	8006ee6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	61fb      	str	r3, [r7, #28]
}
 8006ee0:	bf00      	nop
 8006ee2:	bf00      	nop
 8006ee4:	e7fd      	b.n	8006ee2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ee6:	f001 ff2f 	bl	8008d48 <vPortValidateInterruptPriority>
	__asm volatile
 8006eea:	f3ef 8211 	mrs	r2, BASEPRI
 8006eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	61ba      	str	r2, [r7, #24]
 8006f00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006f02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d02f      	beq.n	8006f72 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f1c:	68b9      	ldr	r1, [r7, #8]
 8006f1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f20:	f000 f89e 	bl	8007060 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f26:	1e5a      	subs	r2, r3, #1
 8006f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006f2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f34:	d112      	bne.n	8006f5c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d016      	beq.n	8006f6c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	3310      	adds	r3, #16
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 fef4 	bl	8007d30 <xTaskRemoveFromEventList>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00e      	beq.n	8006f6c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00b      	beq.n	8006f6c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	e007      	b.n	8006f6c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f60:	3301      	adds	r3, #1
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	b25a      	sxtb	r2, r3
 8006f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f70:	e001      	b.n	8006f76 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f383 8811 	msr	BASEPRI, r3
}
 8006f80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3738      	adds	r7, #56	@ 0x38
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10d      	bne.n	8006fc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d14d      	bne.n	800704e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f001 f898 	bl	80080ec <xTaskPriorityDisinherit>
 8006fbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	609a      	str	r2, [r3, #8]
 8006fc4:	e043      	b.n	800704e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d119      	bne.n	8007000 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6858      	ldr	r0, [r3, #4]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	68b9      	ldr	r1, [r7, #8]
 8006fd8:	f003 f80d 	bl	8009ff6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe4:	441a      	add	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d32b      	bcc.n	800704e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	605a      	str	r2, [r3, #4]
 8006ffe:	e026      	b.n	800704e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	68d8      	ldr	r0, [r3, #12]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007008:	461a      	mov	r2, r3
 800700a:	68b9      	ldr	r1, [r7, #8]
 800700c:	f002 fff3 	bl	8009ff6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007018:	425b      	negs	r3, r3
 800701a:	441a      	add	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	68da      	ldr	r2, [r3, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	429a      	cmp	r2, r3
 800702a:	d207      	bcs.n	800703c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007034:	425b      	negs	r3, r3
 8007036:	441a      	add	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b02      	cmp	r3, #2
 8007040:	d105      	bne.n	800704e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d002      	beq.n	800704e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	3b01      	subs	r3, #1
 800704c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007056:	697b      	ldr	r3, [r7, #20]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706e:	2b00      	cmp	r3, #0
 8007070:	d018      	beq.n	80070a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68da      	ldr	r2, [r3, #12]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800707a:	441a      	add	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	429a      	cmp	r2, r3
 800708a:	d303      	bcc.n	8007094 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68d9      	ldr	r1, [r3, #12]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709c:	461a      	mov	r2, r3
 800709e:	6838      	ldr	r0, [r7, #0]
 80070a0:	f002 ffa9 	bl	8009ff6 <memcpy>
	}
}
 80070a4:	bf00      	nop
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070b4:	f001 fd68 	bl	8008b88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070c0:	e011      	b.n	80070e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d012      	beq.n	80070f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3324      	adds	r3, #36	@ 0x24
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 fe2e 	bl	8007d30 <xTaskRemoveFromEventList>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80070da:	f000 ff07 	bl	8007eec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	dce9      	bgt.n	80070c2 <prvUnlockQueue+0x16>
 80070ee:	e000      	b.n	80070f2 <prvUnlockQueue+0x46>
					break;
 80070f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	22ff      	movs	r2, #255	@ 0xff
 80070f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80070fa:	f001 fd77 	bl	8008bec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80070fe:	f001 fd43 	bl	8008b88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007108:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800710a:	e011      	b.n	8007130 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d012      	beq.n	800713a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	3310      	adds	r3, #16
 8007118:	4618      	mov	r0, r3
 800711a:	f000 fe09 	bl	8007d30 <xTaskRemoveFromEventList>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007124:	f000 fee2 	bl	8007eec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	3b01      	subs	r3, #1
 800712c:	b2db      	uxtb	r3, r3
 800712e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007130:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007134:	2b00      	cmp	r3, #0
 8007136:	dce9      	bgt.n	800710c <prvUnlockQueue+0x60>
 8007138:	e000      	b.n	800713c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800713a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	22ff      	movs	r2, #255	@ 0xff
 8007140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007144:	f001 fd52 	bl	8008bec <vPortExitCritical>
}
 8007148:	bf00      	nop
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007158:	f001 fd16 	bl	8008b88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007160:	2b00      	cmp	r3, #0
 8007162:	d102      	bne.n	800716a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007164:	2301      	movs	r3, #1
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	e001      	b.n	800716e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800716a:	2300      	movs	r3, #0
 800716c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800716e:	f001 fd3d 	bl	8008bec <vPortExitCritical>

	return xReturn;
 8007172:	68fb      	ldr	r3, [r7, #12]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007184:	f001 fd00 	bl	8008b88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007190:	429a      	cmp	r2, r3
 8007192:	d102      	bne.n	800719a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007194:	2301      	movs	r3, #1
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	e001      	b.n	800719e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800719a:	2300      	movs	r3, #0
 800719c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800719e:	f001 fd25 	bl	8008bec <vPortExitCritical>

	return xReturn;
 80071a2:	68fb      	ldr	r3, [r7, #12]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071b6:	2300      	movs	r3, #0
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	e014      	b.n	80071e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80071bc:	4a0f      	ldr	r2, [pc, #60]	@ (80071fc <vQueueAddToRegistry+0x50>)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10b      	bne.n	80071e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80071c8:	490c      	ldr	r1, [pc, #48]	@ (80071fc <vQueueAddToRegistry+0x50>)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80071d2:	4a0a      	ldr	r2, [pc, #40]	@ (80071fc <vQueueAddToRegistry+0x50>)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	4413      	add	r3, r2
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80071de:	e006      	b.n	80071ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3301      	adds	r3, #1
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b07      	cmp	r3, #7
 80071ea:	d9e7      	bls.n	80071bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80071ec:	bf00      	nop
 80071ee:	bf00      	nop
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	20000bc8 	.word	0x20000bc8

08007200 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007210:	f001 fcba 	bl	8008b88 <vPortEnterCritical>
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800721a:	b25b      	sxtb	r3, r3
 800721c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007220:	d103      	bne.n	800722a <vQueueWaitForMessageRestricted+0x2a>
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007230:	b25b      	sxtb	r3, r3
 8007232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007236:	d103      	bne.n	8007240 <vQueueWaitForMessageRestricted+0x40>
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007240:	f001 fcd4 	bl	8008bec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007248:	2b00      	cmp	r3, #0
 800724a:	d106      	bne.n	800725a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	3324      	adds	r3, #36	@ 0x24
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	68b9      	ldr	r1, [r7, #8]
 8007254:	4618      	mov	r0, r3
 8007256:	f000 fd3f 	bl	8007cd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800725a:	6978      	ldr	r0, [r7, #20]
 800725c:	f7ff ff26 	bl	80070ac <prvUnlockQueue>
	}
 8007260:	bf00      	nop
 8007262:	3718      	adds	r7, #24
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08e      	sub	sp, #56	@ 0x38
 800726c:	af04      	add	r7, sp, #16
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
 8007274:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10b      	bne.n	8007294 <xTaskCreateStatic+0x2c>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	623b      	str	r3, [r7, #32]
}
 800728e:	bf00      	nop
 8007290:	bf00      	nop
 8007292:	e7fd      	b.n	8007290 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10b      	bne.n	80072b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800729a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	61fb      	str	r3, [r7, #28]
}
 80072ac:	bf00      	nop
 80072ae:	bf00      	nop
 80072b0:	e7fd      	b.n	80072ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80072b2:	235c      	movs	r3, #92	@ 0x5c
 80072b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80072ba:	d00b      	beq.n	80072d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	61bb      	str	r3, [r7, #24]
}
 80072ce:	bf00      	nop
 80072d0:	bf00      	nop
 80072d2:	e7fd      	b.n	80072d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80072d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80072d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01e      	beq.n	800731a <xTaskCreateStatic+0xb2>
 80072dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d01b      	beq.n	800731a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80072e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80072ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072f4:	2300      	movs	r3, #0
 80072f6:	9303      	str	r3, [sp, #12]
 80072f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fa:	9302      	str	r3, [sp, #8]
 80072fc:	f107 0314 	add.w	r3, r7, #20
 8007300:	9301      	str	r3, [sp, #4]
 8007302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 f850 	bl	80073b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007312:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007314:	f000 f8de 	bl	80074d4 <prvAddNewTaskToReadyList>
 8007318:	e001      	b.n	800731e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800731a:	2300      	movs	r3, #0
 800731c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800731e:	697b      	ldr	r3, [r7, #20]
	}
 8007320:	4618      	mov	r0, r3
 8007322:	3728      	adds	r7, #40	@ 0x28
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08c      	sub	sp, #48	@ 0x30
 800732c:	af04      	add	r7, sp, #16
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	603b      	str	r3, [r7, #0]
 8007334:	4613      	mov	r3, r2
 8007336:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007338:	88fb      	ldrh	r3, [r7, #6]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4618      	mov	r0, r3
 800733e:	f001 fd45 	bl	8008dcc <pvPortMalloc>
 8007342:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00e      	beq.n	8007368 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800734a:	205c      	movs	r0, #92	@ 0x5c
 800734c:	f001 fd3e 	bl	8008dcc <pvPortMalloc>
 8007350:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	631a      	str	r2, [r3, #48]	@ 0x30
 800735e:	e005      	b.n	800736c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007360:	6978      	ldr	r0, [r7, #20]
 8007362:	f001 fe01 	bl	8008f68 <vPortFree>
 8007366:	e001      	b.n	800736c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007368:	2300      	movs	r3, #0
 800736a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d017      	beq.n	80073a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800737a:	88fa      	ldrh	r2, [r7, #6]
 800737c:	2300      	movs	r3, #0
 800737e:	9303      	str	r3, [sp, #12]
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	9302      	str	r3, [sp, #8]
 8007384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007386:	9301      	str	r3, [sp, #4]
 8007388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	68b9      	ldr	r1, [r7, #8]
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 f80e 	bl	80073b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007396:	69f8      	ldr	r0, [r7, #28]
 8007398:	f000 f89c 	bl	80074d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800739c:	2301      	movs	r3, #1
 800739e:	61bb      	str	r3, [r7, #24]
 80073a0:	e002      	b.n	80073a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073a2:	f04f 33ff 	mov.w	r3, #4294967295
 80073a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073a8:	69bb      	ldr	r3, [r7, #24]
	}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3720      	adds	r7, #32
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b088      	sub	sp, #32
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	60f8      	str	r0, [r7, #12]
 80073ba:	60b9      	str	r1, [r7, #8]
 80073bc:	607a      	str	r2, [r7, #4]
 80073be:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	461a      	mov	r2, r3
 80073ca:	21a5      	movs	r1, #165	@ 0xa5
 80073cc:	f002 fd94 	bl	8009ef8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80073d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80073da:	3b01      	subs	r3, #1
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	f023 0307 	bic.w	r3, r3, #7
 80073e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00b      	beq.n	800740c <prvInitialiseNewTask+0x5a>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	617b      	str	r3, [r7, #20]
}
 8007406:	bf00      	nop
 8007408:	bf00      	nop
 800740a:	e7fd      	b.n	8007408 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d01f      	beq.n	8007452 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007412:	2300      	movs	r3, #0
 8007414:	61fb      	str	r3, [r7, #28]
 8007416:	e012      	b.n	800743e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	4413      	add	r3, r2
 800741e:	7819      	ldrb	r1, [r3, #0]
 8007420:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	4413      	add	r3, r2
 8007426:	3334      	adds	r3, #52	@ 0x34
 8007428:	460a      	mov	r2, r1
 800742a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	4413      	add	r3, r2
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d006      	beq.n	8007446 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	3301      	adds	r3, #1
 800743c:	61fb      	str	r3, [r7, #28]
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	2b0f      	cmp	r3, #15
 8007442:	d9e9      	bls.n	8007418 <prvInitialiseNewTask+0x66>
 8007444:	e000      	b.n	8007448 <prvInitialiseNewTask+0x96>
			{
				break;
 8007446:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007450:	e003      	b.n	800745a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800745a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745c:	2b37      	cmp	r3, #55	@ 0x37
 800745e:	d901      	bls.n	8007464 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007460:	2337      	movs	r3, #55	@ 0x37
 8007462:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007468:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800746a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800746e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007472:	2200      	movs	r2, #0
 8007474:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007478:	3304      	adds	r3, #4
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff f8a8 	bl	80065d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007482:	3318      	adds	r3, #24
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff f8a3 	bl	80065d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800748a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800748e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007492:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007498:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800749e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a2:	2200      	movs	r2, #0
 80074a4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	68f9      	ldr	r1, [r7, #12]
 80074b2:	69b8      	ldr	r0, [r7, #24]
 80074b4:	f001 fa38 	bl	8008928 <pxPortInitialiseStack>
 80074b8:	4602      	mov	r2, r0
 80074ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80074be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d002      	beq.n	80074ca <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074ca:	bf00      	nop
 80074cc:	3720      	adds	r7, #32
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
	...

080074d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074dc:	f001 fb54 	bl	8008b88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074e0:	4b2d      	ldr	r3, [pc, #180]	@ (8007598 <prvAddNewTaskToReadyList+0xc4>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3301      	adds	r3, #1
 80074e6:	4a2c      	ldr	r2, [pc, #176]	@ (8007598 <prvAddNewTaskToReadyList+0xc4>)
 80074e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074ea:	4b2c      	ldr	r3, [pc, #176]	@ (800759c <prvAddNewTaskToReadyList+0xc8>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d109      	bne.n	8007506 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074f2:	4a2a      	ldr	r2, [pc, #168]	@ (800759c <prvAddNewTaskToReadyList+0xc8>)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074f8:	4b27      	ldr	r3, [pc, #156]	@ (8007598 <prvAddNewTaskToReadyList+0xc4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d110      	bne.n	8007522 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007500:	f000 fd18 	bl	8007f34 <prvInitialiseTaskLists>
 8007504:	e00d      	b.n	8007522 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007506:	4b26      	ldr	r3, [pc, #152]	@ (80075a0 <prvAddNewTaskToReadyList+0xcc>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d109      	bne.n	8007522 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800750e:	4b23      	ldr	r3, [pc, #140]	@ (800759c <prvAddNewTaskToReadyList+0xc8>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007518:	429a      	cmp	r2, r3
 800751a:	d802      	bhi.n	8007522 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800751c:	4a1f      	ldr	r2, [pc, #124]	@ (800759c <prvAddNewTaskToReadyList+0xc8>)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007522:	4b20      	ldr	r3, [pc, #128]	@ (80075a4 <prvAddNewTaskToReadyList+0xd0>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3301      	adds	r3, #1
 8007528:	4a1e      	ldr	r2, [pc, #120]	@ (80075a4 <prvAddNewTaskToReadyList+0xd0>)
 800752a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800752c:	4b1d      	ldr	r3, [pc, #116]	@ (80075a4 <prvAddNewTaskToReadyList+0xd0>)
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007538:	4b1b      	ldr	r3, [pc, #108]	@ (80075a8 <prvAddNewTaskToReadyList+0xd4>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	429a      	cmp	r2, r3
 800753e:	d903      	bls.n	8007548 <prvAddNewTaskToReadyList+0x74>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007544:	4a18      	ldr	r2, [pc, #96]	@ (80075a8 <prvAddNewTaskToReadyList+0xd4>)
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800754c:	4613      	mov	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4a15      	ldr	r2, [pc, #84]	@ (80075ac <prvAddNewTaskToReadyList+0xd8>)
 8007556:	441a      	add	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	3304      	adds	r3, #4
 800755c:	4619      	mov	r1, r3
 800755e:	4610      	mov	r0, r2
 8007560:	f7ff f843 	bl	80065ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007564:	f001 fb42 	bl	8008bec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007568:	4b0d      	ldr	r3, [pc, #52]	@ (80075a0 <prvAddNewTaskToReadyList+0xcc>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00e      	beq.n	800758e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007570:	4b0a      	ldr	r3, [pc, #40]	@ (800759c <prvAddNewTaskToReadyList+0xc8>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800757a:	429a      	cmp	r2, r3
 800757c:	d207      	bcs.n	800758e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800757e:	4b0c      	ldr	r3, [pc, #48]	@ (80075b0 <prvAddNewTaskToReadyList+0xdc>)
 8007580:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800758e:	bf00      	nop
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	200010dc 	.word	0x200010dc
 800759c:	20000c08 	.word	0x20000c08
 80075a0:	200010e8 	.word	0x200010e8
 80075a4:	200010f8 	.word	0x200010f8
 80075a8:	200010e4 	.word	0x200010e4
 80075ac:	20000c0c 	.word	0x20000c0c
 80075b0:	e000ed04 	.word	0xe000ed04

080075b4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b08a      	sub	sp, #40	@ 0x28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80075be:	2300      	movs	r3, #0
 80075c0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10b      	bne.n	80075e0 <vTaskDelayUntil+0x2c>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	617b      	str	r3, [r7, #20]
}
 80075da:	bf00      	nop
 80075dc:	bf00      	nop
 80075de:	e7fd      	b.n	80075dc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10b      	bne.n	80075fe <vTaskDelayUntil+0x4a>
	__asm volatile
 80075e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	613b      	str	r3, [r7, #16]
}
 80075f8:	bf00      	nop
 80075fa:	bf00      	nop
 80075fc:	e7fd      	b.n	80075fa <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80075fe:	4b2a      	ldr	r3, [pc, #168]	@ (80076a8 <vTaskDelayUntil+0xf4>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00b      	beq.n	800761e <vTaskDelayUntil+0x6a>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	60fb      	str	r3, [r7, #12]
}
 8007618:	bf00      	nop
 800761a:	bf00      	nop
 800761c:	e7fd      	b.n	800761a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800761e:	f000 f94f 	bl	80078c0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007622:	4b22      	ldr	r3, [pc, #136]	@ (80076ac <vTaskDelayUntil+0xf8>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	4413      	add	r3, r2
 8007630:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6a3a      	ldr	r2, [r7, #32]
 8007638:	429a      	cmp	r2, r3
 800763a:	d20b      	bcs.n	8007654 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	69fa      	ldr	r2, [r7, #28]
 8007642:	429a      	cmp	r2, r3
 8007644:	d211      	bcs.n	800766a <vTaskDelayUntil+0xb6>
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	429a      	cmp	r2, r3
 800764c:	d90d      	bls.n	800766a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800764e:	2301      	movs	r3, #1
 8007650:	627b      	str	r3, [r7, #36]	@ 0x24
 8007652:	e00a      	b.n	800766a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	69fa      	ldr	r2, [r7, #28]
 800765a:	429a      	cmp	r2, r3
 800765c:	d303      	bcc.n	8007666 <vTaskDelayUntil+0xb2>
 800765e:	69fa      	ldr	r2, [r7, #28]
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	429a      	cmp	r2, r3
 8007664:	d901      	bls.n	800766a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007666:	2301      	movs	r3, #1
 8007668:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	69fa      	ldr	r2, [r7, #28]
 800766e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007672:	2b00      	cmp	r3, #0
 8007674:	d006      	beq.n	8007684 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007676:	69fa      	ldr	r2, [r7, #28]
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	2100      	movs	r1, #0
 800767e:	4618      	mov	r0, r3
 8007680:	f000 fda4 	bl	80081cc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007684:	f000 f92a 	bl	80078dc <xTaskResumeAll>
 8007688:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d107      	bne.n	80076a0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007690:	4b07      	ldr	r3, [pc, #28]	@ (80076b0 <vTaskDelayUntil+0xfc>)
 8007692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076a0:	bf00      	nop
 80076a2:	3728      	adds	r7, #40	@ 0x28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20001104 	.word	0x20001104
 80076ac:	200010e0 	.word	0x200010e0
 80076b0:	e000ed04 	.word	0xe000ed04

080076b4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80076be:	2300      	movs	r3, #0
 80076c0:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b37      	cmp	r3, #55	@ 0x37
 80076c6:	d90b      	bls.n	80076e0 <vTaskPrioritySet+0x2c>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	60fb      	str	r3, [r7, #12]
}
 80076da:	bf00      	nop
 80076dc:	bf00      	nop
 80076de:	e7fd      	b.n	80076dc <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2b37      	cmp	r3, #55	@ 0x37
 80076e4:	d901      	bls.n	80076ea <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076e6:	2337      	movs	r3, #55	@ 0x37
 80076e8:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80076ea:	f001 fa4d 	bl	8008b88 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d102      	bne.n	80076fa <vTaskPrioritySet+0x46>
 80076f4:	4b3a      	ldr	r3, [pc, #232]	@ (80077e0 <vTaskPrioritySet+0x12c>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	e000      	b.n	80076fc <vTaskPrioritySet+0x48>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007702:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	429a      	cmp	r2, r3
 800770a:	d063      	beq.n	80077d4 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	429a      	cmp	r2, r3
 8007712:	d90d      	bls.n	8007730 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 8007714:	4b32      	ldr	r3, [pc, #200]	@ (80077e0 <vTaskPrioritySet+0x12c>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	429a      	cmp	r2, r3
 800771c:	d00f      	beq.n	800773e <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800771e:	4b30      	ldr	r3, [pc, #192]	@ (80077e0 <vTaskPrioritySet+0x12c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	429a      	cmp	r2, r3
 8007728:	d309      	bcc.n	800773e <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800772a:	2301      	movs	r3, #1
 800772c:	61fb      	str	r3, [r7, #28]
 800772e:	e006      	b.n	800773e <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8007730:	4b2b      	ldr	r3, [pc, #172]	@ (80077e0 <vTaskPrioritySet+0x12c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	429a      	cmp	r2, r3
 8007738:	d101      	bne.n	800773e <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800773a:	2301      	movs	r3, #1
 800773c:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007742:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774c:	429a      	cmp	r2, r3
 800774e:	d102      	bne.n	8007756 <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	683a      	ldr	r2, [r7, #0]
 800775a:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	2b00      	cmp	r3, #0
 8007762:	db04      	blt.n	800776e <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	6959      	ldr	r1, [r3, #20]
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	4613      	mov	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4a19      	ldr	r2, [pc, #100]	@ (80077e4 <vTaskPrioritySet+0x130>)
 800777e:	4413      	add	r3, r2
 8007780:	4299      	cmp	r1, r3
 8007782:	d11c      	bne.n	80077be <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	3304      	adds	r3, #4
 8007788:	4618      	mov	r0, r3
 800778a:	f7fe ff8b 	bl	80066a4 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007792:	4b15      	ldr	r3, [pc, #84]	@ (80077e8 <vTaskPrioritySet+0x134>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	429a      	cmp	r2, r3
 8007798:	d903      	bls.n	80077a2 <vTaskPrioritySet+0xee>
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779e:	4a12      	ldr	r2, [pc, #72]	@ (80077e8 <vTaskPrioritySet+0x134>)
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077a6:	4613      	mov	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4a0d      	ldr	r2, [pc, #52]	@ (80077e4 <vTaskPrioritySet+0x130>)
 80077b0:	441a      	add	r2, r3
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	3304      	adds	r3, #4
 80077b6:	4619      	mov	r1, r3
 80077b8:	4610      	mov	r0, r2
 80077ba:	f7fe ff16 	bl	80065ea <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d007      	beq.n	80077d4 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 80077c4:	4b09      	ldr	r3, [pc, #36]	@ (80077ec <vTaskPrioritySet+0x138>)
 80077c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80077d4:	f001 fa0a 	bl	8008bec <vPortExitCritical>
	}
 80077d8:	bf00      	nop
 80077da:	3720      	adds	r7, #32
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	20000c08 	.word	0x20000c08
 80077e4:	20000c0c 	.word	0x20000c0c
 80077e8:	200010e4 	.word	0x200010e4
 80077ec:	e000ed04 	.word	0xe000ed04

080077f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08a      	sub	sp, #40	@ 0x28
 80077f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077fe:	463a      	mov	r2, r7
 8007800:	1d39      	adds	r1, r7, #4
 8007802:	f107 0308 	add.w	r3, r7, #8
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe fe8e 	bl	8006528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68ba      	ldr	r2, [r7, #8]
 8007812:	9202      	str	r2, [sp, #8]
 8007814:	9301      	str	r3, [sp, #4]
 8007816:	2300      	movs	r3, #0
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	2300      	movs	r3, #0
 800781c:	460a      	mov	r2, r1
 800781e:	4922      	ldr	r1, [pc, #136]	@ (80078a8 <vTaskStartScheduler+0xb8>)
 8007820:	4822      	ldr	r0, [pc, #136]	@ (80078ac <vTaskStartScheduler+0xbc>)
 8007822:	f7ff fd21 	bl	8007268 <xTaskCreateStatic>
 8007826:	4603      	mov	r3, r0
 8007828:	4a21      	ldr	r2, [pc, #132]	@ (80078b0 <vTaskStartScheduler+0xc0>)
 800782a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800782c:	4b20      	ldr	r3, [pc, #128]	@ (80078b0 <vTaskStartScheduler+0xc0>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007834:	2301      	movs	r3, #1
 8007836:	617b      	str	r3, [r7, #20]
 8007838:	e001      	b.n	800783e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800783a:	2300      	movs	r3, #0
 800783c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d102      	bne.n	800784a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007844:	f000 fd16 	bl	8008274 <xTimerCreateTimerTask>
 8007848:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d116      	bne.n	800787e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	613b      	str	r3, [r7, #16]
}
 8007862:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007864:	4b13      	ldr	r3, [pc, #76]	@ (80078b4 <vTaskStartScheduler+0xc4>)
 8007866:	f04f 32ff 	mov.w	r2, #4294967295
 800786a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800786c:	4b12      	ldr	r3, [pc, #72]	@ (80078b8 <vTaskStartScheduler+0xc8>)
 800786e:	2201      	movs	r2, #1
 8007870:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007872:	4b12      	ldr	r3, [pc, #72]	@ (80078bc <vTaskStartScheduler+0xcc>)
 8007874:	2200      	movs	r2, #0
 8007876:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007878:	f001 f8e2 	bl	8008a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800787c:	e00f      	b.n	800789e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007884:	d10b      	bne.n	800789e <vTaskStartScheduler+0xae>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	60fb      	str	r3, [r7, #12]
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	e7fd      	b.n	800789a <vTaskStartScheduler+0xaa>
}
 800789e:	bf00      	nop
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	0800c598 	.word	0x0800c598
 80078ac:	08007f05 	.word	0x08007f05
 80078b0:	20001100 	.word	0x20001100
 80078b4:	200010fc 	.word	0x200010fc
 80078b8:	200010e8 	.word	0x200010e8
 80078bc:	200010e0 	.word	0x200010e0

080078c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078c0:	b480      	push	{r7}
 80078c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078c4:	4b04      	ldr	r3, [pc, #16]	@ (80078d8 <vTaskSuspendAll+0x18>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3301      	adds	r3, #1
 80078ca:	4a03      	ldr	r2, [pc, #12]	@ (80078d8 <vTaskSuspendAll+0x18>)
 80078cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078ce:	bf00      	nop
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	20001104 	.word	0x20001104

080078dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078e6:	2300      	movs	r3, #0
 80078e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078ea:	4b42      	ldr	r3, [pc, #264]	@ (80079f4 <xTaskResumeAll+0x118>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10b      	bne.n	800790a <xTaskResumeAll+0x2e>
	__asm volatile
 80078f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	603b      	str	r3, [r7, #0]
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop
 8007908:	e7fd      	b.n	8007906 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800790a:	f001 f93d 	bl	8008b88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800790e:	4b39      	ldr	r3, [pc, #228]	@ (80079f4 <xTaskResumeAll+0x118>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3b01      	subs	r3, #1
 8007914:	4a37      	ldr	r2, [pc, #220]	@ (80079f4 <xTaskResumeAll+0x118>)
 8007916:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007918:	4b36      	ldr	r3, [pc, #216]	@ (80079f4 <xTaskResumeAll+0x118>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d162      	bne.n	80079e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007920:	4b35      	ldr	r3, [pc, #212]	@ (80079f8 <xTaskResumeAll+0x11c>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d05e      	beq.n	80079e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007928:	e02f      	b.n	800798a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800792a:	4b34      	ldr	r3, [pc, #208]	@ (80079fc <xTaskResumeAll+0x120>)
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	3318      	adds	r3, #24
 8007936:	4618      	mov	r0, r3
 8007938:	f7fe feb4 	bl	80066a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3304      	adds	r3, #4
 8007940:	4618      	mov	r0, r3
 8007942:	f7fe feaf 	bl	80066a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800794a:	4b2d      	ldr	r3, [pc, #180]	@ (8007a00 <xTaskResumeAll+0x124>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d903      	bls.n	800795a <xTaskResumeAll+0x7e>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007956:	4a2a      	ldr	r2, [pc, #168]	@ (8007a00 <xTaskResumeAll+0x124>)
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800795e:	4613      	mov	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4a27      	ldr	r2, [pc, #156]	@ (8007a04 <xTaskResumeAll+0x128>)
 8007968:	441a      	add	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3304      	adds	r3, #4
 800796e:	4619      	mov	r1, r3
 8007970:	4610      	mov	r0, r2
 8007972:	f7fe fe3a 	bl	80065ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800797a:	4b23      	ldr	r3, [pc, #140]	@ (8007a08 <xTaskResumeAll+0x12c>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007980:	429a      	cmp	r2, r3
 8007982:	d302      	bcc.n	800798a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007984:	4b21      	ldr	r3, [pc, #132]	@ (8007a0c <xTaskResumeAll+0x130>)
 8007986:	2201      	movs	r2, #1
 8007988:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800798a:	4b1c      	ldr	r3, [pc, #112]	@ (80079fc <xTaskResumeAll+0x120>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1cb      	bne.n	800792a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007998:	f000 fb6a 	bl	8008070 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800799c:	4b1c      	ldr	r3, [pc, #112]	@ (8007a10 <xTaskResumeAll+0x134>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d010      	beq.n	80079ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079a8:	f000 f858 	bl	8007a5c <xTaskIncrementTick>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80079b2:	4b16      	ldr	r3, [pc, #88]	@ (8007a0c <xTaskResumeAll+0x130>)
 80079b4:	2201      	movs	r2, #1
 80079b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1f1      	bne.n	80079a8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80079c4:	4b12      	ldr	r3, [pc, #72]	@ (8007a10 <xTaskResumeAll+0x134>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079ca:	4b10      	ldr	r3, [pc, #64]	@ (8007a0c <xTaskResumeAll+0x130>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d009      	beq.n	80079e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079d2:	2301      	movs	r3, #1
 80079d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007a14 <xTaskResumeAll+0x138>)
 80079d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079e6:	f001 f901 	bl	8008bec <vPortExitCritical>

	return xAlreadyYielded;
 80079ea:	68bb      	ldr	r3, [r7, #8]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	20001104 	.word	0x20001104
 80079f8:	200010dc 	.word	0x200010dc
 80079fc:	2000109c 	.word	0x2000109c
 8007a00:	200010e4 	.word	0x200010e4
 8007a04:	20000c0c 	.word	0x20000c0c
 8007a08:	20000c08 	.word	0x20000c08
 8007a0c:	200010f0 	.word	0x200010f0
 8007a10:	200010ec 	.word	0x200010ec
 8007a14:	e000ed04 	.word	0xe000ed04

08007a18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a1e:	4b05      	ldr	r3, [pc, #20]	@ (8007a34 <xTaskGetTickCount+0x1c>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a24:	687b      	ldr	r3, [r7, #4]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	200010e0 	.word	0x200010e0

08007a38 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a3e:	f001 f983 	bl	8008d48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007a42:	2300      	movs	r3, #0
 8007a44:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007a46:	4b04      	ldr	r3, [pc, #16]	@ (8007a58 <xTaskGetTickCountFromISR+0x20>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a4c:	683b      	ldr	r3, [r7, #0]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	200010e0 	.word	0x200010e0

08007a5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a62:	2300      	movs	r3, #0
 8007a64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a66:	4b4f      	ldr	r3, [pc, #316]	@ (8007ba4 <xTaskIncrementTick+0x148>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f040 8090 	bne.w	8007b90 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a70:	4b4d      	ldr	r3, [pc, #308]	@ (8007ba8 <xTaskIncrementTick+0x14c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3301      	adds	r3, #1
 8007a76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a78:	4a4b      	ldr	r2, [pc, #300]	@ (8007ba8 <xTaskIncrementTick+0x14c>)
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d121      	bne.n	8007ac8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a84:	4b49      	ldr	r3, [pc, #292]	@ (8007bac <xTaskIncrementTick+0x150>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00b      	beq.n	8007aa6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	603b      	str	r3, [r7, #0]
}
 8007aa0:	bf00      	nop
 8007aa2:	bf00      	nop
 8007aa4:	e7fd      	b.n	8007aa2 <xTaskIncrementTick+0x46>
 8007aa6:	4b41      	ldr	r3, [pc, #260]	@ (8007bac <xTaskIncrementTick+0x150>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	4b40      	ldr	r3, [pc, #256]	@ (8007bb0 <xTaskIncrementTick+0x154>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a3e      	ldr	r2, [pc, #248]	@ (8007bac <xTaskIncrementTick+0x150>)
 8007ab2:	6013      	str	r3, [r2, #0]
 8007ab4:	4a3e      	ldr	r2, [pc, #248]	@ (8007bb0 <xTaskIncrementTick+0x154>)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6013      	str	r3, [r2, #0]
 8007aba:	4b3e      	ldr	r3, [pc, #248]	@ (8007bb4 <xTaskIncrementTick+0x158>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	4a3c      	ldr	r2, [pc, #240]	@ (8007bb4 <xTaskIncrementTick+0x158>)
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	f000 fad4 	bl	8008070 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8007bb8 <xTaskIncrementTick+0x15c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d349      	bcc.n	8007b66 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ad2:	4b36      	ldr	r3, [pc, #216]	@ (8007bac <xTaskIncrementTick+0x150>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d104      	bne.n	8007ae6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007adc:	4b36      	ldr	r3, [pc, #216]	@ (8007bb8 <xTaskIncrementTick+0x15c>)
 8007ade:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae2:	601a      	str	r2, [r3, #0]
					break;
 8007ae4:	e03f      	b.n	8007b66 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ae6:	4b31      	ldr	r3, [pc, #196]	@ (8007bac <xTaskIncrementTick+0x150>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d203      	bcs.n	8007b06 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007afe:	4a2e      	ldr	r2, [pc, #184]	@ (8007bb8 <xTaskIncrementTick+0x15c>)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b04:	e02f      	b.n	8007b66 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	3304      	adds	r3, #4
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe fdca 	bl	80066a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d004      	beq.n	8007b22 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	3318      	adds	r3, #24
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fe fdc1 	bl	80066a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b26:	4b25      	ldr	r3, [pc, #148]	@ (8007bbc <xTaskIncrementTick+0x160>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d903      	bls.n	8007b36 <xTaskIncrementTick+0xda>
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b32:	4a22      	ldr	r2, [pc, #136]	@ (8007bbc <xTaskIncrementTick+0x160>)
 8007b34:	6013      	str	r3, [r2, #0]
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4a1f      	ldr	r2, [pc, #124]	@ (8007bc0 <xTaskIncrementTick+0x164>)
 8007b44:	441a      	add	r2, r3
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	3304      	adds	r3, #4
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	f7fe fd4c 	bl	80065ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b56:	4b1b      	ldr	r3, [pc, #108]	@ (8007bc4 <xTaskIncrementTick+0x168>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d3b8      	bcc.n	8007ad2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007b60:	2301      	movs	r3, #1
 8007b62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b64:	e7b5      	b.n	8007ad2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b66:	4b17      	ldr	r3, [pc, #92]	@ (8007bc4 <xTaskIncrementTick+0x168>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b6c:	4914      	ldr	r1, [pc, #80]	@ (8007bc0 <xTaskIncrementTick+0x164>)
 8007b6e:	4613      	mov	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4413      	add	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	440b      	add	r3, r1
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d901      	bls.n	8007b82 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b82:	4b11      	ldr	r3, [pc, #68]	@ (8007bc8 <xTaskIncrementTick+0x16c>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d007      	beq.n	8007b9a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	617b      	str	r3, [r7, #20]
 8007b8e:	e004      	b.n	8007b9a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b90:	4b0e      	ldr	r3, [pc, #56]	@ (8007bcc <xTaskIncrementTick+0x170>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3301      	adds	r3, #1
 8007b96:	4a0d      	ldr	r2, [pc, #52]	@ (8007bcc <xTaskIncrementTick+0x170>)
 8007b98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b9a:	697b      	ldr	r3, [r7, #20]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3718      	adds	r7, #24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	20001104 	.word	0x20001104
 8007ba8:	200010e0 	.word	0x200010e0
 8007bac:	20001094 	.word	0x20001094
 8007bb0:	20001098 	.word	0x20001098
 8007bb4:	200010f4 	.word	0x200010f4
 8007bb8:	200010fc 	.word	0x200010fc
 8007bbc:	200010e4 	.word	0x200010e4
 8007bc0:	20000c0c 	.word	0x20000c0c
 8007bc4:	20000c08 	.word	0x20000c08
 8007bc8:	200010f0 	.word	0x200010f0
 8007bcc:	200010ec 	.word	0x200010ec

08007bd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bd6:	4b28      	ldr	r3, [pc, #160]	@ (8007c78 <vTaskSwitchContext+0xa8>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bde:	4b27      	ldr	r3, [pc, #156]	@ (8007c7c <vTaskSwitchContext+0xac>)
 8007be0:	2201      	movs	r2, #1
 8007be2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007be4:	e042      	b.n	8007c6c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007be6:	4b25      	ldr	r3, [pc, #148]	@ (8007c7c <vTaskSwitchContext+0xac>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bec:	4b24      	ldr	r3, [pc, #144]	@ (8007c80 <vTaskSwitchContext+0xb0>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	60fb      	str	r3, [r7, #12]
 8007bf2:	e011      	b.n	8007c18 <vTaskSwitchContext+0x48>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10b      	bne.n	8007c12 <vTaskSwitchContext+0x42>
	__asm volatile
 8007bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	607b      	str	r3, [r7, #4]
}
 8007c0c:	bf00      	nop
 8007c0e:	bf00      	nop
 8007c10:	e7fd      	b.n	8007c0e <vTaskSwitchContext+0x3e>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	3b01      	subs	r3, #1
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	491a      	ldr	r1, [pc, #104]	@ (8007c84 <vTaskSwitchContext+0xb4>)
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	440b      	add	r3, r1
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d0e3      	beq.n	8007bf4 <vTaskSwitchContext+0x24>
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4a13      	ldr	r2, [pc, #76]	@ (8007c84 <vTaskSwitchContext+0xb4>)
 8007c38:	4413      	add	r3, r2
 8007c3a:	60bb      	str	r3, [r7, #8]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	605a      	str	r2, [r3, #4]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d104      	bne.n	8007c5c <vTaskSwitchContext+0x8c>
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	605a      	str	r2, [r3, #4]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	4a09      	ldr	r2, [pc, #36]	@ (8007c88 <vTaskSwitchContext+0xb8>)
 8007c64:	6013      	str	r3, [r2, #0]
 8007c66:	4a06      	ldr	r2, [pc, #24]	@ (8007c80 <vTaskSwitchContext+0xb0>)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6013      	str	r3, [r2, #0]
}
 8007c6c:	bf00      	nop
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	20001104 	.word	0x20001104
 8007c7c:	200010f0 	.word	0x200010f0
 8007c80:	200010e4 	.word	0x200010e4
 8007c84:	20000c0c 	.word	0x20000c0c
 8007c88:	20000c08 	.word	0x20000c08

08007c8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10b      	bne.n	8007cb4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	60fb      	str	r3, [r7, #12]
}
 8007cae:	bf00      	nop
 8007cb0:	bf00      	nop
 8007cb2:	e7fd      	b.n	8007cb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cb4:	4b07      	ldr	r3, [pc, #28]	@ (8007cd4 <vTaskPlaceOnEventList+0x48>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3318      	adds	r3, #24
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7fe fcb8 	bl	8006632 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	6838      	ldr	r0, [r7, #0]
 8007cc6:	f000 fa81 	bl	80081cc <prvAddCurrentTaskToDelayedList>
}
 8007cca:	bf00      	nop
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	20000c08 	.word	0x20000c08

08007cd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10b      	bne.n	8007d02 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	617b      	str	r3, [r7, #20]
}
 8007cfc:	bf00      	nop
 8007cfe:	bf00      	nop
 8007d00:	e7fd      	b.n	8007cfe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d02:	4b0a      	ldr	r3, [pc, #40]	@ (8007d2c <vTaskPlaceOnEventListRestricted+0x54>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3318      	adds	r3, #24
 8007d08:	4619      	mov	r1, r3
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f7fe fc6d 	bl	80065ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d002      	beq.n	8007d1c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007d16:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d1c:	6879      	ldr	r1, [r7, #4]
 8007d1e:	68b8      	ldr	r0, [r7, #8]
 8007d20:	f000 fa54 	bl	80081cc <prvAddCurrentTaskToDelayedList>
	}
 8007d24:	bf00      	nop
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	20000c08 	.word	0x20000c08

08007d30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10b      	bne.n	8007d5e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	60fb      	str	r3, [r7, #12]
}
 8007d58:	bf00      	nop
 8007d5a:	bf00      	nop
 8007d5c:	e7fd      	b.n	8007d5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	3318      	adds	r3, #24
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fe fc9e 	bl	80066a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d68:	4b1d      	ldr	r3, [pc, #116]	@ (8007de0 <xTaskRemoveFromEventList+0xb0>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d11d      	bne.n	8007dac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fe fc95 	bl	80066a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d7e:	4b19      	ldr	r3, [pc, #100]	@ (8007de4 <xTaskRemoveFromEventList+0xb4>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d903      	bls.n	8007d8e <xTaskRemoveFromEventList+0x5e>
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8a:	4a16      	ldr	r2, [pc, #88]	@ (8007de4 <xTaskRemoveFromEventList+0xb4>)
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d92:	4613      	mov	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4a13      	ldr	r2, [pc, #76]	@ (8007de8 <xTaskRemoveFromEventList+0xb8>)
 8007d9c:	441a      	add	r2, r3
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	3304      	adds	r3, #4
 8007da2:	4619      	mov	r1, r3
 8007da4:	4610      	mov	r0, r2
 8007da6:	f7fe fc20 	bl	80065ea <vListInsertEnd>
 8007daa:	e005      	b.n	8007db8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	3318      	adds	r3, #24
 8007db0:	4619      	mov	r1, r3
 8007db2:	480e      	ldr	r0, [pc, #56]	@ (8007dec <xTaskRemoveFromEventList+0xbc>)
 8007db4:	f7fe fc19 	bl	80065ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8007df0 <xTaskRemoveFromEventList+0xc0>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d905      	bls.n	8007dd2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007dca:	4b0a      	ldr	r3, [pc, #40]	@ (8007df4 <xTaskRemoveFromEventList+0xc4>)
 8007dcc:	2201      	movs	r2, #1
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	e001      	b.n	8007dd6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007dd6:	697b      	ldr	r3, [r7, #20]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	20001104 	.word	0x20001104
 8007de4:	200010e4 	.word	0x200010e4
 8007de8:	20000c0c 	.word	0x20000c0c
 8007dec:	2000109c 	.word	0x2000109c
 8007df0:	20000c08 	.word	0x20000c08
 8007df4:	200010f0 	.word	0x200010f0

08007df8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e00:	4b06      	ldr	r3, [pc, #24]	@ (8007e1c <vTaskInternalSetTimeOutState+0x24>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e08:	4b05      	ldr	r3, [pc, #20]	@ (8007e20 <vTaskInternalSetTimeOutState+0x28>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	605a      	str	r2, [r3, #4]
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	200010f4 	.word	0x200010f4
 8007e20:	200010e0 	.word	0x200010e0

08007e24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10b      	bne.n	8007e4c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	613b      	str	r3, [r7, #16]
}
 8007e46:	bf00      	nop
 8007e48:	bf00      	nop
 8007e4a:	e7fd      	b.n	8007e48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10b      	bne.n	8007e6a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	60fb      	str	r3, [r7, #12]
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	e7fd      	b.n	8007e66 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007e6a:	f000 fe8d 	bl	8008b88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ee4 <xTaskCheckForTimeOut+0xc0>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e86:	d102      	bne.n	8007e8e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	61fb      	str	r3, [r7, #28]
 8007e8c:	e023      	b.n	8007ed6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	4b15      	ldr	r3, [pc, #84]	@ (8007ee8 <xTaskCheckForTimeOut+0xc4>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d007      	beq.n	8007eaa <xTaskCheckForTimeOut+0x86>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d302      	bcc.n	8007eaa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	61fb      	str	r3, [r7, #28]
 8007ea8:	e015      	b.n	8007ed6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d20b      	bcs.n	8007ecc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	1ad2      	subs	r2, r2, r3
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7ff ff99 	bl	8007df8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	61fb      	str	r3, [r7, #28]
 8007eca:	e004      	b.n	8007ed6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ed6:	f000 fe89 	bl	8008bec <vPortExitCritical>

	return xReturn;
 8007eda:	69fb      	ldr	r3, [r7, #28]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3720      	adds	r7, #32
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	200010e0 	.word	0x200010e0
 8007ee8:	200010f4 	.word	0x200010f4

08007eec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007eec:	b480      	push	{r7}
 8007eee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ef0:	4b03      	ldr	r3, [pc, #12]	@ (8007f00 <vTaskMissedYield+0x14>)
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]
}
 8007ef6:	bf00      	nop
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	200010f0 	.word	0x200010f0

08007f04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f0c:	f000 f852 	bl	8007fb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f10:	4b06      	ldr	r3, [pc, #24]	@ (8007f2c <prvIdleTask+0x28>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d9f9      	bls.n	8007f0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f18:	4b05      	ldr	r3, [pc, #20]	@ (8007f30 <prvIdleTask+0x2c>)
 8007f1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f1e:	601a      	str	r2, [r3, #0]
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f28:	e7f0      	b.n	8007f0c <prvIdleTask+0x8>
 8007f2a:	bf00      	nop
 8007f2c:	20000c0c 	.word	0x20000c0c
 8007f30:	e000ed04 	.word	0xe000ed04

08007f34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	607b      	str	r3, [r7, #4]
 8007f3e:	e00c      	b.n	8007f5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4a12      	ldr	r2, [pc, #72]	@ (8007f94 <prvInitialiseTaskLists+0x60>)
 8007f4c:	4413      	add	r3, r2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe fb1e 	bl	8006590 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3301      	adds	r3, #1
 8007f58:	607b      	str	r3, [r7, #4]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2b37      	cmp	r3, #55	@ 0x37
 8007f5e:	d9ef      	bls.n	8007f40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f60:	480d      	ldr	r0, [pc, #52]	@ (8007f98 <prvInitialiseTaskLists+0x64>)
 8007f62:	f7fe fb15 	bl	8006590 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f66:	480d      	ldr	r0, [pc, #52]	@ (8007f9c <prvInitialiseTaskLists+0x68>)
 8007f68:	f7fe fb12 	bl	8006590 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f6c:	480c      	ldr	r0, [pc, #48]	@ (8007fa0 <prvInitialiseTaskLists+0x6c>)
 8007f6e:	f7fe fb0f 	bl	8006590 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f72:	480c      	ldr	r0, [pc, #48]	@ (8007fa4 <prvInitialiseTaskLists+0x70>)
 8007f74:	f7fe fb0c 	bl	8006590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f78:	480b      	ldr	r0, [pc, #44]	@ (8007fa8 <prvInitialiseTaskLists+0x74>)
 8007f7a:	f7fe fb09 	bl	8006590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8007fac <prvInitialiseTaskLists+0x78>)
 8007f80:	4a05      	ldr	r2, [pc, #20]	@ (8007f98 <prvInitialiseTaskLists+0x64>)
 8007f82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f84:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb0 <prvInitialiseTaskLists+0x7c>)
 8007f86:	4a05      	ldr	r2, [pc, #20]	@ (8007f9c <prvInitialiseTaskLists+0x68>)
 8007f88:	601a      	str	r2, [r3, #0]
}
 8007f8a:	bf00      	nop
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20000c0c 	.word	0x20000c0c
 8007f98:	2000106c 	.word	0x2000106c
 8007f9c:	20001080 	.word	0x20001080
 8007fa0:	2000109c 	.word	0x2000109c
 8007fa4:	200010b0 	.word	0x200010b0
 8007fa8:	200010c8 	.word	0x200010c8
 8007fac:	20001094 	.word	0x20001094
 8007fb0:	20001098 	.word	0x20001098

08007fb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fba:	e019      	b.n	8007ff0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fbc:	f000 fde4 	bl	8008b88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fc0:	4b10      	ldr	r3, [pc, #64]	@ (8008004 <prvCheckTasksWaitingTermination+0x50>)
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	3304      	adds	r3, #4
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fe fb69 	bl	80066a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008008 <prvCheckTasksWaitingTermination+0x54>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8008008 <prvCheckTasksWaitingTermination+0x54>)
 8007fda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800800c <prvCheckTasksWaitingTermination+0x58>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800800c <prvCheckTasksWaitingTermination+0x58>)
 8007fe4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fe6:	f000 fe01 	bl	8008bec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f810 	bl	8008010 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ff0:	4b06      	ldr	r3, [pc, #24]	@ (800800c <prvCheckTasksWaitingTermination+0x58>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1e1      	bne.n	8007fbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ff8:	bf00      	nop
 8007ffa:	bf00      	nop
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	200010b0 	.word	0x200010b0
 8008008:	200010dc 	.word	0x200010dc
 800800c:	200010c4 	.word	0x200010c4

08008010 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800801e:	2b00      	cmp	r3, #0
 8008020:	d108      	bne.n	8008034 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008026:	4618      	mov	r0, r3
 8008028:	f000 ff9e 	bl	8008f68 <vPortFree>
				vPortFree( pxTCB );
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 ff9b 	bl	8008f68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008032:	e019      	b.n	8008068 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800803a:	2b01      	cmp	r3, #1
 800803c:	d103      	bne.n	8008046 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 ff92 	bl	8008f68 <vPortFree>
	}
 8008044:	e010      	b.n	8008068 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800804c:	2b02      	cmp	r3, #2
 800804e:	d00b      	beq.n	8008068 <prvDeleteTCB+0x58>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	60fb      	str	r3, [r7, #12]
}
 8008062:	bf00      	nop
 8008064:	bf00      	nop
 8008066:	e7fd      	b.n	8008064 <prvDeleteTCB+0x54>
	}
 8008068:	bf00      	nop
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008076:	4b0c      	ldr	r3, [pc, #48]	@ (80080a8 <prvResetNextTaskUnblockTime+0x38>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d104      	bne.n	800808a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008080:	4b0a      	ldr	r3, [pc, #40]	@ (80080ac <prvResetNextTaskUnblockTime+0x3c>)
 8008082:	f04f 32ff 	mov.w	r2, #4294967295
 8008086:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008088:	e008      	b.n	800809c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800808a:	4b07      	ldr	r3, [pc, #28]	@ (80080a8 <prvResetNextTaskUnblockTime+0x38>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	4a04      	ldr	r2, [pc, #16]	@ (80080ac <prvResetNextTaskUnblockTime+0x3c>)
 800809a:	6013      	str	r3, [r2, #0]
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	20001094 	.word	0x20001094
 80080ac:	200010fc 	.word	0x200010fc

080080b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080b6:	4b0b      	ldr	r3, [pc, #44]	@ (80080e4 <xTaskGetSchedulerState+0x34>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d102      	bne.n	80080c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080be:	2301      	movs	r3, #1
 80080c0:	607b      	str	r3, [r7, #4]
 80080c2:	e008      	b.n	80080d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080c4:	4b08      	ldr	r3, [pc, #32]	@ (80080e8 <xTaskGetSchedulerState+0x38>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d102      	bne.n	80080d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080cc:	2302      	movs	r3, #2
 80080ce:	607b      	str	r3, [r7, #4]
 80080d0:	e001      	b.n	80080d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080d2:	2300      	movs	r3, #0
 80080d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080d6:	687b      	ldr	r3, [r7, #4]
	}
 80080d8:	4618      	mov	r0, r3
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr
 80080e4:	200010e8 	.word	0x200010e8
 80080e8:	20001104 	.word	0x20001104

080080ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80080f8:	2300      	movs	r3, #0
 80080fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d058      	beq.n	80081b4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008102:	4b2f      	ldr	r3, [pc, #188]	@ (80081c0 <xTaskPriorityDisinherit+0xd4>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	429a      	cmp	r2, r3
 800810a:	d00b      	beq.n	8008124 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	60fb      	str	r3, [r7, #12]
}
 800811e:	bf00      	nop
 8008120:	bf00      	nop
 8008122:	e7fd      	b.n	8008120 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10b      	bne.n	8008144 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	60bb      	str	r3, [r7, #8]
}
 800813e:	bf00      	nop
 8008140:	bf00      	nop
 8008142:	e7fd      	b.n	8008140 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008148:	1e5a      	subs	r2, r3, #1
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008156:	429a      	cmp	r2, r3
 8008158:	d02c      	beq.n	80081b4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800815e:	2b00      	cmp	r3, #0
 8008160:	d128      	bne.n	80081b4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	3304      	adds	r3, #4
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fa9c 	bl	80066a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008178:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008184:	4b0f      	ldr	r3, [pc, #60]	@ (80081c4 <xTaskPriorityDisinherit+0xd8>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	429a      	cmp	r2, r3
 800818a:	d903      	bls.n	8008194 <xTaskPriorityDisinherit+0xa8>
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008190:	4a0c      	ldr	r2, [pc, #48]	@ (80081c4 <xTaskPriorityDisinherit+0xd8>)
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008198:	4613      	mov	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4a09      	ldr	r2, [pc, #36]	@ (80081c8 <xTaskPriorityDisinherit+0xdc>)
 80081a2:	441a      	add	r2, r3
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	3304      	adds	r3, #4
 80081a8:	4619      	mov	r1, r3
 80081aa:	4610      	mov	r0, r2
 80081ac:	f7fe fa1d 	bl	80065ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081b0:	2301      	movs	r3, #1
 80081b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081b4:	697b      	ldr	r3, [r7, #20]
	}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20000c08 	.word	0x20000c08
 80081c4:	200010e4 	.word	0x200010e4
 80081c8:	20000c0c 	.word	0x20000c0c

080081cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081d6:	4b21      	ldr	r3, [pc, #132]	@ (800825c <prvAddCurrentTaskToDelayedList+0x90>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081dc:	4b20      	ldr	r3, [pc, #128]	@ (8008260 <prvAddCurrentTaskToDelayedList+0x94>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3304      	adds	r3, #4
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fe fa5e 	bl	80066a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ee:	d10a      	bne.n	8008206 <prvAddCurrentTaskToDelayedList+0x3a>
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d007      	beq.n	8008206 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081f6:	4b1a      	ldr	r3, [pc, #104]	@ (8008260 <prvAddCurrentTaskToDelayedList+0x94>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3304      	adds	r3, #4
 80081fc:	4619      	mov	r1, r3
 80081fe:	4819      	ldr	r0, [pc, #100]	@ (8008264 <prvAddCurrentTaskToDelayedList+0x98>)
 8008200:	f7fe f9f3 	bl	80065ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008204:	e026      	b.n	8008254 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4413      	add	r3, r2
 800820c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800820e:	4b14      	ldr	r3, [pc, #80]	@ (8008260 <prvAddCurrentTaskToDelayedList+0x94>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	429a      	cmp	r2, r3
 800821c:	d209      	bcs.n	8008232 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800821e:	4b12      	ldr	r3, [pc, #72]	@ (8008268 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	4b0f      	ldr	r3, [pc, #60]	@ (8008260 <prvAddCurrentTaskToDelayedList+0x94>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3304      	adds	r3, #4
 8008228:	4619      	mov	r1, r3
 800822a:	4610      	mov	r0, r2
 800822c:	f7fe fa01 	bl	8006632 <vListInsert>
}
 8008230:	e010      	b.n	8008254 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008232:	4b0e      	ldr	r3, [pc, #56]	@ (800826c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	4b0a      	ldr	r3, [pc, #40]	@ (8008260 <prvAddCurrentTaskToDelayedList+0x94>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3304      	adds	r3, #4
 800823c:	4619      	mov	r1, r3
 800823e:	4610      	mov	r0, r2
 8008240:	f7fe f9f7 	bl	8006632 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008244:	4b0a      	ldr	r3, [pc, #40]	@ (8008270 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	429a      	cmp	r2, r3
 800824c:	d202      	bcs.n	8008254 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800824e:	4a08      	ldr	r2, [pc, #32]	@ (8008270 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	6013      	str	r3, [r2, #0]
}
 8008254:	bf00      	nop
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	200010e0 	.word	0x200010e0
 8008260:	20000c08 	.word	0x20000c08
 8008264:	200010c8 	.word	0x200010c8
 8008268:	20001098 	.word	0x20001098
 800826c:	20001094 	.word	0x20001094
 8008270:	200010fc 	.word	0x200010fc

08008274 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08a      	sub	sp, #40	@ 0x28
 8008278:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800827a:	2300      	movs	r3, #0
 800827c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800827e:	f000 fb13 	bl	80088a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008282:	4b1d      	ldr	r3, [pc, #116]	@ (80082f8 <xTimerCreateTimerTask+0x84>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d021      	beq.n	80082ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800828e:	2300      	movs	r3, #0
 8008290:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008292:	1d3a      	adds	r2, r7, #4
 8008294:	f107 0108 	add.w	r1, r7, #8
 8008298:	f107 030c 	add.w	r3, r7, #12
 800829c:	4618      	mov	r0, r3
 800829e:	f7fe f95d 	bl	800655c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	9202      	str	r2, [sp, #8]
 80082aa:	9301      	str	r3, [sp, #4]
 80082ac:	2302      	movs	r3, #2
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	2300      	movs	r3, #0
 80082b2:	460a      	mov	r2, r1
 80082b4:	4911      	ldr	r1, [pc, #68]	@ (80082fc <xTimerCreateTimerTask+0x88>)
 80082b6:	4812      	ldr	r0, [pc, #72]	@ (8008300 <xTimerCreateTimerTask+0x8c>)
 80082b8:	f7fe ffd6 	bl	8007268 <xTaskCreateStatic>
 80082bc:	4603      	mov	r3, r0
 80082be:	4a11      	ldr	r2, [pc, #68]	@ (8008304 <xTimerCreateTimerTask+0x90>)
 80082c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80082c2:	4b10      	ldr	r3, [pc, #64]	@ (8008304 <xTimerCreateTimerTask+0x90>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80082ca:	2301      	movs	r3, #1
 80082cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10b      	bne.n	80082ec <xTimerCreateTimerTask+0x78>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	613b      	str	r3, [r7, #16]
}
 80082e6:	bf00      	nop
 80082e8:	bf00      	nop
 80082ea:	e7fd      	b.n	80082e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80082ec:	697b      	ldr	r3, [r7, #20]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3718      	adds	r7, #24
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	20001138 	.word	0x20001138
 80082fc:	0800c5a0 	.word	0x0800c5a0
 8008300:	08008441 	.word	0x08008441
 8008304:	2000113c 	.word	0x2000113c

08008308 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b08a      	sub	sp, #40	@ 0x28
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
 8008314:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008316:	2300      	movs	r3, #0
 8008318:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10b      	bne.n	8008338 <xTimerGenericCommand+0x30>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	623b      	str	r3, [r7, #32]
}
 8008332:	bf00      	nop
 8008334:	bf00      	nop
 8008336:	e7fd      	b.n	8008334 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008338:	4b19      	ldr	r3, [pc, #100]	@ (80083a0 <xTimerGenericCommand+0x98>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d02a      	beq.n	8008396 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2b05      	cmp	r3, #5
 8008350:	dc18      	bgt.n	8008384 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008352:	f7ff fead 	bl	80080b0 <xTaskGetSchedulerState>
 8008356:	4603      	mov	r3, r0
 8008358:	2b02      	cmp	r3, #2
 800835a:	d109      	bne.n	8008370 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800835c:	4b10      	ldr	r3, [pc, #64]	@ (80083a0 <xTimerGenericCommand+0x98>)
 800835e:	6818      	ldr	r0, [r3, #0]
 8008360:	f107 0110 	add.w	r1, r7, #16
 8008364:	2300      	movs	r3, #0
 8008366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008368:	f7fe fb0c 	bl	8006984 <xQueueGenericSend>
 800836c:	6278      	str	r0, [r7, #36]	@ 0x24
 800836e:	e012      	b.n	8008396 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008370:	4b0b      	ldr	r3, [pc, #44]	@ (80083a0 <xTimerGenericCommand+0x98>)
 8008372:	6818      	ldr	r0, [r3, #0]
 8008374:	f107 0110 	add.w	r1, r7, #16
 8008378:	2300      	movs	r3, #0
 800837a:	2200      	movs	r2, #0
 800837c:	f7fe fb02 	bl	8006984 <xQueueGenericSend>
 8008380:	6278      	str	r0, [r7, #36]	@ 0x24
 8008382:	e008      	b.n	8008396 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008384:	4b06      	ldr	r3, [pc, #24]	@ (80083a0 <xTimerGenericCommand+0x98>)
 8008386:	6818      	ldr	r0, [r3, #0]
 8008388:	f107 0110 	add.w	r1, r7, #16
 800838c:	2300      	movs	r3, #0
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	f7fe fbfa 	bl	8006b88 <xQueueGenericSendFromISR>
 8008394:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008398:	4618      	mov	r0, r3
 800839a:	3728      	adds	r7, #40	@ 0x28
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	20001138 	.word	0x20001138

080083a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af02      	add	r7, sp, #8
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ae:	4b23      	ldr	r3, [pc, #140]	@ (800843c <prvProcessExpiredTimer+0x98>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	3304      	adds	r3, #4
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fe f971 	bl	80066a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d023      	beq.n	8008418 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	699a      	ldr	r2, [r3, #24]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	18d1      	adds	r1, r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	6978      	ldr	r0, [r7, #20]
 80083de:	f000 f8d5 	bl	800858c <prvInsertTimerInActiveList>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d020      	beq.n	800842a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083e8:	2300      	movs	r3, #0
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	2300      	movs	r3, #0
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	2100      	movs	r1, #0
 80083f2:	6978      	ldr	r0, [r7, #20]
 80083f4:	f7ff ff88 	bl	8008308 <xTimerGenericCommand>
 80083f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d114      	bne.n	800842a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	60fb      	str	r3, [r7, #12]
}
 8008412:	bf00      	nop
 8008414:	bf00      	nop
 8008416:	e7fd      	b.n	8008414 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800841e:	f023 0301 	bic.w	r3, r3, #1
 8008422:	b2da      	uxtb	r2, r3
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	6978      	ldr	r0, [r7, #20]
 8008430:	4798      	blx	r3
}
 8008432:	bf00      	nop
 8008434:	3718      	adds	r7, #24
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20001130 	.word	0x20001130

08008440 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008448:	f107 0308 	add.w	r3, r7, #8
 800844c:	4618      	mov	r0, r3
 800844e:	f000 f859 	bl	8008504 <prvGetNextExpireTime>
 8008452:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	4619      	mov	r1, r3
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f000 f805 	bl	8008468 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800845e:	f000 f8d7 	bl	8008610 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008462:	bf00      	nop
 8008464:	e7f0      	b.n	8008448 <prvTimerTask+0x8>
	...

08008468 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008472:	f7ff fa25 	bl	80078c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008476:	f107 0308 	add.w	r3, r7, #8
 800847a:	4618      	mov	r0, r3
 800847c:	f000 f866 	bl	800854c <prvSampleTimeNow>
 8008480:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d130      	bne.n	80084ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10a      	bne.n	80084a4 <prvProcessTimerOrBlockTask+0x3c>
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	429a      	cmp	r2, r3
 8008494:	d806      	bhi.n	80084a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008496:	f7ff fa21 	bl	80078dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800849a:	68f9      	ldr	r1, [r7, #12]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff ff81 	bl	80083a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084a2:	e024      	b.n	80084ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d008      	beq.n	80084bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084aa:	4b13      	ldr	r3, [pc, #76]	@ (80084f8 <prvProcessTimerOrBlockTask+0x90>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <prvProcessTimerOrBlockTask+0x50>
 80084b4:	2301      	movs	r3, #1
 80084b6:	e000      	b.n	80084ba <prvProcessTimerOrBlockTask+0x52>
 80084b8:	2300      	movs	r3, #0
 80084ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084bc:	4b0f      	ldr	r3, [pc, #60]	@ (80084fc <prvProcessTimerOrBlockTask+0x94>)
 80084be:	6818      	ldr	r0, [r3, #0]
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	4619      	mov	r1, r3
 80084ca:	f7fe fe99 	bl	8007200 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80084ce:	f7ff fa05 	bl	80078dc <xTaskResumeAll>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10a      	bne.n	80084ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80084d8:	4b09      	ldr	r3, [pc, #36]	@ (8008500 <prvProcessTimerOrBlockTask+0x98>)
 80084da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	f3bf 8f6f 	isb	sy
}
 80084e8:	e001      	b.n	80084ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80084ea:	f7ff f9f7 	bl	80078dc <xTaskResumeAll>
}
 80084ee:	bf00      	nop
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20001134 	.word	0x20001134
 80084fc:	20001138 	.word	0x20001138
 8008500:	e000ed04 	.word	0xe000ed04

08008504 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800850c:	4b0e      	ldr	r3, [pc, #56]	@ (8008548 <prvGetNextExpireTime+0x44>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <prvGetNextExpireTime+0x16>
 8008516:	2201      	movs	r2, #1
 8008518:	e000      	b.n	800851c <prvGetNextExpireTime+0x18>
 800851a:	2200      	movs	r2, #0
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d105      	bne.n	8008534 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008528:	4b07      	ldr	r3, [pc, #28]	@ (8008548 <prvGetNextExpireTime+0x44>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	60fb      	str	r3, [r7, #12]
 8008532:	e001      	b.n	8008538 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008534:	2300      	movs	r3, #0
 8008536:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008538:	68fb      	ldr	r3, [r7, #12]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	20001130 	.word	0x20001130

0800854c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008554:	f7ff fa60 	bl	8007a18 <xTaskGetTickCount>
 8008558:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800855a:	4b0b      	ldr	r3, [pc, #44]	@ (8008588 <prvSampleTimeNow+0x3c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	429a      	cmp	r2, r3
 8008562:	d205      	bcs.n	8008570 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008564:	f000 f93a 	bl	80087dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	601a      	str	r2, [r3, #0]
 800856e:	e002      	b.n	8008576 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008576:	4a04      	ldr	r2, [pc, #16]	@ (8008588 <prvSampleTimeNow+0x3c>)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800857c:	68fb      	ldr	r3, [r7, #12]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20001140 	.word	0x20001140

0800858c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800859a:	2300      	movs	r3, #0
 800859c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d812      	bhi.n	80085d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	1ad2      	subs	r2, r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d302      	bcc.n	80085c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085c0:	2301      	movs	r3, #1
 80085c2:	617b      	str	r3, [r7, #20]
 80085c4:	e01b      	b.n	80085fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085c6:	4b10      	ldr	r3, [pc, #64]	@ (8008608 <prvInsertTimerInActiveList+0x7c>)
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3304      	adds	r3, #4
 80085ce:	4619      	mov	r1, r3
 80085d0:	4610      	mov	r0, r2
 80085d2:	f7fe f82e 	bl	8006632 <vListInsert>
 80085d6:	e012      	b.n	80085fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d206      	bcs.n	80085ee <prvInsertTimerInActiveList+0x62>
 80085e0:	68ba      	ldr	r2, [r7, #8]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d302      	bcc.n	80085ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80085e8:	2301      	movs	r3, #1
 80085ea:	617b      	str	r3, [r7, #20]
 80085ec:	e007      	b.n	80085fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085ee:	4b07      	ldr	r3, [pc, #28]	@ (800860c <prvInsertTimerInActiveList+0x80>)
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	3304      	adds	r3, #4
 80085f6:	4619      	mov	r1, r3
 80085f8:	4610      	mov	r0, r2
 80085fa:	f7fe f81a 	bl	8006632 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80085fe:	697b      	ldr	r3, [r7, #20]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	20001134 	.word	0x20001134
 800860c:	20001130 	.word	0x20001130

08008610 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b08e      	sub	sp, #56	@ 0x38
 8008614:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008616:	e0ce      	b.n	80087b6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	da19      	bge.n	8008652 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800861e:	1d3b      	adds	r3, r7, #4
 8008620:	3304      	adds	r3, #4
 8008622:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10b      	bne.n	8008642 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800862a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	61fb      	str	r3, [r7, #28]
}
 800863c:	bf00      	nop
 800863e:	bf00      	nop
 8008640:	e7fd      	b.n	800863e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008648:	6850      	ldr	r0, [r2, #4]
 800864a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800864c:	6892      	ldr	r2, [r2, #8]
 800864e:	4611      	mov	r1, r2
 8008650:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	f2c0 80ae 	blt.w	80087b6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800865e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d004      	beq.n	8008670 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008668:	3304      	adds	r3, #4
 800866a:	4618      	mov	r0, r3
 800866c:	f7fe f81a 	bl	80066a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008670:	463b      	mov	r3, r7
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff ff6a 	bl	800854c <prvSampleTimeNow>
 8008678:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b09      	cmp	r3, #9
 800867e:	f200 8097 	bhi.w	80087b0 <prvProcessReceivedCommands+0x1a0>
 8008682:	a201      	add	r2, pc, #4	@ (adr r2, 8008688 <prvProcessReceivedCommands+0x78>)
 8008684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008688:	080086b1 	.word	0x080086b1
 800868c:	080086b1 	.word	0x080086b1
 8008690:	080086b1 	.word	0x080086b1
 8008694:	08008727 	.word	0x08008727
 8008698:	0800873b 	.word	0x0800873b
 800869c:	08008787 	.word	0x08008787
 80086a0:	080086b1 	.word	0x080086b1
 80086a4:	080086b1 	.word	0x080086b1
 80086a8:	08008727 	.word	0x08008727
 80086ac:	0800873b 	.word	0x0800873b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086b6:	f043 0301 	orr.w	r3, r3, #1
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	18d1      	adds	r1, r2, r3
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086d0:	f7ff ff5c 	bl	800858c <prvInsertTimerInActiveList>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d06c      	beq.n	80087b4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086e8:	f003 0304 	and.w	r3, r3, #4
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d061      	beq.n	80087b4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	441a      	add	r2, r3
 80086f8:	2300      	movs	r3, #0
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	2300      	movs	r3, #0
 80086fe:	2100      	movs	r1, #0
 8008700:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008702:	f7ff fe01 	bl	8008308 <xTimerGenericCommand>
 8008706:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d152      	bne.n	80087b4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	61bb      	str	r3, [r7, #24]
}
 8008720:	bf00      	nop
 8008722:	bf00      	nop
 8008724:	e7fd      	b.n	8008722 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008728:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800872c:	f023 0301 	bic.w	r3, r3, #1
 8008730:	b2da      	uxtb	r2, r3
 8008732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008734:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008738:	e03d      	b.n	80087b6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800873a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008740:	f043 0301 	orr.w	r3, r3, #1
 8008744:	b2da      	uxtb	r2, r3
 8008746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008748:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008750:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10b      	bne.n	8008772 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800875a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	617b      	str	r3, [r7, #20]
}
 800876c:	bf00      	nop
 800876e:	bf00      	nop
 8008770:	e7fd      	b.n	800876e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008774:	699a      	ldr	r2, [r3, #24]
 8008776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008778:	18d1      	adds	r1, r2, r3
 800877a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800877e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008780:	f7ff ff04 	bl	800858c <prvInsertTimerInActiveList>
					break;
 8008784:	e017      	b.n	80087b6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008788:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800878c:	f003 0302 	and.w	r3, r3, #2
 8008790:	2b00      	cmp	r3, #0
 8008792:	d103      	bne.n	800879c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008794:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008796:	f000 fbe7 	bl	8008f68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800879a:	e00c      	b.n	80087b6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800879c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087a2:	f023 0301 	bic.w	r3, r3, #1
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80087ae:	e002      	b.n	80087b6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80087b0:	bf00      	nop
 80087b2:	e000      	b.n	80087b6 <prvProcessReceivedCommands+0x1a6>
					break;
 80087b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087b6:	4b08      	ldr	r3, [pc, #32]	@ (80087d8 <prvProcessReceivedCommands+0x1c8>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	1d39      	adds	r1, r7, #4
 80087bc:	2200      	movs	r2, #0
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fe fa80 	bl	8006cc4 <xQueueReceive>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f47f af26 	bne.w	8008618 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80087cc:	bf00      	nop
 80087ce:	bf00      	nop
 80087d0:	3730      	adds	r7, #48	@ 0x30
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20001138 	.word	0x20001138

080087dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b088      	sub	sp, #32
 80087e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087e2:	e049      	b.n	8008878 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087e4:	4b2e      	ldr	r3, [pc, #184]	@ (80088a0 <prvSwitchTimerLists+0xc4>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ee:	4b2c      	ldr	r3, [pc, #176]	@ (80088a0 <prvSwitchTimerLists+0xc4>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	3304      	adds	r3, #4
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fd ff51 	bl	80066a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6a1b      	ldr	r3, [r3, #32]
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008810:	f003 0304 	and.w	r3, r3, #4
 8008814:	2b00      	cmp	r3, #0
 8008816:	d02f      	beq.n	8008878 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	4413      	add	r3, r2
 8008820:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	429a      	cmp	r2, r3
 8008828:	d90e      	bls.n	8008848 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008836:	4b1a      	ldr	r3, [pc, #104]	@ (80088a0 <prvSwitchTimerLists+0xc4>)
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3304      	adds	r3, #4
 800883e:	4619      	mov	r1, r3
 8008840:	4610      	mov	r0, r2
 8008842:	f7fd fef6 	bl	8006632 <vListInsert>
 8008846:	e017      	b.n	8008878 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008848:	2300      	movs	r3, #0
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	2300      	movs	r3, #0
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	2100      	movs	r1, #0
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7ff fd58 	bl	8008308 <xTimerGenericCommand>
 8008858:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10b      	bne.n	8008878 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	603b      	str	r3, [r7, #0]
}
 8008872:	bf00      	nop
 8008874:	bf00      	nop
 8008876:	e7fd      	b.n	8008874 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008878:	4b09      	ldr	r3, [pc, #36]	@ (80088a0 <prvSwitchTimerLists+0xc4>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1b0      	bne.n	80087e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008882:	4b07      	ldr	r3, [pc, #28]	@ (80088a0 <prvSwitchTimerLists+0xc4>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008888:	4b06      	ldr	r3, [pc, #24]	@ (80088a4 <prvSwitchTimerLists+0xc8>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a04      	ldr	r2, [pc, #16]	@ (80088a0 <prvSwitchTimerLists+0xc4>)
 800888e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008890:	4a04      	ldr	r2, [pc, #16]	@ (80088a4 <prvSwitchTimerLists+0xc8>)
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	6013      	str	r3, [r2, #0]
}
 8008896:	bf00      	nop
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	20001130 	.word	0x20001130
 80088a4:	20001134 	.word	0x20001134

080088a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088ae:	f000 f96b 	bl	8008b88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088b2:	4b15      	ldr	r3, [pc, #84]	@ (8008908 <prvCheckForValidListAndQueue+0x60>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d120      	bne.n	80088fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088ba:	4814      	ldr	r0, [pc, #80]	@ (800890c <prvCheckForValidListAndQueue+0x64>)
 80088bc:	f7fd fe68 	bl	8006590 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088c0:	4813      	ldr	r0, [pc, #76]	@ (8008910 <prvCheckForValidListAndQueue+0x68>)
 80088c2:	f7fd fe65 	bl	8006590 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088c6:	4b13      	ldr	r3, [pc, #76]	@ (8008914 <prvCheckForValidListAndQueue+0x6c>)
 80088c8:	4a10      	ldr	r2, [pc, #64]	@ (800890c <prvCheckForValidListAndQueue+0x64>)
 80088ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088cc:	4b12      	ldr	r3, [pc, #72]	@ (8008918 <prvCheckForValidListAndQueue+0x70>)
 80088ce:	4a10      	ldr	r2, [pc, #64]	@ (8008910 <prvCheckForValidListAndQueue+0x68>)
 80088d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088d2:	2300      	movs	r3, #0
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	4b11      	ldr	r3, [pc, #68]	@ (800891c <prvCheckForValidListAndQueue+0x74>)
 80088d8:	4a11      	ldr	r2, [pc, #68]	@ (8008920 <prvCheckForValidListAndQueue+0x78>)
 80088da:	2110      	movs	r1, #16
 80088dc:	200a      	movs	r0, #10
 80088de:	f7fd ff75 	bl	80067cc <xQueueGenericCreateStatic>
 80088e2:	4603      	mov	r3, r0
 80088e4:	4a08      	ldr	r2, [pc, #32]	@ (8008908 <prvCheckForValidListAndQueue+0x60>)
 80088e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088e8:	4b07      	ldr	r3, [pc, #28]	@ (8008908 <prvCheckForValidListAndQueue+0x60>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d005      	beq.n	80088fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088f0:	4b05      	ldr	r3, [pc, #20]	@ (8008908 <prvCheckForValidListAndQueue+0x60>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	490b      	ldr	r1, [pc, #44]	@ (8008924 <prvCheckForValidListAndQueue+0x7c>)
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fe fc58 	bl	80071ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088fc:	f000 f976 	bl	8008bec <vPortExitCritical>
}
 8008900:	bf00      	nop
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	20001138 	.word	0x20001138
 800890c:	20001108 	.word	0x20001108
 8008910:	2000111c 	.word	0x2000111c
 8008914:	20001130 	.word	0x20001130
 8008918:	20001134 	.word	0x20001134
 800891c:	200011e4 	.word	0x200011e4
 8008920:	20001144 	.word	0x20001144
 8008924:	0800c5a8 	.word	0x0800c5a8

08008928 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3b04      	subs	r3, #4
 8008938:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3b04      	subs	r3, #4
 8008946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f023 0201 	bic.w	r2, r3, #1
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3b04      	subs	r3, #4
 8008956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008958:	4a0c      	ldr	r2, [pc, #48]	@ (800898c <pxPortInitialiseStack+0x64>)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3b14      	subs	r3, #20
 8008962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3b04      	subs	r3, #4
 800896e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f06f 0202 	mvn.w	r2, #2
 8008976:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3b20      	subs	r3, #32
 800897c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800897e:	68fb      	ldr	r3, [r7, #12]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	08008991 	.word	0x08008991

08008990 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800899a:	4b13      	ldr	r3, [pc, #76]	@ (80089e8 <prvTaskExitError+0x58>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a2:	d00b      	beq.n	80089bc <prvTaskExitError+0x2c>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	60fb      	str	r3, [r7, #12]
}
 80089b6:	bf00      	nop
 80089b8:	bf00      	nop
 80089ba:	e7fd      	b.n	80089b8 <prvTaskExitError+0x28>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	60bb      	str	r3, [r7, #8]
}
 80089ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089d0:	bf00      	nop
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0fc      	beq.n	80089d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089d8:	bf00      	nop
 80089da:	bf00      	nop
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	2000015c 	.word	0x2000015c
 80089ec:	00000000 	.word	0x00000000

080089f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089f0:	4b07      	ldr	r3, [pc, #28]	@ (8008a10 <pxCurrentTCBConst2>)
 80089f2:	6819      	ldr	r1, [r3, #0]
 80089f4:	6808      	ldr	r0, [r1, #0]
 80089f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fa:	f380 8809 	msr	PSP, r0
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f04f 0000 	mov.w	r0, #0
 8008a06:	f380 8811 	msr	BASEPRI, r0
 8008a0a:	4770      	bx	lr
 8008a0c:	f3af 8000 	nop.w

08008a10 <pxCurrentTCBConst2>:
 8008a10:	20000c08 	.word	0x20000c08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop

08008a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a18:	4808      	ldr	r0, [pc, #32]	@ (8008a3c <prvPortStartFirstTask+0x24>)
 8008a1a:	6800      	ldr	r0, [r0, #0]
 8008a1c:	6800      	ldr	r0, [r0, #0]
 8008a1e:	f380 8808 	msr	MSP, r0
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f380 8814 	msr	CONTROL, r0
 8008a2a:	b662      	cpsie	i
 8008a2c:	b661      	cpsie	f
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	df00      	svc	0
 8008a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a3a:	bf00      	nop
 8008a3c:	e000ed08 	.word	0xe000ed08

08008a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a46:	4b47      	ldr	r3, [pc, #284]	@ (8008b64 <xPortStartScheduler+0x124>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a47      	ldr	r2, [pc, #284]	@ (8008b68 <xPortStartScheduler+0x128>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d10b      	bne.n	8008a68 <xPortStartScheduler+0x28>
	__asm volatile
 8008a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	613b      	str	r3, [r7, #16]
}
 8008a62:	bf00      	nop
 8008a64:	bf00      	nop
 8008a66:	e7fd      	b.n	8008a64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a68:	4b3e      	ldr	r3, [pc, #248]	@ (8008b64 <xPortStartScheduler+0x124>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a3f      	ldr	r2, [pc, #252]	@ (8008b6c <xPortStartScheduler+0x12c>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d10b      	bne.n	8008a8a <xPortStartScheduler+0x4a>
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	60fb      	str	r3, [r7, #12]
}
 8008a84:	bf00      	nop
 8008a86:	bf00      	nop
 8008a88:	e7fd      	b.n	8008a86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a8a:	4b39      	ldr	r3, [pc, #228]	@ (8008b70 <xPortStartScheduler+0x130>)
 8008a8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	22ff      	movs	r2, #255	@ 0xff
 8008a9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008aa4:	78fb      	ldrb	r3, [r7, #3]
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	4b31      	ldr	r3, [pc, #196]	@ (8008b74 <xPortStartScheduler+0x134>)
 8008ab0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ab2:	4b31      	ldr	r3, [pc, #196]	@ (8008b78 <xPortStartScheduler+0x138>)
 8008ab4:	2207      	movs	r2, #7
 8008ab6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ab8:	e009      	b.n	8008ace <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008aba:	4b2f      	ldr	r3, [pc, #188]	@ (8008b78 <xPortStartScheduler+0x138>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8008b78 <xPortStartScheduler+0x138>)
 8008ac2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ace:	78fb      	ldrb	r3, [r7, #3]
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ad6:	2b80      	cmp	r3, #128	@ 0x80
 8008ad8:	d0ef      	beq.n	8008aba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ada:	4b27      	ldr	r3, [pc, #156]	@ (8008b78 <xPortStartScheduler+0x138>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f1c3 0307 	rsb	r3, r3, #7
 8008ae2:	2b04      	cmp	r3, #4
 8008ae4:	d00b      	beq.n	8008afe <xPortStartScheduler+0xbe>
	__asm volatile
 8008ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	60bb      	str	r3, [r7, #8]
}
 8008af8:	bf00      	nop
 8008afa:	bf00      	nop
 8008afc:	e7fd      	b.n	8008afa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008afe:	4b1e      	ldr	r3, [pc, #120]	@ (8008b78 <xPortStartScheduler+0x138>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	021b      	lsls	r3, r3, #8
 8008b04:	4a1c      	ldr	r2, [pc, #112]	@ (8008b78 <xPortStartScheduler+0x138>)
 8008b06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b08:	4b1b      	ldr	r3, [pc, #108]	@ (8008b78 <xPortStartScheduler+0x138>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b10:	4a19      	ldr	r2, [pc, #100]	@ (8008b78 <xPortStartScheduler+0x138>)
 8008b12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b1c:	4b17      	ldr	r3, [pc, #92]	@ (8008b7c <xPortStartScheduler+0x13c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a16      	ldr	r2, [pc, #88]	@ (8008b7c <xPortStartScheduler+0x13c>)
 8008b22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b28:	4b14      	ldr	r3, [pc, #80]	@ (8008b7c <xPortStartScheduler+0x13c>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a13      	ldr	r2, [pc, #76]	@ (8008b7c <xPortStartScheduler+0x13c>)
 8008b2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008b32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b34:	f000 f8da 	bl	8008cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b38:	4b11      	ldr	r3, [pc, #68]	@ (8008b80 <xPortStartScheduler+0x140>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b3e:	f000 f8f9 	bl	8008d34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b42:	4b10      	ldr	r3, [pc, #64]	@ (8008b84 <xPortStartScheduler+0x144>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a0f      	ldr	r2, [pc, #60]	@ (8008b84 <xPortStartScheduler+0x144>)
 8008b48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008b4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b4e:	f7ff ff63 	bl	8008a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b52:	f7ff f83d 	bl	8007bd0 <vTaskSwitchContext>
	prvTaskExitError();
 8008b56:	f7ff ff1b 	bl	8008990 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3718      	adds	r7, #24
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	e000ed00 	.word	0xe000ed00
 8008b68:	410fc271 	.word	0x410fc271
 8008b6c:	410fc270 	.word	0x410fc270
 8008b70:	e000e400 	.word	0xe000e400
 8008b74:	20001234 	.word	0x20001234
 8008b78:	20001238 	.word	0x20001238
 8008b7c:	e000ed20 	.word	0xe000ed20
 8008b80:	2000015c 	.word	0x2000015c
 8008b84:	e000ef34 	.word	0xe000ef34

08008b88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	607b      	str	r3, [r7, #4]
}
 8008ba0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ba2:	4b10      	ldr	r3, [pc, #64]	@ (8008be4 <vPortEnterCritical+0x5c>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8008be4 <vPortEnterCritical+0x5c>)
 8008baa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008bac:	4b0d      	ldr	r3, [pc, #52]	@ (8008be4 <vPortEnterCritical+0x5c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d110      	bne.n	8008bd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8008be8 <vPortEnterCritical+0x60>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00b      	beq.n	8008bd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	603b      	str	r3, [r7, #0]
}
 8008bd0:	bf00      	nop
 8008bd2:	bf00      	nop
 8008bd4:	e7fd      	b.n	8008bd2 <vPortEnterCritical+0x4a>
	}
}
 8008bd6:	bf00      	nop
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	2000015c 	.word	0x2000015c
 8008be8:	e000ed04 	.word	0xe000ed04

08008bec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bf2:	4b12      	ldr	r3, [pc, #72]	@ (8008c3c <vPortExitCritical+0x50>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10b      	bne.n	8008c12 <vPortExitCritical+0x26>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	607b      	str	r3, [r7, #4]
}
 8008c0c:	bf00      	nop
 8008c0e:	bf00      	nop
 8008c10:	e7fd      	b.n	8008c0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c12:	4b0a      	ldr	r3, [pc, #40]	@ (8008c3c <vPortExitCritical+0x50>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	3b01      	subs	r3, #1
 8008c18:	4a08      	ldr	r2, [pc, #32]	@ (8008c3c <vPortExitCritical+0x50>)
 8008c1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c1c:	4b07      	ldr	r3, [pc, #28]	@ (8008c3c <vPortExitCritical+0x50>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d105      	bne.n	8008c30 <vPortExitCritical+0x44>
 8008c24:	2300      	movs	r3, #0
 8008c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	f383 8811 	msr	BASEPRI, r3
}
 8008c2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	2000015c 	.word	0x2000015c

08008c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c40:	f3ef 8009 	mrs	r0, PSP
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	4b15      	ldr	r3, [pc, #84]	@ (8008ca0 <pxCurrentTCBConst>)
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	f01e 0f10 	tst.w	lr, #16
 8008c50:	bf08      	it	eq
 8008c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c5a:	6010      	str	r0, [r2, #0]
 8008c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008c64:	f380 8811 	msr	BASEPRI, r0
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f7fe ffae 	bl	8007bd0 <vTaskSwitchContext>
 8008c74:	f04f 0000 	mov.w	r0, #0
 8008c78:	f380 8811 	msr	BASEPRI, r0
 8008c7c:	bc09      	pop	{r0, r3}
 8008c7e:	6819      	ldr	r1, [r3, #0]
 8008c80:	6808      	ldr	r0, [r1, #0]
 8008c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c86:	f01e 0f10 	tst.w	lr, #16
 8008c8a:	bf08      	it	eq
 8008c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c90:	f380 8809 	msr	PSP, r0
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	f3af 8000 	nop.w

08008ca0 <pxCurrentTCBConst>:
 8008ca0:	20000c08 	.word	0x20000c08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ca4:	bf00      	nop
 8008ca6:	bf00      	nop

08008ca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	607b      	str	r3, [r7, #4]
}
 8008cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008cc2:	f7fe fecb 	bl	8007a5c <xTaskIncrementTick>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008ccc:	4b06      	ldr	r3, [pc, #24]	@ (8008ce8 <xPortSysTickHandler+0x40>)
 8008cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	f383 8811 	msr	BASEPRI, r3
}
 8008cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ce0:	bf00      	nop
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	e000ed04 	.word	0xe000ed04

08008cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cec:	b480      	push	{r7}
 8008cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8008d20 <vPortSetupTimerInterrupt+0x34>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8008d24 <vPortSetupTimerInterrupt+0x38>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8008d28 <vPortSetupTimerInterrupt+0x3c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a0a      	ldr	r2, [pc, #40]	@ (8008d2c <vPortSetupTimerInterrupt+0x40>)
 8008d02:	fba2 2303 	umull	r2, r3, r2, r3
 8008d06:	099b      	lsrs	r3, r3, #6
 8008d08:	4a09      	ldr	r2, [pc, #36]	@ (8008d30 <vPortSetupTimerInterrupt+0x44>)
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d0e:	4b04      	ldr	r3, [pc, #16]	@ (8008d20 <vPortSetupTimerInterrupt+0x34>)
 8008d10:	2207      	movs	r2, #7
 8008d12:	601a      	str	r2, [r3, #0]
}
 8008d14:	bf00      	nop
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	e000e010 	.word	0xe000e010
 8008d24:	e000e018 	.word	0xe000e018
 8008d28:	20000150 	.word	0x20000150
 8008d2c:	10624dd3 	.word	0x10624dd3
 8008d30:	e000e014 	.word	0xe000e014

08008d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008d44 <vPortEnableVFP+0x10>
 8008d38:	6801      	ldr	r1, [r0, #0]
 8008d3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008d3e:	6001      	str	r1, [r0, #0]
 8008d40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d42:	bf00      	nop
 8008d44:	e000ed88 	.word	0xe000ed88

08008d48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d4e:	f3ef 8305 	mrs	r3, IPSR
 8008d52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2b0f      	cmp	r3, #15
 8008d58:	d915      	bls.n	8008d86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d5a:	4a18      	ldr	r2, [pc, #96]	@ (8008dbc <vPortValidateInterruptPriority+0x74>)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	4413      	add	r3, r2
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d64:	4b16      	ldr	r3, [pc, #88]	@ (8008dc0 <vPortValidateInterruptPriority+0x78>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	7afa      	ldrb	r2, [r7, #11]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d20b      	bcs.n	8008d86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	607b      	str	r3, [r7, #4]
}
 8008d80:	bf00      	nop
 8008d82:	bf00      	nop
 8008d84:	e7fd      	b.n	8008d82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d86:	4b0f      	ldr	r3, [pc, #60]	@ (8008dc4 <vPortValidateInterruptPriority+0x7c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008dc8 <vPortValidateInterruptPriority+0x80>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d90b      	bls.n	8008dae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9a:	f383 8811 	msr	BASEPRI, r3
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	603b      	str	r3, [r7, #0]
}
 8008da8:	bf00      	nop
 8008daa:	bf00      	nop
 8008dac:	e7fd      	b.n	8008daa <vPortValidateInterruptPriority+0x62>
	}
 8008dae:	bf00      	nop
 8008db0:	3714      	adds	r7, #20
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	e000e3f0 	.word	0xe000e3f0
 8008dc0:	20001234 	.word	0x20001234
 8008dc4:	e000ed0c 	.word	0xe000ed0c
 8008dc8:	20001238 	.word	0x20001238

08008dcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b08a      	sub	sp, #40	@ 0x28
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008dd8:	f7fe fd72 	bl	80078c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ddc:	4b5c      	ldr	r3, [pc, #368]	@ (8008f50 <pvPortMalloc+0x184>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d101      	bne.n	8008de8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008de4:	f000 f924 	bl	8009030 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008de8:	4b5a      	ldr	r3, [pc, #360]	@ (8008f54 <pvPortMalloc+0x188>)
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4013      	ands	r3, r2
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f040 8095 	bne.w	8008f20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d01e      	beq.n	8008e3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008dfc:	2208      	movs	r2, #8
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4413      	add	r3, r2
 8008e02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f003 0307 	and.w	r3, r3, #7
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d015      	beq.n	8008e3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f023 0307 	bic.w	r3, r3, #7
 8008e14:	3308      	adds	r3, #8
 8008e16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f003 0307 	and.w	r3, r3, #7
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00b      	beq.n	8008e3a <pvPortMalloc+0x6e>
	__asm volatile
 8008e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e26:	f383 8811 	msr	BASEPRI, r3
 8008e2a:	f3bf 8f6f 	isb	sy
 8008e2e:	f3bf 8f4f 	dsb	sy
 8008e32:	617b      	str	r3, [r7, #20]
}
 8008e34:	bf00      	nop
 8008e36:	bf00      	nop
 8008e38:	e7fd      	b.n	8008e36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d06f      	beq.n	8008f20 <pvPortMalloc+0x154>
 8008e40:	4b45      	ldr	r3, [pc, #276]	@ (8008f58 <pvPortMalloc+0x18c>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d86a      	bhi.n	8008f20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e4a:	4b44      	ldr	r3, [pc, #272]	@ (8008f5c <pvPortMalloc+0x190>)
 8008e4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e4e:	4b43      	ldr	r3, [pc, #268]	@ (8008f5c <pvPortMalloc+0x190>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e54:	e004      	b.n	8008e60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d903      	bls.n	8008e72 <pvPortMalloc+0xa6>
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1f1      	bne.n	8008e56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e72:	4b37      	ldr	r3, [pc, #220]	@ (8008f50 <pvPortMalloc+0x184>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d051      	beq.n	8008f20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2208      	movs	r2, #8
 8008e82:	4413      	add	r3, r2
 8008e84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	1ad2      	subs	r2, r2, r3
 8008e96:	2308      	movs	r3, #8
 8008e98:	005b      	lsls	r3, r3, #1
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d920      	bls.n	8008ee0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	f003 0307 	and.w	r3, r3, #7
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00b      	beq.n	8008ec8 <pvPortMalloc+0xfc>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	613b      	str	r3, [r7, #16]
}
 8008ec2:	bf00      	nop
 8008ec4:	bf00      	nop
 8008ec6:	e7fd      	b.n	8008ec4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	1ad2      	subs	r2, r2, r3
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008eda:	69b8      	ldr	r0, [r7, #24]
 8008edc:	f000 f90a 	bl	80090f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8008f58 <pvPortMalloc+0x18c>)
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	4a1b      	ldr	r2, [pc, #108]	@ (8008f58 <pvPortMalloc+0x18c>)
 8008eec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008eee:	4b1a      	ldr	r3, [pc, #104]	@ (8008f58 <pvPortMalloc+0x18c>)
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8008f60 <pvPortMalloc+0x194>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d203      	bcs.n	8008f02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008efa:	4b17      	ldr	r3, [pc, #92]	@ (8008f58 <pvPortMalloc+0x18c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a18      	ldr	r2, [pc, #96]	@ (8008f60 <pvPortMalloc+0x194>)
 8008f00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f04:	685a      	ldr	r2, [r3, #4]
 8008f06:	4b13      	ldr	r3, [pc, #76]	@ (8008f54 <pvPortMalloc+0x188>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	431a      	orrs	r2, r3
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f12:	2200      	movs	r2, #0
 8008f14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f16:	4b13      	ldr	r3, [pc, #76]	@ (8008f64 <pvPortMalloc+0x198>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	4a11      	ldr	r2, [pc, #68]	@ (8008f64 <pvPortMalloc+0x198>)
 8008f1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f20:	f7fe fcdc 	bl	80078dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	f003 0307 	and.w	r3, r3, #7
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00b      	beq.n	8008f46 <pvPortMalloc+0x17a>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	60fb      	str	r3, [r7, #12]
}
 8008f40:	bf00      	nop
 8008f42:	bf00      	nop
 8008f44:	e7fd      	b.n	8008f42 <pvPortMalloc+0x176>
	return pvReturn;
 8008f46:	69fb      	ldr	r3, [r7, #28]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3728      	adds	r7, #40	@ 0x28
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	20004e44 	.word	0x20004e44
 8008f54:	20004e58 	.word	0x20004e58
 8008f58:	20004e48 	.word	0x20004e48
 8008f5c:	20004e3c 	.word	0x20004e3c
 8008f60:	20004e4c 	.word	0x20004e4c
 8008f64:	20004e50 	.word	0x20004e50

08008f68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d04f      	beq.n	800901a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f7a:	2308      	movs	r3, #8
 8008f7c:	425b      	negs	r3, r3
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	4413      	add	r3, r2
 8008f82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	4b25      	ldr	r3, [pc, #148]	@ (8009024 <vPortFree+0xbc>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4013      	ands	r3, r2
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10b      	bne.n	8008fae <vPortFree+0x46>
	__asm volatile
 8008f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	60fb      	str	r3, [r7, #12]
}
 8008fa8:	bf00      	nop
 8008faa:	bf00      	nop
 8008fac:	e7fd      	b.n	8008faa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00b      	beq.n	8008fce <vPortFree+0x66>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	60bb      	str	r3, [r7, #8]
}
 8008fc8:	bf00      	nop
 8008fca:	bf00      	nop
 8008fcc:	e7fd      	b.n	8008fca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	4b14      	ldr	r3, [pc, #80]	@ (8009024 <vPortFree+0xbc>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d01e      	beq.n	800901a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d11a      	bne.n	800901a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	685a      	ldr	r2, [r3, #4]
 8008fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8009024 <vPortFree+0xbc>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	43db      	mvns	r3, r3
 8008fee:	401a      	ands	r2, r3
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ff4:	f7fe fc64 	bl	80078c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	685a      	ldr	r2, [r3, #4]
 8008ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8009028 <vPortFree+0xc0>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4413      	add	r3, r2
 8009002:	4a09      	ldr	r2, [pc, #36]	@ (8009028 <vPortFree+0xc0>)
 8009004:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009006:	6938      	ldr	r0, [r7, #16]
 8009008:	f000 f874 	bl	80090f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800900c:	4b07      	ldr	r3, [pc, #28]	@ (800902c <vPortFree+0xc4>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	3301      	adds	r3, #1
 8009012:	4a06      	ldr	r2, [pc, #24]	@ (800902c <vPortFree+0xc4>)
 8009014:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009016:	f7fe fc61 	bl	80078dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800901a:	bf00      	nop
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20004e58 	.word	0x20004e58
 8009028:	20004e48 	.word	0x20004e48
 800902c:	20004e54 	.word	0x20004e54

08009030 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009036:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800903a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800903c:	4b27      	ldr	r3, [pc, #156]	@ (80090dc <prvHeapInit+0xac>)
 800903e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f003 0307 	and.w	r3, r3, #7
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00c      	beq.n	8009064 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	3307      	adds	r3, #7
 800904e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f023 0307 	bic.w	r3, r3, #7
 8009056:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	4a1f      	ldr	r2, [pc, #124]	@ (80090dc <prvHeapInit+0xac>)
 8009060:	4413      	add	r3, r2
 8009062:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009068:	4a1d      	ldr	r2, [pc, #116]	@ (80090e0 <prvHeapInit+0xb0>)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800906e:	4b1c      	ldr	r3, [pc, #112]	@ (80090e0 <prvHeapInit+0xb0>)
 8009070:	2200      	movs	r2, #0
 8009072:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	4413      	add	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800907c:	2208      	movs	r2, #8
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	1a9b      	subs	r3, r3, r2
 8009082:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f023 0307 	bic.w	r3, r3, #7
 800908a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	4a15      	ldr	r2, [pc, #84]	@ (80090e4 <prvHeapInit+0xb4>)
 8009090:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009092:	4b14      	ldr	r3, [pc, #80]	@ (80090e4 <prvHeapInit+0xb4>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2200      	movs	r2, #0
 8009098:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800909a:	4b12      	ldr	r3, [pc, #72]	@ (80090e4 <prvHeapInit+0xb4>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	1ad2      	subs	r2, r2, r3
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090b0:	4b0c      	ldr	r3, [pc, #48]	@ (80090e4 <prvHeapInit+0xb4>)
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	4a0a      	ldr	r2, [pc, #40]	@ (80090e8 <prvHeapInit+0xb8>)
 80090be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	4a09      	ldr	r2, [pc, #36]	@ (80090ec <prvHeapInit+0xbc>)
 80090c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090c8:	4b09      	ldr	r3, [pc, #36]	@ (80090f0 <prvHeapInit+0xc0>)
 80090ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80090ce:	601a      	str	r2, [r3, #0]
}
 80090d0:	bf00      	nop
 80090d2:	3714      	adds	r7, #20
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr
 80090dc:	2000123c 	.word	0x2000123c
 80090e0:	20004e3c 	.word	0x20004e3c
 80090e4:	20004e44 	.word	0x20004e44
 80090e8:	20004e4c 	.word	0x20004e4c
 80090ec:	20004e48 	.word	0x20004e48
 80090f0:	20004e58 	.word	0x20004e58

080090f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090fc:	4b28      	ldr	r3, [pc, #160]	@ (80091a0 <prvInsertBlockIntoFreeList+0xac>)
 80090fe:	60fb      	str	r3, [r7, #12]
 8009100:	e002      	b.n	8009108 <prvInsertBlockIntoFreeList+0x14>
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	60fb      	str	r3, [r7, #12]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	429a      	cmp	r2, r3
 8009110:	d8f7      	bhi.n	8009102 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	4413      	add	r3, r2
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	429a      	cmp	r2, r3
 8009122:	d108      	bne.n	8009136 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	441a      	add	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	441a      	add	r2, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	429a      	cmp	r2, r3
 8009148:	d118      	bne.n	800917c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	4b15      	ldr	r3, [pc, #84]	@ (80091a4 <prvInsertBlockIntoFreeList+0xb0>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	429a      	cmp	r2, r3
 8009154:	d00d      	beq.n	8009172 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	685a      	ldr	r2, [r3, #4]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	441a      	add	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	601a      	str	r2, [r3, #0]
 8009170:	e008      	b.n	8009184 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009172:	4b0c      	ldr	r3, [pc, #48]	@ (80091a4 <prvInsertBlockIntoFreeList+0xb0>)
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	601a      	str	r2, [r3, #0]
 800917a:	e003      	b.n	8009184 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	429a      	cmp	r2, r3
 800918a:	d002      	beq.n	8009192 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009192:	bf00      	nop
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	20004e3c 	.word	0x20004e3c
 80091a4:	20004e44 	.word	0x20004e44

080091a8 <__cvt>:
 80091a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091ac:	ec57 6b10 	vmov	r6, r7, d0
 80091b0:	2f00      	cmp	r7, #0
 80091b2:	460c      	mov	r4, r1
 80091b4:	4619      	mov	r1, r3
 80091b6:	463b      	mov	r3, r7
 80091b8:	bfbb      	ittet	lt
 80091ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80091be:	461f      	movlt	r7, r3
 80091c0:	2300      	movge	r3, #0
 80091c2:	232d      	movlt	r3, #45	@ 0x2d
 80091c4:	700b      	strb	r3, [r1, #0]
 80091c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80091cc:	4691      	mov	r9, r2
 80091ce:	f023 0820 	bic.w	r8, r3, #32
 80091d2:	bfbc      	itt	lt
 80091d4:	4632      	movlt	r2, r6
 80091d6:	4616      	movlt	r6, r2
 80091d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80091dc:	d005      	beq.n	80091ea <__cvt+0x42>
 80091de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80091e2:	d100      	bne.n	80091e6 <__cvt+0x3e>
 80091e4:	3401      	adds	r4, #1
 80091e6:	2102      	movs	r1, #2
 80091e8:	e000      	b.n	80091ec <__cvt+0x44>
 80091ea:	2103      	movs	r1, #3
 80091ec:	ab03      	add	r3, sp, #12
 80091ee:	9301      	str	r3, [sp, #4]
 80091f0:	ab02      	add	r3, sp, #8
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	ec47 6b10 	vmov	d0, r6, r7
 80091f8:	4653      	mov	r3, sl
 80091fa:	4622      	mov	r2, r4
 80091fc:	f000 ffb0 	bl	800a160 <_dtoa_r>
 8009200:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009204:	4605      	mov	r5, r0
 8009206:	d119      	bne.n	800923c <__cvt+0x94>
 8009208:	f019 0f01 	tst.w	r9, #1
 800920c:	d00e      	beq.n	800922c <__cvt+0x84>
 800920e:	eb00 0904 	add.w	r9, r0, r4
 8009212:	2200      	movs	r2, #0
 8009214:	2300      	movs	r3, #0
 8009216:	4630      	mov	r0, r6
 8009218:	4639      	mov	r1, r7
 800921a:	f7f7 fc5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800921e:	b108      	cbz	r0, 8009224 <__cvt+0x7c>
 8009220:	f8cd 900c 	str.w	r9, [sp, #12]
 8009224:	2230      	movs	r2, #48	@ 0x30
 8009226:	9b03      	ldr	r3, [sp, #12]
 8009228:	454b      	cmp	r3, r9
 800922a:	d31e      	bcc.n	800926a <__cvt+0xc2>
 800922c:	9b03      	ldr	r3, [sp, #12]
 800922e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009230:	1b5b      	subs	r3, r3, r5
 8009232:	4628      	mov	r0, r5
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	b004      	add	sp, #16
 8009238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800923c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009240:	eb00 0904 	add.w	r9, r0, r4
 8009244:	d1e5      	bne.n	8009212 <__cvt+0x6a>
 8009246:	7803      	ldrb	r3, [r0, #0]
 8009248:	2b30      	cmp	r3, #48	@ 0x30
 800924a:	d10a      	bne.n	8009262 <__cvt+0xba>
 800924c:	2200      	movs	r2, #0
 800924e:	2300      	movs	r3, #0
 8009250:	4630      	mov	r0, r6
 8009252:	4639      	mov	r1, r7
 8009254:	f7f7 fc40 	bl	8000ad8 <__aeabi_dcmpeq>
 8009258:	b918      	cbnz	r0, 8009262 <__cvt+0xba>
 800925a:	f1c4 0401 	rsb	r4, r4, #1
 800925e:	f8ca 4000 	str.w	r4, [sl]
 8009262:	f8da 3000 	ldr.w	r3, [sl]
 8009266:	4499      	add	r9, r3
 8009268:	e7d3      	b.n	8009212 <__cvt+0x6a>
 800926a:	1c59      	adds	r1, r3, #1
 800926c:	9103      	str	r1, [sp, #12]
 800926e:	701a      	strb	r2, [r3, #0]
 8009270:	e7d9      	b.n	8009226 <__cvt+0x7e>

08009272 <__exponent>:
 8009272:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009274:	2900      	cmp	r1, #0
 8009276:	bfba      	itte	lt
 8009278:	4249      	neglt	r1, r1
 800927a:	232d      	movlt	r3, #45	@ 0x2d
 800927c:	232b      	movge	r3, #43	@ 0x2b
 800927e:	2909      	cmp	r1, #9
 8009280:	7002      	strb	r2, [r0, #0]
 8009282:	7043      	strb	r3, [r0, #1]
 8009284:	dd29      	ble.n	80092da <__exponent+0x68>
 8009286:	f10d 0307 	add.w	r3, sp, #7
 800928a:	461d      	mov	r5, r3
 800928c:	270a      	movs	r7, #10
 800928e:	461a      	mov	r2, r3
 8009290:	fbb1 f6f7 	udiv	r6, r1, r7
 8009294:	fb07 1416 	mls	r4, r7, r6, r1
 8009298:	3430      	adds	r4, #48	@ 0x30
 800929a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800929e:	460c      	mov	r4, r1
 80092a0:	2c63      	cmp	r4, #99	@ 0x63
 80092a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80092a6:	4631      	mov	r1, r6
 80092a8:	dcf1      	bgt.n	800928e <__exponent+0x1c>
 80092aa:	3130      	adds	r1, #48	@ 0x30
 80092ac:	1e94      	subs	r4, r2, #2
 80092ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80092b2:	1c41      	adds	r1, r0, #1
 80092b4:	4623      	mov	r3, r4
 80092b6:	42ab      	cmp	r3, r5
 80092b8:	d30a      	bcc.n	80092d0 <__exponent+0x5e>
 80092ba:	f10d 0309 	add.w	r3, sp, #9
 80092be:	1a9b      	subs	r3, r3, r2
 80092c0:	42ac      	cmp	r4, r5
 80092c2:	bf88      	it	hi
 80092c4:	2300      	movhi	r3, #0
 80092c6:	3302      	adds	r3, #2
 80092c8:	4403      	add	r3, r0
 80092ca:	1a18      	subs	r0, r3, r0
 80092cc:	b003      	add	sp, #12
 80092ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80092d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80092d8:	e7ed      	b.n	80092b6 <__exponent+0x44>
 80092da:	2330      	movs	r3, #48	@ 0x30
 80092dc:	3130      	adds	r1, #48	@ 0x30
 80092de:	7083      	strb	r3, [r0, #2]
 80092e0:	70c1      	strb	r1, [r0, #3]
 80092e2:	1d03      	adds	r3, r0, #4
 80092e4:	e7f1      	b.n	80092ca <__exponent+0x58>
	...

080092e8 <_printf_float>:
 80092e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ec:	b08d      	sub	sp, #52	@ 0x34
 80092ee:	460c      	mov	r4, r1
 80092f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80092f4:	4616      	mov	r6, r2
 80092f6:	461f      	mov	r7, r3
 80092f8:	4605      	mov	r5, r0
 80092fa:	f000 fe05 	bl	8009f08 <_localeconv_r>
 80092fe:	6803      	ldr	r3, [r0, #0]
 8009300:	9304      	str	r3, [sp, #16]
 8009302:	4618      	mov	r0, r3
 8009304:	f7f6 ffbc 	bl	8000280 <strlen>
 8009308:	2300      	movs	r3, #0
 800930a:	930a      	str	r3, [sp, #40]	@ 0x28
 800930c:	f8d8 3000 	ldr.w	r3, [r8]
 8009310:	9005      	str	r0, [sp, #20]
 8009312:	3307      	adds	r3, #7
 8009314:	f023 0307 	bic.w	r3, r3, #7
 8009318:	f103 0208 	add.w	r2, r3, #8
 800931c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009320:	f8d4 b000 	ldr.w	fp, [r4]
 8009324:	f8c8 2000 	str.w	r2, [r8]
 8009328:	e9d3 8900 	ldrd	r8, r9, [r3]
 800932c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009330:	9307      	str	r3, [sp, #28]
 8009332:	f8cd 8018 	str.w	r8, [sp, #24]
 8009336:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800933a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800933e:	4b9c      	ldr	r3, [pc, #624]	@ (80095b0 <_printf_float+0x2c8>)
 8009340:	f04f 32ff 	mov.w	r2, #4294967295
 8009344:	f7f7 fbfa 	bl	8000b3c <__aeabi_dcmpun>
 8009348:	bb70      	cbnz	r0, 80093a8 <_printf_float+0xc0>
 800934a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800934e:	4b98      	ldr	r3, [pc, #608]	@ (80095b0 <_printf_float+0x2c8>)
 8009350:	f04f 32ff 	mov.w	r2, #4294967295
 8009354:	f7f7 fbd4 	bl	8000b00 <__aeabi_dcmple>
 8009358:	bb30      	cbnz	r0, 80093a8 <_printf_float+0xc0>
 800935a:	2200      	movs	r2, #0
 800935c:	2300      	movs	r3, #0
 800935e:	4640      	mov	r0, r8
 8009360:	4649      	mov	r1, r9
 8009362:	f7f7 fbc3 	bl	8000aec <__aeabi_dcmplt>
 8009366:	b110      	cbz	r0, 800936e <_printf_float+0x86>
 8009368:	232d      	movs	r3, #45	@ 0x2d
 800936a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800936e:	4a91      	ldr	r2, [pc, #580]	@ (80095b4 <_printf_float+0x2cc>)
 8009370:	4b91      	ldr	r3, [pc, #580]	@ (80095b8 <_printf_float+0x2d0>)
 8009372:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009376:	bf94      	ite	ls
 8009378:	4690      	movls	r8, r2
 800937a:	4698      	movhi	r8, r3
 800937c:	2303      	movs	r3, #3
 800937e:	6123      	str	r3, [r4, #16]
 8009380:	f02b 0304 	bic.w	r3, fp, #4
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	f04f 0900 	mov.w	r9, #0
 800938a:	9700      	str	r7, [sp, #0]
 800938c:	4633      	mov	r3, r6
 800938e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009390:	4621      	mov	r1, r4
 8009392:	4628      	mov	r0, r5
 8009394:	f000 f9d2 	bl	800973c <_printf_common>
 8009398:	3001      	adds	r0, #1
 800939a:	f040 808d 	bne.w	80094b8 <_printf_float+0x1d0>
 800939e:	f04f 30ff 	mov.w	r0, #4294967295
 80093a2:	b00d      	add	sp, #52	@ 0x34
 80093a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a8:	4642      	mov	r2, r8
 80093aa:	464b      	mov	r3, r9
 80093ac:	4640      	mov	r0, r8
 80093ae:	4649      	mov	r1, r9
 80093b0:	f7f7 fbc4 	bl	8000b3c <__aeabi_dcmpun>
 80093b4:	b140      	cbz	r0, 80093c8 <_printf_float+0xe0>
 80093b6:	464b      	mov	r3, r9
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	bfbc      	itt	lt
 80093bc:	232d      	movlt	r3, #45	@ 0x2d
 80093be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80093c2:	4a7e      	ldr	r2, [pc, #504]	@ (80095bc <_printf_float+0x2d4>)
 80093c4:	4b7e      	ldr	r3, [pc, #504]	@ (80095c0 <_printf_float+0x2d8>)
 80093c6:	e7d4      	b.n	8009372 <_printf_float+0x8a>
 80093c8:	6863      	ldr	r3, [r4, #4]
 80093ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80093ce:	9206      	str	r2, [sp, #24]
 80093d0:	1c5a      	adds	r2, r3, #1
 80093d2:	d13b      	bne.n	800944c <_printf_float+0x164>
 80093d4:	2306      	movs	r3, #6
 80093d6:	6063      	str	r3, [r4, #4]
 80093d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80093dc:	2300      	movs	r3, #0
 80093de:	6022      	str	r2, [r4, #0]
 80093e0:	9303      	str	r3, [sp, #12]
 80093e2:	ab0a      	add	r3, sp, #40	@ 0x28
 80093e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80093e8:	ab09      	add	r3, sp, #36	@ 0x24
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	6861      	ldr	r1, [r4, #4]
 80093ee:	ec49 8b10 	vmov	d0, r8, r9
 80093f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80093f6:	4628      	mov	r0, r5
 80093f8:	f7ff fed6 	bl	80091a8 <__cvt>
 80093fc:	9b06      	ldr	r3, [sp, #24]
 80093fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009400:	2b47      	cmp	r3, #71	@ 0x47
 8009402:	4680      	mov	r8, r0
 8009404:	d129      	bne.n	800945a <_printf_float+0x172>
 8009406:	1cc8      	adds	r0, r1, #3
 8009408:	db02      	blt.n	8009410 <_printf_float+0x128>
 800940a:	6863      	ldr	r3, [r4, #4]
 800940c:	4299      	cmp	r1, r3
 800940e:	dd41      	ble.n	8009494 <_printf_float+0x1ac>
 8009410:	f1aa 0a02 	sub.w	sl, sl, #2
 8009414:	fa5f fa8a 	uxtb.w	sl, sl
 8009418:	3901      	subs	r1, #1
 800941a:	4652      	mov	r2, sl
 800941c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009420:	9109      	str	r1, [sp, #36]	@ 0x24
 8009422:	f7ff ff26 	bl	8009272 <__exponent>
 8009426:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009428:	1813      	adds	r3, r2, r0
 800942a:	2a01      	cmp	r2, #1
 800942c:	4681      	mov	r9, r0
 800942e:	6123      	str	r3, [r4, #16]
 8009430:	dc02      	bgt.n	8009438 <_printf_float+0x150>
 8009432:	6822      	ldr	r2, [r4, #0]
 8009434:	07d2      	lsls	r2, r2, #31
 8009436:	d501      	bpl.n	800943c <_printf_float+0x154>
 8009438:	3301      	adds	r3, #1
 800943a:	6123      	str	r3, [r4, #16]
 800943c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009440:	2b00      	cmp	r3, #0
 8009442:	d0a2      	beq.n	800938a <_printf_float+0xa2>
 8009444:	232d      	movs	r3, #45	@ 0x2d
 8009446:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800944a:	e79e      	b.n	800938a <_printf_float+0xa2>
 800944c:	9a06      	ldr	r2, [sp, #24]
 800944e:	2a47      	cmp	r2, #71	@ 0x47
 8009450:	d1c2      	bne.n	80093d8 <_printf_float+0xf0>
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1c0      	bne.n	80093d8 <_printf_float+0xf0>
 8009456:	2301      	movs	r3, #1
 8009458:	e7bd      	b.n	80093d6 <_printf_float+0xee>
 800945a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800945e:	d9db      	bls.n	8009418 <_printf_float+0x130>
 8009460:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009464:	d118      	bne.n	8009498 <_printf_float+0x1b0>
 8009466:	2900      	cmp	r1, #0
 8009468:	6863      	ldr	r3, [r4, #4]
 800946a:	dd0b      	ble.n	8009484 <_printf_float+0x19c>
 800946c:	6121      	str	r1, [r4, #16]
 800946e:	b913      	cbnz	r3, 8009476 <_printf_float+0x18e>
 8009470:	6822      	ldr	r2, [r4, #0]
 8009472:	07d0      	lsls	r0, r2, #31
 8009474:	d502      	bpl.n	800947c <_printf_float+0x194>
 8009476:	3301      	adds	r3, #1
 8009478:	440b      	add	r3, r1
 800947a:	6123      	str	r3, [r4, #16]
 800947c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800947e:	f04f 0900 	mov.w	r9, #0
 8009482:	e7db      	b.n	800943c <_printf_float+0x154>
 8009484:	b913      	cbnz	r3, 800948c <_printf_float+0x1a4>
 8009486:	6822      	ldr	r2, [r4, #0]
 8009488:	07d2      	lsls	r2, r2, #31
 800948a:	d501      	bpl.n	8009490 <_printf_float+0x1a8>
 800948c:	3302      	adds	r3, #2
 800948e:	e7f4      	b.n	800947a <_printf_float+0x192>
 8009490:	2301      	movs	r3, #1
 8009492:	e7f2      	b.n	800947a <_printf_float+0x192>
 8009494:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009498:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800949a:	4299      	cmp	r1, r3
 800949c:	db05      	blt.n	80094aa <_printf_float+0x1c2>
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	6121      	str	r1, [r4, #16]
 80094a2:	07d8      	lsls	r0, r3, #31
 80094a4:	d5ea      	bpl.n	800947c <_printf_float+0x194>
 80094a6:	1c4b      	adds	r3, r1, #1
 80094a8:	e7e7      	b.n	800947a <_printf_float+0x192>
 80094aa:	2900      	cmp	r1, #0
 80094ac:	bfd4      	ite	le
 80094ae:	f1c1 0202 	rsble	r2, r1, #2
 80094b2:	2201      	movgt	r2, #1
 80094b4:	4413      	add	r3, r2
 80094b6:	e7e0      	b.n	800947a <_printf_float+0x192>
 80094b8:	6823      	ldr	r3, [r4, #0]
 80094ba:	055a      	lsls	r2, r3, #21
 80094bc:	d407      	bmi.n	80094ce <_printf_float+0x1e6>
 80094be:	6923      	ldr	r3, [r4, #16]
 80094c0:	4642      	mov	r2, r8
 80094c2:	4631      	mov	r1, r6
 80094c4:	4628      	mov	r0, r5
 80094c6:	47b8      	blx	r7
 80094c8:	3001      	adds	r0, #1
 80094ca:	d12b      	bne.n	8009524 <_printf_float+0x23c>
 80094cc:	e767      	b.n	800939e <_printf_float+0xb6>
 80094ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80094d2:	f240 80dd 	bls.w	8009690 <_printf_float+0x3a8>
 80094d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80094da:	2200      	movs	r2, #0
 80094dc:	2300      	movs	r3, #0
 80094de:	f7f7 fafb 	bl	8000ad8 <__aeabi_dcmpeq>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d033      	beq.n	800954e <_printf_float+0x266>
 80094e6:	4a37      	ldr	r2, [pc, #220]	@ (80095c4 <_printf_float+0x2dc>)
 80094e8:	2301      	movs	r3, #1
 80094ea:	4631      	mov	r1, r6
 80094ec:	4628      	mov	r0, r5
 80094ee:	47b8      	blx	r7
 80094f0:	3001      	adds	r0, #1
 80094f2:	f43f af54 	beq.w	800939e <_printf_float+0xb6>
 80094f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80094fa:	4543      	cmp	r3, r8
 80094fc:	db02      	blt.n	8009504 <_printf_float+0x21c>
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	07d8      	lsls	r0, r3, #31
 8009502:	d50f      	bpl.n	8009524 <_printf_float+0x23c>
 8009504:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009508:	4631      	mov	r1, r6
 800950a:	4628      	mov	r0, r5
 800950c:	47b8      	blx	r7
 800950e:	3001      	adds	r0, #1
 8009510:	f43f af45 	beq.w	800939e <_printf_float+0xb6>
 8009514:	f04f 0900 	mov.w	r9, #0
 8009518:	f108 38ff 	add.w	r8, r8, #4294967295
 800951c:	f104 0a1a 	add.w	sl, r4, #26
 8009520:	45c8      	cmp	r8, r9
 8009522:	dc09      	bgt.n	8009538 <_printf_float+0x250>
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	079b      	lsls	r3, r3, #30
 8009528:	f100 8103 	bmi.w	8009732 <_printf_float+0x44a>
 800952c:	68e0      	ldr	r0, [r4, #12]
 800952e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009530:	4298      	cmp	r0, r3
 8009532:	bfb8      	it	lt
 8009534:	4618      	movlt	r0, r3
 8009536:	e734      	b.n	80093a2 <_printf_float+0xba>
 8009538:	2301      	movs	r3, #1
 800953a:	4652      	mov	r2, sl
 800953c:	4631      	mov	r1, r6
 800953e:	4628      	mov	r0, r5
 8009540:	47b8      	blx	r7
 8009542:	3001      	adds	r0, #1
 8009544:	f43f af2b 	beq.w	800939e <_printf_float+0xb6>
 8009548:	f109 0901 	add.w	r9, r9, #1
 800954c:	e7e8      	b.n	8009520 <_printf_float+0x238>
 800954e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009550:	2b00      	cmp	r3, #0
 8009552:	dc39      	bgt.n	80095c8 <_printf_float+0x2e0>
 8009554:	4a1b      	ldr	r2, [pc, #108]	@ (80095c4 <_printf_float+0x2dc>)
 8009556:	2301      	movs	r3, #1
 8009558:	4631      	mov	r1, r6
 800955a:	4628      	mov	r0, r5
 800955c:	47b8      	blx	r7
 800955e:	3001      	adds	r0, #1
 8009560:	f43f af1d 	beq.w	800939e <_printf_float+0xb6>
 8009564:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009568:	ea59 0303 	orrs.w	r3, r9, r3
 800956c:	d102      	bne.n	8009574 <_printf_float+0x28c>
 800956e:	6823      	ldr	r3, [r4, #0]
 8009570:	07d9      	lsls	r1, r3, #31
 8009572:	d5d7      	bpl.n	8009524 <_printf_float+0x23c>
 8009574:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009578:	4631      	mov	r1, r6
 800957a:	4628      	mov	r0, r5
 800957c:	47b8      	blx	r7
 800957e:	3001      	adds	r0, #1
 8009580:	f43f af0d 	beq.w	800939e <_printf_float+0xb6>
 8009584:	f04f 0a00 	mov.w	sl, #0
 8009588:	f104 0b1a 	add.w	fp, r4, #26
 800958c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800958e:	425b      	negs	r3, r3
 8009590:	4553      	cmp	r3, sl
 8009592:	dc01      	bgt.n	8009598 <_printf_float+0x2b0>
 8009594:	464b      	mov	r3, r9
 8009596:	e793      	b.n	80094c0 <_printf_float+0x1d8>
 8009598:	2301      	movs	r3, #1
 800959a:	465a      	mov	r2, fp
 800959c:	4631      	mov	r1, r6
 800959e:	4628      	mov	r0, r5
 80095a0:	47b8      	blx	r7
 80095a2:	3001      	adds	r0, #1
 80095a4:	f43f aefb 	beq.w	800939e <_printf_float+0xb6>
 80095a8:	f10a 0a01 	add.w	sl, sl, #1
 80095ac:	e7ee      	b.n	800958c <_printf_float+0x2a4>
 80095ae:	bf00      	nop
 80095b0:	7fefffff 	.word	0x7fefffff
 80095b4:	0800c724 	.word	0x0800c724
 80095b8:	0800c728 	.word	0x0800c728
 80095bc:	0800c72c 	.word	0x0800c72c
 80095c0:	0800c730 	.word	0x0800c730
 80095c4:	0800c734 	.word	0x0800c734
 80095c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80095ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80095ce:	4553      	cmp	r3, sl
 80095d0:	bfa8      	it	ge
 80095d2:	4653      	movge	r3, sl
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	4699      	mov	r9, r3
 80095d8:	dc36      	bgt.n	8009648 <_printf_float+0x360>
 80095da:	f04f 0b00 	mov.w	fp, #0
 80095de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095e2:	f104 021a 	add.w	r2, r4, #26
 80095e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80095e8:	9306      	str	r3, [sp, #24]
 80095ea:	eba3 0309 	sub.w	r3, r3, r9
 80095ee:	455b      	cmp	r3, fp
 80095f0:	dc31      	bgt.n	8009656 <_printf_float+0x36e>
 80095f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095f4:	459a      	cmp	sl, r3
 80095f6:	dc3a      	bgt.n	800966e <_printf_float+0x386>
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	07da      	lsls	r2, r3, #31
 80095fc:	d437      	bmi.n	800966e <_printf_float+0x386>
 80095fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009600:	ebaa 0903 	sub.w	r9, sl, r3
 8009604:	9b06      	ldr	r3, [sp, #24]
 8009606:	ebaa 0303 	sub.w	r3, sl, r3
 800960a:	4599      	cmp	r9, r3
 800960c:	bfa8      	it	ge
 800960e:	4699      	movge	r9, r3
 8009610:	f1b9 0f00 	cmp.w	r9, #0
 8009614:	dc33      	bgt.n	800967e <_printf_float+0x396>
 8009616:	f04f 0800 	mov.w	r8, #0
 800961a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800961e:	f104 0b1a 	add.w	fp, r4, #26
 8009622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009624:	ebaa 0303 	sub.w	r3, sl, r3
 8009628:	eba3 0309 	sub.w	r3, r3, r9
 800962c:	4543      	cmp	r3, r8
 800962e:	f77f af79 	ble.w	8009524 <_printf_float+0x23c>
 8009632:	2301      	movs	r3, #1
 8009634:	465a      	mov	r2, fp
 8009636:	4631      	mov	r1, r6
 8009638:	4628      	mov	r0, r5
 800963a:	47b8      	blx	r7
 800963c:	3001      	adds	r0, #1
 800963e:	f43f aeae 	beq.w	800939e <_printf_float+0xb6>
 8009642:	f108 0801 	add.w	r8, r8, #1
 8009646:	e7ec      	b.n	8009622 <_printf_float+0x33a>
 8009648:	4642      	mov	r2, r8
 800964a:	4631      	mov	r1, r6
 800964c:	4628      	mov	r0, r5
 800964e:	47b8      	blx	r7
 8009650:	3001      	adds	r0, #1
 8009652:	d1c2      	bne.n	80095da <_printf_float+0x2f2>
 8009654:	e6a3      	b.n	800939e <_printf_float+0xb6>
 8009656:	2301      	movs	r3, #1
 8009658:	4631      	mov	r1, r6
 800965a:	4628      	mov	r0, r5
 800965c:	9206      	str	r2, [sp, #24]
 800965e:	47b8      	blx	r7
 8009660:	3001      	adds	r0, #1
 8009662:	f43f ae9c 	beq.w	800939e <_printf_float+0xb6>
 8009666:	9a06      	ldr	r2, [sp, #24]
 8009668:	f10b 0b01 	add.w	fp, fp, #1
 800966c:	e7bb      	b.n	80095e6 <_printf_float+0x2fe>
 800966e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009672:	4631      	mov	r1, r6
 8009674:	4628      	mov	r0, r5
 8009676:	47b8      	blx	r7
 8009678:	3001      	adds	r0, #1
 800967a:	d1c0      	bne.n	80095fe <_printf_float+0x316>
 800967c:	e68f      	b.n	800939e <_printf_float+0xb6>
 800967e:	9a06      	ldr	r2, [sp, #24]
 8009680:	464b      	mov	r3, r9
 8009682:	4442      	add	r2, r8
 8009684:	4631      	mov	r1, r6
 8009686:	4628      	mov	r0, r5
 8009688:	47b8      	blx	r7
 800968a:	3001      	adds	r0, #1
 800968c:	d1c3      	bne.n	8009616 <_printf_float+0x32e>
 800968e:	e686      	b.n	800939e <_printf_float+0xb6>
 8009690:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009694:	f1ba 0f01 	cmp.w	sl, #1
 8009698:	dc01      	bgt.n	800969e <_printf_float+0x3b6>
 800969a:	07db      	lsls	r3, r3, #31
 800969c:	d536      	bpl.n	800970c <_printf_float+0x424>
 800969e:	2301      	movs	r3, #1
 80096a0:	4642      	mov	r2, r8
 80096a2:	4631      	mov	r1, r6
 80096a4:	4628      	mov	r0, r5
 80096a6:	47b8      	blx	r7
 80096a8:	3001      	adds	r0, #1
 80096aa:	f43f ae78 	beq.w	800939e <_printf_float+0xb6>
 80096ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096b2:	4631      	mov	r1, r6
 80096b4:	4628      	mov	r0, r5
 80096b6:	47b8      	blx	r7
 80096b8:	3001      	adds	r0, #1
 80096ba:	f43f ae70 	beq.w	800939e <_printf_float+0xb6>
 80096be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80096c2:	2200      	movs	r2, #0
 80096c4:	2300      	movs	r3, #0
 80096c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096ca:	f7f7 fa05 	bl	8000ad8 <__aeabi_dcmpeq>
 80096ce:	b9c0      	cbnz	r0, 8009702 <_printf_float+0x41a>
 80096d0:	4653      	mov	r3, sl
 80096d2:	f108 0201 	add.w	r2, r8, #1
 80096d6:	4631      	mov	r1, r6
 80096d8:	4628      	mov	r0, r5
 80096da:	47b8      	blx	r7
 80096dc:	3001      	adds	r0, #1
 80096de:	d10c      	bne.n	80096fa <_printf_float+0x412>
 80096e0:	e65d      	b.n	800939e <_printf_float+0xb6>
 80096e2:	2301      	movs	r3, #1
 80096e4:	465a      	mov	r2, fp
 80096e6:	4631      	mov	r1, r6
 80096e8:	4628      	mov	r0, r5
 80096ea:	47b8      	blx	r7
 80096ec:	3001      	adds	r0, #1
 80096ee:	f43f ae56 	beq.w	800939e <_printf_float+0xb6>
 80096f2:	f108 0801 	add.w	r8, r8, #1
 80096f6:	45d0      	cmp	r8, sl
 80096f8:	dbf3      	blt.n	80096e2 <_printf_float+0x3fa>
 80096fa:	464b      	mov	r3, r9
 80096fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009700:	e6df      	b.n	80094c2 <_printf_float+0x1da>
 8009702:	f04f 0800 	mov.w	r8, #0
 8009706:	f104 0b1a 	add.w	fp, r4, #26
 800970a:	e7f4      	b.n	80096f6 <_printf_float+0x40e>
 800970c:	2301      	movs	r3, #1
 800970e:	4642      	mov	r2, r8
 8009710:	e7e1      	b.n	80096d6 <_printf_float+0x3ee>
 8009712:	2301      	movs	r3, #1
 8009714:	464a      	mov	r2, r9
 8009716:	4631      	mov	r1, r6
 8009718:	4628      	mov	r0, r5
 800971a:	47b8      	blx	r7
 800971c:	3001      	adds	r0, #1
 800971e:	f43f ae3e 	beq.w	800939e <_printf_float+0xb6>
 8009722:	f108 0801 	add.w	r8, r8, #1
 8009726:	68e3      	ldr	r3, [r4, #12]
 8009728:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800972a:	1a5b      	subs	r3, r3, r1
 800972c:	4543      	cmp	r3, r8
 800972e:	dcf0      	bgt.n	8009712 <_printf_float+0x42a>
 8009730:	e6fc      	b.n	800952c <_printf_float+0x244>
 8009732:	f04f 0800 	mov.w	r8, #0
 8009736:	f104 0919 	add.w	r9, r4, #25
 800973a:	e7f4      	b.n	8009726 <_printf_float+0x43e>

0800973c <_printf_common>:
 800973c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009740:	4616      	mov	r6, r2
 8009742:	4698      	mov	r8, r3
 8009744:	688a      	ldr	r2, [r1, #8]
 8009746:	690b      	ldr	r3, [r1, #16]
 8009748:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800974c:	4293      	cmp	r3, r2
 800974e:	bfb8      	it	lt
 8009750:	4613      	movlt	r3, r2
 8009752:	6033      	str	r3, [r6, #0]
 8009754:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009758:	4607      	mov	r7, r0
 800975a:	460c      	mov	r4, r1
 800975c:	b10a      	cbz	r2, 8009762 <_printf_common+0x26>
 800975e:	3301      	adds	r3, #1
 8009760:	6033      	str	r3, [r6, #0]
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	0699      	lsls	r1, r3, #26
 8009766:	bf42      	ittt	mi
 8009768:	6833      	ldrmi	r3, [r6, #0]
 800976a:	3302      	addmi	r3, #2
 800976c:	6033      	strmi	r3, [r6, #0]
 800976e:	6825      	ldr	r5, [r4, #0]
 8009770:	f015 0506 	ands.w	r5, r5, #6
 8009774:	d106      	bne.n	8009784 <_printf_common+0x48>
 8009776:	f104 0a19 	add.w	sl, r4, #25
 800977a:	68e3      	ldr	r3, [r4, #12]
 800977c:	6832      	ldr	r2, [r6, #0]
 800977e:	1a9b      	subs	r3, r3, r2
 8009780:	42ab      	cmp	r3, r5
 8009782:	dc26      	bgt.n	80097d2 <_printf_common+0x96>
 8009784:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009788:	6822      	ldr	r2, [r4, #0]
 800978a:	3b00      	subs	r3, #0
 800978c:	bf18      	it	ne
 800978e:	2301      	movne	r3, #1
 8009790:	0692      	lsls	r2, r2, #26
 8009792:	d42b      	bmi.n	80097ec <_printf_common+0xb0>
 8009794:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009798:	4641      	mov	r1, r8
 800979a:	4638      	mov	r0, r7
 800979c:	47c8      	blx	r9
 800979e:	3001      	adds	r0, #1
 80097a0:	d01e      	beq.n	80097e0 <_printf_common+0xa4>
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	6922      	ldr	r2, [r4, #16]
 80097a6:	f003 0306 	and.w	r3, r3, #6
 80097aa:	2b04      	cmp	r3, #4
 80097ac:	bf02      	ittt	eq
 80097ae:	68e5      	ldreq	r5, [r4, #12]
 80097b0:	6833      	ldreq	r3, [r6, #0]
 80097b2:	1aed      	subeq	r5, r5, r3
 80097b4:	68a3      	ldr	r3, [r4, #8]
 80097b6:	bf0c      	ite	eq
 80097b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097bc:	2500      	movne	r5, #0
 80097be:	4293      	cmp	r3, r2
 80097c0:	bfc4      	itt	gt
 80097c2:	1a9b      	subgt	r3, r3, r2
 80097c4:	18ed      	addgt	r5, r5, r3
 80097c6:	2600      	movs	r6, #0
 80097c8:	341a      	adds	r4, #26
 80097ca:	42b5      	cmp	r5, r6
 80097cc:	d11a      	bne.n	8009804 <_printf_common+0xc8>
 80097ce:	2000      	movs	r0, #0
 80097d0:	e008      	b.n	80097e4 <_printf_common+0xa8>
 80097d2:	2301      	movs	r3, #1
 80097d4:	4652      	mov	r2, sl
 80097d6:	4641      	mov	r1, r8
 80097d8:	4638      	mov	r0, r7
 80097da:	47c8      	blx	r9
 80097dc:	3001      	adds	r0, #1
 80097de:	d103      	bne.n	80097e8 <_printf_common+0xac>
 80097e0:	f04f 30ff 	mov.w	r0, #4294967295
 80097e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e8:	3501      	adds	r5, #1
 80097ea:	e7c6      	b.n	800977a <_printf_common+0x3e>
 80097ec:	18e1      	adds	r1, r4, r3
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	2030      	movs	r0, #48	@ 0x30
 80097f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80097f6:	4422      	add	r2, r4
 80097f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80097fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009800:	3302      	adds	r3, #2
 8009802:	e7c7      	b.n	8009794 <_printf_common+0x58>
 8009804:	2301      	movs	r3, #1
 8009806:	4622      	mov	r2, r4
 8009808:	4641      	mov	r1, r8
 800980a:	4638      	mov	r0, r7
 800980c:	47c8      	blx	r9
 800980e:	3001      	adds	r0, #1
 8009810:	d0e6      	beq.n	80097e0 <_printf_common+0xa4>
 8009812:	3601      	adds	r6, #1
 8009814:	e7d9      	b.n	80097ca <_printf_common+0x8e>
	...

08009818 <_printf_i>:
 8009818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800981c:	7e0f      	ldrb	r7, [r1, #24]
 800981e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009820:	2f78      	cmp	r7, #120	@ 0x78
 8009822:	4691      	mov	r9, r2
 8009824:	4680      	mov	r8, r0
 8009826:	460c      	mov	r4, r1
 8009828:	469a      	mov	sl, r3
 800982a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800982e:	d807      	bhi.n	8009840 <_printf_i+0x28>
 8009830:	2f62      	cmp	r7, #98	@ 0x62
 8009832:	d80a      	bhi.n	800984a <_printf_i+0x32>
 8009834:	2f00      	cmp	r7, #0
 8009836:	f000 80d2 	beq.w	80099de <_printf_i+0x1c6>
 800983a:	2f58      	cmp	r7, #88	@ 0x58
 800983c:	f000 80b9 	beq.w	80099b2 <_printf_i+0x19a>
 8009840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009844:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009848:	e03a      	b.n	80098c0 <_printf_i+0xa8>
 800984a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800984e:	2b15      	cmp	r3, #21
 8009850:	d8f6      	bhi.n	8009840 <_printf_i+0x28>
 8009852:	a101      	add	r1, pc, #4	@ (adr r1, 8009858 <_printf_i+0x40>)
 8009854:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009858:	080098b1 	.word	0x080098b1
 800985c:	080098c5 	.word	0x080098c5
 8009860:	08009841 	.word	0x08009841
 8009864:	08009841 	.word	0x08009841
 8009868:	08009841 	.word	0x08009841
 800986c:	08009841 	.word	0x08009841
 8009870:	080098c5 	.word	0x080098c5
 8009874:	08009841 	.word	0x08009841
 8009878:	08009841 	.word	0x08009841
 800987c:	08009841 	.word	0x08009841
 8009880:	08009841 	.word	0x08009841
 8009884:	080099c5 	.word	0x080099c5
 8009888:	080098ef 	.word	0x080098ef
 800988c:	0800997f 	.word	0x0800997f
 8009890:	08009841 	.word	0x08009841
 8009894:	08009841 	.word	0x08009841
 8009898:	080099e7 	.word	0x080099e7
 800989c:	08009841 	.word	0x08009841
 80098a0:	080098ef 	.word	0x080098ef
 80098a4:	08009841 	.word	0x08009841
 80098a8:	08009841 	.word	0x08009841
 80098ac:	08009987 	.word	0x08009987
 80098b0:	6833      	ldr	r3, [r6, #0]
 80098b2:	1d1a      	adds	r2, r3, #4
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6032      	str	r2, [r6, #0]
 80098b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80098c0:	2301      	movs	r3, #1
 80098c2:	e09d      	b.n	8009a00 <_printf_i+0x1e8>
 80098c4:	6833      	ldr	r3, [r6, #0]
 80098c6:	6820      	ldr	r0, [r4, #0]
 80098c8:	1d19      	adds	r1, r3, #4
 80098ca:	6031      	str	r1, [r6, #0]
 80098cc:	0606      	lsls	r6, r0, #24
 80098ce:	d501      	bpl.n	80098d4 <_printf_i+0xbc>
 80098d0:	681d      	ldr	r5, [r3, #0]
 80098d2:	e003      	b.n	80098dc <_printf_i+0xc4>
 80098d4:	0645      	lsls	r5, r0, #25
 80098d6:	d5fb      	bpl.n	80098d0 <_printf_i+0xb8>
 80098d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80098dc:	2d00      	cmp	r5, #0
 80098de:	da03      	bge.n	80098e8 <_printf_i+0xd0>
 80098e0:	232d      	movs	r3, #45	@ 0x2d
 80098e2:	426d      	negs	r5, r5
 80098e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098e8:	4859      	ldr	r0, [pc, #356]	@ (8009a50 <_printf_i+0x238>)
 80098ea:	230a      	movs	r3, #10
 80098ec:	e011      	b.n	8009912 <_printf_i+0xfa>
 80098ee:	6821      	ldr	r1, [r4, #0]
 80098f0:	6833      	ldr	r3, [r6, #0]
 80098f2:	0608      	lsls	r0, r1, #24
 80098f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80098f8:	d402      	bmi.n	8009900 <_printf_i+0xe8>
 80098fa:	0649      	lsls	r1, r1, #25
 80098fc:	bf48      	it	mi
 80098fe:	b2ad      	uxthmi	r5, r5
 8009900:	2f6f      	cmp	r7, #111	@ 0x6f
 8009902:	4853      	ldr	r0, [pc, #332]	@ (8009a50 <_printf_i+0x238>)
 8009904:	6033      	str	r3, [r6, #0]
 8009906:	bf14      	ite	ne
 8009908:	230a      	movne	r3, #10
 800990a:	2308      	moveq	r3, #8
 800990c:	2100      	movs	r1, #0
 800990e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009912:	6866      	ldr	r6, [r4, #4]
 8009914:	60a6      	str	r6, [r4, #8]
 8009916:	2e00      	cmp	r6, #0
 8009918:	bfa2      	ittt	ge
 800991a:	6821      	ldrge	r1, [r4, #0]
 800991c:	f021 0104 	bicge.w	r1, r1, #4
 8009920:	6021      	strge	r1, [r4, #0]
 8009922:	b90d      	cbnz	r5, 8009928 <_printf_i+0x110>
 8009924:	2e00      	cmp	r6, #0
 8009926:	d04b      	beq.n	80099c0 <_printf_i+0x1a8>
 8009928:	4616      	mov	r6, r2
 800992a:	fbb5 f1f3 	udiv	r1, r5, r3
 800992e:	fb03 5711 	mls	r7, r3, r1, r5
 8009932:	5dc7      	ldrb	r7, [r0, r7]
 8009934:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009938:	462f      	mov	r7, r5
 800993a:	42bb      	cmp	r3, r7
 800993c:	460d      	mov	r5, r1
 800993e:	d9f4      	bls.n	800992a <_printf_i+0x112>
 8009940:	2b08      	cmp	r3, #8
 8009942:	d10b      	bne.n	800995c <_printf_i+0x144>
 8009944:	6823      	ldr	r3, [r4, #0]
 8009946:	07df      	lsls	r7, r3, #31
 8009948:	d508      	bpl.n	800995c <_printf_i+0x144>
 800994a:	6923      	ldr	r3, [r4, #16]
 800994c:	6861      	ldr	r1, [r4, #4]
 800994e:	4299      	cmp	r1, r3
 8009950:	bfde      	ittt	le
 8009952:	2330      	movle	r3, #48	@ 0x30
 8009954:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009958:	f106 36ff 	addle.w	r6, r6, #4294967295
 800995c:	1b92      	subs	r2, r2, r6
 800995e:	6122      	str	r2, [r4, #16]
 8009960:	f8cd a000 	str.w	sl, [sp]
 8009964:	464b      	mov	r3, r9
 8009966:	aa03      	add	r2, sp, #12
 8009968:	4621      	mov	r1, r4
 800996a:	4640      	mov	r0, r8
 800996c:	f7ff fee6 	bl	800973c <_printf_common>
 8009970:	3001      	adds	r0, #1
 8009972:	d14a      	bne.n	8009a0a <_printf_i+0x1f2>
 8009974:	f04f 30ff 	mov.w	r0, #4294967295
 8009978:	b004      	add	sp, #16
 800997a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	f043 0320 	orr.w	r3, r3, #32
 8009984:	6023      	str	r3, [r4, #0]
 8009986:	4833      	ldr	r0, [pc, #204]	@ (8009a54 <_printf_i+0x23c>)
 8009988:	2778      	movs	r7, #120	@ 0x78
 800998a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	6831      	ldr	r1, [r6, #0]
 8009992:	061f      	lsls	r7, r3, #24
 8009994:	f851 5b04 	ldr.w	r5, [r1], #4
 8009998:	d402      	bmi.n	80099a0 <_printf_i+0x188>
 800999a:	065f      	lsls	r7, r3, #25
 800999c:	bf48      	it	mi
 800999e:	b2ad      	uxthmi	r5, r5
 80099a0:	6031      	str	r1, [r6, #0]
 80099a2:	07d9      	lsls	r1, r3, #31
 80099a4:	bf44      	itt	mi
 80099a6:	f043 0320 	orrmi.w	r3, r3, #32
 80099aa:	6023      	strmi	r3, [r4, #0]
 80099ac:	b11d      	cbz	r5, 80099b6 <_printf_i+0x19e>
 80099ae:	2310      	movs	r3, #16
 80099b0:	e7ac      	b.n	800990c <_printf_i+0xf4>
 80099b2:	4827      	ldr	r0, [pc, #156]	@ (8009a50 <_printf_i+0x238>)
 80099b4:	e7e9      	b.n	800998a <_printf_i+0x172>
 80099b6:	6823      	ldr	r3, [r4, #0]
 80099b8:	f023 0320 	bic.w	r3, r3, #32
 80099bc:	6023      	str	r3, [r4, #0]
 80099be:	e7f6      	b.n	80099ae <_printf_i+0x196>
 80099c0:	4616      	mov	r6, r2
 80099c2:	e7bd      	b.n	8009940 <_printf_i+0x128>
 80099c4:	6833      	ldr	r3, [r6, #0]
 80099c6:	6825      	ldr	r5, [r4, #0]
 80099c8:	6961      	ldr	r1, [r4, #20]
 80099ca:	1d18      	adds	r0, r3, #4
 80099cc:	6030      	str	r0, [r6, #0]
 80099ce:	062e      	lsls	r6, r5, #24
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	d501      	bpl.n	80099d8 <_printf_i+0x1c0>
 80099d4:	6019      	str	r1, [r3, #0]
 80099d6:	e002      	b.n	80099de <_printf_i+0x1c6>
 80099d8:	0668      	lsls	r0, r5, #25
 80099da:	d5fb      	bpl.n	80099d4 <_printf_i+0x1bc>
 80099dc:	8019      	strh	r1, [r3, #0]
 80099de:	2300      	movs	r3, #0
 80099e0:	6123      	str	r3, [r4, #16]
 80099e2:	4616      	mov	r6, r2
 80099e4:	e7bc      	b.n	8009960 <_printf_i+0x148>
 80099e6:	6833      	ldr	r3, [r6, #0]
 80099e8:	1d1a      	adds	r2, r3, #4
 80099ea:	6032      	str	r2, [r6, #0]
 80099ec:	681e      	ldr	r6, [r3, #0]
 80099ee:	6862      	ldr	r2, [r4, #4]
 80099f0:	2100      	movs	r1, #0
 80099f2:	4630      	mov	r0, r6
 80099f4:	f7f6 fbf4 	bl	80001e0 <memchr>
 80099f8:	b108      	cbz	r0, 80099fe <_printf_i+0x1e6>
 80099fa:	1b80      	subs	r0, r0, r6
 80099fc:	6060      	str	r0, [r4, #4]
 80099fe:	6863      	ldr	r3, [r4, #4]
 8009a00:	6123      	str	r3, [r4, #16]
 8009a02:	2300      	movs	r3, #0
 8009a04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a08:	e7aa      	b.n	8009960 <_printf_i+0x148>
 8009a0a:	6923      	ldr	r3, [r4, #16]
 8009a0c:	4632      	mov	r2, r6
 8009a0e:	4649      	mov	r1, r9
 8009a10:	4640      	mov	r0, r8
 8009a12:	47d0      	blx	sl
 8009a14:	3001      	adds	r0, #1
 8009a16:	d0ad      	beq.n	8009974 <_printf_i+0x15c>
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	079b      	lsls	r3, r3, #30
 8009a1c:	d413      	bmi.n	8009a46 <_printf_i+0x22e>
 8009a1e:	68e0      	ldr	r0, [r4, #12]
 8009a20:	9b03      	ldr	r3, [sp, #12]
 8009a22:	4298      	cmp	r0, r3
 8009a24:	bfb8      	it	lt
 8009a26:	4618      	movlt	r0, r3
 8009a28:	e7a6      	b.n	8009978 <_printf_i+0x160>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	4632      	mov	r2, r6
 8009a2e:	4649      	mov	r1, r9
 8009a30:	4640      	mov	r0, r8
 8009a32:	47d0      	blx	sl
 8009a34:	3001      	adds	r0, #1
 8009a36:	d09d      	beq.n	8009974 <_printf_i+0x15c>
 8009a38:	3501      	adds	r5, #1
 8009a3a:	68e3      	ldr	r3, [r4, #12]
 8009a3c:	9903      	ldr	r1, [sp, #12]
 8009a3e:	1a5b      	subs	r3, r3, r1
 8009a40:	42ab      	cmp	r3, r5
 8009a42:	dcf2      	bgt.n	8009a2a <_printf_i+0x212>
 8009a44:	e7eb      	b.n	8009a1e <_printf_i+0x206>
 8009a46:	2500      	movs	r5, #0
 8009a48:	f104 0619 	add.w	r6, r4, #25
 8009a4c:	e7f5      	b.n	8009a3a <_printf_i+0x222>
 8009a4e:	bf00      	nop
 8009a50:	0800c736 	.word	0x0800c736
 8009a54:	0800c747 	.word	0x0800c747

08009a58 <std>:
 8009a58:	2300      	movs	r3, #0
 8009a5a:	b510      	push	{r4, lr}
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8009a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a66:	6083      	str	r3, [r0, #8]
 8009a68:	8181      	strh	r1, [r0, #12]
 8009a6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009a6c:	81c2      	strh	r2, [r0, #14]
 8009a6e:	6183      	str	r3, [r0, #24]
 8009a70:	4619      	mov	r1, r3
 8009a72:	2208      	movs	r2, #8
 8009a74:	305c      	adds	r0, #92	@ 0x5c
 8009a76:	f000 fa3f 	bl	8009ef8 <memset>
 8009a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab0 <std+0x58>)
 8009a7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab4 <std+0x5c>)
 8009a80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009a82:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab8 <std+0x60>)
 8009a84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a86:	4b0d      	ldr	r3, [pc, #52]	@ (8009abc <std+0x64>)
 8009a88:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ac0 <std+0x68>)
 8009a8c:	6224      	str	r4, [r4, #32]
 8009a8e:	429c      	cmp	r4, r3
 8009a90:	d006      	beq.n	8009aa0 <std+0x48>
 8009a92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a96:	4294      	cmp	r4, r2
 8009a98:	d002      	beq.n	8009aa0 <std+0x48>
 8009a9a:	33d0      	adds	r3, #208	@ 0xd0
 8009a9c:	429c      	cmp	r4, r3
 8009a9e:	d105      	bne.n	8009aac <std+0x54>
 8009aa0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aa8:	f000 baa2 	b.w	8009ff0 <__retarget_lock_init_recursive>
 8009aac:	bd10      	pop	{r4, pc}
 8009aae:	bf00      	nop
 8009ab0:	08009cd9 	.word	0x08009cd9
 8009ab4:	08009cfb 	.word	0x08009cfb
 8009ab8:	08009d33 	.word	0x08009d33
 8009abc:	08009d57 	.word	0x08009d57
 8009ac0:	20004e5c 	.word	0x20004e5c

08009ac4 <stdio_exit_handler>:
 8009ac4:	4a02      	ldr	r2, [pc, #8]	@ (8009ad0 <stdio_exit_handler+0xc>)
 8009ac6:	4903      	ldr	r1, [pc, #12]	@ (8009ad4 <stdio_exit_handler+0x10>)
 8009ac8:	4803      	ldr	r0, [pc, #12]	@ (8009ad8 <stdio_exit_handler+0x14>)
 8009aca:	f000 b869 	b.w	8009ba0 <_fwalk_sglue>
 8009ace:	bf00      	nop
 8009ad0:	20000160 	.word	0x20000160
 8009ad4:	0800b9a5 	.word	0x0800b9a5
 8009ad8:	20000170 	.word	0x20000170

08009adc <cleanup_stdio>:
 8009adc:	6841      	ldr	r1, [r0, #4]
 8009ade:	4b0c      	ldr	r3, [pc, #48]	@ (8009b10 <cleanup_stdio+0x34>)
 8009ae0:	4299      	cmp	r1, r3
 8009ae2:	b510      	push	{r4, lr}
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	d001      	beq.n	8009aec <cleanup_stdio+0x10>
 8009ae8:	f001 ff5c 	bl	800b9a4 <_fflush_r>
 8009aec:	68a1      	ldr	r1, [r4, #8]
 8009aee:	4b09      	ldr	r3, [pc, #36]	@ (8009b14 <cleanup_stdio+0x38>)
 8009af0:	4299      	cmp	r1, r3
 8009af2:	d002      	beq.n	8009afa <cleanup_stdio+0x1e>
 8009af4:	4620      	mov	r0, r4
 8009af6:	f001 ff55 	bl	800b9a4 <_fflush_r>
 8009afa:	68e1      	ldr	r1, [r4, #12]
 8009afc:	4b06      	ldr	r3, [pc, #24]	@ (8009b18 <cleanup_stdio+0x3c>)
 8009afe:	4299      	cmp	r1, r3
 8009b00:	d004      	beq.n	8009b0c <cleanup_stdio+0x30>
 8009b02:	4620      	mov	r0, r4
 8009b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b08:	f001 bf4c 	b.w	800b9a4 <_fflush_r>
 8009b0c:	bd10      	pop	{r4, pc}
 8009b0e:	bf00      	nop
 8009b10:	20004e5c 	.word	0x20004e5c
 8009b14:	20004ec4 	.word	0x20004ec4
 8009b18:	20004f2c 	.word	0x20004f2c

08009b1c <global_stdio_init.part.0>:
 8009b1c:	b510      	push	{r4, lr}
 8009b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8009b4c <global_stdio_init.part.0+0x30>)
 8009b20:	4c0b      	ldr	r4, [pc, #44]	@ (8009b50 <global_stdio_init.part.0+0x34>)
 8009b22:	4a0c      	ldr	r2, [pc, #48]	@ (8009b54 <global_stdio_init.part.0+0x38>)
 8009b24:	601a      	str	r2, [r3, #0]
 8009b26:	4620      	mov	r0, r4
 8009b28:	2200      	movs	r2, #0
 8009b2a:	2104      	movs	r1, #4
 8009b2c:	f7ff ff94 	bl	8009a58 <std>
 8009b30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009b34:	2201      	movs	r2, #1
 8009b36:	2109      	movs	r1, #9
 8009b38:	f7ff ff8e 	bl	8009a58 <std>
 8009b3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009b40:	2202      	movs	r2, #2
 8009b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b46:	2112      	movs	r1, #18
 8009b48:	f7ff bf86 	b.w	8009a58 <std>
 8009b4c:	20004f94 	.word	0x20004f94
 8009b50:	20004e5c 	.word	0x20004e5c
 8009b54:	08009ac5 	.word	0x08009ac5

08009b58 <__sfp_lock_acquire>:
 8009b58:	4801      	ldr	r0, [pc, #4]	@ (8009b60 <__sfp_lock_acquire+0x8>)
 8009b5a:	f000 ba4a 	b.w	8009ff2 <__retarget_lock_acquire_recursive>
 8009b5e:	bf00      	nop
 8009b60:	20004f9d 	.word	0x20004f9d

08009b64 <__sfp_lock_release>:
 8009b64:	4801      	ldr	r0, [pc, #4]	@ (8009b6c <__sfp_lock_release+0x8>)
 8009b66:	f000 ba45 	b.w	8009ff4 <__retarget_lock_release_recursive>
 8009b6a:	bf00      	nop
 8009b6c:	20004f9d 	.word	0x20004f9d

08009b70 <__sinit>:
 8009b70:	b510      	push	{r4, lr}
 8009b72:	4604      	mov	r4, r0
 8009b74:	f7ff fff0 	bl	8009b58 <__sfp_lock_acquire>
 8009b78:	6a23      	ldr	r3, [r4, #32]
 8009b7a:	b11b      	cbz	r3, 8009b84 <__sinit+0x14>
 8009b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b80:	f7ff bff0 	b.w	8009b64 <__sfp_lock_release>
 8009b84:	4b04      	ldr	r3, [pc, #16]	@ (8009b98 <__sinit+0x28>)
 8009b86:	6223      	str	r3, [r4, #32]
 8009b88:	4b04      	ldr	r3, [pc, #16]	@ (8009b9c <__sinit+0x2c>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1f5      	bne.n	8009b7c <__sinit+0xc>
 8009b90:	f7ff ffc4 	bl	8009b1c <global_stdio_init.part.0>
 8009b94:	e7f2      	b.n	8009b7c <__sinit+0xc>
 8009b96:	bf00      	nop
 8009b98:	08009add 	.word	0x08009add
 8009b9c:	20004f94 	.word	0x20004f94

08009ba0 <_fwalk_sglue>:
 8009ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba4:	4607      	mov	r7, r0
 8009ba6:	4688      	mov	r8, r1
 8009ba8:	4614      	mov	r4, r2
 8009baa:	2600      	movs	r6, #0
 8009bac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bb0:	f1b9 0901 	subs.w	r9, r9, #1
 8009bb4:	d505      	bpl.n	8009bc2 <_fwalk_sglue+0x22>
 8009bb6:	6824      	ldr	r4, [r4, #0]
 8009bb8:	2c00      	cmp	r4, #0
 8009bba:	d1f7      	bne.n	8009bac <_fwalk_sglue+0xc>
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bc2:	89ab      	ldrh	r3, [r5, #12]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d907      	bls.n	8009bd8 <_fwalk_sglue+0x38>
 8009bc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	d003      	beq.n	8009bd8 <_fwalk_sglue+0x38>
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	47c0      	blx	r8
 8009bd6:	4306      	orrs	r6, r0
 8009bd8:	3568      	adds	r5, #104	@ 0x68
 8009bda:	e7e9      	b.n	8009bb0 <_fwalk_sglue+0x10>

08009bdc <_puts_r>:
 8009bdc:	6a03      	ldr	r3, [r0, #32]
 8009bde:	b570      	push	{r4, r5, r6, lr}
 8009be0:	6884      	ldr	r4, [r0, #8]
 8009be2:	4605      	mov	r5, r0
 8009be4:	460e      	mov	r6, r1
 8009be6:	b90b      	cbnz	r3, 8009bec <_puts_r+0x10>
 8009be8:	f7ff ffc2 	bl	8009b70 <__sinit>
 8009bec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bee:	07db      	lsls	r3, r3, #31
 8009bf0:	d405      	bmi.n	8009bfe <_puts_r+0x22>
 8009bf2:	89a3      	ldrh	r3, [r4, #12]
 8009bf4:	0598      	lsls	r0, r3, #22
 8009bf6:	d402      	bmi.n	8009bfe <_puts_r+0x22>
 8009bf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bfa:	f000 f9fa 	bl	8009ff2 <__retarget_lock_acquire_recursive>
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	0719      	lsls	r1, r3, #28
 8009c02:	d502      	bpl.n	8009c0a <_puts_r+0x2e>
 8009c04:	6923      	ldr	r3, [r4, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d135      	bne.n	8009c76 <_puts_r+0x9a>
 8009c0a:	4621      	mov	r1, r4
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	f000 f91d 	bl	8009e4c <__swsetup_r>
 8009c12:	b380      	cbz	r0, 8009c76 <_puts_r+0x9a>
 8009c14:	f04f 35ff 	mov.w	r5, #4294967295
 8009c18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c1a:	07da      	lsls	r2, r3, #31
 8009c1c:	d405      	bmi.n	8009c2a <_puts_r+0x4e>
 8009c1e:	89a3      	ldrh	r3, [r4, #12]
 8009c20:	059b      	lsls	r3, r3, #22
 8009c22:	d402      	bmi.n	8009c2a <_puts_r+0x4e>
 8009c24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c26:	f000 f9e5 	bl	8009ff4 <__retarget_lock_release_recursive>
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	bd70      	pop	{r4, r5, r6, pc}
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	da04      	bge.n	8009c3c <_puts_r+0x60>
 8009c32:	69a2      	ldr	r2, [r4, #24]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	dc17      	bgt.n	8009c68 <_puts_r+0x8c>
 8009c38:	290a      	cmp	r1, #10
 8009c3a:	d015      	beq.n	8009c68 <_puts_r+0x8c>
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	1c5a      	adds	r2, r3, #1
 8009c40:	6022      	str	r2, [r4, #0]
 8009c42:	7019      	strb	r1, [r3, #0]
 8009c44:	68a3      	ldr	r3, [r4, #8]
 8009c46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	60a3      	str	r3, [r4, #8]
 8009c4e:	2900      	cmp	r1, #0
 8009c50:	d1ed      	bne.n	8009c2e <_puts_r+0x52>
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	da11      	bge.n	8009c7a <_puts_r+0x9e>
 8009c56:	4622      	mov	r2, r4
 8009c58:	210a      	movs	r1, #10
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	f000 f8b8 	bl	8009dd0 <__swbuf_r>
 8009c60:	3001      	adds	r0, #1
 8009c62:	d0d7      	beq.n	8009c14 <_puts_r+0x38>
 8009c64:	250a      	movs	r5, #10
 8009c66:	e7d7      	b.n	8009c18 <_puts_r+0x3c>
 8009c68:	4622      	mov	r2, r4
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	f000 f8b0 	bl	8009dd0 <__swbuf_r>
 8009c70:	3001      	adds	r0, #1
 8009c72:	d1e7      	bne.n	8009c44 <_puts_r+0x68>
 8009c74:	e7ce      	b.n	8009c14 <_puts_r+0x38>
 8009c76:	3e01      	subs	r6, #1
 8009c78:	e7e4      	b.n	8009c44 <_puts_r+0x68>
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	1c5a      	adds	r2, r3, #1
 8009c7e:	6022      	str	r2, [r4, #0]
 8009c80:	220a      	movs	r2, #10
 8009c82:	701a      	strb	r2, [r3, #0]
 8009c84:	e7ee      	b.n	8009c64 <_puts_r+0x88>
	...

08009c88 <puts>:
 8009c88:	4b02      	ldr	r3, [pc, #8]	@ (8009c94 <puts+0xc>)
 8009c8a:	4601      	mov	r1, r0
 8009c8c:	6818      	ldr	r0, [r3, #0]
 8009c8e:	f7ff bfa5 	b.w	8009bdc <_puts_r>
 8009c92:	bf00      	nop
 8009c94:	2000016c 	.word	0x2000016c

08009c98 <siprintf>:
 8009c98:	b40e      	push	{r1, r2, r3}
 8009c9a:	b500      	push	{lr}
 8009c9c:	b09c      	sub	sp, #112	@ 0x70
 8009c9e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009ca0:	9002      	str	r0, [sp, #8]
 8009ca2:	9006      	str	r0, [sp, #24]
 8009ca4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009ca8:	4809      	ldr	r0, [pc, #36]	@ (8009cd0 <siprintf+0x38>)
 8009caa:	9107      	str	r1, [sp, #28]
 8009cac:	9104      	str	r1, [sp, #16]
 8009cae:	4909      	ldr	r1, [pc, #36]	@ (8009cd4 <siprintf+0x3c>)
 8009cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cb4:	9105      	str	r1, [sp, #20]
 8009cb6:	6800      	ldr	r0, [r0, #0]
 8009cb8:	9301      	str	r3, [sp, #4]
 8009cba:	a902      	add	r1, sp, #8
 8009cbc:	f001 fcf2 	bl	800b6a4 <_svfiprintf_r>
 8009cc0:	9b02      	ldr	r3, [sp, #8]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	701a      	strb	r2, [r3, #0]
 8009cc6:	b01c      	add	sp, #112	@ 0x70
 8009cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ccc:	b003      	add	sp, #12
 8009cce:	4770      	bx	lr
 8009cd0:	2000016c 	.word	0x2000016c
 8009cd4:	ffff0208 	.word	0xffff0208

08009cd8 <__sread>:
 8009cd8:	b510      	push	{r4, lr}
 8009cda:	460c      	mov	r4, r1
 8009cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce0:	f000 f938 	bl	8009f54 <_read_r>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	bfab      	itete	ge
 8009ce8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009cea:	89a3      	ldrhlt	r3, [r4, #12]
 8009cec:	181b      	addge	r3, r3, r0
 8009cee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009cf2:	bfac      	ite	ge
 8009cf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009cf6:	81a3      	strhlt	r3, [r4, #12]
 8009cf8:	bd10      	pop	{r4, pc}

08009cfa <__swrite>:
 8009cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cfe:	461f      	mov	r7, r3
 8009d00:	898b      	ldrh	r3, [r1, #12]
 8009d02:	05db      	lsls	r3, r3, #23
 8009d04:	4605      	mov	r5, r0
 8009d06:	460c      	mov	r4, r1
 8009d08:	4616      	mov	r6, r2
 8009d0a:	d505      	bpl.n	8009d18 <__swrite+0x1e>
 8009d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d10:	2302      	movs	r3, #2
 8009d12:	2200      	movs	r2, #0
 8009d14:	f000 f90c 	bl	8009f30 <_lseek_r>
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d22:	81a3      	strh	r3, [r4, #12]
 8009d24:	4632      	mov	r2, r6
 8009d26:	463b      	mov	r3, r7
 8009d28:	4628      	mov	r0, r5
 8009d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d2e:	f000 b923 	b.w	8009f78 <_write_r>

08009d32 <__sseek>:
 8009d32:	b510      	push	{r4, lr}
 8009d34:	460c      	mov	r4, r1
 8009d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d3a:	f000 f8f9 	bl	8009f30 <_lseek_r>
 8009d3e:	1c43      	adds	r3, r0, #1
 8009d40:	89a3      	ldrh	r3, [r4, #12]
 8009d42:	bf15      	itete	ne
 8009d44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d4e:	81a3      	strheq	r3, [r4, #12]
 8009d50:	bf18      	it	ne
 8009d52:	81a3      	strhne	r3, [r4, #12]
 8009d54:	bd10      	pop	{r4, pc}

08009d56 <__sclose>:
 8009d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d5a:	f000 b8d9 	b.w	8009f10 <_close_r>

08009d5e <_vsniprintf_r>:
 8009d5e:	b530      	push	{r4, r5, lr}
 8009d60:	4614      	mov	r4, r2
 8009d62:	2c00      	cmp	r4, #0
 8009d64:	b09b      	sub	sp, #108	@ 0x6c
 8009d66:	4605      	mov	r5, r0
 8009d68:	461a      	mov	r2, r3
 8009d6a:	da05      	bge.n	8009d78 <_vsniprintf_r+0x1a>
 8009d6c:	238b      	movs	r3, #139	@ 0x8b
 8009d6e:	6003      	str	r3, [r0, #0]
 8009d70:	f04f 30ff 	mov.w	r0, #4294967295
 8009d74:	b01b      	add	sp, #108	@ 0x6c
 8009d76:	bd30      	pop	{r4, r5, pc}
 8009d78:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009d7c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009d80:	bf14      	ite	ne
 8009d82:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009d86:	4623      	moveq	r3, r4
 8009d88:	9302      	str	r3, [sp, #8]
 8009d8a:	9305      	str	r3, [sp, #20]
 8009d8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009d90:	9100      	str	r1, [sp, #0]
 8009d92:	9104      	str	r1, [sp, #16]
 8009d94:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009d98:	4669      	mov	r1, sp
 8009d9a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009d9c:	f001 fc82 	bl	800b6a4 <_svfiprintf_r>
 8009da0:	1c43      	adds	r3, r0, #1
 8009da2:	bfbc      	itt	lt
 8009da4:	238b      	movlt	r3, #139	@ 0x8b
 8009da6:	602b      	strlt	r3, [r5, #0]
 8009da8:	2c00      	cmp	r4, #0
 8009daa:	d0e3      	beq.n	8009d74 <_vsniprintf_r+0x16>
 8009dac:	9b00      	ldr	r3, [sp, #0]
 8009dae:	2200      	movs	r2, #0
 8009db0:	701a      	strb	r2, [r3, #0]
 8009db2:	e7df      	b.n	8009d74 <_vsniprintf_r+0x16>

08009db4 <vsniprintf>:
 8009db4:	b507      	push	{r0, r1, r2, lr}
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	4613      	mov	r3, r2
 8009dba:	460a      	mov	r2, r1
 8009dbc:	4601      	mov	r1, r0
 8009dbe:	4803      	ldr	r0, [pc, #12]	@ (8009dcc <vsniprintf+0x18>)
 8009dc0:	6800      	ldr	r0, [r0, #0]
 8009dc2:	f7ff ffcc 	bl	8009d5e <_vsniprintf_r>
 8009dc6:	b003      	add	sp, #12
 8009dc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8009dcc:	2000016c 	.word	0x2000016c

08009dd0 <__swbuf_r>:
 8009dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd2:	460e      	mov	r6, r1
 8009dd4:	4614      	mov	r4, r2
 8009dd6:	4605      	mov	r5, r0
 8009dd8:	b118      	cbz	r0, 8009de2 <__swbuf_r+0x12>
 8009dda:	6a03      	ldr	r3, [r0, #32]
 8009ddc:	b90b      	cbnz	r3, 8009de2 <__swbuf_r+0x12>
 8009dde:	f7ff fec7 	bl	8009b70 <__sinit>
 8009de2:	69a3      	ldr	r3, [r4, #24]
 8009de4:	60a3      	str	r3, [r4, #8]
 8009de6:	89a3      	ldrh	r3, [r4, #12]
 8009de8:	071a      	lsls	r2, r3, #28
 8009dea:	d501      	bpl.n	8009df0 <__swbuf_r+0x20>
 8009dec:	6923      	ldr	r3, [r4, #16]
 8009dee:	b943      	cbnz	r3, 8009e02 <__swbuf_r+0x32>
 8009df0:	4621      	mov	r1, r4
 8009df2:	4628      	mov	r0, r5
 8009df4:	f000 f82a 	bl	8009e4c <__swsetup_r>
 8009df8:	b118      	cbz	r0, 8009e02 <__swbuf_r+0x32>
 8009dfa:	f04f 37ff 	mov.w	r7, #4294967295
 8009dfe:	4638      	mov	r0, r7
 8009e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e02:	6823      	ldr	r3, [r4, #0]
 8009e04:	6922      	ldr	r2, [r4, #16]
 8009e06:	1a98      	subs	r0, r3, r2
 8009e08:	6963      	ldr	r3, [r4, #20]
 8009e0a:	b2f6      	uxtb	r6, r6
 8009e0c:	4283      	cmp	r3, r0
 8009e0e:	4637      	mov	r7, r6
 8009e10:	dc05      	bgt.n	8009e1e <__swbuf_r+0x4e>
 8009e12:	4621      	mov	r1, r4
 8009e14:	4628      	mov	r0, r5
 8009e16:	f001 fdc5 	bl	800b9a4 <_fflush_r>
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d1ed      	bne.n	8009dfa <__swbuf_r+0x2a>
 8009e1e:	68a3      	ldr	r3, [r4, #8]
 8009e20:	3b01      	subs	r3, #1
 8009e22:	60a3      	str	r3, [r4, #8]
 8009e24:	6823      	ldr	r3, [r4, #0]
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	6022      	str	r2, [r4, #0]
 8009e2a:	701e      	strb	r6, [r3, #0]
 8009e2c:	6962      	ldr	r2, [r4, #20]
 8009e2e:	1c43      	adds	r3, r0, #1
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d004      	beq.n	8009e3e <__swbuf_r+0x6e>
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	07db      	lsls	r3, r3, #31
 8009e38:	d5e1      	bpl.n	8009dfe <__swbuf_r+0x2e>
 8009e3a:	2e0a      	cmp	r6, #10
 8009e3c:	d1df      	bne.n	8009dfe <__swbuf_r+0x2e>
 8009e3e:	4621      	mov	r1, r4
 8009e40:	4628      	mov	r0, r5
 8009e42:	f001 fdaf 	bl	800b9a4 <_fflush_r>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d0d9      	beq.n	8009dfe <__swbuf_r+0x2e>
 8009e4a:	e7d6      	b.n	8009dfa <__swbuf_r+0x2a>

08009e4c <__swsetup_r>:
 8009e4c:	b538      	push	{r3, r4, r5, lr}
 8009e4e:	4b29      	ldr	r3, [pc, #164]	@ (8009ef4 <__swsetup_r+0xa8>)
 8009e50:	4605      	mov	r5, r0
 8009e52:	6818      	ldr	r0, [r3, #0]
 8009e54:	460c      	mov	r4, r1
 8009e56:	b118      	cbz	r0, 8009e60 <__swsetup_r+0x14>
 8009e58:	6a03      	ldr	r3, [r0, #32]
 8009e5a:	b90b      	cbnz	r3, 8009e60 <__swsetup_r+0x14>
 8009e5c:	f7ff fe88 	bl	8009b70 <__sinit>
 8009e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e64:	0719      	lsls	r1, r3, #28
 8009e66:	d422      	bmi.n	8009eae <__swsetup_r+0x62>
 8009e68:	06da      	lsls	r2, r3, #27
 8009e6a:	d407      	bmi.n	8009e7c <__swsetup_r+0x30>
 8009e6c:	2209      	movs	r2, #9
 8009e6e:	602a      	str	r2, [r5, #0]
 8009e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e74:	81a3      	strh	r3, [r4, #12]
 8009e76:	f04f 30ff 	mov.w	r0, #4294967295
 8009e7a:	e033      	b.n	8009ee4 <__swsetup_r+0x98>
 8009e7c:	0758      	lsls	r0, r3, #29
 8009e7e:	d512      	bpl.n	8009ea6 <__swsetup_r+0x5a>
 8009e80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e82:	b141      	cbz	r1, 8009e96 <__swsetup_r+0x4a>
 8009e84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e88:	4299      	cmp	r1, r3
 8009e8a:	d002      	beq.n	8009e92 <__swsetup_r+0x46>
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	f000 ff2b 	bl	800ace8 <_free_r>
 8009e92:	2300      	movs	r3, #0
 8009e94:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e96:	89a3      	ldrh	r3, [r4, #12]
 8009e98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009e9c:	81a3      	strh	r3, [r4, #12]
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	6063      	str	r3, [r4, #4]
 8009ea2:	6923      	ldr	r3, [r4, #16]
 8009ea4:	6023      	str	r3, [r4, #0]
 8009ea6:	89a3      	ldrh	r3, [r4, #12]
 8009ea8:	f043 0308 	orr.w	r3, r3, #8
 8009eac:	81a3      	strh	r3, [r4, #12]
 8009eae:	6923      	ldr	r3, [r4, #16]
 8009eb0:	b94b      	cbnz	r3, 8009ec6 <__swsetup_r+0x7a>
 8009eb2:	89a3      	ldrh	r3, [r4, #12]
 8009eb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ebc:	d003      	beq.n	8009ec6 <__swsetup_r+0x7a>
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f001 fdcf 	bl	800ba64 <__smakebuf_r>
 8009ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eca:	f013 0201 	ands.w	r2, r3, #1
 8009ece:	d00a      	beq.n	8009ee6 <__swsetup_r+0x9a>
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	60a2      	str	r2, [r4, #8]
 8009ed4:	6962      	ldr	r2, [r4, #20]
 8009ed6:	4252      	negs	r2, r2
 8009ed8:	61a2      	str	r2, [r4, #24]
 8009eda:	6922      	ldr	r2, [r4, #16]
 8009edc:	b942      	cbnz	r2, 8009ef0 <__swsetup_r+0xa4>
 8009ede:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ee2:	d1c5      	bne.n	8009e70 <__swsetup_r+0x24>
 8009ee4:	bd38      	pop	{r3, r4, r5, pc}
 8009ee6:	0799      	lsls	r1, r3, #30
 8009ee8:	bf58      	it	pl
 8009eea:	6962      	ldrpl	r2, [r4, #20]
 8009eec:	60a2      	str	r2, [r4, #8]
 8009eee:	e7f4      	b.n	8009eda <__swsetup_r+0x8e>
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	e7f7      	b.n	8009ee4 <__swsetup_r+0x98>
 8009ef4:	2000016c 	.word	0x2000016c

08009ef8 <memset>:
 8009ef8:	4402      	add	r2, r0
 8009efa:	4603      	mov	r3, r0
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d100      	bne.n	8009f02 <memset+0xa>
 8009f00:	4770      	bx	lr
 8009f02:	f803 1b01 	strb.w	r1, [r3], #1
 8009f06:	e7f9      	b.n	8009efc <memset+0x4>

08009f08 <_localeconv_r>:
 8009f08:	4800      	ldr	r0, [pc, #0]	@ (8009f0c <_localeconv_r+0x4>)
 8009f0a:	4770      	bx	lr
 8009f0c:	200002ac 	.word	0x200002ac

08009f10 <_close_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	4d06      	ldr	r5, [pc, #24]	@ (8009f2c <_close_r+0x1c>)
 8009f14:	2300      	movs	r3, #0
 8009f16:	4604      	mov	r4, r0
 8009f18:	4608      	mov	r0, r1
 8009f1a:	602b      	str	r3, [r5, #0]
 8009f1c:	f7f8 ff80 	bl	8002e20 <_close>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d102      	bne.n	8009f2a <_close_r+0x1a>
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	b103      	cbz	r3, 8009f2a <_close_r+0x1a>
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	bd38      	pop	{r3, r4, r5, pc}
 8009f2c:	20004f98 	.word	0x20004f98

08009f30 <_lseek_r>:
 8009f30:	b538      	push	{r3, r4, r5, lr}
 8009f32:	4d07      	ldr	r5, [pc, #28]	@ (8009f50 <_lseek_r+0x20>)
 8009f34:	4604      	mov	r4, r0
 8009f36:	4608      	mov	r0, r1
 8009f38:	4611      	mov	r1, r2
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	602a      	str	r2, [r5, #0]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	f7f8 ff95 	bl	8002e6e <_lseek>
 8009f44:	1c43      	adds	r3, r0, #1
 8009f46:	d102      	bne.n	8009f4e <_lseek_r+0x1e>
 8009f48:	682b      	ldr	r3, [r5, #0]
 8009f4a:	b103      	cbz	r3, 8009f4e <_lseek_r+0x1e>
 8009f4c:	6023      	str	r3, [r4, #0]
 8009f4e:	bd38      	pop	{r3, r4, r5, pc}
 8009f50:	20004f98 	.word	0x20004f98

08009f54 <_read_r>:
 8009f54:	b538      	push	{r3, r4, r5, lr}
 8009f56:	4d07      	ldr	r5, [pc, #28]	@ (8009f74 <_read_r+0x20>)
 8009f58:	4604      	mov	r4, r0
 8009f5a:	4608      	mov	r0, r1
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	2200      	movs	r2, #0
 8009f60:	602a      	str	r2, [r5, #0]
 8009f62:	461a      	mov	r2, r3
 8009f64:	f7f8 ff23 	bl	8002dae <_read>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	d102      	bne.n	8009f72 <_read_r+0x1e>
 8009f6c:	682b      	ldr	r3, [r5, #0]
 8009f6e:	b103      	cbz	r3, 8009f72 <_read_r+0x1e>
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	bd38      	pop	{r3, r4, r5, pc}
 8009f74:	20004f98 	.word	0x20004f98

08009f78 <_write_r>:
 8009f78:	b538      	push	{r3, r4, r5, lr}
 8009f7a:	4d07      	ldr	r5, [pc, #28]	@ (8009f98 <_write_r+0x20>)
 8009f7c:	4604      	mov	r4, r0
 8009f7e:	4608      	mov	r0, r1
 8009f80:	4611      	mov	r1, r2
 8009f82:	2200      	movs	r2, #0
 8009f84:	602a      	str	r2, [r5, #0]
 8009f86:	461a      	mov	r2, r3
 8009f88:	f7f8 ff2e 	bl	8002de8 <_write>
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	d102      	bne.n	8009f96 <_write_r+0x1e>
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	b103      	cbz	r3, 8009f96 <_write_r+0x1e>
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	20004f98 	.word	0x20004f98

08009f9c <__errno>:
 8009f9c:	4b01      	ldr	r3, [pc, #4]	@ (8009fa4 <__errno+0x8>)
 8009f9e:	6818      	ldr	r0, [r3, #0]
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	2000016c 	.word	0x2000016c

08009fa8 <__libc_init_array>:
 8009fa8:	b570      	push	{r4, r5, r6, lr}
 8009faa:	4d0d      	ldr	r5, [pc, #52]	@ (8009fe0 <__libc_init_array+0x38>)
 8009fac:	4c0d      	ldr	r4, [pc, #52]	@ (8009fe4 <__libc_init_array+0x3c>)
 8009fae:	1b64      	subs	r4, r4, r5
 8009fb0:	10a4      	asrs	r4, r4, #2
 8009fb2:	2600      	movs	r6, #0
 8009fb4:	42a6      	cmp	r6, r4
 8009fb6:	d109      	bne.n	8009fcc <__libc_init_array+0x24>
 8009fb8:	4d0b      	ldr	r5, [pc, #44]	@ (8009fe8 <__libc_init_array+0x40>)
 8009fba:	4c0c      	ldr	r4, [pc, #48]	@ (8009fec <__libc_init_array+0x44>)
 8009fbc:	f001 ffd0 	bl	800bf60 <_init>
 8009fc0:	1b64      	subs	r4, r4, r5
 8009fc2:	10a4      	asrs	r4, r4, #2
 8009fc4:	2600      	movs	r6, #0
 8009fc6:	42a6      	cmp	r6, r4
 8009fc8:	d105      	bne.n	8009fd6 <__libc_init_array+0x2e>
 8009fca:	bd70      	pop	{r4, r5, r6, pc}
 8009fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fd0:	4798      	blx	r3
 8009fd2:	3601      	adds	r6, #1
 8009fd4:	e7ee      	b.n	8009fb4 <__libc_init_array+0xc>
 8009fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fda:	4798      	blx	r3
 8009fdc:	3601      	adds	r6, #1
 8009fde:	e7f2      	b.n	8009fc6 <__libc_init_array+0x1e>
 8009fe0:	0800ca9c 	.word	0x0800ca9c
 8009fe4:	0800ca9c 	.word	0x0800ca9c
 8009fe8:	0800ca9c 	.word	0x0800ca9c
 8009fec:	0800caa0 	.word	0x0800caa0

08009ff0 <__retarget_lock_init_recursive>:
 8009ff0:	4770      	bx	lr

08009ff2 <__retarget_lock_acquire_recursive>:
 8009ff2:	4770      	bx	lr

08009ff4 <__retarget_lock_release_recursive>:
 8009ff4:	4770      	bx	lr

08009ff6 <memcpy>:
 8009ff6:	440a      	add	r2, r1
 8009ff8:	4291      	cmp	r1, r2
 8009ffa:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ffe:	d100      	bne.n	800a002 <memcpy+0xc>
 800a000:	4770      	bx	lr
 800a002:	b510      	push	{r4, lr}
 800a004:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a008:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a00c:	4291      	cmp	r1, r2
 800a00e:	d1f9      	bne.n	800a004 <memcpy+0xe>
 800a010:	bd10      	pop	{r4, pc}
	...

0800a014 <__assert_func>:
 800a014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a016:	4614      	mov	r4, r2
 800a018:	461a      	mov	r2, r3
 800a01a:	4b09      	ldr	r3, [pc, #36]	@ (800a040 <__assert_func+0x2c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4605      	mov	r5, r0
 800a020:	68d8      	ldr	r0, [r3, #12]
 800a022:	b954      	cbnz	r4, 800a03a <__assert_func+0x26>
 800a024:	4b07      	ldr	r3, [pc, #28]	@ (800a044 <__assert_func+0x30>)
 800a026:	461c      	mov	r4, r3
 800a028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a02c:	9100      	str	r1, [sp, #0]
 800a02e:	462b      	mov	r3, r5
 800a030:	4905      	ldr	r1, [pc, #20]	@ (800a048 <__assert_func+0x34>)
 800a032:	f001 fcdf 	bl	800b9f4 <fiprintf>
 800a036:	f001 fd9d 	bl	800bb74 <abort>
 800a03a:	4b04      	ldr	r3, [pc, #16]	@ (800a04c <__assert_func+0x38>)
 800a03c:	e7f4      	b.n	800a028 <__assert_func+0x14>
 800a03e:	bf00      	nop
 800a040:	2000016c 	.word	0x2000016c
 800a044:	0800c793 	.word	0x0800c793
 800a048:	0800c765 	.word	0x0800c765
 800a04c:	0800c758 	.word	0x0800c758

0800a050 <quorem>:
 800a050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a054:	6903      	ldr	r3, [r0, #16]
 800a056:	690c      	ldr	r4, [r1, #16]
 800a058:	42a3      	cmp	r3, r4
 800a05a:	4607      	mov	r7, r0
 800a05c:	db7e      	blt.n	800a15c <quorem+0x10c>
 800a05e:	3c01      	subs	r4, #1
 800a060:	f101 0814 	add.w	r8, r1, #20
 800a064:	00a3      	lsls	r3, r4, #2
 800a066:	f100 0514 	add.w	r5, r0, #20
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a070:	9301      	str	r3, [sp, #4]
 800a072:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a076:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a07a:	3301      	adds	r3, #1
 800a07c:	429a      	cmp	r2, r3
 800a07e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a082:	fbb2 f6f3 	udiv	r6, r2, r3
 800a086:	d32e      	bcc.n	800a0e6 <quorem+0x96>
 800a088:	f04f 0a00 	mov.w	sl, #0
 800a08c:	46c4      	mov	ip, r8
 800a08e:	46ae      	mov	lr, r5
 800a090:	46d3      	mov	fp, sl
 800a092:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a096:	b298      	uxth	r0, r3
 800a098:	fb06 a000 	mla	r0, r6, r0, sl
 800a09c:	0c02      	lsrs	r2, r0, #16
 800a09e:	0c1b      	lsrs	r3, r3, #16
 800a0a0:	fb06 2303 	mla	r3, r6, r3, r2
 800a0a4:	f8de 2000 	ldr.w	r2, [lr]
 800a0a8:	b280      	uxth	r0, r0
 800a0aa:	b292      	uxth	r2, r2
 800a0ac:	1a12      	subs	r2, r2, r0
 800a0ae:	445a      	add	r2, fp
 800a0b0:	f8de 0000 	ldr.w	r0, [lr]
 800a0b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a0be:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a0c2:	b292      	uxth	r2, r2
 800a0c4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a0c8:	45e1      	cmp	r9, ip
 800a0ca:	f84e 2b04 	str.w	r2, [lr], #4
 800a0ce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a0d2:	d2de      	bcs.n	800a092 <quorem+0x42>
 800a0d4:	9b00      	ldr	r3, [sp, #0]
 800a0d6:	58eb      	ldr	r3, [r5, r3]
 800a0d8:	b92b      	cbnz	r3, 800a0e6 <quorem+0x96>
 800a0da:	9b01      	ldr	r3, [sp, #4]
 800a0dc:	3b04      	subs	r3, #4
 800a0de:	429d      	cmp	r5, r3
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	d32f      	bcc.n	800a144 <quorem+0xf4>
 800a0e4:	613c      	str	r4, [r7, #16]
 800a0e6:	4638      	mov	r0, r7
 800a0e8:	f001 f978 	bl	800b3dc <__mcmp>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	db25      	blt.n	800a13c <quorem+0xec>
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	2000      	movs	r0, #0
 800a0f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0f8:	f8d1 c000 	ldr.w	ip, [r1]
 800a0fc:	fa1f fe82 	uxth.w	lr, r2
 800a100:	fa1f f38c 	uxth.w	r3, ip
 800a104:	eba3 030e 	sub.w	r3, r3, lr
 800a108:	4403      	add	r3, r0
 800a10a:	0c12      	lsrs	r2, r2, #16
 800a10c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a110:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a114:	b29b      	uxth	r3, r3
 800a116:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a11a:	45c1      	cmp	r9, r8
 800a11c:	f841 3b04 	str.w	r3, [r1], #4
 800a120:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a124:	d2e6      	bcs.n	800a0f4 <quorem+0xa4>
 800a126:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a12a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a12e:	b922      	cbnz	r2, 800a13a <quorem+0xea>
 800a130:	3b04      	subs	r3, #4
 800a132:	429d      	cmp	r5, r3
 800a134:	461a      	mov	r2, r3
 800a136:	d30b      	bcc.n	800a150 <quorem+0x100>
 800a138:	613c      	str	r4, [r7, #16]
 800a13a:	3601      	adds	r6, #1
 800a13c:	4630      	mov	r0, r6
 800a13e:	b003      	add	sp, #12
 800a140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a144:	6812      	ldr	r2, [r2, #0]
 800a146:	3b04      	subs	r3, #4
 800a148:	2a00      	cmp	r2, #0
 800a14a:	d1cb      	bne.n	800a0e4 <quorem+0x94>
 800a14c:	3c01      	subs	r4, #1
 800a14e:	e7c6      	b.n	800a0de <quorem+0x8e>
 800a150:	6812      	ldr	r2, [r2, #0]
 800a152:	3b04      	subs	r3, #4
 800a154:	2a00      	cmp	r2, #0
 800a156:	d1ef      	bne.n	800a138 <quorem+0xe8>
 800a158:	3c01      	subs	r4, #1
 800a15a:	e7ea      	b.n	800a132 <quorem+0xe2>
 800a15c:	2000      	movs	r0, #0
 800a15e:	e7ee      	b.n	800a13e <quorem+0xee>

0800a160 <_dtoa_r>:
 800a160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a164:	69c7      	ldr	r7, [r0, #28]
 800a166:	b099      	sub	sp, #100	@ 0x64
 800a168:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a16c:	ec55 4b10 	vmov	r4, r5, d0
 800a170:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a172:	9109      	str	r1, [sp, #36]	@ 0x24
 800a174:	4683      	mov	fp, r0
 800a176:	920e      	str	r2, [sp, #56]	@ 0x38
 800a178:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a17a:	b97f      	cbnz	r7, 800a19c <_dtoa_r+0x3c>
 800a17c:	2010      	movs	r0, #16
 800a17e:	f000 fdfd 	bl	800ad7c <malloc>
 800a182:	4602      	mov	r2, r0
 800a184:	f8cb 001c 	str.w	r0, [fp, #28]
 800a188:	b920      	cbnz	r0, 800a194 <_dtoa_r+0x34>
 800a18a:	4ba7      	ldr	r3, [pc, #668]	@ (800a428 <_dtoa_r+0x2c8>)
 800a18c:	21ef      	movs	r1, #239	@ 0xef
 800a18e:	48a7      	ldr	r0, [pc, #668]	@ (800a42c <_dtoa_r+0x2cc>)
 800a190:	f7ff ff40 	bl	800a014 <__assert_func>
 800a194:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a198:	6007      	str	r7, [r0, #0]
 800a19a:	60c7      	str	r7, [r0, #12]
 800a19c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a1a0:	6819      	ldr	r1, [r3, #0]
 800a1a2:	b159      	cbz	r1, 800a1bc <_dtoa_r+0x5c>
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	604a      	str	r2, [r1, #4]
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	4093      	lsls	r3, r2
 800a1ac:	608b      	str	r3, [r1, #8]
 800a1ae:	4658      	mov	r0, fp
 800a1b0:	f000 feda 	bl	800af68 <_Bfree>
 800a1b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	1e2b      	subs	r3, r5, #0
 800a1be:	bfb9      	ittee	lt
 800a1c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a1c4:	9303      	strlt	r3, [sp, #12]
 800a1c6:	2300      	movge	r3, #0
 800a1c8:	6033      	strge	r3, [r6, #0]
 800a1ca:	9f03      	ldr	r7, [sp, #12]
 800a1cc:	4b98      	ldr	r3, [pc, #608]	@ (800a430 <_dtoa_r+0x2d0>)
 800a1ce:	bfbc      	itt	lt
 800a1d0:	2201      	movlt	r2, #1
 800a1d2:	6032      	strlt	r2, [r6, #0]
 800a1d4:	43bb      	bics	r3, r7
 800a1d6:	d112      	bne.n	800a1fe <_dtoa_r+0x9e>
 800a1d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a1da:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a1de:	6013      	str	r3, [r2, #0]
 800a1e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a1e4:	4323      	orrs	r3, r4
 800a1e6:	f000 854d 	beq.w	800ac84 <_dtoa_r+0xb24>
 800a1ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a444 <_dtoa_r+0x2e4>
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f000 854f 	beq.w	800ac94 <_dtoa_r+0xb34>
 800a1f6:	f10a 0303 	add.w	r3, sl, #3
 800a1fa:	f000 bd49 	b.w	800ac90 <_dtoa_r+0xb30>
 800a1fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a202:	2200      	movs	r2, #0
 800a204:	ec51 0b17 	vmov	r0, r1, d7
 800a208:	2300      	movs	r3, #0
 800a20a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a20e:	f7f6 fc63 	bl	8000ad8 <__aeabi_dcmpeq>
 800a212:	4680      	mov	r8, r0
 800a214:	b158      	cbz	r0, 800a22e <_dtoa_r+0xce>
 800a216:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a218:	2301      	movs	r3, #1
 800a21a:	6013      	str	r3, [r2, #0]
 800a21c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a21e:	b113      	cbz	r3, 800a226 <_dtoa_r+0xc6>
 800a220:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a222:	4b84      	ldr	r3, [pc, #528]	@ (800a434 <_dtoa_r+0x2d4>)
 800a224:	6013      	str	r3, [r2, #0]
 800a226:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a448 <_dtoa_r+0x2e8>
 800a22a:	f000 bd33 	b.w	800ac94 <_dtoa_r+0xb34>
 800a22e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a232:	aa16      	add	r2, sp, #88	@ 0x58
 800a234:	a917      	add	r1, sp, #92	@ 0x5c
 800a236:	4658      	mov	r0, fp
 800a238:	f001 f980 	bl	800b53c <__d2b>
 800a23c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a240:	4681      	mov	r9, r0
 800a242:	2e00      	cmp	r6, #0
 800a244:	d077      	beq.n	800a336 <_dtoa_r+0x1d6>
 800a246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a248:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a24c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a254:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a258:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a25c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a260:	4619      	mov	r1, r3
 800a262:	2200      	movs	r2, #0
 800a264:	4b74      	ldr	r3, [pc, #464]	@ (800a438 <_dtoa_r+0x2d8>)
 800a266:	f7f6 f817 	bl	8000298 <__aeabi_dsub>
 800a26a:	a369      	add	r3, pc, #420	@ (adr r3, 800a410 <_dtoa_r+0x2b0>)
 800a26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a270:	f7f6 f9ca 	bl	8000608 <__aeabi_dmul>
 800a274:	a368      	add	r3, pc, #416	@ (adr r3, 800a418 <_dtoa_r+0x2b8>)
 800a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27a:	f7f6 f80f 	bl	800029c <__adddf3>
 800a27e:	4604      	mov	r4, r0
 800a280:	4630      	mov	r0, r6
 800a282:	460d      	mov	r5, r1
 800a284:	f7f6 f956 	bl	8000534 <__aeabi_i2d>
 800a288:	a365      	add	r3, pc, #404	@ (adr r3, 800a420 <_dtoa_r+0x2c0>)
 800a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28e:	f7f6 f9bb 	bl	8000608 <__aeabi_dmul>
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	4620      	mov	r0, r4
 800a298:	4629      	mov	r1, r5
 800a29a:	f7f5 ffff 	bl	800029c <__adddf3>
 800a29e:	4604      	mov	r4, r0
 800a2a0:	460d      	mov	r5, r1
 800a2a2:	f7f6 fc61 	bl	8000b68 <__aeabi_d2iz>
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	4607      	mov	r7, r0
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	4629      	mov	r1, r5
 800a2b0:	f7f6 fc1c 	bl	8000aec <__aeabi_dcmplt>
 800a2b4:	b140      	cbz	r0, 800a2c8 <_dtoa_r+0x168>
 800a2b6:	4638      	mov	r0, r7
 800a2b8:	f7f6 f93c 	bl	8000534 <__aeabi_i2d>
 800a2bc:	4622      	mov	r2, r4
 800a2be:	462b      	mov	r3, r5
 800a2c0:	f7f6 fc0a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2c4:	b900      	cbnz	r0, 800a2c8 <_dtoa_r+0x168>
 800a2c6:	3f01      	subs	r7, #1
 800a2c8:	2f16      	cmp	r7, #22
 800a2ca:	d851      	bhi.n	800a370 <_dtoa_r+0x210>
 800a2cc:	4b5b      	ldr	r3, [pc, #364]	@ (800a43c <_dtoa_r+0x2dc>)
 800a2ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2da:	f7f6 fc07 	bl	8000aec <__aeabi_dcmplt>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d048      	beq.n	800a374 <_dtoa_r+0x214>
 800a2e2:	3f01      	subs	r7, #1
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	9312      	str	r3, [sp, #72]	@ 0x48
 800a2e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a2ea:	1b9b      	subs	r3, r3, r6
 800a2ec:	1e5a      	subs	r2, r3, #1
 800a2ee:	bf44      	itt	mi
 800a2f0:	f1c3 0801 	rsbmi	r8, r3, #1
 800a2f4:	2300      	movmi	r3, #0
 800a2f6:	9208      	str	r2, [sp, #32]
 800a2f8:	bf54      	ite	pl
 800a2fa:	f04f 0800 	movpl.w	r8, #0
 800a2fe:	9308      	strmi	r3, [sp, #32]
 800a300:	2f00      	cmp	r7, #0
 800a302:	db39      	blt.n	800a378 <_dtoa_r+0x218>
 800a304:	9b08      	ldr	r3, [sp, #32]
 800a306:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a308:	443b      	add	r3, r7
 800a30a:	9308      	str	r3, [sp, #32]
 800a30c:	2300      	movs	r3, #0
 800a30e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a312:	2b09      	cmp	r3, #9
 800a314:	d864      	bhi.n	800a3e0 <_dtoa_r+0x280>
 800a316:	2b05      	cmp	r3, #5
 800a318:	bfc4      	itt	gt
 800a31a:	3b04      	subgt	r3, #4
 800a31c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a320:	f1a3 0302 	sub.w	r3, r3, #2
 800a324:	bfcc      	ite	gt
 800a326:	2400      	movgt	r4, #0
 800a328:	2401      	movle	r4, #1
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	d863      	bhi.n	800a3f6 <_dtoa_r+0x296>
 800a32e:	e8df f003 	tbb	[pc, r3]
 800a332:	372a      	.short	0x372a
 800a334:	5535      	.short	0x5535
 800a336:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a33a:	441e      	add	r6, r3
 800a33c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a340:	2b20      	cmp	r3, #32
 800a342:	bfc1      	itttt	gt
 800a344:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a348:	409f      	lslgt	r7, r3
 800a34a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a34e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a352:	bfd6      	itet	le
 800a354:	f1c3 0320 	rsble	r3, r3, #32
 800a358:	ea47 0003 	orrgt.w	r0, r7, r3
 800a35c:	fa04 f003 	lslle.w	r0, r4, r3
 800a360:	f7f6 f8d8 	bl	8000514 <__aeabi_ui2d>
 800a364:	2201      	movs	r2, #1
 800a366:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a36a:	3e01      	subs	r6, #1
 800a36c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a36e:	e777      	b.n	800a260 <_dtoa_r+0x100>
 800a370:	2301      	movs	r3, #1
 800a372:	e7b8      	b.n	800a2e6 <_dtoa_r+0x186>
 800a374:	9012      	str	r0, [sp, #72]	@ 0x48
 800a376:	e7b7      	b.n	800a2e8 <_dtoa_r+0x188>
 800a378:	427b      	negs	r3, r7
 800a37a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a37c:	2300      	movs	r3, #0
 800a37e:	eba8 0807 	sub.w	r8, r8, r7
 800a382:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a384:	e7c4      	b.n	800a310 <_dtoa_r+0x1b0>
 800a386:	2300      	movs	r3, #0
 800a388:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a38a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	dc35      	bgt.n	800a3fc <_dtoa_r+0x29c>
 800a390:	2301      	movs	r3, #1
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	9307      	str	r3, [sp, #28]
 800a396:	461a      	mov	r2, r3
 800a398:	920e      	str	r2, [sp, #56]	@ 0x38
 800a39a:	e00b      	b.n	800a3b4 <_dtoa_r+0x254>
 800a39c:	2301      	movs	r3, #1
 800a39e:	e7f3      	b.n	800a388 <_dtoa_r+0x228>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3a6:	18fb      	adds	r3, r7, r3
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	9307      	str	r3, [sp, #28]
 800a3b0:	bfb8      	it	lt
 800a3b2:	2301      	movlt	r3, #1
 800a3b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	2204      	movs	r2, #4
 800a3bc:	f102 0514 	add.w	r5, r2, #20
 800a3c0:	429d      	cmp	r5, r3
 800a3c2:	d91f      	bls.n	800a404 <_dtoa_r+0x2a4>
 800a3c4:	6041      	str	r1, [r0, #4]
 800a3c6:	4658      	mov	r0, fp
 800a3c8:	f000 fd8e 	bl	800aee8 <_Balloc>
 800a3cc:	4682      	mov	sl, r0
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d13c      	bne.n	800a44c <_dtoa_r+0x2ec>
 800a3d2:	4b1b      	ldr	r3, [pc, #108]	@ (800a440 <_dtoa_r+0x2e0>)
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a3da:	e6d8      	b.n	800a18e <_dtoa_r+0x2e>
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e7e0      	b.n	800a3a2 <_dtoa_r+0x242>
 800a3e0:	2401      	movs	r4, #1
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	9307      	str	r3, [sp, #28]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	2312      	movs	r3, #18
 800a3f4:	e7d0      	b.n	800a398 <_dtoa_r+0x238>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3fa:	e7f5      	b.n	800a3e8 <_dtoa_r+0x288>
 800a3fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	9307      	str	r3, [sp, #28]
 800a402:	e7d7      	b.n	800a3b4 <_dtoa_r+0x254>
 800a404:	3101      	adds	r1, #1
 800a406:	0052      	lsls	r2, r2, #1
 800a408:	e7d8      	b.n	800a3bc <_dtoa_r+0x25c>
 800a40a:	bf00      	nop
 800a40c:	f3af 8000 	nop.w
 800a410:	636f4361 	.word	0x636f4361
 800a414:	3fd287a7 	.word	0x3fd287a7
 800a418:	8b60c8b3 	.word	0x8b60c8b3
 800a41c:	3fc68a28 	.word	0x3fc68a28
 800a420:	509f79fb 	.word	0x509f79fb
 800a424:	3fd34413 	.word	0x3fd34413
 800a428:	0800c7a1 	.word	0x0800c7a1
 800a42c:	0800c7b8 	.word	0x0800c7b8
 800a430:	7ff00000 	.word	0x7ff00000
 800a434:	0800c735 	.word	0x0800c735
 800a438:	3ff80000 	.word	0x3ff80000
 800a43c:	0800c8b0 	.word	0x0800c8b0
 800a440:	0800c810 	.word	0x0800c810
 800a444:	0800c79d 	.word	0x0800c79d
 800a448:	0800c734 	.word	0x0800c734
 800a44c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a450:	6018      	str	r0, [r3, #0]
 800a452:	9b07      	ldr	r3, [sp, #28]
 800a454:	2b0e      	cmp	r3, #14
 800a456:	f200 80a4 	bhi.w	800a5a2 <_dtoa_r+0x442>
 800a45a:	2c00      	cmp	r4, #0
 800a45c:	f000 80a1 	beq.w	800a5a2 <_dtoa_r+0x442>
 800a460:	2f00      	cmp	r7, #0
 800a462:	dd33      	ble.n	800a4cc <_dtoa_r+0x36c>
 800a464:	4bad      	ldr	r3, [pc, #692]	@ (800a71c <_dtoa_r+0x5bc>)
 800a466:	f007 020f 	and.w	r2, r7, #15
 800a46a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a46e:	ed93 7b00 	vldr	d7, [r3]
 800a472:	05f8      	lsls	r0, r7, #23
 800a474:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a478:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a47c:	d516      	bpl.n	800a4ac <_dtoa_r+0x34c>
 800a47e:	4ba8      	ldr	r3, [pc, #672]	@ (800a720 <_dtoa_r+0x5c0>)
 800a480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a484:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a488:	f7f6 f9e8 	bl	800085c <__aeabi_ddiv>
 800a48c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a490:	f004 040f 	and.w	r4, r4, #15
 800a494:	2603      	movs	r6, #3
 800a496:	4da2      	ldr	r5, [pc, #648]	@ (800a720 <_dtoa_r+0x5c0>)
 800a498:	b954      	cbnz	r4, 800a4b0 <_dtoa_r+0x350>
 800a49a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a49e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4a2:	f7f6 f9db 	bl	800085c <__aeabi_ddiv>
 800a4a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4aa:	e028      	b.n	800a4fe <_dtoa_r+0x39e>
 800a4ac:	2602      	movs	r6, #2
 800a4ae:	e7f2      	b.n	800a496 <_dtoa_r+0x336>
 800a4b0:	07e1      	lsls	r1, r4, #31
 800a4b2:	d508      	bpl.n	800a4c6 <_dtoa_r+0x366>
 800a4b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a4bc:	f7f6 f8a4 	bl	8000608 <__aeabi_dmul>
 800a4c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4c4:	3601      	adds	r6, #1
 800a4c6:	1064      	asrs	r4, r4, #1
 800a4c8:	3508      	adds	r5, #8
 800a4ca:	e7e5      	b.n	800a498 <_dtoa_r+0x338>
 800a4cc:	f000 80d2 	beq.w	800a674 <_dtoa_r+0x514>
 800a4d0:	427c      	negs	r4, r7
 800a4d2:	4b92      	ldr	r3, [pc, #584]	@ (800a71c <_dtoa_r+0x5bc>)
 800a4d4:	4d92      	ldr	r5, [pc, #584]	@ (800a720 <_dtoa_r+0x5c0>)
 800a4d6:	f004 020f 	and.w	r2, r4, #15
 800a4da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4e6:	f7f6 f88f 	bl	8000608 <__aeabi_dmul>
 800a4ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4ee:	1124      	asrs	r4, r4, #4
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	2602      	movs	r6, #2
 800a4f4:	2c00      	cmp	r4, #0
 800a4f6:	f040 80b2 	bne.w	800a65e <_dtoa_r+0x4fe>
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1d3      	bne.n	800a4a6 <_dtoa_r+0x346>
 800a4fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a500:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a504:	2b00      	cmp	r3, #0
 800a506:	f000 80b7 	beq.w	800a678 <_dtoa_r+0x518>
 800a50a:	4b86      	ldr	r3, [pc, #536]	@ (800a724 <_dtoa_r+0x5c4>)
 800a50c:	2200      	movs	r2, #0
 800a50e:	4620      	mov	r0, r4
 800a510:	4629      	mov	r1, r5
 800a512:	f7f6 faeb 	bl	8000aec <__aeabi_dcmplt>
 800a516:	2800      	cmp	r0, #0
 800a518:	f000 80ae 	beq.w	800a678 <_dtoa_r+0x518>
 800a51c:	9b07      	ldr	r3, [sp, #28]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	f000 80aa 	beq.w	800a678 <_dtoa_r+0x518>
 800a524:	9b00      	ldr	r3, [sp, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	dd37      	ble.n	800a59a <_dtoa_r+0x43a>
 800a52a:	1e7b      	subs	r3, r7, #1
 800a52c:	9304      	str	r3, [sp, #16]
 800a52e:	4620      	mov	r0, r4
 800a530:	4b7d      	ldr	r3, [pc, #500]	@ (800a728 <_dtoa_r+0x5c8>)
 800a532:	2200      	movs	r2, #0
 800a534:	4629      	mov	r1, r5
 800a536:	f7f6 f867 	bl	8000608 <__aeabi_dmul>
 800a53a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a53e:	9c00      	ldr	r4, [sp, #0]
 800a540:	3601      	adds	r6, #1
 800a542:	4630      	mov	r0, r6
 800a544:	f7f5 fff6 	bl	8000534 <__aeabi_i2d>
 800a548:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a54c:	f7f6 f85c 	bl	8000608 <__aeabi_dmul>
 800a550:	4b76      	ldr	r3, [pc, #472]	@ (800a72c <_dtoa_r+0x5cc>)
 800a552:	2200      	movs	r2, #0
 800a554:	f7f5 fea2 	bl	800029c <__adddf3>
 800a558:	4605      	mov	r5, r0
 800a55a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a55e:	2c00      	cmp	r4, #0
 800a560:	f040 808d 	bne.w	800a67e <_dtoa_r+0x51e>
 800a564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a568:	4b71      	ldr	r3, [pc, #452]	@ (800a730 <_dtoa_r+0x5d0>)
 800a56a:	2200      	movs	r2, #0
 800a56c:	f7f5 fe94 	bl	8000298 <__aeabi_dsub>
 800a570:	4602      	mov	r2, r0
 800a572:	460b      	mov	r3, r1
 800a574:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a578:	462a      	mov	r2, r5
 800a57a:	4633      	mov	r3, r6
 800a57c:	f7f6 fad4 	bl	8000b28 <__aeabi_dcmpgt>
 800a580:	2800      	cmp	r0, #0
 800a582:	f040 828b 	bne.w	800aa9c <_dtoa_r+0x93c>
 800a586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a58a:	462a      	mov	r2, r5
 800a58c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a590:	f7f6 faac 	bl	8000aec <__aeabi_dcmplt>
 800a594:	2800      	cmp	r0, #0
 800a596:	f040 8128 	bne.w	800a7ea <_dtoa_r+0x68a>
 800a59a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a59e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a5a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f2c0 815a 	blt.w	800a85e <_dtoa_r+0x6fe>
 800a5aa:	2f0e      	cmp	r7, #14
 800a5ac:	f300 8157 	bgt.w	800a85e <_dtoa_r+0x6fe>
 800a5b0:	4b5a      	ldr	r3, [pc, #360]	@ (800a71c <_dtoa_r+0x5bc>)
 800a5b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a5b6:	ed93 7b00 	vldr	d7, [r3]
 800a5ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	ed8d 7b00 	vstr	d7, [sp]
 800a5c2:	da03      	bge.n	800a5cc <_dtoa_r+0x46c>
 800a5c4:	9b07      	ldr	r3, [sp, #28]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f340 8101 	ble.w	800a7ce <_dtoa_r+0x66e>
 800a5cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a5d0:	4656      	mov	r6, sl
 800a5d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	4629      	mov	r1, r5
 800a5da:	f7f6 f93f 	bl	800085c <__aeabi_ddiv>
 800a5de:	f7f6 fac3 	bl	8000b68 <__aeabi_d2iz>
 800a5e2:	4680      	mov	r8, r0
 800a5e4:	f7f5 ffa6 	bl	8000534 <__aeabi_i2d>
 800a5e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5ec:	f7f6 f80c 	bl	8000608 <__aeabi_dmul>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	4629      	mov	r1, r5
 800a5f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a5fc:	f7f5 fe4c 	bl	8000298 <__aeabi_dsub>
 800a600:	f806 4b01 	strb.w	r4, [r6], #1
 800a604:	9d07      	ldr	r5, [sp, #28]
 800a606:	eba6 040a 	sub.w	r4, r6, sl
 800a60a:	42a5      	cmp	r5, r4
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	f040 8117 	bne.w	800a842 <_dtoa_r+0x6e2>
 800a614:	f7f5 fe42 	bl	800029c <__adddf3>
 800a618:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a61c:	4604      	mov	r4, r0
 800a61e:	460d      	mov	r5, r1
 800a620:	f7f6 fa82 	bl	8000b28 <__aeabi_dcmpgt>
 800a624:	2800      	cmp	r0, #0
 800a626:	f040 80f9 	bne.w	800a81c <_dtoa_r+0x6bc>
 800a62a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a62e:	4620      	mov	r0, r4
 800a630:	4629      	mov	r1, r5
 800a632:	f7f6 fa51 	bl	8000ad8 <__aeabi_dcmpeq>
 800a636:	b118      	cbz	r0, 800a640 <_dtoa_r+0x4e0>
 800a638:	f018 0f01 	tst.w	r8, #1
 800a63c:	f040 80ee 	bne.w	800a81c <_dtoa_r+0x6bc>
 800a640:	4649      	mov	r1, r9
 800a642:	4658      	mov	r0, fp
 800a644:	f000 fc90 	bl	800af68 <_Bfree>
 800a648:	2300      	movs	r3, #0
 800a64a:	7033      	strb	r3, [r6, #0]
 800a64c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a64e:	3701      	adds	r7, #1
 800a650:	601f      	str	r7, [r3, #0]
 800a652:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a654:	2b00      	cmp	r3, #0
 800a656:	f000 831d 	beq.w	800ac94 <_dtoa_r+0xb34>
 800a65a:	601e      	str	r6, [r3, #0]
 800a65c:	e31a      	b.n	800ac94 <_dtoa_r+0xb34>
 800a65e:	07e2      	lsls	r2, r4, #31
 800a660:	d505      	bpl.n	800a66e <_dtoa_r+0x50e>
 800a662:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a666:	f7f5 ffcf 	bl	8000608 <__aeabi_dmul>
 800a66a:	3601      	adds	r6, #1
 800a66c:	2301      	movs	r3, #1
 800a66e:	1064      	asrs	r4, r4, #1
 800a670:	3508      	adds	r5, #8
 800a672:	e73f      	b.n	800a4f4 <_dtoa_r+0x394>
 800a674:	2602      	movs	r6, #2
 800a676:	e742      	b.n	800a4fe <_dtoa_r+0x39e>
 800a678:	9c07      	ldr	r4, [sp, #28]
 800a67a:	9704      	str	r7, [sp, #16]
 800a67c:	e761      	b.n	800a542 <_dtoa_r+0x3e2>
 800a67e:	4b27      	ldr	r3, [pc, #156]	@ (800a71c <_dtoa_r+0x5bc>)
 800a680:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a682:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a686:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a68a:	4454      	add	r4, sl
 800a68c:	2900      	cmp	r1, #0
 800a68e:	d053      	beq.n	800a738 <_dtoa_r+0x5d8>
 800a690:	4928      	ldr	r1, [pc, #160]	@ (800a734 <_dtoa_r+0x5d4>)
 800a692:	2000      	movs	r0, #0
 800a694:	f7f6 f8e2 	bl	800085c <__aeabi_ddiv>
 800a698:	4633      	mov	r3, r6
 800a69a:	462a      	mov	r2, r5
 800a69c:	f7f5 fdfc 	bl	8000298 <__aeabi_dsub>
 800a6a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a6a4:	4656      	mov	r6, sl
 800a6a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6aa:	f7f6 fa5d 	bl	8000b68 <__aeabi_d2iz>
 800a6ae:	4605      	mov	r5, r0
 800a6b0:	f7f5 ff40 	bl	8000534 <__aeabi_i2d>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6bc:	f7f5 fdec 	bl	8000298 <__aeabi_dsub>
 800a6c0:	3530      	adds	r5, #48	@ 0x30
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6ca:	f806 5b01 	strb.w	r5, [r6], #1
 800a6ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a6d2:	f7f6 fa0b 	bl	8000aec <__aeabi_dcmplt>
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d171      	bne.n	800a7be <_dtoa_r+0x65e>
 800a6da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6de:	4911      	ldr	r1, [pc, #68]	@ (800a724 <_dtoa_r+0x5c4>)
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	f7f5 fdd9 	bl	8000298 <__aeabi_dsub>
 800a6e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a6ea:	f7f6 f9ff 	bl	8000aec <__aeabi_dcmplt>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	f040 8095 	bne.w	800a81e <_dtoa_r+0x6be>
 800a6f4:	42a6      	cmp	r6, r4
 800a6f6:	f43f af50 	beq.w	800a59a <_dtoa_r+0x43a>
 800a6fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a6fe:	4b0a      	ldr	r3, [pc, #40]	@ (800a728 <_dtoa_r+0x5c8>)
 800a700:	2200      	movs	r2, #0
 800a702:	f7f5 ff81 	bl	8000608 <__aeabi_dmul>
 800a706:	4b08      	ldr	r3, [pc, #32]	@ (800a728 <_dtoa_r+0x5c8>)
 800a708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a70c:	2200      	movs	r2, #0
 800a70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a712:	f7f5 ff79 	bl	8000608 <__aeabi_dmul>
 800a716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a71a:	e7c4      	b.n	800a6a6 <_dtoa_r+0x546>
 800a71c:	0800c8b0 	.word	0x0800c8b0
 800a720:	0800c888 	.word	0x0800c888
 800a724:	3ff00000 	.word	0x3ff00000
 800a728:	40240000 	.word	0x40240000
 800a72c:	401c0000 	.word	0x401c0000
 800a730:	40140000 	.word	0x40140000
 800a734:	3fe00000 	.word	0x3fe00000
 800a738:	4631      	mov	r1, r6
 800a73a:	4628      	mov	r0, r5
 800a73c:	f7f5 ff64 	bl	8000608 <__aeabi_dmul>
 800a740:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a744:	9415      	str	r4, [sp, #84]	@ 0x54
 800a746:	4656      	mov	r6, sl
 800a748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a74c:	f7f6 fa0c 	bl	8000b68 <__aeabi_d2iz>
 800a750:	4605      	mov	r5, r0
 800a752:	f7f5 feef 	bl	8000534 <__aeabi_i2d>
 800a756:	4602      	mov	r2, r0
 800a758:	460b      	mov	r3, r1
 800a75a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a75e:	f7f5 fd9b 	bl	8000298 <__aeabi_dsub>
 800a762:	3530      	adds	r5, #48	@ 0x30
 800a764:	f806 5b01 	strb.w	r5, [r6], #1
 800a768:	4602      	mov	r2, r0
 800a76a:	460b      	mov	r3, r1
 800a76c:	42a6      	cmp	r6, r4
 800a76e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a772:	f04f 0200 	mov.w	r2, #0
 800a776:	d124      	bne.n	800a7c2 <_dtoa_r+0x662>
 800a778:	4bac      	ldr	r3, [pc, #688]	@ (800aa2c <_dtoa_r+0x8cc>)
 800a77a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a77e:	f7f5 fd8d 	bl	800029c <__adddf3>
 800a782:	4602      	mov	r2, r0
 800a784:	460b      	mov	r3, r1
 800a786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a78a:	f7f6 f9cd 	bl	8000b28 <__aeabi_dcmpgt>
 800a78e:	2800      	cmp	r0, #0
 800a790:	d145      	bne.n	800a81e <_dtoa_r+0x6be>
 800a792:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a796:	49a5      	ldr	r1, [pc, #660]	@ (800aa2c <_dtoa_r+0x8cc>)
 800a798:	2000      	movs	r0, #0
 800a79a:	f7f5 fd7d 	bl	8000298 <__aeabi_dsub>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7a6:	f7f6 f9a1 	bl	8000aec <__aeabi_dcmplt>
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	f43f aef5 	beq.w	800a59a <_dtoa_r+0x43a>
 800a7b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a7b2:	1e73      	subs	r3, r6, #1
 800a7b4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a7b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a7ba:	2b30      	cmp	r3, #48	@ 0x30
 800a7bc:	d0f8      	beq.n	800a7b0 <_dtoa_r+0x650>
 800a7be:	9f04      	ldr	r7, [sp, #16]
 800a7c0:	e73e      	b.n	800a640 <_dtoa_r+0x4e0>
 800a7c2:	4b9b      	ldr	r3, [pc, #620]	@ (800aa30 <_dtoa_r+0x8d0>)
 800a7c4:	f7f5 ff20 	bl	8000608 <__aeabi_dmul>
 800a7c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7cc:	e7bc      	b.n	800a748 <_dtoa_r+0x5e8>
 800a7ce:	d10c      	bne.n	800a7ea <_dtoa_r+0x68a>
 800a7d0:	4b98      	ldr	r3, [pc, #608]	@ (800aa34 <_dtoa_r+0x8d4>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7d8:	f7f5 ff16 	bl	8000608 <__aeabi_dmul>
 800a7dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7e0:	f7f6 f998 	bl	8000b14 <__aeabi_dcmpge>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	f000 8157 	beq.w	800aa98 <_dtoa_r+0x938>
 800a7ea:	2400      	movs	r4, #0
 800a7ec:	4625      	mov	r5, r4
 800a7ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7f0:	43db      	mvns	r3, r3
 800a7f2:	9304      	str	r3, [sp, #16]
 800a7f4:	4656      	mov	r6, sl
 800a7f6:	2700      	movs	r7, #0
 800a7f8:	4621      	mov	r1, r4
 800a7fa:	4658      	mov	r0, fp
 800a7fc:	f000 fbb4 	bl	800af68 <_Bfree>
 800a800:	2d00      	cmp	r5, #0
 800a802:	d0dc      	beq.n	800a7be <_dtoa_r+0x65e>
 800a804:	b12f      	cbz	r7, 800a812 <_dtoa_r+0x6b2>
 800a806:	42af      	cmp	r7, r5
 800a808:	d003      	beq.n	800a812 <_dtoa_r+0x6b2>
 800a80a:	4639      	mov	r1, r7
 800a80c:	4658      	mov	r0, fp
 800a80e:	f000 fbab 	bl	800af68 <_Bfree>
 800a812:	4629      	mov	r1, r5
 800a814:	4658      	mov	r0, fp
 800a816:	f000 fba7 	bl	800af68 <_Bfree>
 800a81a:	e7d0      	b.n	800a7be <_dtoa_r+0x65e>
 800a81c:	9704      	str	r7, [sp, #16]
 800a81e:	4633      	mov	r3, r6
 800a820:	461e      	mov	r6, r3
 800a822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a826:	2a39      	cmp	r2, #57	@ 0x39
 800a828:	d107      	bne.n	800a83a <_dtoa_r+0x6da>
 800a82a:	459a      	cmp	sl, r3
 800a82c:	d1f8      	bne.n	800a820 <_dtoa_r+0x6c0>
 800a82e:	9a04      	ldr	r2, [sp, #16]
 800a830:	3201      	adds	r2, #1
 800a832:	9204      	str	r2, [sp, #16]
 800a834:	2230      	movs	r2, #48	@ 0x30
 800a836:	f88a 2000 	strb.w	r2, [sl]
 800a83a:	781a      	ldrb	r2, [r3, #0]
 800a83c:	3201      	adds	r2, #1
 800a83e:	701a      	strb	r2, [r3, #0]
 800a840:	e7bd      	b.n	800a7be <_dtoa_r+0x65e>
 800a842:	4b7b      	ldr	r3, [pc, #492]	@ (800aa30 <_dtoa_r+0x8d0>)
 800a844:	2200      	movs	r2, #0
 800a846:	f7f5 fedf 	bl	8000608 <__aeabi_dmul>
 800a84a:	2200      	movs	r2, #0
 800a84c:	2300      	movs	r3, #0
 800a84e:	4604      	mov	r4, r0
 800a850:	460d      	mov	r5, r1
 800a852:	f7f6 f941 	bl	8000ad8 <__aeabi_dcmpeq>
 800a856:	2800      	cmp	r0, #0
 800a858:	f43f aebb 	beq.w	800a5d2 <_dtoa_r+0x472>
 800a85c:	e6f0      	b.n	800a640 <_dtoa_r+0x4e0>
 800a85e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a860:	2a00      	cmp	r2, #0
 800a862:	f000 80db 	beq.w	800aa1c <_dtoa_r+0x8bc>
 800a866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a868:	2a01      	cmp	r2, #1
 800a86a:	f300 80bf 	bgt.w	800a9ec <_dtoa_r+0x88c>
 800a86e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a870:	2a00      	cmp	r2, #0
 800a872:	f000 80b7 	beq.w	800a9e4 <_dtoa_r+0x884>
 800a876:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a87a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a87c:	4646      	mov	r6, r8
 800a87e:	9a08      	ldr	r2, [sp, #32]
 800a880:	2101      	movs	r1, #1
 800a882:	441a      	add	r2, r3
 800a884:	4658      	mov	r0, fp
 800a886:	4498      	add	r8, r3
 800a888:	9208      	str	r2, [sp, #32]
 800a88a:	f000 fc21 	bl	800b0d0 <__i2b>
 800a88e:	4605      	mov	r5, r0
 800a890:	b15e      	cbz	r6, 800a8aa <_dtoa_r+0x74a>
 800a892:	9b08      	ldr	r3, [sp, #32]
 800a894:	2b00      	cmp	r3, #0
 800a896:	dd08      	ble.n	800a8aa <_dtoa_r+0x74a>
 800a898:	42b3      	cmp	r3, r6
 800a89a:	9a08      	ldr	r2, [sp, #32]
 800a89c:	bfa8      	it	ge
 800a89e:	4633      	movge	r3, r6
 800a8a0:	eba8 0803 	sub.w	r8, r8, r3
 800a8a4:	1af6      	subs	r6, r6, r3
 800a8a6:	1ad3      	subs	r3, r2, r3
 800a8a8:	9308      	str	r3, [sp, #32]
 800a8aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8ac:	b1f3      	cbz	r3, 800a8ec <_dtoa_r+0x78c>
 800a8ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f000 80b7 	beq.w	800aa24 <_dtoa_r+0x8c4>
 800a8b6:	b18c      	cbz	r4, 800a8dc <_dtoa_r+0x77c>
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	4622      	mov	r2, r4
 800a8bc:	4658      	mov	r0, fp
 800a8be:	f000 fcc7 	bl	800b250 <__pow5mult>
 800a8c2:	464a      	mov	r2, r9
 800a8c4:	4601      	mov	r1, r0
 800a8c6:	4605      	mov	r5, r0
 800a8c8:	4658      	mov	r0, fp
 800a8ca:	f000 fc17 	bl	800b0fc <__multiply>
 800a8ce:	4649      	mov	r1, r9
 800a8d0:	9004      	str	r0, [sp, #16]
 800a8d2:	4658      	mov	r0, fp
 800a8d4:	f000 fb48 	bl	800af68 <_Bfree>
 800a8d8:	9b04      	ldr	r3, [sp, #16]
 800a8da:	4699      	mov	r9, r3
 800a8dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8de:	1b1a      	subs	r2, r3, r4
 800a8e0:	d004      	beq.n	800a8ec <_dtoa_r+0x78c>
 800a8e2:	4649      	mov	r1, r9
 800a8e4:	4658      	mov	r0, fp
 800a8e6:	f000 fcb3 	bl	800b250 <__pow5mult>
 800a8ea:	4681      	mov	r9, r0
 800a8ec:	2101      	movs	r1, #1
 800a8ee:	4658      	mov	r0, fp
 800a8f0:	f000 fbee 	bl	800b0d0 <__i2b>
 800a8f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f000 81cf 	beq.w	800ac9c <_dtoa_r+0xb3c>
 800a8fe:	461a      	mov	r2, r3
 800a900:	4601      	mov	r1, r0
 800a902:	4658      	mov	r0, fp
 800a904:	f000 fca4 	bl	800b250 <__pow5mult>
 800a908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	4604      	mov	r4, r0
 800a90e:	f300 8095 	bgt.w	800aa3c <_dtoa_r+0x8dc>
 800a912:	9b02      	ldr	r3, [sp, #8]
 800a914:	2b00      	cmp	r3, #0
 800a916:	f040 8087 	bne.w	800aa28 <_dtoa_r+0x8c8>
 800a91a:	9b03      	ldr	r3, [sp, #12]
 800a91c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a920:	2b00      	cmp	r3, #0
 800a922:	f040 8089 	bne.w	800aa38 <_dtoa_r+0x8d8>
 800a926:	9b03      	ldr	r3, [sp, #12]
 800a928:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a92c:	0d1b      	lsrs	r3, r3, #20
 800a92e:	051b      	lsls	r3, r3, #20
 800a930:	b12b      	cbz	r3, 800a93e <_dtoa_r+0x7de>
 800a932:	9b08      	ldr	r3, [sp, #32]
 800a934:	3301      	adds	r3, #1
 800a936:	9308      	str	r3, [sp, #32]
 800a938:	f108 0801 	add.w	r8, r8, #1
 800a93c:	2301      	movs	r3, #1
 800a93e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a942:	2b00      	cmp	r3, #0
 800a944:	f000 81b0 	beq.w	800aca8 <_dtoa_r+0xb48>
 800a948:	6923      	ldr	r3, [r4, #16]
 800a94a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a94e:	6918      	ldr	r0, [r3, #16]
 800a950:	f000 fb72 	bl	800b038 <__hi0bits>
 800a954:	f1c0 0020 	rsb	r0, r0, #32
 800a958:	9b08      	ldr	r3, [sp, #32]
 800a95a:	4418      	add	r0, r3
 800a95c:	f010 001f 	ands.w	r0, r0, #31
 800a960:	d077      	beq.n	800aa52 <_dtoa_r+0x8f2>
 800a962:	f1c0 0320 	rsb	r3, r0, #32
 800a966:	2b04      	cmp	r3, #4
 800a968:	dd6b      	ble.n	800aa42 <_dtoa_r+0x8e2>
 800a96a:	9b08      	ldr	r3, [sp, #32]
 800a96c:	f1c0 001c 	rsb	r0, r0, #28
 800a970:	4403      	add	r3, r0
 800a972:	4480      	add	r8, r0
 800a974:	4406      	add	r6, r0
 800a976:	9308      	str	r3, [sp, #32]
 800a978:	f1b8 0f00 	cmp.w	r8, #0
 800a97c:	dd05      	ble.n	800a98a <_dtoa_r+0x82a>
 800a97e:	4649      	mov	r1, r9
 800a980:	4642      	mov	r2, r8
 800a982:	4658      	mov	r0, fp
 800a984:	f000 fcbe 	bl	800b304 <__lshift>
 800a988:	4681      	mov	r9, r0
 800a98a:	9b08      	ldr	r3, [sp, #32]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	dd05      	ble.n	800a99c <_dtoa_r+0x83c>
 800a990:	4621      	mov	r1, r4
 800a992:	461a      	mov	r2, r3
 800a994:	4658      	mov	r0, fp
 800a996:	f000 fcb5 	bl	800b304 <__lshift>
 800a99a:	4604      	mov	r4, r0
 800a99c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d059      	beq.n	800aa56 <_dtoa_r+0x8f6>
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	4648      	mov	r0, r9
 800a9a6:	f000 fd19 	bl	800b3dc <__mcmp>
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	da53      	bge.n	800aa56 <_dtoa_r+0x8f6>
 800a9ae:	1e7b      	subs	r3, r7, #1
 800a9b0:	9304      	str	r3, [sp, #16]
 800a9b2:	4649      	mov	r1, r9
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	220a      	movs	r2, #10
 800a9b8:	4658      	mov	r0, fp
 800a9ba:	f000 faf7 	bl	800afac <__multadd>
 800a9be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9c0:	4681      	mov	r9, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f000 8172 	beq.w	800acac <_dtoa_r+0xb4c>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	220a      	movs	r2, #10
 800a9ce:	4658      	mov	r0, fp
 800a9d0:	f000 faec 	bl	800afac <__multadd>
 800a9d4:	9b00      	ldr	r3, [sp, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	4605      	mov	r5, r0
 800a9da:	dc67      	bgt.n	800aaac <_dtoa_r+0x94c>
 800a9dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	dc41      	bgt.n	800aa66 <_dtoa_r+0x906>
 800a9e2:	e063      	b.n	800aaac <_dtoa_r+0x94c>
 800a9e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a9e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a9ea:	e746      	b.n	800a87a <_dtoa_r+0x71a>
 800a9ec:	9b07      	ldr	r3, [sp, #28]
 800a9ee:	1e5c      	subs	r4, r3, #1
 800a9f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9f2:	42a3      	cmp	r3, r4
 800a9f4:	bfbf      	itttt	lt
 800a9f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a9f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a9fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a9fc:	1ae3      	sublt	r3, r4, r3
 800a9fe:	bfb4      	ite	lt
 800aa00:	18d2      	addlt	r2, r2, r3
 800aa02:	1b1c      	subge	r4, r3, r4
 800aa04:	9b07      	ldr	r3, [sp, #28]
 800aa06:	bfbc      	itt	lt
 800aa08:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800aa0a:	2400      	movlt	r4, #0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	bfb5      	itete	lt
 800aa10:	eba8 0603 	sublt.w	r6, r8, r3
 800aa14:	9b07      	ldrge	r3, [sp, #28]
 800aa16:	2300      	movlt	r3, #0
 800aa18:	4646      	movge	r6, r8
 800aa1a:	e730      	b.n	800a87e <_dtoa_r+0x71e>
 800aa1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aa1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aa20:	4646      	mov	r6, r8
 800aa22:	e735      	b.n	800a890 <_dtoa_r+0x730>
 800aa24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa26:	e75c      	b.n	800a8e2 <_dtoa_r+0x782>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	e788      	b.n	800a93e <_dtoa_r+0x7de>
 800aa2c:	3fe00000 	.word	0x3fe00000
 800aa30:	40240000 	.word	0x40240000
 800aa34:	40140000 	.word	0x40140000
 800aa38:	9b02      	ldr	r3, [sp, #8]
 800aa3a:	e780      	b.n	800a93e <_dtoa_r+0x7de>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa40:	e782      	b.n	800a948 <_dtoa_r+0x7e8>
 800aa42:	d099      	beq.n	800a978 <_dtoa_r+0x818>
 800aa44:	9a08      	ldr	r2, [sp, #32]
 800aa46:	331c      	adds	r3, #28
 800aa48:	441a      	add	r2, r3
 800aa4a:	4498      	add	r8, r3
 800aa4c:	441e      	add	r6, r3
 800aa4e:	9208      	str	r2, [sp, #32]
 800aa50:	e792      	b.n	800a978 <_dtoa_r+0x818>
 800aa52:	4603      	mov	r3, r0
 800aa54:	e7f6      	b.n	800aa44 <_dtoa_r+0x8e4>
 800aa56:	9b07      	ldr	r3, [sp, #28]
 800aa58:	9704      	str	r7, [sp, #16]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	dc20      	bgt.n	800aaa0 <_dtoa_r+0x940>
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	dd1e      	ble.n	800aaa4 <_dtoa_r+0x944>
 800aa66:	9b00      	ldr	r3, [sp, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f47f aec0 	bne.w	800a7ee <_dtoa_r+0x68e>
 800aa6e:	4621      	mov	r1, r4
 800aa70:	2205      	movs	r2, #5
 800aa72:	4658      	mov	r0, fp
 800aa74:	f000 fa9a 	bl	800afac <__multadd>
 800aa78:	4601      	mov	r1, r0
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	4648      	mov	r0, r9
 800aa7e:	f000 fcad 	bl	800b3dc <__mcmp>
 800aa82:	2800      	cmp	r0, #0
 800aa84:	f77f aeb3 	ble.w	800a7ee <_dtoa_r+0x68e>
 800aa88:	4656      	mov	r6, sl
 800aa8a:	2331      	movs	r3, #49	@ 0x31
 800aa8c:	f806 3b01 	strb.w	r3, [r6], #1
 800aa90:	9b04      	ldr	r3, [sp, #16]
 800aa92:	3301      	adds	r3, #1
 800aa94:	9304      	str	r3, [sp, #16]
 800aa96:	e6ae      	b.n	800a7f6 <_dtoa_r+0x696>
 800aa98:	9c07      	ldr	r4, [sp, #28]
 800aa9a:	9704      	str	r7, [sp, #16]
 800aa9c:	4625      	mov	r5, r4
 800aa9e:	e7f3      	b.n	800aa88 <_dtoa_r+0x928>
 800aaa0:	9b07      	ldr	r3, [sp, #28]
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	f000 8104 	beq.w	800acb4 <_dtoa_r+0xb54>
 800aaac:	2e00      	cmp	r6, #0
 800aaae:	dd05      	ble.n	800aabc <_dtoa_r+0x95c>
 800aab0:	4629      	mov	r1, r5
 800aab2:	4632      	mov	r2, r6
 800aab4:	4658      	mov	r0, fp
 800aab6:	f000 fc25 	bl	800b304 <__lshift>
 800aaba:	4605      	mov	r5, r0
 800aabc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d05a      	beq.n	800ab78 <_dtoa_r+0xa18>
 800aac2:	6869      	ldr	r1, [r5, #4]
 800aac4:	4658      	mov	r0, fp
 800aac6:	f000 fa0f 	bl	800aee8 <_Balloc>
 800aaca:	4606      	mov	r6, r0
 800aacc:	b928      	cbnz	r0, 800aada <_dtoa_r+0x97a>
 800aace:	4b84      	ldr	r3, [pc, #528]	@ (800ace0 <_dtoa_r+0xb80>)
 800aad0:	4602      	mov	r2, r0
 800aad2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800aad6:	f7ff bb5a 	b.w	800a18e <_dtoa_r+0x2e>
 800aada:	692a      	ldr	r2, [r5, #16]
 800aadc:	3202      	adds	r2, #2
 800aade:	0092      	lsls	r2, r2, #2
 800aae0:	f105 010c 	add.w	r1, r5, #12
 800aae4:	300c      	adds	r0, #12
 800aae6:	f7ff fa86 	bl	8009ff6 <memcpy>
 800aaea:	2201      	movs	r2, #1
 800aaec:	4631      	mov	r1, r6
 800aaee:	4658      	mov	r0, fp
 800aaf0:	f000 fc08 	bl	800b304 <__lshift>
 800aaf4:	f10a 0301 	add.w	r3, sl, #1
 800aaf8:	9307      	str	r3, [sp, #28]
 800aafa:	9b00      	ldr	r3, [sp, #0]
 800aafc:	4453      	add	r3, sl
 800aafe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab00:	9b02      	ldr	r3, [sp, #8]
 800ab02:	f003 0301 	and.w	r3, r3, #1
 800ab06:	462f      	mov	r7, r5
 800ab08:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	9b07      	ldr	r3, [sp, #28]
 800ab0e:	4621      	mov	r1, r4
 800ab10:	3b01      	subs	r3, #1
 800ab12:	4648      	mov	r0, r9
 800ab14:	9300      	str	r3, [sp, #0]
 800ab16:	f7ff fa9b 	bl	800a050 <quorem>
 800ab1a:	4639      	mov	r1, r7
 800ab1c:	9002      	str	r0, [sp, #8]
 800ab1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ab22:	4648      	mov	r0, r9
 800ab24:	f000 fc5a 	bl	800b3dc <__mcmp>
 800ab28:	462a      	mov	r2, r5
 800ab2a:	9008      	str	r0, [sp, #32]
 800ab2c:	4621      	mov	r1, r4
 800ab2e:	4658      	mov	r0, fp
 800ab30:	f000 fc70 	bl	800b414 <__mdiff>
 800ab34:	68c2      	ldr	r2, [r0, #12]
 800ab36:	4606      	mov	r6, r0
 800ab38:	bb02      	cbnz	r2, 800ab7c <_dtoa_r+0xa1c>
 800ab3a:	4601      	mov	r1, r0
 800ab3c:	4648      	mov	r0, r9
 800ab3e:	f000 fc4d 	bl	800b3dc <__mcmp>
 800ab42:	4602      	mov	r2, r0
 800ab44:	4631      	mov	r1, r6
 800ab46:	4658      	mov	r0, fp
 800ab48:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab4a:	f000 fa0d 	bl	800af68 <_Bfree>
 800ab4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab52:	9e07      	ldr	r6, [sp, #28]
 800ab54:	ea43 0102 	orr.w	r1, r3, r2
 800ab58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab5a:	4319      	orrs	r1, r3
 800ab5c:	d110      	bne.n	800ab80 <_dtoa_r+0xa20>
 800ab5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab62:	d029      	beq.n	800abb8 <_dtoa_r+0xa58>
 800ab64:	9b08      	ldr	r3, [sp, #32]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	dd02      	ble.n	800ab70 <_dtoa_r+0xa10>
 800ab6a:	9b02      	ldr	r3, [sp, #8]
 800ab6c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ab70:	9b00      	ldr	r3, [sp, #0]
 800ab72:	f883 8000 	strb.w	r8, [r3]
 800ab76:	e63f      	b.n	800a7f8 <_dtoa_r+0x698>
 800ab78:	4628      	mov	r0, r5
 800ab7a:	e7bb      	b.n	800aaf4 <_dtoa_r+0x994>
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	e7e1      	b.n	800ab44 <_dtoa_r+0x9e4>
 800ab80:	9b08      	ldr	r3, [sp, #32]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	db04      	blt.n	800ab90 <_dtoa_r+0xa30>
 800ab86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab88:	430b      	orrs	r3, r1
 800ab8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab8c:	430b      	orrs	r3, r1
 800ab8e:	d120      	bne.n	800abd2 <_dtoa_r+0xa72>
 800ab90:	2a00      	cmp	r2, #0
 800ab92:	dded      	ble.n	800ab70 <_dtoa_r+0xa10>
 800ab94:	4649      	mov	r1, r9
 800ab96:	2201      	movs	r2, #1
 800ab98:	4658      	mov	r0, fp
 800ab9a:	f000 fbb3 	bl	800b304 <__lshift>
 800ab9e:	4621      	mov	r1, r4
 800aba0:	4681      	mov	r9, r0
 800aba2:	f000 fc1b 	bl	800b3dc <__mcmp>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	dc03      	bgt.n	800abb2 <_dtoa_r+0xa52>
 800abaa:	d1e1      	bne.n	800ab70 <_dtoa_r+0xa10>
 800abac:	f018 0f01 	tst.w	r8, #1
 800abb0:	d0de      	beq.n	800ab70 <_dtoa_r+0xa10>
 800abb2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800abb6:	d1d8      	bne.n	800ab6a <_dtoa_r+0xa0a>
 800abb8:	9a00      	ldr	r2, [sp, #0]
 800abba:	2339      	movs	r3, #57	@ 0x39
 800abbc:	7013      	strb	r3, [r2, #0]
 800abbe:	4633      	mov	r3, r6
 800abc0:	461e      	mov	r6, r3
 800abc2:	3b01      	subs	r3, #1
 800abc4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800abc8:	2a39      	cmp	r2, #57	@ 0x39
 800abca:	d052      	beq.n	800ac72 <_dtoa_r+0xb12>
 800abcc:	3201      	adds	r2, #1
 800abce:	701a      	strb	r2, [r3, #0]
 800abd0:	e612      	b.n	800a7f8 <_dtoa_r+0x698>
 800abd2:	2a00      	cmp	r2, #0
 800abd4:	dd07      	ble.n	800abe6 <_dtoa_r+0xa86>
 800abd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800abda:	d0ed      	beq.n	800abb8 <_dtoa_r+0xa58>
 800abdc:	9a00      	ldr	r2, [sp, #0]
 800abde:	f108 0301 	add.w	r3, r8, #1
 800abe2:	7013      	strb	r3, [r2, #0]
 800abe4:	e608      	b.n	800a7f8 <_dtoa_r+0x698>
 800abe6:	9b07      	ldr	r3, [sp, #28]
 800abe8:	9a07      	ldr	r2, [sp, #28]
 800abea:	f803 8c01 	strb.w	r8, [r3, #-1]
 800abee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d028      	beq.n	800ac46 <_dtoa_r+0xae6>
 800abf4:	4649      	mov	r1, r9
 800abf6:	2300      	movs	r3, #0
 800abf8:	220a      	movs	r2, #10
 800abfa:	4658      	mov	r0, fp
 800abfc:	f000 f9d6 	bl	800afac <__multadd>
 800ac00:	42af      	cmp	r7, r5
 800ac02:	4681      	mov	r9, r0
 800ac04:	f04f 0300 	mov.w	r3, #0
 800ac08:	f04f 020a 	mov.w	r2, #10
 800ac0c:	4639      	mov	r1, r7
 800ac0e:	4658      	mov	r0, fp
 800ac10:	d107      	bne.n	800ac22 <_dtoa_r+0xac2>
 800ac12:	f000 f9cb 	bl	800afac <__multadd>
 800ac16:	4607      	mov	r7, r0
 800ac18:	4605      	mov	r5, r0
 800ac1a:	9b07      	ldr	r3, [sp, #28]
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	9307      	str	r3, [sp, #28]
 800ac20:	e774      	b.n	800ab0c <_dtoa_r+0x9ac>
 800ac22:	f000 f9c3 	bl	800afac <__multadd>
 800ac26:	4629      	mov	r1, r5
 800ac28:	4607      	mov	r7, r0
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	220a      	movs	r2, #10
 800ac2e:	4658      	mov	r0, fp
 800ac30:	f000 f9bc 	bl	800afac <__multadd>
 800ac34:	4605      	mov	r5, r0
 800ac36:	e7f0      	b.n	800ac1a <_dtoa_r+0xaba>
 800ac38:	9b00      	ldr	r3, [sp, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	bfcc      	ite	gt
 800ac3e:	461e      	movgt	r6, r3
 800ac40:	2601      	movle	r6, #1
 800ac42:	4456      	add	r6, sl
 800ac44:	2700      	movs	r7, #0
 800ac46:	4649      	mov	r1, r9
 800ac48:	2201      	movs	r2, #1
 800ac4a:	4658      	mov	r0, fp
 800ac4c:	f000 fb5a 	bl	800b304 <__lshift>
 800ac50:	4621      	mov	r1, r4
 800ac52:	4681      	mov	r9, r0
 800ac54:	f000 fbc2 	bl	800b3dc <__mcmp>
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	dcb0      	bgt.n	800abbe <_dtoa_r+0xa5e>
 800ac5c:	d102      	bne.n	800ac64 <_dtoa_r+0xb04>
 800ac5e:	f018 0f01 	tst.w	r8, #1
 800ac62:	d1ac      	bne.n	800abbe <_dtoa_r+0xa5e>
 800ac64:	4633      	mov	r3, r6
 800ac66:	461e      	mov	r6, r3
 800ac68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac6c:	2a30      	cmp	r2, #48	@ 0x30
 800ac6e:	d0fa      	beq.n	800ac66 <_dtoa_r+0xb06>
 800ac70:	e5c2      	b.n	800a7f8 <_dtoa_r+0x698>
 800ac72:	459a      	cmp	sl, r3
 800ac74:	d1a4      	bne.n	800abc0 <_dtoa_r+0xa60>
 800ac76:	9b04      	ldr	r3, [sp, #16]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	9304      	str	r3, [sp, #16]
 800ac7c:	2331      	movs	r3, #49	@ 0x31
 800ac7e:	f88a 3000 	strb.w	r3, [sl]
 800ac82:	e5b9      	b.n	800a7f8 <_dtoa_r+0x698>
 800ac84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ace4 <_dtoa_r+0xb84>
 800ac8a:	b11b      	cbz	r3, 800ac94 <_dtoa_r+0xb34>
 800ac8c:	f10a 0308 	add.w	r3, sl, #8
 800ac90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ac92:	6013      	str	r3, [r2, #0]
 800ac94:	4650      	mov	r0, sl
 800ac96:	b019      	add	sp, #100	@ 0x64
 800ac98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	f77f ae37 	ble.w	800a912 <_dtoa_r+0x7b2>
 800aca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aca6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aca8:	2001      	movs	r0, #1
 800acaa:	e655      	b.n	800a958 <_dtoa_r+0x7f8>
 800acac:	9b00      	ldr	r3, [sp, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f77f aed6 	ble.w	800aa60 <_dtoa_r+0x900>
 800acb4:	4656      	mov	r6, sl
 800acb6:	4621      	mov	r1, r4
 800acb8:	4648      	mov	r0, r9
 800acba:	f7ff f9c9 	bl	800a050 <quorem>
 800acbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800acc2:	f806 8b01 	strb.w	r8, [r6], #1
 800acc6:	9b00      	ldr	r3, [sp, #0]
 800acc8:	eba6 020a 	sub.w	r2, r6, sl
 800accc:	4293      	cmp	r3, r2
 800acce:	ddb3      	ble.n	800ac38 <_dtoa_r+0xad8>
 800acd0:	4649      	mov	r1, r9
 800acd2:	2300      	movs	r3, #0
 800acd4:	220a      	movs	r2, #10
 800acd6:	4658      	mov	r0, fp
 800acd8:	f000 f968 	bl	800afac <__multadd>
 800acdc:	4681      	mov	r9, r0
 800acde:	e7ea      	b.n	800acb6 <_dtoa_r+0xb56>
 800ace0:	0800c810 	.word	0x0800c810
 800ace4:	0800c794 	.word	0x0800c794

0800ace8 <_free_r>:
 800ace8:	b538      	push	{r3, r4, r5, lr}
 800acea:	4605      	mov	r5, r0
 800acec:	2900      	cmp	r1, #0
 800acee:	d041      	beq.n	800ad74 <_free_r+0x8c>
 800acf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acf4:	1f0c      	subs	r4, r1, #4
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	bfb8      	it	lt
 800acfa:	18e4      	addlt	r4, r4, r3
 800acfc:	f000 f8e8 	bl	800aed0 <__malloc_lock>
 800ad00:	4a1d      	ldr	r2, [pc, #116]	@ (800ad78 <_free_r+0x90>)
 800ad02:	6813      	ldr	r3, [r2, #0]
 800ad04:	b933      	cbnz	r3, 800ad14 <_free_r+0x2c>
 800ad06:	6063      	str	r3, [r4, #4]
 800ad08:	6014      	str	r4, [r2, #0]
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad10:	f000 b8e4 	b.w	800aedc <__malloc_unlock>
 800ad14:	42a3      	cmp	r3, r4
 800ad16:	d908      	bls.n	800ad2a <_free_r+0x42>
 800ad18:	6820      	ldr	r0, [r4, #0]
 800ad1a:	1821      	adds	r1, r4, r0
 800ad1c:	428b      	cmp	r3, r1
 800ad1e:	bf01      	itttt	eq
 800ad20:	6819      	ldreq	r1, [r3, #0]
 800ad22:	685b      	ldreq	r3, [r3, #4]
 800ad24:	1809      	addeq	r1, r1, r0
 800ad26:	6021      	streq	r1, [r4, #0]
 800ad28:	e7ed      	b.n	800ad06 <_free_r+0x1e>
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	b10b      	cbz	r3, 800ad34 <_free_r+0x4c>
 800ad30:	42a3      	cmp	r3, r4
 800ad32:	d9fa      	bls.n	800ad2a <_free_r+0x42>
 800ad34:	6811      	ldr	r1, [r2, #0]
 800ad36:	1850      	adds	r0, r2, r1
 800ad38:	42a0      	cmp	r0, r4
 800ad3a:	d10b      	bne.n	800ad54 <_free_r+0x6c>
 800ad3c:	6820      	ldr	r0, [r4, #0]
 800ad3e:	4401      	add	r1, r0
 800ad40:	1850      	adds	r0, r2, r1
 800ad42:	4283      	cmp	r3, r0
 800ad44:	6011      	str	r1, [r2, #0]
 800ad46:	d1e0      	bne.n	800ad0a <_free_r+0x22>
 800ad48:	6818      	ldr	r0, [r3, #0]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	6053      	str	r3, [r2, #4]
 800ad4e:	4408      	add	r0, r1
 800ad50:	6010      	str	r0, [r2, #0]
 800ad52:	e7da      	b.n	800ad0a <_free_r+0x22>
 800ad54:	d902      	bls.n	800ad5c <_free_r+0x74>
 800ad56:	230c      	movs	r3, #12
 800ad58:	602b      	str	r3, [r5, #0]
 800ad5a:	e7d6      	b.n	800ad0a <_free_r+0x22>
 800ad5c:	6820      	ldr	r0, [r4, #0]
 800ad5e:	1821      	adds	r1, r4, r0
 800ad60:	428b      	cmp	r3, r1
 800ad62:	bf04      	itt	eq
 800ad64:	6819      	ldreq	r1, [r3, #0]
 800ad66:	685b      	ldreq	r3, [r3, #4]
 800ad68:	6063      	str	r3, [r4, #4]
 800ad6a:	bf04      	itt	eq
 800ad6c:	1809      	addeq	r1, r1, r0
 800ad6e:	6021      	streq	r1, [r4, #0]
 800ad70:	6054      	str	r4, [r2, #4]
 800ad72:	e7ca      	b.n	800ad0a <_free_r+0x22>
 800ad74:	bd38      	pop	{r3, r4, r5, pc}
 800ad76:	bf00      	nop
 800ad78:	20004fa4 	.word	0x20004fa4

0800ad7c <malloc>:
 800ad7c:	4b02      	ldr	r3, [pc, #8]	@ (800ad88 <malloc+0xc>)
 800ad7e:	4601      	mov	r1, r0
 800ad80:	6818      	ldr	r0, [r3, #0]
 800ad82:	f000 b825 	b.w	800add0 <_malloc_r>
 800ad86:	bf00      	nop
 800ad88:	2000016c 	.word	0x2000016c

0800ad8c <sbrk_aligned>:
 800ad8c:	b570      	push	{r4, r5, r6, lr}
 800ad8e:	4e0f      	ldr	r6, [pc, #60]	@ (800adcc <sbrk_aligned+0x40>)
 800ad90:	460c      	mov	r4, r1
 800ad92:	6831      	ldr	r1, [r6, #0]
 800ad94:	4605      	mov	r5, r0
 800ad96:	b911      	cbnz	r1, 800ad9e <sbrk_aligned+0x12>
 800ad98:	f000 fedc 	bl	800bb54 <_sbrk_r>
 800ad9c:	6030      	str	r0, [r6, #0]
 800ad9e:	4621      	mov	r1, r4
 800ada0:	4628      	mov	r0, r5
 800ada2:	f000 fed7 	bl	800bb54 <_sbrk_r>
 800ada6:	1c43      	adds	r3, r0, #1
 800ada8:	d103      	bne.n	800adb2 <sbrk_aligned+0x26>
 800adaa:	f04f 34ff 	mov.w	r4, #4294967295
 800adae:	4620      	mov	r0, r4
 800adb0:	bd70      	pop	{r4, r5, r6, pc}
 800adb2:	1cc4      	adds	r4, r0, #3
 800adb4:	f024 0403 	bic.w	r4, r4, #3
 800adb8:	42a0      	cmp	r0, r4
 800adba:	d0f8      	beq.n	800adae <sbrk_aligned+0x22>
 800adbc:	1a21      	subs	r1, r4, r0
 800adbe:	4628      	mov	r0, r5
 800adc0:	f000 fec8 	bl	800bb54 <_sbrk_r>
 800adc4:	3001      	adds	r0, #1
 800adc6:	d1f2      	bne.n	800adae <sbrk_aligned+0x22>
 800adc8:	e7ef      	b.n	800adaa <sbrk_aligned+0x1e>
 800adca:	bf00      	nop
 800adcc:	20004fa0 	.word	0x20004fa0

0800add0 <_malloc_r>:
 800add0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800add4:	1ccd      	adds	r5, r1, #3
 800add6:	f025 0503 	bic.w	r5, r5, #3
 800adda:	3508      	adds	r5, #8
 800addc:	2d0c      	cmp	r5, #12
 800adde:	bf38      	it	cc
 800ade0:	250c      	movcc	r5, #12
 800ade2:	2d00      	cmp	r5, #0
 800ade4:	4606      	mov	r6, r0
 800ade6:	db01      	blt.n	800adec <_malloc_r+0x1c>
 800ade8:	42a9      	cmp	r1, r5
 800adea:	d904      	bls.n	800adf6 <_malloc_r+0x26>
 800adec:	230c      	movs	r3, #12
 800adee:	6033      	str	r3, [r6, #0]
 800adf0:	2000      	movs	r0, #0
 800adf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aecc <_malloc_r+0xfc>
 800adfa:	f000 f869 	bl	800aed0 <__malloc_lock>
 800adfe:	f8d8 3000 	ldr.w	r3, [r8]
 800ae02:	461c      	mov	r4, r3
 800ae04:	bb44      	cbnz	r4, 800ae58 <_malloc_r+0x88>
 800ae06:	4629      	mov	r1, r5
 800ae08:	4630      	mov	r0, r6
 800ae0a:	f7ff ffbf 	bl	800ad8c <sbrk_aligned>
 800ae0e:	1c43      	adds	r3, r0, #1
 800ae10:	4604      	mov	r4, r0
 800ae12:	d158      	bne.n	800aec6 <_malloc_r+0xf6>
 800ae14:	f8d8 4000 	ldr.w	r4, [r8]
 800ae18:	4627      	mov	r7, r4
 800ae1a:	2f00      	cmp	r7, #0
 800ae1c:	d143      	bne.n	800aea6 <_malloc_r+0xd6>
 800ae1e:	2c00      	cmp	r4, #0
 800ae20:	d04b      	beq.n	800aeba <_malloc_r+0xea>
 800ae22:	6823      	ldr	r3, [r4, #0]
 800ae24:	4639      	mov	r1, r7
 800ae26:	4630      	mov	r0, r6
 800ae28:	eb04 0903 	add.w	r9, r4, r3
 800ae2c:	f000 fe92 	bl	800bb54 <_sbrk_r>
 800ae30:	4581      	cmp	r9, r0
 800ae32:	d142      	bne.n	800aeba <_malloc_r+0xea>
 800ae34:	6821      	ldr	r1, [r4, #0]
 800ae36:	1a6d      	subs	r5, r5, r1
 800ae38:	4629      	mov	r1, r5
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	f7ff ffa6 	bl	800ad8c <sbrk_aligned>
 800ae40:	3001      	adds	r0, #1
 800ae42:	d03a      	beq.n	800aeba <_malloc_r+0xea>
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	442b      	add	r3, r5
 800ae48:	6023      	str	r3, [r4, #0]
 800ae4a:	f8d8 3000 	ldr.w	r3, [r8]
 800ae4e:	685a      	ldr	r2, [r3, #4]
 800ae50:	bb62      	cbnz	r2, 800aeac <_malloc_r+0xdc>
 800ae52:	f8c8 7000 	str.w	r7, [r8]
 800ae56:	e00f      	b.n	800ae78 <_malloc_r+0xa8>
 800ae58:	6822      	ldr	r2, [r4, #0]
 800ae5a:	1b52      	subs	r2, r2, r5
 800ae5c:	d420      	bmi.n	800aea0 <_malloc_r+0xd0>
 800ae5e:	2a0b      	cmp	r2, #11
 800ae60:	d917      	bls.n	800ae92 <_malloc_r+0xc2>
 800ae62:	1961      	adds	r1, r4, r5
 800ae64:	42a3      	cmp	r3, r4
 800ae66:	6025      	str	r5, [r4, #0]
 800ae68:	bf18      	it	ne
 800ae6a:	6059      	strne	r1, [r3, #4]
 800ae6c:	6863      	ldr	r3, [r4, #4]
 800ae6e:	bf08      	it	eq
 800ae70:	f8c8 1000 	streq.w	r1, [r8]
 800ae74:	5162      	str	r2, [r4, r5]
 800ae76:	604b      	str	r3, [r1, #4]
 800ae78:	4630      	mov	r0, r6
 800ae7a:	f000 f82f 	bl	800aedc <__malloc_unlock>
 800ae7e:	f104 000b 	add.w	r0, r4, #11
 800ae82:	1d23      	adds	r3, r4, #4
 800ae84:	f020 0007 	bic.w	r0, r0, #7
 800ae88:	1ac2      	subs	r2, r0, r3
 800ae8a:	bf1c      	itt	ne
 800ae8c:	1a1b      	subne	r3, r3, r0
 800ae8e:	50a3      	strne	r3, [r4, r2]
 800ae90:	e7af      	b.n	800adf2 <_malloc_r+0x22>
 800ae92:	6862      	ldr	r2, [r4, #4]
 800ae94:	42a3      	cmp	r3, r4
 800ae96:	bf0c      	ite	eq
 800ae98:	f8c8 2000 	streq.w	r2, [r8]
 800ae9c:	605a      	strne	r2, [r3, #4]
 800ae9e:	e7eb      	b.n	800ae78 <_malloc_r+0xa8>
 800aea0:	4623      	mov	r3, r4
 800aea2:	6864      	ldr	r4, [r4, #4]
 800aea4:	e7ae      	b.n	800ae04 <_malloc_r+0x34>
 800aea6:	463c      	mov	r4, r7
 800aea8:	687f      	ldr	r7, [r7, #4]
 800aeaa:	e7b6      	b.n	800ae1a <_malloc_r+0x4a>
 800aeac:	461a      	mov	r2, r3
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	42a3      	cmp	r3, r4
 800aeb2:	d1fb      	bne.n	800aeac <_malloc_r+0xdc>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	6053      	str	r3, [r2, #4]
 800aeb8:	e7de      	b.n	800ae78 <_malloc_r+0xa8>
 800aeba:	230c      	movs	r3, #12
 800aebc:	6033      	str	r3, [r6, #0]
 800aebe:	4630      	mov	r0, r6
 800aec0:	f000 f80c 	bl	800aedc <__malloc_unlock>
 800aec4:	e794      	b.n	800adf0 <_malloc_r+0x20>
 800aec6:	6005      	str	r5, [r0, #0]
 800aec8:	e7d6      	b.n	800ae78 <_malloc_r+0xa8>
 800aeca:	bf00      	nop
 800aecc:	20004fa4 	.word	0x20004fa4

0800aed0 <__malloc_lock>:
 800aed0:	4801      	ldr	r0, [pc, #4]	@ (800aed8 <__malloc_lock+0x8>)
 800aed2:	f7ff b88e 	b.w	8009ff2 <__retarget_lock_acquire_recursive>
 800aed6:	bf00      	nop
 800aed8:	20004f9c 	.word	0x20004f9c

0800aedc <__malloc_unlock>:
 800aedc:	4801      	ldr	r0, [pc, #4]	@ (800aee4 <__malloc_unlock+0x8>)
 800aede:	f7ff b889 	b.w	8009ff4 <__retarget_lock_release_recursive>
 800aee2:	bf00      	nop
 800aee4:	20004f9c 	.word	0x20004f9c

0800aee8 <_Balloc>:
 800aee8:	b570      	push	{r4, r5, r6, lr}
 800aeea:	69c6      	ldr	r6, [r0, #28]
 800aeec:	4604      	mov	r4, r0
 800aeee:	460d      	mov	r5, r1
 800aef0:	b976      	cbnz	r6, 800af10 <_Balloc+0x28>
 800aef2:	2010      	movs	r0, #16
 800aef4:	f7ff ff42 	bl	800ad7c <malloc>
 800aef8:	4602      	mov	r2, r0
 800aefa:	61e0      	str	r0, [r4, #28]
 800aefc:	b920      	cbnz	r0, 800af08 <_Balloc+0x20>
 800aefe:	4b18      	ldr	r3, [pc, #96]	@ (800af60 <_Balloc+0x78>)
 800af00:	4818      	ldr	r0, [pc, #96]	@ (800af64 <_Balloc+0x7c>)
 800af02:	216b      	movs	r1, #107	@ 0x6b
 800af04:	f7ff f886 	bl	800a014 <__assert_func>
 800af08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af0c:	6006      	str	r6, [r0, #0]
 800af0e:	60c6      	str	r6, [r0, #12]
 800af10:	69e6      	ldr	r6, [r4, #28]
 800af12:	68f3      	ldr	r3, [r6, #12]
 800af14:	b183      	cbz	r3, 800af38 <_Balloc+0x50>
 800af16:	69e3      	ldr	r3, [r4, #28]
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af1e:	b9b8      	cbnz	r0, 800af50 <_Balloc+0x68>
 800af20:	2101      	movs	r1, #1
 800af22:	fa01 f605 	lsl.w	r6, r1, r5
 800af26:	1d72      	adds	r2, r6, #5
 800af28:	0092      	lsls	r2, r2, #2
 800af2a:	4620      	mov	r0, r4
 800af2c:	f000 fe29 	bl	800bb82 <_calloc_r>
 800af30:	b160      	cbz	r0, 800af4c <_Balloc+0x64>
 800af32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af36:	e00e      	b.n	800af56 <_Balloc+0x6e>
 800af38:	2221      	movs	r2, #33	@ 0x21
 800af3a:	2104      	movs	r1, #4
 800af3c:	4620      	mov	r0, r4
 800af3e:	f000 fe20 	bl	800bb82 <_calloc_r>
 800af42:	69e3      	ldr	r3, [r4, #28]
 800af44:	60f0      	str	r0, [r6, #12]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1e4      	bne.n	800af16 <_Balloc+0x2e>
 800af4c:	2000      	movs	r0, #0
 800af4e:	bd70      	pop	{r4, r5, r6, pc}
 800af50:	6802      	ldr	r2, [r0, #0]
 800af52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af56:	2300      	movs	r3, #0
 800af58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af5c:	e7f7      	b.n	800af4e <_Balloc+0x66>
 800af5e:	bf00      	nop
 800af60:	0800c7a1 	.word	0x0800c7a1
 800af64:	0800c821 	.word	0x0800c821

0800af68 <_Bfree>:
 800af68:	b570      	push	{r4, r5, r6, lr}
 800af6a:	69c6      	ldr	r6, [r0, #28]
 800af6c:	4605      	mov	r5, r0
 800af6e:	460c      	mov	r4, r1
 800af70:	b976      	cbnz	r6, 800af90 <_Bfree+0x28>
 800af72:	2010      	movs	r0, #16
 800af74:	f7ff ff02 	bl	800ad7c <malloc>
 800af78:	4602      	mov	r2, r0
 800af7a:	61e8      	str	r0, [r5, #28]
 800af7c:	b920      	cbnz	r0, 800af88 <_Bfree+0x20>
 800af7e:	4b09      	ldr	r3, [pc, #36]	@ (800afa4 <_Bfree+0x3c>)
 800af80:	4809      	ldr	r0, [pc, #36]	@ (800afa8 <_Bfree+0x40>)
 800af82:	218f      	movs	r1, #143	@ 0x8f
 800af84:	f7ff f846 	bl	800a014 <__assert_func>
 800af88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af8c:	6006      	str	r6, [r0, #0]
 800af8e:	60c6      	str	r6, [r0, #12]
 800af90:	b13c      	cbz	r4, 800afa2 <_Bfree+0x3a>
 800af92:	69eb      	ldr	r3, [r5, #28]
 800af94:	6862      	ldr	r2, [r4, #4]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af9c:	6021      	str	r1, [r4, #0]
 800af9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800afa2:	bd70      	pop	{r4, r5, r6, pc}
 800afa4:	0800c7a1 	.word	0x0800c7a1
 800afa8:	0800c821 	.word	0x0800c821

0800afac <__multadd>:
 800afac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afb0:	690d      	ldr	r5, [r1, #16]
 800afb2:	4607      	mov	r7, r0
 800afb4:	460c      	mov	r4, r1
 800afb6:	461e      	mov	r6, r3
 800afb8:	f101 0c14 	add.w	ip, r1, #20
 800afbc:	2000      	movs	r0, #0
 800afbe:	f8dc 3000 	ldr.w	r3, [ip]
 800afc2:	b299      	uxth	r1, r3
 800afc4:	fb02 6101 	mla	r1, r2, r1, r6
 800afc8:	0c1e      	lsrs	r6, r3, #16
 800afca:	0c0b      	lsrs	r3, r1, #16
 800afcc:	fb02 3306 	mla	r3, r2, r6, r3
 800afd0:	b289      	uxth	r1, r1
 800afd2:	3001      	adds	r0, #1
 800afd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800afd8:	4285      	cmp	r5, r0
 800afda:	f84c 1b04 	str.w	r1, [ip], #4
 800afde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800afe2:	dcec      	bgt.n	800afbe <__multadd+0x12>
 800afe4:	b30e      	cbz	r6, 800b02a <__multadd+0x7e>
 800afe6:	68a3      	ldr	r3, [r4, #8]
 800afe8:	42ab      	cmp	r3, r5
 800afea:	dc19      	bgt.n	800b020 <__multadd+0x74>
 800afec:	6861      	ldr	r1, [r4, #4]
 800afee:	4638      	mov	r0, r7
 800aff0:	3101      	adds	r1, #1
 800aff2:	f7ff ff79 	bl	800aee8 <_Balloc>
 800aff6:	4680      	mov	r8, r0
 800aff8:	b928      	cbnz	r0, 800b006 <__multadd+0x5a>
 800affa:	4602      	mov	r2, r0
 800affc:	4b0c      	ldr	r3, [pc, #48]	@ (800b030 <__multadd+0x84>)
 800affe:	480d      	ldr	r0, [pc, #52]	@ (800b034 <__multadd+0x88>)
 800b000:	21ba      	movs	r1, #186	@ 0xba
 800b002:	f7ff f807 	bl	800a014 <__assert_func>
 800b006:	6922      	ldr	r2, [r4, #16]
 800b008:	3202      	adds	r2, #2
 800b00a:	f104 010c 	add.w	r1, r4, #12
 800b00e:	0092      	lsls	r2, r2, #2
 800b010:	300c      	adds	r0, #12
 800b012:	f7fe fff0 	bl	8009ff6 <memcpy>
 800b016:	4621      	mov	r1, r4
 800b018:	4638      	mov	r0, r7
 800b01a:	f7ff ffa5 	bl	800af68 <_Bfree>
 800b01e:	4644      	mov	r4, r8
 800b020:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b024:	3501      	adds	r5, #1
 800b026:	615e      	str	r6, [r3, #20]
 800b028:	6125      	str	r5, [r4, #16]
 800b02a:	4620      	mov	r0, r4
 800b02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b030:	0800c810 	.word	0x0800c810
 800b034:	0800c821 	.word	0x0800c821

0800b038 <__hi0bits>:
 800b038:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b03c:	4603      	mov	r3, r0
 800b03e:	bf36      	itet	cc
 800b040:	0403      	lslcc	r3, r0, #16
 800b042:	2000      	movcs	r0, #0
 800b044:	2010      	movcc	r0, #16
 800b046:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b04a:	bf3c      	itt	cc
 800b04c:	021b      	lslcc	r3, r3, #8
 800b04e:	3008      	addcc	r0, #8
 800b050:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b054:	bf3c      	itt	cc
 800b056:	011b      	lslcc	r3, r3, #4
 800b058:	3004      	addcc	r0, #4
 800b05a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b05e:	bf3c      	itt	cc
 800b060:	009b      	lslcc	r3, r3, #2
 800b062:	3002      	addcc	r0, #2
 800b064:	2b00      	cmp	r3, #0
 800b066:	db05      	blt.n	800b074 <__hi0bits+0x3c>
 800b068:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b06c:	f100 0001 	add.w	r0, r0, #1
 800b070:	bf08      	it	eq
 800b072:	2020      	moveq	r0, #32
 800b074:	4770      	bx	lr

0800b076 <__lo0bits>:
 800b076:	6803      	ldr	r3, [r0, #0]
 800b078:	4602      	mov	r2, r0
 800b07a:	f013 0007 	ands.w	r0, r3, #7
 800b07e:	d00b      	beq.n	800b098 <__lo0bits+0x22>
 800b080:	07d9      	lsls	r1, r3, #31
 800b082:	d421      	bmi.n	800b0c8 <__lo0bits+0x52>
 800b084:	0798      	lsls	r0, r3, #30
 800b086:	bf49      	itett	mi
 800b088:	085b      	lsrmi	r3, r3, #1
 800b08a:	089b      	lsrpl	r3, r3, #2
 800b08c:	2001      	movmi	r0, #1
 800b08e:	6013      	strmi	r3, [r2, #0]
 800b090:	bf5c      	itt	pl
 800b092:	6013      	strpl	r3, [r2, #0]
 800b094:	2002      	movpl	r0, #2
 800b096:	4770      	bx	lr
 800b098:	b299      	uxth	r1, r3
 800b09a:	b909      	cbnz	r1, 800b0a0 <__lo0bits+0x2a>
 800b09c:	0c1b      	lsrs	r3, r3, #16
 800b09e:	2010      	movs	r0, #16
 800b0a0:	b2d9      	uxtb	r1, r3
 800b0a2:	b909      	cbnz	r1, 800b0a8 <__lo0bits+0x32>
 800b0a4:	3008      	adds	r0, #8
 800b0a6:	0a1b      	lsrs	r3, r3, #8
 800b0a8:	0719      	lsls	r1, r3, #28
 800b0aa:	bf04      	itt	eq
 800b0ac:	091b      	lsreq	r3, r3, #4
 800b0ae:	3004      	addeq	r0, #4
 800b0b0:	0799      	lsls	r1, r3, #30
 800b0b2:	bf04      	itt	eq
 800b0b4:	089b      	lsreq	r3, r3, #2
 800b0b6:	3002      	addeq	r0, #2
 800b0b8:	07d9      	lsls	r1, r3, #31
 800b0ba:	d403      	bmi.n	800b0c4 <__lo0bits+0x4e>
 800b0bc:	085b      	lsrs	r3, r3, #1
 800b0be:	f100 0001 	add.w	r0, r0, #1
 800b0c2:	d003      	beq.n	800b0cc <__lo0bits+0x56>
 800b0c4:	6013      	str	r3, [r2, #0]
 800b0c6:	4770      	bx	lr
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	4770      	bx	lr
 800b0cc:	2020      	movs	r0, #32
 800b0ce:	4770      	bx	lr

0800b0d0 <__i2b>:
 800b0d0:	b510      	push	{r4, lr}
 800b0d2:	460c      	mov	r4, r1
 800b0d4:	2101      	movs	r1, #1
 800b0d6:	f7ff ff07 	bl	800aee8 <_Balloc>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	b928      	cbnz	r0, 800b0ea <__i2b+0x1a>
 800b0de:	4b05      	ldr	r3, [pc, #20]	@ (800b0f4 <__i2b+0x24>)
 800b0e0:	4805      	ldr	r0, [pc, #20]	@ (800b0f8 <__i2b+0x28>)
 800b0e2:	f240 1145 	movw	r1, #325	@ 0x145
 800b0e6:	f7fe ff95 	bl	800a014 <__assert_func>
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	6144      	str	r4, [r0, #20]
 800b0ee:	6103      	str	r3, [r0, #16]
 800b0f0:	bd10      	pop	{r4, pc}
 800b0f2:	bf00      	nop
 800b0f4:	0800c810 	.word	0x0800c810
 800b0f8:	0800c821 	.word	0x0800c821

0800b0fc <__multiply>:
 800b0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b100:	4614      	mov	r4, r2
 800b102:	690a      	ldr	r2, [r1, #16]
 800b104:	6923      	ldr	r3, [r4, #16]
 800b106:	429a      	cmp	r2, r3
 800b108:	bfa8      	it	ge
 800b10a:	4623      	movge	r3, r4
 800b10c:	460f      	mov	r7, r1
 800b10e:	bfa4      	itt	ge
 800b110:	460c      	movge	r4, r1
 800b112:	461f      	movge	r7, r3
 800b114:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b118:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b11c:	68a3      	ldr	r3, [r4, #8]
 800b11e:	6861      	ldr	r1, [r4, #4]
 800b120:	eb0a 0609 	add.w	r6, sl, r9
 800b124:	42b3      	cmp	r3, r6
 800b126:	b085      	sub	sp, #20
 800b128:	bfb8      	it	lt
 800b12a:	3101      	addlt	r1, #1
 800b12c:	f7ff fedc 	bl	800aee8 <_Balloc>
 800b130:	b930      	cbnz	r0, 800b140 <__multiply+0x44>
 800b132:	4602      	mov	r2, r0
 800b134:	4b44      	ldr	r3, [pc, #272]	@ (800b248 <__multiply+0x14c>)
 800b136:	4845      	ldr	r0, [pc, #276]	@ (800b24c <__multiply+0x150>)
 800b138:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b13c:	f7fe ff6a 	bl	800a014 <__assert_func>
 800b140:	f100 0514 	add.w	r5, r0, #20
 800b144:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b148:	462b      	mov	r3, r5
 800b14a:	2200      	movs	r2, #0
 800b14c:	4543      	cmp	r3, r8
 800b14e:	d321      	bcc.n	800b194 <__multiply+0x98>
 800b150:	f107 0114 	add.w	r1, r7, #20
 800b154:	f104 0214 	add.w	r2, r4, #20
 800b158:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b15c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b160:	9302      	str	r3, [sp, #8]
 800b162:	1b13      	subs	r3, r2, r4
 800b164:	3b15      	subs	r3, #21
 800b166:	f023 0303 	bic.w	r3, r3, #3
 800b16a:	3304      	adds	r3, #4
 800b16c:	f104 0715 	add.w	r7, r4, #21
 800b170:	42ba      	cmp	r2, r7
 800b172:	bf38      	it	cc
 800b174:	2304      	movcc	r3, #4
 800b176:	9301      	str	r3, [sp, #4]
 800b178:	9b02      	ldr	r3, [sp, #8]
 800b17a:	9103      	str	r1, [sp, #12]
 800b17c:	428b      	cmp	r3, r1
 800b17e:	d80c      	bhi.n	800b19a <__multiply+0x9e>
 800b180:	2e00      	cmp	r6, #0
 800b182:	dd03      	ble.n	800b18c <__multiply+0x90>
 800b184:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d05b      	beq.n	800b244 <__multiply+0x148>
 800b18c:	6106      	str	r6, [r0, #16]
 800b18e:	b005      	add	sp, #20
 800b190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b194:	f843 2b04 	str.w	r2, [r3], #4
 800b198:	e7d8      	b.n	800b14c <__multiply+0x50>
 800b19a:	f8b1 a000 	ldrh.w	sl, [r1]
 800b19e:	f1ba 0f00 	cmp.w	sl, #0
 800b1a2:	d024      	beq.n	800b1ee <__multiply+0xf2>
 800b1a4:	f104 0e14 	add.w	lr, r4, #20
 800b1a8:	46a9      	mov	r9, r5
 800b1aa:	f04f 0c00 	mov.w	ip, #0
 800b1ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1b2:	f8d9 3000 	ldr.w	r3, [r9]
 800b1b6:	fa1f fb87 	uxth.w	fp, r7
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	fb0a 330b 	mla	r3, sl, fp, r3
 800b1c0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b1c4:	f8d9 7000 	ldr.w	r7, [r9]
 800b1c8:	4463      	add	r3, ip
 800b1ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b1ce:	fb0a c70b 	mla	r7, sl, fp, ip
 800b1d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b1dc:	4572      	cmp	r2, lr
 800b1de:	f849 3b04 	str.w	r3, [r9], #4
 800b1e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b1e6:	d8e2      	bhi.n	800b1ae <__multiply+0xb2>
 800b1e8:	9b01      	ldr	r3, [sp, #4]
 800b1ea:	f845 c003 	str.w	ip, [r5, r3]
 800b1ee:	9b03      	ldr	r3, [sp, #12]
 800b1f0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b1f4:	3104      	adds	r1, #4
 800b1f6:	f1b9 0f00 	cmp.w	r9, #0
 800b1fa:	d021      	beq.n	800b240 <__multiply+0x144>
 800b1fc:	682b      	ldr	r3, [r5, #0]
 800b1fe:	f104 0c14 	add.w	ip, r4, #20
 800b202:	46ae      	mov	lr, r5
 800b204:	f04f 0a00 	mov.w	sl, #0
 800b208:	f8bc b000 	ldrh.w	fp, [ip]
 800b20c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b210:	fb09 770b 	mla	r7, r9, fp, r7
 800b214:	4457      	add	r7, sl
 800b216:	b29b      	uxth	r3, r3
 800b218:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b21c:	f84e 3b04 	str.w	r3, [lr], #4
 800b220:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b224:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b228:	f8be 3000 	ldrh.w	r3, [lr]
 800b22c:	fb09 330a 	mla	r3, r9, sl, r3
 800b230:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b234:	4562      	cmp	r2, ip
 800b236:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b23a:	d8e5      	bhi.n	800b208 <__multiply+0x10c>
 800b23c:	9f01      	ldr	r7, [sp, #4]
 800b23e:	51eb      	str	r3, [r5, r7]
 800b240:	3504      	adds	r5, #4
 800b242:	e799      	b.n	800b178 <__multiply+0x7c>
 800b244:	3e01      	subs	r6, #1
 800b246:	e79b      	b.n	800b180 <__multiply+0x84>
 800b248:	0800c810 	.word	0x0800c810
 800b24c:	0800c821 	.word	0x0800c821

0800b250 <__pow5mult>:
 800b250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b254:	4615      	mov	r5, r2
 800b256:	f012 0203 	ands.w	r2, r2, #3
 800b25a:	4607      	mov	r7, r0
 800b25c:	460e      	mov	r6, r1
 800b25e:	d007      	beq.n	800b270 <__pow5mult+0x20>
 800b260:	4c25      	ldr	r4, [pc, #148]	@ (800b2f8 <__pow5mult+0xa8>)
 800b262:	3a01      	subs	r2, #1
 800b264:	2300      	movs	r3, #0
 800b266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b26a:	f7ff fe9f 	bl	800afac <__multadd>
 800b26e:	4606      	mov	r6, r0
 800b270:	10ad      	asrs	r5, r5, #2
 800b272:	d03d      	beq.n	800b2f0 <__pow5mult+0xa0>
 800b274:	69fc      	ldr	r4, [r7, #28]
 800b276:	b97c      	cbnz	r4, 800b298 <__pow5mult+0x48>
 800b278:	2010      	movs	r0, #16
 800b27a:	f7ff fd7f 	bl	800ad7c <malloc>
 800b27e:	4602      	mov	r2, r0
 800b280:	61f8      	str	r0, [r7, #28]
 800b282:	b928      	cbnz	r0, 800b290 <__pow5mult+0x40>
 800b284:	4b1d      	ldr	r3, [pc, #116]	@ (800b2fc <__pow5mult+0xac>)
 800b286:	481e      	ldr	r0, [pc, #120]	@ (800b300 <__pow5mult+0xb0>)
 800b288:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b28c:	f7fe fec2 	bl	800a014 <__assert_func>
 800b290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b294:	6004      	str	r4, [r0, #0]
 800b296:	60c4      	str	r4, [r0, #12]
 800b298:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b29c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2a0:	b94c      	cbnz	r4, 800b2b6 <__pow5mult+0x66>
 800b2a2:	f240 2171 	movw	r1, #625	@ 0x271
 800b2a6:	4638      	mov	r0, r7
 800b2a8:	f7ff ff12 	bl	800b0d0 <__i2b>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	6003      	str	r3, [r0, #0]
 800b2b6:	f04f 0900 	mov.w	r9, #0
 800b2ba:	07eb      	lsls	r3, r5, #31
 800b2bc:	d50a      	bpl.n	800b2d4 <__pow5mult+0x84>
 800b2be:	4631      	mov	r1, r6
 800b2c0:	4622      	mov	r2, r4
 800b2c2:	4638      	mov	r0, r7
 800b2c4:	f7ff ff1a 	bl	800b0fc <__multiply>
 800b2c8:	4631      	mov	r1, r6
 800b2ca:	4680      	mov	r8, r0
 800b2cc:	4638      	mov	r0, r7
 800b2ce:	f7ff fe4b 	bl	800af68 <_Bfree>
 800b2d2:	4646      	mov	r6, r8
 800b2d4:	106d      	asrs	r5, r5, #1
 800b2d6:	d00b      	beq.n	800b2f0 <__pow5mult+0xa0>
 800b2d8:	6820      	ldr	r0, [r4, #0]
 800b2da:	b938      	cbnz	r0, 800b2ec <__pow5mult+0x9c>
 800b2dc:	4622      	mov	r2, r4
 800b2de:	4621      	mov	r1, r4
 800b2e0:	4638      	mov	r0, r7
 800b2e2:	f7ff ff0b 	bl	800b0fc <__multiply>
 800b2e6:	6020      	str	r0, [r4, #0]
 800b2e8:	f8c0 9000 	str.w	r9, [r0]
 800b2ec:	4604      	mov	r4, r0
 800b2ee:	e7e4      	b.n	800b2ba <__pow5mult+0x6a>
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2f6:	bf00      	nop
 800b2f8:	0800c87c 	.word	0x0800c87c
 800b2fc:	0800c7a1 	.word	0x0800c7a1
 800b300:	0800c821 	.word	0x0800c821

0800b304 <__lshift>:
 800b304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b308:	460c      	mov	r4, r1
 800b30a:	6849      	ldr	r1, [r1, #4]
 800b30c:	6923      	ldr	r3, [r4, #16]
 800b30e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b312:	68a3      	ldr	r3, [r4, #8]
 800b314:	4607      	mov	r7, r0
 800b316:	4691      	mov	r9, r2
 800b318:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b31c:	f108 0601 	add.w	r6, r8, #1
 800b320:	42b3      	cmp	r3, r6
 800b322:	db0b      	blt.n	800b33c <__lshift+0x38>
 800b324:	4638      	mov	r0, r7
 800b326:	f7ff fddf 	bl	800aee8 <_Balloc>
 800b32a:	4605      	mov	r5, r0
 800b32c:	b948      	cbnz	r0, 800b342 <__lshift+0x3e>
 800b32e:	4602      	mov	r2, r0
 800b330:	4b28      	ldr	r3, [pc, #160]	@ (800b3d4 <__lshift+0xd0>)
 800b332:	4829      	ldr	r0, [pc, #164]	@ (800b3d8 <__lshift+0xd4>)
 800b334:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b338:	f7fe fe6c 	bl	800a014 <__assert_func>
 800b33c:	3101      	adds	r1, #1
 800b33e:	005b      	lsls	r3, r3, #1
 800b340:	e7ee      	b.n	800b320 <__lshift+0x1c>
 800b342:	2300      	movs	r3, #0
 800b344:	f100 0114 	add.w	r1, r0, #20
 800b348:	f100 0210 	add.w	r2, r0, #16
 800b34c:	4618      	mov	r0, r3
 800b34e:	4553      	cmp	r3, sl
 800b350:	db33      	blt.n	800b3ba <__lshift+0xb6>
 800b352:	6920      	ldr	r0, [r4, #16]
 800b354:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b358:	f104 0314 	add.w	r3, r4, #20
 800b35c:	f019 091f 	ands.w	r9, r9, #31
 800b360:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b364:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b368:	d02b      	beq.n	800b3c2 <__lshift+0xbe>
 800b36a:	f1c9 0e20 	rsb	lr, r9, #32
 800b36e:	468a      	mov	sl, r1
 800b370:	2200      	movs	r2, #0
 800b372:	6818      	ldr	r0, [r3, #0]
 800b374:	fa00 f009 	lsl.w	r0, r0, r9
 800b378:	4310      	orrs	r0, r2
 800b37a:	f84a 0b04 	str.w	r0, [sl], #4
 800b37e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b382:	459c      	cmp	ip, r3
 800b384:	fa22 f20e 	lsr.w	r2, r2, lr
 800b388:	d8f3      	bhi.n	800b372 <__lshift+0x6e>
 800b38a:	ebac 0304 	sub.w	r3, ip, r4
 800b38e:	3b15      	subs	r3, #21
 800b390:	f023 0303 	bic.w	r3, r3, #3
 800b394:	3304      	adds	r3, #4
 800b396:	f104 0015 	add.w	r0, r4, #21
 800b39a:	4584      	cmp	ip, r0
 800b39c:	bf38      	it	cc
 800b39e:	2304      	movcc	r3, #4
 800b3a0:	50ca      	str	r2, [r1, r3]
 800b3a2:	b10a      	cbz	r2, 800b3a8 <__lshift+0xa4>
 800b3a4:	f108 0602 	add.w	r6, r8, #2
 800b3a8:	3e01      	subs	r6, #1
 800b3aa:	4638      	mov	r0, r7
 800b3ac:	612e      	str	r6, [r5, #16]
 800b3ae:	4621      	mov	r1, r4
 800b3b0:	f7ff fdda 	bl	800af68 <_Bfree>
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3be:	3301      	adds	r3, #1
 800b3c0:	e7c5      	b.n	800b34e <__lshift+0x4a>
 800b3c2:	3904      	subs	r1, #4
 800b3c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3cc:	459c      	cmp	ip, r3
 800b3ce:	d8f9      	bhi.n	800b3c4 <__lshift+0xc0>
 800b3d0:	e7ea      	b.n	800b3a8 <__lshift+0xa4>
 800b3d2:	bf00      	nop
 800b3d4:	0800c810 	.word	0x0800c810
 800b3d8:	0800c821 	.word	0x0800c821

0800b3dc <__mcmp>:
 800b3dc:	690a      	ldr	r2, [r1, #16]
 800b3de:	4603      	mov	r3, r0
 800b3e0:	6900      	ldr	r0, [r0, #16]
 800b3e2:	1a80      	subs	r0, r0, r2
 800b3e4:	b530      	push	{r4, r5, lr}
 800b3e6:	d10e      	bne.n	800b406 <__mcmp+0x2a>
 800b3e8:	3314      	adds	r3, #20
 800b3ea:	3114      	adds	r1, #20
 800b3ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b3f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b3f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b3f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b3fc:	4295      	cmp	r5, r2
 800b3fe:	d003      	beq.n	800b408 <__mcmp+0x2c>
 800b400:	d205      	bcs.n	800b40e <__mcmp+0x32>
 800b402:	f04f 30ff 	mov.w	r0, #4294967295
 800b406:	bd30      	pop	{r4, r5, pc}
 800b408:	42a3      	cmp	r3, r4
 800b40a:	d3f3      	bcc.n	800b3f4 <__mcmp+0x18>
 800b40c:	e7fb      	b.n	800b406 <__mcmp+0x2a>
 800b40e:	2001      	movs	r0, #1
 800b410:	e7f9      	b.n	800b406 <__mcmp+0x2a>
	...

0800b414 <__mdiff>:
 800b414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b418:	4689      	mov	r9, r1
 800b41a:	4606      	mov	r6, r0
 800b41c:	4611      	mov	r1, r2
 800b41e:	4648      	mov	r0, r9
 800b420:	4614      	mov	r4, r2
 800b422:	f7ff ffdb 	bl	800b3dc <__mcmp>
 800b426:	1e05      	subs	r5, r0, #0
 800b428:	d112      	bne.n	800b450 <__mdiff+0x3c>
 800b42a:	4629      	mov	r1, r5
 800b42c:	4630      	mov	r0, r6
 800b42e:	f7ff fd5b 	bl	800aee8 <_Balloc>
 800b432:	4602      	mov	r2, r0
 800b434:	b928      	cbnz	r0, 800b442 <__mdiff+0x2e>
 800b436:	4b3f      	ldr	r3, [pc, #252]	@ (800b534 <__mdiff+0x120>)
 800b438:	f240 2137 	movw	r1, #567	@ 0x237
 800b43c:	483e      	ldr	r0, [pc, #248]	@ (800b538 <__mdiff+0x124>)
 800b43e:	f7fe fde9 	bl	800a014 <__assert_func>
 800b442:	2301      	movs	r3, #1
 800b444:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b448:	4610      	mov	r0, r2
 800b44a:	b003      	add	sp, #12
 800b44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b450:	bfbc      	itt	lt
 800b452:	464b      	movlt	r3, r9
 800b454:	46a1      	movlt	r9, r4
 800b456:	4630      	mov	r0, r6
 800b458:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b45c:	bfba      	itte	lt
 800b45e:	461c      	movlt	r4, r3
 800b460:	2501      	movlt	r5, #1
 800b462:	2500      	movge	r5, #0
 800b464:	f7ff fd40 	bl	800aee8 <_Balloc>
 800b468:	4602      	mov	r2, r0
 800b46a:	b918      	cbnz	r0, 800b474 <__mdiff+0x60>
 800b46c:	4b31      	ldr	r3, [pc, #196]	@ (800b534 <__mdiff+0x120>)
 800b46e:	f240 2145 	movw	r1, #581	@ 0x245
 800b472:	e7e3      	b.n	800b43c <__mdiff+0x28>
 800b474:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b478:	6926      	ldr	r6, [r4, #16]
 800b47a:	60c5      	str	r5, [r0, #12]
 800b47c:	f109 0310 	add.w	r3, r9, #16
 800b480:	f109 0514 	add.w	r5, r9, #20
 800b484:	f104 0e14 	add.w	lr, r4, #20
 800b488:	f100 0b14 	add.w	fp, r0, #20
 800b48c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b490:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b494:	9301      	str	r3, [sp, #4]
 800b496:	46d9      	mov	r9, fp
 800b498:	f04f 0c00 	mov.w	ip, #0
 800b49c:	9b01      	ldr	r3, [sp, #4]
 800b49e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b4a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b4a6:	9301      	str	r3, [sp, #4]
 800b4a8:	fa1f f38a 	uxth.w	r3, sl
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	b283      	uxth	r3, r0
 800b4b0:	1acb      	subs	r3, r1, r3
 800b4b2:	0c00      	lsrs	r0, r0, #16
 800b4b4:	4463      	add	r3, ip
 800b4b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b4ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b4c4:	4576      	cmp	r6, lr
 800b4c6:	f849 3b04 	str.w	r3, [r9], #4
 800b4ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b4ce:	d8e5      	bhi.n	800b49c <__mdiff+0x88>
 800b4d0:	1b33      	subs	r3, r6, r4
 800b4d2:	3b15      	subs	r3, #21
 800b4d4:	f023 0303 	bic.w	r3, r3, #3
 800b4d8:	3415      	adds	r4, #21
 800b4da:	3304      	adds	r3, #4
 800b4dc:	42a6      	cmp	r6, r4
 800b4de:	bf38      	it	cc
 800b4e0:	2304      	movcc	r3, #4
 800b4e2:	441d      	add	r5, r3
 800b4e4:	445b      	add	r3, fp
 800b4e6:	461e      	mov	r6, r3
 800b4e8:	462c      	mov	r4, r5
 800b4ea:	4544      	cmp	r4, r8
 800b4ec:	d30e      	bcc.n	800b50c <__mdiff+0xf8>
 800b4ee:	f108 0103 	add.w	r1, r8, #3
 800b4f2:	1b49      	subs	r1, r1, r5
 800b4f4:	f021 0103 	bic.w	r1, r1, #3
 800b4f8:	3d03      	subs	r5, #3
 800b4fa:	45a8      	cmp	r8, r5
 800b4fc:	bf38      	it	cc
 800b4fe:	2100      	movcc	r1, #0
 800b500:	440b      	add	r3, r1
 800b502:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b506:	b191      	cbz	r1, 800b52e <__mdiff+0x11a>
 800b508:	6117      	str	r7, [r2, #16]
 800b50a:	e79d      	b.n	800b448 <__mdiff+0x34>
 800b50c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b510:	46e6      	mov	lr, ip
 800b512:	0c08      	lsrs	r0, r1, #16
 800b514:	fa1c fc81 	uxtah	ip, ip, r1
 800b518:	4471      	add	r1, lr
 800b51a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b51e:	b289      	uxth	r1, r1
 800b520:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b524:	f846 1b04 	str.w	r1, [r6], #4
 800b528:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b52c:	e7dd      	b.n	800b4ea <__mdiff+0xd6>
 800b52e:	3f01      	subs	r7, #1
 800b530:	e7e7      	b.n	800b502 <__mdiff+0xee>
 800b532:	bf00      	nop
 800b534:	0800c810 	.word	0x0800c810
 800b538:	0800c821 	.word	0x0800c821

0800b53c <__d2b>:
 800b53c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b540:	460f      	mov	r7, r1
 800b542:	2101      	movs	r1, #1
 800b544:	ec59 8b10 	vmov	r8, r9, d0
 800b548:	4616      	mov	r6, r2
 800b54a:	f7ff fccd 	bl	800aee8 <_Balloc>
 800b54e:	4604      	mov	r4, r0
 800b550:	b930      	cbnz	r0, 800b560 <__d2b+0x24>
 800b552:	4602      	mov	r2, r0
 800b554:	4b23      	ldr	r3, [pc, #140]	@ (800b5e4 <__d2b+0xa8>)
 800b556:	4824      	ldr	r0, [pc, #144]	@ (800b5e8 <__d2b+0xac>)
 800b558:	f240 310f 	movw	r1, #783	@ 0x30f
 800b55c:	f7fe fd5a 	bl	800a014 <__assert_func>
 800b560:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b564:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b568:	b10d      	cbz	r5, 800b56e <__d2b+0x32>
 800b56a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b56e:	9301      	str	r3, [sp, #4]
 800b570:	f1b8 0300 	subs.w	r3, r8, #0
 800b574:	d023      	beq.n	800b5be <__d2b+0x82>
 800b576:	4668      	mov	r0, sp
 800b578:	9300      	str	r3, [sp, #0]
 800b57a:	f7ff fd7c 	bl	800b076 <__lo0bits>
 800b57e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b582:	b1d0      	cbz	r0, 800b5ba <__d2b+0x7e>
 800b584:	f1c0 0320 	rsb	r3, r0, #32
 800b588:	fa02 f303 	lsl.w	r3, r2, r3
 800b58c:	430b      	orrs	r3, r1
 800b58e:	40c2      	lsrs	r2, r0
 800b590:	6163      	str	r3, [r4, #20]
 800b592:	9201      	str	r2, [sp, #4]
 800b594:	9b01      	ldr	r3, [sp, #4]
 800b596:	61a3      	str	r3, [r4, #24]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	bf0c      	ite	eq
 800b59c:	2201      	moveq	r2, #1
 800b59e:	2202      	movne	r2, #2
 800b5a0:	6122      	str	r2, [r4, #16]
 800b5a2:	b1a5      	cbz	r5, 800b5ce <__d2b+0x92>
 800b5a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b5a8:	4405      	add	r5, r0
 800b5aa:	603d      	str	r5, [r7, #0]
 800b5ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b5b0:	6030      	str	r0, [r6, #0]
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	b003      	add	sp, #12
 800b5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5ba:	6161      	str	r1, [r4, #20]
 800b5bc:	e7ea      	b.n	800b594 <__d2b+0x58>
 800b5be:	a801      	add	r0, sp, #4
 800b5c0:	f7ff fd59 	bl	800b076 <__lo0bits>
 800b5c4:	9b01      	ldr	r3, [sp, #4]
 800b5c6:	6163      	str	r3, [r4, #20]
 800b5c8:	3020      	adds	r0, #32
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	e7e8      	b.n	800b5a0 <__d2b+0x64>
 800b5ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b5d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b5d6:	6038      	str	r0, [r7, #0]
 800b5d8:	6918      	ldr	r0, [r3, #16]
 800b5da:	f7ff fd2d 	bl	800b038 <__hi0bits>
 800b5de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5e2:	e7e5      	b.n	800b5b0 <__d2b+0x74>
 800b5e4:	0800c810 	.word	0x0800c810
 800b5e8:	0800c821 	.word	0x0800c821

0800b5ec <__ssputs_r>:
 800b5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f0:	688e      	ldr	r6, [r1, #8]
 800b5f2:	461f      	mov	r7, r3
 800b5f4:	42be      	cmp	r6, r7
 800b5f6:	680b      	ldr	r3, [r1, #0]
 800b5f8:	4682      	mov	sl, r0
 800b5fa:	460c      	mov	r4, r1
 800b5fc:	4690      	mov	r8, r2
 800b5fe:	d82d      	bhi.n	800b65c <__ssputs_r+0x70>
 800b600:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b604:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b608:	d026      	beq.n	800b658 <__ssputs_r+0x6c>
 800b60a:	6965      	ldr	r5, [r4, #20]
 800b60c:	6909      	ldr	r1, [r1, #16]
 800b60e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b612:	eba3 0901 	sub.w	r9, r3, r1
 800b616:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b61a:	1c7b      	adds	r3, r7, #1
 800b61c:	444b      	add	r3, r9
 800b61e:	106d      	asrs	r5, r5, #1
 800b620:	429d      	cmp	r5, r3
 800b622:	bf38      	it	cc
 800b624:	461d      	movcc	r5, r3
 800b626:	0553      	lsls	r3, r2, #21
 800b628:	d527      	bpl.n	800b67a <__ssputs_r+0x8e>
 800b62a:	4629      	mov	r1, r5
 800b62c:	f7ff fbd0 	bl	800add0 <_malloc_r>
 800b630:	4606      	mov	r6, r0
 800b632:	b360      	cbz	r0, 800b68e <__ssputs_r+0xa2>
 800b634:	6921      	ldr	r1, [r4, #16]
 800b636:	464a      	mov	r2, r9
 800b638:	f7fe fcdd 	bl	8009ff6 <memcpy>
 800b63c:	89a3      	ldrh	r3, [r4, #12]
 800b63e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b646:	81a3      	strh	r3, [r4, #12]
 800b648:	6126      	str	r6, [r4, #16]
 800b64a:	6165      	str	r5, [r4, #20]
 800b64c:	444e      	add	r6, r9
 800b64e:	eba5 0509 	sub.w	r5, r5, r9
 800b652:	6026      	str	r6, [r4, #0]
 800b654:	60a5      	str	r5, [r4, #8]
 800b656:	463e      	mov	r6, r7
 800b658:	42be      	cmp	r6, r7
 800b65a:	d900      	bls.n	800b65e <__ssputs_r+0x72>
 800b65c:	463e      	mov	r6, r7
 800b65e:	6820      	ldr	r0, [r4, #0]
 800b660:	4632      	mov	r2, r6
 800b662:	4641      	mov	r1, r8
 800b664:	f000 fa3a 	bl	800badc <memmove>
 800b668:	68a3      	ldr	r3, [r4, #8]
 800b66a:	1b9b      	subs	r3, r3, r6
 800b66c:	60a3      	str	r3, [r4, #8]
 800b66e:	6823      	ldr	r3, [r4, #0]
 800b670:	4433      	add	r3, r6
 800b672:	6023      	str	r3, [r4, #0]
 800b674:	2000      	movs	r0, #0
 800b676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b67a:	462a      	mov	r2, r5
 800b67c:	f000 faa7 	bl	800bbce <_realloc_r>
 800b680:	4606      	mov	r6, r0
 800b682:	2800      	cmp	r0, #0
 800b684:	d1e0      	bne.n	800b648 <__ssputs_r+0x5c>
 800b686:	6921      	ldr	r1, [r4, #16]
 800b688:	4650      	mov	r0, sl
 800b68a:	f7ff fb2d 	bl	800ace8 <_free_r>
 800b68e:	230c      	movs	r3, #12
 800b690:	f8ca 3000 	str.w	r3, [sl]
 800b694:	89a3      	ldrh	r3, [r4, #12]
 800b696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b69a:	81a3      	strh	r3, [r4, #12]
 800b69c:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a0:	e7e9      	b.n	800b676 <__ssputs_r+0x8a>
	...

0800b6a4 <_svfiprintf_r>:
 800b6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a8:	4698      	mov	r8, r3
 800b6aa:	898b      	ldrh	r3, [r1, #12]
 800b6ac:	061b      	lsls	r3, r3, #24
 800b6ae:	b09d      	sub	sp, #116	@ 0x74
 800b6b0:	4607      	mov	r7, r0
 800b6b2:	460d      	mov	r5, r1
 800b6b4:	4614      	mov	r4, r2
 800b6b6:	d510      	bpl.n	800b6da <_svfiprintf_r+0x36>
 800b6b8:	690b      	ldr	r3, [r1, #16]
 800b6ba:	b973      	cbnz	r3, 800b6da <_svfiprintf_r+0x36>
 800b6bc:	2140      	movs	r1, #64	@ 0x40
 800b6be:	f7ff fb87 	bl	800add0 <_malloc_r>
 800b6c2:	6028      	str	r0, [r5, #0]
 800b6c4:	6128      	str	r0, [r5, #16]
 800b6c6:	b930      	cbnz	r0, 800b6d6 <_svfiprintf_r+0x32>
 800b6c8:	230c      	movs	r3, #12
 800b6ca:	603b      	str	r3, [r7, #0]
 800b6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d0:	b01d      	add	sp, #116	@ 0x74
 800b6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d6:	2340      	movs	r3, #64	@ 0x40
 800b6d8:	616b      	str	r3, [r5, #20]
 800b6da:	2300      	movs	r3, #0
 800b6dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6de:	2320      	movs	r3, #32
 800b6e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b6e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6e8:	2330      	movs	r3, #48	@ 0x30
 800b6ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b888 <_svfiprintf_r+0x1e4>
 800b6ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6f2:	f04f 0901 	mov.w	r9, #1
 800b6f6:	4623      	mov	r3, r4
 800b6f8:	469a      	mov	sl, r3
 800b6fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6fe:	b10a      	cbz	r2, 800b704 <_svfiprintf_r+0x60>
 800b700:	2a25      	cmp	r2, #37	@ 0x25
 800b702:	d1f9      	bne.n	800b6f8 <_svfiprintf_r+0x54>
 800b704:	ebba 0b04 	subs.w	fp, sl, r4
 800b708:	d00b      	beq.n	800b722 <_svfiprintf_r+0x7e>
 800b70a:	465b      	mov	r3, fp
 800b70c:	4622      	mov	r2, r4
 800b70e:	4629      	mov	r1, r5
 800b710:	4638      	mov	r0, r7
 800b712:	f7ff ff6b 	bl	800b5ec <__ssputs_r>
 800b716:	3001      	adds	r0, #1
 800b718:	f000 80a7 	beq.w	800b86a <_svfiprintf_r+0x1c6>
 800b71c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b71e:	445a      	add	r2, fp
 800b720:	9209      	str	r2, [sp, #36]	@ 0x24
 800b722:	f89a 3000 	ldrb.w	r3, [sl]
 800b726:	2b00      	cmp	r3, #0
 800b728:	f000 809f 	beq.w	800b86a <_svfiprintf_r+0x1c6>
 800b72c:	2300      	movs	r3, #0
 800b72e:	f04f 32ff 	mov.w	r2, #4294967295
 800b732:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b736:	f10a 0a01 	add.w	sl, sl, #1
 800b73a:	9304      	str	r3, [sp, #16]
 800b73c:	9307      	str	r3, [sp, #28]
 800b73e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b742:	931a      	str	r3, [sp, #104]	@ 0x68
 800b744:	4654      	mov	r4, sl
 800b746:	2205      	movs	r2, #5
 800b748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b74c:	484e      	ldr	r0, [pc, #312]	@ (800b888 <_svfiprintf_r+0x1e4>)
 800b74e:	f7f4 fd47 	bl	80001e0 <memchr>
 800b752:	9a04      	ldr	r2, [sp, #16]
 800b754:	b9d8      	cbnz	r0, 800b78e <_svfiprintf_r+0xea>
 800b756:	06d0      	lsls	r0, r2, #27
 800b758:	bf44      	itt	mi
 800b75a:	2320      	movmi	r3, #32
 800b75c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b760:	0711      	lsls	r1, r2, #28
 800b762:	bf44      	itt	mi
 800b764:	232b      	movmi	r3, #43	@ 0x2b
 800b766:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b76a:	f89a 3000 	ldrb.w	r3, [sl]
 800b76e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b770:	d015      	beq.n	800b79e <_svfiprintf_r+0xfa>
 800b772:	9a07      	ldr	r2, [sp, #28]
 800b774:	4654      	mov	r4, sl
 800b776:	2000      	movs	r0, #0
 800b778:	f04f 0c0a 	mov.w	ip, #10
 800b77c:	4621      	mov	r1, r4
 800b77e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b782:	3b30      	subs	r3, #48	@ 0x30
 800b784:	2b09      	cmp	r3, #9
 800b786:	d94b      	bls.n	800b820 <_svfiprintf_r+0x17c>
 800b788:	b1b0      	cbz	r0, 800b7b8 <_svfiprintf_r+0x114>
 800b78a:	9207      	str	r2, [sp, #28]
 800b78c:	e014      	b.n	800b7b8 <_svfiprintf_r+0x114>
 800b78e:	eba0 0308 	sub.w	r3, r0, r8
 800b792:	fa09 f303 	lsl.w	r3, r9, r3
 800b796:	4313      	orrs	r3, r2
 800b798:	9304      	str	r3, [sp, #16]
 800b79a:	46a2      	mov	sl, r4
 800b79c:	e7d2      	b.n	800b744 <_svfiprintf_r+0xa0>
 800b79e:	9b03      	ldr	r3, [sp, #12]
 800b7a0:	1d19      	adds	r1, r3, #4
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	9103      	str	r1, [sp, #12]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	bfbb      	ittet	lt
 800b7aa:	425b      	neglt	r3, r3
 800b7ac:	f042 0202 	orrlt.w	r2, r2, #2
 800b7b0:	9307      	strge	r3, [sp, #28]
 800b7b2:	9307      	strlt	r3, [sp, #28]
 800b7b4:	bfb8      	it	lt
 800b7b6:	9204      	strlt	r2, [sp, #16]
 800b7b8:	7823      	ldrb	r3, [r4, #0]
 800b7ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7bc:	d10a      	bne.n	800b7d4 <_svfiprintf_r+0x130>
 800b7be:	7863      	ldrb	r3, [r4, #1]
 800b7c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7c2:	d132      	bne.n	800b82a <_svfiprintf_r+0x186>
 800b7c4:	9b03      	ldr	r3, [sp, #12]
 800b7c6:	1d1a      	adds	r2, r3, #4
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	9203      	str	r2, [sp, #12]
 800b7cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b7d0:	3402      	adds	r4, #2
 800b7d2:	9305      	str	r3, [sp, #20]
 800b7d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b898 <_svfiprintf_r+0x1f4>
 800b7d8:	7821      	ldrb	r1, [r4, #0]
 800b7da:	2203      	movs	r2, #3
 800b7dc:	4650      	mov	r0, sl
 800b7de:	f7f4 fcff 	bl	80001e0 <memchr>
 800b7e2:	b138      	cbz	r0, 800b7f4 <_svfiprintf_r+0x150>
 800b7e4:	9b04      	ldr	r3, [sp, #16]
 800b7e6:	eba0 000a 	sub.w	r0, r0, sl
 800b7ea:	2240      	movs	r2, #64	@ 0x40
 800b7ec:	4082      	lsls	r2, r0
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	3401      	adds	r4, #1
 800b7f2:	9304      	str	r3, [sp, #16]
 800b7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7f8:	4824      	ldr	r0, [pc, #144]	@ (800b88c <_svfiprintf_r+0x1e8>)
 800b7fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b7fe:	2206      	movs	r2, #6
 800b800:	f7f4 fcee 	bl	80001e0 <memchr>
 800b804:	2800      	cmp	r0, #0
 800b806:	d036      	beq.n	800b876 <_svfiprintf_r+0x1d2>
 800b808:	4b21      	ldr	r3, [pc, #132]	@ (800b890 <_svfiprintf_r+0x1ec>)
 800b80a:	bb1b      	cbnz	r3, 800b854 <_svfiprintf_r+0x1b0>
 800b80c:	9b03      	ldr	r3, [sp, #12]
 800b80e:	3307      	adds	r3, #7
 800b810:	f023 0307 	bic.w	r3, r3, #7
 800b814:	3308      	adds	r3, #8
 800b816:	9303      	str	r3, [sp, #12]
 800b818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b81a:	4433      	add	r3, r6
 800b81c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b81e:	e76a      	b.n	800b6f6 <_svfiprintf_r+0x52>
 800b820:	fb0c 3202 	mla	r2, ip, r2, r3
 800b824:	460c      	mov	r4, r1
 800b826:	2001      	movs	r0, #1
 800b828:	e7a8      	b.n	800b77c <_svfiprintf_r+0xd8>
 800b82a:	2300      	movs	r3, #0
 800b82c:	3401      	adds	r4, #1
 800b82e:	9305      	str	r3, [sp, #20]
 800b830:	4619      	mov	r1, r3
 800b832:	f04f 0c0a 	mov.w	ip, #10
 800b836:	4620      	mov	r0, r4
 800b838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b83c:	3a30      	subs	r2, #48	@ 0x30
 800b83e:	2a09      	cmp	r2, #9
 800b840:	d903      	bls.n	800b84a <_svfiprintf_r+0x1a6>
 800b842:	2b00      	cmp	r3, #0
 800b844:	d0c6      	beq.n	800b7d4 <_svfiprintf_r+0x130>
 800b846:	9105      	str	r1, [sp, #20]
 800b848:	e7c4      	b.n	800b7d4 <_svfiprintf_r+0x130>
 800b84a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b84e:	4604      	mov	r4, r0
 800b850:	2301      	movs	r3, #1
 800b852:	e7f0      	b.n	800b836 <_svfiprintf_r+0x192>
 800b854:	ab03      	add	r3, sp, #12
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	462a      	mov	r2, r5
 800b85a:	4b0e      	ldr	r3, [pc, #56]	@ (800b894 <_svfiprintf_r+0x1f0>)
 800b85c:	a904      	add	r1, sp, #16
 800b85e:	4638      	mov	r0, r7
 800b860:	f7fd fd42 	bl	80092e8 <_printf_float>
 800b864:	1c42      	adds	r2, r0, #1
 800b866:	4606      	mov	r6, r0
 800b868:	d1d6      	bne.n	800b818 <_svfiprintf_r+0x174>
 800b86a:	89ab      	ldrh	r3, [r5, #12]
 800b86c:	065b      	lsls	r3, r3, #25
 800b86e:	f53f af2d 	bmi.w	800b6cc <_svfiprintf_r+0x28>
 800b872:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b874:	e72c      	b.n	800b6d0 <_svfiprintf_r+0x2c>
 800b876:	ab03      	add	r3, sp, #12
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	462a      	mov	r2, r5
 800b87c:	4b05      	ldr	r3, [pc, #20]	@ (800b894 <_svfiprintf_r+0x1f0>)
 800b87e:	a904      	add	r1, sp, #16
 800b880:	4638      	mov	r0, r7
 800b882:	f7fd ffc9 	bl	8009818 <_printf_i>
 800b886:	e7ed      	b.n	800b864 <_svfiprintf_r+0x1c0>
 800b888:	0800c978 	.word	0x0800c978
 800b88c:	0800c982 	.word	0x0800c982
 800b890:	080092e9 	.word	0x080092e9
 800b894:	0800b5ed 	.word	0x0800b5ed
 800b898:	0800c97e 	.word	0x0800c97e

0800b89c <__sflush_r>:
 800b89c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a4:	0716      	lsls	r6, r2, #28
 800b8a6:	4605      	mov	r5, r0
 800b8a8:	460c      	mov	r4, r1
 800b8aa:	d454      	bmi.n	800b956 <__sflush_r+0xba>
 800b8ac:	684b      	ldr	r3, [r1, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	dc02      	bgt.n	800b8b8 <__sflush_r+0x1c>
 800b8b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	dd48      	ble.n	800b94a <__sflush_r+0xae>
 800b8b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8ba:	2e00      	cmp	r6, #0
 800b8bc:	d045      	beq.n	800b94a <__sflush_r+0xae>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b8c4:	682f      	ldr	r7, [r5, #0]
 800b8c6:	6a21      	ldr	r1, [r4, #32]
 800b8c8:	602b      	str	r3, [r5, #0]
 800b8ca:	d030      	beq.n	800b92e <__sflush_r+0x92>
 800b8cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b8ce:	89a3      	ldrh	r3, [r4, #12]
 800b8d0:	0759      	lsls	r1, r3, #29
 800b8d2:	d505      	bpl.n	800b8e0 <__sflush_r+0x44>
 800b8d4:	6863      	ldr	r3, [r4, #4]
 800b8d6:	1ad2      	subs	r2, r2, r3
 800b8d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b8da:	b10b      	cbz	r3, 800b8e0 <__sflush_r+0x44>
 800b8dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b8de:	1ad2      	subs	r2, r2, r3
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8e4:	6a21      	ldr	r1, [r4, #32]
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	47b0      	blx	r6
 800b8ea:	1c43      	adds	r3, r0, #1
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	d106      	bne.n	800b8fe <__sflush_r+0x62>
 800b8f0:	6829      	ldr	r1, [r5, #0]
 800b8f2:	291d      	cmp	r1, #29
 800b8f4:	d82b      	bhi.n	800b94e <__sflush_r+0xb2>
 800b8f6:	4a2a      	ldr	r2, [pc, #168]	@ (800b9a0 <__sflush_r+0x104>)
 800b8f8:	410a      	asrs	r2, r1
 800b8fa:	07d6      	lsls	r6, r2, #31
 800b8fc:	d427      	bmi.n	800b94e <__sflush_r+0xb2>
 800b8fe:	2200      	movs	r2, #0
 800b900:	6062      	str	r2, [r4, #4]
 800b902:	04d9      	lsls	r1, r3, #19
 800b904:	6922      	ldr	r2, [r4, #16]
 800b906:	6022      	str	r2, [r4, #0]
 800b908:	d504      	bpl.n	800b914 <__sflush_r+0x78>
 800b90a:	1c42      	adds	r2, r0, #1
 800b90c:	d101      	bne.n	800b912 <__sflush_r+0x76>
 800b90e:	682b      	ldr	r3, [r5, #0]
 800b910:	b903      	cbnz	r3, 800b914 <__sflush_r+0x78>
 800b912:	6560      	str	r0, [r4, #84]	@ 0x54
 800b914:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b916:	602f      	str	r7, [r5, #0]
 800b918:	b1b9      	cbz	r1, 800b94a <__sflush_r+0xae>
 800b91a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b91e:	4299      	cmp	r1, r3
 800b920:	d002      	beq.n	800b928 <__sflush_r+0x8c>
 800b922:	4628      	mov	r0, r5
 800b924:	f7ff f9e0 	bl	800ace8 <_free_r>
 800b928:	2300      	movs	r3, #0
 800b92a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b92c:	e00d      	b.n	800b94a <__sflush_r+0xae>
 800b92e:	2301      	movs	r3, #1
 800b930:	4628      	mov	r0, r5
 800b932:	47b0      	blx	r6
 800b934:	4602      	mov	r2, r0
 800b936:	1c50      	adds	r0, r2, #1
 800b938:	d1c9      	bne.n	800b8ce <__sflush_r+0x32>
 800b93a:	682b      	ldr	r3, [r5, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d0c6      	beq.n	800b8ce <__sflush_r+0x32>
 800b940:	2b1d      	cmp	r3, #29
 800b942:	d001      	beq.n	800b948 <__sflush_r+0xac>
 800b944:	2b16      	cmp	r3, #22
 800b946:	d11e      	bne.n	800b986 <__sflush_r+0xea>
 800b948:	602f      	str	r7, [r5, #0]
 800b94a:	2000      	movs	r0, #0
 800b94c:	e022      	b.n	800b994 <__sflush_r+0xf8>
 800b94e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b952:	b21b      	sxth	r3, r3
 800b954:	e01b      	b.n	800b98e <__sflush_r+0xf2>
 800b956:	690f      	ldr	r7, [r1, #16]
 800b958:	2f00      	cmp	r7, #0
 800b95a:	d0f6      	beq.n	800b94a <__sflush_r+0xae>
 800b95c:	0793      	lsls	r3, r2, #30
 800b95e:	680e      	ldr	r6, [r1, #0]
 800b960:	bf08      	it	eq
 800b962:	694b      	ldreq	r3, [r1, #20]
 800b964:	600f      	str	r7, [r1, #0]
 800b966:	bf18      	it	ne
 800b968:	2300      	movne	r3, #0
 800b96a:	eba6 0807 	sub.w	r8, r6, r7
 800b96e:	608b      	str	r3, [r1, #8]
 800b970:	f1b8 0f00 	cmp.w	r8, #0
 800b974:	dde9      	ble.n	800b94a <__sflush_r+0xae>
 800b976:	6a21      	ldr	r1, [r4, #32]
 800b978:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b97a:	4643      	mov	r3, r8
 800b97c:	463a      	mov	r2, r7
 800b97e:	4628      	mov	r0, r5
 800b980:	47b0      	blx	r6
 800b982:	2800      	cmp	r0, #0
 800b984:	dc08      	bgt.n	800b998 <__sflush_r+0xfc>
 800b986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b98a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b98e:	81a3      	strh	r3, [r4, #12]
 800b990:	f04f 30ff 	mov.w	r0, #4294967295
 800b994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b998:	4407      	add	r7, r0
 800b99a:	eba8 0800 	sub.w	r8, r8, r0
 800b99e:	e7e7      	b.n	800b970 <__sflush_r+0xd4>
 800b9a0:	dfbffffe 	.word	0xdfbffffe

0800b9a4 <_fflush_r>:
 800b9a4:	b538      	push	{r3, r4, r5, lr}
 800b9a6:	690b      	ldr	r3, [r1, #16]
 800b9a8:	4605      	mov	r5, r0
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	b913      	cbnz	r3, 800b9b4 <_fflush_r+0x10>
 800b9ae:	2500      	movs	r5, #0
 800b9b0:	4628      	mov	r0, r5
 800b9b2:	bd38      	pop	{r3, r4, r5, pc}
 800b9b4:	b118      	cbz	r0, 800b9be <_fflush_r+0x1a>
 800b9b6:	6a03      	ldr	r3, [r0, #32]
 800b9b8:	b90b      	cbnz	r3, 800b9be <_fflush_r+0x1a>
 800b9ba:	f7fe f8d9 	bl	8009b70 <__sinit>
 800b9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d0f3      	beq.n	800b9ae <_fflush_r+0xa>
 800b9c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b9c8:	07d0      	lsls	r0, r2, #31
 800b9ca:	d404      	bmi.n	800b9d6 <_fflush_r+0x32>
 800b9cc:	0599      	lsls	r1, r3, #22
 800b9ce:	d402      	bmi.n	800b9d6 <_fflush_r+0x32>
 800b9d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9d2:	f7fe fb0e 	bl	8009ff2 <__retarget_lock_acquire_recursive>
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	4621      	mov	r1, r4
 800b9da:	f7ff ff5f 	bl	800b89c <__sflush_r>
 800b9de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9e0:	07da      	lsls	r2, r3, #31
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	d4e4      	bmi.n	800b9b0 <_fflush_r+0xc>
 800b9e6:	89a3      	ldrh	r3, [r4, #12]
 800b9e8:	059b      	lsls	r3, r3, #22
 800b9ea:	d4e1      	bmi.n	800b9b0 <_fflush_r+0xc>
 800b9ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9ee:	f7fe fb01 	bl	8009ff4 <__retarget_lock_release_recursive>
 800b9f2:	e7dd      	b.n	800b9b0 <_fflush_r+0xc>

0800b9f4 <fiprintf>:
 800b9f4:	b40e      	push	{r1, r2, r3}
 800b9f6:	b503      	push	{r0, r1, lr}
 800b9f8:	4601      	mov	r1, r0
 800b9fa:	ab03      	add	r3, sp, #12
 800b9fc:	4805      	ldr	r0, [pc, #20]	@ (800ba14 <fiprintf+0x20>)
 800b9fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba02:	6800      	ldr	r0, [r0, #0]
 800ba04:	9301      	str	r3, [sp, #4]
 800ba06:	f000 f947 	bl	800bc98 <_vfiprintf_r>
 800ba0a:	b002      	add	sp, #8
 800ba0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba10:	b003      	add	sp, #12
 800ba12:	4770      	bx	lr
 800ba14:	2000016c 	.word	0x2000016c

0800ba18 <__swhatbuf_r>:
 800ba18:	b570      	push	{r4, r5, r6, lr}
 800ba1a:	460c      	mov	r4, r1
 800ba1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba20:	2900      	cmp	r1, #0
 800ba22:	b096      	sub	sp, #88	@ 0x58
 800ba24:	4615      	mov	r5, r2
 800ba26:	461e      	mov	r6, r3
 800ba28:	da0d      	bge.n	800ba46 <__swhatbuf_r+0x2e>
 800ba2a:	89a3      	ldrh	r3, [r4, #12]
 800ba2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba30:	f04f 0100 	mov.w	r1, #0
 800ba34:	bf14      	ite	ne
 800ba36:	2340      	movne	r3, #64	@ 0x40
 800ba38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	6031      	str	r1, [r6, #0]
 800ba40:	602b      	str	r3, [r5, #0]
 800ba42:	b016      	add	sp, #88	@ 0x58
 800ba44:	bd70      	pop	{r4, r5, r6, pc}
 800ba46:	466a      	mov	r2, sp
 800ba48:	f000 f862 	bl	800bb10 <_fstat_r>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	dbec      	blt.n	800ba2a <__swhatbuf_r+0x12>
 800ba50:	9901      	ldr	r1, [sp, #4]
 800ba52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba5a:	4259      	negs	r1, r3
 800ba5c:	4159      	adcs	r1, r3
 800ba5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba62:	e7eb      	b.n	800ba3c <__swhatbuf_r+0x24>

0800ba64 <__smakebuf_r>:
 800ba64:	898b      	ldrh	r3, [r1, #12]
 800ba66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba68:	079d      	lsls	r5, r3, #30
 800ba6a:	4606      	mov	r6, r0
 800ba6c:	460c      	mov	r4, r1
 800ba6e:	d507      	bpl.n	800ba80 <__smakebuf_r+0x1c>
 800ba70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba74:	6023      	str	r3, [r4, #0]
 800ba76:	6123      	str	r3, [r4, #16]
 800ba78:	2301      	movs	r3, #1
 800ba7a:	6163      	str	r3, [r4, #20]
 800ba7c:	b003      	add	sp, #12
 800ba7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba80:	ab01      	add	r3, sp, #4
 800ba82:	466a      	mov	r2, sp
 800ba84:	f7ff ffc8 	bl	800ba18 <__swhatbuf_r>
 800ba88:	9f00      	ldr	r7, [sp, #0]
 800ba8a:	4605      	mov	r5, r0
 800ba8c:	4639      	mov	r1, r7
 800ba8e:	4630      	mov	r0, r6
 800ba90:	f7ff f99e 	bl	800add0 <_malloc_r>
 800ba94:	b948      	cbnz	r0, 800baaa <__smakebuf_r+0x46>
 800ba96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba9a:	059a      	lsls	r2, r3, #22
 800ba9c:	d4ee      	bmi.n	800ba7c <__smakebuf_r+0x18>
 800ba9e:	f023 0303 	bic.w	r3, r3, #3
 800baa2:	f043 0302 	orr.w	r3, r3, #2
 800baa6:	81a3      	strh	r3, [r4, #12]
 800baa8:	e7e2      	b.n	800ba70 <__smakebuf_r+0xc>
 800baaa:	89a3      	ldrh	r3, [r4, #12]
 800baac:	6020      	str	r0, [r4, #0]
 800baae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bab2:	81a3      	strh	r3, [r4, #12]
 800bab4:	9b01      	ldr	r3, [sp, #4]
 800bab6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800baba:	b15b      	cbz	r3, 800bad4 <__smakebuf_r+0x70>
 800babc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bac0:	4630      	mov	r0, r6
 800bac2:	f000 f837 	bl	800bb34 <_isatty_r>
 800bac6:	b128      	cbz	r0, 800bad4 <__smakebuf_r+0x70>
 800bac8:	89a3      	ldrh	r3, [r4, #12]
 800baca:	f023 0303 	bic.w	r3, r3, #3
 800bace:	f043 0301 	orr.w	r3, r3, #1
 800bad2:	81a3      	strh	r3, [r4, #12]
 800bad4:	89a3      	ldrh	r3, [r4, #12]
 800bad6:	431d      	orrs	r5, r3
 800bad8:	81a5      	strh	r5, [r4, #12]
 800bada:	e7cf      	b.n	800ba7c <__smakebuf_r+0x18>

0800badc <memmove>:
 800badc:	4288      	cmp	r0, r1
 800bade:	b510      	push	{r4, lr}
 800bae0:	eb01 0402 	add.w	r4, r1, r2
 800bae4:	d902      	bls.n	800baec <memmove+0x10>
 800bae6:	4284      	cmp	r4, r0
 800bae8:	4623      	mov	r3, r4
 800baea:	d807      	bhi.n	800bafc <memmove+0x20>
 800baec:	1e43      	subs	r3, r0, #1
 800baee:	42a1      	cmp	r1, r4
 800baf0:	d008      	beq.n	800bb04 <memmove+0x28>
 800baf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bafa:	e7f8      	b.n	800baee <memmove+0x12>
 800bafc:	4402      	add	r2, r0
 800bafe:	4601      	mov	r1, r0
 800bb00:	428a      	cmp	r2, r1
 800bb02:	d100      	bne.n	800bb06 <memmove+0x2a>
 800bb04:	bd10      	pop	{r4, pc}
 800bb06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb0e:	e7f7      	b.n	800bb00 <memmove+0x24>

0800bb10 <_fstat_r>:
 800bb10:	b538      	push	{r3, r4, r5, lr}
 800bb12:	4d07      	ldr	r5, [pc, #28]	@ (800bb30 <_fstat_r+0x20>)
 800bb14:	2300      	movs	r3, #0
 800bb16:	4604      	mov	r4, r0
 800bb18:	4608      	mov	r0, r1
 800bb1a:	4611      	mov	r1, r2
 800bb1c:	602b      	str	r3, [r5, #0]
 800bb1e:	f7f7 f98b 	bl	8002e38 <_fstat>
 800bb22:	1c43      	adds	r3, r0, #1
 800bb24:	d102      	bne.n	800bb2c <_fstat_r+0x1c>
 800bb26:	682b      	ldr	r3, [r5, #0]
 800bb28:	b103      	cbz	r3, 800bb2c <_fstat_r+0x1c>
 800bb2a:	6023      	str	r3, [r4, #0]
 800bb2c:	bd38      	pop	{r3, r4, r5, pc}
 800bb2e:	bf00      	nop
 800bb30:	20004f98 	.word	0x20004f98

0800bb34 <_isatty_r>:
 800bb34:	b538      	push	{r3, r4, r5, lr}
 800bb36:	4d06      	ldr	r5, [pc, #24]	@ (800bb50 <_isatty_r+0x1c>)
 800bb38:	2300      	movs	r3, #0
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	4608      	mov	r0, r1
 800bb3e:	602b      	str	r3, [r5, #0]
 800bb40:	f7f7 f98a 	bl	8002e58 <_isatty>
 800bb44:	1c43      	adds	r3, r0, #1
 800bb46:	d102      	bne.n	800bb4e <_isatty_r+0x1a>
 800bb48:	682b      	ldr	r3, [r5, #0]
 800bb4a:	b103      	cbz	r3, 800bb4e <_isatty_r+0x1a>
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	bd38      	pop	{r3, r4, r5, pc}
 800bb50:	20004f98 	.word	0x20004f98

0800bb54 <_sbrk_r>:
 800bb54:	b538      	push	{r3, r4, r5, lr}
 800bb56:	4d06      	ldr	r5, [pc, #24]	@ (800bb70 <_sbrk_r+0x1c>)
 800bb58:	2300      	movs	r3, #0
 800bb5a:	4604      	mov	r4, r0
 800bb5c:	4608      	mov	r0, r1
 800bb5e:	602b      	str	r3, [r5, #0]
 800bb60:	f7f7 f992 	bl	8002e88 <_sbrk>
 800bb64:	1c43      	adds	r3, r0, #1
 800bb66:	d102      	bne.n	800bb6e <_sbrk_r+0x1a>
 800bb68:	682b      	ldr	r3, [r5, #0]
 800bb6a:	b103      	cbz	r3, 800bb6e <_sbrk_r+0x1a>
 800bb6c:	6023      	str	r3, [r4, #0]
 800bb6e:	bd38      	pop	{r3, r4, r5, pc}
 800bb70:	20004f98 	.word	0x20004f98

0800bb74 <abort>:
 800bb74:	b508      	push	{r3, lr}
 800bb76:	2006      	movs	r0, #6
 800bb78:	f000 f9ce 	bl	800bf18 <raise>
 800bb7c:	2001      	movs	r0, #1
 800bb7e:	f7f7 f90b 	bl	8002d98 <_exit>

0800bb82 <_calloc_r>:
 800bb82:	b570      	push	{r4, r5, r6, lr}
 800bb84:	fba1 5402 	umull	r5, r4, r1, r2
 800bb88:	b93c      	cbnz	r4, 800bb9a <_calloc_r+0x18>
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	f7ff f920 	bl	800add0 <_malloc_r>
 800bb90:	4606      	mov	r6, r0
 800bb92:	b928      	cbnz	r0, 800bba0 <_calloc_r+0x1e>
 800bb94:	2600      	movs	r6, #0
 800bb96:	4630      	mov	r0, r6
 800bb98:	bd70      	pop	{r4, r5, r6, pc}
 800bb9a:	220c      	movs	r2, #12
 800bb9c:	6002      	str	r2, [r0, #0]
 800bb9e:	e7f9      	b.n	800bb94 <_calloc_r+0x12>
 800bba0:	462a      	mov	r2, r5
 800bba2:	4621      	mov	r1, r4
 800bba4:	f7fe f9a8 	bl	8009ef8 <memset>
 800bba8:	e7f5      	b.n	800bb96 <_calloc_r+0x14>

0800bbaa <__ascii_mbtowc>:
 800bbaa:	b082      	sub	sp, #8
 800bbac:	b901      	cbnz	r1, 800bbb0 <__ascii_mbtowc+0x6>
 800bbae:	a901      	add	r1, sp, #4
 800bbb0:	b142      	cbz	r2, 800bbc4 <__ascii_mbtowc+0x1a>
 800bbb2:	b14b      	cbz	r3, 800bbc8 <__ascii_mbtowc+0x1e>
 800bbb4:	7813      	ldrb	r3, [r2, #0]
 800bbb6:	600b      	str	r3, [r1, #0]
 800bbb8:	7812      	ldrb	r2, [r2, #0]
 800bbba:	1e10      	subs	r0, r2, #0
 800bbbc:	bf18      	it	ne
 800bbbe:	2001      	movne	r0, #1
 800bbc0:	b002      	add	sp, #8
 800bbc2:	4770      	bx	lr
 800bbc4:	4610      	mov	r0, r2
 800bbc6:	e7fb      	b.n	800bbc0 <__ascii_mbtowc+0x16>
 800bbc8:	f06f 0001 	mvn.w	r0, #1
 800bbcc:	e7f8      	b.n	800bbc0 <__ascii_mbtowc+0x16>

0800bbce <_realloc_r>:
 800bbce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd2:	4680      	mov	r8, r0
 800bbd4:	4615      	mov	r5, r2
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	b921      	cbnz	r1, 800bbe4 <_realloc_r+0x16>
 800bbda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbde:	4611      	mov	r1, r2
 800bbe0:	f7ff b8f6 	b.w	800add0 <_malloc_r>
 800bbe4:	b92a      	cbnz	r2, 800bbf2 <_realloc_r+0x24>
 800bbe6:	f7ff f87f 	bl	800ace8 <_free_r>
 800bbea:	2400      	movs	r4, #0
 800bbec:	4620      	mov	r0, r4
 800bbee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbf2:	f000 f9ad 	bl	800bf50 <_malloc_usable_size_r>
 800bbf6:	4285      	cmp	r5, r0
 800bbf8:	4606      	mov	r6, r0
 800bbfa:	d802      	bhi.n	800bc02 <_realloc_r+0x34>
 800bbfc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bc00:	d8f4      	bhi.n	800bbec <_realloc_r+0x1e>
 800bc02:	4629      	mov	r1, r5
 800bc04:	4640      	mov	r0, r8
 800bc06:	f7ff f8e3 	bl	800add0 <_malloc_r>
 800bc0a:	4607      	mov	r7, r0
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d0ec      	beq.n	800bbea <_realloc_r+0x1c>
 800bc10:	42b5      	cmp	r5, r6
 800bc12:	462a      	mov	r2, r5
 800bc14:	4621      	mov	r1, r4
 800bc16:	bf28      	it	cs
 800bc18:	4632      	movcs	r2, r6
 800bc1a:	f7fe f9ec 	bl	8009ff6 <memcpy>
 800bc1e:	4621      	mov	r1, r4
 800bc20:	4640      	mov	r0, r8
 800bc22:	f7ff f861 	bl	800ace8 <_free_r>
 800bc26:	463c      	mov	r4, r7
 800bc28:	e7e0      	b.n	800bbec <_realloc_r+0x1e>

0800bc2a <__ascii_wctomb>:
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	4608      	mov	r0, r1
 800bc2e:	b141      	cbz	r1, 800bc42 <__ascii_wctomb+0x18>
 800bc30:	2aff      	cmp	r2, #255	@ 0xff
 800bc32:	d904      	bls.n	800bc3e <__ascii_wctomb+0x14>
 800bc34:	228a      	movs	r2, #138	@ 0x8a
 800bc36:	601a      	str	r2, [r3, #0]
 800bc38:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3c:	4770      	bx	lr
 800bc3e:	700a      	strb	r2, [r1, #0]
 800bc40:	2001      	movs	r0, #1
 800bc42:	4770      	bx	lr

0800bc44 <__sfputc_r>:
 800bc44:	6893      	ldr	r3, [r2, #8]
 800bc46:	3b01      	subs	r3, #1
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	b410      	push	{r4}
 800bc4c:	6093      	str	r3, [r2, #8]
 800bc4e:	da08      	bge.n	800bc62 <__sfputc_r+0x1e>
 800bc50:	6994      	ldr	r4, [r2, #24]
 800bc52:	42a3      	cmp	r3, r4
 800bc54:	db01      	blt.n	800bc5a <__sfputc_r+0x16>
 800bc56:	290a      	cmp	r1, #10
 800bc58:	d103      	bne.n	800bc62 <__sfputc_r+0x1e>
 800bc5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc5e:	f7fe b8b7 	b.w	8009dd0 <__swbuf_r>
 800bc62:	6813      	ldr	r3, [r2, #0]
 800bc64:	1c58      	adds	r0, r3, #1
 800bc66:	6010      	str	r0, [r2, #0]
 800bc68:	7019      	strb	r1, [r3, #0]
 800bc6a:	4608      	mov	r0, r1
 800bc6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc70:	4770      	bx	lr

0800bc72 <__sfputs_r>:
 800bc72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc74:	4606      	mov	r6, r0
 800bc76:	460f      	mov	r7, r1
 800bc78:	4614      	mov	r4, r2
 800bc7a:	18d5      	adds	r5, r2, r3
 800bc7c:	42ac      	cmp	r4, r5
 800bc7e:	d101      	bne.n	800bc84 <__sfputs_r+0x12>
 800bc80:	2000      	movs	r0, #0
 800bc82:	e007      	b.n	800bc94 <__sfputs_r+0x22>
 800bc84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc88:	463a      	mov	r2, r7
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	f7ff ffda 	bl	800bc44 <__sfputc_r>
 800bc90:	1c43      	adds	r3, r0, #1
 800bc92:	d1f3      	bne.n	800bc7c <__sfputs_r+0xa>
 800bc94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc98 <_vfiprintf_r>:
 800bc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9c:	460d      	mov	r5, r1
 800bc9e:	b09d      	sub	sp, #116	@ 0x74
 800bca0:	4614      	mov	r4, r2
 800bca2:	4698      	mov	r8, r3
 800bca4:	4606      	mov	r6, r0
 800bca6:	b118      	cbz	r0, 800bcb0 <_vfiprintf_r+0x18>
 800bca8:	6a03      	ldr	r3, [r0, #32]
 800bcaa:	b90b      	cbnz	r3, 800bcb0 <_vfiprintf_r+0x18>
 800bcac:	f7fd ff60 	bl	8009b70 <__sinit>
 800bcb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcb2:	07d9      	lsls	r1, r3, #31
 800bcb4:	d405      	bmi.n	800bcc2 <_vfiprintf_r+0x2a>
 800bcb6:	89ab      	ldrh	r3, [r5, #12]
 800bcb8:	059a      	lsls	r2, r3, #22
 800bcba:	d402      	bmi.n	800bcc2 <_vfiprintf_r+0x2a>
 800bcbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcbe:	f7fe f998 	bl	8009ff2 <__retarget_lock_acquire_recursive>
 800bcc2:	89ab      	ldrh	r3, [r5, #12]
 800bcc4:	071b      	lsls	r3, r3, #28
 800bcc6:	d501      	bpl.n	800bccc <_vfiprintf_r+0x34>
 800bcc8:	692b      	ldr	r3, [r5, #16]
 800bcca:	b99b      	cbnz	r3, 800bcf4 <_vfiprintf_r+0x5c>
 800bccc:	4629      	mov	r1, r5
 800bcce:	4630      	mov	r0, r6
 800bcd0:	f7fe f8bc 	bl	8009e4c <__swsetup_r>
 800bcd4:	b170      	cbz	r0, 800bcf4 <_vfiprintf_r+0x5c>
 800bcd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcd8:	07dc      	lsls	r4, r3, #31
 800bcda:	d504      	bpl.n	800bce6 <_vfiprintf_r+0x4e>
 800bcdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bce0:	b01d      	add	sp, #116	@ 0x74
 800bce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce6:	89ab      	ldrh	r3, [r5, #12]
 800bce8:	0598      	lsls	r0, r3, #22
 800bcea:	d4f7      	bmi.n	800bcdc <_vfiprintf_r+0x44>
 800bcec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcee:	f7fe f981 	bl	8009ff4 <__retarget_lock_release_recursive>
 800bcf2:	e7f3      	b.n	800bcdc <_vfiprintf_r+0x44>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcf8:	2320      	movs	r3, #32
 800bcfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bcfe:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd02:	2330      	movs	r3, #48	@ 0x30
 800bd04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800beb4 <_vfiprintf_r+0x21c>
 800bd08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd0c:	f04f 0901 	mov.w	r9, #1
 800bd10:	4623      	mov	r3, r4
 800bd12:	469a      	mov	sl, r3
 800bd14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd18:	b10a      	cbz	r2, 800bd1e <_vfiprintf_r+0x86>
 800bd1a:	2a25      	cmp	r2, #37	@ 0x25
 800bd1c:	d1f9      	bne.n	800bd12 <_vfiprintf_r+0x7a>
 800bd1e:	ebba 0b04 	subs.w	fp, sl, r4
 800bd22:	d00b      	beq.n	800bd3c <_vfiprintf_r+0xa4>
 800bd24:	465b      	mov	r3, fp
 800bd26:	4622      	mov	r2, r4
 800bd28:	4629      	mov	r1, r5
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	f7ff ffa1 	bl	800bc72 <__sfputs_r>
 800bd30:	3001      	adds	r0, #1
 800bd32:	f000 80a7 	beq.w	800be84 <_vfiprintf_r+0x1ec>
 800bd36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd38:	445a      	add	r2, fp
 800bd3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd3c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	f000 809f 	beq.w	800be84 <_vfiprintf_r+0x1ec>
 800bd46:	2300      	movs	r3, #0
 800bd48:	f04f 32ff 	mov.w	r2, #4294967295
 800bd4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd50:	f10a 0a01 	add.w	sl, sl, #1
 800bd54:	9304      	str	r3, [sp, #16]
 800bd56:	9307      	str	r3, [sp, #28]
 800bd58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd5e:	4654      	mov	r4, sl
 800bd60:	2205      	movs	r2, #5
 800bd62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd66:	4853      	ldr	r0, [pc, #332]	@ (800beb4 <_vfiprintf_r+0x21c>)
 800bd68:	f7f4 fa3a 	bl	80001e0 <memchr>
 800bd6c:	9a04      	ldr	r2, [sp, #16]
 800bd6e:	b9d8      	cbnz	r0, 800bda8 <_vfiprintf_r+0x110>
 800bd70:	06d1      	lsls	r1, r2, #27
 800bd72:	bf44      	itt	mi
 800bd74:	2320      	movmi	r3, #32
 800bd76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd7a:	0713      	lsls	r3, r2, #28
 800bd7c:	bf44      	itt	mi
 800bd7e:	232b      	movmi	r3, #43	@ 0x2b
 800bd80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd84:	f89a 3000 	ldrb.w	r3, [sl]
 800bd88:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd8a:	d015      	beq.n	800bdb8 <_vfiprintf_r+0x120>
 800bd8c:	9a07      	ldr	r2, [sp, #28]
 800bd8e:	4654      	mov	r4, sl
 800bd90:	2000      	movs	r0, #0
 800bd92:	f04f 0c0a 	mov.w	ip, #10
 800bd96:	4621      	mov	r1, r4
 800bd98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd9c:	3b30      	subs	r3, #48	@ 0x30
 800bd9e:	2b09      	cmp	r3, #9
 800bda0:	d94b      	bls.n	800be3a <_vfiprintf_r+0x1a2>
 800bda2:	b1b0      	cbz	r0, 800bdd2 <_vfiprintf_r+0x13a>
 800bda4:	9207      	str	r2, [sp, #28]
 800bda6:	e014      	b.n	800bdd2 <_vfiprintf_r+0x13a>
 800bda8:	eba0 0308 	sub.w	r3, r0, r8
 800bdac:	fa09 f303 	lsl.w	r3, r9, r3
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	9304      	str	r3, [sp, #16]
 800bdb4:	46a2      	mov	sl, r4
 800bdb6:	e7d2      	b.n	800bd5e <_vfiprintf_r+0xc6>
 800bdb8:	9b03      	ldr	r3, [sp, #12]
 800bdba:	1d19      	adds	r1, r3, #4
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	9103      	str	r1, [sp, #12]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	bfbb      	ittet	lt
 800bdc4:	425b      	neglt	r3, r3
 800bdc6:	f042 0202 	orrlt.w	r2, r2, #2
 800bdca:	9307      	strge	r3, [sp, #28]
 800bdcc:	9307      	strlt	r3, [sp, #28]
 800bdce:	bfb8      	it	lt
 800bdd0:	9204      	strlt	r2, [sp, #16]
 800bdd2:	7823      	ldrb	r3, [r4, #0]
 800bdd4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdd6:	d10a      	bne.n	800bdee <_vfiprintf_r+0x156>
 800bdd8:	7863      	ldrb	r3, [r4, #1]
 800bdda:	2b2a      	cmp	r3, #42	@ 0x2a
 800bddc:	d132      	bne.n	800be44 <_vfiprintf_r+0x1ac>
 800bdde:	9b03      	ldr	r3, [sp, #12]
 800bde0:	1d1a      	adds	r2, r3, #4
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	9203      	str	r2, [sp, #12]
 800bde6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bdea:	3402      	adds	r4, #2
 800bdec:	9305      	str	r3, [sp, #20]
 800bdee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bec4 <_vfiprintf_r+0x22c>
 800bdf2:	7821      	ldrb	r1, [r4, #0]
 800bdf4:	2203      	movs	r2, #3
 800bdf6:	4650      	mov	r0, sl
 800bdf8:	f7f4 f9f2 	bl	80001e0 <memchr>
 800bdfc:	b138      	cbz	r0, 800be0e <_vfiprintf_r+0x176>
 800bdfe:	9b04      	ldr	r3, [sp, #16]
 800be00:	eba0 000a 	sub.w	r0, r0, sl
 800be04:	2240      	movs	r2, #64	@ 0x40
 800be06:	4082      	lsls	r2, r0
 800be08:	4313      	orrs	r3, r2
 800be0a:	3401      	adds	r4, #1
 800be0c:	9304      	str	r3, [sp, #16]
 800be0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be12:	4829      	ldr	r0, [pc, #164]	@ (800beb8 <_vfiprintf_r+0x220>)
 800be14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be18:	2206      	movs	r2, #6
 800be1a:	f7f4 f9e1 	bl	80001e0 <memchr>
 800be1e:	2800      	cmp	r0, #0
 800be20:	d03f      	beq.n	800bea2 <_vfiprintf_r+0x20a>
 800be22:	4b26      	ldr	r3, [pc, #152]	@ (800bebc <_vfiprintf_r+0x224>)
 800be24:	bb1b      	cbnz	r3, 800be6e <_vfiprintf_r+0x1d6>
 800be26:	9b03      	ldr	r3, [sp, #12]
 800be28:	3307      	adds	r3, #7
 800be2a:	f023 0307 	bic.w	r3, r3, #7
 800be2e:	3308      	adds	r3, #8
 800be30:	9303      	str	r3, [sp, #12]
 800be32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be34:	443b      	add	r3, r7
 800be36:	9309      	str	r3, [sp, #36]	@ 0x24
 800be38:	e76a      	b.n	800bd10 <_vfiprintf_r+0x78>
 800be3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800be3e:	460c      	mov	r4, r1
 800be40:	2001      	movs	r0, #1
 800be42:	e7a8      	b.n	800bd96 <_vfiprintf_r+0xfe>
 800be44:	2300      	movs	r3, #0
 800be46:	3401      	adds	r4, #1
 800be48:	9305      	str	r3, [sp, #20]
 800be4a:	4619      	mov	r1, r3
 800be4c:	f04f 0c0a 	mov.w	ip, #10
 800be50:	4620      	mov	r0, r4
 800be52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be56:	3a30      	subs	r2, #48	@ 0x30
 800be58:	2a09      	cmp	r2, #9
 800be5a:	d903      	bls.n	800be64 <_vfiprintf_r+0x1cc>
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d0c6      	beq.n	800bdee <_vfiprintf_r+0x156>
 800be60:	9105      	str	r1, [sp, #20]
 800be62:	e7c4      	b.n	800bdee <_vfiprintf_r+0x156>
 800be64:	fb0c 2101 	mla	r1, ip, r1, r2
 800be68:	4604      	mov	r4, r0
 800be6a:	2301      	movs	r3, #1
 800be6c:	e7f0      	b.n	800be50 <_vfiprintf_r+0x1b8>
 800be6e:	ab03      	add	r3, sp, #12
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	462a      	mov	r2, r5
 800be74:	4b12      	ldr	r3, [pc, #72]	@ (800bec0 <_vfiprintf_r+0x228>)
 800be76:	a904      	add	r1, sp, #16
 800be78:	4630      	mov	r0, r6
 800be7a:	f7fd fa35 	bl	80092e8 <_printf_float>
 800be7e:	4607      	mov	r7, r0
 800be80:	1c78      	adds	r0, r7, #1
 800be82:	d1d6      	bne.n	800be32 <_vfiprintf_r+0x19a>
 800be84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be86:	07d9      	lsls	r1, r3, #31
 800be88:	d405      	bmi.n	800be96 <_vfiprintf_r+0x1fe>
 800be8a:	89ab      	ldrh	r3, [r5, #12]
 800be8c:	059a      	lsls	r2, r3, #22
 800be8e:	d402      	bmi.n	800be96 <_vfiprintf_r+0x1fe>
 800be90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be92:	f7fe f8af 	bl	8009ff4 <__retarget_lock_release_recursive>
 800be96:	89ab      	ldrh	r3, [r5, #12]
 800be98:	065b      	lsls	r3, r3, #25
 800be9a:	f53f af1f 	bmi.w	800bcdc <_vfiprintf_r+0x44>
 800be9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bea0:	e71e      	b.n	800bce0 <_vfiprintf_r+0x48>
 800bea2:	ab03      	add	r3, sp, #12
 800bea4:	9300      	str	r3, [sp, #0]
 800bea6:	462a      	mov	r2, r5
 800bea8:	4b05      	ldr	r3, [pc, #20]	@ (800bec0 <_vfiprintf_r+0x228>)
 800beaa:	a904      	add	r1, sp, #16
 800beac:	4630      	mov	r0, r6
 800beae:	f7fd fcb3 	bl	8009818 <_printf_i>
 800beb2:	e7e4      	b.n	800be7e <_vfiprintf_r+0x1e6>
 800beb4:	0800c978 	.word	0x0800c978
 800beb8:	0800c982 	.word	0x0800c982
 800bebc:	080092e9 	.word	0x080092e9
 800bec0:	0800bc73 	.word	0x0800bc73
 800bec4:	0800c97e 	.word	0x0800c97e

0800bec8 <_raise_r>:
 800bec8:	291f      	cmp	r1, #31
 800beca:	b538      	push	{r3, r4, r5, lr}
 800becc:	4605      	mov	r5, r0
 800bece:	460c      	mov	r4, r1
 800bed0:	d904      	bls.n	800bedc <_raise_r+0x14>
 800bed2:	2316      	movs	r3, #22
 800bed4:	6003      	str	r3, [r0, #0]
 800bed6:	f04f 30ff 	mov.w	r0, #4294967295
 800beda:	bd38      	pop	{r3, r4, r5, pc}
 800bedc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bede:	b112      	cbz	r2, 800bee6 <_raise_r+0x1e>
 800bee0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bee4:	b94b      	cbnz	r3, 800befa <_raise_r+0x32>
 800bee6:	4628      	mov	r0, r5
 800bee8:	f000 f830 	bl	800bf4c <_getpid_r>
 800beec:	4622      	mov	r2, r4
 800beee:	4601      	mov	r1, r0
 800bef0:	4628      	mov	r0, r5
 800bef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bef6:	f000 b817 	b.w	800bf28 <_kill_r>
 800befa:	2b01      	cmp	r3, #1
 800befc:	d00a      	beq.n	800bf14 <_raise_r+0x4c>
 800befe:	1c59      	adds	r1, r3, #1
 800bf00:	d103      	bne.n	800bf0a <_raise_r+0x42>
 800bf02:	2316      	movs	r3, #22
 800bf04:	6003      	str	r3, [r0, #0]
 800bf06:	2001      	movs	r0, #1
 800bf08:	e7e7      	b.n	800beda <_raise_r+0x12>
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bf10:	4620      	mov	r0, r4
 800bf12:	4798      	blx	r3
 800bf14:	2000      	movs	r0, #0
 800bf16:	e7e0      	b.n	800beda <_raise_r+0x12>

0800bf18 <raise>:
 800bf18:	4b02      	ldr	r3, [pc, #8]	@ (800bf24 <raise+0xc>)
 800bf1a:	4601      	mov	r1, r0
 800bf1c:	6818      	ldr	r0, [r3, #0]
 800bf1e:	f7ff bfd3 	b.w	800bec8 <_raise_r>
 800bf22:	bf00      	nop
 800bf24:	2000016c 	.word	0x2000016c

0800bf28 <_kill_r>:
 800bf28:	b538      	push	{r3, r4, r5, lr}
 800bf2a:	4d07      	ldr	r5, [pc, #28]	@ (800bf48 <_kill_r+0x20>)
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	4604      	mov	r4, r0
 800bf30:	4608      	mov	r0, r1
 800bf32:	4611      	mov	r1, r2
 800bf34:	602b      	str	r3, [r5, #0]
 800bf36:	f7f6 ff1f 	bl	8002d78 <_kill>
 800bf3a:	1c43      	adds	r3, r0, #1
 800bf3c:	d102      	bne.n	800bf44 <_kill_r+0x1c>
 800bf3e:	682b      	ldr	r3, [r5, #0]
 800bf40:	b103      	cbz	r3, 800bf44 <_kill_r+0x1c>
 800bf42:	6023      	str	r3, [r4, #0]
 800bf44:	bd38      	pop	{r3, r4, r5, pc}
 800bf46:	bf00      	nop
 800bf48:	20004f98 	.word	0x20004f98

0800bf4c <_getpid_r>:
 800bf4c:	f7f6 bf0c 	b.w	8002d68 <_getpid>

0800bf50 <_malloc_usable_size_r>:
 800bf50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf54:	1f18      	subs	r0, r3, #4
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	bfbc      	itt	lt
 800bf5a:	580b      	ldrlt	r3, [r1, r0]
 800bf5c:	18c0      	addlt	r0, r0, r3
 800bf5e:	4770      	bx	lr

0800bf60 <_init>:
 800bf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf62:	bf00      	nop
 800bf64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf66:	bc08      	pop	{r3}
 800bf68:	469e      	mov	lr, r3
 800bf6a:	4770      	bx	lr

0800bf6c <_fini>:
 800bf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6e:	bf00      	nop
 800bf70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf72:	bc08      	pop	{r3}
 800bf74:	469e      	mov	lr, r3
 800bf76:	4770      	bx	lr
