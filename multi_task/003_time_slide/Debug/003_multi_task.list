
003_multi_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c78c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800c930  0800c930  0000d930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce98  0800ce98  0000e1fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce98  0800ce98  0000de98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cea0  0800cea0  0000e1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cea0  0800cea0  0000dea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cea4  0800cea4  0000dea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800cea8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000146dc  200001fc  0800d0a4  0000e1fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200148d8  0800d0a4  0000e8d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9f0  00000000  00000000  0000e22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004119  00000000  00000000  0002ac1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d8  00000000  00000000  0002ed38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000141b  00000000  00000000  00030710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c699  00000000  00000000  00031b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fd83  00000000  00000000  0004e1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1bfc  00000000  00000000  0006df47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011fb43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dac  00000000  00000000  0011fb88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00127934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c914 	.word	0x0800c914

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	0800c914 	.word	0x0800c914

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200131b0 	.word	0x200131b0
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <strlen>:
 8000320:	4603      	mov	r3, r0
 8000322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000326:	2a00      	cmp	r2, #0
 8000328:	d1fb      	bne.n	8000322 <strlen+0x2>
 800032a:	1a18      	subs	r0, r3, r0
 800032c:	3801      	subs	r0, #1
 800032e:	4770      	bx	lr

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	@ 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmpun>:
 8000bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x10>
 8000be6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bea:	d10a      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x20>
 8000bf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0001 	mov.w	r0, #1
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2iz>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d215      	bcs.n	8000c3e <__aeabi_d2iz+0x36>
 8000c12:	d511      	bpl.n	8000c38 <__aeabi_d2iz+0x30>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d912      	bls.n	8000c44 <__aeabi_d2iz+0x3c>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	4770      	bx	lr
 8000c38:	f04f 0000 	mov.w	r0, #0
 8000c3c:	4770      	bx	lr
 8000c3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c42:	d105      	bne.n	8000c50 <__aeabi_d2iz+0x48>
 8000c44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	bf08      	it	eq
 8000c4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b96a 	b.w	8000fe4 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	460c      	mov	r4, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14e      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d34:	4694      	mov	ip, r2
 8000d36:	458c      	cmp	ip, r1
 8000d38:	4686      	mov	lr, r0
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	d962      	bls.n	8000e06 <__udivmoddi4+0xde>
 8000d40:	b14a      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d42:	f1c2 0320 	rsb	r3, r2, #32
 8000d46:	4091      	lsls	r1, r2
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	4319      	orrs	r1, r3
 8000d52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5a:	fa1f f68c 	uxth.w	r6, ip
 8000d5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d66:	fb07 1114 	mls	r1, r7, r4, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb04 f106 	mul.w	r1, r4, r6
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7e:	f080 8112 	bcs.w	8000fa6 <__udivmoddi4+0x27e>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 810f 	bls.w	8000fa6 <__udivmoddi4+0x27e>
 8000d88:	3c02      	subs	r4, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	fa1f f38e 	uxth.w	r3, lr
 8000d92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d96:	fb07 1110 	mls	r1, r7, r0, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb00 f606 	mul.w	r6, r0, r6
 8000da2:	429e      	cmp	r6, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x94>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dae:	f080 80fc 	bcs.w	8000faa <__udivmoddi4+0x282>
 8000db2:	429e      	cmp	r6, r3
 8000db4:	f240 80f9 	bls.w	8000faa <__udivmoddi4+0x282>
 8000db8:	4463      	add	r3, ip
 8000dba:	3802      	subs	r0, #2
 8000dbc:	1b9b      	subs	r3, r3, r6
 8000dbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa6>
 8000dc6:	40d3      	lsrs	r3, r2
 8000dc8:	2200      	movs	r2, #0
 8000dca:	e9c5 3200 	strd	r3, r2, [r5]
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xba>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb4>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa6>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d146      	bne.n	8000e78 <__udivmoddi4+0x150>
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	d302      	bcc.n	8000df4 <__udivmoddi4+0xcc>
 8000dee:	4290      	cmp	r0, r2
 8000df0:	f0c0 80f0 	bcc.w	8000fd4 <__udivmoddi4+0x2ac>
 8000df4:	1a86      	subs	r6, r0, r2
 8000df6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d0e6      	beq.n	8000dce <__udivmoddi4+0xa6>
 8000e00:	e9c5 6300 	strd	r6, r3, [r5]
 8000e04:	e7e3      	b.n	8000dce <__udivmoddi4+0xa6>
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	f040 8090 	bne.w	8000f2c <__udivmoddi4+0x204>
 8000e0c:	eba1 040c 	sub.w	r4, r1, ip
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa1f f78c 	uxth.w	r7, ip
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e22:	fb08 4416 	mls	r4, r8, r6, r4
 8000e26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e2a:	fb07 f006 	mul.w	r0, r7, r6
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x11c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x11a>
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	f200 80cd 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e42:	4626      	mov	r6, r4
 8000e44:	1a1c      	subs	r4, r3, r0
 8000e46:	fa1f f38e 	uxth.w	r3, lr
 8000e4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb00 f707 	mul.w	r7, r0, r7
 8000e5a:	429f      	cmp	r7, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x148>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x146>
 8000e68:	429f      	cmp	r7, r3
 8000e6a:	f200 80b0 	bhi.w	8000fce <__udivmoddi4+0x2a6>
 8000e6e:	4620      	mov	r0, r4
 8000e70:	1bdb      	subs	r3, r3, r7
 8000e72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0x9c>
 8000e78:	f1c1 0620 	rsb	r6, r1, #32
 8000e7c:	408b      	lsls	r3, r1
 8000e7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e82:	431f      	orrs	r7, r3
 8000e84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e88:	fa04 f301 	lsl.w	r3, r4, r1
 8000e8c:	ea43 030c 	orr.w	r3, r3, ip
 8000e90:	40f4      	lsrs	r4, r6
 8000e92:	fa00 f801 	lsl.w	r8, r0, r1
 8000e96:	0c38      	lsrs	r0, r7, #16
 8000e98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000ea0:	fa1f fc87 	uxth.w	ip, r7
 8000ea4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eac:	fb0e f90c 	mul.w	r9, lr, ip
 8000eb0:	45a1      	cmp	r9, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	d90a      	bls.n	8000ece <__udivmoddi4+0x1a6>
 8000eb8:	193c      	adds	r4, r7, r4
 8000eba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ebe:	f080 8084 	bcs.w	8000fca <__udivmoddi4+0x2a2>
 8000ec2:	45a1      	cmp	r9, r4
 8000ec4:	f240 8081 	bls.w	8000fca <__udivmoddi4+0x2a2>
 8000ec8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ecc:	443c      	add	r4, r7
 8000ece:	eba4 0409 	sub.w	r4, r4, r9
 8000ed2:	fa1f f983 	uxth.w	r9, r3
 8000ed6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eda:	fb00 4413 	mls	r4, r0, r3, r4
 8000ede:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee6:	45a4      	cmp	ip, r4
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x1d2>
 8000eea:	193c      	adds	r4, r7, r4
 8000eec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ef0:	d267      	bcs.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d965      	bls.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef6:	3b02      	subs	r3, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efe:	fba0 9302 	umull	r9, r3, r0, r2
 8000f02:	eba4 040c 	sub.w	r4, r4, ip
 8000f06:	429c      	cmp	r4, r3
 8000f08:	46ce      	mov	lr, r9
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	d351      	bcc.n	8000fb2 <__udivmoddi4+0x28a>
 8000f0e:	d04e      	beq.n	8000fae <__udivmoddi4+0x286>
 8000f10:	b155      	cbz	r5, 8000f28 <__udivmoddi4+0x200>
 8000f12:	ebb8 030e 	subs.w	r3, r8, lr
 8000f16:	eb64 040c 	sbc.w	r4, r4, ip
 8000f1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1e:	40cb      	lsrs	r3, r1
 8000f20:	431e      	orrs	r6, r3
 8000f22:	40cc      	lsrs	r4, r1
 8000f24:	e9c5 6400 	strd	r6, r4, [r5]
 8000f28:	2100      	movs	r1, #0
 8000f2a:	e750      	b.n	8000dce <__udivmoddi4+0xa6>
 8000f2c:	f1c2 0320 	rsb	r3, r2, #32
 8000f30:	fa20 f103 	lsr.w	r1, r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	fa24 f303 	lsr.w	r3, r4, r3
 8000f3c:	4094      	lsls	r4, r2
 8000f3e:	430c      	orrs	r4, r1
 8000f40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f48:	fa1f f78c 	uxth.w	r7, ip
 8000f4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f50:	fb08 3110 	mls	r1, r8, r0, r3
 8000f54:	0c23      	lsrs	r3, r4, #16
 8000f56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f5a:	fb00 f107 	mul.w	r1, r0, r7
 8000f5e:	4299      	cmp	r1, r3
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x24c>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f6a:	d22c      	bcs.n	8000fc6 <__udivmoddi4+0x29e>
 8000f6c:	4299      	cmp	r1, r3
 8000f6e:	d92a      	bls.n	8000fc6 <__udivmoddi4+0x29e>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1a5b      	subs	r3, r3, r1
 8000f76:	b2a4      	uxth	r4, r4
 8000f78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f84:	fb01 f307 	mul.w	r3, r1, r7
 8000f88:	42a3      	cmp	r3, r4
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x276>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f94:	d213      	bcs.n	8000fbe <__udivmoddi4+0x296>
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	d911      	bls.n	8000fbe <__udivmoddi4+0x296>
 8000f9a:	3902      	subs	r1, #2
 8000f9c:	4464      	add	r4, ip
 8000f9e:	1ae4      	subs	r4, r4, r3
 8000fa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa4:	e739      	b.n	8000e1a <__udivmoddi4+0xf2>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	e6f0      	b.n	8000d8c <__udivmoddi4+0x64>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e706      	b.n	8000dbc <__udivmoddi4+0x94>
 8000fae:	45c8      	cmp	r8, r9
 8000fb0:	d2ae      	bcs.n	8000f10 <__udivmoddi4+0x1e8>
 8000fb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fba:	3801      	subs	r0, #1
 8000fbc:	e7a8      	b.n	8000f10 <__udivmoddi4+0x1e8>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	e7ed      	b.n	8000f9e <__udivmoddi4+0x276>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	e799      	b.n	8000efa <__udivmoddi4+0x1d2>
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	e7d4      	b.n	8000f74 <__udivmoddi4+0x24c>
 8000fca:	46d6      	mov	lr, sl
 8000fcc:	e77f      	b.n	8000ece <__udivmoddi4+0x1a6>
 8000fce:	4463      	add	r3, ip
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	e74d      	b.n	8000e70 <__udivmoddi4+0x148>
 8000fd4:	4606      	mov	r6, r0
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e70f      	b.n	8000dfc <__udivmoddi4+0xd4>
 8000fdc:	3e02      	subs	r6, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	e730      	b.n	8000e44 <__udivmoddi4+0x11c>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08c      	sub	sp, #48	@ 0x30
 8000fec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f000 ff0b 	bl	8001e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 f8e3 	bl	80011bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f000 fa01 	bl	80013fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ffa:	f000 f94b 	bl	8001294 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ffe:	f000 f977 	bl	80012f0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001002:	f000 f9d1 	bl	80013a8 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8001006:	f000 f9a1 	bl	800134c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(250000);
 800100a:	485b      	ldr	r0, [pc, #364]	@ (8001178 <main+0x190>)
 800100c:	f006 f85c 	bl	80070c8 <SEGGER_UART_init>
  // CYCLCNT enable
  DWT_CTRL |= (1 << 0);
 8001010:	4b5a      	ldr	r3, [pc, #360]	@ (800117c <main+0x194>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a59      	ldr	r2, [pc, #356]	@ (800117c <main+0x194>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800101c:	f005 fe7e 	bl	8006d1c <SEGGER_SYSVIEW_Conf>

  //SEGGER_SYSVIEW_Start();

  CLCD_I2C_Init(&LCD1,&hi2c2,0x4e,20,4);
 8001020:	2304      	movs	r3, #4
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2314      	movs	r3, #20
 8001026:	224e      	movs	r2, #78	@ 0x4e
 8001028:	4955      	ldr	r1, [pc, #340]	@ (8001180 <main+0x198>)
 800102a:	4856      	ldr	r0, [pc, #344]	@ (8001184 <main+0x19c>)
 800102c:	f008 fc08 	bl	8009840 <CLCD_I2C_Init>

      // init SHT21 use I2C1
      SHT2x_Init(&hi2c1);
 8001030:	4855      	ldr	r0, [pc, #340]	@ (8001188 <main+0x1a0>)
 8001032:	f008 fcfd 	bl	8009a30 <SHT2x_Init>
      SHT2x_SetResolution(RES_14_12);
 8001036:	2000      	movs	r0, #0
 8001038:	f008 fde0 	bl	8009bfc <SHT2x_SetResolution>

      //init DS3231 use I2C3
      rtc_init(&hi2c3);
 800103c:	4853      	ldr	r0, [pc, #332]	@ (800118c <main+0x1a4>)
 800103e:	f008 fb8b 	bl	8009758 <rtc_init>

      CLCD_I2C_SetCursor(&LCD1, 10, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	210a      	movs	r1, #10
 8001046:	484f      	ldr	r0, [pc, #316]	@ (8001184 <main+0x19c>)
 8001048:	f008 fc65 	bl	8009916 <CLCD_I2C_SetCursor>
      CLCD_I2C_WriteString(&LCD1, "t:");
 800104c:	4950      	ldr	r1, [pc, #320]	@ (8001190 <main+0x1a8>)
 800104e:	484d      	ldr	r0, [pc, #308]	@ (8001184 <main+0x19c>)
 8001050:	f008 fcb4 	bl	80099bc <CLCD_I2C_WriteString>

      CLCD_I2C_SetCursor(&LCD1, 10, 1);
 8001054:	2201      	movs	r2, #1
 8001056:	210a      	movs	r1, #10
 8001058:	484a      	ldr	r0, [pc, #296]	@ (8001184 <main+0x19c>)
 800105a:	f008 fc5c 	bl	8009916 <CLCD_I2C_SetCursor>
      CLCD_I2C_WriteString(&LCD1, "h:");
 800105e:	494d      	ldr	r1, [pc, #308]	@ (8001194 <main+0x1ac>)
 8001060:	4848      	ldr	r0, [pc, #288]	@ (8001184 <main+0x19c>)
 8001062:	f008 fcab 	bl	80099bc <CLCD_I2C_WriteString>


      // init time for rtc . It just sould run once time.
    	date_time.hour =9;
 8001066:	4b4c      	ldr	r3, [pc, #304]	@ (8001198 <main+0x1b0>)
 8001068:	2209      	movs	r2, #9
 800106a:	701a      	strb	r2, [r3, #0]
      date_time.min =54;
 800106c:	4b4a      	ldr	r3, [pc, #296]	@ (8001198 <main+0x1b0>)
 800106e:	2236      	movs	r2, #54	@ 0x36
 8001070:	705a      	strb	r2, [r3, #1]
    	date_time.sec =30;
 8001072:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <main+0x1b0>)
 8001074:	221e      	movs	r2, #30
 8001076:	709a      	strb	r2, [r3, #2]
    	date_time.day =19;
 8001078:	4b47      	ldr	r3, [pc, #284]	@ (8001198 <main+0x1b0>)
 800107a:	2213      	movs	r2, #19
 800107c:	70da      	strb	r2, [r3, #3]
    	date_time.date =7;
 800107e:	4b46      	ldr	r3, [pc, #280]	@ (8001198 <main+0x1b0>)
 8001080:	2207      	movs	r2, #7
 8001082:	711a      	strb	r2, [r3, #4]
    	date_time.mon =1;
 8001084:	4b44      	ldr	r3, [pc, #272]	@ (8001198 <main+0x1b0>)
 8001086:	2201      	movs	r2, #1
 8001088:	715a      	strb	r2, [r3, #5]
    	date_time.year =25;
 800108a:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <main+0x1b0>)
 800108c:	2219      	movs	r2, #25
 800108e:	719a      	strb	r2, [r3, #6]

    	//rtc_write_time(&date_time);


    	//create tasks
    	  status = xTaskCreate(readth_handle, "reath_handle", 512, NULL, 1, &read_temp_and_hum);
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	2301      	movs	r3, #1
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2300      	movs	r3, #0
 800109c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010a0:	493e      	ldr	r1, [pc, #248]	@ (800119c <main+0x1b4>)
 80010a2:	483f      	ldr	r0, [pc, #252]	@ (80011a0 <main+0x1b8>)
 80010a4:	f004 fa39 	bl	800551a <xTaskCreate>
 80010a8:	6278      	str	r0, [r7, #36]	@ 0x24

    	  configASSERT(status == pdPASS);
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d00b      	beq.n	80010c8 <main+0xe0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80010b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010b4:	f383 8811 	msr	BASEPRI, r3
 80010b8:	f3bf 8f6f 	isb	sy
 80010bc:	f3bf 8f4f 	dsb	sy
 80010c0:	623b      	str	r3, [r7, #32]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80010c2:	bf00      	nop
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <main+0xdc>

    	  status = xTaskCreate(read_time_handle, "read_time", 512, NULL, 3, &read_time);
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	2303      	movs	r3, #3
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2300      	movs	r3, #0
 80010d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010d8:	4932      	ldr	r1, [pc, #200]	@ (80011a4 <main+0x1bc>)
 80010da:	4833      	ldr	r0, [pc, #204]	@ (80011a8 <main+0x1c0>)
 80010dc:	f004 fa1d 	bl	800551a <xTaskCreate>
 80010e0:	6278      	str	r0, [r7, #36]	@ 0x24

    	  configASSERT(status == pdPASS);
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d00b      	beq.n	8001100 <main+0x118>
    __asm volatile
 80010e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010ec:	f383 8811 	msr	BASEPRI, r3
 80010f0:	f3bf 8f6f 	isb	sy
 80010f4:	f3bf 8f4f 	dsb	sy
 80010f8:	61fb      	str	r3, [r7, #28]
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <main+0x114>

    	  status = xTaskCreate(send_uart_handle, "send_uart", 512,NULL, 2, &send_uart);
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	2302      	movs	r3, #2
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2300      	movs	r3, #0
 800110c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001110:	4926      	ldr	r1, [pc, #152]	@ (80011ac <main+0x1c4>)
 8001112:	4827      	ldr	r0, [pc, #156]	@ (80011b0 <main+0x1c8>)
 8001114:	f004 fa01 	bl	800551a <xTaskCreate>
 8001118:	6278      	str	r0, [r7, #36]	@ 0x24

    	  configASSERT(status == pdPASS);
 800111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111c:	2b01      	cmp	r3, #1
 800111e:	d00b      	beq.n	8001138 <main+0x150>
    __asm volatile
 8001120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001124:	f383 8811 	msr	BASEPRI, r3
 8001128:	f3bf 8f6f 	isb	sy
 800112c:	f3bf 8f4f 	dsb	sy
 8001130:	61bb      	str	r3, [r7, #24]
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <main+0x14c>

    	  status = xTaskCreate(display_lcd_handle, "display_lcd", 512, NULL, 3, &display_lcd);
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	2303      	movs	r3, #3
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2300      	movs	r3, #0
 8001142:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001146:	491b      	ldr	r1, [pc, #108]	@ (80011b4 <main+0x1cc>)
 8001148:	481b      	ldr	r0, [pc, #108]	@ (80011b8 <main+0x1d0>)
 800114a:	f004 f9e6 	bl	800551a <xTaskCreate>
 800114e:	6278      	str	r0, [r7, #36]	@ 0x24

    	  configASSERT(status == pdPASS);
 8001150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001152:	2b01      	cmp	r3, #1
 8001154:	d00b      	beq.n	800116e <main+0x186>
    __asm volatile
 8001156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800115a:	f383 8811 	msr	BASEPRI, r3
 800115e:	f3bf 8f6f 	isb	sy
 8001162:	f3bf 8f4f 	dsb	sy
 8001166:	617b      	str	r3, [r7, #20]
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	e7fd      	b.n	800116a <main+0x182>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800116e:	f004 fbc5 	bl	80058fc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001172:	bf00      	nop
 8001174:	e7fd      	b.n	8001172 <main+0x18a>
 8001176:	bf00      	nop
 8001178:	0003d090 	.word	0x0003d090
 800117c:	e0001000 	.word	0xe0001000
 8001180:	2000026c 	.word	0x2000026c
 8001184:	20000368 	.word	0x20000368
 8001188:	20000218 	.word	0x20000218
 800118c:	200002c0 	.word	0x200002c0
 8001190:	0800c930 	.word	0x0800c930
 8001194:	0800c934 	.word	0x0800c934
 8001198:	2000035c 	.word	0x2000035c
 800119c:	0800c938 	.word	0x0800c938
 80011a0:	080014f9 	.word	0x080014f9
 80011a4:	0800c948 	.word	0x0800c948
 80011a8:	08001541 	.word	0x08001541
 80011ac:	0800c954 	.word	0x0800c954
 80011b0:	08001569 	.word	0x08001569
 80011b4:	0800c960 	.word	0x0800c960
 80011b8:	080015cd 	.word	0x080015cd

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b094      	sub	sp, #80	@ 0x50
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 0320 	add.w	r3, r7, #32
 80011c6:	2230      	movs	r2, #48	@ 0x30
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f009 faec 	bl	800a7a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	4b29      	ldr	r3, [pc, #164]	@ (800128c <SystemClock_Config+0xd0>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	4a28      	ldr	r2, [pc, #160]	@ (800128c <SystemClock_Config+0xd0>)
 80011ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f0:	4b26      	ldr	r3, [pc, #152]	@ (800128c <SystemClock_Config+0xd0>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	4b23      	ldr	r3, [pc, #140]	@ (8001290 <SystemClock_Config+0xd4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001208:	4a21      	ldr	r2, [pc, #132]	@ (8001290 <SystemClock_Config+0xd4>)
 800120a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <SystemClock_Config+0xd4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800121c:	2302      	movs	r3, #2
 800121e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001220:	2301      	movs	r3, #1
 8001222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001224:	2310      	movs	r3, #16
 8001226:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001228:	2302      	movs	r3, #2
 800122a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800122c:	2300      	movs	r3, #0
 800122e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001230:	2310      	movs	r3, #16
 8001232:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001234:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001238:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800123a:	2304      	movs	r3, #4
 800123c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800123e:	2307      	movs	r3, #7
 8001240:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001242:	f107 0320 	add.w	r3, r7, #32
 8001246:	4618      	mov	r0, r3
 8001248:	f002 f950 	bl	80034ec <HAL_RCC_OscConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001252:	f000 faef 	bl	8001834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001256:	230f      	movs	r3, #15
 8001258:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125a:	2302      	movs	r3, #2
 800125c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001262:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001266:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2102      	movs	r1, #2
 8001272:	4618      	mov	r0, r3
 8001274:	f002 fbb2 	bl	80039dc <HAL_RCC_ClockConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800127e:	f000 fad9 	bl	8001834 <Error_Handler>
  }
}
 8001282:	bf00      	nop
 8001284:	3750      	adds	r7, #80	@ 0x50
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40007000 	.word	0x40007000

08001294 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <MX_I2C1_Init+0x50>)
 800129a:	4a13      	ldr	r2, [pc, #76]	@ (80012e8 <MX_I2C1_Init+0x54>)
 800129c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800129e:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <MX_I2C1_Init+0x50>)
 80012a0:	4a12      	ldr	r2, [pc, #72]	@ (80012ec <MX_I2C1_Init+0x58>)
 80012a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <MX_I2C1_Init+0x50>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <MX_I2C1_Init+0x50>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <MX_I2C1_Init+0x50>)
 80012b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <MX_I2C1_Init+0x50>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012be:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <MX_I2C1_Init+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c4:	4b07      	ldr	r3, [pc, #28]	@ (80012e4 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d0:	4804      	ldr	r0, [pc, #16]	@ (80012e4 <MX_I2C1_Init+0x50>)
 80012d2:	f001 f911 	bl	80024f8 <HAL_I2C_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012dc:	f000 faaa 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000218 	.word	0x20000218
 80012e8:	40005400 	.word	0x40005400
 80012ec:	000186a0 	.word	0x000186a0

080012f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <MX_I2C2_Init+0x50>)
 80012f6:	4a13      	ldr	r2, [pc, #76]	@ (8001344 <MX_I2C2_Init+0x54>)
 80012f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_I2C2_Init+0x50>)
 80012fc:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <MX_I2C2_Init+0x58>)
 80012fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001300:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MX_I2C2_Init+0x50>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_I2C2_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_I2C2_Init+0x50>)
 800130e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001312:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001314:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <MX_I2C2_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_I2C2_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001320:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <MX_I2C2_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_I2C2_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800132c:	4804      	ldr	r0, [pc, #16]	@ (8001340 <MX_I2C2_Init+0x50>)
 800132e:	f001 f8e3 	bl	80024f8 <HAL_I2C_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001338:	f000 fa7c 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000026c 	.word	0x2000026c
 8001344:	40005800 	.word	0x40005800
 8001348:	000186a0 	.word	0x000186a0

0800134c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <MX_I2C3_Init+0x50>)
 8001352:	4a13      	ldr	r2, [pc, #76]	@ (80013a0 <MX_I2C3_Init+0x54>)
 8001354:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001356:	4b11      	ldr	r3, [pc, #68]	@ (800139c <MX_I2C3_Init+0x50>)
 8001358:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <MX_I2C3_Init+0x58>)
 800135a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800135c:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <MX_I2C3_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001362:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <MX_I2C3_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001368:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <MX_I2C3_Init+0x50>)
 800136a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800136e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001370:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <MX_I2C3_Init+0x50>)
 8001372:	2200      	movs	r2, #0
 8001374:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001376:	4b09      	ldr	r3, [pc, #36]	@ (800139c <MX_I2C3_Init+0x50>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800137c:	4b07      	ldr	r3, [pc, #28]	@ (800139c <MX_I2C3_Init+0x50>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <MX_I2C3_Init+0x50>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001388:	4804      	ldr	r0, [pc, #16]	@ (800139c <MX_I2C3_Init+0x50>)
 800138a:	f001 f8b5 	bl	80024f8 <HAL_I2C_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001394:	f000 fa4e 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200002c0 	.word	0x200002c0
 80013a0:	40005c00 	.word	0x40005c00
 80013a4:	000186a0 	.word	0x000186a0

080013a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <MX_USART1_UART_Init+0x50>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013e0:	f002 ffc2 	bl	8004368 <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ea:	f000 fa23 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000314 	.word	0x20000314
 80013f8:	40011000 	.word	0x40011000

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	@ 0x28
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	4b35      	ldr	r3, [pc, #212]	@ (80014ec <MX_GPIO_Init+0xf0>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a34      	ldr	r2, [pc, #208]	@ (80014ec <MX_GPIO_Init+0xf0>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b32      	ldr	r3, [pc, #200]	@ (80014ec <MX_GPIO_Init+0xf0>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b2e      	ldr	r3, [pc, #184]	@ (80014ec <MX_GPIO_Init+0xf0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a2d      	ldr	r2, [pc, #180]	@ (80014ec <MX_GPIO_Init+0xf0>)
 8001438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b2b      	ldr	r3, [pc, #172]	@ (80014ec <MX_GPIO_Init+0xf0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b27      	ldr	r3, [pc, #156]	@ (80014ec <MX_GPIO_Init+0xf0>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	4a26      	ldr	r2, [pc, #152]	@ (80014ec <MX_GPIO_Init+0xf0>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4b24      	ldr	r3, [pc, #144]	@ (80014ec <MX_GPIO_Init+0xf0>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <MX_GPIO_Init+0xf0>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a1f      	ldr	r2, [pc, #124]	@ (80014ec <MX_GPIO_Init+0xf0>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <MX_GPIO_Init+0xf0>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2120      	movs	r1, #32
 8001486:	481a      	ldr	r0, [pc, #104]	@ (80014f0 <MX_GPIO_Init+0xf4>)
 8001488:	f001 f81c 	bl	80024c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800148c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001492:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	4814      	ldr	r0, [pc, #80]	@ (80014f4 <MX_GPIO_Init+0xf8>)
 80014a4:	f000 fe8a 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014a8:	230c      	movs	r3, #12
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014b8:	2307      	movs	r3, #7
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	480b      	ldr	r0, [pc, #44]	@ (80014f0 <MX_GPIO_Init+0xf4>)
 80014c4:	f000 fe7a 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014c8:	2320      	movs	r3, #32
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <MX_GPIO_Init+0xf4>)
 80014e0:	f000 fe6c 	bl	80021bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	@ 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020800 	.word	0x40020800

080014f8 <readth_handle>:

/* USER CODE BEGIN 4 */
static void readth_handle(void* parameters){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Task read temp and hum run");
 8001500:	480c      	ldr	r0, [pc, #48]	@ (8001534 <readth_handle+0x3c>)
 8001502:	f008 f809 	bl	8009518 <SEGGER_SYSVIEW_PrintfTarget>
	    f_temperature = SHT2x_GetTemperature(1);
 8001506:	2001      	movs	r0, #1
 8001508:	f008 faf2 	bl	8009af0 <SHT2x_GetTemperature>
 800150c:	eef0 7a40 	vmov.f32	s15, s0
 8001510:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <readth_handle+0x40>)
 8001512:	edc3 7a00 	vstr	s15, [r3]
	    f_humidity = SHT2x_GetRelativeHumidity(1);
 8001516:	2001      	movs	r0, #1
 8001518:	f008 fb30 	bl	8009b7c <SHT2x_GetRelativeHumidity>
 800151c:	eef0 7a40 	vmov.f32	s15, s0
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <readth_handle+0x44>)
 8001522:	edc3 7a00 	vstr	s15, [r3]
	 	vTaskDelay(pdMS_TO_TICKS(2000));
 8001526:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800152a:	f004 f965 	bl	80057f8 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Task read temp and hum run");
 800152e:	bf00      	nop
 8001530:	e7e6      	b.n	8001500 <readth_handle+0x8>
 8001532:	bf00      	nop
 8001534:	0800c96c 	.word	0x0800c96c
 8001538:	2000037c 	.word	0x2000037c
 800153c:	20000388 	.word	0x20000388

08001540 <read_time_handle>:
	}
}
static void read_time_handle(void* parameters){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Task read time run");
 8001548:	4805      	ldr	r0, [pc, #20]	@ (8001560 <read_time_handle+0x20>)
 800154a:	f007 ffe5 	bl	8009518 <SEGGER_SYSVIEW_PrintfTarget>
		rtc_read_time(&date_time);
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <read_time_handle+0x24>)
 8001550:	f008 f8aa 	bl	80096a8 <rtc_read_time>
	 	vTaskDelay(pdMS_TO_TICKS(800));
 8001554:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001558:	f004 f94e 	bl	80057f8 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Task read time run");
 800155c:	bf00      	nop
 800155e:	e7f3      	b.n	8001548 <read_time_handle+0x8>
 8001560:	0800c988 	.word	0x0800c988
 8001564:	2000035c 	.word	0x2000035c

08001568 <send_uart_handle>:
	}

}
static void send_uart_handle(void* parameters){
 8001568:	b5b0      	push	{r4, r5, r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af04      	add	r7, sp, #16
 800156e:	6078      	str	r0, [r7, #4]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Task uart run");
 8001570:	4810      	ldr	r0, [pc, #64]	@ (80015b4 <send_uart_handle+0x4c>)
 8001572:	f007 ffd1 	bl	8009518 <SEGGER_SYSVIEW_PrintfTarget>
		update_time();
 8001576:	f000 f87d 	bl	8001674 <update_time>
		print_cli("time: %s date: %s temperature: %.1f humidity: %.1f\n",Time,Calendar,f_temperature,f_humidity);
 800157a:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <send_uart_handle+0x50>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f83a 	bl	80005f8 <__aeabi_f2d>
 8001584:	4604      	mov	r4, r0
 8001586:	460d      	mov	r5, r1
 8001588:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <send_uart_handle+0x54>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff f833 	bl	80005f8 <__aeabi_f2d>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800159a:	e9cd 4500 	strd	r4, r5, [sp]
 800159e:	4a08      	ldr	r2, [pc, #32]	@ (80015c0 <send_uart_handle+0x58>)
 80015a0:	4908      	ldr	r1, [pc, #32]	@ (80015c4 <send_uart_handle+0x5c>)
 80015a2:	4809      	ldr	r0, [pc, #36]	@ (80015c8 <send_uart_handle+0x60>)
 80015a4:	f008 fa22 	bl	80099ec <print_cli>
	 	vTaskDelay(pdMS_TO_TICKS(5000));
 80015a8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80015ac:	f004 f924 	bl	80057f8 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Task uart run");
 80015b0:	bf00      	nop
 80015b2:	e7dd      	b.n	8001570 <send_uart_handle+0x8>
 80015b4:	0800c99c 	.word	0x0800c99c
 80015b8:	2000037c 	.word	0x2000037c
 80015bc:	20000388 	.word	0x20000388
 80015c0:	2000000c 	.word	0x2000000c
 80015c4:	20000000 	.word	0x20000000
 80015c8:	0800c9ac 	.word	0x0800c9ac

080015cc <display_lcd_handle>:
	}


}
static void display_lcd_handle(void* parameters){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	while(1){
	  SEGGER_SYSVIEW_PrintfTarget("Task display_lcd run");
 80015d4:	481f      	ldr	r0, [pc, #124]	@ (8001654 <display_lcd_handle+0x88>)
 80015d6:	f007 ff9f 	bl	8009518 <SEGGER_SYSVIEW_PrintfTarget>
	  update_time();
 80015da:	f000 f84b 	bl	8001674 <update_time>
	  CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	481d      	ldr	r0, [pc, #116]	@ (8001658 <display_lcd_handle+0x8c>)
 80015e4:	f008 f997 	bl	8009916 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(&LCD1,Time);
 80015e8:	491c      	ldr	r1, [pc, #112]	@ (800165c <display_lcd_handle+0x90>)
 80015ea:	481b      	ldr	r0, [pc, #108]	@ (8001658 <display_lcd_handle+0x8c>)
 80015ec:	f008 f9e6 	bl	80099bc <CLCD_I2C_WriteString>

	  CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2100      	movs	r1, #0
 80015f4:	4818      	ldr	r0, [pc, #96]	@ (8001658 <display_lcd_handle+0x8c>)
 80015f6:	f008 f98e 	bl	8009916 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(&LCD1,Calendar);
 80015fa:	4919      	ldr	r1, [pc, #100]	@ (8001660 <display_lcd_handle+0x94>)
 80015fc:	4816      	ldr	r0, [pc, #88]	@ (8001658 <display_lcd_handle+0x8c>)
 80015fe:	f008 f9dd 	bl	80099bc <CLCD_I2C_WriteString>

	  update_parameter_to_display(c_humidity,f_humidity);
 8001602:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <display_lcd_handle+0x98>)
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	eeb0 0a67 	vmov.f32	s0, s15
 800160c:	4816      	ldr	r0, [pc, #88]	@ (8001668 <display_lcd_handle+0x9c>)
 800160e:	f000 f8e9 	bl	80017e4 <update_parameter_to_display>
	  CLCD_I2C_SetCursor(&LCD1, 12, 1);
 8001612:	2201      	movs	r2, #1
 8001614:	210c      	movs	r1, #12
 8001616:	4810      	ldr	r0, [pc, #64]	@ (8001658 <display_lcd_handle+0x8c>)
 8001618:	f008 f97d 	bl	8009916 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(&LCD1, c_humidity);
 800161c:	4912      	ldr	r1, [pc, #72]	@ (8001668 <display_lcd_handle+0x9c>)
 800161e:	480e      	ldr	r0, [pc, #56]	@ (8001658 <display_lcd_handle+0x8c>)
 8001620:	f008 f9cc 	bl	80099bc <CLCD_I2C_WriteString>

	  update_parameter_to_display(c_temperature,f_temperature);
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <display_lcd_handle+0xa0>)
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	eeb0 0a67 	vmov.f32	s0, s15
 800162e:	4810      	ldr	r0, [pc, #64]	@ (8001670 <display_lcd_handle+0xa4>)
 8001630:	f000 f8d8 	bl	80017e4 <update_parameter_to_display>
	  CLCD_I2C_SetCursor(&LCD1, 12, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	210c      	movs	r1, #12
 8001638:	4807      	ldr	r0, [pc, #28]	@ (8001658 <display_lcd_handle+0x8c>)
 800163a:	f008 f96c 	bl	8009916 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(&LCD1, c_temperature);
 800163e:	490c      	ldr	r1, [pc, #48]	@ (8001670 <display_lcd_handle+0xa4>)
 8001640:	4805      	ldr	r0, [pc, #20]	@ (8001658 <display_lcd_handle+0x8c>)
 8001642:	f008 f9bb 	bl	80099bc <CLCD_I2C_WriteString>
	  vTaskDelay(pdMS_TO_TICKS(1000));
 8001646:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800164a:	f004 f8d5 	bl	80057f8 <vTaskDelay>
	  SEGGER_SYSVIEW_PrintfTarget("Task display_lcd run");
 800164e:	bf00      	nop
 8001650:	e7c0      	b.n	80015d4 <display_lcd_handle+0x8>
 8001652:	bf00      	nop
 8001654:	0800c9e0 	.word	0x0800c9e0
 8001658:	20000368 	.word	0x20000368
 800165c:	20000000 	.word	0x20000000
 8001660:	2000000c 	.word	0x2000000c
 8001664:	20000388 	.word	0x20000388
 8001668:	20000380 	.word	0x20000380
 800166c:	2000037c 	.word	0x2000037c
 8001670:	20000374 	.word	0x20000374

08001674 <update_time>:
	}
}

void update_time(){
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  Time[7]     = date_time.sec % 10 + 48; // + 48 because convert from int to char
 8001678:	4b56      	ldr	r3, [pc, #344]	@ (80017d4 <update_time+0x160>)
 800167a:	789a      	ldrb	r2, [r3, #2]
 800167c:	4b56      	ldr	r3, [pc, #344]	@ (80017d8 <update_time+0x164>)
 800167e:	fba3 1302 	umull	r1, r3, r3, r2
 8001682:	08d9      	lsrs	r1, r3, #3
 8001684:	460b      	mov	r3, r1
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	3330      	adds	r3, #48	@ 0x30
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b51      	ldr	r3, [pc, #324]	@ (80017dc <update_time+0x168>)
 8001696:	71da      	strb	r2, [r3, #7]
  Time[6]     = date_time.sec / 10 + 48;
 8001698:	4b4e      	ldr	r3, [pc, #312]	@ (80017d4 <update_time+0x160>)
 800169a:	789b      	ldrb	r3, [r3, #2]
 800169c:	4a4e      	ldr	r2, [pc, #312]	@ (80017d8 <update_time+0x164>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	08db      	lsrs	r3, r3, #3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	3330      	adds	r3, #48	@ 0x30
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b4c      	ldr	r3, [pc, #304]	@ (80017dc <update_time+0x168>)
 80016ac:	719a      	strb	r2, [r3, #6]
  Time[4]     = date_time.min % 10 + 48;
 80016ae:	4b49      	ldr	r3, [pc, #292]	@ (80017d4 <update_time+0x160>)
 80016b0:	785a      	ldrb	r2, [r3, #1]
 80016b2:	4b49      	ldr	r3, [pc, #292]	@ (80017d8 <update_time+0x164>)
 80016b4:	fba3 1302 	umull	r1, r3, r3, r2
 80016b8:	08d9      	lsrs	r1, r3, #3
 80016ba:	460b      	mov	r3, r1
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	3330      	adds	r3, #48	@ 0x30
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b44      	ldr	r3, [pc, #272]	@ (80017dc <update_time+0x168>)
 80016cc:	711a      	strb	r2, [r3, #4]
  Time[3]     = date_time.min / 10 + 48;
 80016ce:	4b41      	ldr	r3, [pc, #260]	@ (80017d4 <update_time+0x160>)
 80016d0:	785b      	ldrb	r3, [r3, #1]
 80016d2:	4a41      	ldr	r2, [pc, #260]	@ (80017d8 <update_time+0x164>)
 80016d4:	fba2 2303 	umull	r2, r3, r2, r3
 80016d8:	08db      	lsrs	r3, r3, #3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	3330      	adds	r3, #48	@ 0x30
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	4b3e      	ldr	r3, [pc, #248]	@ (80017dc <update_time+0x168>)
 80016e2:	70da      	strb	r2, [r3, #3]
  Time[1]     = date_time.hour   % 10 + 48;
 80016e4:	4b3b      	ldr	r3, [pc, #236]	@ (80017d4 <update_time+0x160>)
 80016e6:	781a      	ldrb	r2, [r3, #0]
 80016e8:	4b3b      	ldr	r3, [pc, #236]	@ (80017d8 <update_time+0x164>)
 80016ea:	fba3 1302 	umull	r1, r3, r3, r2
 80016ee:	08d9      	lsrs	r1, r3, #3
 80016f0:	460b      	mov	r3, r1
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	3330      	adds	r3, #48	@ 0x30
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b36      	ldr	r3, [pc, #216]	@ (80017dc <update_time+0x168>)
 8001702:	705a      	strb	r2, [r3, #1]
  Time[0]     = date_time.hour   / 10 + 48;
 8001704:	4b33      	ldr	r3, [pc, #204]	@ (80017d4 <update_time+0x160>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4a33      	ldr	r2, [pc, #204]	@ (80017d8 <update_time+0x164>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	08db      	lsrs	r3, r3, #3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	3330      	adds	r3, #48	@ 0x30
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b31      	ldr	r3, [pc, #196]	@ (80017dc <update_time+0x168>)
 8001718:	701a      	strb	r2, [r3, #0]
  Time[8]	  = '\0';
 800171a:	4b30      	ldr	r3, [pc, #192]	@ (80017dc <update_time+0x168>)
 800171c:	2200      	movs	r2, #0
 800171e:	721a      	strb	r2, [r3, #8]
  Calendar[9] = date_time.year   % 10 + 48;
 8001720:	4b2c      	ldr	r3, [pc, #176]	@ (80017d4 <update_time+0x160>)
 8001722:	799a      	ldrb	r2, [r3, #6]
 8001724:	4b2c      	ldr	r3, [pc, #176]	@ (80017d8 <update_time+0x164>)
 8001726:	fba3 1302 	umull	r1, r3, r3, r2
 800172a:	08d9      	lsrs	r1, r3, #3
 800172c:	460b      	mov	r3, r1
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	3330      	adds	r3, #48	@ 0x30
 800173a:	b2da      	uxtb	r2, r3
 800173c:	4b28      	ldr	r3, [pc, #160]	@ (80017e0 <update_time+0x16c>)
 800173e:	725a      	strb	r2, [r3, #9]
  Calendar[8] = date_time.year   / 10 + 48;
 8001740:	4b24      	ldr	r3, [pc, #144]	@ (80017d4 <update_time+0x160>)
 8001742:	799b      	ldrb	r3, [r3, #6]
 8001744:	4a24      	ldr	r2, [pc, #144]	@ (80017d8 <update_time+0x164>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	08db      	lsrs	r3, r3, #3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	3330      	adds	r3, #48	@ 0x30
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4b23      	ldr	r3, [pc, #140]	@ (80017e0 <update_time+0x16c>)
 8001754:	721a      	strb	r2, [r3, #8]
  Calendar[4] = date_time.mon  % 10 + 48;
 8001756:	4b1f      	ldr	r3, [pc, #124]	@ (80017d4 <update_time+0x160>)
 8001758:	795a      	ldrb	r2, [r3, #5]
 800175a:	4b1f      	ldr	r3, [pc, #124]	@ (80017d8 <update_time+0x164>)
 800175c:	fba3 1302 	umull	r1, r3, r3, r2
 8001760:	08d9      	lsrs	r1, r3, #3
 8001762:	460b      	mov	r3, r1
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	3330      	adds	r3, #48	@ 0x30
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <update_time+0x16c>)
 8001774:	711a      	strb	r2, [r3, #4]
  Calendar[3] = date_time.mon  / 10 + 48;
 8001776:	4b17      	ldr	r3, [pc, #92]	@ (80017d4 <update_time+0x160>)
 8001778:	795b      	ldrb	r3, [r3, #5]
 800177a:	4a17      	ldr	r2, [pc, #92]	@ (80017d8 <update_time+0x164>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	08db      	lsrs	r3, r3, #3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	3330      	adds	r3, #48	@ 0x30
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <update_time+0x16c>)
 800178a:	70da      	strb	r2, [r3, #3]
  Calendar[1] = date_time.date   % 10 + 48;
 800178c:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <update_time+0x160>)
 800178e:	791a      	ldrb	r2, [r3, #4]
 8001790:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <update_time+0x164>)
 8001792:	fba3 1302 	umull	r1, r3, r3, r2
 8001796:	08d9      	lsrs	r1, r3, #3
 8001798:	460b      	mov	r3, r1
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	3330      	adds	r3, #48	@ 0x30
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <update_time+0x16c>)
 80017aa:	705a      	strb	r2, [r3, #1]
  Calendar[0] = date_time.date   / 10 + 48;
 80017ac:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <update_time+0x160>)
 80017ae:	791b      	ldrb	r3, [r3, #4]
 80017b0:	4a09      	ldr	r2, [pc, #36]	@ (80017d8 <update_time+0x164>)
 80017b2:	fba2 2303 	umull	r2, r3, r2, r3
 80017b6:	08db      	lsrs	r3, r3, #3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	3330      	adds	r3, #48	@ 0x30
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <update_time+0x16c>)
 80017c0:	701a      	strb	r2, [r3, #0]
  Calendar[10]= '\0';
 80017c2:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <update_time+0x16c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	729a      	strb	r2, [r3, #10]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	2000035c 	.word	0x2000035c
 80017d8:	cccccccd 	.word	0xcccccccd
 80017dc:	20000000 	.word	0x20000000
 80017e0:	2000000c 	.word	0x2000000c

080017e4 <update_parameter_to_display>:

void update_parameter_to_display(char *a , float b) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	ed87 0a00 	vstr	s0, [r7]
    // update from float to char
    sprintf(a, "%.1f", b);
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	f7fe ff01 	bl	80005f8 <__aeabi_f2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4904      	ldr	r1, [pc, #16]	@ (800180c <update_parameter_to_display+0x28>)
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f008 ff3f 	bl	800a680 <siprintf>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	0800c9f8 	.word	0x0800c9f8

08001810 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a04      	ldr	r2, [pc, #16]	@ (8001830 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d101      	bne.n	8001826 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001822:	f000 fb13 	bl	8001e4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40010000 	.word	0x40010000

08001834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001838:	b672      	cpsid	i
}
 800183a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <Error_Handler+0x8>

08001840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	4b10      	ldr	r3, [pc, #64]	@ (800188c <HAL_MspInit+0x4c>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184e:	4a0f      	ldr	r2, [pc, #60]	@ (800188c <HAL_MspInit+0x4c>)
 8001850:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001854:	6453      	str	r3, [r2, #68]	@ 0x44
 8001856:	4b0d      	ldr	r3, [pc, #52]	@ (800188c <HAL_MspInit+0x4c>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <HAL_MspInit+0x4c>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	4a08      	ldr	r2, [pc, #32]	@ (800188c <HAL_MspInit+0x4c>)
 800186c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001870:	6413      	str	r3, [r2, #64]	@ 0x40
 8001872:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_MspInit+0x4c>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800187e:	f004 fe11 	bl	80064a4 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800

08001890 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08e      	sub	sp, #56	@ 0x38
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a63      	ldr	r2, [pc, #396]	@ (8001a3c <HAL_I2C_MspInit+0x1ac>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d12c      	bne.n	800190c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
 80018b6:	4b62      	ldr	r3, [pc, #392]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a61      	ldr	r2, [pc, #388]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	623b      	str	r3, [r7, #32]
 80018cc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018ce:	23c0      	movs	r3, #192	@ 0xc0
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d2:	2312      	movs	r3, #18
 80018d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018de:	2304      	movs	r3, #4
 80018e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e6:	4619      	mov	r1, r3
 80018e8:	4856      	ldr	r0, [pc, #344]	@ (8001a44 <HAL_I2C_MspInit+0x1b4>)
 80018ea:	f000 fc67 	bl	80021bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	4b53      	ldr	r3, [pc, #332]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	4a52      	ldr	r2, [pc, #328]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 80018f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fe:	4b50      	ldr	r3, [pc, #320]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800190a:	e093      	b.n	8001a34 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a4d      	ldr	r2, [pc, #308]	@ (8001a48 <HAL_I2C_MspInit+0x1b8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d13d      	bne.n	8001992 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	4b49      	ldr	r3, [pc, #292]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a48      	ldr	r2, [pc, #288]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b46      	ldr	r3, [pc, #280]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	61bb      	str	r3, [r7, #24]
 8001930:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001938:	2312      	movs	r3, #18
 800193a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001944:	2304      	movs	r3, #4
 8001946:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800194c:	4619      	mov	r1, r3
 800194e:	483d      	ldr	r0, [pc, #244]	@ (8001a44 <HAL_I2C_MspInit+0x1b4>)
 8001950:	f000 fc34 	bl	80021bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001954:	2308      	movs	r3, #8
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001958:	2312      	movs	r3, #18
 800195a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001964:	2309      	movs	r3, #9
 8001966:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196c:	4619      	mov	r1, r3
 800196e:	4835      	ldr	r0, [pc, #212]	@ (8001a44 <HAL_I2C_MspInit+0x1b4>)
 8001970:	f000 fc24 	bl	80021bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	4b31      	ldr	r3, [pc, #196]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	4a30      	ldr	r2, [pc, #192]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 800197e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001982:	6413      	str	r3, [r2, #64]	@ 0x40
 8001984:	4b2e      	ldr	r3, [pc, #184]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 8001986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001988:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697b      	ldr	r3, [r7, #20]
}
 8001990:	e050      	b.n	8001a34 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a2d      	ldr	r2, [pc, #180]	@ (8001a4c <HAL_I2C_MspInit+0x1bc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d14b      	bne.n	8001a34 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	4b27      	ldr	r3, [pc, #156]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 80019a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a4:	4a26      	ldr	r2, [pc, #152]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 80019a6:	f043 0304 	orr.w	r3, r3, #4
 80019aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ac:	4b24      	ldr	r3, [pc, #144]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	4b20      	ldr	r3, [pc, #128]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 80019be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 80019ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019da:	2312      	movs	r3, #18
 80019dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e2:	2303      	movs	r3, #3
 80019e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019e6:	2304      	movs	r3, #4
 80019e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ee:	4619      	mov	r1, r3
 80019f0:	4817      	ldr	r0, [pc, #92]	@ (8001a50 <HAL_I2C_MspInit+0x1c0>)
 80019f2:	f000 fbe3 	bl	80021bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019fc:	2312      	movs	r3, #18
 80019fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a08:	2304      	movs	r3, #4
 8001a0a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a10:	4619      	mov	r1, r3
 8001a12:	4810      	ldr	r0, [pc, #64]	@ (8001a54 <HAL_I2C_MspInit+0x1c4>)
 8001a14:	f000 fbd2 	bl	80021bc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	4a07      	ldr	r2, [pc, #28]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 8001a22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <HAL_I2C_MspInit+0x1b0>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
}
 8001a34:	bf00      	nop
 8001a36:	3738      	adds	r7, #56	@ 0x38
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40005400 	.word	0x40005400
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020400 	.word	0x40020400
 8001a48:	40005800 	.word	0x40005800
 8001a4c:	40005c00 	.word	0x40005c00
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020000 	.word	0x40020000

08001a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	@ 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1d      	ldr	r2, [pc, #116]	@ (8001aec <HAL_UART_MspInit+0x94>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d134      	bne.n	8001ae4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001af0 <HAL_UART_MspInit+0x98>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	4a1b      	ldr	r2, [pc, #108]	@ (8001af0 <HAL_UART_MspInit+0x98>)
 8001a84:	f043 0310 	orr.w	r3, r3, #16
 8001a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a8a:	4b19      	ldr	r3, [pc, #100]	@ (8001af0 <HAL_UART_MspInit+0x98>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <HAL_UART_MspInit+0x98>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	4a14      	ldr	r2, [pc, #80]	@ (8001af0 <HAL_UART_MspInit+0x98>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa6:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <HAL_UART_MspInit+0x98>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ab2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	4809      	ldr	r0, [pc, #36]	@ (8001af4 <HAL_UART_MspInit+0x9c>)
 8001ad0:	f000 fb74 	bl	80021bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2025      	movs	r0, #37	@ 0x25
 8001ada:	f000 fab3 	bl	8002044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ade:	2025      	movs	r0, #37	@ 0x25
 8001ae0:	f000 facc 	bl	800207c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3728      	adds	r7, #40	@ 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40011000 	.word	0x40011000
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020000 	.word	0x40020000

08001af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	@ 0x30
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc8 <HAL_InitTick+0xd0>)
 8001b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b10:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc8 <HAL_InitTick+0xd0>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b18:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc8 <HAL_InitTick+0xd0>)
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b24:	f107 020c 	add.w	r2, r7, #12
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f002 f974 	bl	8003e1c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b34:	f002 f95e 	bl	8003df4 <HAL_RCC_GetPCLK2Freq>
 8001b38:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b3c:	4a23      	ldr	r2, [pc, #140]	@ (8001bcc <HAL_InitTick+0xd4>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	0c9b      	lsrs	r3, r3, #18
 8001b44:	3b01      	subs	r3, #1
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b48:	4b21      	ldr	r3, [pc, #132]	@ (8001bd0 <HAL_InitTick+0xd8>)
 8001b4a:	4a22      	ldr	r2, [pc, #136]	@ (8001bd4 <HAL_InitTick+0xdc>)
 8001b4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b4e:	4b20      	ldr	r3, [pc, #128]	@ (8001bd0 <HAL_InitTick+0xd8>)
 8001b50:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b54:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b56:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd0 <HAL_InitTick+0xd8>)
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <HAL_InitTick+0xd8>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b62:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <HAL_InitTick+0xd8>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b68:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <HAL_InitTick+0xd8>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001b6e:	4818      	ldr	r0, [pc, #96]	@ (8001bd0 <HAL_InitTick+0xd8>)
 8001b70:	f002 f986 	bl	8003e80 <HAL_TIM_Base_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d11b      	bne.n	8001bba <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b82:	4813      	ldr	r0, [pc, #76]	@ (8001bd0 <HAL_InitTick+0xd8>)
 8001b84:	f002 f9d6 	bl	8003f34 <HAL_TIM_Base_Start_IT>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d111      	bne.n	8001bba <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b96:	2019      	movs	r0, #25
 8001b98:	f000 fa70 	bl	800207c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b0f      	cmp	r3, #15
 8001ba0:	d808      	bhi.n	8001bb4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	2019      	movs	r0, #25
 8001ba8:	f000 fa4c 	bl	8002044 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bac:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <HAL_InitTick+0xe0>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e002      	b.n	8001bba <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3730      	adds	r7, #48	@ 0x30
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	431bde83 	.word	0x431bde83
 8001bd0:	2000038c 	.word	0x2000038c
 8001bd4:	40010000 	.word	0x40010000
 8001bd8:	2000001c 	.word	0x2000001c

08001bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <NMI_Handler+0x4>

08001be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <HardFault_Handler+0x4>

08001bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <MemManage_Handler+0x4>

08001bf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c18:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c1a:	f002 f9ed 	bl	8003ff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2000038c 	.word	0x2000038c

08001c28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c2c:	4802      	ldr	r0, [pc, #8]	@ (8001c38 <USART1_IRQHandler+0x10>)
 8001c2e:	f002 fc77 	bl	8004520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000314 	.word	0x20000314

08001c3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return 1;
 8001c40:	2301      	movs	r3, #1
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_kill>:

int _kill(int pid, int sig)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c56:	f008 fde7 	bl	800a828 <__errno>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2216      	movs	r2, #22
 8001c5e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_exit>:

void _exit (int status)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ffe7 	bl	8001c4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c7e:	bf00      	nop
 8001c80:	e7fd      	b.n	8001c7e <_exit+0x12>

08001c82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	e00a      	b.n	8001caa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c94:	f3af 8000 	nop.w
 8001c98:	4601      	mov	r1, r0
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	60ba      	str	r2, [r7, #8]
 8001ca0:	b2ca      	uxtb	r2, r1
 8001ca2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	dbf0      	blt.n	8001c94 <_read+0x12>
  }

  return len;
 8001cb2:	687b      	ldr	r3, [r7, #4]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <_close>:
  }
  return len;
}

int _close(int file)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ce4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <_isatty>:

int _isatty(int file)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cfc:	2301      	movs	r3, #1
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d2c:	4a14      	ldr	r2, [pc, #80]	@ (8001d80 <_sbrk+0x5c>)
 8001d2e:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <_sbrk+0x60>)
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d38:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <_sbrk+0x64>)
 8001d42:	4a12      	ldr	r2, [pc, #72]	@ (8001d8c <_sbrk+0x68>)
 8001d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d46:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d207      	bcs.n	8001d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d54:	f008 fd68 	bl	800a828 <__errno>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	e009      	b.n	8001d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d64:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <_sbrk+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6a:	4b07      	ldr	r3, [pc, #28]	@ (8001d88 <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a05      	ldr	r2, [pc, #20]	@ (8001d88 <_sbrk+0x64>)
 8001d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d76:	68fb      	ldr	r3, [r7, #12]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20018000 	.word	0x20018000
 8001d84:	00000400 	.word	0x00000400
 8001d88:	200003d4 	.word	0x200003d4
 8001d8c:	200148d8 	.word	0x200148d8

08001d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d94:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <SystemInit+0x20>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d9a:	4a05      	ldr	r2, [pc, #20]	@ (8001db0 <SystemInit+0x20>)
 8001d9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001da0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001db4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001db8:	f7ff ffea 	bl	8001d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dbc:	480c      	ldr	r0, [pc, #48]	@ (8001df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dbe:	490d      	ldr	r1, [pc, #52]	@ (8001df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001de2:	f008 fd27 	bl	800a834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de6:	f7ff f8ff 	bl	8000fe8 <main>
  bx  lr    
 8001dea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df4:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001df8:	0800cea8 	.word	0x0800cea8
  ldr r2, =_sbss
 8001dfc:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001e00:	200148d8 	.word	0x200148d8

08001e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <ADC_IRQHandler>
	...

08001e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e48 <HAL_Init+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0d      	ldr	r2, [pc, #52]	@ (8001e48 <HAL_Init+0x40>)
 8001e12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e18:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <HAL_Init+0x40>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <HAL_Init+0x40>)
 8001e1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e24:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <HAL_Init+0x40>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a07      	ldr	r2, [pc, #28]	@ (8001e48 <HAL_Init+0x40>)
 8001e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e30:	2003      	movs	r0, #3
 8001e32:	f000 f8fc 	bl	800202e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e36:	200f      	movs	r0, #15
 8001e38:	f7ff fe5e 	bl	8001af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e3c:	f7ff fd00 	bl	8001840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023c00 	.word	0x40023c00

08001e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e50:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_IncTick+0x20>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <HAL_IncTick+0x24>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a04      	ldr	r2, [pc, #16]	@ (8001e70 <HAL_IncTick+0x24>)
 8001e5e:	6013      	str	r3, [r2, #0]
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000020 	.word	0x20000020
 8001e70:	200003d8 	.word	0x200003d8

08001e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return uwTick;
 8001e78:	4b03      	ldr	r3, [pc, #12]	@ (8001e88 <HAL_GetTick+0x14>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	200003d8 	.word	0x200003d8

08001e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e94:	f7ff ffee 	bl	8001e74 <HAL_GetTick>
 8001e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea4:	d005      	beq.n	8001eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <HAL_Delay+0x44>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4413      	add	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eb2:	bf00      	nop
 8001eb4:	f7ff ffde 	bl	8001e74 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d8f7      	bhi.n	8001eb4 <HAL_Delay+0x28>
  {
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000020 	.word	0x20000020

08001ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001efc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f06:	4a04      	ldr	r2, [pc, #16]	@ (8001f18 <__NVIC_SetPriorityGrouping+0x44>)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	60d3      	str	r3, [r2, #12]
}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f20:	4b04      	ldr	r3, [pc, #16]	@ (8001f34 <__NVIC_GetPriorityGrouping+0x18>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	f003 0307 	and.w	r3, r3, #7
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	db0b      	blt.n	8001f62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	f003 021f 	and.w	r2, r3, #31
 8001f50:	4907      	ldr	r1, [pc, #28]	@ (8001f70 <__NVIC_EnableIRQ+0x38>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	2001      	movs	r0, #1
 8001f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000e100 	.word	0xe000e100

08001f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	6039      	str	r1, [r7, #0]
 8001f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	db0a      	blt.n	8001f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	490c      	ldr	r1, [pc, #48]	@ (8001fc0 <__NVIC_SetPriority+0x4c>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	0112      	lsls	r2, r2, #4
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	440b      	add	r3, r1
 8001f98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f9c:	e00a      	b.n	8001fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4908      	ldr	r1, [pc, #32]	@ (8001fc4 <__NVIC_SetPriority+0x50>)
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	3b04      	subs	r3, #4
 8001fac:	0112      	lsls	r2, r2, #4
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	761a      	strb	r2, [r3, #24]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000e100 	.word	0xe000e100
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	@ 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f1c3 0307 	rsb	r3, r3, #7
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	bf28      	it	cs
 8001fe6:	2304      	movcs	r3, #4
 8001fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3304      	adds	r3, #4
 8001fee:	2b06      	cmp	r3, #6
 8001ff0:	d902      	bls.n	8001ff8 <NVIC_EncodePriority+0x30>
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3b03      	subs	r3, #3
 8001ff6:	e000      	b.n	8001ffa <NVIC_EncodePriority+0x32>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43da      	mvns	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	401a      	ands	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002010:	f04f 31ff 	mov.w	r1, #4294967295
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa01 f303 	lsl.w	r3, r1, r3
 800201a:	43d9      	mvns	r1, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	4313      	orrs	r3, r2
         );
}
 8002022:	4618      	mov	r0, r3
 8002024:	3724      	adds	r7, #36	@ 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff ff4c 	bl	8001ed4 <__NVIC_SetPriorityGrouping>
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002056:	f7ff ff61 	bl	8001f1c <__NVIC_GetPriorityGrouping>
 800205a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	6978      	ldr	r0, [r7, #20]
 8002062:	f7ff ffb1 	bl	8001fc8 <NVIC_EncodePriority>
 8002066:	4602      	mov	r2, r0
 8002068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206c:	4611      	mov	r1, r2
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ff80 	bl	8001f74 <__NVIC_SetPriority>
}
 8002074:	bf00      	nop
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff ff54 	bl	8001f38 <__NVIC_EnableIRQ>
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020a6:	f7ff fee5 	bl	8001e74 <HAL_GetTick>
 80020aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d008      	beq.n	80020ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2280      	movs	r2, #128	@ 0x80
 80020bc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e052      	b.n	8002170 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0216 	bic.w	r2, r2, #22
 80020d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d103      	bne.n	80020fa <HAL_DMA_Abort+0x62>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d007      	beq.n	800210a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0208 	bic.w	r2, r2, #8
 8002108:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0201 	bic.w	r2, r2, #1
 8002118:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800211a:	e013      	b.n	8002144 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800211c:	f7ff feaa 	bl	8001e74 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b05      	cmp	r3, #5
 8002128:	d90c      	bls.n	8002144 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2220      	movs	r2, #32
 800212e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2203      	movs	r2, #3
 8002134:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e015      	b.n	8002170 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1e4      	bne.n	800211c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002156:	223f      	movs	r2, #63	@ 0x3f
 8002158:	409a      	lsls	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d004      	beq.n	8002196 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2280      	movs	r2, #128	@ 0x80
 8002190:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e00c      	b.n	80021b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2205      	movs	r2, #5
 800219a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021bc:	b480      	push	{r7}
 80021be:	b089      	sub	sp, #36	@ 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	e159      	b.n	800248c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d8:	2201      	movs	r2, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	f040 8148 	bne.w	8002486 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d005      	beq.n	800220e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220a:	2b02      	cmp	r3, #2
 800220c:	d130      	bne.n	8002270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	2203      	movs	r2, #3
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002244:	2201      	movs	r2, #1
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	f003 0201 	and.w	r2, r3, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	2b03      	cmp	r3, #3
 800227a:	d017      	beq.n	80022ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	2203      	movs	r2, #3
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d123      	bne.n	8002300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	08da      	lsrs	r2, r3, #3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3208      	adds	r2, #8
 80022c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	220f      	movs	r2, #15
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	08da      	lsrs	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3208      	adds	r2, #8
 80022fa:	69b9      	ldr	r1, [r7, #24]
 80022fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0203 	and.w	r2, r3, #3
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80a2 	beq.w	8002486 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b57      	ldr	r3, [pc, #348]	@ (80024a4 <HAL_GPIO_Init+0x2e8>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234a:	4a56      	ldr	r2, [pc, #344]	@ (80024a4 <HAL_GPIO_Init+0x2e8>)
 800234c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002350:	6453      	str	r3, [r2, #68]	@ 0x44
 8002352:	4b54      	ldr	r3, [pc, #336]	@ (80024a4 <HAL_GPIO_Init+0x2e8>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800235e:	4a52      	ldr	r2, [pc, #328]	@ (80024a8 <HAL_GPIO_Init+0x2ec>)
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	3302      	adds	r3, #2
 8002366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	220f      	movs	r2, #15
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a49      	ldr	r2, [pc, #292]	@ (80024ac <HAL_GPIO_Init+0x2f0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d019      	beq.n	80023be <HAL_GPIO_Init+0x202>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a48      	ldr	r2, [pc, #288]	@ (80024b0 <HAL_GPIO_Init+0x2f4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d013      	beq.n	80023ba <HAL_GPIO_Init+0x1fe>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a47      	ldr	r2, [pc, #284]	@ (80024b4 <HAL_GPIO_Init+0x2f8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00d      	beq.n	80023b6 <HAL_GPIO_Init+0x1fa>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a46      	ldr	r2, [pc, #280]	@ (80024b8 <HAL_GPIO_Init+0x2fc>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d007      	beq.n	80023b2 <HAL_GPIO_Init+0x1f6>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a45      	ldr	r2, [pc, #276]	@ (80024bc <HAL_GPIO_Init+0x300>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d101      	bne.n	80023ae <HAL_GPIO_Init+0x1f2>
 80023aa:	2304      	movs	r3, #4
 80023ac:	e008      	b.n	80023c0 <HAL_GPIO_Init+0x204>
 80023ae:	2307      	movs	r3, #7
 80023b0:	e006      	b.n	80023c0 <HAL_GPIO_Init+0x204>
 80023b2:	2303      	movs	r3, #3
 80023b4:	e004      	b.n	80023c0 <HAL_GPIO_Init+0x204>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e002      	b.n	80023c0 <HAL_GPIO_Init+0x204>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_GPIO_Init+0x204>
 80023be:	2300      	movs	r3, #0
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	f002 0203 	and.w	r2, r2, #3
 80023c6:	0092      	lsls	r2, r2, #2
 80023c8:	4093      	lsls	r3, r2
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d0:	4935      	ldr	r1, [pc, #212]	@ (80024a8 <HAL_GPIO_Init+0x2ec>)
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	3302      	adds	r3, #2
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023de:	4b38      	ldr	r3, [pc, #224]	@ (80024c0 <HAL_GPIO_Init+0x304>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002402:	4a2f      	ldr	r2, [pc, #188]	@ (80024c0 <HAL_GPIO_Init+0x304>)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002408:	4b2d      	ldr	r3, [pc, #180]	@ (80024c0 <HAL_GPIO_Init+0x304>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800242c:	4a24      	ldr	r2, [pc, #144]	@ (80024c0 <HAL_GPIO_Init+0x304>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002432:	4b23      	ldr	r3, [pc, #140]	@ (80024c0 <HAL_GPIO_Init+0x304>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002456:	4a1a      	ldr	r2, [pc, #104]	@ (80024c0 <HAL_GPIO_Init+0x304>)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800245c:	4b18      	ldr	r3, [pc, #96]	@ (80024c0 <HAL_GPIO_Init+0x304>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002480:	4a0f      	ldr	r2, [pc, #60]	@ (80024c0 <HAL_GPIO_Init+0x304>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3301      	adds	r3, #1
 800248a:	61fb      	str	r3, [r7, #28]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	2b0f      	cmp	r3, #15
 8002490:	f67f aea2 	bls.w	80021d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	3724      	adds	r7, #36	@ 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40013800 	.word	0x40013800
 80024ac:	40020000 	.word	0x40020000
 80024b0:	40020400 	.word	0x40020400
 80024b4:	40020800 	.word	0x40020800
 80024b8:	40020c00 	.word	0x40020c00
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40013c00 	.word	0x40013c00

080024c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	807b      	strh	r3, [r7, #2]
 80024d0:	4613      	mov	r3, r2
 80024d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d4:	787b      	ldrb	r3, [r7, #1]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024e0:	e003      	b.n	80024ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024e2:	887b      	ldrh	r3, [r7, #2]
 80024e4:	041a      	lsls	r2, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	619a      	str	r2, [r3, #24]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e12b      	b.n	8002762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff f9b6 	bl	8001890 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2224      	movs	r2, #36	@ 0x24
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800254a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800255a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800255c:	f001 fc36 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
 8002560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4a81      	ldr	r2, [pc, #516]	@ (800276c <HAL_I2C_Init+0x274>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d807      	bhi.n	800257c <HAL_I2C_Init+0x84>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a80      	ldr	r2, [pc, #512]	@ (8002770 <HAL_I2C_Init+0x278>)
 8002570:	4293      	cmp	r3, r2
 8002572:	bf94      	ite	ls
 8002574:	2301      	movls	r3, #1
 8002576:	2300      	movhi	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e006      	b.n	800258a <HAL_I2C_Init+0x92>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4a7d      	ldr	r2, [pc, #500]	@ (8002774 <HAL_I2C_Init+0x27c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	bf94      	ite	ls
 8002584:	2301      	movls	r3, #1
 8002586:	2300      	movhi	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0e7      	b.n	8002762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4a78      	ldr	r2, [pc, #480]	@ (8002778 <HAL_I2C_Init+0x280>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	0c9b      	lsrs	r3, r3, #18
 800259c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a6a      	ldr	r2, [pc, #424]	@ (800276c <HAL_I2C_Init+0x274>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d802      	bhi.n	80025cc <HAL_I2C_Init+0xd4>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3301      	adds	r3, #1
 80025ca:	e009      	b.n	80025e0 <HAL_I2C_Init+0xe8>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025d2:	fb02 f303 	mul.w	r3, r2, r3
 80025d6:	4a69      	ldr	r2, [pc, #420]	@ (800277c <HAL_I2C_Init+0x284>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	3301      	adds	r3, #1
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	430b      	orrs	r3, r1
 80025e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	495c      	ldr	r1, [pc, #368]	@ (800276c <HAL_I2C_Init+0x274>)
 80025fc:	428b      	cmp	r3, r1
 80025fe:	d819      	bhi.n	8002634 <HAL_I2C_Init+0x13c>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e59      	subs	r1, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fbb1 f3f3 	udiv	r3, r1, r3
 800260e:	1c59      	adds	r1, r3, #1
 8002610:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002614:	400b      	ands	r3, r1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_I2C_Init+0x138>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1e59      	subs	r1, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fbb1 f3f3 	udiv	r3, r1, r3
 8002628:	3301      	adds	r3, #1
 800262a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262e:	e051      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 8002630:	2304      	movs	r3, #4
 8002632:	e04f      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d111      	bne.n	8002660 <HAL_I2C_Init+0x168>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1e58      	subs	r0, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	440b      	add	r3, r1
 800264a:	fbb0 f3f3 	udiv	r3, r0, r3
 800264e:	3301      	adds	r3, #1
 8002650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	e012      	b.n	8002686 <HAL_I2C_Init+0x18e>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1e58      	subs	r0, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	0099      	lsls	r1, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	fbb0 f3f3 	udiv	r3, r0, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Init+0x196>
 800268a:	2301      	movs	r3, #1
 800268c:	e022      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10e      	bne.n	80026b4 <HAL_I2C_Init+0x1bc>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1e58      	subs	r0, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	440b      	add	r3, r1
 80026a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026b2:	e00f      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e58      	subs	r0, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	0099      	lsls	r1, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ca:	3301      	adds	r3, #1
 80026cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	6809      	ldr	r1, [r1, #0]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69da      	ldr	r2, [r3, #28]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002702:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6911      	ldr	r1, [r2, #16]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68d2      	ldr	r2, [r2, #12]
 800270e:	4311      	orrs	r1, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	430b      	orrs	r3, r1
 8002716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	000186a0 	.word	0x000186a0
 8002770:	001e847f 	.word	0x001e847f
 8002774:	003d08ff 	.word	0x003d08ff
 8002778:	431bde83 	.word	0x431bde83
 800277c:	10624dd3 	.word	0x10624dd3

08002780 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af02      	add	r7, sp, #8
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	461a      	mov	r2, r3
 800278c:	460b      	mov	r3, r1
 800278e:	817b      	strh	r3, [r7, #10]
 8002790:	4613      	mov	r3, r2
 8002792:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002794:	f7ff fb6e 	bl	8001e74 <HAL_GetTick>
 8002798:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	f040 80e0 	bne.w	8002968 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2319      	movs	r3, #25
 80027ae:	2201      	movs	r2, #1
 80027b0:	4970      	ldr	r1, [pc, #448]	@ (8002974 <HAL_I2C_Master_Transmit+0x1f4>)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fc64 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027be:	2302      	movs	r3, #2
 80027c0:	e0d3      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_I2C_Master_Transmit+0x50>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e0cc      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d007      	beq.n	80027f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0201 	orr.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002804:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2221      	movs	r2, #33	@ 0x21
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2210      	movs	r2, #16
 8002812:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	893a      	ldrh	r2, [r7, #8]
 8002826:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4a50      	ldr	r2, [pc, #320]	@ (8002978 <HAL_I2C_Master_Transmit+0x1f8>)
 8002836:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002838:	8979      	ldrh	r1, [r7, #10]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	6a3a      	ldr	r2, [r7, #32]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 face 	bl	8002de0 <I2C_MasterRequestWrite>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e08d      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002864:	e066      	b.n	8002934 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	6a39      	ldr	r1, [r7, #32]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fd22 	bl	80032b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00d      	beq.n	8002892 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	2b04      	cmp	r3, #4
 800287c:	d107      	bne.n	800288e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800288c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e06b      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002896:	781a      	ldrb	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d11b      	bne.n	8002908 <HAL_I2C_Master_Transmit+0x188>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d017      	beq.n	8002908 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	6a39      	ldr	r1, [r7, #32]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fd19 	bl	8003344 <I2C_WaitOnBTFFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00d      	beq.n	8002934 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	2b04      	cmp	r3, #4
 800291e:	d107      	bne.n	8002930 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800292e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e01a      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002938:	2b00      	cmp	r3, #0
 800293a:	d194      	bne.n	8002866 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800294a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	e000      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002968:	2302      	movs	r3, #2
  }
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	00100002 	.word	0x00100002
 8002978:	ffff0000 	.word	0xffff0000

0800297c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08c      	sub	sp, #48	@ 0x30
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	461a      	mov	r2, r3
 8002988:	460b      	mov	r3, r1
 800298a:	817b      	strh	r3, [r7, #10]
 800298c:	4613      	mov	r3, r2
 800298e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002990:	f7ff fa70 	bl	8001e74 <HAL_GetTick>
 8002994:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b20      	cmp	r3, #32
 80029a0:	f040 8217 	bne.w	8002dd2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	2319      	movs	r3, #25
 80029aa:	2201      	movs	r2, #1
 80029ac:	497c      	ldr	r1, [pc, #496]	@ (8002ba0 <HAL_I2C_Master_Receive+0x224>)
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fb66 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
 80029bc:	e20a      	b.n	8002dd4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d101      	bne.n	80029cc <HAL_I2C_Master_Receive+0x50>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e203      	b.n	8002dd4 <HAL_I2C_Master_Receive+0x458>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d007      	beq.n	80029f2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2222      	movs	r2, #34	@ 0x22
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2210      	movs	r2, #16
 8002a0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	893a      	ldrh	r2, [r7, #8]
 8002a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4a5c      	ldr	r2, [pc, #368]	@ (8002ba4 <HAL_I2C_Master_Receive+0x228>)
 8002a32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a34:	8979      	ldrh	r1, [r7, #10]
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 fa52 	bl	8002ee4 <I2C_MasterRequestRead>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e1c4      	b.n	8002dd4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d113      	bne.n	8002a7a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a52:	2300      	movs	r3, #0
 8002a54:	623b      	str	r3, [r7, #32]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	623b      	str	r3, [r7, #32]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	623b      	str	r3, [r7, #32]
 8002a66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	e198      	b.n	8002dac <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d11b      	bne.n	8002aba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	e178      	b.n	8002dac <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d11b      	bne.n	8002afa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ad0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ae0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	e158      	b.n	8002dac <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b20:	e144      	b.n	8002dac <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	f200 80f1 	bhi.w	8002d0e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d123      	bne.n	8002b7c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 fc4b 	bl	80033d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e145      	b.n	8002dd4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b7a:	e117      	b.n	8002dac <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d14e      	bne.n	8002c22 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	4906      	ldr	r1, [pc, #24]	@ (8002ba8 <HAL_I2C_Master_Receive+0x22c>)
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fa76 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e11a      	b.n	8002dd4 <HAL_I2C_Master_Receive+0x458>
 8002b9e:	bf00      	nop
 8002ba0:	00100002 	.word	0x00100002
 8002ba4:	ffff0000 	.word	0xffff0000
 8002ba8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c20:	e0c4      	b.n	8002dac <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c28:	2200      	movs	r2, #0
 8002c2a:	496c      	ldr	r1, [pc, #432]	@ (8002ddc <HAL_I2C_Master_Receive+0x460>)
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fa27 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0cb      	b.n	8002dd4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c84:	2200      	movs	r2, #0
 8002c86:	4955      	ldr	r1, [pc, #340]	@ (8002ddc <HAL_I2C_Master_Receive+0x460>)
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f9f9 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e09d      	b.n	8002dd4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ca6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d0c:	e04e      	b.n	8002dac <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fb5e 	bl	80033d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e058      	b.n	8002dd4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d124      	bne.n	8002dac <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d107      	bne.n	8002d7a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d78:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f47f aeb6 	bne.w	8002b22 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e000      	b.n	8002dd4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
  }
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3728      	adds	r7, #40	@ 0x28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	00010004 	.word	0x00010004

08002de0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	460b      	mov	r3, r1
 8002dee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d006      	beq.n	8002e0a <I2C_MasterRequestWrite+0x2a>
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d003      	beq.n	8002e0a <I2C_MasterRequestWrite+0x2a>
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e08:	d108      	bne.n	8002e1c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e00b      	b.n	8002e34 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e20:	2b12      	cmp	r3, #18
 8002e22:	d107      	bne.n	8002e34 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f91d 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00d      	beq.n	8002e68 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e5a:	d103      	bne.n	8002e64 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e035      	b.n	8002ed4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e70:	d108      	bne.n	8002e84 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e72:	897b      	ldrh	r3, [r7, #10]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e80:	611a      	str	r2, [r3, #16]
 8002e82:	e01b      	b.n	8002ebc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e84:	897b      	ldrh	r3, [r7, #10]
 8002e86:	11db      	asrs	r3, r3, #7
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f003 0306 	and.w	r3, r3, #6
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	f063 030f 	orn	r3, r3, #15
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	490e      	ldr	r1, [pc, #56]	@ (8002edc <I2C_MasterRequestWrite+0xfc>)
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f966 	bl	8003174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e010      	b.n	8002ed4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002eb2:	897b      	ldrh	r3, [r7, #10]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4907      	ldr	r1, [pc, #28]	@ (8002ee0 <I2C_MasterRequestWrite+0x100>)
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f956 	bl	8003174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	00010008 	.word	0x00010008
 8002ee0:	00010002 	.word	0x00010002

08002ee4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f08:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d006      	beq.n	8002f1e <I2C_MasterRequestRead+0x3a>
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d003      	beq.n	8002f1e <I2C_MasterRequestRead+0x3a>
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f1c:	d108      	bne.n	8002f30 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	e00b      	b.n	8002f48 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f34:	2b11      	cmp	r3, #17
 8002f36:	d107      	bne.n	8002f48 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f893 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00d      	beq.n	8002f7c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f6e:	d103      	bne.n	8002f78 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e079      	b.n	8003070 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f84:	d108      	bne.n	8002f98 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f86:	897b      	ldrh	r3, [r7, #10]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	611a      	str	r2, [r3, #16]
 8002f96:	e05f      	b.n	8003058 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f98:	897b      	ldrh	r3, [r7, #10]
 8002f9a:	11db      	asrs	r3, r3, #7
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f003 0306 	and.w	r3, r3, #6
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f063 030f 	orn	r3, r3, #15
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	4930      	ldr	r1, [pc, #192]	@ (8003078 <I2C_MasterRequestRead+0x194>)
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f8dc 	bl	8003174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e054      	b.n	8003070 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fc6:	897b      	ldrh	r3, [r7, #10]
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4929      	ldr	r1, [pc, #164]	@ (800307c <I2C_MasterRequestRead+0x198>)
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f8cc 	bl	8003174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e044      	b.n	8003070 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800300a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f831 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00d      	beq.n	8003040 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003032:	d103      	bne.n	800303c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800303a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e017      	b.n	8003070 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003040:	897b      	ldrh	r3, [r7, #10]
 8003042:	11db      	asrs	r3, r3, #7
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f003 0306 	and.w	r3, r3, #6
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f063 030e 	orn	r3, r3, #14
 8003050:	b2da      	uxtb	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	4907      	ldr	r1, [pc, #28]	@ (800307c <I2C_MasterRequestRead+0x198>)
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f888 	bl	8003174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	00010008 	.word	0x00010008
 800307c:	00010002 	.word	0x00010002

08003080 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	4613      	mov	r3, r2
 800308e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003090:	e048      	b.n	8003124 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d044      	beq.n	8003124 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309a:	f7fe feeb 	bl	8001e74 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d302      	bcc.n	80030b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d139      	bne.n	8003124 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	0c1b      	lsrs	r3, r3, #16
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d10d      	bne.n	80030d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	43da      	mvns	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	4013      	ands	r3, r2
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	e00c      	b.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	43da      	mvns	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	4013      	ands	r3, r2
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	461a      	mov	r2, r3
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d116      	bne.n	8003124 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003110:	f043 0220 	orr.w	r2, r3, #32
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e023      	b.n	800316c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	0c1b      	lsrs	r3, r3, #16
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d10d      	bne.n	800314a <I2C_WaitOnFlagUntilTimeout+0xca>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	43da      	mvns	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	4013      	ands	r3, r2
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	bf0c      	ite	eq
 8003140:	2301      	moveq	r3, #1
 8003142:	2300      	movne	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	461a      	mov	r2, r3
 8003148:	e00c      	b.n	8003164 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	43da      	mvns	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	4013      	ands	r3, r2
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	429a      	cmp	r2, r3
 8003168:	d093      	beq.n	8003092 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003182:	e071      	b.n	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003192:	d123      	bne.n	80031dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	f043 0204 	orr.w	r2, r3, #4
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e067      	b.n	80032ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e2:	d041      	beq.n	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e4:	f7fe fe46 	bl	8001e74 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d302      	bcc.n	80031fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d136      	bne.n	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	0c1b      	lsrs	r3, r3, #16
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d10c      	bne.n	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	43da      	mvns	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4013      	ands	r3, r2
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	bf14      	ite	ne
 8003216:	2301      	movne	r3, #1
 8003218:	2300      	moveq	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	e00b      	b.n	8003236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	43da      	mvns	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	4013      	ands	r3, r2
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf14      	ite	ne
 8003230:	2301      	movne	r3, #1
 8003232:	2300      	moveq	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d016      	beq.n	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	f043 0220 	orr.w	r2, r3, #32
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e021      	b.n	80032ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	0c1b      	lsrs	r3, r3, #16
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b01      	cmp	r3, #1
 8003270:	d10c      	bne.n	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	43da      	mvns	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	4013      	ands	r3, r2
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf14      	ite	ne
 8003284:	2301      	movne	r3, #1
 8003286:	2300      	moveq	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e00b      	b.n	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	43da      	mvns	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4013      	ands	r3, r2
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	bf14      	ite	ne
 800329e:	2301      	movne	r3, #1
 80032a0:	2300      	moveq	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f47f af6d 	bne.w	8003184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032c0:	e034      	b.n	800332c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f8e3 	bl	800348e <I2C_IsAcknowledgeFailed>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e034      	b.n	800333c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d028      	beq.n	800332c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032da:	f7fe fdcb 	bl	8001e74 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d302      	bcc.n	80032f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d11d      	bne.n	800332c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032fa:	2b80      	cmp	r3, #128	@ 0x80
 80032fc:	d016      	beq.n	800332c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	f043 0220 	orr.w	r2, r3, #32
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e007      	b.n	800333c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003336:	2b80      	cmp	r3, #128	@ 0x80
 8003338:	d1c3      	bne.n	80032c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003350:	e034      	b.n	80033bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f89b 	bl	800348e <I2C_IsAcknowledgeFailed>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e034      	b.n	80033cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d028      	beq.n	80033bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336a:	f7fe fd83 	bl	8001e74 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	429a      	cmp	r2, r3
 8003378:	d302      	bcc.n	8003380 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d11d      	bne.n	80033bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b04      	cmp	r3, #4
 800338c:	d016      	beq.n	80033bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a8:	f043 0220 	orr.w	r2, r3, #32
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e007      	b.n	80033cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d1c3      	bne.n	8003352 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033e0:	e049      	b.n	8003476 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d119      	bne.n	8003424 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f06f 0210 	mvn.w	r2, #16
 80033f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e030      	b.n	8003486 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003424:	f7fe fd26 	bl	8001e74 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	429a      	cmp	r2, r3
 8003432:	d302      	bcc.n	800343a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d11d      	bne.n	8003476 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003444:	2b40      	cmp	r3, #64	@ 0x40
 8003446:	d016      	beq.n	8003476 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	f043 0220 	orr.w	r2, r3, #32
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e007      	b.n	8003486 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003480:	2b40      	cmp	r3, #64	@ 0x40
 8003482:	d1ae      	bne.n	80033e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a4:	d11b      	bne.n	80034de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	f043 0204 	orr.w	r2, r3, #4
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e267      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d075      	beq.n	80035f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800350a:	4b88      	ldr	r3, [pc, #544]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b04      	cmp	r3, #4
 8003514:	d00c      	beq.n	8003530 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003516:	4b85      	ldr	r3, [pc, #532]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800351e:	2b08      	cmp	r3, #8
 8003520:	d112      	bne.n	8003548 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003522:	4b82      	ldr	r3, [pc, #520]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800352e:	d10b      	bne.n	8003548 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003530:	4b7e      	ldr	r3, [pc, #504]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d05b      	beq.n	80035f4 <HAL_RCC_OscConfig+0x108>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d157      	bne.n	80035f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e242      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003550:	d106      	bne.n	8003560 <HAL_RCC_OscConfig+0x74>
 8003552:	4b76      	ldr	r3, [pc, #472]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a75      	ldr	r2, [pc, #468]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e01d      	b.n	800359c <HAL_RCC_OscConfig+0xb0>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003568:	d10c      	bne.n	8003584 <HAL_RCC_OscConfig+0x98>
 800356a:	4b70      	ldr	r3, [pc, #448]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a6f      	ldr	r2, [pc, #444]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003570:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4b6d      	ldr	r3, [pc, #436]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6c      	ldr	r2, [pc, #432]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e00b      	b.n	800359c <HAL_RCC_OscConfig+0xb0>
 8003584:	4b69      	ldr	r3, [pc, #420]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a68      	ldr	r2, [pc, #416]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800358a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	4b66      	ldr	r3, [pc, #408]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a65      	ldr	r2, [pc, #404]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800359a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d013      	beq.n	80035cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7fe fc66 	bl	8001e74 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ac:	f7fe fc62 	bl	8001e74 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	@ 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e207      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035be:	4b5b      	ldr	r3, [pc, #364]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0xc0>
 80035ca:	e014      	b.n	80035f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fe fc52 	bl	8001e74 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d4:	f7fe fc4e 	bl	8001e74 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	@ 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e1f3      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e6:	4b51      	ldr	r3, [pc, #324]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0xe8>
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d063      	beq.n	80036ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003602:	4b4a      	ldr	r3, [pc, #296]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00b      	beq.n	8003626 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360e:	4b47      	ldr	r3, [pc, #284]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003616:	2b08      	cmp	r3, #8
 8003618:	d11c      	bne.n	8003654 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361a:	4b44      	ldr	r3, [pc, #272]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d116      	bne.n	8003654 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003626:	4b41      	ldr	r3, [pc, #260]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_RCC_OscConfig+0x152>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d001      	beq.n	800363e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e1c7      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363e:	4b3b      	ldr	r3, [pc, #236]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4937      	ldr	r1, [pc, #220]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003652:	e03a      	b.n	80036ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d020      	beq.n	800369e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800365c:	4b34      	ldr	r3, [pc, #208]	@ (8003730 <HAL_RCC_OscConfig+0x244>)
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003662:	f7fe fc07 	bl	8001e74 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366a:	f7fe fc03 	bl	8001e74 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e1a8      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367c:	4b2b      	ldr	r3, [pc, #172]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003688:	4b28      	ldr	r3, [pc, #160]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4925      	ldr	r1, [pc, #148]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003698:	4313      	orrs	r3, r2
 800369a:	600b      	str	r3, [r1, #0]
 800369c:	e015      	b.n	80036ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800369e:	4b24      	ldr	r3, [pc, #144]	@ (8003730 <HAL_RCC_OscConfig+0x244>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fe fbe6 	bl	8001e74 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ac:	f7fe fbe2 	bl	8001e74 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e187      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036be:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d036      	beq.n	8003744 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d016      	beq.n	800370c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036de:	4b15      	ldr	r3, [pc, #84]	@ (8003734 <HAL_RCC_OscConfig+0x248>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e4:	f7fe fbc6 	bl	8001e74 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ec:	f7fe fbc2 	bl	8001e74 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e167      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fe:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0x200>
 800370a:	e01b      	b.n	8003744 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370c:	4b09      	ldr	r3, [pc, #36]	@ (8003734 <HAL_RCC_OscConfig+0x248>)
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003712:	f7fe fbaf 	bl	8001e74 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003718:	e00e      	b.n	8003738 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800371a:	f7fe fbab 	bl	8001e74 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d907      	bls.n	8003738 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e150      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
 800372c:	40023800 	.word	0x40023800
 8003730:	42470000 	.word	0x42470000
 8003734:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003738:	4b88      	ldr	r3, [pc, #544]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800373a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ea      	bne.n	800371a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8097 	beq.w	8003880 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003752:	2300      	movs	r3, #0
 8003754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003756:	4b81      	ldr	r3, [pc, #516]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10f      	bne.n	8003782 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	4b7d      	ldr	r3, [pc, #500]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	4a7c      	ldr	r2, [pc, #496]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	@ 0x40
 8003772:	4b7a      	ldr	r3, [pc, #488]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377e:	2301      	movs	r3, #1
 8003780:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003782:	4b77      	ldr	r3, [pc, #476]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d118      	bne.n	80037c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800378e:	4b74      	ldr	r3, [pc, #464]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a73      	ldr	r2, [pc, #460]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 8003794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379a:	f7fe fb6b 	bl	8001e74 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a2:	f7fe fb67 	bl	8001e74 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e10c      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x2ea>
 80037c8:	4b64      	ldr	r3, [pc, #400]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037cc:	4a63      	ldr	r2, [pc, #396]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d4:	e01c      	b.n	8003810 <HAL_RCC_OscConfig+0x324>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b05      	cmp	r3, #5
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x30c>
 80037de:	4b5f      	ldr	r3, [pc, #380]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e2:	4a5e      	ldr	r2, [pc, #376]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ea:	4b5c      	ldr	r3, [pc, #368]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ee:	4a5b      	ldr	r2, [pc, #364]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f6:	e00b      	b.n	8003810 <HAL_RCC_OscConfig+0x324>
 80037f8:	4b58      	ldr	r3, [pc, #352]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fc:	4a57      	ldr	r2, [pc, #348]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037fe:	f023 0301 	bic.w	r3, r3, #1
 8003802:	6713      	str	r3, [r2, #112]	@ 0x70
 8003804:	4b55      	ldr	r3, [pc, #340]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003808:	4a54      	ldr	r2, [pc, #336]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800380a:	f023 0304 	bic.w	r3, r3, #4
 800380e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d015      	beq.n	8003844 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7fe fb2c 	bl	8001e74 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381e:	e00a      	b.n	8003836 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7fe fb28 	bl	8001e74 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e0cb      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003836:	4b49      	ldr	r3, [pc, #292]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0ee      	beq.n	8003820 <HAL_RCC_OscConfig+0x334>
 8003842:	e014      	b.n	800386e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003844:	f7fe fb16 	bl	8001e74 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384c:	f7fe fb12 	bl	8001e74 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e0b5      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003862:	4b3e      	ldr	r3, [pc, #248]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1ee      	bne.n	800384c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800386e:	7dfb      	ldrb	r3, [r7, #23]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d105      	bne.n	8003880 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003874:	4b39      	ldr	r3, [pc, #228]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	4a38      	ldr	r2, [pc, #224]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800387a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800387e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80a1 	beq.w	80039cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800388a:	4b34      	ldr	r3, [pc, #208]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b08      	cmp	r3, #8
 8003894:	d05c      	beq.n	8003950 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d141      	bne.n	8003922 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389e:	4b31      	ldr	r3, [pc, #196]	@ (8003964 <HAL_RCC_OscConfig+0x478>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7fe fae6 	bl	8001e74 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ac:	f7fe fae2 	bl	8001e74 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e087      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038be:	4b27      	ldr	r3, [pc, #156]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69da      	ldr	r2, [r3, #28]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	3b01      	subs	r3, #1
 80038e4:	041b      	lsls	r3, r3, #16
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ec:	061b      	lsls	r3, r3, #24
 80038ee:	491b      	ldr	r1, [pc, #108]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003964 <HAL_RCC_OscConfig+0x478>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fa:	f7fe fabb 	bl	8001e74 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003902:	f7fe fab7 	bl	8001e74 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e05c      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003914:	4b11      	ldr	r3, [pc, #68]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x416>
 8003920:	e054      	b.n	80039cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b10      	ldr	r3, [pc, #64]	@ (8003964 <HAL_RCC_OscConfig+0x478>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7fe faa4 	bl	8001e74 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003930:	f7fe faa0 	bl	8001e74 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e045      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	4b06      	ldr	r3, [pc, #24]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x444>
 800394e:	e03d      	b.n	80039cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d107      	bne.n	8003968 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e038      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
 800395c:	40023800 	.word	0x40023800
 8003960:	40007000 	.word	0x40007000
 8003964:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003968:	4b1b      	ldr	r3, [pc, #108]	@ (80039d8 <HAL_RCC_OscConfig+0x4ec>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d028      	beq.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d121      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d11a      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800399e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d111      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ae:	085b      	lsrs	r3, r3, #1
 80039b0:	3b01      	subs	r3, #1
 80039b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800

080039dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0cc      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039f0:	4b68      	ldr	r3, [pc, #416]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d90c      	bls.n	8003a18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b65      	ldr	r3, [pc, #404]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b63      	ldr	r3, [pc, #396]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0b8      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a30:	4b59      	ldr	r3, [pc, #356]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4a58      	ldr	r2, [pc, #352]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a48:	4b53      	ldr	r3, [pc, #332]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a52      	ldr	r2, [pc, #328]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a54:	4b50      	ldr	r3, [pc, #320]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	494d      	ldr	r1, [pc, #308]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d044      	beq.n	8003afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d107      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	4b47      	ldr	r3, [pc, #284]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d119      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e07f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d003      	beq.n	8003a9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e06f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e067      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aba:	4b37      	ldr	r3, [pc, #220]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f023 0203 	bic.w	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4934      	ldr	r1, [pc, #208]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003acc:	f7fe f9d2 	bl	8001e74 <HAL_GetTick>
 8003ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad4:	f7fe f9ce 	bl	8001e74 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e04f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aea:	4b2b      	ldr	r3, [pc, #172]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 020c 	and.w	r2, r3, #12
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d1eb      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003afc:	4b25      	ldr	r3, [pc, #148]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d20c      	bcs.n	8003b24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b22      	ldr	r3, [pc, #136]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b20      	ldr	r3, [pc, #128]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e032      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b30:	4b19      	ldr	r3, [pc, #100]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4916      	ldr	r1, [pc, #88]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d009      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b4e:	4b12      	ldr	r3, [pc, #72]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	490e      	ldr	r1, [pc, #56]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b62:	f000 f821 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 8003b66:	4602      	mov	r2, r0
 8003b68:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	490a      	ldr	r1, [pc, #40]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	5ccb      	ldrb	r3, [r1, r3]
 8003b76:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7a:	4a09      	ldr	r2, [pc, #36]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fd ffb8 	bl	8001af8 <HAL_InitTick>

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40023c00 	.word	0x40023c00
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	0800cad4 	.word	0x0800cad4
 8003ba0:	20000018 	.word	0x20000018
 8003ba4:	2000001c 	.word	0x2000001c

08003ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bac:	b094      	sub	sp, #80	@ 0x50
 8003bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc0:	4b79      	ldr	r3, [pc, #484]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d00d      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	f200 80e1 	bhi.w	8003d94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x34>
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d003      	beq.n	8003be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bda:	e0db      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bdc:	4b73      	ldr	r3, [pc, #460]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x204>)
 8003bde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003be0:	e0db      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003be2:	4b73      	ldr	r3, [pc, #460]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003be4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003be6:	e0d8      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be8:	4b6f      	ldr	r3, [pc, #444]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bf0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bf2:	4b6d      	ldr	r3, [pc, #436]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d063      	beq.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bfe:	4b6a      	ldr	r3, [pc, #424]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	099b      	lsrs	r3, r3, #6
 8003c04:	2200      	movs	r2, #0
 8003c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c12:	2300      	movs	r3, #0
 8003c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c1a:	4622      	mov	r2, r4
 8003c1c:	462b      	mov	r3, r5
 8003c1e:	f04f 0000 	mov.w	r0, #0
 8003c22:	f04f 0100 	mov.w	r1, #0
 8003c26:	0159      	lsls	r1, r3, #5
 8003c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c2c:	0150      	lsls	r0, r2, #5
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4621      	mov	r1, r4
 8003c34:	1a51      	subs	r1, r2, r1
 8003c36:	6139      	str	r1, [r7, #16]
 8003c38:	4629      	mov	r1, r5
 8003c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c4c:	4659      	mov	r1, fp
 8003c4e:	018b      	lsls	r3, r1, #6
 8003c50:	4651      	mov	r1, sl
 8003c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c56:	4651      	mov	r1, sl
 8003c58:	018a      	lsls	r2, r1, #6
 8003c5a:	4651      	mov	r1, sl
 8003c5c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c60:	4659      	mov	r1, fp
 8003c62:	eb63 0901 	sbc.w	r9, r3, r1
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c7a:	4690      	mov	r8, r2
 8003c7c:	4699      	mov	r9, r3
 8003c7e:	4623      	mov	r3, r4
 8003c80:	eb18 0303 	adds.w	r3, r8, r3
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	462b      	mov	r3, r5
 8003c88:	eb49 0303 	adc.w	r3, r9, r3
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	024b      	lsls	r3, r1, #9
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	024a      	lsls	r2, r1, #9
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cae:	2200      	movs	r2, #0
 8003cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cb8:	f7fd f81e 	bl	8000cf8 <__aeabi_uldivmod>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc4:	e058      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc6:	4b38      	ldr	r3, [pc, #224]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	099b      	lsrs	r3, r3, #6
 8003ccc:	2200      	movs	r2, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cd6:	623b      	str	r3, [r7, #32]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	464b      	mov	r3, r9
 8003ce4:	f04f 0000 	mov.w	r0, #0
 8003ce8:	f04f 0100 	mov.w	r1, #0
 8003cec:	0159      	lsls	r1, r3, #5
 8003cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf2:	0150      	lsls	r0, r2, #5
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4641      	mov	r1, r8
 8003cfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cfe:	4649      	mov	r1, r9
 8003d00:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d18:	ebb2 040a 	subs.w	r4, r2, sl
 8003d1c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	00eb      	lsls	r3, r5, #3
 8003d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d2e:	00e2      	lsls	r2, r4, #3
 8003d30:	4614      	mov	r4, r2
 8003d32:	461d      	mov	r5, r3
 8003d34:	4643      	mov	r3, r8
 8003d36:	18e3      	adds	r3, r4, r3
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	464b      	mov	r3, r9
 8003d3c:	eb45 0303 	adc.w	r3, r5, r3
 8003d40:	607b      	str	r3, [r7, #4]
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d4e:	4629      	mov	r1, r5
 8003d50:	028b      	lsls	r3, r1, #10
 8003d52:	4621      	mov	r1, r4
 8003d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d58:	4621      	mov	r1, r4
 8003d5a:	028a      	lsls	r2, r1, #10
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d62:	2200      	movs	r2, #0
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	61fa      	str	r2, [r7, #28]
 8003d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d6c:	f7fc ffc4 	bl	8000cf8 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4613      	mov	r3, r2
 8003d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d78:	4b0b      	ldr	r3, [pc, #44]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	0c1b      	lsrs	r3, r3, #16
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	3301      	adds	r3, #1
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d92:	e002      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d94:	4b05      	ldr	r3, [pc, #20]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x204>)
 8003d96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3750      	adds	r7, #80	@ 0x50
 8003da0:	46bd      	mov	sp, r7
 8003da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	00f42400 	.word	0x00f42400
 8003db0:	007a1200 	.word	0x007a1200

08003db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db8:	4b03      	ldr	r3, [pc, #12]	@ (8003dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dba:	681b      	ldr	r3, [r3, #0]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000018 	.word	0x20000018

08003dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dd0:	f7ff fff0 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b05      	ldr	r3, [pc, #20]	@ (8003dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	0a9b      	lsrs	r3, r3, #10
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	4903      	ldr	r1, [pc, #12]	@ (8003df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de2:	5ccb      	ldrb	r3, [r1, r3]
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40023800 	.word	0x40023800
 8003df0:	0800cae4 	.word	0x0800cae4

08003df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003df8:	f7ff ffdc 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	4b05      	ldr	r3, [pc, #20]	@ (8003e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	0b5b      	lsrs	r3, r3, #13
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	4903      	ldr	r1, [pc, #12]	@ (8003e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e0a:	5ccb      	ldrb	r3, [r1, r3]
 8003e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40023800 	.word	0x40023800
 8003e18:	0800cae4 	.word	0x0800cae4

08003e1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	220f      	movs	r2, #15
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e2c:	4b12      	ldr	r3, [pc, #72]	@ (8003e78 <HAL_RCC_GetClockConfig+0x5c>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0203 	and.w	r2, r3, #3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e38:	4b0f      	ldr	r3, [pc, #60]	@ (8003e78 <HAL_RCC_GetClockConfig+0x5c>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e44:	4b0c      	ldr	r3, [pc, #48]	@ (8003e78 <HAL_RCC_GetClockConfig+0x5c>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e50:	4b09      	ldr	r3, [pc, #36]	@ (8003e78 <HAL_RCC_GetClockConfig+0x5c>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	08db      	lsrs	r3, r3, #3
 8003e56:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e5e:	4b07      	ldr	r3, [pc, #28]	@ (8003e7c <HAL_RCC_GetClockConfig+0x60>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0207 	and.w	r2, r3, #7
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	601a      	str	r2, [r3, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40023c00 	.word	0x40023c00

08003e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e041      	b.n	8003f16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f839 	bl	8003f1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	f000 f9b2 	bl	8004228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
	...

08003f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d001      	beq.n	8003f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e044      	b.n	8003fd6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1e      	ldr	r2, [pc, #120]	@ (8003fe4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d018      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f76:	d013      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8003fe8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00e      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a19      	ldr	r2, [pc, #100]	@ (8003fec <HAL_TIM_Base_Start_IT+0xb8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d009      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a17      	ldr	r2, [pc, #92]	@ (8003ff0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d004      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a16      	ldr	r2, [pc, #88]	@ (8003ff4 <HAL_TIM_Base_Start_IT+0xc0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d111      	bne.n	8003fc4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b06      	cmp	r3, #6
 8003fb0:	d010      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0201 	orr.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc2:	e007      	b.n	8003fd4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40010000 	.word	0x40010000
 8003fe8:	40000400 	.word	0x40000400
 8003fec:	40000800 	.word	0x40000800
 8003ff0:	40000c00 	.word	0x40000c00
 8003ff4:	40014000 	.word	0x40014000

08003ff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d020      	beq.n	800405c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01b      	beq.n	800405c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0202 	mvn.w	r2, #2
 800402c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f8d2 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 8004048:	e005      	b.n	8004056 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8c4 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f8d5 	bl	8004200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b00      	cmp	r3, #0
 8004064:	d020      	beq.n	80040a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01b      	beq.n	80040a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0204 	mvn.w	r2, #4
 8004078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2202      	movs	r2, #2
 800407e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f8ac 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 8004094:	e005      	b.n	80040a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f89e 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f8af 	bl	8004200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d020      	beq.n	80040f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01b      	beq.n	80040f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0208 	mvn.w	r2, #8
 80040c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2204      	movs	r2, #4
 80040ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f886 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 80040e0:	e005      	b.n	80040ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f878 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f889 	bl	8004200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d020      	beq.n	8004140 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f003 0310 	and.w	r3, r3, #16
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01b      	beq.n	8004140 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0210 	mvn.w	r2, #16
 8004110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2208      	movs	r2, #8
 8004116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f860 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 800412c:	e005      	b.n	800413a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f852 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f863 	bl	8004200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00c      	beq.n	8004164 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d007      	beq.n	8004164 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0201 	mvn.w	r2, #1
 800415c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fd fb56 	bl	8001810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00c      	beq.n	8004188 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004174:	2b00      	cmp	r3, #0
 8004176:	d007      	beq.n	8004188 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f8e6 	bl	8004354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00c      	beq.n	80041ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d007      	beq.n	80041ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80041a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f834 	bl	8004214 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00c      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0220 	mvn.w	r2, #32
 80041c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f8b8 	bl	8004340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a3a      	ldr	r2, [pc, #232]	@ (8004324 <TIM_Base_SetConfig+0xfc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00f      	beq.n	8004260 <TIM_Base_SetConfig+0x38>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004246:	d00b      	beq.n	8004260 <TIM_Base_SetConfig+0x38>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a37      	ldr	r2, [pc, #220]	@ (8004328 <TIM_Base_SetConfig+0x100>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d007      	beq.n	8004260 <TIM_Base_SetConfig+0x38>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a36      	ldr	r2, [pc, #216]	@ (800432c <TIM_Base_SetConfig+0x104>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_Base_SetConfig+0x38>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a35      	ldr	r2, [pc, #212]	@ (8004330 <TIM_Base_SetConfig+0x108>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d108      	bne.n	8004272 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a2b      	ldr	r2, [pc, #172]	@ (8004324 <TIM_Base_SetConfig+0xfc>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d01b      	beq.n	80042b2 <TIM_Base_SetConfig+0x8a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004280:	d017      	beq.n	80042b2 <TIM_Base_SetConfig+0x8a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a28      	ldr	r2, [pc, #160]	@ (8004328 <TIM_Base_SetConfig+0x100>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <TIM_Base_SetConfig+0x8a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a27      	ldr	r2, [pc, #156]	@ (800432c <TIM_Base_SetConfig+0x104>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00f      	beq.n	80042b2 <TIM_Base_SetConfig+0x8a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a26      	ldr	r2, [pc, #152]	@ (8004330 <TIM_Base_SetConfig+0x108>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00b      	beq.n	80042b2 <TIM_Base_SetConfig+0x8a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a25      	ldr	r2, [pc, #148]	@ (8004334 <TIM_Base_SetConfig+0x10c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d007      	beq.n	80042b2 <TIM_Base_SetConfig+0x8a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a24      	ldr	r2, [pc, #144]	@ (8004338 <TIM_Base_SetConfig+0x110>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d003      	beq.n	80042b2 <TIM_Base_SetConfig+0x8a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a23      	ldr	r2, [pc, #140]	@ (800433c <TIM_Base_SetConfig+0x114>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d108      	bne.n	80042c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004324 <TIM_Base_SetConfig+0xfc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d103      	bne.n	80042f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b01      	cmp	r3, #1
 8004308:	d105      	bne.n	8004316 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f023 0201 	bic.w	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	611a      	str	r2, [r3, #16]
  }
}
 8004316:	bf00      	nop
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40010000 	.word	0x40010000
 8004328:	40000400 	.word	0x40000400
 800432c:	40000800 	.word	0x40000800
 8004330:	40000c00 	.word	0x40000c00
 8004334:	40014000 	.word	0x40014000
 8004338:	40014400 	.word	0x40014400
 800433c:	40014800 	.word	0x40014800

08004340 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e042      	b.n	8004400 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fd fb62 	bl	8001a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2224      	movs	r2, #36	@ 0x24
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fd69 	bl	8004e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695a      	ldr	r2, [r3, #20]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08a      	sub	sp, #40	@ 0x28
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	4613      	mov	r3, r2
 8004416:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b20      	cmp	r3, #32
 8004426:	d175      	bne.n	8004514 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_UART_Transmit+0x2c>
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e06e      	b.n	8004516 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2221      	movs	r2, #33	@ 0x21
 8004442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004446:	f7fd fd15 	bl	8001e74 <HAL_GetTick>
 800444a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	88fa      	ldrh	r2, [r7, #6]
 8004450:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	88fa      	ldrh	r2, [r7, #6]
 8004456:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004460:	d108      	bne.n	8004474 <HAL_UART_Transmit+0x6c>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d104      	bne.n	8004474 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	e003      	b.n	800447c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004478:	2300      	movs	r3, #0
 800447a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800447c:	e02e      	b.n	80044dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2200      	movs	r2, #0
 8004486:	2180      	movs	r1, #128	@ 0x80
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 fb05 	bl	8004a98 <UART_WaitOnFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e03a      	b.n	8004516 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10b      	bne.n	80044be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	3302      	adds	r3, #2
 80044ba:	61bb      	str	r3, [r7, #24]
 80044bc:	e007      	b.n	80044ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	781a      	ldrb	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	3301      	adds	r3, #1
 80044cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1cb      	bne.n	800447e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2200      	movs	r2, #0
 80044ee:	2140      	movs	r1, #64	@ 0x40
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fad1 	bl	8004a98 <UART_WaitOnFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e006      	b.n	8004516 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	e000      	b.n	8004516 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004514:	2302      	movs	r3, #2
  }
}
 8004516:	4618      	mov	r0, r3
 8004518:	3720      	adds	r7, #32
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b0ba      	sub	sp, #232	@ 0xe8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004546:	2300      	movs	r3, #0
 8004548:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800454c:	2300      	movs	r3, #0
 800454e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800455e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10f      	bne.n	8004586 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <HAL_UART_IRQHandler+0x66>
 8004572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fbc2 	bl	8004d08 <UART_Receive_IT>
      return;
 8004584:	e25b      	b.n	8004a3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80de 	beq.w	800474c <HAL_UART_IRQHandler+0x22c>
 8004590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d106      	bne.n	80045aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800459c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80d1 	beq.w	800474c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00b      	beq.n	80045ce <HAL_UART_IRQHandler+0xae>
 80045b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c6:	f043 0201 	orr.w	r2, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00b      	beq.n	80045f2 <HAL_UART_IRQHandler+0xd2>
 80045da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d005      	beq.n	80045f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ea:	f043 0202 	orr.w	r2, r3, #2
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00b      	beq.n	8004616 <HAL_UART_IRQHandler+0xf6>
 80045fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460e:	f043 0204 	orr.w	r2, r3, #4
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d011      	beq.n	8004646 <HAL_UART_IRQHandler+0x126>
 8004622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d105      	bne.n	800463a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800462e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463e:	f043 0208 	orr.w	r2, r3, #8
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 81f2 	beq.w	8004a34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <HAL_UART_IRQHandler+0x14e>
 800465c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fb4d 	bl	8004d08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004678:	2b40      	cmp	r3, #64	@ 0x40
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b00      	cmp	r3, #0
 8004690:	d103      	bne.n	800469a <HAL_UART_IRQHandler+0x17a>
 8004692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004696:	2b00      	cmp	r3, #0
 8004698:	d04f      	beq.n	800473a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fa55 	bl	8004b4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046aa:	2b40      	cmp	r3, #64	@ 0x40
 80046ac:	d141      	bne.n	8004732 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3314      	adds	r3, #20
 80046b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3314      	adds	r3, #20
 80046d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1d9      	bne.n	80046ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d013      	beq.n	800472a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004706:	4a7e      	ldr	r2, [pc, #504]	@ (8004900 <HAL_UART_IRQHandler+0x3e0>)
 8004708:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470e:	4618      	mov	r0, r3
 8004710:	f7fd fd32 	bl	8002178 <HAL_DMA_Abort_IT>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d016      	beq.n	8004748 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800471e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004724:	4610      	mov	r0, r2
 8004726:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004728:	e00e      	b.n	8004748 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f99e 	bl	8004a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004730:	e00a      	b.n	8004748 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f99a 	bl	8004a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	e006      	b.n	8004748 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f996 	bl	8004a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004746:	e175      	b.n	8004a34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	bf00      	nop
    return;
 800474a:	e173      	b.n	8004a34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004750:	2b01      	cmp	r3, #1
 8004752:	f040 814f 	bne.w	80049f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8148 	beq.w	80049f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8141 	beq.w	80049f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004772:	2300      	movs	r3, #0
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004792:	2b40      	cmp	r3, #64	@ 0x40
 8004794:	f040 80b6 	bne.w	8004904 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8145 	beq.w	8004a38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047b6:	429a      	cmp	r2, r3
 80047b8:	f080 813e 	bcs.w	8004a38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ce:	f000 8088 	beq.w	80048e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	330c      	adds	r3, #12
 80047d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80047fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004802:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800480a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004816:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1d9      	bne.n	80047d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3314      	adds	r3, #20
 8004824:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800482e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3314      	adds	r3, #20
 800483e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004842:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004846:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800484a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800484e:	e841 2300 	strex	r3, r2, [r1]
 8004852:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004854:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1e1      	bne.n	800481e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3314      	adds	r3, #20
 8004860:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004862:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800486a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800486c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004870:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3314      	adds	r3, #20
 800487a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800487e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004880:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004884:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800488c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e3      	bne.n	800485a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	330c      	adds	r3, #12
 80048a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048b2:	f023 0310 	bic.w	r3, r3, #16
 80048b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80048c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048c6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e3      	bne.n	80048a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fd fbdb 	bl	8002098 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2202      	movs	r2, #2
 80048e6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	4619      	mov	r1, r3
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f8c1 	bl	8004a80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048fe:	e09b      	b.n	8004a38 <HAL_UART_IRQHandler+0x518>
 8004900:	08004c11 	.word	0x08004c11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800490c:	b29b      	uxth	r3, r3
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 808e 	beq.w	8004a3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 8089 	beq.w	8004a3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	330c      	adds	r3, #12
 8004930:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800493a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800493c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004940:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	330c      	adds	r3, #12
 800494a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800494e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004950:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004954:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800495c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e3      	bne.n	800492a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3314      	adds	r3, #20
 8004968:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	623b      	str	r3, [r7, #32]
   return(result);
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	f023 0301 	bic.w	r3, r3, #1
 8004978:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3314      	adds	r3, #20
 8004982:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004986:	633a      	str	r2, [r7, #48]	@ 0x30
 8004988:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800498c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e3      	bne.n	8004962 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2220      	movs	r2, #32
 800499e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	330c      	adds	r3, #12
 80049ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0310 	bic.w	r3, r3, #16
 80049be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	330c      	adds	r3, #12
 80049c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80049cc:	61fa      	str	r2, [r7, #28]
 80049ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d0:	69b9      	ldr	r1, [r7, #24]
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	e841 2300 	strex	r3, r2, [r1]
 80049d8:	617b      	str	r3, [r7, #20]
   return(result);
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1e3      	bne.n	80049a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049ea:	4619      	mov	r1, r3
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f847 	bl	8004a80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049f2:	e023      	b.n	8004a3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d009      	beq.n	8004a14 <HAL_UART_IRQHandler+0x4f4>
 8004a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f913 	bl	8004c38 <UART_Transmit_IT>
    return;
 8004a12:	e014      	b.n	8004a3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00e      	beq.n	8004a3e <HAL_UART_IRQHandler+0x51e>
 8004a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d008      	beq.n	8004a3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f953 	bl	8004cd8 <UART_EndTransmit_IT>
    return;
 8004a32:	e004      	b.n	8004a3e <HAL_UART_IRQHandler+0x51e>
    return;
 8004a34:	bf00      	nop
 8004a36:	e002      	b.n	8004a3e <HAL_UART_IRQHandler+0x51e>
      return;
 8004a38:	bf00      	nop
 8004a3a:	e000      	b.n	8004a3e <HAL_UART_IRQHandler+0x51e>
      return;
 8004a3c:	bf00      	nop
  }
}
 8004a3e:	37e8      	adds	r7, #232	@ 0xe8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa8:	e03b      	b.n	8004b22 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab0:	d037      	beq.n	8004b22 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab2:	f7fd f9df 	bl	8001e74 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	6a3a      	ldr	r2, [r7, #32]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d302      	bcc.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e03a      	b.n	8004b42 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f003 0304 	and.w	r3, r3, #4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d023      	beq.n	8004b22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b80      	cmp	r3, #128	@ 0x80
 8004ade:	d020      	beq.n	8004b22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b40      	cmp	r3, #64	@ 0x40
 8004ae4:	d01d      	beq.n	8004b22 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d116      	bne.n	8004b22 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 f81d 	bl	8004b4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2208      	movs	r2, #8
 8004b14:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e00f      	b.n	8004b42 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	bf0c      	ite	eq
 8004b32:	2301      	moveq	r3, #1
 8004b34:	2300      	movne	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	461a      	mov	r2, r3
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d0b4      	beq.n	8004aaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b095      	sub	sp, #84	@ 0x54
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	330c      	adds	r3, #12
 8004b58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	330c      	adds	r3, #12
 8004b70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b72:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1e5      	bne.n	8004b52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3314      	adds	r3, #20
 8004b8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	f023 0301 	bic.w	r3, r3, #1
 8004b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3314      	adds	r3, #20
 8004ba4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004baa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bae:	e841 2300 	strex	r3, r2, [r1]
 8004bb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1e5      	bne.n	8004b86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d119      	bne.n	8004bf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	330c      	adds	r3, #12
 8004bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f023 0310 	bic.w	r3, r3, #16
 8004bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	330c      	adds	r3, #12
 8004be0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004be2:	61ba      	str	r2, [r7, #24]
 8004be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be6:	6979      	ldr	r1, [r7, #20]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	613b      	str	r3, [r7, #16]
   return(result);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1e5      	bne.n	8004bc2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c04:	bf00      	nop
 8004c06:	3754      	adds	r7, #84	@ 0x54
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f7ff ff1e 	bl	8004a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b21      	cmp	r3, #33	@ 0x21
 8004c4a:	d13e      	bne.n	8004cca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c54:	d114      	bne.n	8004c80 <UART_Transmit_IT+0x48>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d110      	bne.n	8004c80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	1c9a      	adds	r2, r3, #2
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	621a      	str	r2, [r3, #32]
 8004c7e:	e008      	b.n	8004c92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	1c59      	adds	r1, r3, #1
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6211      	str	r1, [r2, #32]
 8004c8a:	781a      	ldrb	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10f      	bne.n	8004cc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e000      	b.n	8004ccc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cca:	2302      	movs	r3, #2
  }
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff fea3 	bl	8004a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08c      	sub	sp, #48	@ 0x30
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b22      	cmp	r3, #34	@ 0x22
 8004d1a:	f040 80ae 	bne.w	8004e7a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d26:	d117      	bne.n	8004d58 <UART_Receive_IT+0x50>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d113      	bne.n	8004d58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	1c9a      	adds	r2, r3, #2
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d56:	e026      	b.n	8004da6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d6a:	d007      	beq.n	8004d7c <UART_Receive_IT+0x74>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <UART_Receive_IT+0x82>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	e008      	b.n	8004d9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	4619      	mov	r1, r3
 8004db4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d15d      	bne.n	8004e76 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0220 	bic.w	r2, r2, #32
 8004dc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695a      	ldr	r2, [r3, #20]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0201 	bic.w	r2, r2, #1
 8004de8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d135      	bne.n	8004e6c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	330c      	adds	r3, #12
 8004e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	613b      	str	r3, [r7, #16]
   return(result);
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f023 0310 	bic.w	r3, r3, #16
 8004e1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	330c      	adds	r3, #12
 8004e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e26:	623a      	str	r2, [r7, #32]
 8004e28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	69f9      	ldr	r1, [r7, #28]
 8004e2c:	6a3a      	ldr	r2, [r7, #32]
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e5      	bne.n	8004e06 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0310 	and.w	r3, r3, #16
 8004e44:	2b10      	cmp	r3, #16
 8004e46:	d10a      	bne.n	8004e5e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e62:	4619      	mov	r1, r3
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff fe0b 	bl	8004a80 <HAL_UARTEx_RxEventCallback>
 8004e6a:	e002      	b.n	8004e72 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff fdf3 	bl	8004a58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	e002      	b.n	8004e7c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	e000      	b.n	8004e7c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e7a:	2302      	movs	r3, #2
  }
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3730      	adds	r7, #48	@ 0x30
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e88:	b0c0      	sub	sp, #256	@ 0x100
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea0:	68d9      	ldr	r1, [r3, #12]
 8004ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	ea40 0301 	orr.w	r3, r0, r1
 8004eac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004edc:	f021 010c 	bic.w	r1, r1, #12
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004eea:	430b      	orrs	r3, r1
 8004eec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efe:	6999      	ldr	r1, [r3, #24]
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	ea40 0301 	orr.w	r3, r0, r1
 8004f0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4b8f      	ldr	r3, [pc, #572]	@ (8005150 <UART_SetConfig+0x2cc>)
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d005      	beq.n	8004f24 <UART_SetConfig+0xa0>
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	4b8d      	ldr	r3, [pc, #564]	@ (8005154 <UART_SetConfig+0x2d0>)
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d104      	bne.n	8004f2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f24:	f7fe ff66 	bl	8003df4 <HAL_RCC_GetPCLK2Freq>
 8004f28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f2c:	e003      	b.n	8004f36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f2e:	f7fe ff4d 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
 8004f32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f40:	f040 810c 	bne.w	800515c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f56:	4622      	mov	r2, r4
 8004f58:	462b      	mov	r3, r5
 8004f5a:	1891      	adds	r1, r2, r2
 8004f5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f5e:	415b      	adcs	r3, r3
 8004f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f66:	4621      	mov	r1, r4
 8004f68:	eb12 0801 	adds.w	r8, r2, r1
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	eb43 0901 	adc.w	r9, r3, r1
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f86:	4690      	mov	r8, r2
 8004f88:	4699      	mov	r9, r3
 8004f8a:	4623      	mov	r3, r4
 8004f8c:	eb18 0303 	adds.w	r3, r8, r3
 8004f90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f94:	462b      	mov	r3, r5
 8004f96:	eb49 0303 	adc.w	r3, r9, r3
 8004f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004faa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004fae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	18db      	adds	r3, r3, r3
 8004fb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fb8:	4613      	mov	r3, r2
 8004fba:	eb42 0303 	adc.w	r3, r2, r3
 8004fbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004fc8:	f7fb fe96 	bl	8000cf8 <__aeabi_uldivmod>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4b61      	ldr	r3, [pc, #388]	@ (8005158 <UART_SetConfig+0x2d4>)
 8004fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	011c      	lsls	r4, r3, #4
 8004fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fe4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004fe8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004fec:	4642      	mov	r2, r8
 8004fee:	464b      	mov	r3, r9
 8004ff0:	1891      	adds	r1, r2, r2
 8004ff2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ff4:	415b      	adcs	r3, r3
 8004ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ff8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ffc:	4641      	mov	r1, r8
 8004ffe:	eb12 0a01 	adds.w	sl, r2, r1
 8005002:	4649      	mov	r1, r9
 8005004:	eb43 0b01 	adc.w	fp, r3, r1
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005014:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005018:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800501c:	4692      	mov	sl, r2
 800501e:	469b      	mov	fp, r3
 8005020:	4643      	mov	r3, r8
 8005022:	eb1a 0303 	adds.w	r3, sl, r3
 8005026:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800502a:	464b      	mov	r3, r9
 800502c:	eb4b 0303 	adc.w	r3, fp, r3
 8005030:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005040:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005044:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005048:	460b      	mov	r3, r1
 800504a:	18db      	adds	r3, r3, r3
 800504c:	643b      	str	r3, [r7, #64]	@ 0x40
 800504e:	4613      	mov	r3, r2
 8005050:	eb42 0303 	adc.w	r3, r2, r3
 8005054:	647b      	str	r3, [r7, #68]	@ 0x44
 8005056:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800505a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800505e:	f7fb fe4b 	bl	8000cf8 <__aeabi_uldivmod>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4611      	mov	r1, r2
 8005068:	4b3b      	ldr	r3, [pc, #236]	@ (8005158 <UART_SetConfig+0x2d4>)
 800506a:	fba3 2301 	umull	r2, r3, r3, r1
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	2264      	movs	r2, #100	@ 0x64
 8005072:	fb02 f303 	mul.w	r3, r2, r3
 8005076:	1acb      	subs	r3, r1, r3
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800507e:	4b36      	ldr	r3, [pc, #216]	@ (8005158 <UART_SetConfig+0x2d4>)
 8005080:	fba3 2302 	umull	r2, r3, r3, r2
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800508c:	441c      	add	r4, r3
 800508e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005092:	2200      	movs	r2, #0
 8005094:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005098:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800509c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80050a0:	4642      	mov	r2, r8
 80050a2:	464b      	mov	r3, r9
 80050a4:	1891      	adds	r1, r2, r2
 80050a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80050a8:	415b      	adcs	r3, r3
 80050aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050b0:	4641      	mov	r1, r8
 80050b2:	1851      	adds	r1, r2, r1
 80050b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80050b6:	4649      	mov	r1, r9
 80050b8:	414b      	adcs	r3, r1
 80050ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050c8:	4659      	mov	r1, fp
 80050ca:	00cb      	lsls	r3, r1, #3
 80050cc:	4651      	mov	r1, sl
 80050ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050d2:	4651      	mov	r1, sl
 80050d4:	00ca      	lsls	r2, r1, #3
 80050d6:	4610      	mov	r0, r2
 80050d8:	4619      	mov	r1, r3
 80050da:	4603      	mov	r3, r0
 80050dc:	4642      	mov	r2, r8
 80050de:	189b      	adds	r3, r3, r2
 80050e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050e4:	464b      	mov	r3, r9
 80050e6:	460a      	mov	r2, r1
 80050e8:	eb42 0303 	adc.w	r3, r2, r3
 80050ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005100:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005104:	460b      	mov	r3, r1
 8005106:	18db      	adds	r3, r3, r3
 8005108:	62bb      	str	r3, [r7, #40]	@ 0x28
 800510a:	4613      	mov	r3, r2
 800510c:	eb42 0303 	adc.w	r3, r2, r3
 8005110:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005112:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005116:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800511a:	f7fb fded 	bl	8000cf8 <__aeabi_uldivmod>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4b0d      	ldr	r3, [pc, #52]	@ (8005158 <UART_SetConfig+0x2d4>)
 8005124:	fba3 1302 	umull	r1, r3, r3, r2
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	2164      	movs	r1, #100	@ 0x64
 800512c:	fb01 f303 	mul.w	r3, r1, r3
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	3332      	adds	r3, #50	@ 0x32
 8005136:	4a08      	ldr	r2, [pc, #32]	@ (8005158 <UART_SetConfig+0x2d4>)
 8005138:	fba2 2303 	umull	r2, r3, r2, r3
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	f003 0207 	and.w	r2, r3, #7
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4422      	add	r2, r4
 800514a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800514c:	e106      	b.n	800535c <UART_SetConfig+0x4d8>
 800514e:	bf00      	nop
 8005150:	40011000 	.word	0x40011000
 8005154:	40011400 	.word	0x40011400
 8005158:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800515c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005160:	2200      	movs	r2, #0
 8005162:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005166:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800516a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800516e:	4642      	mov	r2, r8
 8005170:	464b      	mov	r3, r9
 8005172:	1891      	adds	r1, r2, r2
 8005174:	6239      	str	r1, [r7, #32]
 8005176:	415b      	adcs	r3, r3
 8005178:	627b      	str	r3, [r7, #36]	@ 0x24
 800517a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800517e:	4641      	mov	r1, r8
 8005180:	1854      	adds	r4, r2, r1
 8005182:	4649      	mov	r1, r9
 8005184:	eb43 0501 	adc.w	r5, r3, r1
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	00eb      	lsls	r3, r5, #3
 8005192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005196:	00e2      	lsls	r2, r4, #3
 8005198:	4614      	mov	r4, r2
 800519a:	461d      	mov	r5, r3
 800519c:	4643      	mov	r3, r8
 800519e:	18e3      	adds	r3, r4, r3
 80051a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051a4:	464b      	mov	r3, r9
 80051a6:	eb45 0303 	adc.w	r3, r5, r3
 80051aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051ca:	4629      	mov	r1, r5
 80051cc:	008b      	lsls	r3, r1, #2
 80051ce:	4621      	mov	r1, r4
 80051d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051d4:	4621      	mov	r1, r4
 80051d6:	008a      	lsls	r2, r1, #2
 80051d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051dc:	f7fb fd8c 	bl	8000cf8 <__aeabi_uldivmod>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4b60      	ldr	r3, [pc, #384]	@ (8005368 <UART_SetConfig+0x4e4>)
 80051e6:	fba3 2302 	umull	r2, r3, r3, r2
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	011c      	lsls	r4, r3, #4
 80051ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051f2:	2200      	movs	r2, #0
 80051f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80051fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005200:	4642      	mov	r2, r8
 8005202:	464b      	mov	r3, r9
 8005204:	1891      	adds	r1, r2, r2
 8005206:	61b9      	str	r1, [r7, #24]
 8005208:	415b      	adcs	r3, r3
 800520a:	61fb      	str	r3, [r7, #28]
 800520c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005210:	4641      	mov	r1, r8
 8005212:	1851      	adds	r1, r2, r1
 8005214:	6139      	str	r1, [r7, #16]
 8005216:	4649      	mov	r1, r9
 8005218:	414b      	adcs	r3, r1
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005228:	4659      	mov	r1, fp
 800522a:	00cb      	lsls	r3, r1, #3
 800522c:	4651      	mov	r1, sl
 800522e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005232:	4651      	mov	r1, sl
 8005234:	00ca      	lsls	r2, r1, #3
 8005236:	4610      	mov	r0, r2
 8005238:	4619      	mov	r1, r3
 800523a:	4603      	mov	r3, r0
 800523c:	4642      	mov	r2, r8
 800523e:	189b      	adds	r3, r3, r2
 8005240:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005244:	464b      	mov	r3, r9
 8005246:	460a      	mov	r2, r1
 8005248:	eb42 0303 	adc.w	r3, r2, r3
 800524c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	67bb      	str	r3, [r7, #120]	@ 0x78
 800525a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005268:	4649      	mov	r1, r9
 800526a:	008b      	lsls	r3, r1, #2
 800526c:	4641      	mov	r1, r8
 800526e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005272:	4641      	mov	r1, r8
 8005274:	008a      	lsls	r2, r1, #2
 8005276:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800527a:	f7fb fd3d 	bl	8000cf8 <__aeabi_uldivmod>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4611      	mov	r1, r2
 8005284:	4b38      	ldr	r3, [pc, #224]	@ (8005368 <UART_SetConfig+0x4e4>)
 8005286:	fba3 2301 	umull	r2, r3, r3, r1
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	2264      	movs	r2, #100	@ 0x64
 800528e:	fb02 f303 	mul.w	r3, r2, r3
 8005292:	1acb      	subs	r3, r1, r3
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	3332      	adds	r3, #50	@ 0x32
 8005298:	4a33      	ldr	r2, [pc, #204]	@ (8005368 <UART_SetConfig+0x4e4>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052a4:	441c      	add	r4, r3
 80052a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052aa:	2200      	movs	r2, #0
 80052ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80052ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80052b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80052b4:	4642      	mov	r2, r8
 80052b6:	464b      	mov	r3, r9
 80052b8:	1891      	adds	r1, r2, r2
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	415b      	adcs	r3, r3
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052c4:	4641      	mov	r1, r8
 80052c6:	1851      	adds	r1, r2, r1
 80052c8:	6039      	str	r1, [r7, #0]
 80052ca:	4649      	mov	r1, r9
 80052cc:	414b      	adcs	r3, r1
 80052ce:	607b      	str	r3, [r7, #4]
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052dc:	4659      	mov	r1, fp
 80052de:	00cb      	lsls	r3, r1, #3
 80052e0:	4651      	mov	r1, sl
 80052e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052e6:	4651      	mov	r1, sl
 80052e8:	00ca      	lsls	r2, r1, #3
 80052ea:	4610      	mov	r0, r2
 80052ec:	4619      	mov	r1, r3
 80052ee:	4603      	mov	r3, r0
 80052f0:	4642      	mov	r2, r8
 80052f2:	189b      	adds	r3, r3, r2
 80052f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052f6:	464b      	mov	r3, r9
 80052f8:	460a      	mov	r2, r1
 80052fa:	eb42 0303 	adc.w	r3, r2, r3
 80052fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	663b      	str	r3, [r7, #96]	@ 0x60
 800530a:	667a      	str	r2, [r7, #100]	@ 0x64
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005318:	4649      	mov	r1, r9
 800531a:	008b      	lsls	r3, r1, #2
 800531c:	4641      	mov	r1, r8
 800531e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005322:	4641      	mov	r1, r8
 8005324:	008a      	lsls	r2, r1, #2
 8005326:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800532a:	f7fb fce5 	bl	8000cf8 <__aeabi_uldivmod>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4b0d      	ldr	r3, [pc, #52]	@ (8005368 <UART_SetConfig+0x4e4>)
 8005334:	fba3 1302 	umull	r1, r3, r3, r2
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	2164      	movs	r1, #100	@ 0x64
 800533c:	fb01 f303 	mul.w	r3, r1, r3
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	3332      	adds	r3, #50	@ 0x32
 8005346:	4a08      	ldr	r2, [pc, #32]	@ (8005368 <UART_SetConfig+0x4e4>)
 8005348:	fba2 2303 	umull	r2, r3, r2, r3
 800534c:	095b      	lsrs	r3, r3, #5
 800534e:	f003 020f 	and.w	r2, r3, #15
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4422      	add	r2, r4
 800535a:	609a      	str	r2, [r3, #8]
}
 800535c:	bf00      	nop
 800535e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005362:	46bd      	mov	sp, r7
 8005364:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005368:	51eb851f 	.word	0x51eb851f

0800536c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f103 0208 	add.w	r2, r3, #8
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f04f 32ff 	mov.w	r2, #4294967295
 8005384:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f103 0208 	add.w	r2, r3, #8
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f103 0208 	add.w	r2, r3, #8
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80053a0:	f240 1019 	movw	r0, #281	@ 0x119
 80053a4:	f003 fdfc 	bl	8008fa0 <SEGGER_SYSVIEW_RecordEndCall>
}
 80053a8:	bf00      	nop
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80053be:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80053c2:	f003 fded 	bl	8008fa0 <SEGGER_SYSVIEW_RecordEndCall>
}
 80053c6:	bf00      	nop
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b084      	sub	sp, #16
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e4:	d103      	bne.n	80053ee <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	e00c      	b.n	8005408 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3308      	adds	r3, #8
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	e002      	b.n	80053fc <vListInsert+0x2e>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	429a      	cmp	r2, r3
 8005406:	d2f6      	bcs.n	80053f6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8005434:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8005438:	f003 fdb2 	bl	8008fa0 <SEGGER_SYSVIEW_RecordEndCall>
}
 800543c:	bf00      	nop
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6892      	ldr	r2, [r2, #8]
 800545a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6852      	ldr	r2, [r2, #4]
 8005464:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	429a      	cmp	r2, r3
 800546e:	d103      	bne.n	8005478 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	1e5a      	subs	r2, r3, #1
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4619      	mov	r1, r3
 800548e:	f240 101d 	movw	r0, #285	@ 0x11d
 8005492:	f003 fdc1 	bl	8009018 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b08a      	sub	sp, #40	@ 0x28
 80054a6:	af04      	add	r7, sp, #16
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
 80054ae:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4618      	mov	r0, r3
 80054b6:	f001 f9a3 	bl	8006800 <pvPortMalloc>
 80054ba:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d013      	beq.n	80054ea <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80054c2:	2058      	movs	r0, #88	@ 0x58
 80054c4:	f001 f99c 	bl	8006800 <pvPortMalloc>
 80054c8:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d008      	beq.n	80054e2 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80054d0:	2258      	movs	r2, #88	@ 0x58
 80054d2:	2100      	movs	r1, #0
 80054d4:	6978      	ldr	r0, [r7, #20]
 80054d6:	f005 f967 	bl	800a7a8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	631a      	str	r2, [r3, #48]	@ 0x30
 80054e0:	e005      	b.n	80054ee <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80054e2:	6938      	ldr	r0, [r7, #16]
 80054e4:	f001 fabe 	bl	8006a64 <vPortFree>
 80054e8:	e001      	b.n	80054ee <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00d      	beq.n	8005510 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054f4:	2300      	movs	r3, #0
 80054f6:	9303      	str	r3, [sp, #12]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	9302      	str	r3, [sp, #8]
 80054fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fe:	9301      	str	r3, [sp, #4]
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	68b9      	ldr	r1, [r7, #8]
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 f82d 	bl	800556a <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8005510:	697b      	ldr	r3, [r7, #20]
    }
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800551a:	b580      	push	{r7, lr}
 800551c:	b088      	sub	sp, #32
 800551e:	af02      	add	r7, sp, #8
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
 8005526:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8005528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552a:	9301      	str	r3, [sp, #4]
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f7ff ffb3 	bl	80054a2 <prvCreateTask>
 800553c:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8005544:	6938      	ldr	r0, [r7, #16]
 8005546:	f000 f8a1 	bl	800568c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800554a:	2301      	movs	r3, #1
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	e002      	b.n	8005556 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005550:	f04f 33ff 	mov.w	r3, #4294967295
 8005554:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	4619      	mov	r1, r3
 800555a:	20c2      	movs	r0, #194	@ 0xc2
 800555c:	f003 fd5c 	bl	8009018 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8005560:	697b      	ldr	r3, [r7, #20]
    }
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b088      	sub	sp, #32
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	461a      	mov	r2, r3
 8005582:	21a5      	movs	r1, #165	@ 0xa5
 8005584:	f005 f910 	bl	800a7a8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8005588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005592:	3b01      	subs	r3, #1
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	f023 0307 	bic.w	r3, r3, #7
 80055a0:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00b      	beq.n	80055c4 <prvInitialiseNewTask+0x5a>
    __asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	617b      	str	r3, [r7, #20]
}
 80055be:	bf00      	nop
 80055c0:	bf00      	nop
 80055c2:	e7fd      	b.n	80055c0 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d01e      	beq.n	8005608 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055ca:	2300      	movs	r3, #0
 80055cc:	61fb      	str	r3, [r7, #28]
 80055ce:	e012      	b.n	80055f6 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	4413      	add	r3, r2
 80055d6:	7819      	ldrb	r1, [r3, #0]
 80055d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	4413      	add	r3, r2
 80055de:	3334      	adds	r3, #52	@ 0x34
 80055e0:	460a      	mov	r2, r1
 80055e2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	4413      	add	r3, r2
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d006      	beq.n	80055fe <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	3301      	adds	r3, #1
 80055f4:	61fb      	str	r3, [r7, #28]
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	2b09      	cmp	r3, #9
 80055fa:	d9e9      	bls.n	80055d0 <prvInitialiseNewTask+0x66>
 80055fc:	e000      	b.n	8005600 <prvInitialiseNewTask+0x96>
            {
                break;
 80055fe:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8005600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560a:	2b04      	cmp	r3, #4
 800560c:	d90b      	bls.n	8005626 <prvInitialiseNewTask+0xbc>
    __asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	613b      	str	r3, [r7, #16]
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop
 8005624:	e7fd      	b.n	8005622 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005628:	2b04      	cmp	r3, #4
 800562a:	d901      	bls.n	8005630 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800562c:	2304      	movs	r3, #4
 800562e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005632:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005634:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8005636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005638:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800563a:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	3304      	adds	r3, #4
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff feb5 	bl	80053b0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005648:	3318      	adds	r3, #24
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff feb0 	bl	80053b0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005654:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8005656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005658:	f1c3 0205 	rsb	r2, r3, #5
 800565c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005664:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	68f9      	ldr	r1, [r7, #12]
 800566a:	69b8      	ldr	r0, [r7, #24]
 800566c:	f000 fd9e 	bl	80061ac <pxPortInitialiseStack>
 8005670:	4602      	mov	r2, r0
 8005672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005674:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8005676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800567c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005680:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005682:	bf00      	nop
 8005684:	3720      	adds	r7, #32
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800568c:	b5b0      	push	{r4, r5, r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af02      	add	r7, sp, #8
 8005692:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8005694:	f000 ff86 	bl	80065a4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8005698:	4b50      	ldr	r3, [pc, #320]	@ (80057dc <prvAddNewTaskToReadyList+0x150>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3301      	adds	r3, #1
 800569e:	4a4f      	ldr	r2, [pc, #316]	@ (80057dc <prvAddNewTaskToReadyList+0x150>)
 80056a0:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80056a2:	4b4f      	ldr	r3, [pc, #316]	@ (80057e0 <prvAddNewTaskToReadyList+0x154>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80056aa:	4a4d      	ldr	r2, [pc, #308]	@ (80057e0 <prvAddNewTaskToReadyList+0x154>)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056b0:	4b4a      	ldr	r3, [pc, #296]	@ (80057dc <prvAddNewTaskToReadyList+0x150>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d110      	bne.n	80056da <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80056b8:	f000 fc50 	bl	8005f5c <prvInitialiseTaskLists>
 80056bc:	e00d      	b.n	80056da <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80056be:	4b49      	ldr	r3, [pc, #292]	@ (80057e4 <prvAddNewTaskToReadyList+0x158>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d109      	bne.n	80056da <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056c6:	4b46      	ldr	r3, [pc, #280]	@ (80057e0 <prvAddNewTaskToReadyList+0x154>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d802      	bhi.n	80056da <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80056d4:	4a42      	ldr	r2, [pc, #264]	@ (80057e0 <prvAddNewTaskToReadyList+0x154>)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80056da:	4b43      	ldr	r3, [pc, #268]	@ (80057e8 <prvAddNewTaskToReadyList+0x15c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3301      	adds	r3, #1
 80056e0:	4a41      	ldr	r2, [pc, #260]	@ (80057e8 <prvAddNewTaskToReadyList+0x15c>)
 80056e2:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056e4:	4b40      	ldr	r3, [pc, #256]	@ (80057e8 <prvAddNewTaskToReadyList+0x15c>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d016      	beq.n	8005720 <prvAddNewTaskToReadyList+0x94>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f003 fd03 	bl	8009100 <SEGGER_SYSVIEW_OnTaskCreate>
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570a:	461d      	mov	r5, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	461c      	mov	r4, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005716:	1ae3      	subs	r3, r4, r3
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	462b      	mov	r3, r5
 800571c:	f001 fba0 	bl	8006e60 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4618      	mov	r0, r3
 8005724:	f003 fd70 	bl	8009208 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572c:	2201      	movs	r2, #1
 800572e:	409a      	lsls	r2, r3
 8005730:	4b2e      	ldr	r3, [pc, #184]	@ (80057ec <prvAddNewTaskToReadyList+0x160>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4313      	orrs	r3, r2
 8005736:	4a2d      	ldr	r2, [pc, #180]	@ (80057ec <prvAddNewTaskToReadyList+0x160>)
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800573e:	492c      	ldr	r1, [pc, #176]	@ (80057f0 <prvAddNewTaskToReadyList+0x164>)
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	3304      	adds	r3, #4
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	609a      	str	r2, [r3, #8]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60da      	str	r2, [r3, #12]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	3204      	adds	r2, #4
 8005766:	605a      	str	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	1d1a      	adds	r2, r3, #4
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	609a      	str	r2, [r3, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4a1c      	ldr	r2, [pc, #112]	@ (80057f0 <prvAddNewTaskToReadyList+0x164>)
 800577e:	441a      	add	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	615a      	str	r2, [r3, #20]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005788:	4919      	ldr	r1, [pc, #100]	@ (80057f0 <prvAddNewTaskToReadyList+0x164>)
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	440b      	add	r3, r1
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800579a:	1c59      	adds	r1, r3, #1
 800579c:	4814      	ldr	r0, [pc, #80]	@ (80057f0 <prvAddNewTaskToReadyList+0x164>)
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4403      	add	r3, r0
 80057a8:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80057aa:	f000 ff2d 	bl	8006608 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80057ae:	4b0d      	ldr	r3, [pc, #52]	@ (80057e4 <prvAddNewTaskToReadyList+0x158>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00e      	beq.n	80057d4 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80057b6:	4b0a      	ldr	r3, [pc, #40]	@ (80057e0 <prvAddNewTaskToReadyList+0x154>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d207      	bcs.n	80057d4 <prvAddNewTaskToReadyList+0x148>
 80057c4:	4b0b      	ldr	r3, [pc, #44]	@ (80057f4 <prvAddNewTaskToReadyList+0x168>)
 80057c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80057d4:	bf00      	nop
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bdb0      	pop	{r4, r5, r7, pc}
 80057dc:	200004b4 	.word	0x200004b4
 80057e0:	200003dc 	.word	0x200003dc
 80057e4:	200004c0 	.word	0x200004c0
 80057e8:	200004d0 	.word	0x200004d0
 80057ec:	200004bc 	.word	0x200004bc
 80057f0:	200003e0 	.word	0x200003e0
 80057f4:	e000ed04 	.word	0xe000ed04

080057f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d018      	beq.n	800583c <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 800580a:	f000 f8cb 	bl	80059a4 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 800580e:	4b14      	ldr	r3, [pc, #80]	@ (8005860 <vTaskDelay+0x68>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d00b      	beq.n	800582e <vTaskDelay+0x36>
    __asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	60bb      	str	r3, [r7, #8]
}
 8005828:	bf00      	nop
 800582a:	bf00      	nop
 800582c:	e7fd      	b.n	800582a <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800582e:	2100      	movs	r1, #0
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fc2d 	bl	8006090 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8005836:	f000 f8c3 	bl	80059c0 <xTaskResumeAll>
 800583a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d107      	bne.n	8005852 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8005842:	4b08      	ldr	r3, [pc, #32]	@ (8005864 <vTaskDelay+0x6c>)
 8005844:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8005852:	20c5      	movs	r0, #197	@ 0xc5
 8005854:	f003 fba4 	bl	8008fa0 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	200004dc 	.word	0x200004dc
 8005864:	e000ed04 	.word	0xe000ed04

08005868 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08a      	sub	sp, #40	@ 0x28
 800586c:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800586e:	2301      	movs	r3, #1
 8005870:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8005872:	2300      	movs	r3, #0
 8005874:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8005876:	2300      	movs	r3, #0
 8005878:	617b      	str	r3, [r7, #20]
 800587a:	e011      	b.n	80058a0 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800587c:	4a1c      	ldr	r2, [pc, #112]	@ (80058f0 <prvCreateIdleTasks+0x88>)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	4413      	add	r3, r2
 8005882:	7819      	ldrb	r1, [r3, #0]
 8005884:	1d3a      	adds	r2, r7, #4
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	4413      	add	r3, r2
 800588a:	460a      	mov	r2, r1
 800588c:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800588e:	1d3a      	adds	r2, r7, #4
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	4413      	add	r3, r2
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d006      	beq.n	80058a8 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	3301      	adds	r3, #1
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2b09      	cmp	r3, #9
 80058a4:	ddea      	ble.n	800587c <prvCreateIdleTasks+0x14>
 80058a6:	e000      	b.n	80058aa <prvCreateIdleTasks+0x42>
        {
            break;
 80058a8:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80058aa:	2300      	movs	r3, #0
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	e015      	b.n	80058dc <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80058b0:	4b10      	ldr	r3, [pc, #64]	@ (80058f4 <prvCreateIdleTasks+0x8c>)
 80058b2:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4a0f      	ldr	r2, [pc, #60]	@ (80058f8 <prvCreateIdleTasks+0x90>)
 80058ba:	4413      	add	r3, r2
 80058bc:	1d39      	adds	r1, r7, #4
 80058be:	9301      	str	r3, [sp, #4]
 80058c0:	2300      	movs	r3, #0
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	2300      	movs	r3, #0
 80058c6:	2282      	movs	r2, #130	@ 0x82
 80058c8:	6938      	ldr	r0, [r7, #16]
 80058ca:	f7ff fe26 	bl	800551a <xTaskCreate>
 80058ce:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d006      	beq.n	80058e4 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	3301      	adds	r3, #1
 80058da:	61bb      	str	r3, [r7, #24]
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	dde6      	ble.n	80058b0 <prvCreateIdleTasks+0x48>
 80058e2:	e000      	b.n	80058e6 <prvCreateIdleTasks+0x7e>
        {
            break;
 80058e4:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80058e6:	69fb      	ldr	r3, [r7, #28]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3720      	adds	r7, #32
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	0800ca00 	.word	0x0800ca00
 80058f4:	08005f2d 	.word	0x08005f2d
 80058f8:	200004d8 	.word	0x200004d8

080058fc <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8005902:	f7ff ffb1 	bl	8005868 <prvCreateIdleTasks>
 8005906:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d124      	bne.n	8005958 <vTaskStartScheduler+0x5c>
    __asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	60bb      	str	r3, [r7, #8]
}
 8005920:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8005922:	4b1a      	ldr	r3, [pc, #104]	@ (800598c <vTaskStartScheduler+0x90>)
 8005924:	f04f 32ff 	mov.w	r2, #4294967295
 8005928:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800592a:	4b19      	ldr	r3, [pc, #100]	@ (8005990 <vTaskStartScheduler+0x94>)
 800592c:	2201      	movs	r2, #1
 800592e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005930:	4b18      	ldr	r3, [pc, #96]	@ (8005994 <vTaskStartScheduler+0x98>)
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8005936:	4b18      	ldr	r3, [pc, #96]	@ (8005998 <vTaskStartScheduler+0x9c>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	4b18      	ldr	r3, [pc, #96]	@ (800599c <vTaskStartScheduler+0xa0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	429a      	cmp	r2, r3
 8005940:	d102      	bne.n	8005948 <vTaskStartScheduler+0x4c>
 8005942:	f003 fbc1 	bl	80090c8 <SEGGER_SYSVIEW_OnIdle>
 8005946:	e004      	b.n	8005952 <vTaskStartScheduler+0x56>
 8005948:	4b14      	ldr	r3, [pc, #80]	@ (800599c <vTaskStartScheduler+0xa0>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4618      	mov	r0, r3
 800594e:	f003 fc19 	bl	8009184 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8005952:	f000 fcb7 	bl	80062c4 <xPortStartScheduler>
 8005956:	e00f      	b.n	8005978 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595e:	d10b      	bne.n	8005978 <vTaskStartScheduler+0x7c>
    __asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	607b      	str	r3, [r7, #4]
}
 8005972:	bf00      	nop
 8005974:	bf00      	nop
 8005976:	e7fd      	b.n	8005974 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005978:	4b09      	ldr	r3, [pc, #36]	@ (80059a0 <vTaskStartScheduler+0xa4>)
 800597a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 800597c:	20cd      	movs	r0, #205	@ 0xcd
 800597e:	f003 fb0f 	bl	8008fa0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8005982:	bf00      	nop
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	200004d4 	.word	0x200004d4
 8005990:	200004c0 	.word	0x200004c0
 8005994:	200004b8 	.word	0x200004b8
 8005998:	200004d8 	.word	0x200004d8
 800599c:	200003dc 	.word	0x200003dc
 80059a0:	20000024 	.word	0x20000024

080059a4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80059a8:	4b04      	ldr	r3, [pc, #16]	@ (80059bc <vTaskSuspendAll+0x18>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3301      	adds	r3, #1
 80059ae:	4a03      	ldr	r2, [pc, #12]	@ (80059bc <vTaskSuspendAll+0x18>)
 80059b0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 80059b2:	20cf      	movs	r0, #207	@ 0xcf
 80059b4:	f003 faf4 	bl	8008fa0 <SEGGER_SYSVIEW_RecordEndCall>
}
 80059b8:	bf00      	nop
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	200004dc 	.word	0x200004dc

080059c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b088      	sub	sp, #32
 80059c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80059c6:	2300      	movs	r3, #0
 80059c8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80059ca:	2300      	movs	r3, #0
 80059cc:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80059ce:	f000 fde9 	bl	80065a4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80059d2:	2300      	movs	r3, #0
 80059d4:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80059d6:	4b7a      	ldr	r3, [pc, #488]	@ (8005bc0 <xTaskResumeAll+0x200>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10b      	bne.n	80059f6 <xTaskResumeAll+0x36>
    __asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	603b      	str	r3, [r7, #0]
}
 80059f0:	bf00      	nop
 80059f2:	bf00      	nop
 80059f4:	e7fd      	b.n	80059f2 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80059f6:	4b72      	ldr	r3, [pc, #456]	@ (8005bc0 <xTaskResumeAll+0x200>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	4a70      	ldr	r2, [pc, #448]	@ (8005bc0 <xTaskResumeAll+0x200>)
 80059fe:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005a00:	4b6f      	ldr	r3, [pc, #444]	@ (8005bc0 <xTaskResumeAll+0x200>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f040 80ce 	bne.w	8005ba6 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a0a:	4b6e      	ldr	r3, [pc, #440]	@ (8005bc4 <xTaskResumeAll+0x204>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 80c9 	beq.w	8005ba6 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a14:	e092      	b.n	8005b3c <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005a16:	4b6c      	ldr	r3, [pc, #432]	@ (8005bc8 <xTaskResumeAll+0x208>)
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	6a12      	ldr	r2, [r2, #32]
 8005a2c:	609a      	str	r2, [r3, #8]
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	69d2      	ldr	r2, [r2, #28]
 8005a36:	605a      	str	r2, [r3, #4]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	3318      	adds	r3, #24
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d103      	bne.n	8005a4c <xTaskResumeAll+0x8c>
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	6a1a      	ldr	r2, [r3, #32]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	605a      	str	r2, [r3, #4]
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	1e5a      	subs	r2, r3, #1
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	60bb      	str	r3, [r7, #8]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	68d2      	ldr	r2, [r2, #12]
 8005a6a:	609a      	str	r2, [r3, #8]
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	6892      	ldr	r2, [r2, #8]
 8005a74:	605a      	str	r2, [r3, #4]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d103      	bne.n	8005a8a <xTaskResumeAll+0xca>
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	605a      	str	r2, [r3, #4]
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	615a      	str	r2, [r3, #20]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	1e5a      	subs	r2, r3, #1
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f003 fbb3 	bl	8009208 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	409a      	lsls	r2, r3
 8005aaa:	4b48      	ldr	r3, [pc, #288]	@ (8005bcc <xTaskResumeAll+0x20c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	4a46      	ldr	r2, [pc, #280]	@ (8005bcc <xTaskResumeAll+0x20c>)
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ab8:	4945      	ldr	r1, [pc, #276]	@ (8005bd0 <xTaskResumeAll+0x210>)
 8005aba:	4613      	mov	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	440b      	add	r3, r1
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	607b      	str	r3, [r7, #4]
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	609a      	str	r2, [r3, #8]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	60da      	str	r2, [r3, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	3204      	adds	r2, #4
 8005ae0:	605a      	str	r2, [r3, #4]
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	1d1a      	adds	r2, r3, #4
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	609a      	str	r2, [r3, #8]
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4a36      	ldr	r2, [pc, #216]	@ (8005bd0 <xTaskResumeAll+0x210>)
 8005af8:	441a      	add	r2, r3
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	615a      	str	r2, [r3, #20]
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b02:	4933      	ldr	r1, [pc, #204]	@ (8005bd0 <xTaskResumeAll+0x210>)
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69fa      	ldr	r2, [r7, #28]
 8005b12:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005b14:	1c59      	adds	r1, r3, #1
 8005b16:	482e      	ldr	r0, [pc, #184]	@ (8005bd0 <xTaskResumeAll+0x210>)
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4403      	add	r3, r0
 8005b22:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b28:	4b2a      	ldr	r3, [pc, #168]	@ (8005bd4 <xTaskResumeAll+0x214>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d904      	bls.n	8005b3c <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8005b32:	4a29      	ldr	r2, [pc, #164]	@ (8005bd8 <xTaskResumeAll+0x218>)
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	2101      	movs	r1, #1
 8005b38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b3c:	4b22      	ldr	r3, [pc, #136]	@ (8005bc8 <xTaskResumeAll+0x208>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f47f af68 	bne.w	8005a16 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8005b4c:	f000 fa84 	bl	8006058 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b50:	4b22      	ldr	r3, [pc, #136]	@ (8005bdc <xTaskResumeAll+0x21c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d012      	beq.n	8005b82 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8005b5c:	f000 f858 	bl	8005c10 <xTaskIncrementTick>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d004      	beq.n	8005b70 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8005b66:	4a1c      	ldr	r2, [pc, #112]	@ (8005bd8 <xTaskResumeAll+0x218>)
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1ef      	bne.n	8005b5c <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8005b7c:	4b17      	ldr	r3, [pc, #92]	@ (8005bdc <xTaskResumeAll+0x21c>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8005b82:	4a15      	ldr	r2, [pc, #84]	@ (8005bd8 <xTaskResumeAll+0x218>)
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00b      	beq.n	8005ba6 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8005b92:	4b10      	ldr	r3, [pc, #64]	@ (8005bd4 <xTaskResumeAll+0x214>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4b12      	ldr	r3, [pc, #72]	@ (8005be0 <xTaskResumeAll+0x220>)
 8005b98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005ba6:	f000 fd2f 	bl	8006608 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	4619      	mov	r1, r3
 8005bae:	20d0      	movs	r0, #208	@ 0xd0
 8005bb0:	f003 fa32 	bl	8009018 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8005bb4:	69bb      	ldr	r3, [r7, #24]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3720      	adds	r7, #32
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	200004dc 	.word	0x200004dc
 8005bc4:	200004b4 	.word	0x200004b4
 8005bc8:	20000474 	.word	0x20000474
 8005bcc:	200004bc 	.word	0x200004bc
 8005bd0:	200003e0 	.word	0x200003e0
 8005bd4:	200003dc 	.word	0x200003dc
 8005bd8:	200004c8 	.word	0x200004c8
 8005bdc:	200004c4 	.word	0x200004c4
 8005be0:	e000ed04 	.word	0xe000ed04

08005be4 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bea:	f000 fdc7 	bl	800677c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005bee:	2300      	movs	r3, #0
 8005bf0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8005bf2:	4b06      	ldr	r3, [pc, #24]	@ (8005c0c <xTaskGetTickCountFromISR+0x28>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	20d2      	movs	r0, #210	@ 0xd2
 8005bfc:	f003 fa0c 	bl	8009018 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8005c00:	683b      	ldr	r3, [r7, #0]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	200004b8 	.word	0x200004b8

08005c10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08a      	sub	sp, #40	@ 0x28
 8005c14:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005c16:	2300      	movs	r3, #0
 8005c18:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005c1a:	4b83      	ldr	r3, [pc, #524]	@ (8005e28 <xTaskIncrementTick+0x218>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f040 80f3 	bne.w	8005e0a <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c24:	4b81      	ldr	r3, [pc, #516]	@ (8005e2c <xTaskIncrementTick+0x21c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005c2c:	4a7f      	ldr	r2, [pc, #508]	@ (8005e2c <xTaskIncrementTick+0x21c>)
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d121      	bne.n	8005c7c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8005c38:	4b7d      	ldr	r3, [pc, #500]	@ (8005e30 <xTaskIncrementTick+0x220>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00b      	beq.n	8005c5a <xTaskIncrementTick+0x4a>
    __asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	607b      	str	r3, [r7, #4]
}
 8005c54:	bf00      	nop
 8005c56:	bf00      	nop
 8005c58:	e7fd      	b.n	8005c56 <xTaskIncrementTick+0x46>
 8005c5a:	4b75      	ldr	r3, [pc, #468]	@ (8005e30 <xTaskIncrementTick+0x220>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	61fb      	str	r3, [r7, #28]
 8005c60:	4b74      	ldr	r3, [pc, #464]	@ (8005e34 <xTaskIncrementTick+0x224>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a72      	ldr	r2, [pc, #456]	@ (8005e30 <xTaskIncrementTick+0x220>)
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	4a72      	ldr	r2, [pc, #456]	@ (8005e34 <xTaskIncrementTick+0x224>)
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	4b72      	ldr	r3, [pc, #456]	@ (8005e38 <xTaskIncrementTick+0x228>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3301      	adds	r3, #1
 8005c74:	4a70      	ldr	r2, [pc, #448]	@ (8005e38 <xTaskIncrementTick+0x228>)
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	f000 f9ee 	bl	8006058 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005c7c:	4b6f      	ldr	r3, [pc, #444]	@ (8005e3c <xTaskIncrementTick+0x22c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6a3a      	ldr	r2, [r7, #32]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	f0c0 80ac 	bcc.w	8005de0 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c88:	4b69      	ldr	r3, [pc, #420]	@ (8005e30 <xTaskIncrementTick+0x220>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8005c92:	4b6a      	ldr	r3, [pc, #424]	@ (8005e3c <xTaskIncrementTick+0x22c>)
 8005c94:	f04f 32ff 	mov.w	r2, #4294967295
 8005c98:	601a      	str	r2, [r3, #0]
                    break;
 8005c9a:	e0a1      	b.n	8005de0 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c9c:	4b64      	ldr	r3, [pc, #400]	@ (8005e30 <xTaskIncrementTick+0x220>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005cac:	6a3a      	ldr	r2, [r7, #32]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d203      	bcs.n	8005cbc <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005cb4:	4a61      	ldr	r2, [pc, #388]	@ (8005e3c <xTaskIncrementTick+0x22c>)
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	6013      	str	r3, [r2, #0]
                        break;
 8005cba:	e091      	b.n	8005de0 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	613b      	str	r3, [r7, #16]
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	68d2      	ldr	r2, [r2, #12]
 8005cca:	609a      	str	r2, [r3, #8]
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	6892      	ldr	r2, [r2, #8]
 8005cd4:	605a      	str	r2, [r3, #4]
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d103      	bne.n	8005cea <xTaskIncrementTick+0xda>
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	605a      	str	r2, [r3, #4]
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	2200      	movs	r2, #0
 8005cee:	615a      	str	r2, [r3, #20]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	1e5a      	subs	r2, r3, #1
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d01e      	beq.n	8005d40 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	6a12      	ldr	r2, [r2, #32]
 8005d10:	609a      	str	r2, [r3, #8]
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	69d2      	ldr	r2, [r2, #28]
 8005d1a:	605a      	str	r2, [r3, #4]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	3318      	adds	r3, #24
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d103      	bne.n	8005d30 <xTaskIncrementTick+0x120>
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	6a1a      	ldr	r2, [r3, #32]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	605a      	str	r2, [r3, #4]
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	2200      	movs	r2, #0
 8005d34:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	1e5a      	subs	r2, r3, #1
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f003 fa60 	bl	8009208 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	409a      	lsls	r2, r3
 8005d50:	4b3b      	ldr	r3, [pc, #236]	@ (8005e40 <xTaskIncrementTick+0x230>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	4a3a      	ldr	r2, [pc, #232]	@ (8005e40 <xTaskIncrementTick+0x230>)
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d5e:	4939      	ldr	r1, [pc, #228]	@ (8005e44 <xTaskIncrementTick+0x234>)
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	440b      	add	r3, r1
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60bb      	str	r3, [r7, #8]
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	609a      	str	r2, [r3, #8]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	60da      	str	r2, [r3, #12]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	3204      	adds	r2, #4
 8005d86:	605a      	str	r2, [r3, #4]
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	1d1a      	adds	r2, r3, #4
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	609a      	str	r2, [r3, #8]
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4a29      	ldr	r2, [pc, #164]	@ (8005e44 <xTaskIncrementTick+0x234>)
 8005d9e:	441a      	add	r2, r3
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	615a      	str	r2, [r3, #20]
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da8:	4926      	ldr	r1, [pc, #152]	@ (8005e44 <xTaskIncrementTick+0x234>)
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005dba:	1c59      	adds	r1, r3, #1
 8005dbc:	4821      	ldr	r0, [pc, #132]	@ (8005e44 <xTaskIncrementTick+0x234>)
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4403      	add	r3, r0
 8005dc8:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dce:	4b1e      	ldr	r3, [pc, #120]	@ (8005e48 <xTaskIncrementTick+0x238>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	f67f af57 	bls.w	8005c88 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dde:	e753      	b.n	8005c88 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8005de0:	4b19      	ldr	r3, [pc, #100]	@ (8005e48 <xTaskIncrementTick+0x238>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de6:	4917      	ldr	r1, [pc, #92]	@ (8005e44 <xTaskIncrementTick+0x234>)
 8005de8:	4613      	mov	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	440b      	add	r3, r1
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d901      	bls.n	8005dfc <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8005dfc:	4b13      	ldr	r3, [pc, #76]	@ (8005e4c <xTaskIncrementTick+0x23c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d007      	beq.n	8005e14 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8005e04:	2301      	movs	r3, #1
 8005e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e08:	e004      	b.n	8005e14 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8005e0a:	4b11      	ldr	r3, [pc, #68]	@ (8005e50 <xTaskIncrementTick+0x240>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	4a0f      	ldr	r2, [pc, #60]	@ (8005e50 <xTaskIncrementTick+0x240>)
 8005e12:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	4619      	mov	r1, r3
 8005e18:	20db      	movs	r0, #219	@ 0xdb
 8005e1a:	f003 f8fd 	bl	8009018 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3728      	adds	r7, #40	@ 0x28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	200004dc 	.word	0x200004dc
 8005e2c:	200004b8 	.word	0x200004b8
 8005e30:	2000046c 	.word	0x2000046c
 8005e34:	20000470 	.word	0x20000470
 8005e38:	200004cc 	.word	0x200004cc
 8005e3c:	200004d4 	.word	0x200004d4
 8005e40:	200004bc 	.word	0x200004bc
 8005e44:	200003e0 	.word	0x200003e0
 8005e48:	200003dc 	.word	0x200003dc
 8005e4c:	200004c8 	.word	0x200004c8
 8005e50:	200004c4 	.word	0x200004c4

08005e54 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8005e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8005f14 <vTaskSwitchContext+0xc0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8005e62:	4b2d      	ldr	r3, [pc, #180]	@ (8005f18 <vTaskSwitchContext+0xc4>)
 8005e64:	2201      	movs	r2, #1
 8005e66:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8005e68:	e04f      	b.n	8005f0a <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8005e6a:	4b2b      	ldr	r3, [pc, #172]	@ (8005f18 <vTaskSwitchContext+0xc4>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8005e70:	4b2a      	ldr	r3, [pc, #168]	@ (8005f1c <vTaskSwitchContext+0xc8>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	fab3 f383 	clz	r3, r3
 8005e7c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8005e7e:	7afb      	ldrb	r3, [r7, #11]
 8005e80:	f1c3 031f 	rsb	r3, r3, #31
 8005e84:	617b      	str	r3, [r7, #20]
 8005e86:	4926      	ldr	r1, [pc, #152]	@ (8005f20 <vTaskSwitchContext+0xcc>)
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	440b      	add	r3, r1
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10b      	bne.n	8005eb2 <vTaskSwitchContext+0x5e>
    __asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	607b      	str	r3, [r7, #4]
}
 8005eac:	bf00      	nop
 8005eae:	bf00      	nop
 8005eb0:	e7fd      	b.n	8005eae <vTaskSwitchContext+0x5a>
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4a18      	ldr	r2, [pc, #96]	@ (8005f20 <vTaskSwitchContext+0xcc>)
 8005ebe:	4413      	add	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	605a      	str	r2, [r3, #4]
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d103      	bne.n	8005ee0 <vTaskSwitchContext+0x8c>
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	605a      	str	r2, [r3, #4]
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8005f24 <vTaskSwitchContext+0xd0>)
 8005ee8:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8005eea:	4b0f      	ldr	r3, [pc, #60]	@ (8005f28 <vTaskSwitchContext+0xd4>)
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	4b0d      	ldr	r3, [pc, #52]	@ (8005f24 <vTaskSwitchContext+0xd0>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d102      	bne.n	8005efc <vTaskSwitchContext+0xa8>
 8005ef6:	f003 f8e7 	bl	80090c8 <SEGGER_SYSVIEW_OnIdle>
 8005efa:	e004      	b.n	8005f06 <vTaskSwitchContext+0xb2>
 8005efc:	4b09      	ldr	r3, [pc, #36]	@ (8005f24 <vTaskSwitchContext+0xd0>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f003 f93f 	bl	8009184 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8005f06:	4b07      	ldr	r3, [pc, #28]	@ (8005f24 <vTaskSwitchContext+0xd0>)
 8005f08:	681b      	ldr	r3, [r3, #0]
    }
 8005f0a:	bf00      	nop
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	200004dc 	.word	0x200004dc
 8005f18:	200004c8 	.word	0x200004c8
 8005f1c:	200004bc 	.word	0x200004bc
 8005f20:	200003e0 	.word	0x200003e0
 8005f24:	200003dc 	.word	0x200003dc
 8005f28:	200004d8 	.word	0x200004d8

08005f2c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005f34:	f000 f852 	bl	8005fdc <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8005f38:	4b06      	ldr	r3, [pc, #24]	@ (8005f54 <prvIdleTask+0x28>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d9f9      	bls.n	8005f34 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005f40:	4b05      	ldr	r3, [pc, #20]	@ (8005f58 <prvIdleTask+0x2c>)
 8005f42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005f50:	e7f0      	b.n	8005f34 <prvIdleTask+0x8>
 8005f52:	bf00      	nop
 8005f54:	200003e0 	.word	0x200003e0
 8005f58:	e000ed04 	.word	0xe000ed04

08005f5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f62:	2300      	movs	r3, #0
 8005f64:	607b      	str	r3, [r7, #4]
 8005f66:	e00c      	b.n	8005f82 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4a12      	ldr	r2, [pc, #72]	@ (8005fbc <prvInitialiseTaskLists+0x60>)
 8005f74:	4413      	add	r3, r2
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff f9f8 	bl	800536c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	607b      	str	r3, [r7, #4]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d9ef      	bls.n	8005f68 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005f88:	480d      	ldr	r0, [pc, #52]	@ (8005fc0 <prvInitialiseTaskLists+0x64>)
 8005f8a:	f7ff f9ef 	bl	800536c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005f8e:	480d      	ldr	r0, [pc, #52]	@ (8005fc4 <prvInitialiseTaskLists+0x68>)
 8005f90:	f7ff f9ec 	bl	800536c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005f94:	480c      	ldr	r0, [pc, #48]	@ (8005fc8 <prvInitialiseTaskLists+0x6c>)
 8005f96:	f7ff f9e9 	bl	800536c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005f9a:	480c      	ldr	r0, [pc, #48]	@ (8005fcc <prvInitialiseTaskLists+0x70>)
 8005f9c:	f7ff f9e6 	bl	800536c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005fa0:	480b      	ldr	r0, [pc, #44]	@ (8005fd0 <prvInitialiseTaskLists+0x74>)
 8005fa2:	f7ff f9e3 	bl	800536c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd4 <prvInitialiseTaskLists+0x78>)
 8005fa8:	4a05      	ldr	r2, [pc, #20]	@ (8005fc0 <prvInitialiseTaskLists+0x64>)
 8005faa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fac:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd8 <prvInitialiseTaskLists+0x7c>)
 8005fae:	4a05      	ldr	r2, [pc, #20]	@ (8005fc4 <prvInitialiseTaskLists+0x68>)
 8005fb0:	601a      	str	r2, [r3, #0]
}
 8005fb2:	bf00      	nop
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	200003e0 	.word	0x200003e0
 8005fc0:	20000444 	.word	0x20000444
 8005fc4:	20000458 	.word	0x20000458
 8005fc8:	20000474 	.word	0x20000474
 8005fcc:	20000488 	.word	0x20000488
 8005fd0:	200004a0 	.word	0x200004a0
 8005fd4:	2000046c 	.word	0x2000046c
 8005fd8:	20000470 	.word	0x20000470

08005fdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fe2:	e019      	b.n	8006018 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8005fe4:	f000 fade 	bl	80065a4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005fe8:	4b10      	ldr	r3, [pc, #64]	@ (800602c <prvCheckTasksWaitingTermination+0x50>)
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff fa25 	bl	8005444 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8005ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8006030 <prvCheckTasksWaitingTermination+0x54>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	4a0b      	ldr	r2, [pc, #44]	@ (8006030 <prvCheckTasksWaitingTermination+0x54>)
 8006002:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8006004:	4b0b      	ldr	r3, [pc, #44]	@ (8006034 <prvCheckTasksWaitingTermination+0x58>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3b01      	subs	r3, #1
 800600a:	4a0a      	ldr	r2, [pc, #40]	@ (8006034 <prvCheckTasksWaitingTermination+0x58>)
 800600c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800600e:	f000 fafb 	bl	8006608 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f810 	bl	8006038 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006018:	4b06      	ldr	r3, [pc, #24]	@ (8006034 <prvCheckTasksWaitingTermination+0x58>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1e1      	bne.n	8005fe4 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8006020:	bf00      	nop
 8006022:	bf00      	nop
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20000488 	.word	0x20000488
 8006030:	200004b4 	.word	0x200004b4
 8006034:	2000049c 	.word	0x2000049c

08006038 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fd0d 	bl	8006a64 <vPortFree>
            vPortFree( pxTCB );
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fd0a 	bl	8006a64 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006058:	b480      	push	{r7}
 800605a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800605c:	4b0a      	ldr	r3, [pc, #40]	@ (8006088 <prvResetNextTaskUnblockTime+0x30>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d104      	bne.n	8006070 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006066:	4b09      	ldr	r3, [pc, #36]	@ (800608c <prvResetNextTaskUnblockTime+0x34>)
 8006068:	f04f 32ff 	mov.w	r2, #4294967295
 800606c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800606e:	e005      	b.n	800607c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006070:	4b05      	ldr	r3, [pc, #20]	@ (8006088 <prvResetNextTaskUnblockTime+0x30>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a04      	ldr	r2, [pc, #16]	@ (800608c <prvResetNextTaskUnblockTime+0x34>)
 800607a:	6013      	str	r3, [r2, #0]
}
 800607c:	bf00      	nop
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	2000046c 	.word	0x2000046c
 800608c:	200004d4 	.word	0x200004d4

08006090 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800609a:	4b3d      	ldr	r3, [pc, #244]	@ (8006190 <prvAddCurrentTaskToDelayedList+0x100>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80060a0:	4b3c      	ldr	r3, [pc, #240]	@ (8006194 <prvAddCurrentTaskToDelayedList+0x104>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80060a6:	4b3c      	ldr	r3, [pc, #240]	@ (8006198 <prvAddCurrentTaskToDelayedList+0x108>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060ac:	4b3b      	ldr	r3, [pc, #236]	@ (800619c <prvAddCurrentTaskToDelayedList+0x10c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3304      	adds	r3, #4
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7ff f9c6 	bl	8005444 <uxListRemove>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10b      	bne.n	80060d6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80060be:	4b37      	ldr	r3, [pc, #220]	@ (800619c <prvAddCurrentTaskToDelayedList+0x10c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c4:	2201      	movs	r2, #1
 80060c6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ca:	43da      	mvns	r2, r3
 80060cc:	4b34      	ldr	r3, [pc, #208]	@ (80061a0 <prvAddCurrentTaskToDelayedList+0x110>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4013      	ands	r3, r2
 80060d2:	4a33      	ldr	r2, [pc, #204]	@ (80061a0 <prvAddCurrentTaskToDelayedList+0x110>)
 80060d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060dc:	d124      	bne.n	8006128 <prvAddCurrentTaskToDelayedList+0x98>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d021      	beq.n	8006128 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060e4:	4b2f      	ldr	r3, [pc, #188]	@ (80061a4 <prvAddCurrentTaskToDelayedList+0x114>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	613b      	str	r3, [r7, #16]
 80060ea:	4b2c      	ldr	r3, [pc, #176]	@ (800619c <prvAddCurrentTaskToDelayedList+0x10c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	609a      	str	r2, [r3, #8]
 80060f2:	4b2a      	ldr	r3, [pc, #168]	@ (800619c <prvAddCurrentTaskToDelayedList+0x10c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	6892      	ldr	r2, [r2, #8]
 80060fa:	60da      	str	r2, [r3, #12]
 80060fc:	4b27      	ldr	r3, [pc, #156]	@ (800619c <prvAddCurrentTaskToDelayedList+0x10c>)
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	3204      	adds	r2, #4
 8006106:	605a      	str	r2, [r3, #4]
 8006108:	4b24      	ldr	r3, [pc, #144]	@ (800619c <prvAddCurrentTaskToDelayedList+0x10c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	1d1a      	adds	r2, r3, #4
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	609a      	str	r2, [r3, #8]
 8006112:	4b22      	ldr	r3, [pc, #136]	@ (800619c <prvAddCurrentTaskToDelayedList+0x10c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a23      	ldr	r2, [pc, #140]	@ (80061a4 <prvAddCurrentTaskToDelayedList+0x114>)
 8006118:	615a      	str	r2, [r3, #20]
 800611a:	4b22      	ldr	r3, [pc, #136]	@ (80061a4 <prvAddCurrentTaskToDelayedList+0x114>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3301      	adds	r3, #1
 8006120:	4a20      	ldr	r2, [pc, #128]	@ (80061a4 <prvAddCurrentTaskToDelayedList+0x114>)
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006126:	e02e      	b.n	8006186 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4413      	add	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006130:	4b1a      	ldr	r3, [pc, #104]	@ (800619c <prvAddCurrentTaskToDelayedList+0x10c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	429a      	cmp	r2, r3
 800613e:	d20d      	bcs.n	800615c <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8006140:	4b16      	ldr	r3, [pc, #88]	@ (800619c <prvAddCurrentTaskToDelayedList+0x10c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2104      	movs	r1, #4
 8006146:	4618      	mov	r0, r3
 8006148:	f003 f8a0 	bl	800928c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800614c:	4b13      	ldr	r3, [pc, #76]	@ (800619c <prvAddCurrentTaskToDelayedList+0x10c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3304      	adds	r3, #4
 8006152:	4619      	mov	r1, r3
 8006154:	6978      	ldr	r0, [r7, #20]
 8006156:	f7ff f93a 	bl	80053ce <vListInsert>
}
 800615a:	e014      	b.n	8006186 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 800615c:	4b0f      	ldr	r3, [pc, #60]	@ (800619c <prvAddCurrentTaskToDelayedList+0x10c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2104      	movs	r1, #4
 8006162:	4618      	mov	r0, r3
 8006164:	f003 f892 	bl	800928c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8006168:	4b0c      	ldr	r3, [pc, #48]	@ (800619c <prvAddCurrentTaskToDelayedList+0x10c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3304      	adds	r3, #4
 800616e:	4619      	mov	r1, r3
 8006170:	69b8      	ldr	r0, [r7, #24]
 8006172:	f7ff f92c 	bl	80053ce <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8006176:	4b0c      	ldr	r3, [pc, #48]	@ (80061a8 <prvAddCurrentTaskToDelayedList+0x118>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	429a      	cmp	r2, r3
 800617e:	d202      	bcs.n	8006186 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8006180:	4a09      	ldr	r2, [pc, #36]	@ (80061a8 <prvAddCurrentTaskToDelayedList+0x118>)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6013      	str	r3, [r2, #0]
}
 8006186:	bf00      	nop
 8006188:	3720      	adds	r7, #32
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	200004b8 	.word	0x200004b8
 8006194:	2000046c 	.word	0x2000046c
 8006198:	20000470 	.word	0x20000470
 800619c:	200003dc 	.word	0x200003dc
 80061a0:	200004bc 	.word	0x200004bc
 80061a4:	200004a0 	.word	0x200004a0
 80061a8:	200004d4 	.word	0x200004d4

080061ac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3b04      	subs	r3, #4
 80061bc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3b04      	subs	r3, #4
 80061ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f023 0201 	bic.w	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3b04      	subs	r3, #4
 80061da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80061dc:	4a0c      	ldr	r2, [pc, #48]	@ (8006210 <pxPortInitialiseStack+0x64>)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3b14      	subs	r3, #20
 80061e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3b04      	subs	r3, #4
 80061f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f06f 0202 	mvn.w	r2, #2
 80061fa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3b20      	subs	r3, #32
 8006200:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006202:	68fb      	ldr	r3, [r7, #12]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	08006215 	.word	0x08006215

08006214 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800621a:	2300      	movs	r3, #0
 800621c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800621e:	4b13      	ldr	r3, [pc, #76]	@ (800626c <prvTaskExitError+0x58>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006226:	d00b      	beq.n	8006240 <prvTaskExitError+0x2c>
    __asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	60fb      	str	r3, [r7, #12]
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	e7fd      	b.n	800623c <prvTaskExitError+0x28>
    __asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	60bb      	str	r3, [r7, #8]
}
 8006252:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006254:	bf00      	nop
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0fc      	beq.n	8006256 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800625c:	bf00      	nop
 800625e:	bf00      	nop
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	20000028 	.word	0x20000028

08006270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006270:	4b07      	ldr	r3, [pc, #28]	@ (8006290 <pxCurrentTCBConst2>)
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	6808      	ldr	r0, [r1, #0]
 8006276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627a:	f380 8809 	msr	PSP, r0
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f380 8811 	msr	BASEPRI, r0
 800628a:	4770      	bx	lr
 800628c:	f3af 8000 	nop.w

08006290 <pxCurrentTCBConst2>:
 8006290:	200003dc 	.word	0x200003dc
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop

08006298 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006298:	4808      	ldr	r0, [pc, #32]	@ (80062bc <prvPortStartFirstTask+0x24>)
 800629a:	6800      	ldr	r0, [r0, #0]
 800629c:	6800      	ldr	r0, [r0, #0]
 800629e:	f380 8808 	msr	MSP, r0
 80062a2:	f04f 0000 	mov.w	r0, #0
 80062a6:	f380 8814 	msr	CONTROL, r0
 80062aa:	b662      	cpsie	i
 80062ac:	b661      	cpsie	f
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	df00      	svc	0
 80062b8:	bf00      	nop
 80062ba:	0000      	.short	0x0000
 80062bc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80062c0:	bf00      	nop
 80062c2:	bf00      	nop

080062c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08c      	sub	sp, #48	@ 0x30
 80062c8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062ca:	4b69      	ldr	r3, [pc, #420]	@ (8006470 <xPortStartScheduler+0x1ac>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a69      	ldr	r2, [pc, #420]	@ (8006474 <xPortStartScheduler+0x1b0>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d10b      	bne.n	80062ec <xPortStartScheduler+0x28>
    __asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80062e6:	bf00      	nop
 80062e8:	bf00      	nop
 80062ea:	e7fd      	b.n	80062e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062ec:	4b60      	ldr	r3, [pc, #384]	@ (8006470 <xPortStartScheduler+0x1ac>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a61      	ldr	r2, [pc, #388]	@ (8006478 <xPortStartScheduler+0x1b4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d10b      	bne.n	800630e <xPortStartScheduler+0x4a>
    __asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	623b      	str	r3, [r7, #32]
}
 8006308:	bf00      	nop
 800630a:	bf00      	nop
 800630c:	e7fd      	b.n	800630a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800630e:	4b5b      	ldr	r3, [pc, #364]	@ (800647c <xPortStartScheduler+0x1b8>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8006314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006316:	332c      	adds	r3, #44	@ 0x2c
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a59      	ldr	r2, [pc, #356]	@ (8006480 <xPortStartScheduler+0x1bc>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d00b      	beq.n	8006338 <xPortStartScheduler+0x74>
    __asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	61fb      	str	r3, [r7, #28]
}
 8006332:	bf00      	nop
 8006334:	bf00      	nop
 8006336:	e7fd      	b.n	8006334 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8006338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633a:	3338      	adds	r3, #56	@ 0x38
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a51      	ldr	r2, [pc, #324]	@ (8006484 <xPortStartScheduler+0x1c0>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00b      	beq.n	800635c <xPortStartScheduler+0x98>
    __asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	61bb      	str	r3, [r7, #24]
}
 8006356:	bf00      	nop
 8006358:	bf00      	nop
 800635a:	e7fd      	b.n	8006358 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006360:	4b49      	ldr	r3, [pc, #292]	@ (8006488 <xPortStartScheduler+0x1c4>)
 8006362:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8006364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	b2db      	uxtb	r3, r3
 800636a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800636c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636e:	22ff      	movs	r2, #255	@ 0xff
 8006370:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800637a:	79fb      	ldrb	r3, [r7, #7]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006382:	b2da      	uxtb	r2, r3
 8006384:	4b41      	ldr	r3, [pc, #260]	@ (800648c <xPortStartScheduler+0x1c8>)
 8006386:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8006388:	4b40      	ldr	r3, [pc, #256]	@ (800648c <xPortStartScheduler+0x1c8>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10b      	bne.n	80063a8 <xPortStartScheduler+0xe4>
    __asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	617b      	str	r3, [r7, #20]
}
 80063a2:	bf00      	nop
 80063a4:	bf00      	nop
 80063a6:	e7fd      	b.n	80063a4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80063a8:	79fb      	ldrb	r3, [r7, #7]
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	43db      	mvns	r3, r3
 80063ae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d013      	beq.n	80063de <xPortStartScheduler+0x11a>
    __asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	613b      	str	r3, [r7, #16]
}
 80063c8:	bf00      	nop
 80063ca:	bf00      	nop
 80063cc:	e7fd      	b.n	80063ca <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	3301      	adds	r3, #1
 80063d2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063d4:	79fb      	ldrb	r3, [r7, #7]
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063de:	79fb      	ldrb	r3, [r7, #7]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063e6:	2b80      	cmp	r3, #128	@ 0x80
 80063e8:	d0f1      	beq.n	80063ce <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d103      	bne.n	80063f8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80063f0:	4b27      	ldr	r3, [pc, #156]	@ (8006490 <xPortStartScheduler+0x1cc>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	e004      	b.n	8006402 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f1c3 0307 	rsb	r3, r3, #7
 80063fe:	4a24      	ldr	r2, [pc, #144]	@ (8006490 <xPortStartScheduler+0x1cc>)
 8006400:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006402:	4b23      	ldr	r3, [pc, #140]	@ (8006490 <xPortStartScheduler+0x1cc>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	021b      	lsls	r3, r3, #8
 8006408:	4a21      	ldr	r2, [pc, #132]	@ (8006490 <xPortStartScheduler+0x1cc>)
 800640a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800640c:	4b20      	ldr	r3, [pc, #128]	@ (8006490 <xPortStartScheduler+0x1cc>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006414:	4a1e      	ldr	r2, [pc, #120]	@ (8006490 <xPortStartScheduler+0x1cc>)
 8006416:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	b2da      	uxtb	r2, r3
 800641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006420:	4b1c      	ldr	r3, [pc, #112]	@ (8006494 <xPortStartScheduler+0x1d0>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1b      	ldr	r2, [pc, #108]	@ (8006494 <xPortStartScheduler+0x1d0>)
 8006426:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800642a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800642c:	4b19      	ldr	r3, [pc, #100]	@ (8006494 <xPortStartScheduler+0x1d0>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a18      	ldr	r2, [pc, #96]	@ (8006494 <xPortStartScheduler+0x1d0>)
 8006432:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006436:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8006438:	4b17      	ldr	r3, [pc, #92]	@ (8006498 <xPortStartScheduler+0x1d4>)
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800643e:	f000 f96d 	bl	800671c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006442:	4b16      	ldr	r3, [pc, #88]	@ (800649c <xPortStartScheduler+0x1d8>)
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006448:	f000 f98c 	bl	8006764 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800644c:	4b14      	ldr	r3, [pc, #80]	@ (80064a0 <xPortStartScheduler+0x1dc>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a13      	ldr	r2, [pc, #76]	@ (80064a0 <xPortStartScheduler+0x1dc>)
 8006452:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006456:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006458:	f7ff ff1e 	bl	8006298 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800645c:	f7ff fcfa 	bl	8005e54 <vTaskSwitchContext>
    prvTaskExitError();
 8006460:	f7ff fed8 	bl	8006214 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3730      	adds	r7, #48	@ 0x30
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	e000ed00 	.word	0xe000ed00
 8006474:	410fc271 	.word	0x410fc271
 8006478:	410fc270 	.word	0x410fc270
 800647c:	e000ed08 	.word	0xe000ed08
 8006480:	08006271 	.word	0x08006271
 8006484:	08006661 	.word	0x08006661
 8006488:	e000e400 	.word	0xe000e400
 800648c:	200004e0 	.word	0x200004e0
 8006490:	200004e4 	.word	0x200004e4
 8006494:	e000ed20 	.word	0xe000ed20
 8006498:	e000ed1c 	.word	0xe000ed1c
 800649c:	20000028 	.word	0x20000028
 80064a0:	e000ef34 	.word	0xe000ef34

080064a4 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064aa:	4b38      	ldr	r3, [pc, #224]	@ (800658c <vInitPrioGroupValue+0xe8>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a38      	ldr	r2, [pc, #224]	@ (8006590 <vInitPrioGroupValue+0xec>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d10b      	bne.n	80064cc <vInitPrioGroupValue+0x28>
    __asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	613b      	str	r3, [r7, #16]
}
 80064c6:	bf00      	nop
 80064c8:	bf00      	nop
 80064ca:	e7fd      	b.n	80064c8 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064cc:	4b2f      	ldr	r3, [pc, #188]	@ (800658c <vInitPrioGroupValue+0xe8>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a30      	ldr	r2, [pc, #192]	@ (8006594 <vInitPrioGroupValue+0xf0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d10b      	bne.n	80064ee <vInitPrioGroupValue+0x4a>
    __asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	60fb      	str	r3, [r7, #12]
}
 80064e8:	bf00      	nop
 80064ea:	bf00      	nop
 80064ec:	e7fd      	b.n	80064ea <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064ee:	4b2a      	ldr	r3, [pc, #168]	@ (8006598 <vInitPrioGroupValue+0xf4>)
 80064f0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	22ff      	movs	r2, #255	@ 0xff
 80064fe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006510:	b2da      	uxtb	r2, r3
 8006512:	4b22      	ldr	r3, [pc, #136]	@ (800659c <vInitPrioGroupValue+0xf8>)
 8006514:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006516:	4b22      	ldr	r3, [pc, #136]	@ (80065a0 <vInitPrioGroupValue+0xfc>)
 8006518:	2207      	movs	r2, #7
 800651a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800651c:	e009      	b.n	8006532 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800651e:	4b20      	ldr	r3, [pc, #128]	@ (80065a0 <vInitPrioGroupValue+0xfc>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3b01      	subs	r3, #1
 8006524:	4a1e      	ldr	r2, [pc, #120]	@ (80065a0 <vInitPrioGroupValue+0xfc>)
 8006526:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	b2db      	uxtb	r3, r3
 8006530:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006532:	78fb      	ldrb	r3, [r7, #3]
 8006534:	b2db      	uxtb	r3, r3
 8006536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800653a:	2b80      	cmp	r3, #128	@ 0x80
 800653c:	d0ef      	beq.n	800651e <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800653e:	4b18      	ldr	r3, [pc, #96]	@ (80065a0 <vInitPrioGroupValue+0xfc>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f1c3 0307 	rsb	r3, r3, #7
 8006546:	2b04      	cmp	r3, #4
 8006548:	d00b      	beq.n	8006562 <vInitPrioGroupValue+0xbe>
    __asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	60bb      	str	r3, [r7, #8]
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	e7fd      	b.n	800655e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006562:	4b0f      	ldr	r3, [pc, #60]	@ (80065a0 <vInitPrioGroupValue+0xfc>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	021b      	lsls	r3, r3, #8
 8006568:	4a0d      	ldr	r2, [pc, #52]	@ (80065a0 <vInitPrioGroupValue+0xfc>)
 800656a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800656c:	4b0c      	ldr	r3, [pc, #48]	@ (80065a0 <vInitPrioGroupValue+0xfc>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006574:	4a0a      	ldr	r2, [pc, #40]	@ (80065a0 <vInitPrioGroupValue+0xfc>)
 8006576:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	b2da      	uxtb	r2, r3
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8006580:	bf00      	nop
 8006582:	371c      	adds	r7, #28
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	e000ed00 	.word	0xe000ed00
 8006590:	410fc271 	.word	0x410fc271
 8006594:	410fc270 	.word	0x410fc270
 8006598:	e000e400 	.word	0xe000e400
 800659c:	200004e0 	.word	0x200004e0
 80065a0:	200004e4 	.word	0x200004e4

080065a4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
    __asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	607b      	str	r3, [r7, #4]
}
 80065bc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80065be:	4b10      	ldr	r3, [pc, #64]	@ (8006600 <vPortEnterCritical+0x5c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3301      	adds	r3, #1
 80065c4:	4a0e      	ldr	r2, [pc, #56]	@ (8006600 <vPortEnterCritical+0x5c>)
 80065c6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80065c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006600 <vPortEnterCritical+0x5c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d110      	bne.n	80065f2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006604 <vPortEnterCritical+0x60>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00b      	beq.n	80065f2 <vPortEnterCritical+0x4e>
    __asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	603b      	str	r3, [r7, #0]
}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	e7fd      	b.n	80065ee <vPortEnterCritical+0x4a>
    }
}
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	20000028 	.word	0x20000028
 8006604:	e000ed04 	.word	0xe000ed04

08006608 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800660e:	4b12      	ldr	r3, [pc, #72]	@ (8006658 <vPortExitCritical+0x50>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10b      	bne.n	800662e <vPortExitCritical+0x26>
    __asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	607b      	str	r3, [r7, #4]
}
 8006628:	bf00      	nop
 800662a:	bf00      	nop
 800662c:	e7fd      	b.n	800662a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800662e:	4b0a      	ldr	r3, [pc, #40]	@ (8006658 <vPortExitCritical+0x50>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3b01      	subs	r3, #1
 8006634:	4a08      	ldr	r2, [pc, #32]	@ (8006658 <vPortExitCritical+0x50>)
 8006636:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006638:	4b07      	ldr	r3, [pc, #28]	@ (8006658 <vPortExitCritical+0x50>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d105      	bne.n	800664c <vPortExitCritical+0x44>
 8006640:	2300      	movs	r3, #0
 8006642:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800664a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	20000028 	.word	0x20000028
 800665c:	00000000 	.word	0x00000000

08006660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006660:	f3ef 8009 	mrs	r0, PSP
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	4b15      	ldr	r3, [pc, #84]	@ (80066c0 <pxCurrentTCBConst>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	f01e 0f10 	tst.w	lr, #16
 8006670:	bf08      	it	eq
 8006672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667a:	6010      	str	r0, [r2, #0]
 800667c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006680:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006684:	f380 8811 	msr	BASEPRI, r0
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f7ff fbe0 	bl	8005e54 <vTaskSwitchContext>
 8006694:	f04f 0000 	mov.w	r0, #0
 8006698:	f380 8811 	msr	BASEPRI, r0
 800669c:	bc09      	pop	{r0, r3}
 800669e:	6819      	ldr	r1, [r3, #0]
 80066a0:	6808      	ldr	r0, [r1, #0]
 80066a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a6:	f01e 0f10 	tst.w	lr, #16
 80066aa:	bf08      	it	eq
 80066ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066b0:	f380 8809 	msr	PSP, r0
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	f3af 8000 	nop.w

080066c0 <pxCurrentTCBConst>:
 80066c0:	200003dc 	.word	0x200003dc
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop

080066c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
    __asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	607b      	str	r3, [r7, #4]
}
 80066e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80066e2:	f002 fbe3 	bl	8008eac <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80066e6:	f7ff fa93 	bl	8005c10 <xTaskIncrementTick>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d006      	beq.n	80066fe <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80066f0:	f002 fc3a 	bl	8008f68 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066f4:	4b08      	ldr	r3, [pc, #32]	@ (8006718 <SysTick_Handler+0x50>)
 80066f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	e001      	b.n	8006702 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80066fe:	f002 fc17 	bl	8008f30 <SEGGER_SYSVIEW_RecordExitISR>
 8006702:	2300      	movs	r3, #0
 8006704:	603b      	str	r3, [r7, #0]
    __asm volatile
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	f383 8811 	msr	BASEPRI, r3
}
 800670c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006720:	4b0b      	ldr	r3, [pc, #44]	@ (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006726:	4b0b      	ldr	r3, [pc, #44]	@ (8006754 <vPortSetupTimerInterrupt+0x38>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800672c:	4b0a      	ldr	r3, [pc, #40]	@ (8006758 <vPortSetupTimerInterrupt+0x3c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a0a      	ldr	r2, [pc, #40]	@ (800675c <vPortSetupTimerInterrupt+0x40>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	099b      	lsrs	r3, r3, #6
 8006738:	4a09      	ldr	r2, [pc, #36]	@ (8006760 <vPortSetupTimerInterrupt+0x44>)
 800673a:	3b01      	subs	r3, #1
 800673c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800673e:	4b04      	ldr	r3, [pc, #16]	@ (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006740:	2207      	movs	r2, #7
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	e000e010 	.word	0xe000e010
 8006754:	e000e018 	.word	0xe000e018
 8006758:	20000018 	.word	0x20000018
 800675c:	10624dd3 	.word	0x10624dd3
 8006760:	e000e014 	.word	0xe000e014

08006764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006764:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006774 <vPortEnableVFP+0x10>
 8006768:	6801      	ldr	r1, [r0, #0]
 800676a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800676e:	6001      	str	r1, [r0, #0]
 8006770:	4770      	bx	lr
 8006772:	0000      	.short	0x0000
 8006774:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop

0800677c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006782:	f3ef 8305 	mrs	r3, IPSR
 8006786:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b0f      	cmp	r3, #15
 800678c:	d915      	bls.n	80067ba <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800678e:	4a18      	ldr	r2, [pc, #96]	@ (80067f0 <vPortValidateInterruptPriority+0x74>)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4413      	add	r3, r2
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006798:	4b16      	ldr	r3, [pc, #88]	@ (80067f4 <vPortValidateInterruptPriority+0x78>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	7afa      	ldrb	r2, [r7, #11]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d20b      	bcs.n	80067ba <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	607b      	str	r3, [r7, #4]
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop
 80067b8:	e7fd      	b.n	80067b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067ba:	4b0f      	ldr	r3, [pc, #60]	@ (80067f8 <vPortValidateInterruptPriority+0x7c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80067c2:	4b0e      	ldr	r3, [pc, #56]	@ (80067fc <vPortValidateInterruptPriority+0x80>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d90b      	bls.n	80067e2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	603b      	str	r3, [r7, #0]
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	e7fd      	b.n	80067de <vPortValidateInterruptPriority+0x62>
    }
 80067e2:	bf00      	nop
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	e000e3f0 	.word	0xe000e3f0
 80067f4:	200004e0 	.word	0x200004e0
 80067f8:	e000ed0c 	.word	0xe000ed0c
 80067fc:	200004e4 	.word	0x200004e4

08006800 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08e      	sub	sp, #56	@ 0x38
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006808:	2300      	movs	r3, #0
 800680a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d022      	beq.n	8006858 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8006812:	2308      	movs	r3, #8
 8006814:	43db      	mvns	r3, r3
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	429a      	cmp	r2, r3
 800681a:	d81b      	bhi.n	8006854 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800681c:	2208      	movs	r2, #8
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4413      	add	r3, r2
 8006822:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	2b00      	cmp	r3, #0
 800682c:	d014      	beq.n	8006858 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	f1c3 0308 	rsb	r3, r3, #8
 8006838:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800683a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683c:	43db      	mvns	r3, r3
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	429a      	cmp	r2, r3
 8006842:	d804      	bhi.n	800684e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006848:	4413      	add	r3, r2
 800684a:	607b      	str	r3, [r7, #4]
 800684c:	e004      	b.n	8006858 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	607b      	str	r3, [r7, #4]
 8006852:	e001      	b.n	8006858 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8006858:	f7ff f8a4 	bl	80059a4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800685c:	4b7a      	ldr	r3, [pc, #488]	@ (8006a48 <pvPortMalloc+0x248>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8006864:	f000 f978 	bl	8006b58 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	f2c0 80d3 	blt.w	8006a16 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 80cf 	beq.w	8006a16 <pvPortMalloc+0x216>
 8006878:	4b74      	ldr	r3, [pc, #464]	@ (8006a4c <pvPortMalloc+0x24c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	429a      	cmp	r2, r3
 8006880:	f200 80c9 	bhi.w	8006a16 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006884:	4b72      	ldr	r3, [pc, #456]	@ (8006a50 <pvPortMalloc+0x250>)
 8006886:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8006888:	4b71      	ldr	r3, [pc, #452]	@ (8006a50 <pvPortMalloc+0x250>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800688e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006890:	4a70      	ldr	r2, [pc, #448]	@ (8006a54 <pvPortMalloc+0x254>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d305      	bcc.n	80068a2 <pvPortMalloc+0xa2>
 8006896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006898:	4a6f      	ldr	r2, [pc, #444]	@ (8006a58 <pvPortMalloc+0x258>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d801      	bhi.n	80068a2 <pvPortMalloc+0xa2>
 800689e:	2301      	movs	r3, #1
 80068a0:	e000      	b.n	80068a4 <pvPortMalloc+0xa4>
 80068a2:	2300      	movs	r3, #0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d129      	bne.n	80068fc <pvPortMalloc+0xfc>
    __asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	623b      	str	r3, [r7, #32]
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	e7fd      	b.n	80068bc <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80068c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80068c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80068ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068cc:	4a61      	ldr	r2, [pc, #388]	@ (8006a54 <pvPortMalloc+0x254>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d305      	bcc.n	80068de <pvPortMalloc+0xde>
 80068d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068d4:	4a60      	ldr	r2, [pc, #384]	@ (8006a58 <pvPortMalloc+0x258>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d801      	bhi.n	80068de <pvPortMalloc+0xde>
 80068da:	2301      	movs	r3, #1
 80068dc:	e000      	b.n	80068e0 <pvPortMalloc+0xe0>
 80068de:	2300      	movs	r3, #0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10b      	bne.n	80068fc <pvPortMalloc+0xfc>
    __asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	61fb      	str	r3, [r7, #28]
}
 80068f6:	bf00      	nop
 80068f8:	bf00      	nop
 80068fa:	e7fd      	b.n	80068f8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80068fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	429a      	cmp	r2, r3
 8006904:	d903      	bls.n	800690e <pvPortMalloc+0x10e>
 8006906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1d8      	bne.n	80068c0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800690e:	4b4e      	ldr	r3, [pc, #312]	@ (8006a48 <pvPortMalloc+0x248>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006914:	429a      	cmp	r2, r3
 8006916:	d07e      	beq.n	8006a16 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8006918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2208      	movs	r2, #8
 800691e:	4413      	add	r3, r2
 8006920:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8006922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006924:	4a4b      	ldr	r2, [pc, #300]	@ (8006a54 <pvPortMalloc+0x254>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d305      	bcc.n	8006936 <pvPortMalloc+0x136>
 800692a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800692c:	4a4a      	ldr	r2, [pc, #296]	@ (8006a58 <pvPortMalloc+0x258>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d801      	bhi.n	8006936 <pvPortMalloc+0x136>
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <pvPortMalloc+0x138>
 8006936:	2300      	movs	r3, #0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10b      	bne.n	8006954 <pvPortMalloc+0x154>
    __asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	61bb      	str	r3, [r7, #24]
}
 800694e:	bf00      	nop
 8006950:	bf00      	nop
 8006952:	e7fd      	b.n	8006950 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800695c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	429a      	cmp	r2, r3
 8006964:	d90b      	bls.n	800697e <pvPortMalloc+0x17e>
    __asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	617b      	str	r3, [r7, #20]
}
 8006978:	bf00      	nop
 800697a:	bf00      	nop
 800697c:	e7fd      	b.n	800697a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800697e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	1ad2      	subs	r2, r2, r3
 8006986:	2308      	movs	r3, #8
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	429a      	cmp	r2, r3
 800698c:	d924      	bls.n	80069d8 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800698e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4413      	add	r3, r2
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	f003 0307 	and.w	r3, r3, #7
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00b      	beq.n	80069b8 <pvPortMalloc+0x1b8>
    __asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	613b      	str	r3, [r7, #16]
}
 80069b2:	bf00      	nop
 80069b4:	bf00      	nop
 80069b6:	e7fd      	b.n	80069b4 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	1ad2      	subs	r2, r2, r3
 80069c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80069c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80069ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d0:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80069d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069d6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069d8:	4b1c      	ldr	r3, [pc, #112]	@ (8006a4c <pvPortMalloc+0x24c>)
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	4a1a      	ldr	r2, [pc, #104]	@ (8006a4c <pvPortMalloc+0x24c>)
 80069e4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069e6:	4b19      	ldr	r3, [pc, #100]	@ (8006a4c <pvPortMalloc+0x24c>)
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	4b1c      	ldr	r3, [pc, #112]	@ (8006a5c <pvPortMalloc+0x25c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d203      	bcs.n	80069fa <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80069f2:	4b16      	ldr	r3, [pc, #88]	@ (8006a4c <pvPortMalloc+0x24c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a19      	ldr	r2, [pc, #100]	@ (8006a5c <pvPortMalloc+0x25c>)
 80069f8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80069fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a04:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006a0c:	4b14      	ldr	r3, [pc, #80]	@ (8006a60 <pvPortMalloc+0x260>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3301      	adds	r3, #1
 8006a12:	4a13      	ldr	r2, [pc, #76]	@ (8006a60 <pvPortMalloc+0x260>)
 8006a14:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006a16:	f7fe ffd3 	bl	80059c0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00b      	beq.n	8006a3c <pvPortMalloc+0x23c>
    __asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	60fb      	str	r3, [r7, #12]
}
 8006a36:	bf00      	nop
 8006a38:	bf00      	nop
 8006a3a:	e7fd      	b.n	8006a38 <pvPortMalloc+0x238>
    return pvReturn;
 8006a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3738      	adds	r7, #56	@ 0x38
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	200130f0 	.word	0x200130f0
 8006a4c:	200130f4 	.word	0x200130f4
 8006a50:	200130e8 	.word	0x200130e8
 8006a54:	200004e8 	.word	0x200004e8
 8006a58:	200130e7 	.word	0x200130e7
 8006a5c:	200130f8 	.word	0x200130f8
 8006a60:	200130fc 	.word	0x200130fc

08006a64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d064      	beq.n	8006b40 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006a76:	2308      	movs	r3, #8
 8006a78:	425b      	negs	r3, r3
 8006a7a:	69fa      	ldr	r2, [r7, #28]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	4a30      	ldr	r2, [pc, #192]	@ (8006b48 <vPortFree+0xe4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d305      	bcc.n	8006a98 <vPortFree+0x34>
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8006b4c <vPortFree+0xe8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d801      	bhi.n	8006a98 <vPortFree+0x34>
 8006a94:	2301      	movs	r3, #1
 8006a96:	e000      	b.n	8006a9a <vPortFree+0x36>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10b      	bne.n	8006ab6 <vPortFree+0x52>
    __asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	617b      	str	r3, [r7, #20]
}
 8006ab0:	bf00      	nop
 8006ab2:	bf00      	nop
 8006ab4:	e7fd      	b.n	8006ab2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	db0b      	blt.n	8006ad6 <vPortFree+0x72>
    __asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	613b      	str	r3, [r7, #16]
}
 8006ad0:	bf00      	nop
 8006ad2:	bf00      	nop
 8006ad4:	e7fd      	b.n	8006ad2 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00b      	beq.n	8006af6 <vPortFree+0x92>
    __asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	60fb      	str	r3, [r7, #12]
}
 8006af0:	bf00      	nop
 8006af2:	bf00      	nop
 8006af4:	e7fd      	b.n	8006af2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	0fdb      	lsrs	r3, r3, #31
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d01c      	beq.n	8006b40 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d118      	bne.n	8006b40 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8006b1a:	f7fe ff43 	bl	80059a4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	4b0b      	ldr	r3, [pc, #44]	@ (8006b50 <vPortFree+0xec>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4413      	add	r3, r2
 8006b28:	4a09      	ldr	r2, [pc, #36]	@ (8006b50 <vPortFree+0xec>)
 8006b2a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b2c:	69b8      	ldr	r0, [r7, #24]
 8006b2e:	f000 f86d 	bl	8006c0c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006b32:	4b08      	ldr	r3, [pc, #32]	@ (8006b54 <vPortFree+0xf0>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3301      	adds	r3, #1
 8006b38:	4a06      	ldr	r2, [pc, #24]	@ (8006b54 <vPortFree+0xf0>)
 8006b3a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006b3c:	f7fe ff40 	bl	80059c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006b40:	bf00      	nop
 8006b42:	3720      	adds	r7, #32
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	200004e8 	.word	0x200004e8
 8006b4c:	200130e7 	.word	0x200130e7
 8006b50:	200130f4 	.word	0x200130f4
 8006b54:	20013100 	.word	0x20013100

08006b58 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b5e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8006b62:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006b64:	4b24      	ldr	r3, [pc, #144]	@ (8006bf8 <prvHeapInit+0xa0>)
 8006b66:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f003 0307 	and.w	r3, r3, #7
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00c      	beq.n	8006b8c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	3307      	adds	r3, #7
 8006b76:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0307 	bic.w	r3, r3, #7
 8006b7e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	4a1c      	ldr	r2, [pc, #112]	@ (8006bf8 <prvHeapInit+0xa0>)
 8006b88:	4413      	add	r3, r2
 8006b8a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4a1b      	ldr	r2, [pc, #108]	@ (8006bfc <prvHeapInit+0xa4>)
 8006b90:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006b92:	4b1a      	ldr	r3, [pc, #104]	@ (8006bfc <prvHeapInit+0xa4>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8006ba0:	2208      	movs	r2, #8
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	1a9b      	subs	r3, r3, r2
 8006ba6:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f023 0307 	bic.w	r3, r3, #7
 8006bae:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a13      	ldr	r2, [pc, #76]	@ (8006c00 <prvHeapInit+0xa8>)
 8006bb4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006bb6:	4b12      	ldr	r3, [pc, #72]	@ (8006c00 <prvHeapInit+0xa8>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8006bbe:	4b10      	ldr	r3, [pc, #64]	@ (8006c00 <prvHeapInit+0xa8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	1ad2      	subs	r2, r2, r3
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8006bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006c00 <prvHeapInit+0xa8>)
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	4a08      	ldr	r2, [pc, #32]	@ (8006c04 <prvHeapInit+0xac>)
 8006be2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	4a07      	ldr	r2, [pc, #28]	@ (8006c08 <prvHeapInit+0xb0>)
 8006bea:	6013      	str	r3, [r2, #0]
}
 8006bec:	bf00      	nop
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	200004e8 	.word	0x200004e8
 8006bfc:	200130e8 	.word	0x200130e8
 8006c00:	200130f0 	.word	0x200130f0
 8006c04:	200130f8 	.word	0x200130f8
 8006c08:	200130f4 	.word	0x200130f4

08006c0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006c14:	4b36      	ldr	r3, [pc, #216]	@ (8006cf0 <prvInsertBlockIntoFreeList+0xe4>)
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	e002      	b.n	8006c20 <prvInsertBlockIntoFreeList+0x14>
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d8f7      	bhi.n	8006c1a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	4a30      	ldr	r2, [pc, #192]	@ (8006cf0 <prvInsertBlockIntoFreeList+0xe4>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d018      	beq.n	8006c64 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	4a2f      	ldr	r2, [pc, #188]	@ (8006cf4 <prvInsertBlockIntoFreeList+0xe8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d305      	bcc.n	8006c46 <prvInsertBlockIntoFreeList+0x3a>
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	4a2e      	ldr	r2, [pc, #184]	@ (8006cf8 <prvInsertBlockIntoFreeList+0xec>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d801      	bhi.n	8006c46 <prvInsertBlockIntoFreeList+0x3a>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e000      	b.n	8006c48 <prvInsertBlockIntoFreeList+0x3c>
 8006c46:	2300      	movs	r3, #0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10b      	bne.n	8006c64 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	60fb      	str	r3, [r7, #12]
}
 8006c5e:	bf00      	nop
 8006c60:	bf00      	nop
 8006c62:	e7fd      	b.n	8006c60 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	4413      	add	r3, r2
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d108      	bne.n	8006c88 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	441a      	add	r2, r3
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	441a      	add	r2, r3
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d118      	bne.n	8006cce <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	4b16      	ldr	r3, [pc, #88]	@ (8006cfc <prvInsertBlockIntoFreeList+0xf0>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d00d      	beq.n	8006cc4 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	441a      	add	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	e008      	b.n	8006cd6 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8006cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8006cfc <prvInsertBlockIntoFreeList+0xf0>)
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	e003      	b.n	8006cd6 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d002      	beq.n	8006ce4 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006ce4:	bf00      	nop
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	200130e8 	.word	0x200130e8
 8006cf4:	200004e8 	.word	0x200004e8
 8006cf8:	200130e7 	.word	0x200130e7
 8006cfc:	200130f0 	.word	0x200130f0

08006d00 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006d04:	4803      	ldr	r0, [pc, #12]	@ (8006d14 <_cbSendSystemDesc+0x14>)
 8006d06:	f002 f87b 	bl	8008e00 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006d0a:	4803      	ldr	r0, [pc, #12]	@ (8006d18 <_cbSendSystemDesc+0x18>)
 8006d0c:	f002 f878 	bl	8008e00 <SEGGER_SYSVIEW_SendSysDesc>
}
 8006d10:	bf00      	nop
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	0800ca08 	.word	0x0800ca08
 8006d18:	0800ca4c 	.word	0x0800ca4c

08006d1c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006d20:	4b06      	ldr	r3, [pc, #24]	@ (8006d3c <SEGGER_SYSVIEW_Conf+0x20>)
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	4b05      	ldr	r3, [pc, #20]	@ (8006d3c <SEGGER_SYSVIEW_Conf+0x20>)
 8006d26:	6819      	ldr	r1, [r3, #0]
 8006d28:	4b05      	ldr	r3, [pc, #20]	@ (8006d40 <SEGGER_SYSVIEW_Conf+0x24>)
 8006d2a:	4a06      	ldr	r2, [pc, #24]	@ (8006d44 <SEGGER_SYSVIEW_Conf+0x28>)
 8006d2c:	f001 fcec 	bl	8008708 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006d30:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8006d34:	f001 fd2c 	bl	8008790 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006d38:	bf00      	nop
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	20000018 	.word	0x20000018
 8006d40:	08006d01 	.word	0x08006d01
 8006d44:	0800caec 	.word	0x0800caec

08006d48 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006d4e:	2300      	movs	r3, #0
 8006d50:	607b      	str	r3, [r7, #4]
 8006d52:	e033      	b.n	8006dbc <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006d54:	491e      	ldr	r1, [pc, #120]	@ (8006dd0 <_cbSendTaskList+0x88>)
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	491a      	ldr	r1, [pc, #104]	@ (8006dd0 <_cbSendTaskList+0x88>)
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	440b      	add	r3, r1
 8006d72:	3304      	adds	r3, #4
 8006d74:	6819      	ldr	r1, [r3, #0]
 8006d76:	4c16      	ldr	r4, [pc, #88]	@ (8006dd0 <_cbSendTaskList+0x88>)
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4423      	add	r3, r4
 8006d84:	3308      	adds	r3, #8
 8006d86:	681c      	ldr	r4, [r3, #0]
 8006d88:	4d11      	ldr	r5, [pc, #68]	@ (8006dd0 <_cbSendTaskList+0x88>)
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	442b      	add	r3, r5
 8006d96:	330c      	adds	r3, #12
 8006d98:	681d      	ldr	r5, [r3, #0]
 8006d9a:	4e0d      	ldr	r6, [pc, #52]	@ (8006dd0 <_cbSendTaskList+0x88>)
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4433      	add	r3, r6
 8006da8:	3310      	adds	r3, #16
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	462b      	mov	r3, r5
 8006db0:	4622      	mov	r2, r4
 8006db2:	f000 f8bd 	bl	8006f30 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	3301      	adds	r3, #1
 8006dba:	607b      	str	r3, [r7, #4]
 8006dbc:	4b05      	ldr	r3, [pc, #20]	@ (8006dd4 <_cbSendTaskList+0x8c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d3c6      	bcc.n	8006d54 <_cbSendTaskList+0xc>
  }
}
 8006dc6:	bf00      	nop
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dd0:	20013104 	.word	0x20013104
 8006dd4:	200131a4 	.word	0x200131a4

08006dd8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006de0:	f7fe ff00 	bl	8005be4 <xTaskGetTickCountFromISR>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2200      	movs	r2, #0
 8006de8:	469a      	mov	sl, r3
 8006dea:	4693      	mov	fp, r2
 8006dec:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006df0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	f04f 0a00 	mov.w	sl, #0
 8006dfc:	f04f 0b00 	mov.w	fp, #0
 8006e00:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006e04:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8006e08:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006e0c:	4652      	mov	r2, sl
 8006e0e:	465b      	mov	r3, fp
 8006e10:	1a14      	subs	r4, r2, r0
 8006e12:	eb63 0501 	sbc.w	r5, r3, r1
 8006e16:	f04f 0200 	mov.w	r2, #0
 8006e1a:	f04f 0300 	mov.w	r3, #0
 8006e1e:	00ab      	lsls	r3, r5, #2
 8006e20:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006e24:	00a2      	lsls	r2, r4, #2
 8006e26:	4614      	mov	r4, r2
 8006e28:	461d      	mov	r5, r3
 8006e2a:	eb14 0800 	adds.w	r8, r4, r0
 8006e2e:	eb45 0901 	adc.w	r9, r5, r1
 8006e32:	f04f 0200 	mov.w	r2, #0
 8006e36:	f04f 0300 	mov.w	r3, #0
 8006e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e46:	4690      	mov	r8, r2
 8006e48:	4699      	mov	r9, r3
 8006e4a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8006e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006e52:	4610      	mov	r0, r2
 8006e54:	4619      	mov	r1, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006e60 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af02      	add	r7, sp, #8
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006e6e:	2205      	movs	r2, #5
 8006e70:	492b      	ldr	r1, [pc, #172]	@ (8006f20 <SYSVIEW_AddTask+0xc0>)
 8006e72:	68b8      	ldr	r0, [r7, #8]
 8006e74:	f003 fc88 	bl	800a788 <memcmp>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d04b      	beq.n	8006f16 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006e7e:	4b29      	ldr	r3, [pc, #164]	@ (8006f24 <SYSVIEW_AddTask+0xc4>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b07      	cmp	r3, #7
 8006e84:	d903      	bls.n	8006e8e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006e86:	4828      	ldr	r0, [pc, #160]	@ (8006f28 <SYSVIEW_AddTask+0xc8>)
 8006e88:	f002 fb5a 	bl	8009540 <SEGGER_SYSVIEW_Warn>
    return;
 8006e8c:	e044      	b.n	8006f18 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006e8e:	4b25      	ldr	r3, [pc, #148]	@ (8006f24 <SYSVIEW_AddTask+0xc4>)
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	4926      	ldr	r1, [pc, #152]	@ (8006f2c <SYSVIEW_AddTask+0xcc>)
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	440b      	add	r3, r1
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006ea2:	4b20      	ldr	r3, [pc, #128]	@ (8006f24 <SYSVIEW_AddTask+0xc4>)
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	4921      	ldr	r1, [pc, #132]	@ (8006f2c <SYSVIEW_AddTask+0xcc>)
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	440b      	add	r3, r1
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8006f24 <SYSVIEW_AddTask+0xc4>)
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	491b      	ldr	r1, [pc, #108]	@ (8006f2c <SYSVIEW_AddTask+0xcc>)
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3308      	adds	r3, #8
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006ece:	4b15      	ldr	r3, [pc, #84]	@ (8006f24 <SYSVIEW_AddTask+0xc4>)
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	4916      	ldr	r1, [pc, #88]	@ (8006f2c <SYSVIEW_AddTask+0xcc>)
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	440b      	add	r3, r1
 8006ede:	330c      	adds	r3, #12
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8006f24 <SYSVIEW_AddTask+0xc4>)
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	4910      	ldr	r1, [pc, #64]	@ (8006f2c <SYSVIEW_AddTask+0xcc>)
 8006eea:	4613      	mov	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	440b      	add	r3, r1
 8006ef4:	3310      	adds	r3, #16
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006efa:	4b0a      	ldr	r3, [pc, #40]	@ (8006f24 <SYSVIEW_AddTask+0xc4>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3301      	adds	r3, #1
 8006f00:	4a08      	ldr	r2, [pc, #32]	@ (8006f24 <SYSVIEW_AddTask+0xc4>)
 8006f02:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	68b9      	ldr	r1, [r7, #8]
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 f80e 	bl	8006f30 <SYSVIEW_SendTaskInfo>
 8006f14:	e000      	b.n	8006f18 <SYSVIEW_AddTask+0xb8>
    return;
 8006f16:	bf00      	nop

}
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	0800ca5c 	.word	0x0800ca5c
 8006f24:	200131a4 	.word	0x200131a4
 8006f28:	0800ca64 	.word	0x0800ca64
 8006f2c:	20013104 	.word	0x20013104

08006f30 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08a      	sub	sp, #40	@ 0x28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006f3e:	f107 0310 	add.w	r3, r7, #16
 8006f42:	2218      	movs	r2, #24
 8006f44:	2100      	movs	r1, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f003 fc2e 	bl	800a7a8 <memset>
  TaskInfo.TaskID     = TaskID;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5e:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006f60:	f107 0310 	add.w	r3, r7, #16
 8006f64:	4618      	mov	r0, r3
 8006f66:	f001 fe53 	bl	8008c10 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006f6a:	bf00      	nop
 8006f6c:	3728      	adds	r7, #40	@ 0x28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <__NVIC_EnableIRQ>:
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	db0b      	blt.n	8006f9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f86:	79fb      	ldrb	r3, [r7, #7]
 8006f88:	f003 021f 	and.w	r2, r3, #31
 8006f8c:	4907      	ldr	r1, [pc, #28]	@ (8006fac <__NVIC_EnableIRQ+0x38>)
 8006f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f92:	095b      	lsrs	r3, r3, #5
 8006f94:	2001      	movs	r0, #1
 8006f96:	fa00 f202 	lsl.w	r2, r0, r2
 8006f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006f9e:	bf00      	nop
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	e000e100 	.word	0xe000e100

08006fb0 <__NVIC_SetPriority>:
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	6039      	str	r1, [r7, #0]
 8006fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	db0a      	blt.n	8006fda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	490c      	ldr	r1, [pc, #48]	@ (8006ffc <__NVIC_SetPriority+0x4c>)
 8006fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fce:	0112      	lsls	r2, r2, #4
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	440b      	add	r3, r1
 8006fd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006fd8:	e00a      	b.n	8006ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	4908      	ldr	r1, [pc, #32]	@ (8007000 <__NVIC_SetPriority+0x50>)
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	f003 030f 	and.w	r3, r3, #15
 8006fe6:	3b04      	subs	r3, #4
 8006fe8:	0112      	lsls	r2, r2, #4
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	440b      	add	r3, r1
 8006fee:	761a      	strb	r2, [r3, #24]
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	e000e100 	.word	0xe000e100
 8007000:	e000ed00 	.word	0xe000ed00

08007004 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800700a:	f002 faf5 	bl	80095f8 <SEGGER_SYSVIEW_IsStarted>
 800700e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8007016:	f001 fc7f 	bl	8008918 <SEGGER_SYSVIEW_Start>
  }
}
 800701a:	bf00      	nop
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800702e:	4b0c      	ldr	r3, [pc, #48]	@ (8007060 <_cbOnUARTRx+0x3c>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b03      	cmp	r3, #3
 8007034:	d806      	bhi.n	8007044 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8007036:	4b0a      	ldr	r3, [pc, #40]	@ (8007060 <_cbOnUARTRx+0x3c>)
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	3301      	adds	r3, #1
 800703c:	b2da      	uxtb	r2, r3
 800703e:	4b08      	ldr	r3, [pc, #32]	@ (8007060 <_cbOnUARTRx+0x3c>)
 8007040:	701a      	strb	r2, [r3, #0]
    goto Done;
 8007042:	e009      	b.n	8007058 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8007044:	f7ff ffde 	bl	8007004 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8007048:	4b05      	ldr	r3, [pc, #20]	@ (8007060 <_cbOnUARTRx+0x3c>)
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	4618      	mov	r0, r3
 800704e:	1dfb      	adds	r3, r7, #7
 8007050:	2201      	movs	r2, #1
 8007052:	4619      	mov	r1, r3
 8007054:	f000 fbec 	bl	8007830 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8007058:	bf00      	nop
}
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	2000002c 	.word	0x2000002c

08007064 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 800706c:	4b14      	ldr	r3, [pc, #80]	@ (80070c0 <_cbOnUARTTx+0x5c>)
 800706e:	785b      	ldrb	r3, [r3, #1]
 8007070:	2b03      	cmp	r3, #3
 8007072:	d80f      	bhi.n	8007094 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8007074:	4b12      	ldr	r3, [pc, #72]	@ (80070c0 <_cbOnUARTTx+0x5c>)
 8007076:	785b      	ldrb	r3, [r3, #1]
 8007078:	461a      	mov	r2, r3
 800707a:	4b12      	ldr	r3, [pc, #72]	@ (80070c4 <_cbOnUARTTx+0x60>)
 800707c:	5c9a      	ldrb	r2, [r3, r2]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8007082:	4b0f      	ldr	r3, [pc, #60]	@ (80070c0 <_cbOnUARTTx+0x5c>)
 8007084:	785b      	ldrb	r3, [r3, #1]
 8007086:	3301      	adds	r3, #1
 8007088:	b2da      	uxtb	r2, r3
 800708a:	4b0d      	ldr	r3, [pc, #52]	@ (80070c0 <_cbOnUARTTx+0x5c>)
 800708c:	705a      	strb	r2, [r3, #1]
    r = 1;
 800708e:	2301      	movs	r3, #1
 8007090:	60fb      	str	r3, [r7, #12]
    goto Done;
 8007092:	e00f      	b.n	80070b4 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8007094:	4b0a      	ldr	r3, [pc, #40]	@ (80070c0 <_cbOnUARTTx+0x5c>)
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fa1b 	bl	80074d8 <SEGGER_RTT_ReadUpBufferNoLock>
 80070a2:	4603      	mov	r3, r0
 80070a4:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	da02      	bge.n	80070b2 <_cbOnUARTTx+0x4e>
    r = 0;
 80070ac:	2300      	movs	r3, #0
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	e000      	b.n	80070b4 <_cbOnUARTTx+0x50>
  }
Done:
 80070b2:	bf00      	nop
  return r;
 80070b4:	68fb      	ldr	r3, [r7, #12]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	2000002c 	.word	0x2000002c
 80070c4:	0800caf4 	.word	0x0800caf4

080070c8 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80070d0:	4a04      	ldr	r2, [pc, #16]	@ (80070e4 <SEGGER_UART_init+0x1c>)
 80070d2:	4905      	ldr	r1, [pc, #20]	@ (80070e8 <SEGGER_UART_init+0x20>)
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f863 	bl	80071a0 <HIF_UART_Init>
}
 80070da:	bf00      	nop
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	08007025 	.word	0x08007025
 80070e8:	08007065 	.word	0x08007065

080070ec <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80070f2:	4b1e      	ldr	r3, [pc, #120]	@ (800716c <USART2_IRQHandler+0x80>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d011      	beq.n	8007126 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8007102:	4b1b      	ldr	r3, [pc, #108]	@ (8007170 <USART2_IRQHandler+0x84>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	b2db      	uxtb	r3, r3
 8007108:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f003 030b 	and.w	r3, r3, #11
 8007110:	2b00      	cmp	r3, #0
 8007112:	d108      	bne.n	8007126 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8007114:	4b17      	ldr	r3, [pc, #92]	@ (8007174 <USART2_IRQHandler+0x88>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d004      	beq.n	8007126 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800711c:	4b15      	ldr	r3, [pc, #84]	@ (8007174 <USART2_IRQHandler+0x88>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	79fa      	ldrb	r2, [r7, #7]
 8007122:	4610      	mov	r0, r2
 8007124:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800712c:	2b00      	cmp	r3, #0
 800712e:	d01a      	beq.n	8007166 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8007130:	4b11      	ldr	r3, [pc, #68]	@ (8007178 <USART2_IRQHandler+0x8c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d015      	beq.n	8007164 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8007138:	4b0f      	ldr	r3, [pc, #60]	@ (8007178 <USART2_IRQHandler+0x8c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	1dfa      	adds	r2, r7, #7
 800713e:	4610      	mov	r0, r2
 8007140:	4798      	blx	r3
 8007142:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800714a:	4b0c      	ldr	r3, [pc, #48]	@ (800717c <USART2_IRQHandler+0x90>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a0b      	ldr	r2, [pc, #44]	@ (800717c <USART2_IRQHandler+0x90>)
 8007150:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	e006      	b.n	8007166 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8007158:	4b04      	ldr	r3, [pc, #16]	@ (800716c <USART2_IRQHandler+0x80>)
 800715a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800715c:	79fa      	ldrb	r2, [r7, #7]
 800715e:	4b04      	ldr	r3, [pc, #16]	@ (8007170 <USART2_IRQHandler+0x84>)
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	e000      	b.n	8007166 <USART2_IRQHandler+0x7a>
      return;
 8007164:	bf00      	nop
    }
  }
}
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	40004400 	.word	0x40004400
 8007170:	40004404 	.word	0x40004404
 8007174:	200131a8 	.word	0x200131a8
 8007178:	200131ac 	.word	0x200131ac
 800717c:	4000440c 	.word	0x4000440c

08007180 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8007180:	b480      	push	{r7}
 8007182:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8007184:	4b05      	ldr	r3, [pc, #20]	@ (800719c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a04      	ldr	r2, [pc, #16]	@ (800719c <HIF_UART_EnableTXEInterrupt+0x1c>)
 800718a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800718e:	6013      	str	r3, [r2, #0]
}
 8007190:	bf00      	nop
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	4000440c 	.word	0x4000440c

080071a0 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80071ac:	4b2e      	ldr	r3, [pc, #184]	@ (8007268 <HIF_UART_Init+0xc8>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a2d      	ldr	r2, [pc, #180]	@ (8007268 <HIF_UART_Init+0xc8>)
 80071b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071b6:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80071b8:	4b2c      	ldr	r3, [pc, #176]	@ (800726c <HIF_UART_Init+0xcc>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a2b      	ldr	r2, [pc, #172]	@ (800726c <HIF_UART_Init+0xcc>)
 80071be:	f043 0301 	orr.w	r3, r3, #1
 80071c2:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80071c4:	4b2a      	ldr	r3, [pc, #168]	@ (8007270 <HIF_UART_Init+0xd0>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071d0:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80071d8:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80071da:	4a25      	ldr	r2, [pc, #148]	@ (8007270 <HIF_UART_Init+0xd0>)
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80071e0:	4b24      	ldr	r3, [pc, #144]	@ (8007274 <HIF_UART_Init+0xd4>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071ec:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80071f4:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80071f6:	4a1f      	ldr	r2, [pc, #124]	@ (8007274 <HIF_UART_Init+0xd4>)
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80071fc:	4b1e      	ldr	r3, [pc, #120]	@ (8007278 <HIF_UART_Init+0xd8>)
 80071fe:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8007202:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8007204:	4b1d      	ldr	r3, [pc, #116]	@ (800727c <HIF_UART_Init+0xdc>)
 8007206:	2200      	movs	r2, #0
 8007208:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800720a:	4b1d      	ldr	r3, [pc, #116]	@ (8007280 <HIF_UART_Init+0xe0>)
 800720c:	2280      	movs	r2, #128	@ 0x80
 800720e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8007216:	4a1b      	ldr	r2, [pc, #108]	@ (8007284 <HIF_UART_Init+0xe4>)
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	fbb2 f3f3 	udiv	r3, r2, r3
 800721e:	3301      	adds	r3, #1
 8007220:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	085b      	lsrs	r3, r3, #1
 8007226:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800722e:	d302      	bcc.n	8007236 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8007230:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8007234:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d004      	beq.n	8007246 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	4a11      	ldr	r2, [pc, #68]	@ (8007288 <HIF_UART_Init+0xe8>)
 8007242:	b29b      	uxth	r3, r3
 8007244:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8007246:	4a11      	ldr	r2, [pc, #68]	@ (800728c <HIF_UART_Init+0xec>)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 800724c:	4a10      	ldr	r2, [pc, #64]	@ (8007290 <HIF_UART_Init+0xf0>)
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8007252:	2106      	movs	r1, #6
 8007254:	2026      	movs	r0, #38	@ 0x26
 8007256:	f7ff feab 	bl	8006fb0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800725a:	2026      	movs	r0, #38	@ 0x26
 800725c:	f7ff fe8a 	bl	8006f74 <__NVIC_EnableIRQ>
}
 8007260:	bf00      	nop
 8007262:	3718      	adds	r7, #24
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	40023840 	.word	0x40023840
 800726c:	40023830 	.word	0x40023830
 8007270:	40020020 	.word	0x40020020
 8007274:	40020000 	.word	0x40020000
 8007278:	4000440c 	.word	0x4000440c
 800727c:	40004410 	.word	0x40004410
 8007280:	40004414 	.word	0x40004414
 8007284:	0501bd00 	.word	0x0501bd00
 8007288:	40004408 	.word	0x40004408
 800728c:	200131a8 	.word	0x200131a8
 8007290:	200131ac 	.word	0x200131ac

08007294 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800729a:	4b26      	ldr	r3, [pc, #152]	@ (8007334 <_DoInit+0xa0>)
 800729c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800729e:	22a8      	movs	r2, #168	@ 0xa8
 80072a0:	2100      	movs	r1, #0
 80072a2:	6838      	ldr	r0, [r7, #0]
 80072a4:	f003 fa80 	bl	800a7a8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2203      	movs	r2, #3
 80072ac:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2203      	movs	r2, #3
 80072b2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	4a20      	ldr	r2, [pc, #128]	@ (8007338 <_DoInit+0xa4>)
 80072b8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	4a1f      	ldr	r2, [pc, #124]	@ (800733c <_DoInit+0xa8>)
 80072be:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80072c6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2200      	movs	r2, #0
 80072cc:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2200      	movs	r2, #0
 80072d2:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2200      	movs	r2, #0
 80072d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	4a16      	ldr	r2, [pc, #88]	@ (8007338 <_DoInit+0xa4>)
 80072de:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	4a17      	ldr	r2, [pc, #92]	@ (8007340 <_DoInit+0xac>)
 80072e4:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2210      	movs	r2, #16
 80072ea:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2200      	movs	r2, #0
 80072f0:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2200      	movs	r2, #0
 80072f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2200      	movs	r2, #0
 80072fc:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80072fe:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8007302:	2300      	movs	r3, #0
 8007304:	607b      	str	r3, [r7, #4]
 8007306:	e00c      	b.n	8007322 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f1c3 030f 	rsb	r3, r3, #15
 800730e:	4a0d      	ldr	r2, [pc, #52]	@ (8007344 <_DoInit+0xb0>)
 8007310:	5cd1      	ldrb	r1, [r2, r3]
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4413      	add	r3, r2
 8007318:	460a      	mov	r2, r1
 800731a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3301      	adds	r3, #1
 8007320:	607b      	str	r3, [r7, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b0f      	cmp	r3, #15
 8007326:	d9ef      	bls.n	8007308 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8007328:	f3bf 8f5f 	dmb	sy
}
 800732c:	bf00      	nop
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	200131b0 	.word	0x200131b0
 8007338:	0800cab4 	.word	0x0800cab4
 800733c:	20013258 	.word	0x20013258
 8007340:	20013658 	.word	0x20013658
 8007344:	0800caf8 	.word	0x0800caf8

08007348 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8007348:	b580      	push	{r7, lr}
 800734a:	b08a      	sub	sp, #40	@ 0x28
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8007354:	2300      	movs	r3, #0
 8007356:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	429a      	cmp	r2, r3
 800736a:	d905      	bls.n	8007378 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	3b01      	subs	r3, #1
 8007374:	627b      	str	r3, [r7, #36]	@ 0x24
 8007376:	e007      	b.n	8007388 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	69b9      	ldr	r1, [r7, #24]
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	1acb      	subs	r3, r1, r3
 8007382:	4413      	add	r3, r2
 8007384:	3b01      	subs	r3, #1
 8007386:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007392:	4293      	cmp	r3, r2
 8007394:	bf28      	it	cs
 8007396:	4613      	movcs	r3, r2
 8007398:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800739a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4293      	cmp	r3, r2
 80073a0:	bf28      	it	cs
 80073a2:	4613      	movcs	r3, r2
 80073a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	4413      	add	r3, r2
 80073ae:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80073b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073b2:	68b9      	ldr	r1, [r7, #8]
 80073b4:	6978      	ldr	r0, [r7, #20]
 80073b6:	f003 fa64 	bl	800a882 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80073ba:	6a3a      	ldr	r2, [r7, #32]
 80073bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073be:	4413      	add	r3, r2
 80073c0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c6:	4413      	add	r3, r2
 80073c8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80073d2:	69fa      	ldr	r2, [r7, #28]
 80073d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d6:	4413      	add	r3, r2
 80073d8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	69fa      	ldr	r2, [r7, #28]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d101      	bne.n	80073e8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80073e4:	2300      	movs	r3, #0
 80073e6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80073e8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	69fa      	ldr	r2, [r7, #28]
 80073f0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1b2      	bne.n	800735e <_WriteBlocking+0x16>
  return NumBytesWritten;
 80073f8:	6a3b      	ldr	r3, [r7, #32]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3728      	adds	r7, #40	@ 0x28
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8007402:	b580      	push	{r7, lr}
 8007404:	b088      	sub	sp, #32
 8007406:	af00      	add	r7, sp, #0
 8007408:	60f8      	str	r0, [r7, #12]
 800740a:	60b9      	str	r1, [r7, #8]
 800740c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	429a      	cmp	r2, r3
 8007424:	d911      	bls.n	800744a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	4413      	add	r3, r2
 800742e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	68b9      	ldr	r1, [r7, #8]
 8007434:	6938      	ldr	r0, [r7, #16]
 8007436:	f003 fa24 	bl	800a882 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800743a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800743e:	69fa      	ldr	r2, [r7, #28]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	441a      	add	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8007448:	e01f      	b.n	800748a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	4413      	add	r3, r2
 8007456:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	68b9      	ldr	r1, [r7, #8]
 800745c:	6938      	ldr	r0, [r7, #16]
 800745e:	f003 fa10 	bl	800a882 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	4413      	add	r3, r2
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	4619      	mov	r1, r3
 800747a:	6938      	ldr	r0, [r7, #16]
 800747c:	f003 fa01 	bl	800a882 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007480:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	60da      	str	r2, [r3, #12]
}
 800748a:	bf00      	nop
 800748c:	3720      	adds	r7, #32
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8007492:	b480      	push	{r7}
 8007494:	b087      	sub	sp, #28
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d808      	bhi.n	80074c0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	689a      	ldr	r2, [r3, #8]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	1ad2      	subs	r2, r2, r3
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	4413      	add	r3, r2
 80074ba:	3b01      	subs	r3, #1
 80074bc:	617b      	str	r3, [r7, #20]
 80074be:	e004      	b.n	80074ca <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	3b01      	subs	r3, #1
 80074c8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80074ca:	697b      	ldr	r3, [r7, #20]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	371c      	adds	r7, #28
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08c      	sub	sp, #48	@ 0x30
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80074e4:	4b3e      	ldr	r3, [pc, #248]	@ (80075e0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80074e6:	623b      	str	r3, [r7, #32]
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b53      	cmp	r3, #83	@ 0x53
 80074f0:	d001      	beq.n	80074f6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80074f2:	f7ff fecf 	bl	8007294 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	1c5a      	adds	r2, r3, #1
 80074fa:	4613      	mov	r3, r2
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	4413      	add	r3, r2
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	4a37      	ldr	r2, [pc, #220]	@ (80075e0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8007504:	4413      	add	r3, r2
 8007506:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8007518:	2300      	movs	r3, #0
 800751a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800751c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	429a      	cmp	r2, r3
 8007522:	d92b      	bls.n	800757c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4293      	cmp	r3, r2
 8007534:	bf28      	it	cs
 8007536:	4613      	movcs	r3, r2
 8007538:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007540:	4413      	add	r3, r2
 8007542:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	6939      	ldr	r1, [r7, #16]
 8007548:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800754a:	f003 f99a 	bl	800a882 <memcpy>
    NumBytesRead += NumBytesRem;
 800754e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	4413      	add	r3, r2
 8007554:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8007556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	4413      	add	r3, r2
 800755c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007566:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	4413      	add	r3, r2
 800756c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007574:	429a      	cmp	r2, r3
 8007576:	d101      	bne.n	800757c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8007578:	2300      	movs	r3, #0
 800757a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4293      	cmp	r3, r2
 800758a:	bf28      	it	cs
 800758c:	4613      	movcs	r3, r2
 800758e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d019      	beq.n	80075ca <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759c:	4413      	add	r3, r2
 800759e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	6939      	ldr	r1, [r7, #16]
 80075a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80075a6:	f003 f96c 	bl	800a882 <memcpy>
    NumBytesRead += NumBytesRem;
 80075aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	4413      	add	r3, r2
 80075b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80075b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	4413      	add	r3, r2
 80075b8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80075c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	4413      	add	r3, r2
 80075c8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80075ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075d4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80075d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3730      	adds	r7, #48	@ 0x30
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	200131b0 	.word	0x200131b0

080075e4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b08c      	sub	sp, #48	@ 0x30
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80075f0:	4b3e      	ldr	r3, [pc, #248]	@ (80076ec <SEGGER_RTT_ReadNoLock+0x108>)
 80075f2:	623b      	str	r3, [r7, #32]
 80075f4:	6a3b      	ldr	r3, [r7, #32]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b53      	cmp	r3, #83	@ 0x53
 80075fc:	d001      	beq.n	8007602 <SEGGER_RTT_ReadNoLock+0x1e>
 80075fe:	f7ff fe49 	bl	8007294 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	4613      	mov	r3, r2
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	4413      	add	r3, r2
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	3360      	adds	r3, #96	@ 0x60
 800760e:	4a37      	ldr	r2, [pc, #220]	@ (80076ec <SEGGER_RTT_ReadNoLock+0x108>)
 8007610:	4413      	add	r3, r2
 8007612:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8007624:	2300      	movs	r3, #0
 8007626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007628:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	429a      	cmp	r2, r3
 800762e:	d92b      	bls.n	8007688 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4293      	cmp	r3, r2
 8007640:	bf28      	it	cs
 8007642:	4613      	movcs	r3, r2
 8007644:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800764c:	4413      	add	r3, r2
 800764e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	6939      	ldr	r1, [r7, #16]
 8007654:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007656:	f003 f914 	bl	800a882 <memcpy>
    NumBytesRead += NumBytesRem;
 800765a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	4413      	add	r3, r2
 8007660:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8007662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	4413      	add	r3, r2
 8007668:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007672:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	4413      	add	r3, r2
 8007678:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007680:	429a      	cmp	r2, r3
 8007682:	d101      	bne.n	8007688 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8007684:	2300      	movs	r3, #0
 8007686:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4293      	cmp	r3, r2
 8007696:	bf28      	it	cs
 8007698:	4613      	movcs	r3, r2
 800769a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d019      	beq.n	80076d6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a8:	4413      	add	r3, r2
 80076aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	6939      	ldr	r1, [r7, #16]
 80076b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80076b2:	f003 f8e6 	bl	800a882 <memcpy>
    NumBytesRead += NumBytesRem;
 80076b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	4413      	add	r3, r2
 80076bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80076be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	4413      	add	r3, r2
 80076c4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80076ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	4413      	add	r3, r2
 80076d4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80076d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076e0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80076e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3730      	adds	r7, #48	@ 0x30
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	200131b0 	.word	0x200131b0

080076f0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	4613      	mov	r3, r2
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	4413      	add	r3, r2
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	3360      	adds	r3, #96	@ 0x60
 800770c:	4a1f      	ldr	r2, [pc, #124]	@ (800778c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800770e:	4413      	add	r3, r2
 8007710:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	2b02      	cmp	r3, #2
 8007718:	d029      	beq.n	800776e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800771a:	2b02      	cmp	r3, #2
 800771c:	d82e      	bhi.n	800777c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800771e:	2b00      	cmp	r3, #0
 8007720:	d002      	beq.n	8007728 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8007722:	2b01      	cmp	r3, #1
 8007724:	d013      	beq.n	800774e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8007726:	e029      	b.n	800777c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8007728:	6978      	ldr	r0, [r7, #20]
 800772a:	f7ff feb2 	bl	8007492 <_GetAvailWriteSpace>
 800772e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	429a      	cmp	r2, r3
 8007736:	d202      	bcs.n	800773e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8007738:	2300      	movs	r3, #0
 800773a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800773c:	e021      	b.n	8007782 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	69b9      	ldr	r1, [r7, #24]
 8007746:	6978      	ldr	r0, [r7, #20]
 8007748:	f7ff fe5b 	bl	8007402 <_WriteNoCheck>
    break;
 800774c:	e019      	b.n	8007782 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800774e:	6978      	ldr	r0, [r7, #20]
 8007750:	f7ff fe9f 	bl	8007492 <_GetAvailWriteSpace>
 8007754:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	4293      	cmp	r3, r2
 800775c:	bf28      	it	cs
 800775e:	4613      	movcs	r3, r2
 8007760:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8007762:	69fa      	ldr	r2, [r7, #28]
 8007764:	69b9      	ldr	r1, [r7, #24]
 8007766:	6978      	ldr	r0, [r7, #20]
 8007768:	f7ff fe4b 	bl	8007402 <_WriteNoCheck>
    break;
 800776c:	e009      	b.n	8007782 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	69b9      	ldr	r1, [r7, #24]
 8007772:	6978      	ldr	r0, [r7, #20]
 8007774:	f7ff fde8 	bl	8007348 <_WriteBlocking>
 8007778:	61f8      	str	r0, [r7, #28]
    break;
 800777a:	e002      	b.n	8007782 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 800777c:	2300      	movs	r3, #0
 800777e:	61fb      	str	r3, [r7, #28]
    break;
 8007780:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8007782:	69fb      	ldr	r3, [r7, #28]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	200131b0 	.word	0x200131b0

08007790 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8007790:	b580      	push	{r7, lr}
 8007792:	b088      	sub	sp, #32
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	4613      	mov	r3, r2
 80077a6:	005b      	lsls	r3, r3, #1
 80077a8:	4413      	add	r3, r2
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	4a1f      	ldr	r2, [pc, #124]	@ (800782c <SEGGER_RTT_WriteNoLock+0x9c>)
 80077ae:	4413      	add	r3, r2
 80077b0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d029      	beq.n	800780e <SEGGER_RTT_WriteNoLock+0x7e>
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d82e      	bhi.n	800781c <SEGGER_RTT_WriteNoLock+0x8c>
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d002      	beq.n	80077c8 <SEGGER_RTT_WriteNoLock+0x38>
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d013      	beq.n	80077ee <SEGGER_RTT_WriteNoLock+0x5e>
 80077c6:	e029      	b.n	800781c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80077c8:	6978      	ldr	r0, [r7, #20]
 80077ca:	f7ff fe62 	bl	8007492 <_GetAvailWriteSpace>
 80077ce:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d202      	bcs.n	80077de <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80077d8:	2300      	movs	r3, #0
 80077da:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80077dc:	e021      	b.n	8007822 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	69b9      	ldr	r1, [r7, #24]
 80077e6:	6978      	ldr	r0, [r7, #20]
 80077e8:	f7ff fe0b 	bl	8007402 <_WriteNoCheck>
    break;
 80077ec:	e019      	b.n	8007822 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80077ee:	6978      	ldr	r0, [r7, #20]
 80077f0:	f7ff fe4f 	bl	8007492 <_GetAvailWriteSpace>
 80077f4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	4293      	cmp	r3, r2
 80077fc:	bf28      	it	cs
 80077fe:	4613      	movcs	r3, r2
 8007800:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8007802:	69fa      	ldr	r2, [r7, #28]
 8007804:	69b9      	ldr	r1, [r7, #24]
 8007806:	6978      	ldr	r0, [r7, #20]
 8007808:	f7ff fdfb 	bl	8007402 <_WriteNoCheck>
    break;
 800780c:	e009      	b.n	8007822 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	69b9      	ldr	r1, [r7, #24]
 8007812:	6978      	ldr	r0, [r7, #20]
 8007814:	f7ff fd98 	bl	8007348 <_WriteBlocking>
 8007818:	61f8      	str	r0, [r7, #28]
    break;
 800781a:	e002      	b.n	8007822 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800781c:	2300      	movs	r3, #0
 800781e:	61fb      	str	r3, [r7, #28]
    break;
 8007820:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8007822:	69fb      	ldr	r3, [r7, #28]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3720      	adds	r7, #32
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	200131b0 	.word	0x200131b0

08007830 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8007830:	b580      	push	{r7, lr}
 8007832:	b088      	sub	sp, #32
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800783c:	4b0e      	ldr	r3, [pc, #56]	@ (8007878 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800783e:	61fb      	str	r3, [r7, #28]
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b53      	cmp	r3, #83	@ 0x53
 8007848:	d001      	beq.n	800784e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800784a:	f7ff fd23 	bl	8007294 <_DoInit>
  SEGGER_RTT_LOCK();
 800784e:	f3ef 8311 	mrs	r3, BASEPRI
 8007852:	f04f 0120 	mov.w	r1, #32
 8007856:	f381 8811 	msr	BASEPRI, r1
 800785a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	68b9      	ldr	r1, [r7, #8]
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f7ff ff45 	bl	80076f0 <SEGGER_RTT_WriteDownBufferNoLock>
 8007866:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800786e:	697b      	ldr	r3, [r7, #20]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3720      	adds	r7, #32
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	200131b0 	.word	0x200131b0

0800787c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8007888:	4b0e      	ldr	r3, [pc, #56]	@ (80078c4 <SEGGER_RTT_Write+0x48>)
 800788a:	61fb      	str	r3, [r7, #28]
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b53      	cmp	r3, #83	@ 0x53
 8007894:	d001      	beq.n	800789a <SEGGER_RTT_Write+0x1e>
 8007896:	f7ff fcfd 	bl	8007294 <_DoInit>
  SEGGER_RTT_LOCK();
 800789a:	f3ef 8311 	mrs	r3, BASEPRI
 800789e:	f04f 0120 	mov.w	r1, #32
 80078a2:	f381 8811 	msr	BASEPRI, r1
 80078a6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	68b9      	ldr	r1, [r7, #8]
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f7ff ff6f 	bl	8007790 <SEGGER_RTT_WriteNoLock>
 80078b2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80078ba:	697b      	ldr	r3, [r7, #20]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3720      	adds	r7, #32
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	200131b0 	.word	0x200131b0

080078c8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b088      	sub	sp, #32
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
 80078d4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80078d6:	4b3d      	ldr	r3, [pc, #244]	@ (80079cc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80078d8:	61bb      	str	r3, [r7, #24]
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b53      	cmp	r3, #83	@ 0x53
 80078e2:	d001      	beq.n	80078e8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80078e4:	f7ff fcd6 	bl	8007294 <_DoInit>
  SEGGER_RTT_LOCK();
 80078e8:	f3ef 8311 	mrs	r3, BASEPRI
 80078ec:	f04f 0120 	mov.w	r1, #32
 80078f0:	f381 8811 	msr	BASEPRI, r1
 80078f4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80078f6:	4b35      	ldr	r3, [pc, #212]	@ (80079cc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80078f8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80078fa:	2300      	movs	r3, #0
 80078fc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80078fe:	6939      	ldr	r1, [r7, #16]
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	4613      	mov	r3, r2
 8007906:	005b      	lsls	r3, r3, #1
 8007908:	4413      	add	r3, r2
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	440b      	add	r3, r1
 800790e:	3304      	adds	r3, #4
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d008      	beq.n	8007928 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	3301      	adds	r3, #1
 800791a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	69fa      	ldr	r2, [r7, #28]
 8007922:	429a      	cmp	r2, r3
 8007924:	dbeb      	blt.n	80078fe <SEGGER_RTT_AllocUpBuffer+0x36>
 8007926:	e000      	b.n	800792a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8007928:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	69fa      	ldr	r2, [r7, #28]
 8007930:	429a      	cmp	r2, r3
 8007932:	da3f      	bge.n	80079b4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8007934:	6939      	ldr	r1, [r7, #16]
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	1c5a      	adds	r2, r3, #1
 800793a:	4613      	mov	r3, r2
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	4413      	add	r3, r2
 8007940:	00db      	lsls	r3, r3, #3
 8007942:	440b      	add	r3, r1
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007948:	6939      	ldr	r1, [r7, #16]
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	1c5a      	adds	r2, r3, #1
 800794e:	4613      	mov	r3, r2
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	4413      	add	r3, r2
 8007954:	00db      	lsls	r3, r3, #3
 8007956:	440b      	add	r3, r1
 8007958:	3304      	adds	r3, #4
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800795e:	6939      	ldr	r1, [r7, #16]
 8007960:	69fa      	ldr	r2, [r7, #28]
 8007962:	4613      	mov	r3, r2
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	4413      	add	r3, r2
 8007968:	00db      	lsls	r3, r3, #3
 800796a:	440b      	add	r3, r1
 800796c:	3320      	adds	r3, #32
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8007972:	6939      	ldr	r1, [r7, #16]
 8007974:	69fa      	ldr	r2, [r7, #28]
 8007976:	4613      	mov	r3, r2
 8007978:	005b      	lsls	r3, r3, #1
 800797a:	4413      	add	r3, r2
 800797c:	00db      	lsls	r3, r3, #3
 800797e:	440b      	add	r3, r1
 8007980:	3328      	adds	r3, #40	@ 0x28
 8007982:	2200      	movs	r2, #0
 8007984:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8007986:	6939      	ldr	r1, [r7, #16]
 8007988:	69fa      	ldr	r2, [r7, #28]
 800798a:	4613      	mov	r3, r2
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	4413      	add	r3, r2
 8007990:	00db      	lsls	r3, r3, #3
 8007992:	440b      	add	r3, r1
 8007994:	3324      	adds	r3, #36	@ 0x24
 8007996:	2200      	movs	r2, #0
 8007998:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800799a:	6939      	ldr	r1, [r7, #16]
 800799c:	69fa      	ldr	r2, [r7, #28]
 800799e:	4613      	mov	r3, r2
 80079a0:	005b      	lsls	r3, r3, #1
 80079a2:	4413      	add	r3, r2
 80079a4:	00db      	lsls	r3, r3, #3
 80079a6:	440b      	add	r3, r1
 80079a8:	332c      	adds	r3, #44	@ 0x2c
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80079ae:	f3bf 8f5f 	dmb	sy
 80079b2:	e002      	b.n	80079ba <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80079b4:	f04f 33ff 	mov.w	r3, #4294967295
 80079b8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80079c0:	69fb      	ldr	r3, [r7, #28]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3720      	adds	r7, #32
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	200131b0 	.word	0x200131b0

080079d0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b08a      	sub	sp, #40	@ 0x28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
 80079dc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80079de:	4b21      	ldr	r3, [pc, #132]	@ (8007a64 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80079e0:	623b      	str	r3, [r7, #32]
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b53      	cmp	r3, #83	@ 0x53
 80079ea:	d001      	beq.n	80079f0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80079ec:	f7ff fc52 	bl	8007294 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80079f0:	4b1c      	ldr	r3, [pc, #112]	@ (8007a64 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80079f2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d82c      	bhi.n	8007a54 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80079fa:	f3ef 8311 	mrs	r3, BASEPRI
 80079fe:	f04f 0120 	mov.w	r1, #32
 8007a02:	f381 8811 	msr	BASEPRI, r1
 8007a06:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	4413      	add	r3, r2
 8007a10:	00db      	lsls	r3, r3, #3
 8007a12:	3360      	adds	r3, #96	@ 0x60
 8007a14:	69fa      	ldr	r2, [r7, #28]
 8007a16:	4413      	add	r3, r2
 8007a18:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00e      	beq.n	8007a3e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	2200      	movs	r2, #0
 8007a36:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a42:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007a44:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a52:	e002      	b.n	8007a5a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8007a54:	f04f 33ff 	mov.w	r3, #4294967295
 8007a58:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3728      	adds	r7, #40	@ 0x28
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	200131b0 	.word	0x200131b0

08007a68 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007a68:	b480      	push	{r7}
 8007a6a:	b087      	sub	sp, #28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	60fa      	str	r2, [r7, #12]
 8007a7e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b80      	cmp	r3, #128	@ 0x80
 8007a84:	d90a      	bls.n	8007a9c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8007a86:	2380      	movs	r3, #128	@ 0x80
 8007a88:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8007a8a:	e007      	b.n	8007a9c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	1c53      	adds	r3, r2, #1
 8007a90:	60bb      	str	r3, [r7, #8]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	1c59      	adds	r1, r3, #1
 8007a96:	60f9      	str	r1, [r7, #12]
 8007a98:	7812      	ldrb	r2, [r2, #0]
 8007a9a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	1e5a      	subs	r2, r3, #1
 8007aa0:	607a      	str	r2, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <_EncodeStr+0x46>
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1ee      	bne.n	8007a8c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8007aba:	68fb      	ldr	r3, [r7, #12]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	371c      	adds	r7, #28
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	3307      	adds	r3, #7
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007ae6:	4b34      	ldr	r3, [pc, #208]	@ (8007bb8 <_HandleIncomingPacket+0xd8>)
 8007ae8:	7e1b      	ldrb	r3, [r3, #24]
 8007aea:	4618      	mov	r0, r3
 8007aec:	1cfb      	adds	r3, r7, #3
 8007aee:	2201      	movs	r2, #1
 8007af0:	4619      	mov	r1, r3
 8007af2:	f7ff fd77 	bl	80075e4 <SEGGER_RTT_ReadNoLock>
 8007af6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d057      	beq.n	8007bae <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8007afe:	78fb      	ldrb	r3, [r7, #3]
 8007b00:	2b80      	cmp	r3, #128	@ 0x80
 8007b02:	d031      	beq.n	8007b68 <_HandleIncomingPacket+0x88>
 8007b04:	2b80      	cmp	r3, #128	@ 0x80
 8007b06:	dc40      	bgt.n	8007b8a <_HandleIncomingPacket+0xaa>
 8007b08:	2b07      	cmp	r3, #7
 8007b0a:	dc15      	bgt.n	8007b38 <_HandleIncomingPacket+0x58>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	dd3c      	ble.n	8007b8a <_HandleIncomingPacket+0xaa>
 8007b10:	3b01      	subs	r3, #1
 8007b12:	2b06      	cmp	r3, #6
 8007b14:	d839      	bhi.n	8007b8a <_HandleIncomingPacket+0xaa>
 8007b16:	a201      	add	r2, pc, #4	@ (adr r2, 8007b1c <_HandleIncomingPacket+0x3c>)
 8007b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1c:	08007b3f 	.word	0x08007b3f
 8007b20:	08007b45 	.word	0x08007b45
 8007b24:	08007b4b 	.word	0x08007b4b
 8007b28:	08007b51 	.word	0x08007b51
 8007b2c:	08007b57 	.word	0x08007b57
 8007b30:	08007b5d 	.word	0x08007b5d
 8007b34:	08007b63 	.word	0x08007b63
 8007b38:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b3a:	d033      	beq.n	8007ba4 <_HandleIncomingPacket+0xc4>
 8007b3c:	e025      	b.n	8007b8a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8007b3e:	f000 feeb 	bl	8008918 <SEGGER_SYSVIEW_Start>
      break;
 8007b42:	e034      	b.n	8007bae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007b44:	f000 ffa4 	bl	8008a90 <SEGGER_SYSVIEW_Stop>
      break;
 8007b48:	e031      	b.n	8007bae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8007b4a:	f001 f97d 	bl	8008e48 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8007b4e:	e02e      	b.n	8007bae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8007b50:	f001 f942 	bl	8008dd8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007b54:	e02b      	b.n	8007bae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007b56:	f000 ffc1 	bl	8008adc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8007b5a:	e028      	b.n	8007bae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8007b5c:	f001 fc9e 	bl	800949c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007b60:	e025      	b.n	8007bae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007b62:	f001 fc7d 	bl	8009460 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007b66:	e022      	b.n	8007bae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007b68:	4b13      	ldr	r3, [pc, #76]	@ (8007bb8 <_HandleIncomingPacket+0xd8>)
 8007b6a:	7e1b      	ldrb	r3, [r3, #24]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	1cfb      	adds	r3, r7, #3
 8007b70:	2201      	movs	r2, #1
 8007b72:	4619      	mov	r1, r3
 8007b74:	f7ff fd36 	bl	80075e4 <SEGGER_RTT_ReadNoLock>
 8007b78:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d013      	beq.n	8007ba8 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 fbe2 	bl	800934c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007b88:	e00e      	b.n	8007ba8 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8007b8a:	78fb      	ldrb	r3, [r7, #3]
 8007b8c:	b25b      	sxtb	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	da0c      	bge.n	8007bac <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007b92:	4b09      	ldr	r3, [pc, #36]	@ (8007bb8 <_HandleIncomingPacket+0xd8>)
 8007b94:	7e1b      	ldrb	r3, [r3, #24]
 8007b96:	4618      	mov	r0, r3
 8007b98:	1cfb      	adds	r3, r7, #3
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	f7ff fd21 	bl	80075e4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007ba2:	e003      	b.n	8007bac <_HandleIncomingPacket+0xcc>
      break;
 8007ba4:	bf00      	nop
 8007ba6:	e002      	b.n	8007bae <_HandleIncomingPacket+0xce>
      break;
 8007ba8:	bf00      	nop
 8007baa:	e000      	b.n	8007bae <_HandleIncomingPacket+0xce>
      break;
 8007bac:	bf00      	nop
    }
  }
}
 8007bae:	bf00      	nop
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20014670 	.word	0x20014670

08007bbc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08c      	sub	sp, #48	@ 0x30
 8007bc0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8007bc6:	1d3b      	adds	r3, r7, #4
 8007bc8:	3301      	adds	r3, #1
 8007bca:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bd0:	4b32      	ldr	r3, [pc, #200]	@ (8007c9c <_TrySendOverflowPacket+0xe0>)
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007bd6:	e00b      	b.n	8007bf0 <_TrySendOverflowPacket+0x34>
 8007bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bde:	1c59      	adds	r1, r3, #1
 8007be0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007be2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	701a      	strb	r2, [r3, #0]
 8007bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bec:	09db      	lsrs	r3, r3, #7
 8007bee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007bf4:	d8f0      	bhi.n	8007bd8 <_TrySendOverflowPacket+0x1c>
 8007bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf8:	1c5a      	adds	r2, r3, #1
 8007bfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bfe:	b2d2      	uxtb	r2, r2
 8007c00:	701a      	strb	r2, [r3, #0]
 8007c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c04:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007c06:	4b26      	ldr	r3, [pc, #152]	@ (8007ca0 <_TrySendOverflowPacket+0xe4>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007c0c:	4b23      	ldr	r3, [pc, #140]	@ (8007c9c <_TrySendOverflowPacket+0xe0>)
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	623b      	str	r3, [r7, #32]
 8007c1e:	e00b      	b.n	8007c38 <_TrySendOverflowPacket+0x7c>
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c26:	1c59      	adds	r1, r3, #1
 8007c28:	6279      	str	r1, [r7, #36]	@ 0x24
 8007c2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007c2e:	b2d2      	uxtb	r2, r2
 8007c30:	701a      	strb	r2, [r3, #0]
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	09db      	lsrs	r3, r3, #7
 8007c36:	623b      	str	r3, [r7, #32]
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c3c:	d8f0      	bhi.n	8007c20 <_TrySendOverflowPacket+0x64>
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c44:	6a3a      	ldr	r2, [r7, #32]
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	701a      	strb	r2, [r3, #0]
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8007c4e:	4b13      	ldr	r3, [pc, #76]	@ (8007c9c <_TrySendOverflowPacket+0xe0>)
 8007c50:	785b      	ldrb	r3, [r3, #1]
 8007c52:	4618      	mov	r0, r3
 8007c54:	1d3b      	adds	r3, r7, #4
 8007c56:	69fa      	ldr	r2, [r7, #28]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	1d3b      	adds	r3, r7, #4
 8007c5e:	4619      	mov	r1, r3
 8007c60:	f7f8 fabe 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007c64:	4603      	mov	r3, r0
 8007c66:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8007c68:	f7ff fa8a 	bl	8007180 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d009      	beq.n	8007c86 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007c72:	4a0a      	ldr	r2, [pc, #40]	@ (8007c9c <_TrySendOverflowPacket+0xe0>)
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007c78:	4b08      	ldr	r3, [pc, #32]	@ (8007c9c <_TrySendOverflowPacket+0xe0>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	b2da      	uxtb	r2, r3
 8007c80:	4b06      	ldr	r3, [pc, #24]	@ (8007c9c <_TrySendOverflowPacket+0xe0>)
 8007c82:	701a      	strb	r2, [r3, #0]
 8007c84:	e004      	b.n	8007c90 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007c86:	4b05      	ldr	r3, [pc, #20]	@ (8007c9c <_TrySendOverflowPacket+0xe0>)
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	4a03      	ldr	r2, [pc, #12]	@ (8007c9c <_TrySendOverflowPacket+0xe0>)
 8007c8e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007c90:	693b      	ldr	r3, [r7, #16]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3730      	adds	r7, #48	@ 0x30
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20014670 	.word	0x20014670
 8007ca0:	e0001004 	.word	0xe0001004

08007ca4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08a      	sub	sp, #40	@ 0x28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007cb0:	4b96      	ldr	r3, [pc, #600]	@ (8007f0c <_SendPacket+0x268>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d010      	beq.n	8007cda <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007cb8:	4b94      	ldr	r3, [pc, #592]	@ (8007f0c <_SendPacket+0x268>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 8130 	beq.w	8007f22 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8007cc2:	4b92      	ldr	r3, [pc, #584]	@ (8007f0c <_SendPacket+0x268>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d109      	bne.n	8007cde <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007cca:	f7ff ff77 	bl	8007bbc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8007cce:	4b8f      	ldr	r3, [pc, #572]	@ (8007f0c <_SendPacket+0x268>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	f040 8127 	bne.w	8007f26 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8007cd8:	e001      	b.n	8007cde <_SendPacket+0x3a>
    goto Send;
 8007cda:	bf00      	nop
 8007cdc:	e000      	b.n	8007ce0 <_SendPacket+0x3c>
Send:
 8007cde:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b1f      	cmp	r3, #31
 8007ce4:	d809      	bhi.n	8007cfa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8007ce6:	4b89      	ldr	r3, [pc, #548]	@ (8007f0c <_SendPacket+0x268>)
 8007ce8:	69da      	ldr	r2, [r3, #28]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f040 8118 	bne.w	8007f2a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2b17      	cmp	r3, #23
 8007cfe:	d807      	bhi.n	8007d10 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	701a      	strb	r2, [r3, #0]
 8007d0e:	e0c4      	b.n	8007e9a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d1c:	d912      	bls.n	8007d44 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	09da      	lsrs	r2, r3, #7
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	60fb      	str	r3, [r7, #12]
 8007d28:	b2d2      	uxtb	r2, r2
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	3a01      	subs	r2, #1
 8007d36:	60fa      	str	r2, [r7, #12]
 8007d38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	701a      	strb	r2, [r3, #0]
 8007d42:	e006      	b.n	8007d52 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	60fb      	str	r3, [r7, #12]
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b7e      	cmp	r3, #126	@ 0x7e
 8007d56:	d807      	bhi.n	8007d68 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	701a      	strb	r2, [r3, #0]
 8007d66:	e098      	b.n	8007e9a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d6e:	d212      	bcs.n	8007d96 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	09da      	lsrs	r2, r3, #7
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	60fb      	str	r3, [r7, #12]
 8007d7a:	b2d2      	uxtb	r2, r2
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	3a01      	subs	r2, #1
 8007d88:	60fa      	str	r2, [r7, #12]
 8007d8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	701a      	strb	r2, [r3, #0]
 8007d94:	e081      	b.n	8007e9a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d9c:	d21d      	bcs.n	8007dda <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	0b9a      	lsrs	r2, r3, #14
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3b01      	subs	r3, #1
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	b2d2      	uxtb	r2, r2
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	09db      	lsrs	r3, r3, #7
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	3a01      	subs	r2, #1
 8007db8:	60fa      	str	r2, [r7, #12]
 8007dba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	3a01      	subs	r2, #1
 8007dcc:	60fa      	str	r2, [r7, #12]
 8007dce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	701a      	strb	r2, [r3, #0]
 8007dd8:	e05f      	b.n	8007e9a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007de0:	d228      	bcs.n	8007e34 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	0d5a      	lsrs	r2, r3, #21
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	b2d2      	uxtb	r2, r2
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	0b9b      	lsrs	r3, r3, #14
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	3a01      	subs	r2, #1
 8007dfc:	60fa      	str	r2, [r7, #12]
 8007dfe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	09db      	lsrs	r3, r3, #7
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	3a01      	subs	r2, #1
 8007e12:	60fa      	str	r2, [r7, #12]
 8007e14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	3a01      	subs	r2, #1
 8007e26:	60fa      	str	r2, [r7, #12]
 8007e28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	701a      	strb	r2, [r3, #0]
 8007e32:	e032      	b.n	8007e9a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	0f1a      	lsrs	r2, r3, #28
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	b2d2      	uxtb	r2, r2
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	0d5b      	lsrs	r3, r3, #21
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	3a01      	subs	r2, #1
 8007e4e:	60fa      	str	r2, [r7, #12]
 8007e50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	0b9b      	lsrs	r3, r3, #14
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	3a01      	subs	r2, #1
 8007e64:	60fa      	str	r2, [r7, #12]
 8007e66:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	09db      	lsrs	r3, r3, #7
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	3a01      	subs	r2, #1
 8007e7a:	60fa      	str	r2, [r7, #12]
 8007e7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	3a01      	subs	r2, #1
 8007e8e:	60fa      	str	r2, [r7, #12]
 8007e90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8007f10 <_SendPacket+0x26c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8007f0c <_SendPacket+0x268>)
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	623b      	str	r3, [r7, #32]
 8007eb2:	e00b      	b.n	8007ecc <_SendPacket+0x228>
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eba:	1c59      	adds	r1, r3, #1
 8007ebc:	6279      	str	r1, [r7, #36]	@ 0x24
 8007ebe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007ec2:	b2d2      	uxtb	r2, r2
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	09db      	lsrs	r3, r3, #7
 8007eca:	623b      	str	r3, [r7, #32]
 8007ecc:	6a3b      	ldr	r3, [r7, #32]
 8007ece:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ed0:	d8f0      	bhi.n	8007eb4 <_SendPacket+0x210>
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ed8:	6a3a      	ldr	r2, [r7, #32]
 8007eda:	b2d2      	uxtb	r2, r2
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8007ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8007f0c <_SendPacket+0x268>)
 8007ee4:	785b      	ldrb	r3, [r3, #1]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	461a      	mov	r2, r3
 8007ef0:	68f9      	ldr	r1, [r7, #12]
 8007ef2:	f7f8 f975 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007ef6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8007ef8:	f7ff f942 	bl	8007180 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d008      	beq.n	8007f14 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007f02:	4a02      	ldr	r2, [pc, #8]	@ (8007f0c <_SendPacket+0x268>)
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	60d3      	str	r3, [r2, #12]
 8007f08:	e010      	b.n	8007f2c <_SendPacket+0x288>
 8007f0a:	bf00      	nop
 8007f0c:	20014670 	.word	0x20014670
 8007f10:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007f14:	4b19      	ldr	r3, [pc, #100]	@ (8007f7c <_SendPacket+0x2d8>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	4b17      	ldr	r3, [pc, #92]	@ (8007f7c <_SendPacket+0x2d8>)
 8007f1e:	701a      	strb	r2, [r3, #0]
 8007f20:	e004      	b.n	8007f2c <_SendPacket+0x288>
    goto SendDone;
 8007f22:	bf00      	nop
 8007f24:	e002      	b.n	8007f2c <_SendPacket+0x288>
      goto SendDone;
 8007f26:	bf00      	nop
 8007f28:	e000      	b.n	8007f2c <_SendPacket+0x288>
      goto SendDone;
 8007f2a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007f2c:	4b13      	ldr	r3, [pc, #76]	@ (8007f7c <_SendPacket+0x2d8>)
 8007f2e:	7e1b      	ldrb	r3, [r3, #24]
 8007f30:	4619      	mov	r1, r3
 8007f32:	4a13      	ldr	r2, [pc, #76]	@ (8007f80 <_SendPacket+0x2dc>)
 8007f34:	460b      	mov	r3, r1
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	440b      	add	r3, r1
 8007f3a:	00db      	lsls	r3, r3, #3
 8007f3c:	4413      	add	r3, r2
 8007f3e:	336c      	adds	r3, #108	@ 0x6c
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	4b0e      	ldr	r3, [pc, #56]	@ (8007f7c <_SendPacket+0x2d8>)
 8007f44:	7e1b      	ldrb	r3, [r3, #24]
 8007f46:	4618      	mov	r0, r3
 8007f48:	490d      	ldr	r1, [pc, #52]	@ (8007f80 <_SendPacket+0x2dc>)
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	005b      	lsls	r3, r3, #1
 8007f4e:	4403      	add	r3, r0
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	440b      	add	r3, r1
 8007f54:	3370      	adds	r3, #112	@ 0x70
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d00b      	beq.n	8007f74 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007f5c:	4b07      	ldr	r3, [pc, #28]	@ (8007f7c <_SendPacket+0x2d8>)
 8007f5e:	789b      	ldrb	r3, [r3, #2]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d107      	bne.n	8007f74 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007f64:	4b05      	ldr	r3, [pc, #20]	@ (8007f7c <_SendPacket+0x2d8>)
 8007f66:	2201      	movs	r2, #1
 8007f68:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007f6a:	f7ff fdb9 	bl	8007ae0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007f6e:	4b03      	ldr	r3, [pc, #12]	@ (8007f7c <_SendPacket+0x2d8>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007f74:	bf00      	nop
 8007f76:	3728      	adds	r7, #40	@ 0x28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	20014670 	.word	0x20014670
 8007f80:	200131b0 	.word	0x200131b0

08007f84 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b08a      	sub	sp, #40	@ 0x28
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	2b80      	cmp	r3, #128	@ 0x80
 8007f9c:	d80a      	bhi.n	8007fb4 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	1c59      	adds	r1, r3, #1
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	6051      	str	r1, [r2, #4]
 8007fa8:	78fa      	ldrb	r2, [r7, #3]
 8007faa:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	1c5a      	adds	r2, r3, #1
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	2b80      	cmp	r3, #128	@ 0x80
 8007fba:	d15a      	bne.n	8008072 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	691a      	ldr	r2, [r3, #16]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	b2d2      	uxtb	r2, r2
 8007fc6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	623b      	str	r3, [r7, #32]
 8007fdc:	e00b      	b.n	8007ff6 <_StoreChar+0x72>
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe4:	1c59      	adds	r1, r3, #1
 8007fe6:	6279      	str	r1, [r7, #36]	@ 0x24
 8007fe8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007fec:	b2d2      	uxtb	r2, r2
 8007fee:	701a      	strb	r2, [r3, #0]
 8007ff0:	6a3b      	ldr	r3, [r7, #32]
 8007ff2:	09db      	lsrs	r3, r3, #7
 8007ff4:	623b      	str	r3, [r7, #32]
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ffa:	d8f0      	bhi.n	8007fde <_StoreChar+0x5a>
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	627a      	str	r2, [r7, #36]	@ 0x24
 8008002:	6a3a      	ldr	r2, [r7, #32]
 8008004:	b2d2      	uxtb	r2, r2
 8008006:	701a      	strb	r2, [r3, #0]
 8008008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	61fb      	str	r3, [r7, #28]
 8008010:	2300      	movs	r3, #0
 8008012:	61bb      	str	r3, [r7, #24]
 8008014:	e00b      	b.n	800802e <_StoreChar+0xaa>
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	b2da      	uxtb	r2, r3
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	1c59      	adds	r1, r3, #1
 800801e:	61f9      	str	r1, [r7, #28]
 8008020:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008024:	b2d2      	uxtb	r2, r2
 8008026:	701a      	strb	r2, [r3, #0]
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	09db      	lsrs	r3, r3, #7
 800802c:	61bb      	str	r3, [r7, #24]
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	2b7f      	cmp	r3, #127	@ 0x7f
 8008032:	d8f0      	bhi.n	8008016 <_StoreChar+0x92>
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	61fa      	str	r2, [r7, #28]
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	b2d2      	uxtb	r2, r2
 800803e:	701a      	strb	r2, [r3, #0]
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	221a      	movs	r2, #26
 800804a:	6939      	ldr	r1, [r7, #16]
 800804c:	4618      	mov	r0, r3
 800804e:	f7ff fe29 	bl	8007ca4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4618      	mov	r0, r3
 8008058:	f7ff fd36 	bl	8007ac8 <_PreparePacket>
 800805c:	4602      	mov	r2, r0
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	1c5a      	adds	r2, r3, #1
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	611a      	str	r2, [r3, #16]
  }
}
 8008072:	bf00      	nop
 8008074:	3728      	adds	r7, #40	@ 0x28
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
	...

0800807c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800807c:	b580      	push	{r7, lr}
 800807e:	b08a      	sub	sp, #40	@ 0x28
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
 8008088:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800808e:	2301      	movs	r3, #1
 8008090:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8008092:	2301      	movs	r3, #1
 8008094:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8008096:	e007      	b.n	80080a8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8008098:	6a3a      	ldr	r2, [r7, #32]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a0:	623b      	str	r3, [r7, #32]
    Width++;
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	3301      	adds	r3, #1
 80080a6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80080a8:	6a3a      	ldr	r2, [r7, #32]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d2f3      	bcs.n	8008098 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d901      	bls.n	80080bc <_PrintUnsigned+0x40>
    Width = NumDigits;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80080bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d000      	beq.n	80080c8 <_PrintUnsigned+0x4c>
 80080c6:	e01f      	b.n	8008108 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80080c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d01c      	beq.n	8008108 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80080ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080d0:	f003 0302 	and.w	r3, r3, #2
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d005      	beq.n	80080e4 <_PrintUnsigned+0x68>
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d102      	bne.n	80080e4 <_PrintUnsigned+0x68>
        c = '0';
 80080de:	2330      	movs	r3, #48	@ 0x30
 80080e0:	76fb      	strb	r3, [r7, #27]
 80080e2:	e001      	b.n	80080e8 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 80080e4:	2320      	movs	r3, #32
 80080e6:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80080e8:	e007      	b.n	80080fa <_PrintUnsigned+0x7e>
        FieldWidth--;
 80080ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ec:	3b01      	subs	r3, #1
 80080ee:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 80080f0:	7efb      	ldrb	r3, [r7, #27]
 80080f2:	4619      	mov	r1, r3
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f7ff ff45 	bl	8007f84 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <_PrintUnsigned+0x8c>
 8008100:	69fa      	ldr	r2, [r7, #28]
 8008102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008104:	429a      	cmp	r2, r3
 8008106:	d3f0      	bcc.n	80080ea <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d903      	bls.n	8008116 <_PrintUnsigned+0x9a>
      NumDigits--;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	3b01      	subs	r3, #1
 8008112:	603b      	str	r3, [r7, #0]
 8008114:	e009      	b.n	800812a <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811a:	fbb2 f3f3 	udiv	r3, r2, r3
 800811e:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	429a      	cmp	r2, r3
 8008126:	d200      	bcs.n	800812a <_PrintUnsigned+0xae>
        break;
 8008128:	e005      	b.n	8008136 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800812a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	fb02 f303 	mul.w	r3, r2, r3
 8008132:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8008134:	e7e8      	b.n	8008108 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813a:	fbb2 f3f3 	udiv	r3, r2, r3
 800813e:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008144:	fb02 f303 	mul.w	r3, r2, r3
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800814e:	4a15      	ldr	r2, [pc, #84]	@ (80081a4 <_PrintUnsigned+0x128>)
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	4413      	add	r3, r2
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	4619      	mov	r1, r3
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f7ff ff13 	bl	8007f84 <_StoreChar>
    Digit /= Base;
 800815e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	fbb2 f3f3 	udiv	r3, r2, r3
 8008166:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8008168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e3      	bne.n	8008136 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800816e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	2b00      	cmp	r3, #0
 8008176:	d011      	beq.n	800819c <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8008178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00e      	beq.n	800819c <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800817e:	e006      	b.n	800818e <_PrintUnsigned+0x112>
        FieldWidth--;
 8008180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008182:	3b01      	subs	r3, #1
 8008184:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8008186:	2120      	movs	r1, #32
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f7ff fefb 	bl	8007f84 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800818e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008190:	2b00      	cmp	r3, #0
 8008192:	d003      	beq.n	800819c <_PrintUnsigned+0x120>
 8008194:	69fa      	ldr	r2, [r7, #28]
 8008196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008198:	429a      	cmp	r2, r3
 800819a:	d3f1      	bcc.n	8008180 <_PrintUnsigned+0x104>
      }
    }
  }
}
 800819c:	bf00      	nop
 800819e:	3728      	adds	r7, #40	@ 0x28
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	0800cb18 	.word	0x0800cb18

080081a8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b088      	sub	sp, #32
 80081ac:	af02      	add	r7, sp, #8
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
 80081b4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	bfb8      	it	lt
 80081bc:	425b      	neglt	r3, r3
 80081be:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80081c0:	2301      	movs	r3, #1
 80081c2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80081c4:	e007      	b.n	80081d6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80081ce:	613b      	str	r3, [r7, #16]
    Width++;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	3301      	adds	r3, #1
 80081d4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	429a      	cmp	r2, r3
 80081dc:	daf3      	bge.n	80081c6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d901      	bls.n	80081ea <_PrintInt+0x42>
    Width = NumDigits;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00a      	beq.n	8008206 <_PrintInt+0x5e>
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	db04      	blt.n	8008200 <_PrintInt+0x58>
 80081f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f8:	f003 0304 	and.w	r3, r3, #4
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d002      	beq.n	8008206 <_PrintInt+0x5e>
    FieldWidth--;
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	3b01      	subs	r3, #1
 8008204:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8008206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008208:	f003 0302 	and.w	r3, r3, #2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <_PrintInt+0x6e>
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d016      	beq.n	8008244 <_PrintInt+0x9c>
 8008216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	2b00      	cmp	r3, #0
 800821e:	d111      	bne.n	8008244 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8008220:	6a3b      	ldr	r3, [r7, #32]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00e      	beq.n	8008244 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008226:	e006      	b.n	8008236 <_PrintInt+0x8e>
        FieldWidth--;
 8008228:	6a3b      	ldr	r3, [r7, #32]
 800822a:	3b01      	subs	r3, #1
 800822c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800822e:	2120      	movs	r1, #32
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7ff fea7 	bl	8007f84 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <_PrintInt+0x9c>
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	429a      	cmp	r2, r3
 8008242:	d3f1      	bcc.n	8008228 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	2b00      	cmp	r3, #0
 8008248:	da07      	bge.n	800825a <_PrintInt+0xb2>
    v = -v;
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	425b      	negs	r3, r3
 800824e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8008250:	212d      	movs	r1, #45	@ 0x2d
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f7ff fe96 	bl	8007f84 <_StoreChar>
 8008258:	e008      	b.n	800826c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800825a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825c:	f003 0304 	and.w	r3, r3, #4
 8008260:	2b00      	cmp	r3, #0
 8008262:	d003      	beq.n	800826c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8008264:	212b      	movs	r1, #43	@ 0x2b
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f7ff fe8c 	bl	8007f84 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800826c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826e:	f003 0302 	and.w	r3, r3, #2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d019      	beq.n	80082aa <_PrintInt+0x102>
 8008276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	d114      	bne.n	80082aa <_PrintInt+0x102>
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d111      	bne.n	80082aa <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00e      	beq.n	80082aa <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800828c:	e006      	b.n	800829c <_PrintInt+0xf4>
        FieldWidth--;
 800828e:	6a3b      	ldr	r3, [r7, #32]
 8008290:	3b01      	subs	r3, #1
 8008292:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8008294:	2130      	movs	r1, #48	@ 0x30
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f7ff fe74 	bl	8007f84 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <_PrintInt+0x102>
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d3f1      	bcc.n	800828e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80082aa:	68b9      	ldr	r1, [r7, #8]
 80082ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ae:	9301      	str	r3, [sp, #4]
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f7ff fedf 	bl	800807c <_PrintUnsigned>
}
 80082be:	bf00      	nop
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b098      	sub	sp, #96	@ 0x60
 80082cc:	af02      	add	r7, sp, #8
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80082d4:	f3ef 8311 	mrs	r3, BASEPRI
 80082d8:	f04f 0120 	mov.w	r1, #32
 80082dc:	f381 8811 	msr	BASEPRI, r1
 80082e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082e2:	48b7      	ldr	r0, [pc, #732]	@ (80085c0 <_VPrintTarget+0x2f8>)
 80082e4:	f7ff fbf0 	bl	8007ac8 <_PreparePacket>
 80082e8:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80082ea:	4bb5      	ldr	r3, [pc, #724]	@ (80085c0 <_VPrintTarget+0x2f8>)
 80082ec:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80082ee:	2300      	movs	r3, #0
 80082f0:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80082f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f4:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	3301      	adds	r3, #1
 80082fa:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3301      	adds	r3, #1
 800830c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800830e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 81a8 	beq.w	8008668 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8008318:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800831c:	2b25      	cmp	r3, #37	@ 0x25
 800831e:	f040 8195 	bne.w	800864c <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8008322:	2300      	movs	r3, #0
 8008324:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8008326:	2301      	movs	r3, #1
 8008328:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8008332:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008336:	3b23      	subs	r3, #35	@ 0x23
 8008338:	2b0d      	cmp	r3, #13
 800833a:	d83f      	bhi.n	80083bc <_VPrintTarget+0xf4>
 800833c:	a201      	add	r2, pc, #4	@ (adr r2, 8008344 <_VPrintTarget+0x7c>)
 800833e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008342:	bf00      	nop
 8008344:	080083ad 	.word	0x080083ad
 8008348:	080083bd 	.word	0x080083bd
 800834c:	080083bd 	.word	0x080083bd
 8008350:	080083bd 	.word	0x080083bd
 8008354:	080083bd 	.word	0x080083bd
 8008358:	080083bd 	.word	0x080083bd
 800835c:	080083bd 	.word	0x080083bd
 8008360:	080083bd 	.word	0x080083bd
 8008364:	0800839d 	.word	0x0800839d
 8008368:	080083bd 	.word	0x080083bd
 800836c:	0800837d 	.word	0x0800837d
 8008370:	080083bd 	.word	0x080083bd
 8008374:	080083bd 	.word	0x080083bd
 8008378:	0800838d 	.word	0x0800838d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800837c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800837e:	f043 0301 	orr.w	r3, r3, #1
 8008382:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3301      	adds	r3, #1
 8008388:	60fb      	str	r3, [r7, #12]
 800838a:	e01a      	b.n	80083c2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800838c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800838e:	f043 0302 	orr.w	r3, r3, #2
 8008392:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	3301      	adds	r3, #1
 8008398:	60fb      	str	r3, [r7, #12]
 800839a:	e012      	b.n	80083c2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800839c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800839e:	f043 0304 	orr.w	r3, r3, #4
 80083a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	3301      	adds	r3, #1
 80083a8:	60fb      	str	r3, [r7, #12]
 80083aa:	e00a      	b.n	80083c2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80083ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083ae:	f043 0308 	orr.w	r3, r3, #8
 80083b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3301      	adds	r3, #1
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	e002      	b.n	80083c2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80083bc:	2300      	movs	r3, #0
 80083be:	653b      	str	r3, [r7, #80]	@ 0x50
 80083c0:	bf00      	nop
        }
      } while (v);
 80083c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1b0      	bne.n	800832a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80083c8:	2300      	movs	r3, #0
 80083ca:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 80083d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80083d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80083da:	d912      	bls.n	8008402 <_VPrintTarget+0x13a>
 80083dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80083e0:	2b39      	cmp	r3, #57	@ 0x39
 80083e2:	d80e      	bhi.n	8008402 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3301      	adds	r3, #1
 80083e8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80083ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083ec:	4613      	mov	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	461a      	mov	r2, r3
 80083f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80083fa:	4413      	add	r3, r2
 80083fc:	3b30      	subs	r3, #48	@ 0x30
 80083fe:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8008400:	e7e4      	b.n	80083cc <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8008402:	2300      	movs	r3, #0
 8008404:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 800840e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008412:	2b2e      	cmp	r3, #46	@ 0x2e
 8008414:	d11d      	bne.n	8008452 <_VPrintTarget+0x18a>
        sFormat++;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3301      	adds	r3, #1
 800841a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8008424:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008428:	2b2f      	cmp	r3, #47	@ 0x2f
 800842a:	d912      	bls.n	8008452 <_VPrintTarget+0x18a>
 800842c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008430:	2b39      	cmp	r3, #57	@ 0x39
 8008432:	d80e      	bhi.n	8008452 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	3301      	adds	r3, #1
 8008438:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800843a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800843c:	4613      	mov	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	005b      	lsls	r3, r3, #1
 8008444:	461a      	mov	r2, r3
 8008446:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800844a:	4413      	add	r3, r2
 800844c:	3b30      	subs	r3, #48	@ 0x30
 800844e:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8008450:	e7e4      	b.n	800841c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800845a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800845e:	2b6c      	cmp	r3, #108	@ 0x6c
 8008460:	d003      	beq.n	800846a <_VPrintTarget+0x1a2>
 8008462:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008466:	2b68      	cmp	r3, #104	@ 0x68
 8008468:	d107      	bne.n	800847a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3301      	adds	r3, #1
 8008476:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8008478:	e7ef      	b.n	800845a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800847a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800847e:	2b25      	cmp	r3, #37	@ 0x25
 8008480:	f000 80d8 	beq.w	8008634 <_VPrintTarget+0x36c>
 8008484:	2b25      	cmp	r3, #37	@ 0x25
 8008486:	f2c0 80dc 	blt.w	8008642 <_VPrintTarget+0x37a>
 800848a:	2b78      	cmp	r3, #120	@ 0x78
 800848c:	f300 80d9 	bgt.w	8008642 <_VPrintTarget+0x37a>
 8008490:	2b58      	cmp	r3, #88	@ 0x58
 8008492:	f2c0 80d6 	blt.w	8008642 <_VPrintTarget+0x37a>
 8008496:	3b58      	subs	r3, #88	@ 0x58
 8008498:	2b20      	cmp	r3, #32
 800849a:	f200 80d2 	bhi.w	8008642 <_VPrintTarget+0x37a>
 800849e:	a201      	add	r2, pc, #4	@ (adr r2, 80084a4 <_VPrintTarget+0x1dc>)
 80084a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a4:	0800859b 	.word	0x0800859b
 80084a8:	08008643 	.word	0x08008643
 80084ac:	08008643 	.word	0x08008643
 80084b0:	08008643 	.word	0x08008643
 80084b4:	08008643 	.word	0x08008643
 80084b8:	08008643 	.word	0x08008643
 80084bc:	08008643 	.word	0x08008643
 80084c0:	08008643 	.word	0x08008643
 80084c4:	08008643 	.word	0x08008643
 80084c8:	08008643 	.word	0x08008643
 80084cc:	08008643 	.word	0x08008643
 80084d0:	08008529 	.word	0x08008529
 80084d4:	0800854f 	.word	0x0800854f
 80084d8:	08008643 	.word	0x08008643
 80084dc:	08008643 	.word	0x08008643
 80084e0:	08008643 	.word	0x08008643
 80084e4:	08008643 	.word	0x08008643
 80084e8:	08008643 	.word	0x08008643
 80084ec:	08008643 	.word	0x08008643
 80084f0:	08008643 	.word	0x08008643
 80084f4:	08008643 	.word	0x08008643
 80084f8:	08008643 	.word	0x08008643
 80084fc:	08008643 	.word	0x08008643
 8008500:	08008643 	.word	0x08008643
 8008504:	0800860f 	.word	0x0800860f
 8008508:	08008643 	.word	0x08008643
 800850c:	08008643 	.word	0x08008643
 8008510:	080085c5 	.word	0x080085c5
 8008514:	08008643 	.word	0x08008643
 8008518:	08008575 	.word	0x08008575
 800851c:	08008643 	.word	0x08008643
 8008520:	08008643 	.word	0x08008643
 8008524:	0800859b 	.word	0x0800859b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	1d19      	adds	r1, r3, #4
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	6011      	str	r1, [r2, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8008536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008538:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 800853c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008540:	f107 0310 	add.w	r3, r7, #16
 8008544:	4611      	mov	r1, r2
 8008546:	4618      	mov	r0, r3
 8008548:	f7ff fd1c 	bl	8007f84 <_StoreChar>
        break;
 800854c:	e07a      	b.n	8008644 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	1d19      	adds	r1, r3, #4
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	6011      	str	r1, [r2, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800855c:	f107 0010 	add.w	r0, r7, #16
 8008560:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008562:	9301      	str	r3, [sp, #4]
 8008564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800856a:	220a      	movs	r2, #10
 800856c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800856e:	f7ff fe1b 	bl	80081a8 <_PrintInt>
        break;
 8008572:	e067      	b.n	8008644 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	1d19      	adds	r1, r3, #4
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	6011      	str	r1, [r2, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8008582:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008584:	f107 0010 	add.w	r0, r7, #16
 8008588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800858a:	9301      	str	r3, [sp, #4]
 800858c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008592:	220a      	movs	r2, #10
 8008594:	f7ff fd72 	bl	800807c <_PrintUnsigned>
        break;
 8008598:	e054      	b.n	8008644 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	1d19      	adds	r1, r3, #4
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	6011      	str	r1, [r2, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80085a8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80085aa:	f107 0010 	add.w	r0, r7, #16
 80085ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085b8:	2210      	movs	r2, #16
 80085ba:	f7ff fd5f 	bl	800807c <_PrintUnsigned>
        break;
 80085be:	e041      	b.n	8008644 <_VPrintTarget+0x37c>
 80085c0:	200146a0 	.word	0x200146a0
      case 's':
        s = va_arg(*pParamList, const char*);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	1d19      	adds	r1, r3, #4
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	6011      	str	r1, [r2, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 80085d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d101      	bne.n	80085dc <_VPrintTarget+0x314>
          s = "(null)";
 80085d8:	4b4a      	ldr	r3, [pc, #296]	@ (8008704 <_VPrintTarget+0x43c>)
 80085da:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 80085dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 80085e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085e6:	3301      	adds	r3, #1
 80085e8:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 80085ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00b      	beq.n	800860a <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80085f2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80085f6:	f107 0310 	add.w	r3, r7, #16
 80085fa:	4611      	mov	r1, r2
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7ff fcc1 	bl	8007f84 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008602:	6a3b      	ldr	r3, [r7, #32]
 8008604:	2b7f      	cmp	r3, #127	@ 0x7f
 8008606:	d9e9      	bls.n	80085dc <_VPrintTarget+0x314>
        break;
 8008608:	e01c      	b.n	8008644 <_VPrintTarget+0x37c>
            break;
 800860a:	bf00      	nop
        break;
 800860c:	e01a      	b.n	8008644 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	1d19      	adds	r1, r3, #4
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	6011      	str	r1, [r2, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800861c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800861e:	f107 0010 	add.w	r0, r7, #16
 8008622:	2300      	movs	r3, #0
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	2308      	movs	r3, #8
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	2308      	movs	r3, #8
 800862c:	2210      	movs	r2, #16
 800862e:	f7ff fd25 	bl	800807c <_PrintUnsigned>
        break;
 8008632:	e007      	b.n	8008644 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8008634:	f107 0310 	add.w	r3, r7, #16
 8008638:	2125      	movs	r1, #37	@ 0x25
 800863a:	4618      	mov	r0, r3
 800863c:	f7ff fca2 	bl	8007f84 <_StoreChar>
        break;
 8008640:	e000      	b.n	8008644 <_VPrintTarget+0x37c>
      default:
        break;
 8008642:	bf00      	nop
      }
      sFormat++;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	3301      	adds	r3, #1
 8008648:	60fb      	str	r3, [r7, #12]
 800864a:	e007      	b.n	800865c <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 800864c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008650:	f107 0310 	add.w	r3, r7, #16
 8008654:	4611      	mov	r1, r2
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff fc94 	bl	8007f84 <_StoreChar>
    }
  } while (*sFormat);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	f47f ae4d 	bne.w	8008300 <_VPrintTarget+0x38>
 8008666:	e000      	b.n	800866a <_VPrintTarget+0x3a2>
      break;
 8008668:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d041      	beq.n	80086f4 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8008670:	6a3a      	ldr	r2, [r7, #32]
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	b2d2      	uxtb	r2, r2
 8008676:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008680:	e00b      	b.n	800869a <_VPrintTarget+0x3d2>
 8008682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008684:	b2da      	uxtb	r2, r3
 8008686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008688:	1c59      	adds	r1, r3, #1
 800868a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800868c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008690:	b2d2      	uxtb	r2, r2
 8008692:	701a      	strb	r2, [r3, #0]
 8008694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008696:	09db      	lsrs	r3, r3, #7
 8008698:	63bb      	str	r3, [r7, #56]	@ 0x38
 800869a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869c:	2b7f      	cmp	r3, #127	@ 0x7f
 800869e:	d8f0      	bhi.n	8008682 <_VPrintTarget+0x3ba>
 80086a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086a2:	1c5a      	adds	r2, r3, #1
 80086a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80086a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086a8:	b2d2      	uxtb	r2, r2
 80086aa:	701a      	strb	r2, [r3, #0]
 80086ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ae:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b4:	2300      	movs	r3, #0
 80086b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80086b8:	e00b      	b.n	80086d2 <_VPrintTarget+0x40a>
 80086ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c0:	1c59      	adds	r1, r3, #1
 80086c2:	6379      	str	r1, [r7, #52]	@ 0x34
 80086c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80086c8:	b2d2      	uxtb	r2, r2
 80086ca:	701a      	strb	r2, [r3, #0]
 80086cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ce:	09db      	lsrs	r3, r3, #7
 80086d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80086d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80086d6:	d8f0      	bhi.n	80086ba <_VPrintTarget+0x3f2>
 80086d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086da:	1c5a      	adds	r2, r3, #1
 80086dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80086de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086e0:	b2d2      	uxtb	r2, r2
 80086e2:	701a      	strb	r2, [r3, #0]
 80086e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e6:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	6979      	ldr	r1, [r7, #20]
 80086ec:	221a      	movs	r2, #26
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7ff fad8 	bl	8007ca4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80086f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f6:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80086fa:	bf00      	nop
 80086fc:	3758      	adds	r7, #88	@ 0x58
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	0800cac0 	.word	0x0800cac0

08008708 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af02      	add	r7, sp, #8
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008716:	2300      	movs	r3, #0
 8008718:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800871c:	4917      	ldr	r1, [pc, #92]	@ (800877c <SEGGER_SYSVIEW_Init+0x74>)
 800871e:	4818      	ldr	r0, [pc, #96]	@ (8008780 <SEGGER_SYSVIEW_Init+0x78>)
 8008720:	f7ff f8d2 	bl	80078c8 <SEGGER_RTT_AllocUpBuffer>
 8008724:	4603      	mov	r3, r0
 8008726:	b2da      	uxtb	r2, r3
 8008728:	4b16      	ldr	r3, [pc, #88]	@ (8008784 <SEGGER_SYSVIEW_Init+0x7c>)
 800872a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800872c:	4b15      	ldr	r3, [pc, #84]	@ (8008784 <SEGGER_SYSVIEW_Init+0x7c>)
 800872e:	785a      	ldrb	r2, [r3, #1]
 8008730:	4b14      	ldr	r3, [pc, #80]	@ (8008784 <SEGGER_SYSVIEW_Init+0x7c>)
 8008732:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008734:	4b13      	ldr	r3, [pc, #76]	@ (8008784 <SEGGER_SYSVIEW_Init+0x7c>)
 8008736:	7e1b      	ldrb	r3, [r3, #24]
 8008738:	4618      	mov	r0, r3
 800873a:	2300      	movs	r3, #0
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	2308      	movs	r3, #8
 8008740:	4a11      	ldr	r2, [pc, #68]	@ (8008788 <SEGGER_SYSVIEW_Init+0x80>)
 8008742:	490f      	ldr	r1, [pc, #60]	@ (8008780 <SEGGER_SYSVIEW_Init+0x78>)
 8008744:	f7ff f944 	bl	80079d0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8008748:	4b0e      	ldr	r3, [pc, #56]	@ (8008784 <SEGGER_SYSVIEW_Init+0x7c>)
 800874a:	2200      	movs	r2, #0
 800874c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800874e:	4b0f      	ldr	r3, [pc, #60]	@ (800878c <SEGGER_SYSVIEW_Init+0x84>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a0c      	ldr	r2, [pc, #48]	@ (8008784 <SEGGER_SYSVIEW_Init+0x7c>)
 8008754:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8008756:	4a0b      	ldr	r2, [pc, #44]	@ (8008784 <SEGGER_SYSVIEW_Init+0x7c>)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800875c:	4a09      	ldr	r2, [pc, #36]	@ (8008784 <SEGGER_SYSVIEW_Init+0x7c>)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8008762:	4a08      	ldr	r2, [pc, #32]	@ (8008784 <SEGGER_SYSVIEW_Init+0x7c>)
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8008768:	4a06      	ldr	r2, [pc, #24]	@ (8008784 <SEGGER_SYSVIEW_Init+0x7c>)
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800876e:	4b05      	ldr	r3, [pc, #20]	@ (8008784 <SEGGER_SYSVIEW_Init+0x7c>)
 8008770:	2200      	movs	r2, #0
 8008772:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8008774:	bf00      	nop
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	20013668 	.word	0x20013668
 8008780:	0800cac8 	.word	0x0800cac8
 8008784:	20014670 	.word	0x20014670
 8008788:	20014668 	.word	0x20014668
 800878c:	e0001004 	.word	0xe0001004

08008790 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8008798:	4a04      	ldr	r2, [pc, #16]	@ (80087ac <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6113      	str	r3, [r2, #16]
}
 800879e:	bf00      	nop
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	20014670 	.word	0x20014670

080087b0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80087b8:	f3ef 8311 	mrs	r3, BASEPRI
 80087bc:	f04f 0120 	mov.w	r1, #32
 80087c0:	f381 8811 	msr	BASEPRI, r1
 80087c4:	60fb      	str	r3, [r7, #12]
 80087c6:	4808      	ldr	r0, [pc, #32]	@ (80087e8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80087c8:	f7ff f97e 	bl	8007ac8 <_PreparePacket>
 80087cc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	68b9      	ldr	r1, [r7, #8]
 80087d2:	68b8      	ldr	r0, [r7, #8]
 80087d4:	f7ff fa66 	bl	8007ca4 <_SendPacket>
  RECORD_END();
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f383 8811 	msr	BASEPRI, r3
}
 80087de:	bf00      	nop
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	200146a0 	.word	0x200146a0

080087ec <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b088      	sub	sp, #32
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80087f6:	f3ef 8311 	mrs	r3, BASEPRI
 80087fa:	f04f 0120 	mov.w	r1, #32
 80087fe:	f381 8811 	msr	BASEPRI, r1
 8008802:	617b      	str	r3, [r7, #20]
 8008804:	4816      	ldr	r0, [pc, #88]	@ (8008860 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8008806:	f7ff f95f 	bl	8007ac8 <_PreparePacket>
 800880a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	61fb      	str	r3, [r7, #28]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	61bb      	str	r3, [r7, #24]
 8008818:	e00b      	b.n	8008832 <SEGGER_SYSVIEW_RecordU32+0x46>
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	b2da      	uxtb	r2, r3
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	1c59      	adds	r1, r3, #1
 8008822:	61f9      	str	r1, [r7, #28]
 8008824:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008828:	b2d2      	uxtb	r2, r2
 800882a:	701a      	strb	r2, [r3, #0]
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	09db      	lsrs	r3, r3, #7
 8008830:	61bb      	str	r3, [r7, #24]
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	2b7f      	cmp	r3, #127	@ 0x7f
 8008836:	d8f0      	bhi.n	800881a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	61fa      	str	r2, [r7, #28]
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	b2d2      	uxtb	r2, r2
 8008842:	701a      	strb	r2, [r3, #0]
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	68f9      	ldr	r1, [r7, #12]
 800884c:	6938      	ldr	r0, [r7, #16]
 800884e:	f7ff fa29 	bl	8007ca4 <_SendPacket>
  RECORD_END();
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f383 8811 	msr	BASEPRI, r3
}
 8008858:	bf00      	nop
 800885a:	3720      	adds	r7, #32
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	200146a0 	.word	0x200146a0

08008864 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8008864:	b580      	push	{r7, lr}
 8008866:	b08c      	sub	sp, #48	@ 0x30
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008870:	f3ef 8311 	mrs	r3, BASEPRI
 8008874:	f04f 0120 	mov.w	r1, #32
 8008878:	f381 8811 	msr	BASEPRI, r1
 800887c:	61fb      	str	r3, [r7, #28]
 800887e:	4825      	ldr	r0, [pc, #148]	@ (8008914 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8008880:	f7ff f922 	bl	8007ac8 <_PreparePacket>
 8008884:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008892:	e00b      	b.n	80088ac <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8008894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008896:	b2da      	uxtb	r2, r3
 8008898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800889a:	1c59      	adds	r1, r3, #1
 800889c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800889e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80088a2:	b2d2      	uxtb	r2, r2
 80088a4:	701a      	strb	r2, [r3, #0]
 80088a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a8:	09db      	lsrs	r3, r3, #7
 80088aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80088b0:	d8f0      	bhi.n	8008894 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80088b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b4:	1c5a      	adds	r2, r3, #1
 80088b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088ba:	b2d2      	uxtb	r2, r2
 80088bc:	701a      	strb	r2, [r3, #0]
 80088be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	623b      	str	r3, [r7, #32]
 80088ca:	e00b      	b.n	80088e4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d2:	1c59      	adds	r1, r3, #1
 80088d4:	6279      	str	r1, [r7, #36]	@ 0x24
 80088d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80088da:	b2d2      	uxtb	r2, r2
 80088dc:	701a      	strb	r2, [r3, #0]
 80088de:	6a3b      	ldr	r3, [r7, #32]
 80088e0:	09db      	lsrs	r3, r3, #7
 80088e2:	623b      	str	r3, [r7, #32]
 80088e4:	6a3b      	ldr	r3, [r7, #32]
 80088e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80088e8:	d8f0      	bhi.n	80088cc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80088ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ec:	1c5a      	adds	r2, r3, #1
 80088ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80088f0:	6a3a      	ldr	r2, [r7, #32]
 80088f2:	b2d2      	uxtb	r2, r2
 80088f4:	701a      	strb	r2, [r3, #0]
 80088f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	6979      	ldr	r1, [r7, #20]
 80088fe:	69b8      	ldr	r0, [r7, #24]
 8008900:	f7ff f9d0 	bl	8007ca4 <_SendPacket>
  RECORD_END();
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	f383 8811 	msr	BASEPRI, r3
}
 800890a:	bf00      	nop
 800890c:	3730      	adds	r7, #48	@ 0x30
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	200146a0 	.word	0x200146a0

08008918 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8008918:	b580      	push	{r7, lr}
 800891a:	b08c      	sub	sp, #48	@ 0x30
 800891c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800891e:	4b59      	ldr	r3, [pc, #356]	@ (8008a84 <SEGGER_SYSVIEW_Start+0x16c>)
 8008920:	2201      	movs	r2, #1
 8008922:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8008924:	f3ef 8311 	mrs	r3, BASEPRI
 8008928:	f04f 0120 	mov.w	r1, #32
 800892c:	f381 8811 	msr	BASEPRI, r1
 8008930:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8008932:	4b54      	ldr	r3, [pc, #336]	@ (8008a84 <SEGGER_SYSVIEW_Start+0x16c>)
 8008934:	785b      	ldrb	r3, [r3, #1]
 8008936:	220a      	movs	r2, #10
 8008938:	4953      	ldr	r1, [pc, #332]	@ (8008a88 <SEGGER_SYSVIEW_Start+0x170>)
 800893a:	4618      	mov	r0, r3
 800893c:	f7f7 fc50 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8008946:	f7fe fc1b 	bl	8007180 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800894a:	200a      	movs	r0, #10
 800894c:	f7ff ff30 	bl	80087b0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008950:	f3ef 8311 	mrs	r3, BASEPRI
 8008954:	f04f 0120 	mov.w	r1, #32
 8008958:	f381 8811 	msr	BASEPRI, r1
 800895c:	60bb      	str	r3, [r7, #8]
 800895e:	484b      	ldr	r0, [pc, #300]	@ (8008a8c <SEGGER_SYSVIEW_Start+0x174>)
 8008960:	f7ff f8b2 	bl	8007ac8 <_PreparePacket>
 8008964:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800896e:	4b45      	ldr	r3, [pc, #276]	@ (8008a84 <SEGGER_SYSVIEW_Start+0x16c>)
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008974:	e00b      	b.n	800898e <SEGGER_SYSVIEW_Start+0x76>
 8008976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008978:	b2da      	uxtb	r2, r3
 800897a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897c:	1c59      	adds	r1, r3, #1
 800897e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8008980:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008984:	b2d2      	uxtb	r2, r2
 8008986:	701a      	strb	r2, [r3, #0]
 8008988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800898a:	09db      	lsrs	r3, r3, #7
 800898c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800898e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008990:	2b7f      	cmp	r3, #127	@ 0x7f
 8008992:	d8f0      	bhi.n	8008976 <SEGGER_SYSVIEW_Start+0x5e>
 8008994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008996:	1c5a      	adds	r2, r3, #1
 8008998:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800899a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800899c:	b2d2      	uxtb	r2, r2
 800899e:	701a      	strb	r2, [r3, #0]
 80089a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80089a8:	4b36      	ldr	r3, [pc, #216]	@ (8008a84 <SEGGER_SYSVIEW_Start+0x16c>)
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	623b      	str	r3, [r7, #32]
 80089ae:	e00b      	b.n	80089c8 <SEGGER_SYSVIEW_Start+0xb0>
 80089b0:	6a3b      	ldr	r3, [r7, #32]
 80089b2:	b2da      	uxtb	r2, r3
 80089b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b6:	1c59      	adds	r1, r3, #1
 80089b8:	6279      	str	r1, [r7, #36]	@ 0x24
 80089ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80089be:	b2d2      	uxtb	r2, r2
 80089c0:	701a      	strb	r2, [r3, #0]
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	09db      	lsrs	r3, r3, #7
 80089c6:	623b      	str	r3, [r7, #32]
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80089cc:	d8f0      	bhi.n	80089b0 <SEGGER_SYSVIEW_Start+0x98>
 80089ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d0:	1c5a      	adds	r2, r3, #1
 80089d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80089d4:	6a3a      	ldr	r2, [r7, #32]
 80089d6:	b2d2      	uxtb	r2, r2
 80089d8:	701a      	strb	r2, [r3, #0]
 80089da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089dc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	61fb      	str	r3, [r7, #28]
 80089e2:	4b28      	ldr	r3, [pc, #160]	@ (8008a84 <SEGGER_SYSVIEW_Start+0x16c>)
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	61bb      	str	r3, [r7, #24]
 80089e8:	e00b      	b.n	8008a02 <SEGGER_SYSVIEW_Start+0xea>
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	1c59      	adds	r1, r3, #1
 80089f2:	61f9      	str	r1, [r7, #28]
 80089f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80089f8:	b2d2      	uxtb	r2, r2
 80089fa:	701a      	strb	r2, [r3, #0]
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	09db      	lsrs	r3, r3, #7
 8008a00:	61bb      	str	r3, [r7, #24]
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	2b7f      	cmp	r3, #127	@ 0x7f
 8008a06:	d8f0      	bhi.n	80089ea <SEGGER_SYSVIEW_Start+0xd2>
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	1c5a      	adds	r2, r3, #1
 8008a0c:	61fa      	str	r2, [r7, #28]
 8008a0e:	69ba      	ldr	r2, [r7, #24]
 8008a10:	b2d2      	uxtb	r2, r2
 8008a12:	701a      	strb	r2, [r3, #0]
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	617b      	str	r3, [r7, #20]
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	613b      	str	r3, [r7, #16]
 8008a20:	e00b      	b.n	8008a3a <SEGGER_SYSVIEW_Start+0x122>
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	1c59      	adds	r1, r3, #1
 8008a2a:	6179      	str	r1, [r7, #20]
 8008a2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008a30:	b2d2      	uxtb	r2, r2
 8008a32:	701a      	strb	r2, [r3, #0]
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	09db      	lsrs	r3, r3, #7
 8008a38:	613b      	str	r3, [r7, #16]
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8008a3e:	d8f0      	bhi.n	8008a22 <SEGGER_SYSVIEW_Start+0x10a>
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	1c5a      	adds	r2, r3, #1
 8008a44:	617a      	str	r2, [r7, #20]
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	b2d2      	uxtb	r2, r2
 8008a4a:	701a      	strb	r2, [r3, #0]
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008a50:	2218      	movs	r2, #24
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff f925 	bl	8007ca4 <_SendPacket>
      RECORD_END();
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008a60:	4b08      	ldr	r3, [pc, #32]	@ (8008a84 <SEGGER_SYSVIEW_Start+0x16c>)
 8008a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d002      	beq.n	8008a6e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8008a68:	4b06      	ldr	r3, [pc, #24]	@ (8008a84 <SEGGER_SYSVIEW_Start+0x16c>)
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a6c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8008a6e:	f000 f9eb 	bl	8008e48 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8008a72:	f000 f9b1 	bl	8008dd8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8008a76:	f000 fd11 	bl	800949c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8008a7a:	bf00      	nop
 8008a7c:	3730      	adds	r7, #48	@ 0x30
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	20014670 	.word	0x20014670
 8008a88:	0800cb0c 	.word	0x0800cb0c
 8008a8c:	200146a0 	.word	0x200146a0

08008a90 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008a96:	f3ef 8311 	mrs	r3, BASEPRI
 8008a9a:	f04f 0120 	mov.w	r1, #32
 8008a9e:	f381 8811 	msr	BASEPRI, r1
 8008aa2:	607b      	str	r3, [r7, #4]
 8008aa4:	480b      	ldr	r0, [pc, #44]	@ (8008ad4 <SEGGER_SYSVIEW_Stop+0x44>)
 8008aa6:	f7ff f80f 	bl	8007ac8 <_PreparePacket>
 8008aaa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8008aac:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad8 <SEGGER_SYSVIEW_Stop+0x48>)
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d007      	beq.n	8008ac4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8008ab4:	220b      	movs	r2, #11
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6838      	ldr	r0, [r7, #0]
 8008aba:	f7ff f8f3 	bl	8007ca4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8008abe:	4b06      	ldr	r3, [pc, #24]	@ (8008ad8 <SEGGER_SYSVIEW_Stop+0x48>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f383 8811 	msr	BASEPRI, r3
}
 8008aca:	bf00      	nop
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	200146a0 	.word	0x200146a0
 8008ad8:	20014670 	.word	0x20014670

08008adc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08c      	sub	sp, #48	@ 0x30
 8008ae0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008ae2:	f3ef 8311 	mrs	r3, BASEPRI
 8008ae6:	f04f 0120 	mov.w	r1, #32
 8008aea:	f381 8811 	msr	BASEPRI, r1
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	4845      	ldr	r0, [pc, #276]	@ (8008c08 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8008af2:	f7fe ffe9 	bl	8007ac8 <_PreparePacket>
 8008af6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b00:	4b42      	ldr	r3, [pc, #264]	@ (8008c0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b06:	e00b      	b.n	8008b20 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b0e:	1c59      	adds	r1, r3, #1
 8008b10:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8008b12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008b16:	b2d2      	uxtb	r2, r2
 8008b18:	701a      	strb	r2, [r3, #0]
 8008b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1c:	09db      	lsrs	r3, r3, #7
 8008b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b22:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b24:	d8f0      	bhi.n	8008b08 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8008b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b28:	1c5a      	adds	r2, r3, #1
 8008b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b2e:	b2d2      	uxtb	r2, r2
 8008b30:	701a      	strb	r2, [r3, #0]
 8008b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b34:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b3a:	4b34      	ldr	r3, [pc, #208]	@ (8008c0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	623b      	str	r3, [r7, #32]
 8008b40:	e00b      	b.n	8008b5a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b48:	1c59      	adds	r1, r3, #1
 8008b4a:	6279      	str	r1, [r7, #36]	@ 0x24
 8008b4c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008b50:	b2d2      	uxtb	r2, r2
 8008b52:	701a      	strb	r2, [r3, #0]
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	09db      	lsrs	r3, r3, #7
 8008b58:	623b      	str	r3, [r7, #32]
 8008b5a:	6a3b      	ldr	r3, [r7, #32]
 8008b5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b5e:	d8f0      	bhi.n	8008b42 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8008b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b62:	1c5a      	adds	r2, r3, #1
 8008b64:	627a      	str	r2, [r7, #36]	@ 0x24
 8008b66:	6a3a      	ldr	r2, [r7, #32]
 8008b68:	b2d2      	uxtb	r2, r2
 8008b6a:	701a      	strb	r2, [r3, #0]
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	61fb      	str	r3, [r7, #28]
 8008b74:	4b25      	ldr	r3, [pc, #148]	@ (8008c0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	61bb      	str	r3, [r7, #24]
 8008b7a:	e00b      	b.n	8008b94 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	1c59      	adds	r1, r3, #1
 8008b84:	61f9      	str	r1, [r7, #28]
 8008b86:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008b8a:	b2d2      	uxtb	r2, r2
 8008b8c:	701a      	strb	r2, [r3, #0]
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	09db      	lsrs	r3, r3, #7
 8008b92:	61bb      	str	r3, [r7, #24]
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b98:	d8f0      	bhi.n	8008b7c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	1c5a      	adds	r2, r3, #1
 8008b9e:	61fa      	str	r2, [r7, #28]
 8008ba0:	69ba      	ldr	r2, [r7, #24]
 8008ba2:	b2d2      	uxtb	r2, r2
 8008ba4:	701a      	strb	r2, [r3, #0]
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	617b      	str	r3, [r7, #20]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	613b      	str	r3, [r7, #16]
 8008bb2:	e00b      	b.n	8008bcc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	1c59      	adds	r1, r3, #1
 8008bbc:	6179      	str	r1, [r7, #20]
 8008bbe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008bc2:	b2d2      	uxtb	r2, r2
 8008bc4:	701a      	strb	r2, [r3, #0]
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	09db      	lsrs	r3, r3, #7
 8008bca:	613b      	str	r3, [r7, #16]
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	2b7f      	cmp	r3, #127	@ 0x7f
 8008bd0:	d8f0      	bhi.n	8008bb4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	1c5a      	adds	r2, r3, #1
 8008bd6:	617a      	str	r2, [r7, #20]
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	701a      	strb	r2, [r3, #0]
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008be2:	2218      	movs	r2, #24
 8008be4:	6879      	ldr	r1, [r7, #4]
 8008be6:	68b8      	ldr	r0, [r7, #8]
 8008be8:	f7ff f85c 	bl	8007ca4 <_SendPacket>
  RECORD_END();
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008bf2:	4b06      	ldr	r3, [pc, #24]	@ (8008c0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d002      	beq.n	8008c00 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8008bfa:	4b04      	ldr	r3, [pc, #16]	@ (8008c0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfe:	4798      	blx	r3
  }
}
 8008c00:	bf00      	nop
 8008c02:	3730      	adds	r7, #48	@ 0x30
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	200146a0 	.word	0x200146a0
 8008c0c:	20014670 	.word	0x20014670

08008c10 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b092      	sub	sp, #72	@ 0x48
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8008c18:	f3ef 8311 	mrs	r3, BASEPRI
 8008c1c:	f04f 0120 	mov.w	r1, #32
 8008c20:	f381 8811 	msr	BASEPRI, r1
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	486a      	ldr	r0, [pc, #424]	@ (8008dd0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8008c28:	f7fe ff4e 	bl	8007ac8 <_PreparePacket>
 8008c2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	4b66      	ldr	r3, [pc, #408]	@ (8008dd4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c42:	e00b      	b.n	8008c5c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8008c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c4a:	1c59      	adds	r1, r3, #1
 8008c4c:	6479      	str	r1, [r7, #68]	@ 0x44
 8008c4e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008c52:	b2d2      	uxtb	r2, r2
 8008c54:	701a      	strb	r2, [r3, #0]
 8008c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c58:	09db      	lsrs	r3, r3, #7
 8008c5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c60:	d8f0      	bhi.n	8008c44 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8008c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c64:	1c5a      	adds	r2, r3, #1
 8008c66:	647a      	str	r2, [r7, #68]	@ 0x44
 8008c68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c6a:	b2d2      	uxtb	r2, r2
 8008c6c:	701a      	strb	r2, [r3, #0]
 8008c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c7c:	e00b      	b.n	8008c96 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c84:	1c59      	adds	r1, r3, #1
 8008c86:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8008c88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008c8c:	b2d2      	uxtb	r2, r2
 8008c8e:	701a      	strb	r2, [r3, #0]
 8008c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c92:	09db      	lsrs	r3, r3, #7
 8008c94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c98:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c9a:	d8f0      	bhi.n	8008c7e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8008c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c9e:	1c5a      	adds	r2, r3, #1
 8008ca0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008ca2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ca4:	b2d2      	uxtb	r2, r2
 8008ca6:	701a      	strb	r2, [r3, #0]
 8008ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008caa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f7fe fed7 	bl	8007a68 <_EncodeStr>
 8008cba:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8008cbc:	2209      	movs	r2, #9
 8008cbe:	68f9      	ldr	r1, [r7, #12]
 8008cc0:	6938      	ldr	r0, [r7, #16]
 8008cc2:	f7fe ffef 	bl	8007ca4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	4b40      	ldr	r3, [pc, #256]	@ (8008dd4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cda:	e00b      	b.n	8008cf4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cde:	b2da      	uxtb	r2, r3
 8008ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ce2:	1c59      	adds	r1, r3, #1
 8008ce4:	6379      	str	r1, [r7, #52]	@ 0x34
 8008ce6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008cea:	b2d2      	uxtb	r2, r2
 8008cec:	701a      	strb	r2, [r3, #0]
 8008cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf0:	09db      	lsrs	r3, r3, #7
 8008cf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008cf8:	d8f0      	bhi.n	8008cdc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8008cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cfc:	1c5a      	adds	r2, r3, #1
 8008cfe:	637a      	str	r2, [r7, #52]	@ 0x34
 8008d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d02:	b2d2      	uxtb	r2, r2
 8008d04:	701a      	strb	r2, [r3, #0]
 8008d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d14:	e00b      	b.n	8008d2e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8008d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d18:	b2da      	uxtb	r2, r3
 8008d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1c:	1c59      	adds	r1, r3, #1
 8008d1e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8008d20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008d24:	b2d2      	uxtb	r2, r2
 8008d26:	701a      	strb	r2, [r3, #0]
 8008d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2a:	09db      	lsrs	r3, r3, #7
 8008d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d30:	2b7f      	cmp	r3, #127	@ 0x7f
 8008d32:	d8f0      	bhi.n	8008d16 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d36:	1c5a      	adds	r2, r3, #1
 8008d38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d3c:	b2d2      	uxtb	r2, r2
 8008d3e:	701a      	strb	r2, [r3, #0]
 8008d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d42:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	623b      	str	r3, [r7, #32]
 8008d4e:	e00b      	b.n	8008d68 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d56:	1c59      	adds	r1, r3, #1
 8008d58:	6279      	str	r1, [r7, #36]	@ 0x24
 8008d5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008d5e:	b2d2      	uxtb	r2, r2
 8008d60:	701a      	strb	r2, [r3, #0]
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	09db      	lsrs	r3, r3, #7
 8008d66:	623b      	str	r3, [r7, #32]
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8008d6c:	d8f0      	bhi.n	8008d50 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d70:	1c5a      	adds	r2, r3, #1
 8008d72:	627a      	str	r2, [r7, #36]	@ 0x24
 8008d74:	6a3a      	ldr	r2, [r7, #32]
 8008d76:	b2d2      	uxtb	r2, r2
 8008d78:	701a      	strb	r2, [r3, #0]
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	61fb      	str	r3, [r7, #28]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	61bb      	str	r3, [r7, #24]
 8008d88:	e00b      	b.n	8008da2 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	1c59      	adds	r1, r3, #1
 8008d92:	61f9      	str	r1, [r7, #28]
 8008d94:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008d98:	b2d2      	uxtb	r2, r2
 8008d9a:	701a      	strb	r2, [r3, #0]
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	09db      	lsrs	r3, r3, #7
 8008da0:	61bb      	str	r3, [r7, #24]
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	2b7f      	cmp	r3, #127	@ 0x7f
 8008da6:	d8f0      	bhi.n	8008d8a <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	61fa      	str	r2, [r7, #28]
 8008dae:	69ba      	ldr	r2, [r7, #24]
 8008db0:	b2d2      	uxtb	r2, r2
 8008db2:	701a      	strb	r2, [r3, #0]
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8008db8:	2215      	movs	r2, #21
 8008dba:	68f9      	ldr	r1, [r7, #12]
 8008dbc:	6938      	ldr	r0, [r7, #16]
 8008dbe:	f7fe ff71 	bl	8007ca4 <_SendPacket>
  RECORD_END();
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f383 8811 	msr	BASEPRI, r3
}
 8008dc8:	bf00      	nop
 8008dca:	3748      	adds	r7, #72	@ 0x48
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	200146a0 	.word	0x200146a0
 8008dd4:	20014670 	.word	0x20014670

08008dd8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8008ddc:	4b07      	ldr	r3, [pc, #28]	@ (8008dfc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d008      	beq.n	8008df6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8008de4:	4b05      	ldr	r3, [pc, #20]	@ (8008dfc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008de6:	6a1b      	ldr	r3, [r3, #32]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d003      	beq.n	8008df6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8008dee:	4b03      	ldr	r3, [pc, #12]	@ (8008dfc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	4798      	blx	r3
  }
}
 8008df6:	bf00      	nop
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	20014670 	.word	0x20014670

08008e00 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008e08:	f3ef 8311 	mrs	r3, BASEPRI
 8008e0c:	f04f 0120 	mov.w	r1, #32
 8008e10:	f381 8811 	msr	BASEPRI, r1
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	480b      	ldr	r0, [pc, #44]	@ (8008e44 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8008e18:	f7fe fe56 	bl	8007ac8 <_PreparePacket>
 8008e1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008e1e:	2280      	movs	r2, #128	@ 0x80
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	6938      	ldr	r0, [r7, #16]
 8008e24:	f7fe fe20 	bl	8007a68 <_EncodeStr>
 8008e28:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8008e2a:	220e      	movs	r2, #14
 8008e2c:	68f9      	ldr	r1, [r7, #12]
 8008e2e:	6938      	ldr	r0, [r7, #16]
 8008e30:	f7fe ff38 	bl	8007ca4 <_SendPacket>
  RECORD_END();
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f383 8811 	msr	BASEPRI, r3
}
 8008e3a:	bf00      	nop
 8008e3c:	3718      	adds	r7, #24
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	200146a0 	.word	0x200146a0

08008e48 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008e48:	b590      	push	{r4, r7, lr}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8008e4e:	4b15      	ldr	r3, [pc, #84]	@ (8008ea4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d01a      	beq.n	8008e8c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8008e56:	4b13      	ldr	r3, [pc, #76]	@ (8008ea4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d015      	beq.n	8008e8c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8008e60:	4b10      	ldr	r3, [pc, #64]	@ (8008ea4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4798      	blx	r3
 8008e68:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008e6c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8008e6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e72:	f04f 0200 	mov.w	r2, #0
 8008e76:	f04f 0300 	mov.w	r3, #0
 8008e7a:	000a      	movs	r2, r1
 8008e7c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008e7e:	4613      	mov	r3, r2
 8008e80:	461a      	mov	r2, r3
 8008e82:	4621      	mov	r1, r4
 8008e84:	200d      	movs	r0, #13
 8008e86:	f7ff fced 	bl	8008864 <SEGGER_SYSVIEW_RecordU32x2>
 8008e8a:	e006      	b.n	8008e9a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008e8c:	4b06      	ldr	r3, [pc, #24]	@ (8008ea8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4619      	mov	r1, r3
 8008e92:	200c      	movs	r0, #12
 8008e94:	f7ff fcaa 	bl	80087ec <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008e98:	bf00      	nop
 8008e9a:	bf00      	nop
 8008e9c:	370c      	adds	r7, #12
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd90      	pop	{r4, r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20014670 	.word	0x20014670
 8008ea8:	e0001004 	.word	0xe0001004

08008eac <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008eb2:	f3ef 8311 	mrs	r3, BASEPRI
 8008eb6:	f04f 0120 	mov.w	r1, #32
 8008eba:	f381 8811 	msr	BASEPRI, r1
 8008ebe:	60fb      	str	r3, [r7, #12]
 8008ec0:	4819      	ldr	r0, [pc, #100]	@ (8008f28 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8008ec2:	f7fe fe01 	bl	8007ac8 <_PreparePacket>
 8008ec6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8008ecc:	4b17      	ldr	r3, [pc, #92]	@ (8008f2c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ed4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	617b      	str	r3, [r7, #20]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	613b      	str	r3, [r7, #16]
 8008ede:	e00b      	b.n	8008ef8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	1c59      	adds	r1, r3, #1
 8008ee8:	6179      	str	r1, [r7, #20]
 8008eea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008eee:	b2d2      	uxtb	r2, r2
 8008ef0:	701a      	strb	r2, [r3, #0]
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	09db      	lsrs	r3, r3, #7
 8008ef6:	613b      	str	r3, [r7, #16]
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	2b7f      	cmp	r3, #127	@ 0x7f
 8008efc:	d8f0      	bhi.n	8008ee0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	1c5a      	adds	r2, r3, #1
 8008f02:	617a      	str	r2, [r7, #20]
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	b2d2      	uxtb	r2, r2
 8008f08:	701a      	strb	r2, [r3, #0]
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8008f0e:	2202      	movs	r2, #2
 8008f10:	6879      	ldr	r1, [r7, #4]
 8008f12:	68b8      	ldr	r0, [r7, #8]
 8008f14:	f7fe fec6 	bl	8007ca4 <_SendPacket>
  RECORD_END();
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f383 8811 	msr	BASEPRI, r3
}
 8008f1e:	bf00      	nop
 8008f20:	3718      	adds	r7, #24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	200146a0 	.word	0x200146a0
 8008f2c:	e000ed04 	.word	0xe000ed04

08008f30 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008f36:	f3ef 8311 	mrs	r3, BASEPRI
 8008f3a:	f04f 0120 	mov.w	r1, #32
 8008f3e:	f381 8811 	msr	BASEPRI, r1
 8008f42:	607b      	str	r3, [r7, #4]
 8008f44:	4807      	ldr	r0, [pc, #28]	@ (8008f64 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8008f46:	f7fe fdbf 	bl	8007ac8 <_PreparePacket>
 8008f4a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8008f4c:	2203      	movs	r2, #3
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	6838      	ldr	r0, [r7, #0]
 8008f52:	f7fe fea7 	bl	8007ca4 <_SendPacket>
  RECORD_END();
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f383 8811 	msr	BASEPRI, r3
}
 8008f5c:	bf00      	nop
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	200146a0 	.word	0x200146a0

08008f68 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008f6e:	f3ef 8311 	mrs	r3, BASEPRI
 8008f72:	f04f 0120 	mov.w	r1, #32
 8008f76:	f381 8811 	msr	BASEPRI, r1
 8008f7a:	607b      	str	r3, [r7, #4]
 8008f7c:	4807      	ldr	r0, [pc, #28]	@ (8008f9c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8008f7e:	f7fe fda3 	bl	8007ac8 <_PreparePacket>
 8008f82:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8008f84:	2212      	movs	r2, #18
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	6838      	ldr	r0, [r7, #0]
 8008f8a:	f7fe fe8b 	bl	8007ca4 <_SendPacket>
  RECORD_END();
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f383 8811 	msr	BASEPRI, r3
}
 8008f94:	bf00      	nop
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	200146a0 	.word	0x200146a0

08008fa0 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b088      	sub	sp, #32
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008fa8:	f3ef 8311 	mrs	r3, BASEPRI
 8008fac:	f04f 0120 	mov.w	r1, #32
 8008fb0:	f381 8811 	msr	BASEPRI, r1
 8008fb4:	617b      	str	r3, [r7, #20]
 8008fb6:	4817      	ldr	r0, [pc, #92]	@ (8009014 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8008fb8:	f7fe fd86 	bl	8007ac8 <_PreparePacket>
 8008fbc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	61fb      	str	r3, [r7, #28]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	61bb      	str	r3, [r7, #24]
 8008fca:	e00b      	b.n	8008fe4 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	1c59      	adds	r1, r3, #1
 8008fd4:	61f9      	str	r1, [r7, #28]
 8008fd6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008fda:	b2d2      	uxtb	r2, r2
 8008fdc:	701a      	strb	r2, [r3, #0]
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	09db      	lsrs	r3, r3, #7
 8008fe2:	61bb      	str	r3, [r7, #24]
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008fe8:	d8f0      	bhi.n	8008fcc <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	1c5a      	adds	r2, r3, #1
 8008fee:	61fa      	str	r2, [r7, #28]
 8008ff0:	69ba      	ldr	r2, [r7, #24]
 8008ff2:	b2d2      	uxtb	r2, r2
 8008ff4:	701a      	strb	r2, [r3, #0]
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8008ffa:	221c      	movs	r2, #28
 8008ffc:	68f9      	ldr	r1, [r7, #12]
 8008ffe:	6938      	ldr	r0, [r7, #16]
 8009000:	f7fe fe50 	bl	8007ca4 <_SendPacket>
  RECORD_END();
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	f383 8811 	msr	BASEPRI, r3
}
 800900a:	bf00      	nop
 800900c:	3720      	adds	r7, #32
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	200146a0 	.word	0x200146a0

08009018 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8009018:	b580      	push	{r7, lr}
 800901a:	b08a      	sub	sp, #40	@ 0x28
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009022:	f3ef 8311 	mrs	r3, BASEPRI
 8009026:	f04f 0120 	mov.w	r1, #32
 800902a:	f381 8811 	msr	BASEPRI, r1
 800902e:	617b      	str	r3, [r7, #20]
 8009030:	4824      	ldr	r0, [pc, #144]	@ (80090c4 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8009032:	f7fe fd49 	bl	8007ac8 <_PreparePacket>
 8009036:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	623b      	str	r3, [r7, #32]
 8009044:	e00b      	b.n	800905e <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8009046:	6a3b      	ldr	r3, [r7, #32]
 8009048:	b2da      	uxtb	r2, r3
 800904a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904c:	1c59      	adds	r1, r3, #1
 800904e:	6279      	str	r1, [r7, #36]	@ 0x24
 8009050:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009054:	b2d2      	uxtb	r2, r2
 8009056:	701a      	strb	r2, [r3, #0]
 8009058:	6a3b      	ldr	r3, [r7, #32]
 800905a:	09db      	lsrs	r3, r3, #7
 800905c:	623b      	str	r3, [r7, #32]
 800905e:	6a3b      	ldr	r3, [r7, #32]
 8009060:	2b7f      	cmp	r3, #127	@ 0x7f
 8009062:	d8f0      	bhi.n	8009046 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8009064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	627a      	str	r2, [r7, #36]	@ 0x24
 800906a:	6a3a      	ldr	r2, [r7, #32]
 800906c:	b2d2      	uxtb	r2, r2
 800906e:	701a      	strb	r2, [r3, #0]
 8009070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009072:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	61fb      	str	r3, [r7, #28]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	61bb      	str	r3, [r7, #24]
 800907c:	e00b      	b.n	8009096 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	b2da      	uxtb	r2, r3
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	1c59      	adds	r1, r3, #1
 8009086:	61f9      	str	r1, [r7, #28]
 8009088:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800908c:	b2d2      	uxtb	r2, r2
 800908e:	701a      	strb	r2, [r3, #0]
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	09db      	lsrs	r3, r3, #7
 8009094:	61bb      	str	r3, [r7, #24]
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	2b7f      	cmp	r3, #127	@ 0x7f
 800909a:	d8f0      	bhi.n	800907e <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	61fa      	str	r2, [r7, #28]
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	b2d2      	uxtb	r2, r2
 80090a6:	701a      	strb	r2, [r3, #0]
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80090ac:	221c      	movs	r2, #28
 80090ae:	68f9      	ldr	r1, [r7, #12]
 80090b0:	6938      	ldr	r0, [r7, #16]
 80090b2:	f7fe fdf7 	bl	8007ca4 <_SendPacket>
  RECORD_END();
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	f383 8811 	msr	BASEPRI, r3
}
 80090bc:	bf00      	nop
 80090be:	3728      	adds	r7, #40	@ 0x28
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	200146a0 	.word	0x200146a0

080090c8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80090ce:	f3ef 8311 	mrs	r3, BASEPRI
 80090d2:	f04f 0120 	mov.w	r1, #32
 80090d6:	f381 8811 	msr	BASEPRI, r1
 80090da:	607b      	str	r3, [r7, #4]
 80090dc:	4807      	ldr	r0, [pc, #28]	@ (80090fc <SEGGER_SYSVIEW_OnIdle+0x34>)
 80090de:	f7fe fcf3 	bl	8007ac8 <_PreparePacket>
 80090e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80090e4:	2211      	movs	r2, #17
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6838      	ldr	r0, [r7, #0]
 80090ea:	f7fe fddb 	bl	8007ca4 <_SendPacket>
  RECORD_END();
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f383 8811 	msr	BASEPRI, r3
}
 80090f4:	bf00      	nop
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	200146a0 	.word	0x200146a0

08009100 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8009100:	b580      	push	{r7, lr}
 8009102:	b088      	sub	sp, #32
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009108:	f3ef 8311 	mrs	r3, BASEPRI
 800910c:	f04f 0120 	mov.w	r1, #32
 8009110:	f381 8811 	msr	BASEPRI, r1
 8009114:	617b      	str	r3, [r7, #20]
 8009116:	4819      	ldr	r0, [pc, #100]	@ (800917c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8009118:	f7fe fcd6 	bl	8007ac8 <_PreparePacket>
 800911c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009122:	4b17      	ldr	r3, [pc, #92]	@ (8009180 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	61fb      	str	r3, [r7, #28]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	61bb      	str	r3, [r7, #24]
 8009134:	e00b      	b.n	800914e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	b2da      	uxtb	r2, r3
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	1c59      	adds	r1, r3, #1
 800913e:	61f9      	str	r1, [r7, #28]
 8009140:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009144:	b2d2      	uxtb	r2, r2
 8009146:	701a      	strb	r2, [r3, #0]
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	09db      	lsrs	r3, r3, #7
 800914c:	61bb      	str	r3, [r7, #24]
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	2b7f      	cmp	r3, #127	@ 0x7f
 8009152:	d8f0      	bhi.n	8009136 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	1c5a      	adds	r2, r3, #1
 8009158:	61fa      	str	r2, [r7, #28]
 800915a:	69ba      	ldr	r2, [r7, #24]
 800915c:	b2d2      	uxtb	r2, r2
 800915e:	701a      	strb	r2, [r3, #0]
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8009164:	2208      	movs	r2, #8
 8009166:	68f9      	ldr	r1, [r7, #12]
 8009168:	6938      	ldr	r0, [r7, #16]
 800916a:	f7fe fd9b 	bl	8007ca4 <_SendPacket>
  RECORD_END();
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	f383 8811 	msr	BASEPRI, r3
}
 8009174:	bf00      	nop
 8009176:	3720      	adds	r7, #32
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	200146a0 	.word	0x200146a0
 8009180:	20014670 	.word	0x20014670

08009184 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8009184:	b580      	push	{r7, lr}
 8009186:	b088      	sub	sp, #32
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800918c:	f3ef 8311 	mrs	r3, BASEPRI
 8009190:	f04f 0120 	mov.w	r1, #32
 8009194:	f381 8811 	msr	BASEPRI, r1
 8009198:	617b      	str	r3, [r7, #20]
 800919a:	4819      	ldr	r0, [pc, #100]	@ (8009200 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800919c:	f7fe fc94 	bl	8007ac8 <_PreparePacket>
 80091a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80091a6:	4b17      	ldr	r3, [pc, #92]	@ (8009204 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	61fb      	str	r3, [r7, #28]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	61bb      	str	r3, [r7, #24]
 80091b8:	e00b      	b.n	80091d2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	1c59      	adds	r1, r3, #1
 80091c2:	61f9      	str	r1, [r7, #28]
 80091c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80091c8:	b2d2      	uxtb	r2, r2
 80091ca:	701a      	strb	r2, [r3, #0]
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	09db      	lsrs	r3, r3, #7
 80091d0:	61bb      	str	r3, [r7, #24]
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80091d6:	d8f0      	bhi.n	80091ba <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	1c5a      	adds	r2, r3, #1
 80091dc:	61fa      	str	r2, [r7, #28]
 80091de:	69ba      	ldr	r2, [r7, #24]
 80091e0:	b2d2      	uxtb	r2, r2
 80091e2:	701a      	strb	r2, [r3, #0]
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80091e8:	2204      	movs	r2, #4
 80091ea:	68f9      	ldr	r1, [r7, #12]
 80091ec:	6938      	ldr	r0, [r7, #16]
 80091ee:	f7fe fd59 	bl	8007ca4 <_SendPacket>
  RECORD_END();
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	f383 8811 	msr	BASEPRI, r3
}
 80091f8:	bf00      	nop
 80091fa:	3720      	adds	r7, #32
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	200146a0 	.word	0x200146a0
 8009204:	20014670 	.word	0x20014670

08009208 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8009208:	b580      	push	{r7, lr}
 800920a:	b088      	sub	sp, #32
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009210:	f3ef 8311 	mrs	r3, BASEPRI
 8009214:	f04f 0120 	mov.w	r1, #32
 8009218:	f381 8811 	msr	BASEPRI, r1
 800921c:	617b      	str	r3, [r7, #20]
 800921e:	4819      	ldr	r0, [pc, #100]	@ (8009284 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8009220:	f7fe fc52 	bl	8007ac8 <_PreparePacket>
 8009224:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800922a:	4b17      	ldr	r3, [pc, #92]	@ (8009288 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	61fb      	str	r3, [r7, #28]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	61bb      	str	r3, [r7, #24]
 800923c:	e00b      	b.n	8009256 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	b2da      	uxtb	r2, r3
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	1c59      	adds	r1, r3, #1
 8009246:	61f9      	str	r1, [r7, #28]
 8009248:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800924c:	b2d2      	uxtb	r2, r2
 800924e:	701a      	strb	r2, [r3, #0]
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	09db      	lsrs	r3, r3, #7
 8009254:	61bb      	str	r3, [r7, #24]
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	2b7f      	cmp	r3, #127	@ 0x7f
 800925a:	d8f0      	bhi.n	800923e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	61fa      	str	r2, [r7, #28]
 8009262:	69ba      	ldr	r2, [r7, #24]
 8009264:	b2d2      	uxtb	r2, r2
 8009266:	701a      	strb	r2, [r3, #0]
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800926c:	2206      	movs	r2, #6
 800926e:	68f9      	ldr	r1, [r7, #12]
 8009270:	6938      	ldr	r0, [r7, #16]
 8009272:	f7fe fd17 	bl	8007ca4 <_SendPacket>
  RECORD_END();
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	f383 8811 	msr	BASEPRI, r3
}
 800927c:	bf00      	nop
 800927e:	3720      	adds	r7, #32
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	200146a0 	.word	0x200146a0
 8009288:	20014670 	.word	0x20014670

0800928c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800928c:	b580      	push	{r7, lr}
 800928e:	b08a      	sub	sp, #40	@ 0x28
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009296:	f3ef 8311 	mrs	r3, BASEPRI
 800929a:	f04f 0120 	mov.w	r1, #32
 800929e:	f381 8811 	msr	BASEPRI, r1
 80092a2:	617b      	str	r3, [r7, #20]
 80092a4:	4827      	ldr	r0, [pc, #156]	@ (8009344 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80092a6:	f7fe fc0f 	bl	8007ac8 <_PreparePacket>
 80092aa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80092b0:	4b25      	ldr	r3, [pc, #148]	@ (8009348 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	623b      	str	r3, [r7, #32]
 80092c2:	e00b      	b.n	80092dc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80092c4:	6a3b      	ldr	r3, [r7, #32]
 80092c6:	b2da      	uxtb	r2, r3
 80092c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ca:	1c59      	adds	r1, r3, #1
 80092cc:	6279      	str	r1, [r7, #36]	@ 0x24
 80092ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80092d2:	b2d2      	uxtb	r2, r2
 80092d4:	701a      	strb	r2, [r3, #0]
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	09db      	lsrs	r3, r3, #7
 80092da:	623b      	str	r3, [r7, #32]
 80092dc:	6a3b      	ldr	r3, [r7, #32]
 80092de:	2b7f      	cmp	r3, #127	@ 0x7f
 80092e0:	d8f0      	bhi.n	80092c4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80092e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e4:	1c5a      	adds	r2, r3, #1
 80092e6:	627a      	str	r2, [r7, #36]	@ 0x24
 80092e8:	6a3a      	ldr	r2, [r7, #32]
 80092ea:	b2d2      	uxtb	r2, r2
 80092ec:	701a      	strb	r2, [r3, #0]
 80092ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	61fb      	str	r3, [r7, #28]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	61bb      	str	r3, [r7, #24]
 80092fa:	e00b      	b.n	8009314 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	1c59      	adds	r1, r3, #1
 8009304:	61f9      	str	r1, [r7, #28]
 8009306:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800930a:	b2d2      	uxtb	r2, r2
 800930c:	701a      	strb	r2, [r3, #0]
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	09db      	lsrs	r3, r3, #7
 8009312:	61bb      	str	r3, [r7, #24]
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	2b7f      	cmp	r3, #127	@ 0x7f
 8009318:	d8f0      	bhi.n	80092fc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	1c5a      	adds	r2, r3, #1
 800931e:	61fa      	str	r2, [r7, #28]
 8009320:	69ba      	ldr	r2, [r7, #24]
 8009322:	b2d2      	uxtb	r2, r2
 8009324:	701a      	strb	r2, [r3, #0]
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800932a:	2207      	movs	r2, #7
 800932c:	68f9      	ldr	r1, [r7, #12]
 800932e:	6938      	ldr	r0, [r7, #16]
 8009330:	f7fe fcb8 	bl	8007ca4 <_SendPacket>
  RECORD_END();
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	f383 8811 	msr	BASEPRI, r3
}
 800933a:	bf00      	nop
 800933c:	3728      	adds	r7, #40	@ 0x28
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	200146a0 	.word	0x200146a0
 8009348:	20014670 	.word	0x20014670

0800934c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800934c:	b580      	push	{r7, lr}
 800934e:	b08c      	sub	sp, #48	@ 0x30
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8009356:	4b40      	ldr	r3, [pc, #256]	@ (8009458 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d077      	beq.n	800944e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800935e:	4b3e      	ldr	r3, [pc, #248]	@ (8009458 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8009364:	2300      	movs	r3, #0
 8009366:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009368:	e008      	b.n	800937c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800936a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8009370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009372:	2b00      	cmp	r3, #0
 8009374:	d007      	beq.n	8009386 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8009376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009378:	3301      	adds	r3, #1
 800937a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800937c:	79fb      	ldrb	r3, [r7, #7]
 800937e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009380:	429a      	cmp	r2, r3
 8009382:	d3f2      	bcc.n	800936a <SEGGER_SYSVIEW_SendModule+0x1e>
 8009384:	e000      	b.n	8009388 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8009386:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8009388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800938a:	2b00      	cmp	r3, #0
 800938c:	d055      	beq.n	800943a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800938e:	f3ef 8311 	mrs	r3, BASEPRI
 8009392:	f04f 0120 	mov.w	r1, #32
 8009396:	f381 8811 	msr	BASEPRI, r1
 800939a:	617b      	str	r3, [r7, #20]
 800939c:	482f      	ldr	r0, [pc, #188]	@ (800945c <SEGGER_SYSVIEW_SendModule+0x110>)
 800939e:	f7fe fb93 	bl	8007ac8 <_PreparePacket>
 80093a2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80093ac:	79fb      	ldrb	r3, [r7, #7]
 80093ae:	623b      	str	r3, [r7, #32]
 80093b0:	e00b      	b.n	80093ca <SEGGER_SYSVIEW_SendModule+0x7e>
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b8:	1c59      	adds	r1, r3, #1
 80093ba:	6279      	str	r1, [r7, #36]	@ 0x24
 80093bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80093c0:	b2d2      	uxtb	r2, r2
 80093c2:	701a      	strb	r2, [r3, #0]
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	09db      	lsrs	r3, r3, #7
 80093c8:	623b      	str	r3, [r7, #32]
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80093ce:	d8f0      	bhi.n	80093b2 <SEGGER_SYSVIEW_SendModule+0x66>
 80093d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d2:	1c5a      	adds	r2, r3, #1
 80093d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80093d6:	6a3a      	ldr	r2, [r7, #32]
 80093d8:	b2d2      	uxtb	r2, r2
 80093da:	701a      	strb	r2, [r3, #0]
 80093dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093de:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	61fb      	str	r3, [r7, #28]
 80093e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	61bb      	str	r3, [r7, #24]
 80093ea:	e00b      	b.n	8009404 <SEGGER_SYSVIEW_SendModule+0xb8>
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	1c59      	adds	r1, r3, #1
 80093f4:	61f9      	str	r1, [r7, #28]
 80093f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80093fa:	b2d2      	uxtb	r2, r2
 80093fc:	701a      	strb	r2, [r3, #0]
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	09db      	lsrs	r3, r3, #7
 8009402:	61bb      	str	r3, [r7, #24]
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	2b7f      	cmp	r3, #127	@ 0x7f
 8009408:	d8f0      	bhi.n	80093ec <SEGGER_SYSVIEW_SendModule+0xa0>
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	1c5a      	adds	r2, r3, #1
 800940e:	61fa      	str	r2, [r7, #28]
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	b2d2      	uxtb	r2, r2
 8009414:	701a      	strb	r2, [r3, #0]
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800941a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2280      	movs	r2, #128	@ 0x80
 8009420:	4619      	mov	r1, r3
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f7fe fb20 	bl	8007a68 <_EncodeStr>
 8009428:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800942a:	2216      	movs	r2, #22
 800942c:	68f9      	ldr	r1, [r7, #12]
 800942e:	6938      	ldr	r0, [r7, #16]
 8009430:	f7fe fc38 	bl	8007ca4 <_SendPacket>
      RECORD_END();
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800943a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800943c:	2b00      	cmp	r3, #0
 800943e:	d006      	beq.n	800944e <SEGGER_SYSVIEW_SendModule+0x102>
 8009440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8009448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	4798      	blx	r3
    }
  }
}
 800944e:	bf00      	nop
 8009450:	3730      	adds	r7, #48	@ 0x30
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	20014698 	.word	0x20014698
 800945c:	200146a0 	.word	0x200146a0

08009460 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8009466:	4b0c      	ldr	r3, [pc, #48]	@ (8009498 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00f      	beq.n	800948e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800946e:	4b0a      	ldr	r3, [pc, #40]	@ (8009498 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1f2      	bne.n	8009474 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800948e:	bf00      	nop
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	20014698 	.word	0x20014698

0800949c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80094a2:	f3ef 8311 	mrs	r3, BASEPRI
 80094a6:	f04f 0120 	mov.w	r1, #32
 80094aa:	f381 8811 	msr	BASEPRI, r1
 80094ae:	60fb      	str	r3, [r7, #12]
 80094b0:	4817      	ldr	r0, [pc, #92]	@ (8009510 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80094b2:	f7fe fb09 	bl	8007ac8 <_PreparePacket>
 80094b6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	617b      	str	r3, [r7, #20]
 80094c0:	4b14      	ldr	r3, [pc, #80]	@ (8009514 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	613b      	str	r3, [r7, #16]
 80094c6:	e00b      	b.n	80094e0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	1c59      	adds	r1, r3, #1
 80094d0:	6179      	str	r1, [r7, #20]
 80094d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80094d6:	b2d2      	uxtb	r2, r2
 80094d8:	701a      	strb	r2, [r3, #0]
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	09db      	lsrs	r3, r3, #7
 80094de:	613b      	str	r3, [r7, #16]
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80094e4:	d8f0      	bhi.n	80094c8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	1c5a      	adds	r2, r3, #1
 80094ea:	617a      	str	r2, [r7, #20]
 80094ec:	693a      	ldr	r2, [r7, #16]
 80094ee:	b2d2      	uxtb	r2, r2
 80094f0:	701a      	strb	r2, [r3, #0]
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80094f6:	221b      	movs	r2, #27
 80094f8:	6879      	ldr	r1, [r7, #4]
 80094fa:	68b8      	ldr	r0, [r7, #8]
 80094fc:	f7fe fbd2 	bl	8007ca4 <_SendPacket>
  RECORD_END();
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f383 8811 	msr	BASEPRI, r3
}
 8009506:	bf00      	nop
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	200146a0 	.word	0x200146a0
 8009514:	2001469c 	.word	0x2001469c

08009518 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8009518:	b40f      	push	{r0, r1, r2, r3}
 800951a:	b580      	push	{r7, lr}
 800951c:	b082      	sub	sp, #8
 800951e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8009520:	f107 0314 	add.w	r3, r7, #20
 8009524:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8009526:	1d3b      	adds	r3, r7, #4
 8009528:	461a      	mov	r2, r3
 800952a:	2100      	movs	r1, #0
 800952c:	6938      	ldr	r0, [r7, #16]
 800952e:	f7fe fecb 	bl	80082c8 <_VPrintTarget>
  va_end(ParamList);
}
 8009532:	bf00      	nop
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800953c:	b004      	add	sp, #16
 800953e:	4770      	bx	lr

08009540 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8009540:	b580      	push	{r7, lr}
 8009542:	b08a      	sub	sp, #40	@ 0x28
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009548:	f3ef 8311 	mrs	r3, BASEPRI
 800954c:	f04f 0120 	mov.w	r1, #32
 8009550:	f381 8811 	msr	BASEPRI, r1
 8009554:	617b      	str	r3, [r7, #20]
 8009556:	4827      	ldr	r0, [pc, #156]	@ (80095f4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8009558:	f7fe fab6 	bl	8007ac8 <_PreparePacket>
 800955c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800955e:	2280      	movs	r2, #128	@ 0x80
 8009560:	6879      	ldr	r1, [r7, #4]
 8009562:	6938      	ldr	r0, [r7, #16]
 8009564:	f7fe fa80 	bl	8007a68 <_EncodeStr>
 8009568:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	627b      	str	r3, [r7, #36]	@ 0x24
 800956e:	2301      	movs	r3, #1
 8009570:	623b      	str	r3, [r7, #32]
 8009572:	e00b      	b.n	800958c <SEGGER_SYSVIEW_Warn+0x4c>
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	b2da      	uxtb	r2, r3
 8009578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957a:	1c59      	adds	r1, r3, #1
 800957c:	6279      	str	r1, [r7, #36]	@ 0x24
 800957e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009582:	b2d2      	uxtb	r2, r2
 8009584:	701a      	strb	r2, [r3, #0]
 8009586:	6a3b      	ldr	r3, [r7, #32]
 8009588:	09db      	lsrs	r3, r3, #7
 800958a:	623b      	str	r3, [r7, #32]
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009590:	d8f0      	bhi.n	8009574 <SEGGER_SYSVIEW_Warn+0x34>
 8009592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009594:	1c5a      	adds	r2, r3, #1
 8009596:	627a      	str	r2, [r7, #36]	@ 0x24
 8009598:	6a3a      	ldr	r2, [r7, #32]
 800959a:	b2d2      	uxtb	r2, r2
 800959c:	701a      	strb	r2, [r3, #0]
 800959e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	61fb      	str	r3, [r7, #28]
 80095a6:	2300      	movs	r3, #0
 80095a8:	61bb      	str	r3, [r7, #24]
 80095aa:	e00b      	b.n	80095c4 <SEGGER_SYSVIEW_Warn+0x84>
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	1c59      	adds	r1, r3, #1
 80095b4:	61f9      	str	r1, [r7, #28]
 80095b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80095ba:	b2d2      	uxtb	r2, r2
 80095bc:	701a      	strb	r2, [r3, #0]
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	09db      	lsrs	r3, r3, #7
 80095c2:	61bb      	str	r3, [r7, #24]
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80095c8:	d8f0      	bhi.n	80095ac <SEGGER_SYSVIEW_Warn+0x6c>
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	1c5a      	adds	r2, r3, #1
 80095ce:	61fa      	str	r2, [r7, #28]
 80095d0:	69ba      	ldr	r2, [r7, #24]
 80095d2:	b2d2      	uxtb	r2, r2
 80095d4:	701a      	strb	r2, [r3, #0]
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80095da:	221a      	movs	r2, #26
 80095dc:	68f9      	ldr	r1, [r7, #12]
 80095de:	6938      	ldr	r0, [r7, #16]
 80095e0:	f7fe fb60 	bl	8007ca4 <_SendPacket>
  RECORD_END();
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	f383 8811 	msr	BASEPRI, r3
}
 80095ea:	bf00      	nop
 80095ec:	3728      	adds	r7, #40	@ 0x28
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	200146a0 	.word	0x200146a0

080095f8 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80095f8:	b580      	push	{r7, lr}
 80095fa:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80095fc:	4b13      	ldr	r3, [pc, #76]	@ (800964c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80095fe:	7e1b      	ldrb	r3, [r3, #24]
 8009600:	4619      	mov	r1, r3
 8009602:	4a13      	ldr	r2, [pc, #76]	@ (8009650 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8009604:	460b      	mov	r3, r1
 8009606:	005b      	lsls	r3, r3, #1
 8009608:	440b      	add	r3, r1
 800960a:	00db      	lsls	r3, r3, #3
 800960c:	4413      	add	r3, r2
 800960e:	336c      	adds	r3, #108	@ 0x6c
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	4b0e      	ldr	r3, [pc, #56]	@ (800964c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8009614:	7e1b      	ldrb	r3, [r3, #24]
 8009616:	4618      	mov	r0, r3
 8009618:	490d      	ldr	r1, [pc, #52]	@ (8009650 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800961a:	4603      	mov	r3, r0
 800961c:	005b      	lsls	r3, r3, #1
 800961e:	4403      	add	r3, r0
 8009620:	00db      	lsls	r3, r3, #3
 8009622:	440b      	add	r3, r1
 8009624:	3370      	adds	r3, #112	@ 0x70
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	429a      	cmp	r2, r3
 800962a:	d00b      	beq.n	8009644 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800962c:	4b07      	ldr	r3, [pc, #28]	@ (800964c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800962e:	789b      	ldrb	r3, [r3, #2]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d107      	bne.n	8009644 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8009634:	4b05      	ldr	r3, [pc, #20]	@ (800964c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8009636:	2201      	movs	r2, #1
 8009638:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800963a:	f7fe fa51 	bl	8007ae0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800963e:	4b03      	ldr	r3, [pc, #12]	@ (800964c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8009640:	2200      	movs	r2, #0
 8009642:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8009644:	4b01      	ldr	r3, [pc, #4]	@ (800964c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8009646:	781b      	ldrb	r3, [r3, #0]
}
 8009648:	4618      	mov	r0, r3
 800964a:	bd80      	pop	{r7, pc}
 800964c:	20014670 	.word	0x20014670
 8009650:	200131b0 	.word	0x200131b0

08009654 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	6879      	ldr	r1, [r7, #4]
 8009666:	2000      	movs	r0, #0
 8009668:	f7fe f908 	bl	800787c <SEGGER_RTT_Write>
  return len;
 800966c:	683b      	ldr	r3, [r7, #0]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <BCD2Decimal>:
//cach 2
 static I2C_HandleTypeDef *ds_i2c; // bien static tuc la chi dung trong file nay
uint8_t Decimal2BCD(uint8_t num){
  return (num/10)<<4 | (num%10);
}
uint8_t BCD2Decimal(uint8_t num){
 8009676:	b480      	push	{r7}
 8009678:	b083      	sub	sp, #12
 800967a:	af00      	add	r7, sp, #0
 800967c:	4603      	mov	r3, r0
 800967e:	71fb      	strb	r3, [r7, #7]
  return (num>>4)*10 + (num&0x0F);
 8009680:	79fb      	ldrb	r3, [r7, #7]
 8009682:	091b      	lsrs	r3, r3, #4
 8009684:	b2db      	uxtb	r3, r3
 8009686:	461a      	mov	r2, r3
 8009688:	0092      	lsls	r2, r2, #2
 800968a:	4413      	add	r3, r2
 800968c:	005b      	lsls	r3, r3, #1
 800968e:	b2da      	uxtb	r2, r3
 8009690:	79fb      	ldrb	r3, [r7, #7]
 8009692:	f003 030f 	and.w	r3, r3, #15
 8009696:	b2db      	uxtb	r3, r3
 8009698:	4413      	add	r3, r2
 800969a:	b2db      	uxtb	r3, r3
}
 800969c:	4618      	mov	r0, r3
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <rtc_read_time>:
	data[6]= Decimal2BCD(dt->mon);
	data[7]= Decimal2BCD(dt->year);
	HAL_I2C_Master_Transmit(ds_i2c,RTC_ADDRESS,data,8,100);
}
// doc du lieu
void rtc_read_time(DateTime *dt){
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b088      	sub	sp, #32
 80096ac:	af02      	add	r7, sp, #8
 80096ae:	6078      	str	r0, [r7, #4]
	uint8_t data[7];
	uint8_t add_reg=0x00; // dia chi cua thanh ghi cua slave ma master muon doc du lieu
 80096b0:	2300      	movs	r3, #0
 80096b2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(ds_i2c,RTC_ADDRESS,&add_reg,1,100); // gui dia chi thanh ghi ma master muon doc du lieu
 80096b4:	4b27      	ldr	r3, [pc, #156]	@ (8009754 <rtc_read_time+0xac>)
 80096b6:	6818      	ldr	r0, [r3, #0]
 80096b8:	f107 020f 	add.w	r2, r7, #15
 80096bc:	2364      	movs	r3, #100	@ 0x64
 80096be:	9300      	str	r3, [sp, #0]
 80096c0:	2301      	movs	r3, #1
 80096c2:	21d0      	movs	r1, #208	@ 0xd0
 80096c4:	f7f9 f85c 	bl	8002780 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ds_i2c,RTC_ADDRESS,data,7,100); // doc du lieu
 80096c8:	4b22      	ldr	r3, [pc, #136]	@ (8009754 <rtc_read_time+0xac>)
 80096ca:	6818      	ldr	r0, [r3, #0]
 80096cc:	f107 0210 	add.w	r2, r7, #16
 80096d0:	2364      	movs	r3, #100	@ 0x64
 80096d2:	9300      	str	r3, [sp, #0]
 80096d4:	2307      	movs	r3, #7
 80096d6:	21d0      	movs	r1, #208	@ 0xd0
 80096d8:	f7f9 f950 	bl	800297c <HAL_I2C_Master_Receive>
	dt->sec= BCD2Decimal(data[0]);
 80096dc:	7c3b      	ldrb	r3, [r7, #16]
 80096de:	4618      	mov	r0, r3
 80096e0:	f7ff ffc9 	bl	8009676 <BCD2Decimal>
 80096e4:	4603      	mov	r3, r0
 80096e6:	461a      	mov	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	709a      	strb	r2, [r3, #2]
	dt->min= BCD2Decimal(data[1]);
 80096ec:	7c7b      	ldrb	r3, [r7, #17]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7ff ffc1 	bl	8009676 <BCD2Decimal>
 80096f4:	4603      	mov	r3, r0
 80096f6:	461a      	mov	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	705a      	strb	r2, [r3, #1]
	dt->hour= BCD2Decimal(data[2]);
 80096fc:	7cbb      	ldrb	r3, [r7, #18]
 80096fe:	4618      	mov	r0, r3
 8009700:	f7ff ffb9 	bl	8009676 <BCD2Decimal>
 8009704:	4603      	mov	r3, r0
 8009706:	461a      	mov	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	701a      	strb	r2, [r3, #0]
	dt->day= BCD2Decimal(data[3]);
 800970c:	7cfb      	ldrb	r3, [r7, #19]
 800970e:	4618      	mov	r0, r3
 8009710:	f7ff ffb1 	bl	8009676 <BCD2Decimal>
 8009714:	4603      	mov	r3, r0
 8009716:	461a      	mov	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	70da      	strb	r2, [r3, #3]
	dt->date= BCD2Decimal(data[4]);
 800971c:	7d3b      	ldrb	r3, [r7, #20]
 800971e:	4618      	mov	r0, r3
 8009720:	f7ff ffa9 	bl	8009676 <BCD2Decimal>
 8009724:	4603      	mov	r3, r0
 8009726:	461a      	mov	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	711a      	strb	r2, [r3, #4]
	dt->mon= BCD2Decimal(data[5]);
 800972c:	7d7b      	ldrb	r3, [r7, #21]
 800972e:	4618      	mov	r0, r3
 8009730:	f7ff ffa1 	bl	8009676 <BCD2Decimal>
 8009734:	4603      	mov	r3, r0
 8009736:	461a      	mov	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	715a      	strb	r2, [r3, #5]
	dt->year= BCD2Decimal(data[6]);
 800973c:	7dbb      	ldrb	r3, [r7, #22]
 800973e:	4618      	mov	r0, r3
 8009740:	f7ff ff99 	bl	8009676 <BCD2Decimal>
 8009744:	4603      	mov	r3, r0
 8009746:	461a      	mov	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	719a      	strb	r2, [r3, #6]
}
 800974c:	bf00      	nop
 800974e:	3718      	adds	r7, #24
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	20014784 	.word	0x20014784

08009758 <rtc_init>:
	else if (data[1]==0x40) temperarate=0.25;
	else if(data[1]==0x80) temperarate=0.5;
	else temperarate=0.75;
	return data[0]+temperarate; 
}
void rtc_init(I2C_HandleTypeDef *i2c){
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  ds_i2c=i2c;
 8009760:	4a04      	ldr	r2, [pc, #16]	@ (8009774 <rtc_init+0x1c>)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6013      	str	r3, [r2, #0]
 8009766:	bf00      	nop
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	20014784 	.word	0x20014784

08009778 <CLCD_Delay>:
#include "LCD_I2C.h"
//#include "FreeRTOS.h"
//#include "task.h"
//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	4603      	mov	r3, r0
 8009780:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8009782:	88fb      	ldrh	r3, [r7, #6]
 8009784:	4618      	mov	r0, r3
 8009786:	f7f8 fb81 	bl	8001e8c <HAL_Delay>
}
 800978a:	bf00      	nop
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b086      	sub	sp, #24
 8009796:	af02      	add	r7, sp, #8
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	460b      	mov	r3, r1
 800979c:	70fb      	strb	r3, [r7, #3]
 800979e:	4613      	mov	r3, r2
 80097a0:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 80097a2:	78fb      	ldrb	r3, [r7, #3]
 80097a4:	f023 030f 	bic.w	r3, r3, #15
 80097a8:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 80097aa:	78fb      	ldrb	r3, [r7, #3]
 80097ac:	011b      	lsls	r3, r3, #4
 80097ae:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	7adb      	ldrb	r3, [r3, #11]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d007      	beq.n	80097c8 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
 80097ba:	f043 0308 	orr.w	r3, r3, #8
 80097be:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 80097c0:	7bbb      	ldrb	r3, [r7, #14]
 80097c2:	f043 0308 	orr.w	r3, r3, #8
 80097c6:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80097c8:	78bb      	ldrb	r3, [r7, #2]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d108      	bne.n	80097e0 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80097ce:	7bfb      	ldrb	r3, [r7, #15]
 80097d0:	f043 0301 	orr.w	r3, r3, #1
 80097d4:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80097d6:	7bbb      	ldrb	r3, [r7, #14]
 80097d8:	f043 0301 	orr.w	r3, r3, #1
 80097dc:	73bb      	strb	r3, [r7, #14]
 80097de:	e00a      	b.n	80097f6 <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80097e0:	78bb      	ldrb	r3, [r7, #2]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d107      	bne.n	80097f6 <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
 80097e8:	f023 0301 	bic.w	r3, r3, #1
 80097ec:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80097ee:	7bbb      	ldrb	r3, [r7, #14]
 80097f0:	f023 0301 	bic.w	r3, r3, #1
 80097f4:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80097f6:	7bfb      	ldrb	r3, [r7, #15]
 80097f8:	f043 0304 	orr.w	r3, r3, #4
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 8009800:	2001      	movs	r0, #1
 8009802:	f7ff ffb9 	bl	8009778 <CLCD_Delay>
	//vTaskDelay(pdMS_TO_TICKS(1));
	Data_I2C[1] = Data_H;
 8009806:	7bfb      	ldrb	r3, [r7, #15]
 8009808:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 800980a:	7bbb      	ldrb	r3, [r7, #14]
 800980c:	f043 0304 	orr.w	r3, r3, #4
 8009810:	b2db      	uxtb	r3, r3
 8009812:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 8009814:	2001      	movs	r0, #1
 8009816:	f7ff ffaf 	bl	8009778 <CLCD_Delay>
	//vTaskDelay(pdMS_TO_TICKS(1));
	Data_I2C[3] = Data_L;
 800981a:	7bbb      	ldrb	r3, [r7, #14]
 800981c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6818      	ldr	r0, [r3, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	791b      	ldrb	r3, [r3, #4]
 8009826:	4619      	mov	r1, r3
 8009828:	f107 0208 	add.w	r2, r7, #8
 800982c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009830:	9300      	str	r3, [sp, #0]
 8009832:	2304      	movs	r3, #4
 8009834:	f7f8 ffa4 	bl	8002780 <HAL_I2C_Master_Transmit>
}
 8009838:	bf00      	nop
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	4611      	mov	r1, r2
 800984c:	461a      	mov	r2, r3
 800984e:	460b      	mov	r3, r1
 8009850:	71fb      	strb	r3, [r7, #7]
 8009852:	4613      	mov	r3, r2
 8009854:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	79fa      	ldrb	r2, [r7, #7]
 8009860:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	79ba      	ldrb	r2, [r7, #6]
 8009866:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	7e3a      	ldrb	r2, [r7, #24]
 800986c:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2228      	movs	r2, #40	@ 0x28
 8009872:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2206      	movs	r2, #6
 8009878:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	220c      	movs	r2, #12
 800987e:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2214      	movs	r2, #20
 8009884:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2208      	movs	r2, #8
 800988a:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 800988c:	2032      	movs	r0, #50	@ 0x32
 800988e:	f7ff ff73 	bl	8009778 <CLCD_Delay>
	//vTaskDelay(pdMS_TO_TICKS(50));
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8009892:	2200      	movs	r2, #0
 8009894:	2133      	movs	r1, #51	@ 0x33
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f7ff ff7b 	bl	8009792 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	//CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
	CLCD_Delay(5);
 800989c:	2005      	movs	r0, #5
 800989e:	f7ff ff6b 	bl	8009778 <CLCD_Delay>
	//vTaskDelay(pdMS_TO_TICKS(5));
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 80098a2:	2200      	movs	r2, #0
 80098a4:	2132      	movs	r1, #50	@ 0x32
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f7ff ff73 	bl	8009792 <CLCD_WriteI2C>
	CLCD_Delay(5);
 80098ac:	2005      	movs	r0, #5
 80098ae:	f7ff ff63 	bl	8009778 <CLCD_Delay>
	//vTaskDelay(pdMS_TO_TICKS(5));
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80098b2:	2200      	movs	r2, #0
 80098b4:	2120      	movs	r1, #32
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f7ff ff6b 	bl	8009792 <CLCD_WriteI2C>
	CLCD_Delay(5);
 80098bc:	2005      	movs	r0, #5
 80098be:	f7ff ff5b 	bl	8009778 <CLCD_Delay>
	//vTaskDelay(pdMS_TO_TICKS(5));
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	79db      	ldrb	r3, [r3, #7]
 80098c6:	2200      	movs	r2, #0
 80098c8:	4619      	mov	r1, r3
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f7ff ff61 	bl	8009792 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	7a1b      	ldrb	r3, [r3, #8]
 80098d4:	2200      	movs	r2, #0
 80098d6:	4619      	mov	r1, r3
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f7ff ff5a 	bl	8009792 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	7a5b      	ldrb	r3, [r3, #9]
 80098e2:	2200      	movs	r2, #0
 80098e4:	4619      	mov	r1, r3
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f7ff ff53 	bl	8009792 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	7a9b      	ldrb	r3, [r3, #10]
 80098f0:	2200      	movs	r2, #0
 80098f2:	4619      	mov	r1, r3
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f7ff ff4c 	bl	8009792 <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80098fa:	2200      	movs	r2, #0
 80098fc:	2101      	movs	r1, #1
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f7ff ff47 	bl	8009792 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8009904:	2200      	movs	r2, #0
 8009906:	2102      	movs	r1, #2
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f7ff ff42 	bl	8009792 <CLCD_WriteI2C>
}
 800990e:	bf00      	nop
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	460b      	mov	r3, r1
 8009920:	70fb      	strb	r3, [r7, #3]
 8009922:	4613      	mov	r3, r2
 8009924:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8009926:	2300      	movs	r3, #0
 8009928:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	795b      	ldrb	r3, [r3, #5]
 800992e:	78fa      	ldrb	r2, [r7, #3]
 8009930:	429a      	cmp	r2, r3
 8009932:	d303      	bcc.n	800993c <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	795b      	ldrb	r3, [r3, #5]
 8009938:	3b01      	subs	r3, #1
 800993a:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	799b      	ldrb	r3, [r3, #6]
 8009940:	78ba      	ldrb	r2, [r7, #2]
 8009942:	429a      	cmp	r2, r3
 8009944:	d303      	bcc.n	800994e <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	799b      	ldrb	r3, [r3, #6]
 800994a:	3b01      	subs	r3, #1
 800994c:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 800994e:	78bb      	ldrb	r3, [r7, #2]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d102      	bne.n	800995a <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8009954:	78fb      	ldrb	r3, [r7, #3]
 8009956:	73fb      	strb	r3, [r7, #15]
 8009958:	e013      	b.n	8009982 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 800995a:	78bb      	ldrb	r3, [r7, #2]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d103      	bne.n	8009968 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8009960:	78fb      	ldrb	r3, [r7, #3]
 8009962:	3340      	adds	r3, #64	@ 0x40
 8009964:	73fb      	strb	r3, [r7, #15]
 8009966:	e00c      	b.n	8009982 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8009968:	78bb      	ldrb	r3, [r7, #2]
 800996a:	2b02      	cmp	r3, #2
 800996c:	d103      	bne.n	8009976 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 800996e:	78fb      	ldrb	r3, [r7, #3]
 8009970:	3314      	adds	r3, #20
 8009972:	73fb      	strb	r3, [r7, #15]
 8009974:	e005      	b.n	8009982 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8009976:	78bb      	ldrb	r3, [r7, #2]
 8009978:	2b03      	cmp	r3, #3
 800997a:	d102      	bne.n	8009982 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 800997c:	78fb      	ldrb	r3, [r7, #3]
 800997e:	3354      	adds	r3, #84	@ 0x54
 8009980:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2200      	movs	r2, #0
 800998c:	4619      	mov	r1, r3
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7ff feff 	bl	8009792 <CLCD_WriteI2C>
}
 8009994:	bf00      	nop
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	460b      	mov	r3, r1
 80099a6:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 80099a8:	78fb      	ldrb	r3, [r7, #3]
 80099aa:	2201      	movs	r2, #1
 80099ac:	4619      	mov	r1, r3
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7ff feef 	bl	8009792 <CLCD_WriteI2C>
}
 80099b4:	bf00      	nop
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80099c6:	e007      	b.n	80099d8 <CLCD_I2C_WriteString+0x1c>
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	1c5a      	adds	r2, r3, #1
 80099cc:	603a      	str	r2, [r7, #0]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	4619      	mov	r1, r3
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f7ff ffe2 	bl	800999c <CLCD_I2C_WriteChar>
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1f3      	bne.n	80099c8 <CLCD_I2C_WriteString+0xc>
}
 80099e0:	bf00      	nop
 80099e2:	bf00      	nop
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
	...

080099ec <print_cli>:
#include "stdarg.h"
#include "stdio.h"
extern UART_HandleTypeDef huart1;

void print_cli(const char* str, ...)
{
 80099ec:	b40f      	push	{r0, r1, r2, r3}
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b0a2      	sub	sp, #136	@ 0x88
 80099f2:	af00      	add	r7, sp, #0
  char stringArray[128];
	
	va_list args;
	va_start(args,str);
 80099f4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80099f8:	603b      	str	r3, [r7, #0]
	uint8_t len_str = vsprintf(stringArray,str,args);
 80099fa:	1d3b      	adds	r3, r7, #4
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 feb6 	bl	800a774 <vsiprintf>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	va_end(args);
	
	HAL_UART_Transmit(&huart1,(uint8_t *)stringArray,len_str,200);
 8009a0e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	1d39      	adds	r1, r7, #4
 8009a16:	23c8      	movs	r3, #200	@ 0xc8
 8009a18:	4804      	ldr	r0, [pc, #16]	@ (8009a2c <print_cli+0x40>)
 8009a1a:	f7fa fcf5 	bl	8004408 <HAL_UART_Transmit>
}
 8009a1e:	bf00      	nop
 8009a20:	3788      	adds	r7, #136	@ 0x88
 8009a22:	46bd      	mov	sp, r7
 8009a24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a28:	b004      	add	sp, #16
 8009a2a:	4770      	bx	lr
 8009a2c:	20000314 	.word	0x20000314

08009a30 <SHT2x_Init>:
	
/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 8009a38:	4a04      	ldr	r2, [pc, #16]	@ (8009a4c <SHT2x_Init+0x1c>)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6013      	str	r3, [r2, #0]
}
 8009a3e:	bf00      	nop
 8009a40:	370c      	adds	r7, #12
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	20014788 	.word	0x20014788

08009a50 <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 8009a56:	23e7      	movs	r3, #231	@ 0xe7
 8009a58:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8009a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8009a8c <SHT2x_ReadUserReg+0x3c>)
 8009a5c:	6818      	ldr	r0, [r3, #0]
 8009a5e:	1dba      	adds	r2, r7, #6
 8009a60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009a64:	9300      	str	r3, [sp, #0]
 8009a66:	2301      	movs	r3, #1
 8009a68:	2180      	movs	r1, #128	@ 0x80
 8009a6a:	f7f8 fe89 	bl	8002780 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 8009a6e:	4b07      	ldr	r3, [pc, #28]	@ (8009a8c <SHT2x_ReadUserReg+0x3c>)
 8009a70:	6818      	ldr	r0, [r3, #0]
 8009a72:	1dfa      	adds	r2, r7, #7
 8009a74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	2180      	movs	r1, #128	@ 0x80
 8009a7e:	f7f8 ff7d 	bl	800297c <HAL_I2C_Master_Receive>
	return val;
 8009a82:	79fb      	ldrb	r3, [r7, #7]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	20014788 	.word	0x20014788

08009a90 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	4603      	mov	r3, r0
 8009a98:	71fb      	strb	r3, [r7, #7]
	uint8_t val[3] = { 0 };
 8009a9a:	4b13      	ldr	r3, [pc, #76]	@ (8009ae8 <SHT2x_GetRaw+0x58>)
 8009a9c:	881b      	ldrh	r3, [r3, #0]
 8009a9e:	81bb      	strh	r3, [r7, #12]
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8009aa4:	4b11      	ldr	r3, [pc, #68]	@ (8009aec <SHT2x_GetRaw+0x5c>)
 8009aa6:	6818      	ldr	r0, [r3, #0]
 8009aa8:	1dfa      	adds	r2, r7, #7
 8009aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	2180      	movs	r1, #128	@ 0x80
 8009ab4:	f7f8 fe64 	bl	8002780 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 8009ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8009aec <SHT2x_GetRaw+0x5c>)
 8009aba:	6818      	ldr	r0, [r3, #0]
 8009abc:	f107 020c 	add.w	r2, r7, #12
 8009ac0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	2180      	movs	r1, #128	@ 0x80
 8009aca:	f7f8 ff57 	bl	800297c <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 8009ace:	7b3b      	ldrb	r3, [r7, #12]
 8009ad0:	021b      	lsls	r3, r3, #8
 8009ad2:	b21a      	sxth	r2, r3
 8009ad4:	7b7b      	ldrb	r3, [r7, #13]
 8009ad6:	b21b      	sxth	r3, r3
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	b21b      	sxth	r3, r3
 8009adc:	b29b      	uxth	r3, r3
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	0800cad0 	.word	0x0800cad0
 8009aec:	20014788 	.word	0x20014788

08009af0 <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	4603      	mov	r3, r0
 8009af8:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 8009afa:	79fb      	ldrb	r3, [r7, #7]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d001      	beq.n	8009b04 <SHT2x_GetTemperature+0x14>
 8009b00:	23e3      	movs	r3, #227	@ 0xe3
 8009b02:	e000      	b.n	8009b06 <SHT2x_GetTemperature+0x16>
 8009b04:	23f3      	movs	r3, #243	@ 0xf3
 8009b06:	73fb      	strb	r3, [r7, #15]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7ff ffc0 	bl	8009a90 <SHT2x_GetRaw>
 8009b10:	4603      	mov	r3, r0
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7f6 fd5e 	bl	80005d4 <__aeabi_i2d>
 8009b18:	f04f 0200 	mov.w	r2, #0
 8009b1c:	4b16      	ldr	r3, [pc, #88]	@ (8009b78 <SHT2x_GetTemperature+0x88>)
 8009b1e:	f7f6 feed 	bl	80008fc <__aeabi_ddiv>
 8009b22:	4602      	mov	r2, r0
 8009b24:	460b      	mov	r3, r1
 8009b26:	4610      	mov	r0, r2
 8009b28:	4619      	mov	r1, r3
 8009b2a:	a30f      	add	r3, pc, #60	@ (adr r3, 8009b68 <SHT2x_GetTemperature+0x78>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f7f6 fdba 	bl	80006a8 <__aeabi_dmul>
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	a30c      	add	r3, pc, #48	@ (adr r3, 8009b70 <SHT2x_GetTemperature+0x80>)
 8009b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b42:	f7f6 fbf9 	bl	8000338 <__aeabi_dsub>
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	4610      	mov	r0, r2
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	f7f7 f883 	bl	8000c58 <__aeabi_d2f>
 8009b52:	4603      	mov	r3, r0
 8009b54:	ee07 3a90 	vmov	s15, r3
}
 8009b58:	eeb0 0a67 	vmov.f32	s0, s15
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	f3af 8000 	nop.w
 8009b68:	3d70a3d7 	.word	0x3d70a3d7
 8009b6c:	4065f70a 	.word	0x4065f70a
 8009b70:	cccccccd 	.word	0xcccccccd
 8009b74:	40476ccc 	.word	0x40476ccc
 8009b78:	40f00000 	.word	0x40f00000

08009b7c <SHT2x_GetRelativeHumidity>:
/**
 * @brief Measures and gets the current relative humidity.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point relative humidity value.
 */
float SHT2x_GetRelativeHumidity(uint8_t hold) {
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	4603      	mov	r3, r0
 8009b84:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_RH_HOLD : SHT2x_READ_RH_NOHOLD);
 8009b86:	79fb      	ldrb	r3, [r7, #7]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <SHT2x_GetRelativeHumidity+0x14>
 8009b8c:	23e5      	movs	r3, #229	@ 0xe5
 8009b8e:	e000      	b.n	8009b92 <SHT2x_GetRelativeHumidity+0x16>
 8009b90:	23f5      	movs	r3, #245	@ 0xf5
 8009b92:	73fb      	strb	r3, [r7, #15]
	return -6 + 125.00 * (SHT2x_GetRaw(cmd) / 65536.0);
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7ff ff7a 	bl	8009a90 <SHT2x_GetRaw>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7f6 fd18 	bl	80005d4 <__aeabi_i2d>
 8009ba4:	f04f 0200 	mov.w	r2, #0
 8009ba8:	4b11      	ldr	r3, [pc, #68]	@ (8009bf0 <SHT2x_GetRelativeHumidity+0x74>)
 8009baa:	f7f6 fea7 	bl	80008fc <__aeabi_ddiv>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	f04f 0200 	mov.w	r2, #0
 8009bba:	4b0e      	ldr	r3, [pc, #56]	@ (8009bf4 <SHT2x_GetRelativeHumidity+0x78>)
 8009bbc:	f7f6 fd74 	bl	80006a8 <__aeabi_dmul>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	f04f 0200 	mov.w	r2, #0
 8009bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8009bf8 <SHT2x_GetRelativeHumidity+0x7c>)
 8009bce:	f7f6 fbb3 	bl	8000338 <__aeabi_dsub>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	4610      	mov	r0, r2
 8009bd8:	4619      	mov	r1, r3
 8009bda:	f7f7 f83d 	bl	8000c58 <__aeabi_d2f>
 8009bde:	4603      	mov	r3, r0
 8009be0:	ee07 3a90 	vmov	s15, r3
}
 8009be4:	eeb0 0a67 	vmov.f32	s0, s15
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	40f00000 	.word	0x40f00000
 8009bf4:	405f4000 	.word	0x405f4000
 8009bf8:	40180000 	.word	0x40180000

08009bfc <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14-bit temperature and 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b086      	sub	sp, #24
 8009c00:	af02      	add	r7, sp, #8
 8009c02:	4603      	mov	r3, r0
 8009c04:	71fb      	strb	r3, [r7, #7]
	uint8_t val = SHT2x_ReadUserReg();
 8009c06:	f7ff ff23 	bl	8009a50 <SHT2x_ReadUserReg>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	73fb      	strb	r3, [r7, #15]
	val = (val & 0x7e) | res;
 8009c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c12:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8009c16:	b25a      	sxtb	r2, r3
 8009c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	b25b      	sxtb	r3, r3
 8009c20:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 8009c22:	23e6      	movs	r3, #230	@ 0xe6
 8009c24:	733b      	strb	r3, [r7, #12]
 8009c26:	7bfb      	ldrb	r3, [r7, #15]
 8009c28:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 8009c2a:	4b07      	ldr	r3, [pc, #28]	@ (8009c48 <SHT2x_SetResolution+0x4c>)
 8009c2c:	6818      	ldr	r0, [r3, #0]
 8009c2e:	f107 020c 	add.w	r2, r7, #12
 8009c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009c36:	9300      	str	r3, [sp, #0]
 8009c38:	2302      	movs	r3, #2
 8009c3a:	2180      	movs	r1, #128	@ 0x80
 8009c3c:	f7f8 fda0 	bl	8002780 <HAL_I2C_Master_Transmit>
}
 8009c40:	bf00      	nop
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	20014788 	.word	0x20014788

08009c4c <__cvt>:
 8009c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c50:	ec57 6b10 	vmov	r6, r7, d0
 8009c54:	2f00      	cmp	r7, #0
 8009c56:	460c      	mov	r4, r1
 8009c58:	4619      	mov	r1, r3
 8009c5a:	463b      	mov	r3, r7
 8009c5c:	bfbb      	ittet	lt
 8009c5e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009c62:	461f      	movlt	r7, r3
 8009c64:	2300      	movge	r3, #0
 8009c66:	232d      	movlt	r3, #45	@ 0x2d
 8009c68:	700b      	strb	r3, [r1, #0]
 8009c6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c6c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009c70:	4691      	mov	r9, r2
 8009c72:	f023 0820 	bic.w	r8, r3, #32
 8009c76:	bfbc      	itt	lt
 8009c78:	4632      	movlt	r2, r6
 8009c7a:	4616      	movlt	r6, r2
 8009c7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009c80:	d005      	beq.n	8009c8e <__cvt+0x42>
 8009c82:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009c86:	d100      	bne.n	8009c8a <__cvt+0x3e>
 8009c88:	3401      	adds	r4, #1
 8009c8a:	2102      	movs	r1, #2
 8009c8c:	e000      	b.n	8009c90 <__cvt+0x44>
 8009c8e:	2103      	movs	r1, #3
 8009c90:	ab03      	add	r3, sp, #12
 8009c92:	9301      	str	r3, [sp, #4]
 8009c94:	ab02      	add	r3, sp, #8
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	ec47 6b10 	vmov	d0, r6, r7
 8009c9c:	4653      	mov	r3, sl
 8009c9e:	4622      	mov	r2, r4
 8009ca0:	f000 fe86 	bl	800a9b0 <_dtoa_r>
 8009ca4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009ca8:	4605      	mov	r5, r0
 8009caa:	d119      	bne.n	8009ce0 <__cvt+0x94>
 8009cac:	f019 0f01 	tst.w	r9, #1
 8009cb0:	d00e      	beq.n	8009cd0 <__cvt+0x84>
 8009cb2:	eb00 0904 	add.w	r9, r0, r4
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	2300      	movs	r3, #0
 8009cba:	4630      	mov	r0, r6
 8009cbc:	4639      	mov	r1, r7
 8009cbe:	f7f6 ff5b 	bl	8000b78 <__aeabi_dcmpeq>
 8009cc2:	b108      	cbz	r0, 8009cc8 <__cvt+0x7c>
 8009cc4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009cc8:	2230      	movs	r2, #48	@ 0x30
 8009cca:	9b03      	ldr	r3, [sp, #12]
 8009ccc:	454b      	cmp	r3, r9
 8009cce:	d31e      	bcc.n	8009d0e <__cvt+0xc2>
 8009cd0:	9b03      	ldr	r3, [sp, #12]
 8009cd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cd4:	1b5b      	subs	r3, r3, r5
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	6013      	str	r3, [r2, #0]
 8009cda:	b004      	add	sp, #16
 8009cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ce4:	eb00 0904 	add.w	r9, r0, r4
 8009ce8:	d1e5      	bne.n	8009cb6 <__cvt+0x6a>
 8009cea:	7803      	ldrb	r3, [r0, #0]
 8009cec:	2b30      	cmp	r3, #48	@ 0x30
 8009cee:	d10a      	bne.n	8009d06 <__cvt+0xba>
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	4639      	mov	r1, r7
 8009cf8:	f7f6 ff3e 	bl	8000b78 <__aeabi_dcmpeq>
 8009cfc:	b918      	cbnz	r0, 8009d06 <__cvt+0xba>
 8009cfe:	f1c4 0401 	rsb	r4, r4, #1
 8009d02:	f8ca 4000 	str.w	r4, [sl]
 8009d06:	f8da 3000 	ldr.w	r3, [sl]
 8009d0a:	4499      	add	r9, r3
 8009d0c:	e7d3      	b.n	8009cb6 <__cvt+0x6a>
 8009d0e:	1c59      	adds	r1, r3, #1
 8009d10:	9103      	str	r1, [sp, #12]
 8009d12:	701a      	strb	r2, [r3, #0]
 8009d14:	e7d9      	b.n	8009cca <__cvt+0x7e>

08009d16 <__exponent>:
 8009d16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d18:	2900      	cmp	r1, #0
 8009d1a:	bfba      	itte	lt
 8009d1c:	4249      	neglt	r1, r1
 8009d1e:	232d      	movlt	r3, #45	@ 0x2d
 8009d20:	232b      	movge	r3, #43	@ 0x2b
 8009d22:	2909      	cmp	r1, #9
 8009d24:	7002      	strb	r2, [r0, #0]
 8009d26:	7043      	strb	r3, [r0, #1]
 8009d28:	dd29      	ble.n	8009d7e <__exponent+0x68>
 8009d2a:	f10d 0307 	add.w	r3, sp, #7
 8009d2e:	461d      	mov	r5, r3
 8009d30:	270a      	movs	r7, #10
 8009d32:	461a      	mov	r2, r3
 8009d34:	fbb1 f6f7 	udiv	r6, r1, r7
 8009d38:	fb07 1416 	mls	r4, r7, r6, r1
 8009d3c:	3430      	adds	r4, #48	@ 0x30
 8009d3e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009d42:	460c      	mov	r4, r1
 8009d44:	2c63      	cmp	r4, #99	@ 0x63
 8009d46:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	dcf1      	bgt.n	8009d32 <__exponent+0x1c>
 8009d4e:	3130      	adds	r1, #48	@ 0x30
 8009d50:	1e94      	subs	r4, r2, #2
 8009d52:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009d56:	1c41      	adds	r1, r0, #1
 8009d58:	4623      	mov	r3, r4
 8009d5a:	42ab      	cmp	r3, r5
 8009d5c:	d30a      	bcc.n	8009d74 <__exponent+0x5e>
 8009d5e:	f10d 0309 	add.w	r3, sp, #9
 8009d62:	1a9b      	subs	r3, r3, r2
 8009d64:	42ac      	cmp	r4, r5
 8009d66:	bf88      	it	hi
 8009d68:	2300      	movhi	r3, #0
 8009d6a:	3302      	adds	r3, #2
 8009d6c:	4403      	add	r3, r0
 8009d6e:	1a18      	subs	r0, r3, r0
 8009d70:	b003      	add	sp, #12
 8009d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d74:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009d78:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009d7c:	e7ed      	b.n	8009d5a <__exponent+0x44>
 8009d7e:	2330      	movs	r3, #48	@ 0x30
 8009d80:	3130      	adds	r1, #48	@ 0x30
 8009d82:	7083      	strb	r3, [r0, #2]
 8009d84:	70c1      	strb	r1, [r0, #3]
 8009d86:	1d03      	adds	r3, r0, #4
 8009d88:	e7f1      	b.n	8009d6e <__exponent+0x58>
	...

08009d8c <_printf_float>:
 8009d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d90:	b08d      	sub	sp, #52	@ 0x34
 8009d92:	460c      	mov	r4, r1
 8009d94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009d98:	4616      	mov	r6, r2
 8009d9a:	461f      	mov	r7, r3
 8009d9c:	4605      	mov	r5, r0
 8009d9e:	f000 fd0b 	bl	800a7b8 <_localeconv_r>
 8009da2:	6803      	ldr	r3, [r0, #0]
 8009da4:	9304      	str	r3, [sp, #16]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7f6 faba 	bl	8000320 <strlen>
 8009dac:	2300      	movs	r3, #0
 8009dae:	930a      	str	r3, [sp, #40]	@ 0x28
 8009db0:	f8d8 3000 	ldr.w	r3, [r8]
 8009db4:	9005      	str	r0, [sp, #20]
 8009db6:	3307      	adds	r3, #7
 8009db8:	f023 0307 	bic.w	r3, r3, #7
 8009dbc:	f103 0208 	add.w	r2, r3, #8
 8009dc0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009dc4:	f8d4 b000 	ldr.w	fp, [r4]
 8009dc8:	f8c8 2000 	str.w	r2, [r8]
 8009dcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009dd0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009dd4:	9307      	str	r3, [sp, #28]
 8009dd6:	f8cd 8018 	str.w	r8, [sp, #24]
 8009dda:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009dde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009de2:	4b9c      	ldr	r3, [pc, #624]	@ (800a054 <_printf_float+0x2c8>)
 8009de4:	f04f 32ff 	mov.w	r2, #4294967295
 8009de8:	f7f6 fef8 	bl	8000bdc <__aeabi_dcmpun>
 8009dec:	bb70      	cbnz	r0, 8009e4c <_printf_float+0xc0>
 8009dee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009df2:	4b98      	ldr	r3, [pc, #608]	@ (800a054 <_printf_float+0x2c8>)
 8009df4:	f04f 32ff 	mov.w	r2, #4294967295
 8009df8:	f7f6 fed2 	bl	8000ba0 <__aeabi_dcmple>
 8009dfc:	bb30      	cbnz	r0, 8009e4c <_printf_float+0xc0>
 8009dfe:	2200      	movs	r2, #0
 8009e00:	2300      	movs	r3, #0
 8009e02:	4640      	mov	r0, r8
 8009e04:	4649      	mov	r1, r9
 8009e06:	f7f6 fec1 	bl	8000b8c <__aeabi_dcmplt>
 8009e0a:	b110      	cbz	r0, 8009e12 <_printf_float+0x86>
 8009e0c:	232d      	movs	r3, #45	@ 0x2d
 8009e0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e12:	4a91      	ldr	r2, [pc, #580]	@ (800a058 <_printf_float+0x2cc>)
 8009e14:	4b91      	ldr	r3, [pc, #580]	@ (800a05c <_printf_float+0x2d0>)
 8009e16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e1a:	bf94      	ite	ls
 8009e1c:	4690      	movls	r8, r2
 8009e1e:	4698      	movhi	r8, r3
 8009e20:	2303      	movs	r3, #3
 8009e22:	6123      	str	r3, [r4, #16]
 8009e24:	f02b 0304 	bic.w	r3, fp, #4
 8009e28:	6023      	str	r3, [r4, #0]
 8009e2a:	f04f 0900 	mov.w	r9, #0
 8009e2e:	9700      	str	r7, [sp, #0]
 8009e30:	4633      	mov	r3, r6
 8009e32:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009e34:	4621      	mov	r1, r4
 8009e36:	4628      	mov	r0, r5
 8009e38:	f000 f9d2 	bl	800a1e0 <_printf_common>
 8009e3c:	3001      	adds	r0, #1
 8009e3e:	f040 808d 	bne.w	8009f5c <_printf_float+0x1d0>
 8009e42:	f04f 30ff 	mov.w	r0, #4294967295
 8009e46:	b00d      	add	sp, #52	@ 0x34
 8009e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e4c:	4642      	mov	r2, r8
 8009e4e:	464b      	mov	r3, r9
 8009e50:	4640      	mov	r0, r8
 8009e52:	4649      	mov	r1, r9
 8009e54:	f7f6 fec2 	bl	8000bdc <__aeabi_dcmpun>
 8009e58:	b140      	cbz	r0, 8009e6c <_printf_float+0xe0>
 8009e5a:	464b      	mov	r3, r9
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	bfbc      	itt	lt
 8009e60:	232d      	movlt	r3, #45	@ 0x2d
 8009e62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009e66:	4a7e      	ldr	r2, [pc, #504]	@ (800a060 <_printf_float+0x2d4>)
 8009e68:	4b7e      	ldr	r3, [pc, #504]	@ (800a064 <_printf_float+0x2d8>)
 8009e6a:	e7d4      	b.n	8009e16 <_printf_float+0x8a>
 8009e6c:	6863      	ldr	r3, [r4, #4]
 8009e6e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009e72:	9206      	str	r2, [sp, #24]
 8009e74:	1c5a      	adds	r2, r3, #1
 8009e76:	d13b      	bne.n	8009ef0 <_printf_float+0x164>
 8009e78:	2306      	movs	r3, #6
 8009e7a:	6063      	str	r3, [r4, #4]
 8009e7c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009e80:	2300      	movs	r3, #0
 8009e82:	6022      	str	r2, [r4, #0]
 8009e84:	9303      	str	r3, [sp, #12]
 8009e86:	ab0a      	add	r3, sp, #40	@ 0x28
 8009e88:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009e8c:	ab09      	add	r3, sp, #36	@ 0x24
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	6861      	ldr	r1, [r4, #4]
 8009e92:	ec49 8b10 	vmov	d0, r8, r9
 8009e96:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	f7ff fed6 	bl	8009c4c <__cvt>
 8009ea0:	9b06      	ldr	r3, [sp, #24]
 8009ea2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ea4:	2b47      	cmp	r3, #71	@ 0x47
 8009ea6:	4680      	mov	r8, r0
 8009ea8:	d129      	bne.n	8009efe <_printf_float+0x172>
 8009eaa:	1cc8      	adds	r0, r1, #3
 8009eac:	db02      	blt.n	8009eb4 <_printf_float+0x128>
 8009eae:	6863      	ldr	r3, [r4, #4]
 8009eb0:	4299      	cmp	r1, r3
 8009eb2:	dd41      	ble.n	8009f38 <_printf_float+0x1ac>
 8009eb4:	f1aa 0a02 	sub.w	sl, sl, #2
 8009eb8:	fa5f fa8a 	uxtb.w	sl, sl
 8009ebc:	3901      	subs	r1, #1
 8009ebe:	4652      	mov	r2, sl
 8009ec0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009ec4:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ec6:	f7ff ff26 	bl	8009d16 <__exponent>
 8009eca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ecc:	1813      	adds	r3, r2, r0
 8009ece:	2a01      	cmp	r2, #1
 8009ed0:	4681      	mov	r9, r0
 8009ed2:	6123      	str	r3, [r4, #16]
 8009ed4:	dc02      	bgt.n	8009edc <_printf_float+0x150>
 8009ed6:	6822      	ldr	r2, [r4, #0]
 8009ed8:	07d2      	lsls	r2, r2, #31
 8009eda:	d501      	bpl.n	8009ee0 <_printf_float+0x154>
 8009edc:	3301      	adds	r3, #1
 8009ede:	6123      	str	r3, [r4, #16]
 8009ee0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d0a2      	beq.n	8009e2e <_printf_float+0xa2>
 8009ee8:	232d      	movs	r3, #45	@ 0x2d
 8009eea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009eee:	e79e      	b.n	8009e2e <_printf_float+0xa2>
 8009ef0:	9a06      	ldr	r2, [sp, #24]
 8009ef2:	2a47      	cmp	r2, #71	@ 0x47
 8009ef4:	d1c2      	bne.n	8009e7c <_printf_float+0xf0>
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1c0      	bne.n	8009e7c <_printf_float+0xf0>
 8009efa:	2301      	movs	r3, #1
 8009efc:	e7bd      	b.n	8009e7a <_printf_float+0xee>
 8009efe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f02:	d9db      	bls.n	8009ebc <_printf_float+0x130>
 8009f04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009f08:	d118      	bne.n	8009f3c <_printf_float+0x1b0>
 8009f0a:	2900      	cmp	r1, #0
 8009f0c:	6863      	ldr	r3, [r4, #4]
 8009f0e:	dd0b      	ble.n	8009f28 <_printf_float+0x19c>
 8009f10:	6121      	str	r1, [r4, #16]
 8009f12:	b913      	cbnz	r3, 8009f1a <_printf_float+0x18e>
 8009f14:	6822      	ldr	r2, [r4, #0]
 8009f16:	07d0      	lsls	r0, r2, #31
 8009f18:	d502      	bpl.n	8009f20 <_printf_float+0x194>
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	440b      	add	r3, r1
 8009f1e:	6123      	str	r3, [r4, #16]
 8009f20:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009f22:	f04f 0900 	mov.w	r9, #0
 8009f26:	e7db      	b.n	8009ee0 <_printf_float+0x154>
 8009f28:	b913      	cbnz	r3, 8009f30 <_printf_float+0x1a4>
 8009f2a:	6822      	ldr	r2, [r4, #0]
 8009f2c:	07d2      	lsls	r2, r2, #31
 8009f2e:	d501      	bpl.n	8009f34 <_printf_float+0x1a8>
 8009f30:	3302      	adds	r3, #2
 8009f32:	e7f4      	b.n	8009f1e <_printf_float+0x192>
 8009f34:	2301      	movs	r3, #1
 8009f36:	e7f2      	b.n	8009f1e <_printf_float+0x192>
 8009f38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009f3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f3e:	4299      	cmp	r1, r3
 8009f40:	db05      	blt.n	8009f4e <_printf_float+0x1c2>
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	6121      	str	r1, [r4, #16]
 8009f46:	07d8      	lsls	r0, r3, #31
 8009f48:	d5ea      	bpl.n	8009f20 <_printf_float+0x194>
 8009f4a:	1c4b      	adds	r3, r1, #1
 8009f4c:	e7e7      	b.n	8009f1e <_printf_float+0x192>
 8009f4e:	2900      	cmp	r1, #0
 8009f50:	bfd4      	ite	le
 8009f52:	f1c1 0202 	rsble	r2, r1, #2
 8009f56:	2201      	movgt	r2, #1
 8009f58:	4413      	add	r3, r2
 8009f5a:	e7e0      	b.n	8009f1e <_printf_float+0x192>
 8009f5c:	6823      	ldr	r3, [r4, #0]
 8009f5e:	055a      	lsls	r2, r3, #21
 8009f60:	d407      	bmi.n	8009f72 <_printf_float+0x1e6>
 8009f62:	6923      	ldr	r3, [r4, #16]
 8009f64:	4642      	mov	r2, r8
 8009f66:	4631      	mov	r1, r6
 8009f68:	4628      	mov	r0, r5
 8009f6a:	47b8      	blx	r7
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d12b      	bne.n	8009fc8 <_printf_float+0x23c>
 8009f70:	e767      	b.n	8009e42 <_printf_float+0xb6>
 8009f72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f76:	f240 80dd 	bls.w	800a134 <_printf_float+0x3a8>
 8009f7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f7e:	2200      	movs	r2, #0
 8009f80:	2300      	movs	r3, #0
 8009f82:	f7f6 fdf9 	bl	8000b78 <__aeabi_dcmpeq>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d033      	beq.n	8009ff2 <_printf_float+0x266>
 8009f8a:	4a37      	ldr	r2, [pc, #220]	@ (800a068 <_printf_float+0x2dc>)
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	4631      	mov	r1, r6
 8009f90:	4628      	mov	r0, r5
 8009f92:	47b8      	blx	r7
 8009f94:	3001      	adds	r0, #1
 8009f96:	f43f af54 	beq.w	8009e42 <_printf_float+0xb6>
 8009f9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009f9e:	4543      	cmp	r3, r8
 8009fa0:	db02      	blt.n	8009fa8 <_printf_float+0x21c>
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	07d8      	lsls	r0, r3, #31
 8009fa6:	d50f      	bpl.n	8009fc8 <_printf_float+0x23c>
 8009fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fac:	4631      	mov	r1, r6
 8009fae:	4628      	mov	r0, r5
 8009fb0:	47b8      	blx	r7
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	f43f af45 	beq.w	8009e42 <_printf_float+0xb6>
 8009fb8:	f04f 0900 	mov.w	r9, #0
 8009fbc:	f108 38ff 	add.w	r8, r8, #4294967295
 8009fc0:	f104 0a1a 	add.w	sl, r4, #26
 8009fc4:	45c8      	cmp	r8, r9
 8009fc6:	dc09      	bgt.n	8009fdc <_printf_float+0x250>
 8009fc8:	6823      	ldr	r3, [r4, #0]
 8009fca:	079b      	lsls	r3, r3, #30
 8009fcc:	f100 8103 	bmi.w	800a1d6 <_printf_float+0x44a>
 8009fd0:	68e0      	ldr	r0, [r4, #12]
 8009fd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fd4:	4298      	cmp	r0, r3
 8009fd6:	bfb8      	it	lt
 8009fd8:	4618      	movlt	r0, r3
 8009fda:	e734      	b.n	8009e46 <_printf_float+0xba>
 8009fdc:	2301      	movs	r3, #1
 8009fde:	4652      	mov	r2, sl
 8009fe0:	4631      	mov	r1, r6
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	47b8      	blx	r7
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	f43f af2b 	beq.w	8009e42 <_printf_float+0xb6>
 8009fec:	f109 0901 	add.w	r9, r9, #1
 8009ff0:	e7e8      	b.n	8009fc4 <_printf_float+0x238>
 8009ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	dc39      	bgt.n	800a06c <_printf_float+0x2e0>
 8009ff8:	4a1b      	ldr	r2, [pc, #108]	@ (800a068 <_printf_float+0x2dc>)
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	4631      	mov	r1, r6
 8009ffe:	4628      	mov	r0, r5
 800a000:	47b8      	blx	r7
 800a002:	3001      	adds	r0, #1
 800a004:	f43f af1d 	beq.w	8009e42 <_printf_float+0xb6>
 800a008:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a00c:	ea59 0303 	orrs.w	r3, r9, r3
 800a010:	d102      	bne.n	800a018 <_printf_float+0x28c>
 800a012:	6823      	ldr	r3, [r4, #0]
 800a014:	07d9      	lsls	r1, r3, #31
 800a016:	d5d7      	bpl.n	8009fc8 <_printf_float+0x23c>
 800a018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a01c:	4631      	mov	r1, r6
 800a01e:	4628      	mov	r0, r5
 800a020:	47b8      	blx	r7
 800a022:	3001      	adds	r0, #1
 800a024:	f43f af0d 	beq.w	8009e42 <_printf_float+0xb6>
 800a028:	f04f 0a00 	mov.w	sl, #0
 800a02c:	f104 0b1a 	add.w	fp, r4, #26
 800a030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a032:	425b      	negs	r3, r3
 800a034:	4553      	cmp	r3, sl
 800a036:	dc01      	bgt.n	800a03c <_printf_float+0x2b0>
 800a038:	464b      	mov	r3, r9
 800a03a:	e793      	b.n	8009f64 <_printf_float+0x1d8>
 800a03c:	2301      	movs	r3, #1
 800a03e:	465a      	mov	r2, fp
 800a040:	4631      	mov	r1, r6
 800a042:	4628      	mov	r0, r5
 800a044:	47b8      	blx	r7
 800a046:	3001      	adds	r0, #1
 800a048:	f43f aefb 	beq.w	8009e42 <_printf_float+0xb6>
 800a04c:	f10a 0a01 	add.w	sl, sl, #1
 800a050:	e7ee      	b.n	800a030 <_printf_float+0x2a4>
 800a052:	bf00      	nop
 800a054:	7fefffff 	.word	0x7fefffff
 800a058:	0800cb28 	.word	0x0800cb28
 800a05c:	0800cb2c 	.word	0x0800cb2c
 800a060:	0800cb30 	.word	0x0800cb30
 800a064:	0800cb34 	.word	0x0800cb34
 800a068:	0800cb38 	.word	0x0800cb38
 800a06c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a06e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a072:	4553      	cmp	r3, sl
 800a074:	bfa8      	it	ge
 800a076:	4653      	movge	r3, sl
 800a078:	2b00      	cmp	r3, #0
 800a07a:	4699      	mov	r9, r3
 800a07c:	dc36      	bgt.n	800a0ec <_printf_float+0x360>
 800a07e:	f04f 0b00 	mov.w	fp, #0
 800a082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a086:	f104 021a 	add.w	r2, r4, #26
 800a08a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a08c:	9306      	str	r3, [sp, #24]
 800a08e:	eba3 0309 	sub.w	r3, r3, r9
 800a092:	455b      	cmp	r3, fp
 800a094:	dc31      	bgt.n	800a0fa <_printf_float+0x36e>
 800a096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a098:	459a      	cmp	sl, r3
 800a09a:	dc3a      	bgt.n	800a112 <_printf_float+0x386>
 800a09c:	6823      	ldr	r3, [r4, #0]
 800a09e:	07da      	lsls	r2, r3, #31
 800a0a0:	d437      	bmi.n	800a112 <_printf_float+0x386>
 800a0a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0a4:	ebaa 0903 	sub.w	r9, sl, r3
 800a0a8:	9b06      	ldr	r3, [sp, #24]
 800a0aa:	ebaa 0303 	sub.w	r3, sl, r3
 800a0ae:	4599      	cmp	r9, r3
 800a0b0:	bfa8      	it	ge
 800a0b2:	4699      	movge	r9, r3
 800a0b4:	f1b9 0f00 	cmp.w	r9, #0
 800a0b8:	dc33      	bgt.n	800a122 <_printf_float+0x396>
 800a0ba:	f04f 0800 	mov.w	r8, #0
 800a0be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0c2:	f104 0b1a 	add.w	fp, r4, #26
 800a0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0c8:	ebaa 0303 	sub.w	r3, sl, r3
 800a0cc:	eba3 0309 	sub.w	r3, r3, r9
 800a0d0:	4543      	cmp	r3, r8
 800a0d2:	f77f af79 	ble.w	8009fc8 <_printf_float+0x23c>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	465a      	mov	r2, fp
 800a0da:	4631      	mov	r1, r6
 800a0dc:	4628      	mov	r0, r5
 800a0de:	47b8      	blx	r7
 800a0e0:	3001      	adds	r0, #1
 800a0e2:	f43f aeae 	beq.w	8009e42 <_printf_float+0xb6>
 800a0e6:	f108 0801 	add.w	r8, r8, #1
 800a0ea:	e7ec      	b.n	800a0c6 <_printf_float+0x33a>
 800a0ec:	4642      	mov	r2, r8
 800a0ee:	4631      	mov	r1, r6
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b8      	blx	r7
 800a0f4:	3001      	adds	r0, #1
 800a0f6:	d1c2      	bne.n	800a07e <_printf_float+0x2f2>
 800a0f8:	e6a3      	b.n	8009e42 <_printf_float+0xb6>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	4628      	mov	r0, r5
 800a100:	9206      	str	r2, [sp, #24]
 800a102:	47b8      	blx	r7
 800a104:	3001      	adds	r0, #1
 800a106:	f43f ae9c 	beq.w	8009e42 <_printf_float+0xb6>
 800a10a:	9a06      	ldr	r2, [sp, #24]
 800a10c:	f10b 0b01 	add.w	fp, fp, #1
 800a110:	e7bb      	b.n	800a08a <_printf_float+0x2fe>
 800a112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a116:	4631      	mov	r1, r6
 800a118:	4628      	mov	r0, r5
 800a11a:	47b8      	blx	r7
 800a11c:	3001      	adds	r0, #1
 800a11e:	d1c0      	bne.n	800a0a2 <_printf_float+0x316>
 800a120:	e68f      	b.n	8009e42 <_printf_float+0xb6>
 800a122:	9a06      	ldr	r2, [sp, #24]
 800a124:	464b      	mov	r3, r9
 800a126:	4442      	add	r2, r8
 800a128:	4631      	mov	r1, r6
 800a12a:	4628      	mov	r0, r5
 800a12c:	47b8      	blx	r7
 800a12e:	3001      	adds	r0, #1
 800a130:	d1c3      	bne.n	800a0ba <_printf_float+0x32e>
 800a132:	e686      	b.n	8009e42 <_printf_float+0xb6>
 800a134:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a138:	f1ba 0f01 	cmp.w	sl, #1
 800a13c:	dc01      	bgt.n	800a142 <_printf_float+0x3b6>
 800a13e:	07db      	lsls	r3, r3, #31
 800a140:	d536      	bpl.n	800a1b0 <_printf_float+0x424>
 800a142:	2301      	movs	r3, #1
 800a144:	4642      	mov	r2, r8
 800a146:	4631      	mov	r1, r6
 800a148:	4628      	mov	r0, r5
 800a14a:	47b8      	blx	r7
 800a14c:	3001      	adds	r0, #1
 800a14e:	f43f ae78 	beq.w	8009e42 <_printf_float+0xb6>
 800a152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a156:	4631      	mov	r1, r6
 800a158:	4628      	mov	r0, r5
 800a15a:	47b8      	blx	r7
 800a15c:	3001      	adds	r0, #1
 800a15e:	f43f ae70 	beq.w	8009e42 <_printf_float+0xb6>
 800a162:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a166:	2200      	movs	r2, #0
 800a168:	2300      	movs	r3, #0
 800a16a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a16e:	f7f6 fd03 	bl	8000b78 <__aeabi_dcmpeq>
 800a172:	b9c0      	cbnz	r0, 800a1a6 <_printf_float+0x41a>
 800a174:	4653      	mov	r3, sl
 800a176:	f108 0201 	add.w	r2, r8, #1
 800a17a:	4631      	mov	r1, r6
 800a17c:	4628      	mov	r0, r5
 800a17e:	47b8      	blx	r7
 800a180:	3001      	adds	r0, #1
 800a182:	d10c      	bne.n	800a19e <_printf_float+0x412>
 800a184:	e65d      	b.n	8009e42 <_printf_float+0xb6>
 800a186:	2301      	movs	r3, #1
 800a188:	465a      	mov	r2, fp
 800a18a:	4631      	mov	r1, r6
 800a18c:	4628      	mov	r0, r5
 800a18e:	47b8      	blx	r7
 800a190:	3001      	adds	r0, #1
 800a192:	f43f ae56 	beq.w	8009e42 <_printf_float+0xb6>
 800a196:	f108 0801 	add.w	r8, r8, #1
 800a19a:	45d0      	cmp	r8, sl
 800a19c:	dbf3      	blt.n	800a186 <_printf_float+0x3fa>
 800a19e:	464b      	mov	r3, r9
 800a1a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a1a4:	e6df      	b.n	8009f66 <_printf_float+0x1da>
 800a1a6:	f04f 0800 	mov.w	r8, #0
 800a1aa:	f104 0b1a 	add.w	fp, r4, #26
 800a1ae:	e7f4      	b.n	800a19a <_printf_float+0x40e>
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	4642      	mov	r2, r8
 800a1b4:	e7e1      	b.n	800a17a <_printf_float+0x3ee>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	464a      	mov	r2, r9
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	4628      	mov	r0, r5
 800a1be:	47b8      	blx	r7
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	f43f ae3e 	beq.w	8009e42 <_printf_float+0xb6>
 800a1c6:	f108 0801 	add.w	r8, r8, #1
 800a1ca:	68e3      	ldr	r3, [r4, #12]
 800a1cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a1ce:	1a5b      	subs	r3, r3, r1
 800a1d0:	4543      	cmp	r3, r8
 800a1d2:	dcf0      	bgt.n	800a1b6 <_printf_float+0x42a>
 800a1d4:	e6fc      	b.n	8009fd0 <_printf_float+0x244>
 800a1d6:	f04f 0800 	mov.w	r8, #0
 800a1da:	f104 0919 	add.w	r9, r4, #25
 800a1de:	e7f4      	b.n	800a1ca <_printf_float+0x43e>

0800a1e0 <_printf_common>:
 800a1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e4:	4616      	mov	r6, r2
 800a1e6:	4698      	mov	r8, r3
 800a1e8:	688a      	ldr	r2, [r1, #8]
 800a1ea:	690b      	ldr	r3, [r1, #16]
 800a1ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	bfb8      	it	lt
 800a1f4:	4613      	movlt	r3, r2
 800a1f6:	6033      	str	r3, [r6, #0]
 800a1f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a1fc:	4607      	mov	r7, r0
 800a1fe:	460c      	mov	r4, r1
 800a200:	b10a      	cbz	r2, 800a206 <_printf_common+0x26>
 800a202:	3301      	adds	r3, #1
 800a204:	6033      	str	r3, [r6, #0]
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	0699      	lsls	r1, r3, #26
 800a20a:	bf42      	ittt	mi
 800a20c:	6833      	ldrmi	r3, [r6, #0]
 800a20e:	3302      	addmi	r3, #2
 800a210:	6033      	strmi	r3, [r6, #0]
 800a212:	6825      	ldr	r5, [r4, #0]
 800a214:	f015 0506 	ands.w	r5, r5, #6
 800a218:	d106      	bne.n	800a228 <_printf_common+0x48>
 800a21a:	f104 0a19 	add.w	sl, r4, #25
 800a21e:	68e3      	ldr	r3, [r4, #12]
 800a220:	6832      	ldr	r2, [r6, #0]
 800a222:	1a9b      	subs	r3, r3, r2
 800a224:	42ab      	cmp	r3, r5
 800a226:	dc26      	bgt.n	800a276 <_printf_common+0x96>
 800a228:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a22c:	6822      	ldr	r2, [r4, #0]
 800a22e:	3b00      	subs	r3, #0
 800a230:	bf18      	it	ne
 800a232:	2301      	movne	r3, #1
 800a234:	0692      	lsls	r2, r2, #26
 800a236:	d42b      	bmi.n	800a290 <_printf_common+0xb0>
 800a238:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a23c:	4641      	mov	r1, r8
 800a23e:	4638      	mov	r0, r7
 800a240:	47c8      	blx	r9
 800a242:	3001      	adds	r0, #1
 800a244:	d01e      	beq.n	800a284 <_printf_common+0xa4>
 800a246:	6823      	ldr	r3, [r4, #0]
 800a248:	6922      	ldr	r2, [r4, #16]
 800a24a:	f003 0306 	and.w	r3, r3, #6
 800a24e:	2b04      	cmp	r3, #4
 800a250:	bf02      	ittt	eq
 800a252:	68e5      	ldreq	r5, [r4, #12]
 800a254:	6833      	ldreq	r3, [r6, #0]
 800a256:	1aed      	subeq	r5, r5, r3
 800a258:	68a3      	ldr	r3, [r4, #8]
 800a25a:	bf0c      	ite	eq
 800a25c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a260:	2500      	movne	r5, #0
 800a262:	4293      	cmp	r3, r2
 800a264:	bfc4      	itt	gt
 800a266:	1a9b      	subgt	r3, r3, r2
 800a268:	18ed      	addgt	r5, r5, r3
 800a26a:	2600      	movs	r6, #0
 800a26c:	341a      	adds	r4, #26
 800a26e:	42b5      	cmp	r5, r6
 800a270:	d11a      	bne.n	800a2a8 <_printf_common+0xc8>
 800a272:	2000      	movs	r0, #0
 800a274:	e008      	b.n	800a288 <_printf_common+0xa8>
 800a276:	2301      	movs	r3, #1
 800a278:	4652      	mov	r2, sl
 800a27a:	4641      	mov	r1, r8
 800a27c:	4638      	mov	r0, r7
 800a27e:	47c8      	blx	r9
 800a280:	3001      	adds	r0, #1
 800a282:	d103      	bne.n	800a28c <_printf_common+0xac>
 800a284:	f04f 30ff 	mov.w	r0, #4294967295
 800a288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a28c:	3501      	adds	r5, #1
 800a28e:	e7c6      	b.n	800a21e <_printf_common+0x3e>
 800a290:	18e1      	adds	r1, r4, r3
 800a292:	1c5a      	adds	r2, r3, #1
 800a294:	2030      	movs	r0, #48	@ 0x30
 800a296:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a29a:	4422      	add	r2, r4
 800a29c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a2a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a2a4:	3302      	adds	r3, #2
 800a2a6:	e7c7      	b.n	800a238 <_printf_common+0x58>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	4622      	mov	r2, r4
 800a2ac:	4641      	mov	r1, r8
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	47c8      	blx	r9
 800a2b2:	3001      	adds	r0, #1
 800a2b4:	d0e6      	beq.n	800a284 <_printf_common+0xa4>
 800a2b6:	3601      	adds	r6, #1
 800a2b8:	e7d9      	b.n	800a26e <_printf_common+0x8e>
	...

0800a2bc <_printf_i>:
 800a2bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c0:	7e0f      	ldrb	r7, [r1, #24]
 800a2c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a2c4:	2f78      	cmp	r7, #120	@ 0x78
 800a2c6:	4691      	mov	r9, r2
 800a2c8:	4680      	mov	r8, r0
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	469a      	mov	sl, r3
 800a2ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a2d2:	d807      	bhi.n	800a2e4 <_printf_i+0x28>
 800a2d4:	2f62      	cmp	r7, #98	@ 0x62
 800a2d6:	d80a      	bhi.n	800a2ee <_printf_i+0x32>
 800a2d8:	2f00      	cmp	r7, #0
 800a2da:	f000 80d2 	beq.w	800a482 <_printf_i+0x1c6>
 800a2de:	2f58      	cmp	r7, #88	@ 0x58
 800a2e0:	f000 80b9 	beq.w	800a456 <_printf_i+0x19a>
 800a2e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a2ec:	e03a      	b.n	800a364 <_printf_i+0xa8>
 800a2ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a2f2:	2b15      	cmp	r3, #21
 800a2f4:	d8f6      	bhi.n	800a2e4 <_printf_i+0x28>
 800a2f6:	a101      	add	r1, pc, #4	@ (adr r1, 800a2fc <_printf_i+0x40>)
 800a2f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2fc:	0800a355 	.word	0x0800a355
 800a300:	0800a369 	.word	0x0800a369
 800a304:	0800a2e5 	.word	0x0800a2e5
 800a308:	0800a2e5 	.word	0x0800a2e5
 800a30c:	0800a2e5 	.word	0x0800a2e5
 800a310:	0800a2e5 	.word	0x0800a2e5
 800a314:	0800a369 	.word	0x0800a369
 800a318:	0800a2e5 	.word	0x0800a2e5
 800a31c:	0800a2e5 	.word	0x0800a2e5
 800a320:	0800a2e5 	.word	0x0800a2e5
 800a324:	0800a2e5 	.word	0x0800a2e5
 800a328:	0800a469 	.word	0x0800a469
 800a32c:	0800a393 	.word	0x0800a393
 800a330:	0800a423 	.word	0x0800a423
 800a334:	0800a2e5 	.word	0x0800a2e5
 800a338:	0800a2e5 	.word	0x0800a2e5
 800a33c:	0800a48b 	.word	0x0800a48b
 800a340:	0800a2e5 	.word	0x0800a2e5
 800a344:	0800a393 	.word	0x0800a393
 800a348:	0800a2e5 	.word	0x0800a2e5
 800a34c:	0800a2e5 	.word	0x0800a2e5
 800a350:	0800a42b 	.word	0x0800a42b
 800a354:	6833      	ldr	r3, [r6, #0]
 800a356:	1d1a      	adds	r2, r3, #4
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	6032      	str	r2, [r6, #0]
 800a35c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a360:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a364:	2301      	movs	r3, #1
 800a366:	e09d      	b.n	800a4a4 <_printf_i+0x1e8>
 800a368:	6833      	ldr	r3, [r6, #0]
 800a36a:	6820      	ldr	r0, [r4, #0]
 800a36c:	1d19      	adds	r1, r3, #4
 800a36e:	6031      	str	r1, [r6, #0]
 800a370:	0606      	lsls	r6, r0, #24
 800a372:	d501      	bpl.n	800a378 <_printf_i+0xbc>
 800a374:	681d      	ldr	r5, [r3, #0]
 800a376:	e003      	b.n	800a380 <_printf_i+0xc4>
 800a378:	0645      	lsls	r5, r0, #25
 800a37a:	d5fb      	bpl.n	800a374 <_printf_i+0xb8>
 800a37c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a380:	2d00      	cmp	r5, #0
 800a382:	da03      	bge.n	800a38c <_printf_i+0xd0>
 800a384:	232d      	movs	r3, #45	@ 0x2d
 800a386:	426d      	negs	r5, r5
 800a388:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a38c:	4859      	ldr	r0, [pc, #356]	@ (800a4f4 <_printf_i+0x238>)
 800a38e:	230a      	movs	r3, #10
 800a390:	e011      	b.n	800a3b6 <_printf_i+0xfa>
 800a392:	6821      	ldr	r1, [r4, #0]
 800a394:	6833      	ldr	r3, [r6, #0]
 800a396:	0608      	lsls	r0, r1, #24
 800a398:	f853 5b04 	ldr.w	r5, [r3], #4
 800a39c:	d402      	bmi.n	800a3a4 <_printf_i+0xe8>
 800a39e:	0649      	lsls	r1, r1, #25
 800a3a0:	bf48      	it	mi
 800a3a2:	b2ad      	uxthmi	r5, r5
 800a3a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a3a6:	4853      	ldr	r0, [pc, #332]	@ (800a4f4 <_printf_i+0x238>)
 800a3a8:	6033      	str	r3, [r6, #0]
 800a3aa:	bf14      	ite	ne
 800a3ac:	230a      	movne	r3, #10
 800a3ae:	2308      	moveq	r3, #8
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3b6:	6866      	ldr	r6, [r4, #4]
 800a3b8:	60a6      	str	r6, [r4, #8]
 800a3ba:	2e00      	cmp	r6, #0
 800a3bc:	bfa2      	ittt	ge
 800a3be:	6821      	ldrge	r1, [r4, #0]
 800a3c0:	f021 0104 	bicge.w	r1, r1, #4
 800a3c4:	6021      	strge	r1, [r4, #0]
 800a3c6:	b90d      	cbnz	r5, 800a3cc <_printf_i+0x110>
 800a3c8:	2e00      	cmp	r6, #0
 800a3ca:	d04b      	beq.n	800a464 <_printf_i+0x1a8>
 800a3cc:	4616      	mov	r6, r2
 800a3ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3d2:	fb03 5711 	mls	r7, r3, r1, r5
 800a3d6:	5dc7      	ldrb	r7, [r0, r7]
 800a3d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a3dc:	462f      	mov	r7, r5
 800a3de:	42bb      	cmp	r3, r7
 800a3e0:	460d      	mov	r5, r1
 800a3e2:	d9f4      	bls.n	800a3ce <_printf_i+0x112>
 800a3e4:	2b08      	cmp	r3, #8
 800a3e6:	d10b      	bne.n	800a400 <_printf_i+0x144>
 800a3e8:	6823      	ldr	r3, [r4, #0]
 800a3ea:	07df      	lsls	r7, r3, #31
 800a3ec:	d508      	bpl.n	800a400 <_printf_i+0x144>
 800a3ee:	6923      	ldr	r3, [r4, #16]
 800a3f0:	6861      	ldr	r1, [r4, #4]
 800a3f2:	4299      	cmp	r1, r3
 800a3f4:	bfde      	ittt	le
 800a3f6:	2330      	movle	r3, #48	@ 0x30
 800a3f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a3fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a400:	1b92      	subs	r2, r2, r6
 800a402:	6122      	str	r2, [r4, #16]
 800a404:	f8cd a000 	str.w	sl, [sp]
 800a408:	464b      	mov	r3, r9
 800a40a:	aa03      	add	r2, sp, #12
 800a40c:	4621      	mov	r1, r4
 800a40e:	4640      	mov	r0, r8
 800a410:	f7ff fee6 	bl	800a1e0 <_printf_common>
 800a414:	3001      	adds	r0, #1
 800a416:	d14a      	bne.n	800a4ae <_printf_i+0x1f2>
 800a418:	f04f 30ff 	mov.w	r0, #4294967295
 800a41c:	b004      	add	sp, #16
 800a41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	f043 0320 	orr.w	r3, r3, #32
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	4833      	ldr	r0, [pc, #204]	@ (800a4f8 <_printf_i+0x23c>)
 800a42c:	2778      	movs	r7, #120	@ 0x78
 800a42e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a432:	6823      	ldr	r3, [r4, #0]
 800a434:	6831      	ldr	r1, [r6, #0]
 800a436:	061f      	lsls	r7, r3, #24
 800a438:	f851 5b04 	ldr.w	r5, [r1], #4
 800a43c:	d402      	bmi.n	800a444 <_printf_i+0x188>
 800a43e:	065f      	lsls	r7, r3, #25
 800a440:	bf48      	it	mi
 800a442:	b2ad      	uxthmi	r5, r5
 800a444:	6031      	str	r1, [r6, #0]
 800a446:	07d9      	lsls	r1, r3, #31
 800a448:	bf44      	itt	mi
 800a44a:	f043 0320 	orrmi.w	r3, r3, #32
 800a44e:	6023      	strmi	r3, [r4, #0]
 800a450:	b11d      	cbz	r5, 800a45a <_printf_i+0x19e>
 800a452:	2310      	movs	r3, #16
 800a454:	e7ac      	b.n	800a3b0 <_printf_i+0xf4>
 800a456:	4827      	ldr	r0, [pc, #156]	@ (800a4f4 <_printf_i+0x238>)
 800a458:	e7e9      	b.n	800a42e <_printf_i+0x172>
 800a45a:	6823      	ldr	r3, [r4, #0]
 800a45c:	f023 0320 	bic.w	r3, r3, #32
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	e7f6      	b.n	800a452 <_printf_i+0x196>
 800a464:	4616      	mov	r6, r2
 800a466:	e7bd      	b.n	800a3e4 <_printf_i+0x128>
 800a468:	6833      	ldr	r3, [r6, #0]
 800a46a:	6825      	ldr	r5, [r4, #0]
 800a46c:	6961      	ldr	r1, [r4, #20]
 800a46e:	1d18      	adds	r0, r3, #4
 800a470:	6030      	str	r0, [r6, #0]
 800a472:	062e      	lsls	r6, r5, #24
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	d501      	bpl.n	800a47c <_printf_i+0x1c0>
 800a478:	6019      	str	r1, [r3, #0]
 800a47a:	e002      	b.n	800a482 <_printf_i+0x1c6>
 800a47c:	0668      	lsls	r0, r5, #25
 800a47e:	d5fb      	bpl.n	800a478 <_printf_i+0x1bc>
 800a480:	8019      	strh	r1, [r3, #0]
 800a482:	2300      	movs	r3, #0
 800a484:	6123      	str	r3, [r4, #16]
 800a486:	4616      	mov	r6, r2
 800a488:	e7bc      	b.n	800a404 <_printf_i+0x148>
 800a48a:	6833      	ldr	r3, [r6, #0]
 800a48c:	1d1a      	adds	r2, r3, #4
 800a48e:	6032      	str	r2, [r6, #0]
 800a490:	681e      	ldr	r6, [r3, #0]
 800a492:	6862      	ldr	r2, [r4, #4]
 800a494:	2100      	movs	r1, #0
 800a496:	4630      	mov	r0, r6
 800a498:	f7f5 fef2 	bl	8000280 <memchr>
 800a49c:	b108      	cbz	r0, 800a4a2 <_printf_i+0x1e6>
 800a49e:	1b80      	subs	r0, r0, r6
 800a4a0:	6060      	str	r0, [r4, #4]
 800a4a2:	6863      	ldr	r3, [r4, #4]
 800a4a4:	6123      	str	r3, [r4, #16]
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4ac:	e7aa      	b.n	800a404 <_printf_i+0x148>
 800a4ae:	6923      	ldr	r3, [r4, #16]
 800a4b0:	4632      	mov	r2, r6
 800a4b2:	4649      	mov	r1, r9
 800a4b4:	4640      	mov	r0, r8
 800a4b6:	47d0      	blx	sl
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	d0ad      	beq.n	800a418 <_printf_i+0x15c>
 800a4bc:	6823      	ldr	r3, [r4, #0]
 800a4be:	079b      	lsls	r3, r3, #30
 800a4c0:	d413      	bmi.n	800a4ea <_printf_i+0x22e>
 800a4c2:	68e0      	ldr	r0, [r4, #12]
 800a4c4:	9b03      	ldr	r3, [sp, #12]
 800a4c6:	4298      	cmp	r0, r3
 800a4c8:	bfb8      	it	lt
 800a4ca:	4618      	movlt	r0, r3
 800a4cc:	e7a6      	b.n	800a41c <_printf_i+0x160>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	4632      	mov	r2, r6
 800a4d2:	4649      	mov	r1, r9
 800a4d4:	4640      	mov	r0, r8
 800a4d6:	47d0      	blx	sl
 800a4d8:	3001      	adds	r0, #1
 800a4da:	d09d      	beq.n	800a418 <_printf_i+0x15c>
 800a4dc:	3501      	adds	r5, #1
 800a4de:	68e3      	ldr	r3, [r4, #12]
 800a4e0:	9903      	ldr	r1, [sp, #12]
 800a4e2:	1a5b      	subs	r3, r3, r1
 800a4e4:	42ab      	cmp	r3, r5
 800a4e6:	dcf2      	bgt.n	800a4ce <_printf_i+0x212>
 800a4e8:	e7eb      	b.n	800a4c2 <_printf_i+0x206>
 800a4ea:	2500      	movs	r5, #0
 800a4ec:	f104 0619 	add.w	r6, r4, #25
 800a4f0:	e7f5      	b.n	800a4de <_printf_i+0x222>
 800a4f2:	bf00      	nop
 800a4f4:	0800cb3a 	.word	0x0800cb3a
 800a4f8:	0800cb4b 	.word	0x0800cb4b

0800a4fc <std>:
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	b510      	push	{r4, lr}
 800a500:	4604      	mov	r4, r0
 800a502:	e9c0 3300 	strd	r3, r3, [r0]
 800a506:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a50a:	6083      	str	r3, [r0, #8]
 800a50c:	8181      	strh	r1, [r0, #12]
 800a50e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a510:	81c2      	strh	r2, [r0, #14]
 800a512:	6183      	str	r3, [r0, #24]
 800a514:	4619      	mov	r1, r3
 800a516:	2208      	movs	r2, #8
 800a518:	305c      	adds	r0, #92	@ 0x5c
 800a51a:	f000 f945 	bl	800a7a8 <memset>
 800a51e:	4b0d      	ldr	r3, [pc, #52]	@ (800a554 <std+0x58>)
 800a520:	6263      	str	r3, [r4, #36]	@ 0x24
 800a522:	4b0d      	ldr	r3, [pc, #52]	@ (800a558 <std+0x5c>)
 800a524:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a526:	4b0d      	ldr	r3, [pc, #52]	@ (800a55c <std+0x60>)
 800a528:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a52a:	4b0d      	ldr	r3, [pc, #52]	@ (800a560 <std+0x64>)
 800a52c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a52e:	4b0d      	ldr	r3, [pc, #52]	@ (800a564 <std+0x68>)
 800a530:	6224      	str	r4, [r4, #32]
 800a532:	429c      	cmp	r4, r3
 800a534:	d006      	beq.n	800a544 <std+0x48>
 800a536:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a53a:	4294      	cmp	r4, r2
 800a53c:	d002      	beq.n	800a544 <std+0x48>
 800a53e:	33d0      	adds	r3, #208	@ 0xd0
 800a540:	429c      	cmp	r4, r3
 800a542:	d105      	bne.n	800a550 <std+0x54>
 800a544:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a54c:	f000 b996 	b.w	800a87c <__retarget_lock_init_recursive>
 800a550:	bd10      	pop	{r4, pc}
 800a552:	bf00      	nop
 800a554:	0800a6c1 	.word	0x0800a6c1
 800a558:	0800a6e3 	.word	0x0800a6e3
 800a55c:	0800a71b 	.word	0x0800a71b
 800a560:	0800a73f 	.word	0x0800a73f
 800a564:	2001478c 	.word	0x2001478c

0800a568 <stdio_exit_handler>:
 800a568:	4a02      	ldr	r2, [pc, #8]	@ (800a574 <stdio_exit_handler+0xc>)
 800a56a:	4903      	ldr	r1, [pc, #12]	@ (800a578 <stdio_exit_handler+0x10>)
 800a56c:	4803      	ldr	r0, [pc, #12]	@ (800a57c <stdio_exit_handler+0x14>)
 800a56e:	f000 b869 	b.w	800a644 <_fwalk_sglue>
 800a572:	bf00      	nop
 800a574:	20000034 	.word	0x20000034
 800a578:	0800c1f5 	.word	0x0800c1f5
 800a57c:	20000044 	.word	0x20000044

0800a580 <cleanup_stdio>:
 800a580:	6841      	ldr	r1, [r0, #4]
 800a582:	4b0c      	ldr	r3, [pc, #48]	@ (800a5b4 <cleanup_stdio+0x34>)
 800a584:	4299      	cmp	r1, r3
 800a586:	b510      	push	{r4, lr}
 800a588:	4604      	mov	r4, r0
 800a58a:	d001      	beq.n	800a590 <cleanup_stdio+0x10>
 800a58c:	f001 fe32 	bl	800c1f4 <_fflush_r>
 800a590:	68a1      	ldr	r1, [r4, #8]
 800a592:	4b09      	ldr	r3, [pc, #36]	@ (800a5b8 <cleanup_stdio+0x38>)
 800a594:	4299      	cmp	r1, r3
 800a596:	d002      	beq.n	800a59e <cleanup_stdio+0x1e>
 800a598:	4620      	mov	r0, r4
 800a59a:	f001 fe2b 	bl	800c1f4 <_fflush_r>
 800a59e:	68e1      	ldr	r1, [r4, #12]
 800a5a0:	4b06      	ldr	r3, [pc, #24]	@ (800a5bc <cleanup_stdio+0x3c>)
 800a5a2:	4299      	cmp	r1, r3
 800a5a4:	d004      	beq.n	800a5b0 <cleanup_stdio+0x30>
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5ac:	f001 be22 	b.w	800c1f4 <_fflush_r>
 800a5b0:	bd10      	pop	{r4, pc}
 800a5b2:	bf00      	nop
 800a5b4:	2001478c 	.word	0x2001478c
 800a5b8:	200147f4 	.word	0x200147f4
 800a5bc:	2001485c 	.word	0x2001485c

0800a5c0 <global_stdio_init.part.0>:
 800a5c0:	b510      	push	{r4, lr}
 800a5c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a5f0 <global_stdio_init.part.0+0x30>)
 800a5c4:	4c0b      	ldr	r4, [pc, #44]	@ (800a5f4 <global_stdio_init.part.0+0x34>)
 800a5c6:	4a0c      	ldr	r2, [pc, #48]	@ (800a5f8 <global_stdio_init.part.0+0x38>)
 800a5c8:	601a      	str	r2, [r3, #0]
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	2104      	movs	r1, #4
 800a5d0:	f7ff ff94 	bl	800a4fc <std>
 800a5d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a5d8:	2201      	movs	r2, #1
 800a5da:	2109      	movs	r1, #9
 800a5dc:	f7ff ff8e 	bl	800a4fc <std>
 800a5e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a5e4:	2202      	movs	r2, #2
 800a5e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5ea:	2112      	movs	r1, #18
 800a5ec:	f7ff bf86 	b.w	800a4fc <std>
 800a5f0:	200148c4 	.word	0x200148c4
 800a5f4:	2001478c 	.word	0x2001478c
 800a5f8:	0800a569 	.word	0x0800a569

0800a5fc <__sfp_lock_acquire>:
 800a5fc:	4801      	ldr	r0, [pc, #4]	@ (800a604 <__sfp_lock_acquire+0x8>)
 800a5fe:	f000 b93e 	b.w	800a87e <__retarget_lock_acquire_recursive>
 800a602:	bf00      	nop
 800a604:	200148cd 	.word	0x200148cd

0800a608 <__sfp_lock_release>:
 800a608:	4801      	ldr	r0, [pc, #4]	@ (800a610 <__sfp_lock_release+0x8>)
 800a60a:	f000 b939 	b.w	800a880 <__retarget_lock_release_recursive>
 800a60e:	bf00      	nop
 800a610:	200148cd 	.word	0x200148cd

0800a614 <__sinit>:
 800a614:	b510      	push	{r4, lr}
 800a616:	4604      	mov	r4, r0
 800a618:	f7ff fff0 	bl	800a5fc <__sfp_lock_acquire>
 800a61c:	6a23      	ldr	r3, [r4, #32]
 800a61e:	b11b      	cbz	r3, 800a628 <__sinit+0x14>
 800a620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a624:	f7ff bff0 	b.w	800a608 <__sfp_lock_release>
 800a628:	4b04      	ldr	r3, [pc, #16]	@ (800a63c <__sinit+0x28>)
 800a62a:	6223      	str	r3, [r4, #32]
 800a62c:	4b04      	ldr	r3, [pc, #16]	@ (800a640 <__sinit+0x2c>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1f5      	bne.n	800a620 <__sinit+0xc>
 800a634:	f7ff ffc4 	bl	800a5c0 <global_stdio_init.part.0>
 800a638:	e7f2      	b.n	800a620 <__sinit+0xc>
 800a63a:	bf00      	nop
 800a63c:	0800a581 	.word	0x0800a581
 800a640:	200148c4 	.word	0x200148c4

0800a644 <_fwalk_sglue>:
 800a644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a648:	4607      	mov	r7, r0
 800a64a:	4688      	mov	r8, r1
 800a64c:	4614      	mov	r4, r2
 800a64e:	2600      	movs	r6, #0
 800a650:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a654:	f1b9 0901 	subs.w	r9, r9, #1
 800a658:	d505      	bpl.n	800a666 <_fwalk_sglue+0x22>
 800a65a:	6824      	ldr	r4, [r4, #0]
 800a65c:	2c00      	cmp	r4, #0
 800a65e:	d1f7      	bne.n	800a650 <_fwalk_sglue+0xc>
 800a660:	4630      	mov	r0, r6
 800a662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a666:	89ab      	ldrh	r3, [r5, #12]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d907      	bls.n	800a67c <_fwalk_sglue+0x38>
 800a66c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a670:	3301      	adds	r3, #1
 800a672:	d003      	beq.n	800a67c <_fwalk_sglue+0x38>
 800a674:	4629      	mov	r1, r5
 800a676:	4638      	mov	r0, r7
 800a678:	47c0      	blx	r8
 800a67a:	4306      	orrs	r6, r0
 800a67c:	3568      	adds	r5, #104	@ 0x68
 800a67e:	e7e9      	b.n	800a654 <_fwalk_sglue+0x10>

0800a680 <siprintf>:
 800a680:	b40e      	push	{r1, r2, r3}
 800a682:	b500      	push	{lr}
 800a684:	b09c      	sub	sp, #112	@ 0x70
 800a686:	ab1d      	add	r3, sp, #116	@ 0x74
 800a688:	9002      	str	r0, [sp, #8]
 800a68a:	9006      	str	r0, [sp, #24]
 800a68c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a690:	4809      	ldr	r0, [pc, #36]	@ (800a6b8 <siprintf+0x38>)
 800a692:	9107      	str	r1, [sp, #28]
 800a694:	9104      	str	r1, [sp, #16]
 800a696:	4909      	ldr	r1, [pc, #36]	@ (800a6bc <siprintf+0x3c>)
 800a698:	f853 2b04 	ldr.w	r2, [r3], #4
 800a69c:	9105      	str	r1, [sp, #20]
 800a69e:	6800      	ldr	r0, [r0, #0]
 800a6a0:	9301      	str	r3, [sp, #4]
 800a6a2:	a902      	add	r1, sp, #8
 800a6a4:	f001 fc26 	bl	800bef4 <_svfiprintf_r>
 800a6a8:	9b02      	ldr	r3, [sp, #8]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	701a      	strb	r2, [r3, #0]
 800a6ae:	b01c      	add	sp, #112	@ 0x70
 800a6b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6b4:	b003      	add	sp, #12
 800a6b6:	4770      	bx	lr
 800a6b8:	20000040 	.word	0x20000040
 800a6bc:	ffff0208 	.word	0xffff0208

0800a6c0 <__sread>:
 800a6c0:	b510      	push	{r4, lr}
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6c8:	f000 f89c 	bl	800a804 <_read_r>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	bfab      	itete	ge
 800a6d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a6d2:	89a3      	ldrhlt	r3, [r4, #12]
 800a6d4:	181b      	addge	r3, r3, r0
 800a6d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a6da:	bfac      	ite	ge
 800a6dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a6de:	81a3      	strhlt	r3, [r4, #12]
 800a6e0:	bd10      	pop	{r4, pc}

0800a6e2 <__swrite>:
 800a6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e6:	461f      	mov	r7, r3
 800a6e8:	898b      	ldrh	r3, [r1, #12]
 800a6ea:	05db      	lsls	r3, r3, #23
 800a6ec:	4605      	mov	r5, r0
 800a6ee:	460c      	mov	r4, r1
 800a6f0:	4616      	mov	r6, r2
 800a6f2:	d505      	bpl.n	800a700 <__swrite+0x1e>
 800a6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f000 f870 	bl	800a7e0 <_lseek_r>
 800a700:	89a3      	ldrh	r3, [r4, #12]
 800a702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a706:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a70a:	81a3      	strh	r3, [r4, #12]
 800a70c:	4632      	mov	r2, r6
 800a70e:	463b      	mov	r3, r7
 800a710:	4628      	mov	r0, r5
 800a712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a716:	f7fe bf9d 	b.w	8009654 <_write_r>

0800a71a <__sseek>:
 800a71a:	b510      	push	{r4, lr}
 800a71c:	460c      	mov	r4, r1
 800a71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a722:	f000 f85d 	bl	800a7e0 <_lseek_r>
 800a726:	1c43      	adds	r3, r0, #1
 800a728:	89a3      	ldrh	r3, [r4, #12]
 800a72a:	bf15      	itete	ne
 800a72c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a72e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a732:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a736:	81a3      	strheq	r3, [r4, #12]
 800a738:	bf18      	it	ne
 800a73a:	81a3      	strhne	r3, [r4, #12]
 800a73c:	bd10      	pop	{r4, pc}

0800a73e <__sclose>:
 800a73e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a742:	f000 b83d 	b.w	800a7c0 <_close_r>
	...

0800a748 <_vsiprintf_r>:
 800a748:	b500      	push	{lr}
 800a74a:	b09b      	sub	sp, #108	@ 0x6c
 800a74c:	9100      	str	r1, [sp, #0]
 800a74e:	9104      	str	r1, [sp, #16]
 800a750:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a754:	9105      	str	r1, [sp, #20]
 800a756:	9102      	str	r1, [sp, #8]
 800a758:	4905      	ldr	r1, [pc, #20]	@ (800a770 <_vsiprintf_r+0x28>)
 800a75a:	9103      	str	r1, [sp, #12]
 800a75c:	4669      	mov	r1, sp
 800a75e:	f001 fbc9 	bl	800bef4 <_svfiprintf_r>
 800a762:	9b00      	ldr	r3, [sp, #0]
 800a764:	2200      	movs	r2, #0
 800a766:	701a      	strb	r2, [r3, #0]
 800a768:	b01b      	add	sp, #108	@ 0x6c
 800a76a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a76e:	bf00      	nop
 800a770:	ffff0208 	.word	0xffff0208

0800a774 <vsiprintf>:
 800a774:	4613      	mov	r3, r2
 800a776:	460a      	mov	r2, r1
 800a778:	4601      	mov	r1, r0
 800a77a:	4802      	ldr	r0, [pc, #8]	@ (800a784 <vsiprintf+0x10>)
 800a77c:	6800      	ldr	r0, [r0, #0]
 800a77e:	f7ff bfe3 	b.w	800a748 <_vsiprintf_r>
 800a782:	bf00      	nop
 800a784:	20000040 	.word	0x20000040

0800a788 <memcmp>:
 800a788:	b510      	push	{r4, lr}
 800a78a:	3901      	subs	r1, #1
 800a78c:	4402      	add	r2, r0
 800a78e:	4290      	cmp	r0, r2
 800a790:	d101      	bne.n	800a796 <memcmp+0xe>
 800a792:	2000      	movs	r0, #0
 800a794:	e005      	b.n	800a7a2 <memcmp+0x1a>
 800a796:	7803      	ldrb	r3, [r0, #0]
 800a798:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a79c:	42a3      	cmp	r3, r4
 800a79e:	d001      	beq.n	800a7a4 <memcmp+0x1c>
 800a7a0:	1b18      	subs	r0, r3, r4
 800a7a2:	bd10      	pop	{r4, pc}
 800a7a4:	3001      	adds	r0, #1
 800a7a6:	e7f2      	b.n	800a78e <memcmp+0x6>

0800a7a8 <memset>:
 800a7a8:	4402      	add	r2, r0
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d100      	bne.n	800a7b2 <memset+0xa>
 800a7b0:	4770      	bx	lr
 800a7b2:	f803 1b01 	strb.w	r1, [r3], #1
 800a7b6:	e7f9      	b.n	800a7ac <memset+0x4>

0800a7b8 <_localeconv_r>:
 800a7b8:	4800      	ldr	r0, [pc, #0]	@ (800a7bc <_localeconv_r+0x4>)
 800a7ba:	4770      	bx	lr
 800a7bc:	20000180 	.word	0x20000180

0800a7c0 <_close_r>:
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	4d06      	ldr	r5, [pc, #24]	@ (800a7dc <_close_r+0x1c>)
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	4608      	mov	r0, r1
 800a7ca:	602b      	str	r3, [r5, #0]
 800a7cc:	f7f7 fa76 	bl	8001cbc <_close>
 800a7d0:	1c43      	adds	r3, r0, #1
 800a7d2:	d102      	bne.n	800a7da <_close_r+0x1a>
 800a7d4:	682b      	ldr	r3, [r5, #0]
 800a7d6:	b103      	cbz	r3, 800a7da <_close_r+0x1a>
 800a7d8:	6023      	str	r3, [r4, #0]
 800a7da:	bd38      	pop	{r3, r4, r5, pc}
 800a7dc:	200148c8 	.word	0x200148c8

0800a7e0 <_lseek_r>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	4d07      	ldr	r5, [pc, #28]	@ (800a800 <_lseek_r+0x20>)
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	4608      	mov	r0, r1
 800a7e8:	4611      	mov	r1, r2
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	602a      	str	r2, [r5, #0]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	f7f7 fa8b 	bl	8001d0a <_lseek>
 800a7f4:	1c43      	adds	r3, r0, #1
 800a7f6:	d102      	bne.n	800a7fe <_lseek_r+0x1e>
 800a7f8:	682b      	ldr	r3, [r5, #0]
 800a7fa:	b103      	cbz	r3, 800a7fe <_lseek_r+0x1e>
 800a7fc:	6023      	str	r3, [r4, #0]
 800a7fe:	bd38      	pop	{r3, r4, r5, pc}
 800a800:	200148c8 	.word	0x200148c8

0800a804 <_read_r>:
 800a804:	b538      	push	{r3, r4, r5, lr}
 800a806:	4d07      	ldr	r5, [pc, #28]	@ (800a824 <_read_r+0x20>)
 800a808:	4604      	mov	r4, r0
 800a80a:	4608      	mov	r0, r1
 800a80c:	4611      	mov	r1, r2
 800a80e:	2200      	movs	r2, #0
 800a810:	602a      	str	r2, [r5, #0]
 800a812:	461a      	mov	r2, r3
 800a814:	f7f7 fa35 	bl	8001c82 <_read>
 800a818:	1c43      	adds	r3, r0, #1
 800a81a:	d102      	bne.n	800a822 <_read_r+0x1e>
 800a81c:	682b      	ldr	r3, [r5, #0]
 800a81e:	b103      	cbz	r3, 800a822 <_read_r+0x1e>
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	bd38      	pop	{r3, r4, r5, pc}
 800a824:	200148c8 	.word	0x200148c8

0800a828 <__errno>:
 800a828:	4b01      	ldr	r3, [pc, #4]	@ (800a830 <__errno+0x8>)
 800a82a:	6818      	ldr	r0, [r3, #0]
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	20000040 	.word	0x20000040

0800a834 <__libc_init_array>:
 800a834:	b570      	push	{r4, r5, r6, lr}
 800a836:	4d0d      	ldr	r5, [pc, #52]	@ (800a86c <__libc_init_array+0x38>)
 800a838:	4c0d      	ldr	r4, [pc, #52]	@ (800a870 <__libc_init_array+0x3c>)
 800a83a:	1b64      	subs	r4, r4, r5
 800a83c:	10a4      	asrs	r4, r4, #2
 800a83e:	2600      	movs	r6, #0
 800a840:	42a6      	cmp	r6, r4
 800a842:	d109      	bne.n	800a858 <__libc_init_array+0x24>
 800a844:	4d0b      	ldr	r5, [pc, #44]	@ (800a874 <__libc_init_array+0x40>)
 800a846:	4c0c      	ldr	r4, [pc, #48]	@ (800a878 <__libc_init_array+0x44>)
 800a848:	f002 f864 	bl	800c914 <_init>
 800a84c:	1b64      	subs	r4, r4, r5
 800a84e:	10a4      	asrs	r4, r4, #2
 800a850:	2600      	movs	r6, #0
 800a852:	42a6      	cmp	r6, r4
 800a854:	d105      	bne.n	800a862 <__libc_init_array+0x2e>
 800a856:	bd70      	pop	{r4, r5, r6, pc}
 800a858:	f855 3b04 	ldr.w	r3, [r5], #4
 800a85c:	4798      	blx	r3
 800a85e:	3601      	adds	r6, #1
 800a860:	e7ee      	b.n	800a840 <__libc_init_array+0xc>
 800a862:	f855 3b04 	ldr.w	r3, [r5], #4
 800a866:	4798      	blx	r3
 800a868:	3601      	adds	r6, #1
 800a86a:	e7f2      	b.n	800a852 <__libc_init_array+0x1e>
 800a86c:	0800cea0 	.word	0x0800cea0
 800a870:	0800cea0 	.word	0x0800cea0
 800a874:	0800cea0 	.word	0x0800cea0
 800a878:	0800cea4 	.word	0x0800cea4

0800a87c <__retarget_lock_init_recursive>:
 800a87c:	4770      	bx	lr

0800a87e <__retarget_lock_acquire_recursive>:
 800a87e:	4770      	bx	lr

0800a880 <__retarget_lock_release_recursive>:
 800a880:	4770      	bx	lr

0800a882 <memcpy>:
 800a882:	440a      	add	r2, r1
 800a884:	4291      	cmp	r1, r2
 800a886:	f100 33ff 	add.w	r3, r0, #4294967295
 800a88a:	d100      	bne.n	800a88e <memcpy+0xc>
 800a88c:	4770      	bx	lr
 800a88e:	b510      	push	{r4, lr}
 800a890:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a894:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a898:	4291      	cmp	r1, r2
 800a89a:	d1f9      	bne.n	800a890 <memcpy+0xe>
 800a89c:	bd10      	pop	{r4, pc}

0800a89e <quorem>:
 800a89e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a2:	6903      	ldr	r3, [r0, #16]
 800a8a4:	690c      	ldr	r4, [r1, #16]
 800a8a6:	42a3      	cmp	r3, r4
 800a8a8:	4607      	mov	r7, r0
 800a8aa:	db7e      	blt.n	800a9aa <quorem+0x10c>
 800a8ac:	3c01      	subs	r4, #1
 800a8ae:	f101 0814 	add.w	r8, r1, #20
 800a8b2:	00a3      	lsls	r3, r4, #2
 800a8b4:	f100 0514 	add.w	r5, r0, #20
 800a8b8:	9300      	str	r3, [sp, #0]
 800a8ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8be:	9301      	str	r3, [sp, #4]
 800a8c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a8d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a8d4:	d32e      	bcc.n	800a934 <quorem+0x96>
 800a8d6:	f04f 0a00 	mov.w	sl, #0
 800a8da:	46c4      	mov	ip, r8
 800a8dc:	46ae      	mov	lr, r5
 800a8de:	46d3      	mov	fp, sl
 800a8e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a8e4:	b298      	uxth	r0, r3
 800a8e6:	fb06 a000 	mla	r0, r6, r0, sl
 800a8ea:	0c02      	lsrs	r2, r0, #16
 800a8ec:	0c1b      	lsrs	r3, r3, #16
 800a8ee:	fb06 2303 	mla	r3, r6, r3, r2
 800a8f2:	f8de 2000 	ldr.w	r2, [lr]
 800a8f6:	b280      	uxth	r0, r0
 800a8f8:	b292      	uxth	r2, r2
 800a8fa:	1a12      	subs	r2, r2, r0
 800a8fc:	445a      	add	r2, fp
 800a8fe:	f8de 0000 	ldr.w	r0, [lr]
 800a902:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a906:	b29b      	uxth	r3, r3
 800a908:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a90c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a910:	b292      	uxth	r2, r2
 800a912:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a916:	45e1      	cmp	r9, ip
 800a918:	f84e 2b04 	str.w	r2, [lr], #4
 800a91c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a920:	d2de      	bcs.n	800a8e0 <quorem+0x42>
 800a922:	9b00      	ldr	r3, [sp, #0]
 800a924:	58eb      	ldr	r3, [r5, r3]
 800a926:	b92b      	cbnz	r3, 800a934 <quorem+0x96>
 800a928:	9b01      	ldr	r3, [sp, #4]
 800a92a:	3b04      	subs	r3, #4
 800a92c:	429d      	cmp	r5, r3
 800a92e:	461a      	mov	r2, r3
 800a930:	d32f      	bcc.n	800a992 <quorem+0xf4>
 800a932:	613c      	str	r4, [r7, #16]
 800a934:	4638      	mov	r0, r7
 800a936:	f001 f979 	bl	800bc2c <__mcmp>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	db25      	blt.n	800a98a <quorem+0xec>
 800a93e:	4629      	mov	r1, r5
 800a940:	2000      	movs	r0, #0
 800a942:	f858 2b04 	ldr.w	r2, [r8], #4
 800a946:	f8d1 c000 	ldr.w	ip, [r1]
 800a94a:	fa1f fe82 	uxth.w	lr, r2
 800a94e:	fa1f f38c 	uxth.w	r3, ip
 800a952:	eba3 030e 	sub.w	r3, r3, lr
 800a956:	4403      	add	r3, r0
 800a958:	0c12      	lsrs	r2, r2, #16
 800a95a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a95e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a962:	b29b      	uxth	r3, r3
 800a964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a968:	45c1      	cmp	r9, r8
 800a96a:	f841 3b04 	str.w	r3, [r1], #4
 800a96e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a972:	d2e6      	bcs.n	800a942 <quorem+0xa4>
 800a974:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a978:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a97c:	b922      	cbnz	r2, 800a988 <quorem+0xea>
 800a97e:	3b04      	subs	r3, #4
 800a980:	429d      	cmp	r5, r3
 800a982:	461a      	mov	r2, r3
 800a984:	d30b      	bcc.n	800a99e <quorem+0x100>
 800a986:	613c      	str	r4, [r7, #16]
 800a988:	3601      	adds	r6, #1
 800a98a:	4630      	mov	r0, r6
 800a98c:	b003      	add	sp, #12
 800a98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a992:	6812      	ldr	r2, [r2, #0]
 800a994:	3b04      	subs	r3, #4
 800a996:	2a00      	cmp	r2, #0
 800a998:	d1cb      	bne.n	800a932 <quorem+0x94>
 800a99a:	3c01      	subs	r4, #1
 800a99c:	e7c6      	b.n	800a92c <quorem+0x8e>
 800a99e:	6812      	ldr	r2, [r2, #0]
 800a9a0:	3b04      	subs	r3, #4
 800a9a2:	2a00      	cmp	r2, #0
 800a9a4:	d1ef      	bne.n	800a986 <quorem+0xe8>
 800a9a6:	3c01      	subs	r4, #1
 800a9a8:	e7ea      	b.n	800a980 <quorem+0xe2>
 800a9aa:	2000      	movs	r0, #0
 800a9ac:	e7ee      	b.n	800a98c <quorem+0xee>
	...

0800a9b0 <_dtoa_r>:
 800a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	69c7      	ldr	r7, [r0, #28]
 800a9b6:	b099      	sub	sp, #100	@ 0x64
 800a9b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a9bc:	ec55 4b10 	vmov	r4, r5, d0
 800a9c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a9c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a9c4:	4683      	mov	fp, r0
 800a9c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a9c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a9ca:	b97f      	cbnz	r7, 800a9ec <_dtoa_r+0x3c>
 800a9cc:	2010      	movs	r0, #16
 800a9ce:	f000 fdfd 	bl	800b5cc <malloc>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a9d8:	b920      	cbnz	r0, 800a9e4 <_dtoa_r+0x34>
 800a9da:	4ba7      	ldr	r3, [pc, #668]	@ (800ac78 <_dtoa_r+0x2c8>)
 800a9dc:	21ef      	movs	r1, #239	@ 0xef
 800a9de:	48a7      	ldr	r0, [pc, #668]	@ (800ac7c <_dtoa_r+0x2cc>)
 800a9e0:	f001 fc5a 	bl	800c298 <__assert_func>
 800a9e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a9e8:	6007      	str	r7, [r0, #0]
 800a9ea:	60c7      	str	r7, [r0, #12]
 800a9ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a9f0:	6819      	ldr	r1, [r3, #0]
 800a9f2:	b159      	cbz	r1, 800aa0c <_dtoa_r+0x5c>
 800a9f4:	685a      	ldr	r2, [r3, #4]
 800a9f6:	604a      	str	r2, [r1, #4]
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	4093      	lsls	r3, r2
 800a9fc:	608b      	str	r3, [r1, #8]
 800a9fe:	4658      	mov	r0, fp
 800aa00:	f000 feda 	bl	800b7b8 <_Bfree>
 800aa04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	601a      	str	r2, [r3, #0]
 800aa0c:	1e2b      	subs	r3, r5, #0
 800aa0e:	bfb9      	ittee	lt
 800aa10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aa14:	9303      	strlt	r3, [sp, #12]
 800aa16:	2300      	movge	r3, #0
 800aa18:	6033      	strge	r3, [r6, #0]
 800aa1a:	9f03      	ldr	r7, [sp, #12]
 800aa1c:	4b98      	ldr	r3, [pc, #608]	@ (800ac80 <_dtoa_r+0x2d0>)
 800aa1e:	bfbc      	itt	lt
 800aa20:	2201      	movlt	r2, #1
 800aa22:	6032      	strlt	r2, [r6, #0]
 800aa24:	43bb      	bics	r3, r7
 800aa26:	d112      	bne.n	800aa4e <_dtoa_r+0x9e>
 800aa28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aa2e:	6013      	str	r3, [r2, #0]
 800aa30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa34:	4323      	orrs	r3, r4
 800aa36:	f000 854d 	beq.w	800b4d4 <_dtoa_r+0xb24>
 800aa3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ac94 <_dtoa_r+0x2e4>
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f000 854f 	beq.w	800b4e4 <_dtoa_r+0xb34>
 800aa46:	f10a 0303 	add.w	r3, sl, #3
 800aa4a:	f000 bd49 	b.w	800b4e0 <_dtoa_r+0xb30>
 800aa4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa52:	2200      	movs	r2, #0
 800aa54:	ec51 0b17 	vmov	r0, r1, d7
 800aa58:	2300      	movs	r3, #0
 800aa5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800aa5e:	f7f6 f88b 	bl	8000b78 <__aeabi_dcmpeq>
 800aa62:	4680      	mov	r8, r0
 800aa64:	b158      	cbz	r0, 800aa7e <_dtoa_r+0xce>
 800aa66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa68:	2301      	movs	r3, #1
 800aa6a:	6013      	str	r3, [r2, #0]
 800aa6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa6e:	b113      	cbz	r3, 800aa76 <_dtoa_r+0xc6>
 800aa70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aa72:	4b84      	ldr	r3, [pc, #528]	@ (800ac84 <_dtoa_r+0x2d4>)
 800aa74:	6013      	str	r3, [r2, #0]
 800aa76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ac98 <_dtoa_r+0x2e8>
 800aa7a:	f000 bd33 	b.w	800b4e4 <_dtoa_r+0xb34>
 800aa7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aa82:	aa16      	add	r2, sp, #88	@ 0x58
 800aa84:	a917      	add	r1, sp, #92	@ 0x5c
 800aa86:	4658      	mov	r0, fp
 800aa88:	f001 f980 	bl	800bd8c <__d2b>
 800aa8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aa90:	4681      	mov	r9, r0
 800aa92:	2e00      	cmp	r6, #0
 800aa94:	d077      	beq.n	800ab86 <_dtoa_r+0x1d6>
 800aa96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800aa9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aaa4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aaa8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aaac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aab0:	4619      	mov	r1, r3
 800aab2:	2200      	movs	r2, #0
 800aab4:	4b74      	ldr	r3, [pc, #464]	@ (800ac88 <_dtoa_r+0x2d8>)
 800aab6:	f7f5 fc3f 	bl	8000338 <__aeabi_dsub>
 800aaba:	a369      	add	r3, pc, #420	@ (adr r3, 800ac60 <_dtoa_r+0x2b0>)
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	f7f5 fdf2 	bl	80006a8 <__aeabi_dmul>
 800aac4:	a368      	add	r3, pc, #416	@ (adr r3, 800ac68 <_dtoa_r+0x2b8>)
 800aac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaca:	f7f5 fc37 	bl	800033c <__adddf3>
 800aace:	4604      	mov	r4, r0
 800aad0:	4630      	mov	r0, r6
 800aad2:	460d      	mov	r5, r1
 800aad4:	f7f5 fd7e 	bl	80005d4 <__aeabi_i2d>
 800aad8:	a365      	add	r3, pc, #404	@ (adr r3, 800ac70 <_dtoa_r+0x2c0>)
 800aada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aade:	f7f5 fde3 	bl	80006a8 <__aeabi_dmul>
 800aae2:	4602      	mov	r2, r0
 800aae4:	460b      	mov	r3, r1
 800aae6:	4620      	mov	r0, r4
 800aae8:	4629      	mov	r1, r5
 800aaea:	f7f5 fc27 	bl	800033c <__adddf3>
 800aaee:	4604      	mov	r4, r0
 800aaf0:	460d      	mov	r5, r1
 800aaf2:	f7f6 f889 	bl	8000c08 <__aeabi_d2iz>
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	4607      	mov	r7, r0
 800aafa:	2300      	movs	r3, #0
 800aafc:	4620      	mov	r0, r4
 800aafe:	4629      	mov	r1, r5
 800ab00:	f7f6 f844 	bl	8000b8c <__aeabi_dcmplt>
 800ab04:	b140      	cbz	r0, 800ab18 <_dtoa_r+0x168>
 800ab06:	4638      	mov	r0, r7
 800ab08:	f7f5 fd64 	bl	80005d4 <__aeabi_i2d>
 800ab0c:	4622      	mov	r2, r4
 800ab0e:	462b      	mov	r3, r5
 800ab10:	f7f6 f832 	bl	8000b78 <__aeabi_dcmpeq>
 800ab14:	b900      	cbnz	r0, 800ab18 <_dtoa_r+0x168>
 800ab16:	3f01      	subs	r7, #1
 800ab18:	2f16      	cmp	r7, #22
 800ab1a:	d851      	bhi.n	800abc0 <_dtoa_r+0x210>
 800ab1c:	4b5b      	ldr	r3, [pc, #364]	@ (800ac8c <_dtoa_r+0x2dc>)
 800ab1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab2a:	f7f6 f82f 	bl	8000b8c <__aeabi_dcmplt>
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	d048      	beq.n	800abc4 <_dtoa_r+0x214>
 800ab32:	3f01      	subs	r7, #1
 800ab34:	2300      	movs	r3, #0
 800ab36:	9312      	str	r3, [sp, #72]	@ 0x48
 800ab38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ab3a:	1b9b      	subs	r3, r3, r6
 800ab3c:	1e5a      	subs	r2, r3, #1
 800ab3e:	bf44      	itt	mi
 800ab40:	f1c3 0801 	rsbmi	r8, r3, #1
 800ab44:	2300      	movmi	r3, #0
 800ab46:	9208      	str	r2, [sp, #32]
 800ab48:	bf54      	ite	pl
 800ab4a:	f04f 0800 	movpl.w	r8, #0
 800ab4e:	9308      	strmi	r3, [sp, #32]
 800ab50:	2f00      	cmp	r7, #0
 800ab52:	db39      	blt.n	800abc8 <_dtoa_r+0x218>
 800ab54:	9b08      	ldr	r3, [sp, #32]
 800ab56:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ab58:	443b      	add	r3, r7
 800ab5a:	9308      	str	r3, [sp, #32]
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab62:	2b09      	cmp	r3, #9
 800ab64:	d864      	bhi.n	800ac30 <_dtoa_r+0x280>
 800ab66:	2b05      	cmp	r3, #5
 800ab68:	bfc4      	itt	gt
 800ab6a:	3b04      	subgt	r3, #4
 800ab6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ab6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab70:	f1a3 0302 	sub.w	r3, r3, #2
 800ab74:	bfcc      	ite	gt
 800ab76:	2400      	movgt	r4, #0
 800ab78:	2401      	movle	r4, #1
 800ab7a:	2b03      	cmp	r3, #3
 800ab7c:	d863      	bhi.n	800ac46 <_dtoa_r+0x296>
 800ab7e:	e8df f003 	tbb	[pc, r3]
 800ab82:	372a      	.short	0x372a
 800ab84:	5535      	.short	0x5535
 800ab86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ab8a:	441e      	add	r6, r3
 800ab8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ab90:	2b20      	cmp	r3, #32
 800ab92:	bfc1      	itttt	gt
 800ab94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ab98:	409f      	lslgt	r7, r3
 800ab9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ab9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aba2:	bfd6      	itet	le
 800aba4:	f1c3 0320 	rsble	r3, r3, #32
 800aba8:	ea47 0003 	orrgt.w	r0, r7, r3
 800abac:	fa04 f003 	lslle.w	r0, r4, r3
 800abb0:	f7f5 fd00 	bl	80005b4 <__aeabi_ui2d>
 800abb4:	2201      	movs	r2, #1
 800abb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800abba:	3e01      	subs	r6, #1
 800abbc:	9214      	str	r2, [sp, #80]	@ 0x50
 800abbe:	e777      	b.n	800aab0 <_dtoa_r+0x100>
 800abc0:	2301      	movs	r3, #1
 800abc2:	e7b8      	b.n	800ab36 <_dtoa_r+0x186>
 800abc4:	9012      	str	r0, [sp, #72]	@ 0x48
 800abc6:	e7b7      	b.n	800ab38 <_dtoa_r+0x188>
 800abc8:	427b      	negs	r3, r7
 800abca:	930a      	str	r3, [sp, #40]	@ 0x28
 800abcc:	2300      	movs	r3, #0
 800abce:	eba8 0807 	sub.w	r8, r8, r7
 800abd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800abd4:	e7c4      	b.n	800ab60 <_dtoa_r+0x1b0>
 800abd6:	2300      	movs	r3, #0
 800abd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abdc:	2b00      	cmp	r3, #0
 800abde:	dc35      	bgt.n	800ac4c <_dtoa_r+0x29c>
 800abe0:	2301      	movs	r3, #1
 800abe2:	9300      	str	r3, [sp, #0]
 800abe4:	9307      	str	r3, [sp, #28]
 800abe6:	461a      	mov	r2, r3
 800abe8:	920e      	str	r2, [sp, #56]	@ 0x38
 800abea:	e00b      	b.n	800ac04 <_dtoa_r+0x254>
 800abec:	2301      	movs	r3, #1
 800abee:	e7f3      	b.n	800abd8 <_dtoa_r+0x228>
 800abf0:	2300      	movs	r3, #0
 800abf2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abf6:	18fb      	adds	r3, r7, r3
 800abf8:	9300      	str	r3, [sp, #0]
 800abfa:	3301      	adds	r3, #1
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	9307      	str	r3, [sp, #28]
 800ac00:	bfb8      	it	lt
 800ac02:	2301      	movlt	r3, #1
 800ac04:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ac08:	2100      	movs	r1, #0
 800ac0a:	2204      	movs	r2, #4
 800ac0c:	f102 0514 	add.w	r5, r2, #20
 800ac10:	429d      	cmp	r5, r3
 800ac12:	d91f      	bls.n	800ac54 <_dtoa_r+0x2a4>
 800ac14:	6041      	str	r1, [r0, #4]
 800ac16:	4658      	mov	r0, fp
 800ac18:	f000 fd8e 	bl	800b738 <_Balloc>
 800ac1c:	4682      	mov	sl, r0
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d13c      	bne.n	800ac9c <_dtoa_r+0x2ec>
 800ac22:	4b1b      	ldr	r3, [pc, #108]	@ (800ac90 <_dtoa_r+0x2e0>)
 800ac24:	4602      	mov	r2, r0
 800ac26:	f240 11af 	movw	r1, #431	@ 0x1af
 800ac2a:	e6d8      	b.n	800a9de <_dtoa_r+0x2e>
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e7e0      	b.n	800abf2 <_dtoa_r+0x242>
 800ac30:	2401      	movs	r4, #1
 800ac32:	2300      	movs	r3, #0
 800ac34:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac36:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ac38:	f04f 33ff 	mov.w	r3, #4294967295
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	9307      	str	r3, [sp, #28]
 800ac40:	2200      	movs	r2, #0
 800ac42:	2312      	movs	r3, #18
 800ac44:	e7d0      	b.n	800abe8 <_dtoa_r+0x238>
 800ac46:	2301      	movs	r3, #1
 800ac48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac4a:	e7f5      	b.n	800ac38 <_dtoa_r+0x288>
 800ac4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	9307      	str	r3, [sp, #28]
 800ac52:	e7d7      	b.n	800ac04 <_dtoa_r+0x254>
 800ac54:	3101      	adds	r1, #1
 800ac56:	0052      	lsls	r2, r2, #1
 800ac58:	e7d8      	b.n	800ac0c <_dtoa_r+0x25c>
 800ac5a:	bf00      	nop
 800ac5c:	f3af 8000 	nop.w
 800ac60:	636f4361 	.word	0x636f4361
 800ac64:	3fd287a7 	.word	0x3fd287a7
 800ac68:	8b60c8b3 	.word	0x8b60c8b3
 800ac6c:	3fc68a28 	.word	0x3fc68a28
 800ac70:	509f79fb 	.word	0x509f79fb
 800ac74:	3fd34413 	.word	0x3fd34413
 800ac78:	0800cb69 	.word	0x0800cb69
 800ac7c:	0800cb80 	.word	0x0800cb80
 800ac80:	7ff00000 	.word	0x7ff00000
 800ac84:	0800cb39 	.word	0x0800cb39
 800ac88:	3ff80000 	.word	0x3ff80000
 800ac8c:	0800cc78 	.word	0x0800cc78
 800ac90:	0800cbd8 	.word	0x0800cbd8
 800ac94:	0800cb65 	.word	0x0800cb65
 800ac98:	0800cb38 	.word	0x0800cb38
 800ac9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aca0:	6018      	str	r0, [r3, #0]
 800aca2:	9b07      	ldr	r3, [sp, #28]
 800aca4:	2b0e      	cmp	r3, #14
 800aca6:	f200 80a4 	bhi.w	800adf2 <_dtoa_r+0x442>
 800acaa:	2c00      	cmp	r4, #0
 800acac:	f000 80a1 	beq.w	800adf2 <_dtoa_r+0x442>
 800acb0:	2f00      	cmp	r7, #0
 800acb2:	dd33      	ble.n	800ad1c <_dtoa_r+0x36c>
 800acb4:	4bad      	ldr	r3, [pc, #692]	@ (800af6c <_dtoa_r+0x5bc>)
 800acb6:	f007 020f 	and.w	r2, r7, #15
 800acba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acbe:	ed93 7b00 	vldr	d7, [r3]
 800acc2:	05f8      	lsls	r0, r7, #23
 800acc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800acc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800accc:	d516      	bpl.n	800acfc <_dtoa_r+0x34c>
 800acce:	4ba8      	ldr	r3, [pc, #672]	@ (800af70 <_dtoa_r+0x5c0>)
 800acd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800acd8:	f7f5 fe10 	bl	80008fc <__aeabi_ddiv>
 800acdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ace0:	f004 040f 	and.w	r4, r4, #15
 800ace4:	2603      	movs	r6, #3
 800ace6:	4da2      	ldr	r5, [pc, #648]	@ (800af70 <_dtoa_r+0x5c0>)
 800ace8:	b954      	cbnz	r4, 800ad00 <_dtoa_r+0x350>
 800acea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acf2:	f7f5 fe03 	bl	80008fc <__aeabi_ddiv>
 800acf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acfa:	e028      	b.n	800ad4e <_dtoa_r+0x39e>
 800acfc:	2602      	movs	r6, #2
 800acfe:	e7f2      	b.n	800ace6 <_dtoa_r+0x336>
 800ad00:	07e1      	lsls	r1, r4, #31
 800ad02:	d508      	bpl.n	800ad16 <_dtoa_r+0x366>
 800ad04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad08:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad0c:	f7f5 fccc 	bl	80006a8 <__aeabi_dmul>
 800ad10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad14:	3601      	adds	r6, #1
 800ad16:	1064      	asrs	r4, r4, #1
 800ad18:	3508      	adds	r5, #8
 800ad1a:	e7e5      	b.n	800ace8 <_dtoa_r+0x338>
 800ad1c:	f000 80d2 	beq.w	800aec4 <_dtoa_r+0x514>
 800ad20:	427c      	negs	r4, r7
 800ad22:	4b92      	ldr	r3, [pc, #584]	@ (800af6c <_dtoa_r+0x5bc>)
 800ad24:	4d92      	ldr	r5, [pc, #584]	@ (800af70 <_dtoa_r+0x5c0>)
 800ad26:	f004 020f 	and.w	r2, r4, #15
 800ad2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad36:	f7f5 fcb7 	bl	80006a8 <__aeabi_dmul>
 800ad3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad3e:	1124      	asrs	r4, r4, #4
 800ad40:	2300      	movs	r3, #0
 800ad42:	2602      	movs	r6, #2
 800ad44:	2c00      	cmp	r4, #0
 800ad46:	f040 80b2 	bne.w	800aeae <_dtoa_r+0x4fe>
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1d3      	bne.n	800acf6 <_dtoa_r+0x346>
 800ad4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f000 80b7 	beq.w	800aec8 <_dtoa_r+0x518>
 800ad5a:	4b86      	ldr	r3, [pc, #536]	@ (800af74 <_dtoa_r+0x5c4>)
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	4620      	mov	r0, r4
 800ad60:	4629      	mov	r1, r5
 800ad62:	f7f5 ff13 	bl	8000b8c <__aeabi_dcmplt>
 800ad66:	2800      	cmp	r0, #0
 800ad68:	f000 80ae 	beq.w	800aec8 <_dtoa_r+0x518>
 800ad6c:	9b07      	ldr	r3, [sp, #28]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f000 80aa 	beq.w	800aec8 <_dtoa_r+0x518>
 800ad74:	9b00      	ldr	r3, [sp, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	dd37      	ble.n	800adea <_dtoa_r+0x43a>
 800ad7a:	1e7b      	subs	r3, r7, #1
 800ad7c:	9304      	str	r3, [sp, #16]
 800ad7e:	4620      	mov	r0, r4
 800ad80:	4b7d      	ldr	r3, [pc, #500]	@ (800af78 <_dtoa_r+0x5c8>)
 800ad82:	2200      	movs	r2, #0
 800ad84:	4629      	mov	r1, r5
 800ad86:	f7f5 fc8f 	bl	80006a8 <__aeabi_dmul>
 800ad8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad8e:	9c00      	ldr	r4, [sp, #0]
 800ad90:	3601      	adds	r6, #1
 800ad92:	4630      	mov	r0, r6
 800ad94:	f7f5 fc1e 	bl	80005d4 <__aeabi_i2d>
 800ad98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad9c:	f7f5 fc84 	bl	80006a8 <__aeabi_dmul>
 800ada0:	4b76      	ldr	r3, [pc, #472]	@ (800af7c <_dtoa_r+0x5cc>)
 800ada2:	2200      	movs	r2, #0
 800ada4:	f7f5 faca 	bl	800033c <__adddf3>
 800ada8:	4605      	mov	r5, r0
 800adaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800adae:	2c00      	cmp	r4, #0
 800adb0:	f040 808d 	bne.w	800aece <_dtoa_r+0x51e>
 800adb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adb8:	4b71      	ldr	r3, [pc, #452]	@ (800af80 <_dtoa_r+0x5d0>)
 800adba:	2200      	movs	r2, #0
 800adbc:	f7f5 fabc 	bl	8000338 <__aeabi_dsub>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800adc8:	462a      	mov	r2, r5
 800adca:	4633      	mov	r3, r6
 800adcc:	f7f5 fefc 	bl	8000bc8 <__aeabi_dcmpgt>
 800add0:	2800      	cmp	r0, #0
 800add2:	f040 828b 	bne.w	800b2ec <_dtoa_r+0x93c>
 800add6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adda:	462a      	mov	r2, r5
 800addc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ade0:	f7f5 fed4 	bl	8000b8c <__aeabi_dcmplt>
 800ade4:	2800      	cmp	r0, #0
 800ade6:	f040 8128 	bne.w	800b03a <_dtoa_r+0x68a>
 800adea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800adee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800adf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f2c0 815a 	blt.w	800b0ae <_dtoa_r+0x6fe>
 800adfa:	2f0e      	cmp	r7, #14
 800adfc:	f300 8157 	bgt.w	800b0ae <_dtoa_r+0x6fe>
 800ae00:	4b5a      	ldr	r3, [pc, #360]	@ (800af6c <_dtoa_r+0x5bc>)
 800ae02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae06:	ed93 7b00 	vldr	d7, [r3]
 800ae0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	ed8d 7b00 	vstr	d7, [sp]
 800ae12:	da03      	bge.n	800ae1c <_dtoa_r+0x46c>
 800ae14:	9b07      	ldr	r3, [sp, #28]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f340 8101 	ble.w	800b01e <_dtoa_r+0x66e>
 800ae1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ae20:	4656      	mov	r6, sl
 800ae22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae26:	4620      	mov	r0, r4
 800ae28:	4629      	mov	r1, r5
 800ae2a:	f7f5 fd67 	bl	80008fc <__aeabi_ddiv>
 800ae2e:	f7f5 feeb 	bl	8000c08 <__aeabi_d2iz>
 800ae32:	4680      	mov	r8, r0
 800ae34:	f7f5 fbce 	bl	80005d4 <__aeabi_i2d>
 800ae38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae3c:	f7f5 fc34 	bl	80006a8 <__aeabi_dmul>
 800ae40:	4602      	mov	r2, r0
 800ae42:	460b      	mov	r3, r1
 800ae44:	4620      	mov	r0, r4
 800ae46:	4629      	mov	r1, r5
 800ae48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ae4c:	f7f5 fa74 	bl	8000338 <__aeabi_dsub>
 800ae50:	f806 4b01 	strb.w	r4, [r6], #1
 800ae54:	9d07      	ldr	r5, [sp, #28]
 800ae56:	eba6 040a 	sub.w	r4, r6, sl
 800ae5a:	42a5      	cmp	r5, r4
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	460b      	mov	r3, r1
 800ae60:	f040 8117 	bne.w	800b092 <_dtoa_r+0x6e2>
 800ae64:	f7f5 fa6a 	bl	800033c <__adddf3>
 800ae68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	460d      	mov	r5, r1
 800ae70:	f7f5 feaa 	bl	8000bc8 <__aeabi_dcmpgt>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	f040 80f9 	bne.w	800b06c <_dtoa_r+0x6bc>
 800ae7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae7e:	4620      	mov	r0, r4
 800ae80:	4629      	mov	r1, r5
 800ae82:	f7f5 fe79 	bl	8000b78 <__aeabi_dcmpeq>
 800ae86:	b118      	cbz	r0, 800ae90 <_dtoa_r+0x4e0>
 800ae88:	f018 0f01 	tst.w	r8, #1
 800ae8c:	f040 80ee 	bne.w	800b06c <_dtoa_r+0x6bc>
 800ae90:	4649      	mov	r1, r9
 800ae92:	4658      	mov	r0, fp
 800ae94:	f000 fc90 	bl	800b7b8 <_Bfree>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	7033      	strb	r3, [r6, #0]
 800ae9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae9e:	3701      	adds	r7, #1
 800aea0:	601f      	str	r7, [r3, #0]
 800aea2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f000 831d 	beq.w	800b4e4 <_dtoa_r+0xb34>
 800aeaa:	601e      	str	r6, [r3, #0]
 800aeac:	e31a      	b.n	800b4e4 <_dtoa_r+0xb34>
 800aeae:	07e2      	lsls	r2, r4, #31
 800aeb0:	d505      	bpl.n	800aebe <_dtoa_r+0x50e>
 800aeb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aeb6:	f7f5 fbf7 	bl	80006a8 <__aeabi_dmul>
 800aeba:	3601      	adds	r6, #1
 800aebc:	2301      	movs	r3, #1
 800aebe:	1064      	asrs	r4, r4, #1
 800aec0:	3508      	adds	r5, #8
 800aec2:	e73f      	b.n	800ad44 <_dtoa_r+0x394>
 800aec4:	2602      	movs	r6, #2
 800aec6:	e742      	b.n	800ad4e <_dtoa_r+0x39e>
 800aec8:	9c07      	ldr	r4, [sp, #28]
 800aeca:	9704      	str	r7, [sp, #16]
 800aecc:	e761      	b.n	800ad92 <_dtoa_r+0x3e2>
 800aece:	4b27      	ldr	r3, [pc, #156]	@ (800af6c <_dtoa_r+0x5bc>)
 800aed0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aed2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aed6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aeda:	4454      	add	r4, sl
 800aedc:	2900      	cmp	r1, #0
 800aede:	d053      	beq.n	800af88 <_dtoa_r+0x5d8>
 800aee0:	4928      	ldr	r1, [pc, #160]	@ (800af84 <_dtoa_r+0x5d4>)
 800aee2:	2000      	movs	r0, #0
 800aee4:	f7f5 fd0a 	bl	80008fc <__aeabi_ddiv>
 800aee8:	4633      	mov	r3, r6
 800aeea:	462a      	mov	r2, r5
 800aeec:	f7f5 fa24 	bl	8000338 <__aeabi_dsub>
 800aef0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aef4:	4656      	mov	r6, sl
 800aef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aefa:	f7f5 fe85 	bl	8000c08 <__aeabi_d2iz>
 800aefe:	4605      	mov	r5, r0
 800af00:	f7f5 fb68 	bl	80005d4 <__aeabi_i2d>
 800af04:	4602      	mov	r2, r0
 800af06:	460b      	mov	r3, r1
 800af08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af0c:	f7f5 fa14 	bl	8000338 <__aeabi_dsub>
 800af10:	3530      	adds	r5, #48	@ 0x30
 800af12:	4602      	mov	r2, r0
 800af14:	460b      	mov	r3, r1
 800af16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af1a:	f806 5b01 	strb.w	r5, [r6], #1
 800af1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af22:	f7f5 fe33 	bl	8000b8c <__aeabi_dcmplt>
 800af26:	2800      	cmp	r0, #0
 800af28:	d171      	bne.n	800b00e <_dtoa_r+0x65e>
 800af2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af2e:	4911      	ldr	r1, [pc, #68]	@ (800af74 <_dtoa_r+0x5c4>)
 800af30:	2000      	movs	r0, #0
 800af32:	f7f5 fa01 	bl	8000338 <__aeabi_dsub>
 800af36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af3a:	f7f5 fe27 	bl	8000b8c <__aeabi_dcmplt>
 800af3e:	2800      	cmp	r0, #0
 800af40:	f040 8095 	bne.w	800b06e <_dtoa_r+0x6be>
 800af44:	42a6      	cmp	r6, r4
 800af46:	f43f af50 	beq.w	800adea <_dtoa_r+0x43a>
 800af4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af4e:	4b0a      	ldr	r3, [pc, #40]	@ (800af78 <_dtoa_r+0x5c8>)
 800af50:	2200      	movs	r2, #0
 800af52:	f7f5 fba9 	bl	80006a8 <__aeabi_dmul>
 800af56:	4b08      	ldr	r3, [pc, #32]	@ (800af78 <_dtoa_r+0x5c8>)
 800af58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af5c:	2200      	movs	r2, #0
 800af5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af62:	f7f5 fba1 	bl	80006a8 <__aeabi_dmul>
 800af66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af6a:	e7c4      	b.n	800aef6 <_dtoa_r+0x546>
 800af6c:	0800cc78 	.word	0x0800cc78
 800af70:	0800cc50 	.word	0x0800cc50
 800af74:	3ff00000 	.word	0x3ff00000
 800af78:	40240000 	.word	0x40240000
 800af7c:	401c0000 	.word	0x401c0000
 800af80:	40140000 	.word	0x40140000
 800af84:	3fe00000 	.word	0x3fe00000
 800af88:	4631      	mov	r1, r6
 800af8a:	4628      	mov	r0, r5
 800af8c:	f7f5 fb8c 	bl	80006a8 <__aeabi_dmul>
 800af90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af94:	9415      	str	r4, [sp, #84]	@ 0x54
 800af96:	4656      	mov	r6, sl
 800af98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af9c:	f7f5 fe34 	bl	8000c08 <__aeabi_d2iz>
 800afa0:	4605      	mov	r5, r0
 800afa2:	f7f5 fb17 	bl	80005d4 <__aeabi_i2d>
 800afa6:	4602      	mov	r2, r0
 800afa8:	460b      	mov	r3, r1
 800afaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afae:	f7f5 f9c3 	bl	8000338 <__aeabi_dsub>
 800afb2:	3530      	adds	r5, #48	@ 0x30
 800afb4:	f806 5b01 	strb.w	r5, [r6], #1
 800afb8:	4602      	mov	r2, r0
 800afba:	460b      	mov	r3, r1
 800afbc:	42a6      	cmp	r6, r4
 800afbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afc2:	f04f 0200 	mov.w	r2, #0
 800afc6:	d124      	bne.n	800b012 <_dtoa_r+0x662>
 800afc8:	4bac      	ldr	r3, [pc, #688]	@ (800b27c <_dtoa_r+0x8cc>)
 800afca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800afce:	f7f5 f9b5 	bl	800033c <__adddf3>
 800afd2:	4602      	mov	r2, r0
 800afd4:	460b      	mov	r3, r1
 800afd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afda:	f7f5 fdf5 	bl	8000bc8 <__aeabi_dcmpgt>
 800afde:	2800      	cmp	r0, #0
 800afe0:	d145      	bne.n	800b06e <_dtoa_r+0x6be>
 800afe2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800afe6:	49a5      	ldr	r1, [pc, #660]	@ (800b27c <_dtoa_r+0x8cc>)
 800afe8:	2000      	movs	r0, #0
 800afea:	f7f5 f9a5 	bl	8000338 <__aeabi_dsub>
 800afee:	4602      	mov	r2, r0
 800aff0:	460b      	mov	r3, r1
 800aff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aff6:	f7f5 fdc9 	bl	8000b8c <__aeabi_dcmplt>
 800affa:	2800      	cmp	r0, #0
 800affc:	f43f aef5 	beq.w	800adea <_dtoa_r+0x43a>
 800b000:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b002:	1e73      	subs	r3, r6, #1
 800b004:	9315      	str	r3, [sp, #84]	@ 0x54
 800b006:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b00a:	2b30      	cmp	r3, #48	@ 0x30
 800b00c:	d0f8      	beq.n	800b000 <_dtoa_r+0x650>
 800b00e:	9f04      	ldr	r7, [sp, #16]
 800b010:	e73e      	b.n	800ae90 <_dtoa_r+0x4e0>
 800b012:	4b9b      	ldr	r3, [pc, #620]	@ (800b280 <_dtoa_r+0x8d0>)
 800b014:	f7f5 fb48 	bl	80006a8 <__aeabi_dmul>
 800b018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b01c:	e7bc      	b.n	800af98 <_dtoa_r+0x5e8>
 800b01e:	d10c      	bne.n	800b03a <_dtoa_r+0x68a>
 800b020:	4b98      	ldr	r3, [pc, #608]	@ (800b284 <_dtoa_r+0x8d4>)
 800b022:	2200      	movs	r2, #0
 800b024:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b028:	f7f5 fb3e 	bl	80006a8 <__aeabi_dmul>
 800b02c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b030:	f7f5 fdc0 	bl	8000bb4 <__aeabi_dcmpge>
 800b034:	2800      	cmp	r0, #0
 800b036:	f000 8157 	beq.w	800b2e8 <_dtoa_r+0x938>
 800b03a:	2400      	movs	r4, #0
 800b03c:	4625      	mov	r5, r4
 800b03e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b040:	43db      	mvns	r3, r3
 800b042:	9304      	str	r3, [sp, #16]
 800b044:	4656      	mov	r6, sl
 800b046:	2700      	movs	r7, #0
 800b048:	4621      	mov	r1, r4
 800b04a:	4658      	mov	r0, fp
 800b04c:	f000 fbb4 	bl	800b7b8 <_Bfree>
 800b050:	2d00      	cmp	r5, #0
 800b052:	d0dc      	beq.n	800b00e <_dtoa_r+0x65e>
 800b054:	b12f      	cbz	r7, 800b062 <_dtoa_r+0x6b2>
 800b056:	42af      	cmp	r7, r5
 800b058:	d003      	beq.n	800b062 <_dtoa_r+0x6b2>
 800b05a:	4639      	mov	r1, r7
 800b05c:	4658      	mov	r0, fp
 800b05e:	f000 fbab 	bl	800b7b8 <_Bfree>
 800b062:	4629      	mov	r1, r5
 800b064:	4658      	mov	r0, fp
 800b066:	f000 fba7 	bl	800b7b8 <_Bfree>
 800b06a:	e7d0      	b.n	800b00e <_dtoa_r+0x65e>
 800b06c:	9704      	str	r7, [sp, #16]
 800b06e:	4633      	mov	r3, r6
 800b070:	461e      	mov	r6, r3
 800b072:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b076:	2a39      	cmp	r2, #57	@ 0x39
 800b078:	d107      	bne.n	800b08a <_dtoa_r+0x6da>
 800b07a:	459a      	cmp	sl, r3
 800b07c:	d1f8      	bne.n	800b070 <_dtoa_r+0x6c0>
 800b07e:	9a04      	ldr	r2, [sp, #16]
 800b080:	3201      	adds	r2, #1
 800b082:	9204      	str	r2, [sp, #16]
 800b084:	2230      	movs	r2, #48	@ 0x30
 800b086:	f88a 2000 	strb.w	r2, [sl]
 800b08a:	781a      	ldrb	r2, [r3, #0]
 800b08c:	3201      	adds	r2, #1
 800b08e:	701a      	strb	r2, [r3, #0]
 800b090:	e7bd      	b.n	800b00e <_dtoa_r+0x65e>
 800b092:	4b7b      	ldr	r3, [pc, #492]	@ (800b280 <_dtoa_r+0x8d0>)
 800b094:	2200      	movs	r2, #0
 800b096:	f7f5 fb07 	bl	80006a8 <__aeabi_dmul>
 800b09a:	2200      	movs	r2, #0
 800b09c:	2300      	movs	r3, #0
 800b09e:	4604      	mov	r4, r0
 800b0a0:	460d      	mov	r5, r1
 800b0a2:	f7f5 fd69 	bl	8000b78 <__aeabi_dcmpeq>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	f43f aebb 	beq.w	800ae22 <_dtoa_r+0x472>
 800b0ac:	e6f0      	b.n	800ae90 <_dtoa_r+0x4e0>
 800b0ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b0b0:	2a00      	cmp	r2, #0
 800b0b2:	f000 80db 	beq.w	800b26c <_dtoa_r+0x8bc>
 800b0b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0b8:	2a01      	cmp	r2, #1
 800b0ba:	f300 80bf 	bgt.w	800b23c <_dtoa_r+0x88c>
 800b0be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b0c0:	2a00      	cmp	r2, #0
 800b0c2:	f000 80b7 	beq.w	800b234 <_dtoa_r+0x884>
 800b0c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b0ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b0cc:	4646      	mov	r6, r8
 800b0ce:	9a08      	ldr	r2, [sp, #32]
 800b0d0:	2101      	movs	r1, #1
 800b0d2:	441a      	add	r2, r3
 800b0d4:	4658      	mov	r0, fp
 800b0d6:	4498      	add	r8, r3
 800b0d8:	9208      	str	r2, [sp, #32]
 800b0da:	f000 fc21 	bl	800b920 <__i2b>
 800b0de:	4605      	mov	r5, r0
 800b0e0:	b15e      	cbz	r6, 800b0fa <_dtoa_r+0x74a>
 800b0e2:	9b08      	ldr	r3, [sp, #32]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	dd08      	ble.n	800b0fa <_dtoa_r+0x74a>
 800b0e8:	42b3      	cmp	r3, r6
 800b0ea:	9a08      	ldr	r2, [sp, #32]
 800b0ec:	bfa8      	it	ge
 800b0ee:	4633      	movge	r3, r6
 800b0f0:	eba8 0803 	sub.w	r8, r8, r3
 800b0f4:	1af6      	subs	r6, r6, r3
 800b0f6:	1ad3      	subs	r3, r2, r3
 800b0f8:	9308      	str	r3, [sp, #32]
 800b0fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0fc:	b1f3      	cbz	r3, 800b13c <_dtoa_r+0x78c>
 800b0fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b100:	2b00      	cmp	r3, #0
 800b102:	f000 80b7 	beq.w	800b274 <_dtoa_r+0x8c4>
 800b106:	b18c      	cbz	r4, 800b12c <_dtoa_r+0x77c>
 800b108:	4629      	mov	r1, r5
 800b10a:	4622      	mov	r2, r4
 800b10c:	4658      	mov	r0, fp
 800b10e:	f000 fcc7 	bl	800baa0 <__pow5mult>
 800b112:	464a      	mov	r2, r9
 800b114:	4601      	mov	r1, r0
 800b116:	4605      	mov	r5, r0
 800b118:	4658      	mov	r0, fp
 800b11a:	f000 fc17 	bl	800b94c <__multiply>
 800b11e:	4649      	mov	r1, r9
 800b120:	9004      	str	r0, [sp, #16]
 800b122:	4658      	mov	r0, fp
 800b124:	f000 fb48 	bl	800b7b8 <_Bfree>
 800b128:	9b04      	ldr	r3, [sp, #16]
 800b12a:	4699      	mov	r9, r3
 800b12c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b12e:	1b1a      	subs	r2, r3, r4
 800b130:	d004      	beq.n	800b13c <_dtoa_r+0x78c>
 800b132:	4649      	mov	r1, r9
 800b134:	4658      	mov	r0, fp
 800b136:	f000 fcb3 	bl	800baa0 <__pow5mult>
 800b13a:	4681      	mov	r9, r0
 800b13c:	2101      	movs	r1, #1
 800b13e:	4658      	mov	r0, fp
 800b140:	f000 fbee 	bl	800b920 <__i2b>
 800b144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b146:	4604      	mov	r4, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f000 81cf 	beq.w	800b4ec <_dtoa_r+0xb3c>
 800b14e:	461a      	mov	r2, r3
 800b150:	4601      	mov	r1, r0
 800b152:	4658      	mov	r0, fp
 800b154:	f000 fca4 	bl	800baa0 <__pow5mult>
 800b158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	4604      	mov	r4, r0
 800b15e:	f300 8095 	bgt.w	800b28c <_dtoa_r+0x8dc>
 800b162:	9b02      	ldr	r3, [sp, #8]
 800b164:	2b00      	cmp	r3, #0
 800b166:	f040 8087 	bne.w	800b278 <_dtoa_r+0x8c8>
 800b16a:	9b03      	ldr	r3, [sp, #12]
 800b16c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b170:	2b00      	cmp	r3, #0
 800b172:	f040 8089 	bne.w	800b288 <_dtoa_r+0x8d8>
 800b176:	9b03      	ldr	r3, [sp, #12]
 800b178:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b17c:	0d1b      	lsrs	r3, r3, #20
 800b17e:	051b      	lsls	r3, r3, #20
 800b180:	b12b      	cbz	r3, 800b18e <_dtoa_r+0x7de>
 800b182:	9b08      	ldr	r3, [sp, #32]
 800b184:	3301      	adds	r3, #1
 800b186:	9308      	str	r3, [sp, #32]
 800b188:	f108 0801 	add.w	r8, r8, #1
 800b18c:	2301      	movs	r3, #1
 800b18e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b190:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b192:	2b00      	cmp	r3, #0
 800b194:	f000 81b0 	beq.w	800b4f8 <_dtoa_r+0xb48>
 800b198:	6923      	ldr	r3, [r4, #16]
 800b19a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b19e:	6918      	ldr	r0, [r3, #16]
 800b1a0:	f000 fb72 	bl	800b888 <__hi0bits>
 800b1a4:	f1c0 0020 	rsb	r0, r0, #32
 800b1a8:	9b08      	ldr	r3, [sp, #32]
 800b1aa:	4418      	add	r0, r3
 800b1ac:	f010 001f 	ands.w	r0, r0, #31
 800b1b0:	d077      	beq.n	800b2a2 <_dtoa_r+0x8f2>
 800b1b2:	f1c0 0320 	rsb	r3, r0, #32
 800b1b6:	2b04      	cmp	r3, #4
 800b1b8:	dd6b      	ble.n	800b292 <_dtoa_r+0x8e2>
 800b1ba:	9b08      	ldr	r3, [sp, #32]
 800b1bc:	f1c0 001c 	rsb	r0, r0, #28
 800b1c0:	4403      	add	r3, r0
 800b1c2:	4480      	add	r8, r0
 800b1c4:	4406      	add	r6, r0
 800b1c6:	9308      	str	r3, [sp, #32]
 800b1c8:	f1b8 0f00 	cmp.w	r8, #0
 800b1cc:	dd05      	ble.n	800b1da <_dtoa_r+0x82a>
 800b1ce:	4649      	mov	r1, r9
 800b1d0:	4642      	mov	r2, r8
 800b1d2:	4658      	mov	r0, fp
 800b1d4:	f000 fcbe 	bl	800bb54 <__lshift>
 800b1d8:	4681      	mov	r9, r0
 800b1da:	9b08      	ldr	r3, [sp, #32]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	dd05      	ble.n	800b1ec <_dtoa_r+0x83c>
 800b1e0:	4621      	mov	r1, r4
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	4658      	mov	r0, fp
 800b1e6:	f000 fcb5 	bl	800bb54 <__lshift>
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d059      	beq.n	800b2a6 <_dtoa_r+0x8f6>
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	4648      	mov	r0, r9
 800b1f6:	f000 fd19 	bl	800bc2c <__mcmp>
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	da53      	bge.n	800b2a6 <_dtoa_r+0x8f6>
 800b1fe:	1e7b      	subs	r3, r7, #1
 800b200:	9304      	str	r3, [sp, #16]
 800b202:	4649      	mov	r1, r9
 800b204:	2300      	movs	r3, #0
 800b206:	220a      	movs	r2, #10
 800b208:	4658      	mov	r0, fp
 800b20a:	f000 faf7 	bl	800b7fc <__multadd>
 800b20e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b210:	4681      	mov	r9, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	f000 8172 	beq.w	800b4fc <_dtoa_r+0xb4c>
 800b218:	2300      	movs	r3, #0
 800b21a:	4629      	mov	r1, r5
 800b21c:	220a      	movs	r2, #10
 800b21e:	4658      	mov	r0, fp
 800b220:	f000 faec 	bl	800b7fc <__multadd>
 800b224:	9b00      	ldr	r3, [sp, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	4605      	mov	r5, r0
 800b22a:	dc67      	bgt.n	800b2fc <_dtoa_r+0x94c>
 800b22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b22e:	2b02      	cmp	r3, #2
 800b230:	dc41      	bgt.n	800b2b6 <_dtoa_r+0x906>
 800b232:	e063      	b.n	800b2fc <_dtoa_r+0x94c>
 800b234:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b236:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b23a:	e746      	b.n	800b0ca <_dtoa_r+0x71a>
 800b23c:	9b07      	ldr	r3, [sp, #28]
 800b23e:	1e5c      	subs	r4, r3, #1
 800b240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b242:	42a3      	cmp	r3, r4
 800b244:	bfbf      	itttt	lt
 800b246:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b248:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b24a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b24c:	1ae3      	sublt	r3, r4, r3
 800b24e:	bfb4      	ite	lt
 800b250:	18d2      	addlt	r2, r2, r3
 800b252:	1b1c      	subge	r4, r3, r4
 800b254:	9b07      	ldr	r3, [sp, #28]
 800b256:	bfbc      	itt	lt
 800b258:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b25a:	2400      	movlt	r4, #0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	bfb5      	itete	lt
 800b260:	eba8 0603 	sublt.w	r6, r8, r3
 800b264:	9b07      	ldrge	r3, [sp, #28]
 800b266:	2300      	movlt	r3, #0
 800b268:	4646      	movge	r6, r8
 800b26a:	e730      	b.n	800b0ce <_dtoa_r+0x71e>
 800b26c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b26e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b270:	4646      	mov	r6, r8
 800b272:	e735      	b.n	800b0e0 <_dtoa_r+0x730>
 800b274:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b276:	e75c      	b.n	800b132 <_dtoa_r+0x782>
 800b278:	2300      	movs	r3, #0
 800b27a:	e788      	b.n	800b18e <_dtoa_r+0x7de>
 800b27c:	3fe00000 	.word	0x3fe00000
 800b280:	40240000 	.word	0x40240000
 800b284:	40140000 	.word	0x40140000
 800b288:	9b02      	ldr	r3, [sp, #8]
 800b28a:	e780      	b.n	800b18e <_dtoa_r+0x7de>
 800b28c:	2300      	movs	r3, #0
 800b28e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b290:	e782      	b.n	800b198 <_dtoa_r+0x7e8>
 800b292:	d099      	beq.n	800b1c8 <_dtoa_r+0x818>
 800b294:	9a08      	ldr	r2, [sp, #32]
 800b296:	331c      	adds	r3, #28
 800b298:	441a      	add	r2, r3
 800b29a:	4498      	add	r8, r3
 800b29c:	441e      	add	r6, r3
 800b29e:	9208      	str	r2, [sp, #32]
 800b2a0:	e792      	b.n	800b1c8 <_dtoa_r+0x818>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	e7f6      	b.n	800b294 <_dtoa_r+0x8e4>
 800b2a6:	9b07      	ldr	r3, [sp, #28]
 800b2a8:	9704      	str	r7, [sp, #16]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	dc20      	bgt.n	800b2f0 <_dtoa_r+0x940>
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2b2:	2b02      	cmp	r3, #2
 800b2b4:	dd1e      	ble.n	800b2f4 <_dtoa_r+0x944>
 800b2b6:	9b00      	ldr	r3, [sp, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	f47f aec0 	bne.w	800b03e <_dtoa_r+0x68e>
 800b2be:	4621      	mov	r1, r4
 800b2c0:	2205      	movs	r2, #5
 800b2c2:	4658      	mov	r0, fp
 800b2c4:	f000 fa9a 	bl	800b7fc <__multadd>
 800b2c8:	4601      	mov	r1, r0
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	4648      	mov	r0, r9
 800b2ce:	f000 fcad 	bl	800bc2c <__mcmp>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	f77f aeb3 	ble.w	800b03e <_dtoa_r+0x68e>
 800b2d8:	4656      	mov	r6, sl
 800b2da:	2331      	movs	r3, #49	@ 0x31
 800b2dc:	f806 3b01 	strb.w	r3, [r6], #1
 800b2e0:	9b04      	ldr	r3, [sp, #16]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	9304      	str	r3, [sp, #16]
 800b2e6:	e6ae      	b.n	800b046 <_dtoa_r+0x696>
 800b2e8:	9c07      	ldr	r4, [sp, #28]
 800b2ea:	9704      	str	r7, [sp, #16]
 800b2ec:	4625      	mov	r5, r4
 800b2ee:	e7f3      	b.n	800b2d8 <_dtoa_r+0x928>
 800b2f0:	9b07      	ldr	r3, [sp, #28]
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	f000 8104 	beq.w	800b504 <_dtoa_r+0xb54>
 800b2fc:	2e00      	cmp	r6, #0
 800b2fe:	dd05      	ble.n	800b30c <_dtoa_r+0x95c>
 800b300:	4629      	mov	r1, r5
 800b302:	4632      	mov	r2, r6
 800b304:	4658      	mov	r0, fp
 800b306:	f000 fc25 	bl	800bb54 <__lshift>
 800b30a:	4605      	mov	r5, r0
 800b30c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d05a      	beq.n	800b3c8 <_dtoa_r+0xa18>
 800b312:	6869      	ldr	r1, [r5, #4]
 800b314:	4658      	mov	r0, fp
 800b316:	f000 fa0f 	bl	800b738 <_Balloc>
 800b31a:	4606      	mov	r6, r0
 800b31c:	b928      	cbnz	r0, 800b32a <_dtoa_r+0x97a>
 800b31e:	4b84      	ldr	r3, [pc, #528]	@ (800b530 <_dtoa_r+0xb80>)
 800b320:	4602      	mov	r2, r0
 800b322:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b326:	f7ff bb5a 	b.w	800a9de <_dtoa_r+0x2e>
 800b32a:	692a      	ldr	r2, [r5, #16]
 800b32c:	3202      	adds	r2, #2
 800b32e:	0092      	lsls	r2, r2, #2
 800b330:	f105 010c 	add.w	r1, r5, #12
 800b334:	300c      	adds	r0, #12
 800b336:	f7ff faa4 	bl	800a882 <memcpy>
 800b33a:	2201      	movs	r2, #1
 800b33c:	4631      	mov	r1, r6
 800b33e:	4658      	mov	r0, fp
 800b340:	f000 fc08 	bl	800bb54 <__lshift>
 800b344:	f10a 0301 	add.w	r3, sl, #1
 800b348:	9307      	str	r3, [sp, #28]
 800b34a:	9b00      	ldr	r3, [sp, #0]
 800b34c:	4453      	add	r3, sl
 800b34e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b350:	9b02      	ldr	r3, [sp, #8]
 800b352:	f003 0301 	and.w	r3, r3, #1
 800b356:	462f      	mov	r7, r5
 800b358:	930a      	str	r3, [sp, #40]	@ 0x28
 800b35a:	4605      	mov	r5, r0
 800b35c:	9b07      	ldr	r3, [sp, #28]
 800b35e:	4621      	mov	r1, r4
 800b360:	3b01      	subs	r3, #1
 800b362:	4648      	mov	r0, r9
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	f7ff fa9a 	bl	800a89e <quorem>
 800b36a:	4639      	mov	r1, r7
 800b36c:	9002      	str	r0, [sp, #8]
 800b36e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b372:	4648      	mov	r0, r9
 800b374:	f000 fc5a 	bl	800bc2c <__mcmp>
 800b378:	462a      	mov	r2, r5
 800b37a:	9008      	str	r0, [sp, #32]
 800b37c:	4621      	mov	r1, r4
 800b37e:	4658      	mov	r0, fp
 800b380:	f000 fc70 	bl	800bc64 <__mdiff>
 800b384:	68c2      	ldr	r2, [r0, #12]
 800b386:	4606      	mov	r6, r0
 800b388:	bb02      	cbnz	r2, 800b3cc <_dtoa_r+0xa1c>
 800b38a:	4601      	mov	r1, r0
 800b38c:	4648      	mov	r0, r9
 800b38e:	f000 fc4d 	bl	800bc2c <__mcmp>
 800b392:	4602      	mov	r2, r0
 800b394:	4631      	mov	r1, r6
 800b396:	4658      	mov	r0, fp
 800b398:	920e      	str	r2, [sp, #56]	@ 0x38
 800b39a:	f000 fa0d 	bl	800b7b8 <_Bfree>
 800b39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3a2:	9e07      	ldr	r6, [sp, #28]
 800b3a4:	ea43 0102 	orr.w	r1, r3, r2
 800b3a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3aa:	4319      	orrs	r1, r3
 800b3ac:	d110      	bne.n	800b3d0 <_dtoa_r+0xa20>
 800b3ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b3b2:	d029      	beq.n	800b408 <_dtoa_r+0xa58>
 800b3b4:	9b08      	ldr	r3, [sp, #32]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	dd02      	ble.n	800b3c0 <_dtoa_r+0xa10>
 800b3ba:	9b02      	ldr	r3, [sp, #8]
 800b3bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b3c0:	9b00      	ldr	r3, [sp, #0]
 800b3c2:	f883 8000 	strb.w	r8, [r3]
 800b3c6:	e63f      	b.n	800b048 <_dtoa_r+0x698>
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	e7bb      	b.n	800b344 <_dtoa_r+0x994>
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	e7e1      	b.n	800b394 <_dtoa_r+0x9e4>
 800b3d0:	9b08      	ldr	r3, [sp, #32]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	db04      	blt.n	800b3e0 <_dtoa_r+0xa30>
 800b3d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b3d8:	430b      	orrs	r3, r1
 800b3da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b3dc:	430b      	orrs	r3, r1
 800b3de:	d120      	bne.n	800b422 <_dtoa_r+0xa72>
 800b3e0:	2a00      	cmp	r2, #0
 800b3e2:	dded      	ble.n	800b3c0 <_dtoa_r+0xa10>
 800b3e4:	4649      	mov	r1, r9
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	4658      	mov	r0, fp
 800b3ea:	f000 fbb3 	bl	800bb54 <__lshift>
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	4681      	mov	r9, r0
 800b3f2:	f000 fc1b 	bl	800bc2c <__mcmp>
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	dc03      	bgt.n	800b402 <_dtoa_r+0xa52>
 800b3fa:	d1e1      	bne.n	800b3c0 <_dtoa_r+0xa10>
 800b3fc:	f018 0f01 	tst.w	r8, #1
 800b400:	d0de      	beq.n	800b3c0 <_dtoa_r+0xa10>
 800b402:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b406:	d1d8      	bne.n	800b3ba <_dtoa_r+0xa0a>
 800b408:	9a00      	ldr	r2, [sp, #0]
 800b40a:	2339      	movs	r3, #57	@ 0x39
 800b40c:	7013      	strb	r3, [r2, #0]
 800b40e:	4633      	mov	r3, r6
 800b410:	461e      	mov	r6, r3
 800b412:	3b01      	subs	r3, #1
 800b414:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b418:	2a39      	cmp	r2, #57	@ 0x39
 800b41a:	d052      	beq.n	800b4c2 <_dtoa_r+0xb12>
 800b41c:	3201      	adds	r2, #1
 800b41e:	701a      	strb	r2, [r3, #0]
 800b420:	e612      	b.n	800b048 <_dtoa_r+0x698>
 800b422:	2a00      	cmp	r2, #0
 800b424:	dd07      	ble.n	800b436 <_dtoa_r+0xa86>
 800b426:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b42a:	d0ed      	beq.n	800b408 <_dtoa_r+0xa58>
 800b42c:	9a00      	ldr	r2, [sp, #0]
 800b42e:	f108 0301 	add.w	r3, r8, #1
 800b432:	7013      	strb	r3, [r2, #0]
 800b434:	e608      	b.n	800b048 <_dtoa_r+0x698>
 800b436:	9b07      	ldr	r3, [sp, #28]
 800b438:	9a07      	ldr	r2, [sp, #28]
 800b43a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b43e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b440:	4293      	cmp	r3, r2
 800b442:	d028      	beq.n	800b496 <_dtoa_r+0xae6>
 800b444:	4649      	mov	r1, r9
 800b446:	2300      	movs	r3, #0
 800b448:	220a      	movs	r2, #10
 800b44a:	4658      	mov	r0, fp
 800b44c:	f000 f9d6 	bl	800b7fc <__multadd>
 800b450:	42af      	cmp	r7, r5
 800b452:	4681      	mov	r9, r0
 800b454:	f04f 0300 	mov.w	r3, #0
 800b458:	f04f 020a 	mov.w	r2, #10
 800b45c:	4639      	mov	r1, r7
 800b45e:	4658      	mov	r0, fp
 800b460:	d107      	bne.n	800b472 <_dtoa_r+0xac2>
 800b462:	f000 f9cb 	bl	800b7fc <__multadd>
 800b466:	4607      	mov	r7, r0
 800b468:	4605      	mov	r5, r0
 800b46a:	9b07      	ldr	r3, [sp, #28]
 800b46c:	3301      	adds	r3, #1
 800b46e:	9307      	str	r3, [sp, #28]
 800b470:	e774      	b.n	800b35c <_dtoa_r+0x9ac>
 800b472:	f000 f9c3 	bl	800b7fc <__multadd>
 800b476:	4629      	mov	r1, r5
 800b478:	4607      	mov	r7, r0
 800b47a:	2300      	movs	r3, #0
 800b47c:	220a      	movs	r2, #10
 800b47e:	4658      	mov	r0, fp
 800b480:	f000 f9bc 	bl	800b7fc <__multadd>
 800b484:	4605      	mov	r5, r0
 800b486:	e7f0      	b.n	800b46a <_dtoa_r+0xaba>
 800b488:	9b00      	ldr	r3, [sp, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	bfcc      	ite	gt
 800b48e:	461e      	movgt	r6, r3
 800b490:	2601      	movle	r6, #1
 800b492:	4456      	add	r6, sl
 800b494:	2700      	movs	r7, #0
 800b496:	4649      	mov	r1, r9
 800b498:	2201      	movs	r2, #1
 800b49a:	4658      	mov	r0, fp
 800b49c:	f000 fb5a 	bl	800bb54 <__lshift>
 800b4a0:	4621      	mov	r1, r4
 800b4a2:	4681      	mov	r9, r0
 800b4a4:	f000 fbc2 	bl	800bc2c <__mcmp>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	dcb0      	bgt.n	800b40e <_dtoa_r+0xa5e>
 800b4ac:	d102      	bne.n	800b4b4 <_dtoa_r+0xb04>
 800b4ae:	f018 0f01 	tst.w	r8, #1
 800b4b2:	d1ac      	bne.n	800b40e <_dtoa_r+0xa5e>
 800b4b4:	4633      	mov	r3, r6
 800b4b6:	461e      	mov	r6, r3
 800b4b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4bc:	2a30      	cmp	r2, #48	@ 0x30
 800b4be:	d0fa      	beq.n	800b4b6 <_dtoa_r+0xb06>
 800b4c0:	e5c2      	b.n	800b048 <_dtoa_r+0x698>
 800b4c2:	459a      	cmp	sl, r3
 800b4c4:	d1a4      	bne.n	800b410 <_dtoa_r+0xa60>
 800b4c6:	9b04      	ldr	r3, [sp, #16]
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	9304      	str	r3, [sp, #16]
 800b4cc:	2331      	movs	r3, #49	@ 0x31
 800b4ce:	f88a 3000 	strb.w	r3, [sl]
 800b4d2:	e5b9      	b.n	800b048 <_dtoa_r+0x698>
 800b4d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b4d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b534 <_dtoa_r+0xb84>
 800b4da:	b11b      	cbz	r3, 800b4e4 <_dtoa_r+0xb34>
 800b4dc:	f10a 0308 	add.w	r3, sl, #8
 800b4e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b4e2:	6013      	str	r3, [r2, #0]
 800b4e4:	4650      	mov	r0, sl
 800b4e6:	b019      	add	sp, #100	@ 0x64
 800b4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	f77f ae37 	ble.w	800b162 <_dtoa_r+0x7b2>
 800b4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4f8:	2001      	movs	r0, #1
 800b4fa:	e655      	b.n	800b1a8 <_dtoa_r+0x7f8>
 800b4fc:	9b00      	ldr	r3, [sp, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f77f aed6 	ble.w	800b2b0 <_dtoa_r+0x900>
 800b504:	4656      	mov	r6, sl
 800b506:	4621      	mov	r1, r4
 800b508:	4648      	mov	r0, r9
 800b50a:	f7ff f9c8 	bl	800a89e <quorem>
 800b50e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b512:	f806 8b01 	strb.w	r8, [r6], #1
 800b516:	9b00      	ldr	r3, [sp, #0]
 800b518:	eba6 020a 	sub.w	r2, r6, sl
 800b51c:	4293      	cmp	r3, r2
 800b51e:	ddb3      	ble.n	800b488 <_dtoa_r+0xad8>
 800b520:	4649      	mov	r1, r9
 800b522:	2300      	movs	r3, #0
 800b524:	220a      	movs	r2, #10
 800b526:	4658      	mov	r0, fp
 800b528:	f000 f968 	bl	800b7fc <__multadd>
 800b52c:	4681      	mov	r9, r0
 800b52e:	e7ea      	b.n	800b506 <_dtoa_r+0xb56>
 800b530:	0800cbd8 	.word	0x0800cbd8
 800b534:	0800cb5c 	.word	0x0800cb5c

0800b538 <_free_r>:
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	4605      	mov	r5, r0
 800b53c:	2900      	cmp	r1, #0
 800b53e:	d041      	beq.n	800b5c4 <_free_r+0x8c>
 800b540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b544:	1f0c      	subs	r4, r1, #4
 800b546:	2b00      	cmp	r3, #0
 800b548:	bfb8      	it	lt
 800b54a:	18e4      	addlt	r4, r4, r3
 800b54c:	f000 f8e8 	bl	800b720 <__malloc_lock>
 800b550:	4a1d      	ldr	r2, [pc, #116]	@ (800b5c8 <_free_r+0x90>)
 800b552:	6813      	ldr	r3, [r2, #0]
 800b554:	b933      	cbnz	r3, 800b564 <_free_r+0x2c>
 800b556:	6063      	str	r3, [r4, #4]
 800b558:	6014      	str	r4, [r2, #0]
 800b55a:	4628      	mov	r0, r5
 800b55c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b560:	f000 b8e4 	b.w	800b72c <__malloc_unlock>
 800b564:	42a3      	cmp	r3, r4
 800b566:	d908      	bls.n	800b57a <_free_r+0x42>
 800b568:	6820      	ldr	r0, [r4, #0]
 800b56a:	1821      	adds	r1, r4, r0
 800b56c:	428b      	cmp	r3, r1
 800b56e:	bf01      	itttt	eq
 800b570:	6819      	ldreq	r1, [r3, #0]
 800b572:	685b      	ldreq	r3, [r3, #4]
 800b574:	1809      	addeq	r1, r1, r0
 800b576:	6021      	streq	r1, [r4, #0]
 800b578:	e7ed      	b.n	800b556 <_free_r+0x1e>
 800b57a:	461a      	mov	r2, r3
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	b10b      	cbz	r3, 800b584 <_free_r+0x4c>
 800b580:	42a3      	cmp	r3, r4
 800b582:	d9fa      	bls.n	800b57a <_free_r+0x42>
 800b584:	6811      	ldr	r1, [r2, #0]
 800b586:	1850      	adds	r0, r2, r1
 800b588:	42a0      	cmp	r0, r4
 800b58a:	d10b      	bne.n	800b5a4 <_free_r+0x6c>
 800b58c:	6820      	ldr	r0, [r4, #0]
 800b58e:	4401      	add	r1, r0
 800b590:	1850      	adds	r0, r2, r1
 800b592:	4283      	cmp	r3, r0
 800b594:	6011      	str	r1, [r2, #0]
 800b596:	d1e0      	bne.n	800b55a <_free_r+0x22>
 800b598:	6818      	ldr	r0, [r3, #0]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	6053      	str	r3, [r2, #4]
 800b59e:	4408      	add	r0, r1
 800b5a0:	6010      	str	r0, [r2, #0]
 800b5a2:	e7da      	b.n	800b55a <_free_r+0x22>
 800b5a4:	d902      	bls.n	800b5ac <_free_r+0x74>
 800b5a6:	230c      	movs	r3, #12
 800b5a8:	602b      	str	r3, [r5, #0]
 800b5aa:	e7d6      	b.n	800b55a <_free_r+0x22>
 800b5ac:	6820      	ldr	r0, [r4, #0]
 800b5ae:	1821      	adds	r1, r4, r0
 800b5b0:	428b      	cmp	r3, r1
 800b5b2:	bf04      	itt	eq
 800b5b4:	6819      	ldreq	r1, [r3, #0]
 800b5b6:	685b      	ldreq	r3, [r3, #4]
 800b5b8:	6063      	str	r3, [r4, #4]
 800b5ba:	bf04      	itt	eq
 800b5bc:	1809      	addeq	r1, r1, r0
 800b5be:	6021      	streq	r1, [r4, #0]
 800b5c0:	6054      	str	r4, [r2, #4]
 800b5c2:	e7ca      	b.n	800b55a <_free_r+0x22>
 800b5c4:	bd38      	pop	{r3, r4, r5, pc}
 800b5c6:	bf00      	nop
 800b5c8:	200148d4 	.word	0x200148d4

0800b5cc <malloc>:
 800b5cc:	4b02      	ldr	r3, [pc, #8]	@ (800b5d8 <malloc+0xc>)
 800b5ce:	4601      	mov	r1, r0
 800b5d0:	6818      	ldr	r0, [r3, #0]
 800b5d2:	f000 b825 	b.w	800b620 <_malloc_r>
 800b5d6:	bf00      	nop
 800b5d8:	20000040 	.word	0x20000040

0800b5dc <sbrk_aligned>:
 800b5dc:	b570      	push	{r4, r5, r6, lr}
 800b5de:	4e0f      	ldr	r6, [pc, #60]	@ (800b61c <sbrk_aligned+0x40>)
 800b5e0:	460c      	mov	r4, r1
 800b5e2:	6831      	ldr	r1, [r6, #0]
 800b5e4:	4605      	mov	r5, r0
 800b5e6:	b911      	cbnz	r1, 800b5ee <sbrk_aligned+0x12>
 800b5e8:	f000 fe46 	bl	800c278 <_sbrk_r>
 800b5ec:	6030      	str	r0, [r6, #0]
 800b5ee:	4621      	mov	r1, r4
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	f000 fe41 	bl	800c278 <_sbrk_r>
 800b5f6:	1c43      	adds	r3, r0, #1
 800b5f8:	d103      	bne.n	800b602 <sbrk_aligned+0x26>
 800b5fa:	f04f 34ff 	mov.w	r4, #4294967295
 800b5fe:	4620      	mov	r0, r4
 800b600:	bd70      	pop	{r4, r5, r6, pc}
 800b602:	1cc4      	adds	r4, r0, #3
 800b604:	f024 0403 	bic.w	r4, r4, #3
 800b608:	42a0      	cmp	r0, r4
 800b60a:	d0f8      	beq.n	800b5fe <sbrk_aligned+0x22>
 800b60c:	1a21      	subs	r1, r4, r0
 800b60e:	4628      	mov	r0, r5
 800b610:	f000 fe32 	bl	800c278 <_sbrk_r>
 800b614:	3001      	adds	r0, #1
 800b616:	d1f2      	bne.n	800b5fe <sbrk_aligned+0x22>
 800b618:	e7ef      	b.n	800b5fa <sbrk_aligned+0x1e>
 800b61a:	bf00      	nop
 800b61c:	200148d0 	.word	0x200148d0

0800b620 <_malloc_r>:
 800b620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b624:	1ccd      	adds	r5, r1, #3
 800b626:	f025 0503 	bic.w	r5, r5, #3
 800b62a:	3508      	adds	r5, #8
 800b62c:	2d0c      	cmp	r5, #12
 800b62e:	bf38      	it	cc
 800b630:	250c      	movcc	r5, #12
 800b632:	2d00      	cmp	r5, #0
 800b634:	4606      	mov	r6, r0
 800b636:	db01      	blt.n	800b63c <_malloc_r+0x1c>
 800b638:	42a9      	cmp	r1, r5
 800b63a:	d904      	bls.n	800b646 <_malloc_r+0x26>
 800b63c:	230c      	movs	r3, #12
 800b63e:	6033      	str	r3, [r6, #0]
 800b640:	2000      	movs	r0, #0
 800b642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b646:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b71c <_malloc_r+0xfc>
 800b64a:	f000 f869 	bl	800b720 <__malloc_lock>
 800b64e:	f8d8 3000 	ldr.w	r3, [r8]
 800b652:	461c      	mov	r4, r3
 800b654:	bb44      	cbnz	r4, 800b6a8 <_malloc_r+0x88>
 800b656:	4629      	mov	r1, r5
 800b658:	4630      	mov	r0, r6
 800b65a:	f7ff ffbf 	bl	800b5dc <sbrk_aligned>
 800b65e:	1c43      	adds	r3, r0, #1
 800b660:	4604      	mov	r4, r0
 800b662:	d158      	bne.n	800b716 <_malloc_r+0xf6>
 800b664:	f8d8 4000 	ldr.w	r4, [r8]
 800b668:	4627      	mov	r7, r4
 800b66a:	2f00      	cmp	r7, #0
 800b66c:	d143      	bne.n	800b6f6 <_malloc_r+0xd6>
 800b66e:	2c00      	cmp	r4, #0
 800b670:	d04b      	beq.n	800b70a <_malloc_r+0xea>
 800b672:	6823      	ldr	r3, [r4, #0]
 800b674:	4639      	mov	r1, r7
 800b676:	4630      	mov	r0, r6
 800b678:	eb04 0903 	add.w	r9, r4, r3
 800b67c:	f000 fdfc 	bl	800c278 <_sbrk_r>
 800b680:	4581      	cmp	r9, r0
 800b682:	d142      	bne.n	800b70a <_malloc_r+0xea>
 800b684:	6821      	ldr	r1, [r4, #0]
 800b686:	1a6d      	subs	r5, r5, r1
 800b688:	4629      	mov	r1, r5
 800b68a:	4630      	mov	r0, r6
 800b68c:	f7ff ffa6 	bl	800b5dc <sbrk_aligned>
 800b690:	3001      	adds	r0, #1
 800b692:	d03a      	beq.n	800b70a <_malloc_r+0xea>
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	442b      	add	r3, r5
 800b698:	6023      	str	r3, [r4, #0]
 800b69a:	f8d8 3000 	ldr.w	r3, [r8]
 800b69e:	685a      	ldr	r2, [r3, #4]
 800b6a0:	bb62      	cbnz	r2, 800b6fc <_malloc_r+0xdc>
 800b6a2:	f8c8 7000 	str.w	r7, [r8]
 800b6a6:	e00f      	b.n	800b6c8 <_malloc_r+0xa8>
 800b6a8:	6822      	ldr	r2, [r4, #0]
 800b6aa:	1b52      	subs	r2, r2, r5
 800b6ac:	d420      	bmi.n	800b6f0 <_malloc_r+0xd0>
 800b6ae:	2a0b      	cmp	r2, #11
 800b6b0:	d917      	bls.n	800b6e2 <_malloc_r+0xc2>
 800b6b2:	1961      	adds	r1, r4, r5
 800b6b4:	42a3      	cmp	r3, r4
 800b6b6:	6025      	str	r5, [r4, #0]
 800b6b8:	bf18      	it	ne
 800b6ba:	6059      	strne	r1, [r3, #4]
 800b6bc:	6863      	ldr	r3, [r4, #4]
 800b6be:	bf08      	it	eq
 800b6c0:	f8c8 1000 	streq.w	r1, [r8]
 800b6c4:	5162      	str	r2, [r4, r5]
 800b6c6:	604b      	str	r3, [r1, #4]
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f000 f82f 	bl	800b72c <__malloc_unlock>
 800b6ce:	f104 000b 	add.w	r0, r4, #11
 800b6d2:	1d23      	adds	r3, r4, #4
 800b6d4:	f020 0007 	bic.w	r0, r0, #7
 800b6d8:	1ac2      	subs	r2, r0, r3
 800b6da:	bf1c      	itt	ne
 800b6dc:	1a1b      	subne	r3, r3, r0
 800b6de:	50a3      	strne	r3, [r4, r2]
 800b6e0:	e7af      	b.n	800b642 <_malloc_r+0x22>
 800b6e2:	6862      	ldr	r2, [r4, #4]
 800b6e4:	42a3      	cmp	r3, r4
 800b6e6:	bf0c      	ite	eq
 800b6e8:	f8c8 2000 	streq.w	r2, [r8]
 800b6ec:	605a      	strne	r2, [r3, #4]
 800b6ee:	e7eb      	b.n	800b6c8 <_malloc_r+0xa8>
 800b6f0:	4623      	mov	r3, r4
 800b6f2:	6864      	ldr	r4, [r4, #4]
 800b6f4:	e7ae      	b.n	800b654 <_malloc_r+0x34>
 800b6f6:	463c      	mov	r4, r7
 800b6f8:	687f      	ldr	r7, [r7, #4]
 800b6fa:	e7b6      	b.n	800b66a <_malloc_r+0x4a>
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	42a3      	cmp	r3, r4
 800b702:	d1fb      	bne.n	800b6fc <_malloc_r+0xdc>
 800b704:	2300      	movs	r3, #0
 800b706:	6053      	str	r3, [r2, #4]
 800b708:	e7de      	b.n	800b6c8 <_malloc_r+0xa8>
 800b70a:	230c      	movs	r3, #12
 800b70c:	6033      	str	r3, [r6, #0]
 800b70e:	4630      	mov	r0, r6
 800b710:	f000 f80c 	bl	800b72c <__malloc_unlock>
 800b714:	e794      	b.n	800b640 <_malloc_r+0x20>
 800b716:	6005      	str	r5, [r0, #0]
 800b718:	e7d6      	b.n	800b6c8 <_malloc_r+0xa8>
 800b71a:	bf00      	nop
 800b71c:	200148d4 	.word	0x200148d4

0800b720 <__malloc_lock>:
 800b720:	4801      	ldr	r0, [pc, #4]	@ (800b728 <__malloc_lock+0x8>)
 800b722:	f7ff b8ac 	b.w	800a87e <__retarget_lock_acquire_recursive>
 800b726:	bf00      	nop
 800b728:	200148cc 	.word	0x200148cc

0800b72c <__malloc_unlock>:
 800b72c:	4801      	ldr	r0, [pc, #4]	@ (800b734 <__malloc_unlock+0x8>)
 800b72e:	f7ff b8a7 	b.w	800a880 <__retarget_lock_release_recursive>
 800b732:	bf00      	nop
 800b734:	200148cc 	.word	0x200148cc

0800b738 <_Balloc>:
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	69c6      	ldr	r6, [r0, #28]
 800b73c:	4604      	mov	r4, r0
 800b73e:	460d      	mov	r5, r1
 800b740:	b976      	cbnz	r6, 800b760 <_Balloc+0x28>
 800b742:	2010      	movs	r0, #16
 800b744:	f7ff ff42 	bl	800b5cc <malloc>
 800b748:	4602      	mov	r2, r0
 800b74a:	61e0      	str	r0, [r4, #28]
 800b74c:	b920      	cbnz	r0, 800b758 <_Balloc+0x20>
 800b74e:	4b18      	ldr	r3, [pc, #96]	@ (800b7b0 <_Balloc+0x78>)
 800b750:	4818      	ldr	r0, [pc, #96]	@ (800b7b4 <_Balloc+0x7c>)
 800b752:	216b      	movs	r1, #107	@ 0x6b
 800b754:	f000 fda0 	bl	800c298 <__assert_func>
 800b758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b75c:	6006      	str	r6, [r0, #0]
 800b75e:	60c6      	str	r6, [r0, #12]
 800b760:	69e6      	ldr	r6, [r4, #28]
 800b762:	68f3      	ldr	r3, [r6, #12]
 800b764:	b183      	cbz	r3, 800b788 <_Balloc+0x50>
 800b766:	69e3      	ldr	r3, [r4, #28]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b76e:	b9b8      	cbnz	r0, 800b7a0 <_Balloc+0x68>
 800b770:	2101      	movs	r1, #1
 800b772:	fa01 f605 	lsl.w	r6, r1, r5
 800b776:	1d72      	adds	r2, r6, #5
 800b778:	0092      	lsls	r2, r2, #2
 800b77a:	4620      	mov	r0, r4
 800b77c:	f000 fdaa 	bl	800c2d4 <_calloc_r>
 800b780:	b160      	cbz	r0, 800b79c <_Balloc+0x64>
 800b782:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b786:	e00e      	b.n	800b7a6 <_Balloc+0x6e>
 800b788:	2221      	movs	r2, #33	@ 0x21
 800b78a:	2104      	movs	r1, #4
 800b78c:	4620      	mov	r0, r4
 800b78e:	f000 fda1 	bl	800c2d4 <_calloc_r>
 800b792:	69e3      	ldr	r3, [r4, #28]
 800b794:	60f0      	str	r0, [r6, #12]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1e4      	bne.n	800b766 <_Balloc+0x2e>
 800b79c:	2000      	movs	r0, #0
 800b79e:	bd70      	pop	{r4, r5, r6, pc}
 800b7a0:	6802      	ldr	r2, [r0, #0]
 800b7a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7ac:	e7f7      	b.n	800b79e <_Balloc+0x66>
 800b7ae:	bf00      	nop
 800b7b0:	0800cb69 	.word	0x0800cb69
 800b7b4:	0800cbe9 	.word	0x0800cbe9

0800b7b8 <_Bfree>:
 800b7b8:	b570      	push	{r4, r5, r6, lr}
 800b7ba:	69c6      	ldr	r6, [r0, #28]
 800b7bc:	4605      	mov	r5, r0
 800b7be:	460c      	mov	r4, r1
 800b7c0:	b976      	cbnz	r6, 800b7e0 <_Bfree+0x28>
 800b7c2:	2010      	movs	r0, #16
 800b7c4:	f7ff ff02 	bl	800b5cc <malloc>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	61e8      	str	r0, [r5, #28]
 800b7cc:	b920      	cbnz	r0, 800b7d8 <_Bfree+0x20>
 800b7ce:	4b09      	ldr	r3, [pc, #36]	@ (800b7f4 <_Bfree+0x3c>)
 800b7d0:	4809      	ldr	r0, [pc, #36]	@ (800b7f8 <_Bfree+0x40>)
 800b7d2:	218f      	movs	r1, #143	@ 0x8f
 800b7d4:	f000 fd60 	bl	800c298 <__assert_func>
 800b7d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7dc:	6006      	str	r6, [r0, #0]
 800b7de:	60c6      	str	r6, [r0, #12]
 800b7e0:	b13c      	cbz	r4, 800b7f2 <_Bfree+0x3a>
 800b7e2:	69eb      	ldr	r3, [r5, #28]
 800b7e4:	6862      	ldr	r2, [r4, #4]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7ec:	6021      	str	r1, [r4, #0]
 800b7ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b7f2:	bd70      	pop	{r4, r5, r6, pc}
 800b7f4:	0800cb69 	.word	0x0800cb69
 800b7f8:	0800cbe9 	.word	0x0800cbe9

0800b7fc <__multadd>:
 800b7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b800:	690d      	ldr	r5, [r1, #16]
 800b802:	4607      	mov	r7, r0
 800b804:	460c      	mov	r4, r1
 800b806:	461e      	mov	r6, r3
 800b808:	f101 0c14 	add.w	ip, r1, #20
 800b80c:	2000      	movs	r0, #0
 800b80e:	f8dc 3000 	ldr.w	r3, [ip]
 800b812:	b299      	uxth	r1, r3
 800b814:	fb02 6101 	mla	r1, r2, r1, r6
 800b818:	0c1e      	lsrs	r6, r3, #16
 800b81a:	0c0b      	lsrs	r3, r1, #16
 800b81c:	fb02 3306 	mla	r3, r2, r6, r3
 800b820:	b289      	uxth	r1, r1
 800b822:	3001      	adds	r0, #1
 800b824:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b828:	4285      	cmp	r5, r0
 800b82a:	f84c 1b04 	str.w	r1, [ip], #4
 800b82e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b832:	dcec      	bgt.n	800b80e <__multadd+0x12>
 800b834:	b30e      	cbz	r6, 800b87a <__multadd+0x7e>
 800b836:	68a3      	ldr	r3, [r4, #8]
 800b838:	42ab      	cmp	r3, r5
 800b83a:	dc19      	bgt.n	800b870 <__multadd+0x74>
 800b83c:	6861      	ldr	r1, [r4, #4]
 800b83e:	4638      	mov	r0, r7
 800b840:	3101      	adds	r1, #1
 800b842:	f7ff ff79 	bl	800b738 <_Balloc>
 800b846:	4680      	mov	r8, r0
 800b848:	b928      	cbnz	r0, 800b856 <__multadd+0x5a>
 800b84a:	4602      	mov	r2, r0
 800b84c:	4b0c      	ldr	r3, [pc, #48]	@ (800b880 <__multadd+0x84>)
 800b84e:	480d      	ldr	r0, [pc, #52]	@ (800b884 <__multadd+0x88>)
 800b850:	21ba      	movs	r1, #186	@ 0xba
 800b852:	f000 fd21 	bl	800c298 <__assert_func>
 800b856:	6922      	ldr	r2, [r4, #16]
 800b858:	3202      	adds	r2, #2
 800b85a:	f104 010c 	add.w	r1, r4, #12
 800b85e:	0092      	lsls	r2, r2, #2
 800b860:	300c      	adds	r0, #12
 800b862:	f7ff f80e 	bl	800a882 <memcpy>
 800b866:	4621      	mov	r1, r4
 800b868:	4638      	mov	r0, r7
 800b86a:	f7ff ffa5 	bl	800b7b8 <_Bfree>
 800b86e:	4644      	mov	r4, r8
 800b870:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b874:	3501      	adds	r5, #1
 800b876:	615e      	str	r6, [r3, #20]
 800b878:	6125      	str	r5, [r4, #16]
 800b87a:	4620      	mov	r0, r4
 800b87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b880:	0800cbd8 	.word	0x0800cbd8
 800b884:	0800cbe9 	.word	0x0800cbe9

0800b888 <__hi0bits>:
 800b888:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b88c:	4603      	mov	r3, r0
 800b88e:	bf36      	itet	cc
 800b890:	0403      	lslcc	r3, r0, #16
 800b892:	2000      	movcs	r0, #0
 800b894:	2010      	movcc	r0, #16
 800b896:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b89a:	bf3c      	itt	cc
 800b89c:	021b      	lslcc	r3, r3, #8
 800b89e:	3008      	addcc	r0, #8
 800b8a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8a4:	bf3c      	itt	cc
 800b8a6:	011b      	lslcc	r3, r3, #4
 800b8a8:	3004      	addcc	r0, #4
 800b8aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8ae:	bf3c      	itt	cc
 800b8b0:	009b      	lslcc	r3, r3, #2
 800b8b2:	3002      	addcc	r0, #2
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	db05      	blt.n	800b8c4 <__hi0bits+0x3c>
 800b8b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b8bc:	f100 0001 	add.w	r0, r0, #1
 800b8c0:	bf08      	it	eq
 800b8c2:	2020      	moveq	r0, #32
 800b8c4:	4770      	bx	lr

0800b8c6 <__lo0bits>:
 800b8c6:	6803      	ldr	r3, [r0, #0]
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	f013 0007 	ands.w	r0, r3, #7
 800b8ce:	d00b      	beq.n	800b8e8 <__lo0bits+0x22>
 800b8d0:	07d9      	lsls	r1, r3, #31
 800b8d2:	d421      	bmi.n	800b918 <__lo0bits+0x52>
 800b8d4:	0798      	lsls	r0, r3, #30
 800b8d6:	bf49      	itett	mi
 800b8d8:	085b      	lsrmi	r3, r3, #1
 800b8da:	089b      	lsrpl	r3, r3, #2
 800b8dc:	2001      	movmi	r0, #1
 800b8de:	6013      	strmi	r3, [r2, #0]
 800b8e0:	bf5c      	itt	pl
 800b8e2:	6013      	strpl	r3, [r2, #0]
 800b8e4:	2002      	movpl	r0, #2
 800b8e6:	4770      	bx	lr
 800b8e8:	b299      	uxth	r1, r3
 800b8ea:	b909      	cbnz	r1, 800b8f0 <__lo0bits+0x2a>
 800b8ec:	0c1b      	lsrs	r3, r3, #16
 800b8ee:	2010      	movs	r0, #16
 800b8f0:	b2d9      	uxtb	r1, r3
 800b8f2:	b909      	cbnz	r1, 800b8f8 <__lo0bits+0x32>
 800b8f4:	3008      	adds	r0, #8
 800b8f6:	0a1b      	lsrs	r3, r3, #8
 800b8f8:	0719      	lsls	r1, r3, #28
 800b8fa:	bf04      	itt	eq
 800b8fc:	091b      	lsreq	r3, r3, #4
 800b8fe:	3004      	addeq	r0, #4
 800b900:	0799      	lsls	r1, r3, #30
 800b902:	bf04      	itt	eq
 800b904:	089b      	lsreq	r3, r3, #2
 800b906:	3002      	addeq	r0, #2
 800b908:	07d9      	lsls	r1, r3, #31
 800b90a:	d403      	bmi.n	800b914 <__lo0bits+0x4e>
 800b90c:	085b      	lsrs	r3, r3, #1
 800b90e:	f100 0001 	add.w	r0, r0, #1
 800b912:	d003      	beq.n	800b91c <__lo0bits+0x56>
 800b914:	6013      	str	r3, [r2, #0]
 800b916:	4770      	bx	lr
 800b918:	2000      	movs	r0, #0
 800b91a:	4770      	bx	lr
 800b91c:	2020      	movs	r0, #32
 800b91e:	4770      	bx	lr

0800b920 <__i2b>:
 800b920:	b510      	push	{r4, lr}
 800b922:	460c      	mov	r4, r1
 800b924:	2101      	movs	r1, #1
 800b926:	f7ff ff07 	bl	800b738 <_Balloc>
 800b92a:	4602      	mov	r2, r0
 800b92c:	b928      	cbnz	r0, 800b93a <__i2b+0x1a>
 800b92e:	4b05      	ldr	r3, [pc, #20]	@ (800b944 <__i2b+0x24>)
 800b930:	4805      	ldr	r0, [pc, #20]	@ (800b948 <__i2b+0x28>)
 800b932:	f240 1145 	movw	r1, #325	@ 0x145
 800b936:	f000 fcaf 	bl	800c298 <__assert_func>
 800b93a:	2301      	movs	r3, #1
 800b93c:	6144      	str	r4, [r0, #20]
 800b93e:	6103      	str	r3, [r0, #16]
 800b940:	bd10      	pop	{r4, pc}
 800b942:	bf00      	nop
 800b944:	0800cbd8 	.word	0x0800cbd8
 800b948:	0800cbe9 	.word	0x0800cbe9

0800b94c <__multiply>:
 800b94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b950:	4614      	mov	r4, r2
 800b952:	690a      	ldr	r2, [r1, #16]
 800b954:	6923      	ldr	r3, [r4, #16]
 800b956:	429a      	cmp	r2, r3
 800b958:	bfa8      	it	ge
 800b95a:	4623      	movge	r3, r4
 800b95c:	460f      	mov	r7, r1
 800b95e:	bfa4      	itt	ge
 800b960:	460c      	movge	r4, r1
 800b962:	461f      	movge	r7, r3
 800b964:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b968:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b96c:	68a3      	ldr	r3, [r4, #8]
 800b96e:	6861      	ldr	r1, [r4, #4]
 800b970:	eb0a 0609 	add.w	r6, sl, r9
 800b974:	42b3      	cmp	r3, r6
 800b976:	b085      	sub	sp, #20
 800b978:	bfb8      	it	lt
 800b97a:	3101      	addlt	r1, #1
 800b97c:	f7ff fedc 	bl	800b738 <_Balloc>
 800b980:	b930      	cbnz	r0, 800b990 <__multiply+0x44>
 800b982:	4602      	mov	r2, r0
 800b984:	4b44      	ldr	r3, [pc, #272]	@ (800ba98 <__multiply+0x14c>)
 800b986:	4845      	ldr	r0, [pc, #276]	@ (800ba9c <__multiply+0x150>)
 800b988:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b98c:	f000 fc84 	bl	800c298 <__assert_func>
 800b990:	f100 0514 	add.w	r5, r0, #20
 800b994:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b998:	462b      	mov	r3, r5
 800b99a:	2200      	movs	r2, #0
 800b99c:	4543      	cmp	r3, r8
 800b99e:	d321      	bcc.n	800b9e4 <__multiply+0x98>
 800b9a0:	f107 0114 	add.w	r1, r7, #20
 800b9a4:	f104 0214 	add.w	r2, r4, #20
 800b9a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b9ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b9b0:	9302      	str	r3, [sp, #8]
 800b9b2:	1b13      	subs	r3, r2, r4
 800b9b4:	3b15      	subs	r3, #21
 800b9b6:	f023 0303 	bic.w	r3, r3, #3
 800b9ba:	3304      	adds	r3, #4
 800b9bc:	f104 0715 	add.w	r7, r4, #21
 800b9c0:	42ba      	cmp	r2, r7
 800b9c2:	bf38      	it	cc
 800b9c4:	2304      	movcc	r3, #4
 800b9c6:	9301      	str	r3, [sp, #4]
 800b9c8:	9b02      	ldr	r3, [sp, #8]
 800b9ca:	9103      	str	r1, [sp, #12]
 800b9cc:	428b      	cmp	r3, r1
 800b9ce:	d80c      	bhi.n	800b9ea <__multiply+0x9e>
 800b9d0:	2e00      	cmp	r6, #0
 800b9d2:	dd03      	ble.n	800b9dc <__multiply+0x90>
 800b9d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d05b      	beq.n	800ba94 <__multiply+0x148>
 800b9dc:	6106      	str	r6, [r0, #16]
 800b9de:	b005      	add	sp, #20
 800b9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e4:	f843 2b04 	str.w	r2, [r3], #4
 800b9e8:	e7d8      	b.n	800b99c <__multiply+0x50>
 800b9ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800b9ee:	f1ba 0f00 	cmp.w	sl, #0
 800b9f2:	d024      	beq.n	800ba3e <__multiply+0xf2>
 800b9f4:	f104 0e14 	add.w	lr, r4, #20
 800b9f8:	46a9      	mov	r9, r5
 800b9fa:	f04f 0c00 	mov.w	ip, #0
 800b9fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba02:	f8d9 3000 	ldr.w	r3, [r9]
 800ba06:	fa1f fb87 	uxth.w	fp, r7
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ba10:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ba14:	f8d9 7000 	ldr.w	r7, [r9]
 800ba18:	4463      	add	r3, ip
 800ba1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ba1e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ba22:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ba2c:	4572      	cmp	r2, lr
 800ba2e:	f849 3b04 	str.w	r3, [r9], #4
 800ba32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ba36:	d8e2      	bhi.n	800b9fe <__multiply+0xb2>
 800ba38:	9b01      	ldr	r3, [sp, #4]
 800ba3a:	f845 c003 	str.w	ip, [r5, r3]
 800ba3e:	9b03      	ldr	r3, [sp, #12]
 800ba40:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ba44:	3104      	adds	r1, #4
 800ba46:	f1b9 0f00 	cmp.w	r9, #0
 800ba4a:	d021      	beq.n	800ba90 <__multiply+0x144>
 800ba4c:	682b      	ldr	r3, [r5, #0]
 800ba4e:	f104 0c14 	add.w	ip, r4, #20
 800ba52:	46ae      	mov	lr, r5
 800ba54:	f04f 0a00 	mov.w	sl, #0
 800ba58:	f8bc b000 	ldrh.w	fp, [ip]
 800ba5c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ba60:	fb09 770b 	mla	r7, r9, fp, r7
 800ba64:	4457      	add	r7, sl
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ba6c:	f84e 3b04 	str.w	r3, [lr], #4
 800ba70:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ba74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba78:	f8be 3000 	ldrh.w	r3, [lr]
 800ba7c:	fb09 330a 	mla	r3, r9, sl, r3
 800ba80:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ba84:	4562      	cmp	r2, ip
 800ba86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba8a:	d8e5      	bhi.n	800ba58 <__multiply+0x10c>
 800ba8c:	9f01      	ldr	r7, [sp, #4]
 800ba8e:	51eb      	str	r3, [r5, r7]
 800ba90:	3504      	adds	r5, #4
 800ba92:	e799      	b.n	800b9c8 <__multiply+0x7c>
 800ba94:	3e01      	subs	r6, #1
 800ba96:	e79b      	b.n	800b9d0 <__multiply+0x84>
 800ba98:	0800cbd8 	.word	0x0800cbd8
 800ba9c:	0800cbe9 	.word	0x0800cbe9

0800baa0 <__pow5mult>:
 800baa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baa4:	4615      	mov	r5, r2
 800baa6:	f012 0203 	ands.w	r2, r2, #3
 800baaa:	4607      	mov	r7, r0
 800baac:	460e      	mov	r6, r1
 800baae:	d007      	beq.n	800bac0 <__pow5mult+0x20>
 800bab0:	4c25      	ldr	r4, [pc, #148]	@ (800bb48 <__pow5mult+0xa8>)
 800bab2:	3a01      	subs	r2, #1
 800bab4:	2300      	movs	r3, #0
 800bab6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800baba:	f7ff fe9f 	bl	800b7fc <__multadd>
 800babe:	4606      	mov	r6, r0
 800bac0:	10ad      	asrs	r5, r5, #2
 800bac2:	d03d      	beq.n	800bb40 <__pow5mult+0xa0>
 800bac4:	69fc      	ldr	r4, [r7, #28]
 800bac6:	b97c      	cbnz	r4, 800bae8 <__pow5mult+0x48>
 800bac8:	2010      	movs	r0, #16
 800baca:	f7ff fd7f 	bl	800b5cc <malloc>
 800bace:	4602      	mov	r2, r0
 800bad0:	61f8      	str	r0, [r7, #28]
 800bad2:	b928      	cbnz	r0, 800bae0 <__pow5mult+0x40>
 800bad4:	4b1d      	ldr	r3, [pc, #116]	@ (800bb4c <__pow5mult+0xac>)
 800bad6:	481e      	ldr	r0, [pc, #120]	@ (800bb50 <__pow5mult+0xb0>)
 800bad8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800badc:	f000 fbdc 	bl	800c298 <__assert_func>
 800bae0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bae4:	6004      	str	r4, [r0, #0]
 800bae6:	60c4      	str	r4, [r0, #12]
 800bae8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800baec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800baf0:	b94c      	cbnz	r4, 800bb06 <__pow5mult+0x66>
 800baf2:	f240 2171 	movw	r1, #625	@ 0x271
 800baf6:	4638      	mov	r0, r7
 800baf8:	f7ff ff12 	bl	800b920 <__i2b>
 800bafc:	2300      	movs	r3, #0
 800bafe:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb02:	4604      	mov	r4, r0
 800bb04:	6003      	str	r3, [r0, #0]
 800bb06:	f04f 0900 	mov.w	r9, #0
 800bb0a:	07eb      	lsls	r3, r5, #31
 800bb0c:	d50a      	bpl.n	800bb24 <__pow5mult+0x84>
 800bb0e:	4631      	mov	r1, r6
 800bb10:	4622      	mov	r2, r4
 800bb12:	4638      	mov	r0, r7
 800bb14:	f7ff ff1a 	bl	800b94c <__multiply>
 800bb18:	4631      	mov	r1, r6
 800bb1a:	4680      	mov	r8, r0
 800bb1c:	4638      	mov	r0, r7
 800bb1e:	f7ff fe4b 	bl	800b7b8 <_Bfree>
 800bb22:	4646      	mov	r6, r8
 800bb24:	106d      	asrs	r5, r5, #1
 800bb26:	d00b      	beq.n	800bb40 <__pow5mult+0xa0>
 800bb28:	6820      	ldr	r0, [r4, #0]
 800bb2a:	b938      	cbnz	r0, 800bb3c <__pow5mult+0x9c>
 800bb2c:	4622      	mov	r2, r4
 800bb2e:	4621      	mov	r1, r4
 800bb30:	4638      	mov	r0, r7
 800bb32:	f7ff ff0b 	bl	800b94c <__multiply>
 800bb36:	6020      	str	r0, [r4, #0]
 800bb38:	f8c0 9000 	str.w	r9, [r0]
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	e7e4      	b.n	800bb0a <__pow5mult+0x6a>
 800bb40:	4630      	mov	r0, r6
 800bb42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb46:	bf00      	nop
 800bb48:	0800cc44 	.word	0x0800cc44
 800bb4c:	0800cb69 	.word	0x0800cb69
 800bb50:	0800cbe9 	.word	0x0800cbe9

0800bb54 <__lshift>:
 800bb54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb58:	460c      	mov	r4, r1
 800bb5a:	6849      	ldr	r1, [r1, #4]
 800bb5c:	6923      	ldr	r3, [r4, #16]
 800bb5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb62:	68a3      	ldr	r3, [r4, #8]
 800bb64:	4607      	mov	r7, r0
 800bb66:	4691      	mov	r9, r2
 800bb68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb6c:	f108 0601 	add.w	r6, r8, #1
 800bb70:	42b3      	cmp	r3, r6
 800bb72:	db0b      	blt.n	800bb8c <__lshift+0x38>
 800bb74:	4638      	mov	r0, r7
 800bb76:	f7ff fddf 	bl	800b738 <_Balloc>
 800bb7a:	4605      	mov	r5, r0
 800bb7c:	b948      	cbnz	r0, 800bb92 <__lshift+0x3e>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	4b28      	ldr	r3, [pc, #160]	@ (800bc24 <__lshift+0xd0>)
 800bb82:	4829      	ldr	r0, [pc, #164]	@ (800bc28 <__lshift+0xd4>)
 800bb84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bb88:	f000 fb86 	bl	800c298 <__assert_func>
 800bb8c:	3101      	adds	r1, #1
 800bb8e:	005b      	lsls	r3, r3, #1
 800bb90:	e7ee      	b.n	800bb70 <__lshift+0x1c>
 800bb92:	2300      	movs	r3, #0
 800bb94:	f100 0114 	add.w	r1, r0, #20
 800bb98:	f100 0210 	add.w	r2, r0, #16
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	4553      	cmp	r3, sl
 800bba0:	db33      	blt.n	800bc0a <__lshift+0xb6>
 800bba2:	6920      	ldr	r0, [r4, #16]
 800bba4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bba8:	f104 0314 	add.w	r3, r4, #20
 800bbac:	f019 091f 	ands.w	r9, r9, #31
 800bbb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bbb8:	d02b      	beq.n	800bc12 <__lshift+0xbe>
 800bbba:	f1c9 0e20 	rsb	lr, r9, #32
 800bbbe:	468a      	mov	sl, r1
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	6818      	ldr	r0, [r3, #0]
 800bbc4:	fa00 f009 	lsl.w	r0, r0, r9
 800bbc8:	4310      	orrs	r0, r2
 800bbca:	f84a 0b04 	str.w	r0, [sl], #4
 800bbce:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbd2:	459c      	cmp	ip, r3
 800bbd4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bbd8:	d8f3      	bhi.n	800bbc2 <__lshift+0x6e>
 800bbda:	ebac 0304 	sub.w	r3, ip, r4
 800bbde:	3b15      	subs	r3, #21
 800bbe0:	f023 0303 	bic.w	r3, r3, #3
 800bbe4:	3304      	adds	r3, #4
 800bbe6:	f104 0015 	add.w	r0, r4, #21
 800bbea:	4584      	cmp	ip, r0
 800bbec:	bf38      	it	cc
 800bbee:	2304      	movcc	r3, #4
 800bbf0:	50ca      	str	r2, [r1, r3]
 800bbf2:	b10a      	cbz	r2, 800bbf8 <__lshift+0xa4>
 800bbf4:	f108 0602 	add.w	r6, r8, #2
 800bbf8:	3e01      	subs	r6, #1
 800bbfa:	4638      	mov	r0, r7
 800bbfc:	612e      	str	r6, [r5, #16]
 800bbfe:	4621      	mov	r1, r4
 800bc00:	f7ff fdda 	bl	800b7b8 <_Bfree>
 800bc04:	4628      	mov	r0, r5
 800bc06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc0e:	3301      	adds	r3, #1
 800bc10:	e7c5      	b.n	800bb9e <__lshift+0x4a>
 800bc12:	3904      	subs	r1, #4
 800bc14:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc18:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc1c:	459c      	cmp	ip, r3
 800bc1e:	d8f9      	bhi.n	800bc14 <__lshift+0xc0>
 800bc20:	e7ea      	b.n	800bbf8 <__lshift+0xa4>
 800bc22:	bf00      	nop
 800bc24:	0800cbd8 	.word	0x0800cbd8
 800bc28:	0800cbe9 	.word	0x0800cbe9

0800bc2c <__mcmp>:
 800bc2c:	690a      	ldr	r2, [r1, #16]
 800bc2e:	4603      	mov	r3, r0
 800bc30:	6900      	ldr	r0, [r0, #16]
 800bc32:	1a80      	subs	r0, r0, r2
 800bc34:	b530      	push	{r4, r5, lr}
 800bc36:	d10e      	bne.n	800bc56 <__mcmp+0x2a>
 800bc38:	3314      	adds	r3, #20
 800bc3a:	3114      	adds	r1, #20
 800bc3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bc40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bc44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bc48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bc4c:	4295      	cmp	r5, r2
 800bc4e:	d003      	beq.n	800bc58 <__mcmp+0x2c>
 800bc50:	d205      	bcs.n	800bc5e <__mcmp+0x32>
 800bc52:	f04f 30ff 	mov.w	r0, #4294967295
 800bc56:	bd30      	pop	{r4, r5, pc}
 800bc58:	42a3      	cmp	r3, r4
 800bc5a:	d3f3      	bcc.n	800bc44 <__mcmp+0x18>
 800bc5c:	e7fb      	b.n	800bc56 <__mcmp+0x2a>
 800bc5e:	2001      	movs	r0, #1
 800bc60:	e7f9      	b.n	800bc56 <__mcmp+0x2a>
	...

0800bc64 <__mdiff>:
 800bc64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc68:	4689      	mov	r9, r1
 800bc6a:	4606      	mov	r6, r0
 800bc6c:	4611      	mov	r1, r2
 800bc6e:	4648      	mov	r0, r9
 800bc70:	4614      	mov	r4, r2
 800bc72:	f7ff ffdb 	bl	800bc2c <__mcmp>
 800bc76:	1e05      	subs	r5, r0, #0
 800bc78:	d112      	bne.n	800bca0 <__mdiff+0x3c>
 800bc7a:	4629      	mov	r1, r5
 800bc7c:	4630      	mov	r0, r6
 800bc7e:	f7ff fd5b 	bl	800b738 <_Balloc>
 800bc82:	4602      	mov	r2, r0
 800bc84:	b928      	cbnz	r0, 800bc92 <__mdiff+0x2e>
 800bc86:	4b3f      	ldr	r3, [pc, #252]	@ (800bd84 <__mdiff+0x120>)
 800bc88:	f240 2137 	movw	r1, #567	@ 0x237
 800bc8c:	483e      	ldr	r0, [pc, #248]	@ (800bd88 <__mdiff+0x124>)
 800bc8e:	f000 fb03 	bl	800c298 <__assert_func>
 800bc92:	2301      	movs	r3, #1
 800bc94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc98:	4610      	mov	r0, r2
 800bc9a:	b003      	add	sp, #12
 800bc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca0:	bfbc      	itt	lt
 800bca2:	464b      	movlt	r3, r9
 800bca4:	46a1      	movlt	r9, r4
 800bca6:	4630      	mov	r0, r6
 800bca8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bcac:	bfba      	itte	lt
 800bcae:	461c      	movlt	r4, r3
 800bcb0:	2501      	movlt	r5, #1
 800bcb2:	2500      	movge	r5, #0
 800bcb4:	f7ff fd40 	bl	800b738 <_Balloc>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	b918      	cbnz	r0, 800bcc4 <__mdiff+0x60>
 800bcbc:	4b31      	ldr	r3, [pc, #196]	@ (800bd84 <__mdiff+0x120>)
 800bcbe:	f240 2145 	movw	r1, #581	@ 0x245
 800bcc2:	e7e3      	b.n	800bc8c <__mdiff+0x28>
 800bcc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bcc8:	6926      	ldr	r6, [r4, #16]
 800bcca:	60c5      	str	r5, [r0, #12]
 800bccc:	f109 0310 	add.w	r3, r9, #16
 800bcd0:	f109 0514 	add.w	r5, r9, #20
 800bcd4:	f104 0e14 	add.w	lr, r4, #20
 800bcd8:	f100 0b14 	add.w	fp, r0, #20
 800bcdc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bce0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bce4:	9301      	str	r3, [sp, #4]
 800bce6:	46d9      	mov	r9, fp
 800bce8:	f04f 0c00 	mov.w	ip, #0
 800bcec:	9b01      	ldr	r3, [sp, #4]
 800bcee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bcf2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bcf6:	9301      	str	r3, [sp, #4]
 800bcf8:	fa1f f38a 	uxth.w	r3, sl
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	b283      	uxth	r3, r0
 800bd00:	1acb      	subs	r3, r1, r3
 800bd02:	0c00      	lsrs	r0, r0, #16
 800bd04:	4463      	add	r3, ip
 800bd06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bd0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bd14:	4576      	cmp	r6, lr
 800bd16:	f849 3b04 	str.w	r3, [r9], #4
 800bd1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd1e:	d8e5      	bhi.n	800bcec <__mdiff+0x88>
 800bd20:	1b33      	subs	r3, r6, r4
 800bd22:	3b15      	subs	r3, #21
 800bd24:	f023 0303 	bic.w	r3, r3, #3
 800bd28:	3415      	adds	r4, #21
 800bd2a:	3304      	adds	r3, #4
 800bd2c:	42a6      	cmp	r6, r4
 800bd2e:	bf38      	it	cc
 800bd30:	2304      	movcc	r3, #4
 800bd32:	441d      	add	r5, r3
 800bd34:	445b      	add	r3, fp
 800bd36:	461e      	mov	r6, r3
 800bd38:	462c      	mov	r4, r5
 800bd3a:	4544      	cmp	r4, r8
 800bd3c:	d30e      	bcc.n	800bd5c <__mdiff+0xf8>
 800bd3e:	f108 0103 	add.w	r1, r8, #3
 800bd42:	1b49      	subs	r1, r1, r5
 800bd44:	f021 0103 	bic.w	r1, r1, #3
 800bd48:	3d03      	subs	r5, #3
 800bd4a:	45a8      	cmp	r8, r5
 800bd4c:	bf38      	it	cc
 800bd4e:	2100      	movcc	r1, #0
 800bd50:	440b      	add	r3, r1
 800bd52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd56:	b191      	cbz	r1, 800bd7e <__mdiff+0x11a>
 800bd58:	6117      	str	r7, [r2, #16]
 800bd5a:	e79d      	b.n	800bc98 <__mdiff+0x34>
 800bd5c:	f854 1b04 	ldr.w	r1, [r4], #4
 800bd60:	46e6      	mov	lr, ip
 800bd62:	0c08      	lsrs	r0, r1, #16
 800bd64:	fa1c fc81 	uxtah	ip, ip, r1
 800bd68:	4471      	add	r1, lr
 800bd6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bd6e:	b289      	uxth	r1, r1
 800bd70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bd74:	f846 1b04 	str.w	r1, [r6], #4
 800bd78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd7c:	e7dd      	b.n	800bd3a <__mdiff+0xd6>
 800bd7e:	3f01      	subs	r7, #1
 800bd80:	e7e7      	b.n	800bd52 <__mdiff+0xee>
 800bd82:	bf00      	nop
 800bd84:	0800cbd8 	.word	0x0800cbd8
 800bd88:	0800cbe9 	.word	0x0800cbe9

0800bd8c <__d2b>:
 800bd8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd90:	460f      	mov	r7, r1
 800bd92:	2101      	movs	r1, #1
 800bd94:	ec59 8b10 	vmov	r8, r9, d0
 800bd98:	4616      	mov	r6, r2
 800bd9a:	f7ff fccd 	bl	800b738 <_Balloc>
 800bd9e:	4604      	mov	r4, r0
 800bda0:	b930      	cbnz	r0, 800bdb0 <__d2b+0x24>
 800bda2:	4602      	mov	r2, r0
 800bda4:	4b23      	ldr	r3, [pc, #140]	@ (800be34 <__d2b+0xa8>)
 800bda6:	4824      	ldr	r0, [pc, #144]	@ (800be38 <__d2b+0xac>)
 800bda8:	f240 310f 	movw	r1, #783	@ 0x30f
 800bdac:	f000 fa74 	bl	800c298 <__assert_func>
 800bdb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bdb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bdb8:	b10d      	cbz	r5, 800bdbe <__d2b+0x32>
 800bdba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bdbe:	9301      	str	r3, [sp, #4]
 800bdc0:	f1b8 0300 	subs.w	r3, r8, #0
 800bdc4:	d023      	beq.n	800be0e <__d2b+0x82>
 800bdc6:	4668      	mov	r0, sp
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	f7ff fd7c 	bl	800b8c6 <__lo0bits>
 800bdce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bdd2:	b1d0      	cbz	r0, 800be0a <__d2b+0x7e>
 800bdd4:	f1c0 0320 	rsb	r3, r0, #32
 800bdd8:	fa02 f303 	lsl.w	r3, r2, r3
 800bddc:	430b      	orrs	r3, r1
 800bdde:	40c2      	lsrs	r2, r0
 800bde0:	6163      	str	r3, [r4, #20]
 800bde2:	9201      	str	r2, [sp, #4]
 800bde4:	9b01      	ldr	r3, [sp, #4]
 800bde6:	61a3      	str	r3, [r4, #24]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	bf0c      	ite	eq
 800bdec:	2201      	moveq	r2, #1
 800bdee:	2202      	movne	r2, #2
 800bdf0:	6122      	str	r2, [r4, #16]
 800bdf2:	b1a5      	cbz	r5, 800be1e <__d2b+0x92>
 800bdf4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bdf8:	4405      	add	r5, r0
 800bdfa:	603d      	str	r5, [r7, #0]
 800bdfc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800be00:	6030      	str	r0, [r6, #0]
 800be02:	4620      	mov	r0, r4
 800be04:	b003      	add	sp, #12
 800be06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be0a:	6161      	str	r1, [r4, #20]
 800be0c:	e7ea      	b.n	800bde4 <__d2b+0x58>
 800be0e:	a801      	add	r0, sp, #4
 800be10:	f7ff fd59 	bl	800b8c6 <__lo0bits>
 800be14:	9b01      	ldr	r3, [sp, #4]
 800be16:	6163      	str	r3, [r4, #20]
 800be18:	3020      	adds	r0, #32
 800be1a:	2201      	movs	r2, #1
 800be1c:	e7e8      	b.n	800bdf0 <__d2b+0x64>
 800be1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800be26:	6038      	str	r0, [r7, #0]
 800be28:	6918      	ldr	r0, [r3, #16]
 800be2a:	f7ff fd2d 	bl	800b888 <__hi0bits>
 800be2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be32:	e7e5      	b.n	800be00 <__d2b+0x74>
 800be34:	0800cbd8 	.word	0x0800cbd8
 800be38:	0800cbe9 	.word	0x0800cbe9

0800be3c <__ssputs_r>:
 800be3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be40:	688e      	ldr	r6, [r1, #8]
 800be42:	461f      	mov	r7, r3
 800be44:	42be      	cmp	r6, r7
 800be46:	680b      	ldr	r3, [r1, #0]
 800be48:	4682      	mov	sl, r0
 800be4a:	460c      	mov	r4, r1
 800be4c:	4690      	mov	r8, r2
 800be4e:	d82d      	bhi.n	800beac <__ssputs_r+0x70>
 800be50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800be58:	d026      	beq.n	800bea8 <__ssputs_r+0x6c>
 800be5a:	6965      	ldr	r5, [r4, #20]
 800be5c:	6909      	ldr	r1, [r1, #16]
 800be5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be62:	eba3 0901 	sub.w	r9, r3, r1
 800be66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be6a:	1c7b      	adds	r3, r7, #1
 800be6c:	444b      	add	r3, r9
 800be6e:	106d      	asrs	r5, r5, #1
 800be70:	429d      	cmp	r5, r3
 800be72:	bf38      	it	cc
 800be74:	461d      	movcc	r5, r3
 800be76:	0553      	lsls	r3, r2, #21
 800be78:	d527      	bpl.n	800beca <__ssputs_r+0x8e>
 800be7a:	4629      	mov	r1, r5
 800be7c:	f7ff fbd0 	bl	800b620 <_malloc_r>
 800be80:	4606      	mov	r6, r0
 800be82:	b360      	cbz	r0, 800bede <__ssputs_r+0xa2>
 800be84:	6921      	ldr	r1, [r4, #16]
 800be86:	464a      	mov	r2, r9
 800be88:	f7fe fcfb 	bl	800a882 <memcpy>
 800be8c:	89a3      	ldrh	r3, [r4, #12]
 800be8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800be92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be96:	81a3      	strh	r3, [r4, #12]
 800be98:	6126      	str	r6, [r4, #16]
 800be9a:	6165      	str	r5, [r4, #20]
 800be9c:	444e      	add	r6, r9
 800be9e:	eba5 0509 	sub.w	r5, r5, r9
 800bea2:	6026      	str	r6, [r4, #0]
 800bea4:	60a5      	str	r5, [r4, #8]
 800bea6:	463e      	mov	r6, r7
 800bea8:	42be      	cmp	r6, r7
 800beaa:	d900      	bls.n	800beae <__ssputs_r+0x72>
 800beac:	463e      	mov	r6, r7
 800beae:	6820      	ldr	r0, [r4, #0]
 800beb0:	4632      	mov	r2, r6
 800beb2:	4641      	mov	r1, r8
 800beb4:	f000 f9c6 	bl	800c244 <memmove>
 800beb8:	68a3      	ldr	r3, [r4, #8]
 800beba:	1b9b      	subs	r3, r3, r6
 800bebc:	60a3      	str	r3, [r4, #8]
 800bebe:	6823      	ldr	r3, [r4, #0]
 800bec0:	4433      	add	r3, r6
 800bec2:	6023      	str	r3, [r4, #0]
 800bec4:	2000      	movs	r0, #0
 800bec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beca:	462a      	mov	r2, r5
 800becc:	f000 fa28 	bl	800c320 <_realloc_r>
 800bed0:	4606      	mov	r6, r0
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d1e0      	bne.n	800be98 <__ssputs_r+0x5c>
 800bed6:	6921      	ldr	r1, [r4, #16]
 800bed8:	4650      	mov	r0, sl
 800beda:	f7ff fb2d 	bl	800b538 <_free_r>
 800bede:	230c      	movs	r3, #12
 800bee0:	f8ca 3000 	str.w	r3, [sl]
 800bee4:	89a3      	ldrh	r3, [r4, #12]
 800bee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beea:	81a3      	strh	r3, [r4, #12]
 800beec:	f04f 30ff 	mov.w	r0, #4294967295
 800bef0:	e7e9      	b.n	800bec6 <__ssputs_r+0x8a>
	...

0800bef4 <_svfiprintf_r>:
 800bef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef8:	4698      	mov	r8, r3
 800befa:	898b      	ldrh	r3, [r1, #12]
 800befc:	061b      	lsls	r3, r3, #24
 800befe:	b09d      	sub	sp, #116	@ 0x74
 800bf00:	4607      	mov	r7, r0
 800bf02:	460d      	mov	r5, r1
 800bf04:	4614      	mov	r4, r2
 800bf06:	d510      	bpl.n	800bf2a <_svfiprintf_r+0x36>
 800bf08:	690b      	ldr	r3, [r1, #16]
 800bf0a:	b973      	cbnz	r3, 800bf2a <_svfiprintf_r+0x36>
 800bf0c:	2140      	movs	r1, #64	@ 0x40
 800bf0e:	f7ff fb87 	bl	800b620 <_malloc_r>
 800bf12:	6028      	str	r0, [r5, #0]
 800bf14:	6128      	str	r0, [r5, #16]
 800bf16:	b930      	cbnz	r0, 800bf26 <_svfiprintf_r+0x32>
 800bf18:	230c      	movs	r3, #12
 800bf1a:	603b      	str	r3, [r7, #0]
 800bf1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf20:	b01d      	add	sp, #116	@ 0x74
 800bf22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf26:	2340      	movs	r3, #64	@ 0x40
 800bf28:	616b      	str	r3, [r5, #20]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf2e:	2320      	movs	r3, #32
 800bf30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf34:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf38:	2330      	movs	r3, #48	@ 0x30
 800bf3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c0d8 <_svfiprintf_r+0x1e4>
 800bf3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf42:	f04f 0901 	mov.w	r9, #1
 800bf46:	4623      	mov	r3, r4
 800bf48:	469a      	mov	sl, r3
 800bf4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf4e:	b10a      	cbz	r2, 800bf54 <_svfiprintf_r+0x60>
 800bf50:	2a25      	cmp	r2, #37	@ 0x25
 800bf52:	d1f9      	bne.n	800bf48 <_svfiprintf_r+0x54>
 800bf54:	ebba 0b04 	subs.w	fp, sl, r4
 800bf58:	d00b      	beq.n	800bf72 <_svfiprintf_r+0x7e>
 800bf5a:	465b      	mov	r3, fp
 800bf5c:	4622      	mov	r2, r4
 800bf5e:	4629      	mov	r1, r5
 800bf60:	4638      	mov	r0, r7
 800bf62:	f7ff ff6b 	bl	800be3c <__ssputs_r>
 800bf66:	3001      	adds	r0, #1
 800bf68:	f000 80a7 	beq.w	800c0ba <_svfiprintf_r+0x1c6>
 800bf6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf6e:	445a      	add	r2, fp
 800bf70:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf72:	f89a 3000 	ldrb.w	r3, [sl]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f000 809f 	beq.w	800c0ba <_svfiprintf_r+0x1c6>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf86:	f10a 0a01 	add.w	sl, sl, #1
 800bf8a:	9304      	str	r3, [sp, #16]
 800bf8c:	9307      	str	r3, [sp, #28]
 800bf8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf92:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf94:	4654      	mov	r4, sl
 800bf96:	2205      	movs	r2, #5
 800bf98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf9c:	484e      	ldr	r0, [pc, #312]	@ (800c0d8 <_svfiprintf_r+0x1e4>)
 800bf9e:	f7f4 f96f 	bl	8000280 <memchr>
 800bfa2:	9a04      	ldr	r2, [sp, #16]
 800bfa4:	b9d8      	cbnz	r0, 800bfde <_svfiprintf_r+0xea>
 800bfa6:	06d0      	lsls	r0, r2, #27
 800bfa8:	bf44      	itt	mi
 800bfaa:	2320      	movmi	r3, #32
 800bfac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfb0:	0711      	lsls	r1, r2, #28
 800bfb2:	bf44      	itt	mi
 800bfb4:	232b      	movmi	r3, #43	@ 0x2b
 800bfb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfba:	f89a 3000 	ldrb.w	r3, [sl]
 800bfbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfc0:	d015      	beq.n	800bfee <_svfiprintf_r+0xfa>
 800bfc2:	9a07      	ldr	r2, [sp, #28]
 800bfc4:	4654      	mov	r4, sl
 800bfc6:	2000      	movs	r0, #0
 800bfc8:	f04f 0c0a 	mov.w	ip, #10
 800bfcc:	4621      	mov	r1, r4
 800bfce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfd2:	3b30      	subs	r3, #48	@ 0x30
 800bfd4:	2b09      	cmp	r3, #9
 800bfd6:	d94b      	bls.n	800c070 <_svfiprintf_r+0x17c>
 800bfd8:	b1b0      	cbz	r0, 800c008 <_svfiprintf_r+0x114>
 800bfda:	9207      	str	r2, [sp, #28]
 800bfdc:	e014      	b.n	800c008 <_svfiprintf_r+0x114>
 800bfde:	eba0 0308 	sub.w	r3, r0, r8
 800bfe2:	fa09 f303 	lsl.w	r3, r9, r3
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	9304      	str	r3, [sp, #16]
 800bfea:	46a2      	mov	sl, r4
 800bfec:	e7d2      	b.n	800bf94 <_svfiprintf_r+0xa0>
 800bfee:	9b03      	ldr	r3, [sp, #12]
 800bff0:	1d19      	adds	r1, r3, #4
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	9103      	str	r1, [sp, #12]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	bfbb      	ittet	lt
 800bffa:	425b      	neglt	r3, r3
 800bffc:	f042 0202 	orrlt.w	r2, r2, #2
 800c000:	9307      	strge	r3, [sp, #28]
 800c002:	9307      	strlt	r3, [sp, #28]
 800c004:	bfb8      	it	lt
 800c006:	9204      	strlt	r2, [sp, #16]
 800c008:	7823      	ldrb	r3, [r4, #0]
 800c00a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c00c:	d10a      	bne.n	800c024 <_svfiprintf_r+0x130>
 800c00e:	7863      	ldrb	r3, [r4, #1]
 800c010:	2b2a      	cmp	r3, #42	@ 0x2a
 800c012:	d132      	bne.n	800c07a <_svfiprintf_r+0x186>
 800c014:	9b03      	ldr	r3, [sp, #12]
 800c016:	1d1a      	adds	r2, r3, #4
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	9203      	str	r2, [sp, #12]
 800c01c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c020:	3402      	adds	r4, #2
 800c022:	9305      	str	r3, [sp, #20]
 800c024:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c0e8 <_svfiprintf_r+0x1f4>
 800c028:	7821      	ldrb	r1, [r4, #0]
 800c02a:	2203      	movs	r2, #3
 800c02c:	4650      	mov	r0, sl
 800c02e:	f7f4 f927 	bl	8000280 <memchr>
 800c032:	b138      	cbz	r0, 800c044 <_svfiprintf_r+0x150>
 800c034:	9b04      	ldr	r3, [sp, #16]
 800c036:	eba0 000a 	sub.w	r0, r0, sl
 800c03a:	2240      	movs	r2, #64	@ 0x40
 800c03c:	4082      	lsls	r2, r0
 800c03e:	4313      	orrs	r3, r2
 800c040:	3401      	adds	r4, #1
 800c042:	9304      	str	r3, [sp, #16]
 800c044:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c048:	4824      	ldr	r0, [pc, #144]	@ (800c0dc <_svfiprintf_r+0x1e8>)
 800c04a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c04e:	2206      	movs	r2, #6
 800c050:	f7f4 f916 	bl	8000280 <memchr>
 800c054:	2800      	cmp	r0, #0
 800c056:	d036      	beq.n	800c0c6 <_svfiprintf_r+0x1d2>
 800c058:	4b21      	ldr	r3, [pc, #132]	@ (800c0e0 <_svfiprintf_r+0x1ec>)
 800c05a:	bb1b      	cbnz	r3, 800c0a4 <_svfiprintf_r+0x1b0>
 800c05c:	9b03      	ldr	r3, [sp, #12]
 800c05e:	3307      	adds	r3, #7
 800c060:	f023 0307 	bic.w	r3, r3, #7
 800c064:	3308      	adds	r3, #8
 800c066:	9303      	str	r3, [sp, #12]
 800c068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c06a:	4433      	add	r3, r6
 800c06c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c06e:	e76a      	b.n	800bf46 <_svfiprintf_r+0x52>
 800c070:	fb0c 3202 	mla	r2, ip, r2, r3
 800c074:	460c      	mov	r4, r1
 800c076:	2001      	movs	r0, #1
 800c078:	e7a8      	b.n	800bfcc <_svfiprintf_r+0xd8>
 800c07a:	2300      	movs	r3, #0
 800c07c:	3401      	adds	r4, #1
 800c07e:	9305      	str	r3, [sp, #20]
 800c080:	4619      	mov	r1, r3
 800c082:	f04f 0c0a 	mov.w	ip, #10
 800c086:	4620      	mov	r0, r4
 800c088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c08c:	3a30      	subs	r2, #48	@ 0x30
 800c08e:	2a09      	cmp	r2, #9
 800c090:	d903      	bls.n	800c09a <_svfiprintf_r+0x1a6>
 800c092:	2b00      	cmp	r3, #0
 800c094:	d0c6      	beq.n	800c024 <_svfiprintf_r+0x130>
 800c096:	9105      	str	r1, [sp, #20]
 800c098:	e7c4      	b.n	800c024 <_svfiprintf_r+0x130>
 800c09a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c09e:	4604      	mov	r4, r0
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e7f0      	b.n	800c086 <_svfiprintf_r+0x192>
 800c0a4:	ab03      	add	r3, sp, #12
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	462a      	mov	r2, r5
 800c0aa:	4b0e      	ldr	r3, [pc, #56]	@ (800c0e4 <_svfiprintf_r+0x1f0>)
 800c0ac:	a904      	add	r1, sp, #16
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	f7fd fe6c 	bl	8009d8c <_printf_float>
 800c0b4:	1c42      	adds	r2, r0, #1
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	d1d6      	bne.n	800c068 <_svfiprintf_r+0x174>
 800c0ba:	89ab      	ldrh	r3, [r5, #12]
 800c0bc:	065b      	lsls	r3, r3, #25
 800c0be:	f53f af2d 	bmi.w	800bf1c <_svfiprintf_r+0x28>
 800c0c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0c4:	e72c      	b.n	800bf20 <_svfiprintf_r+0x2c>
 800c0c6:	ab03      	add	r3, sp, #12
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	462a      	mov	r2, r5
 800c0cc:	4b05      	ldr	r3, [pc, #20]	@ (800c0e4 <_svfiprintf_r+0x1f0>)
 800c0ce:	a904      	add	r1, sp, #16
 800c0d0:	4638      	mov	r0, r7
 800c0d2:	f7fe f8f3 	bl	800a2bc <_printf_i>
 800c0d6:	e7ed      	b.n	800c0b4 <_svfiprintf_r+0x1c0>
 800c0d8:	0800cd40 	.word	0x0800cd40
 800c0dc:	0800cd4a 	.word	0x0800cd4a
 800c0e0:	08009d8d 	.word	0x08009d8d
 800c0e4:	0800be3d 	.word	0x0800be3d
 800c0e8:	0800cd46 	.word	0x0800cd46

0800c0ec <__sflush_r>:
 800c0ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f4:	0716      	lsls	r6, r2, #28
 800c0f6:	4605      	mov	r5, r0
 800c0f8:	460c      	mov	r4, r1
 800c0fa:	d454      	bmi.n	800c1a6 <__sflush_r+0xba>
 800c0fc:	684b      	ldr	r3, [r1, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	dc02      	bgt.n	800c108 <__sflush_r+0x1c>
 800c102:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c104:	2b00      	cmp	r3, #0
 800c106:	dd48      	ble.n	800c19a <__sflush_r+0xae>
 800c108:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c10a:	2e00      	cmp	r6, #0
 800c10c:	d045      	beq.n	800c19a <__sflush_r+0xae>
 800c10e:	2300      	movs	r3, #0
 800c110:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c114:	682f      	ldr	r7, [r5, #0]
 800c116:	6a21      	ldr	r1, [r4, #32]
 800c118:	602b      	str	r3, [r5, #0]
 800c11a:	d030      	beq.n	800c17e <__sflush_r+0x92>
 800c11c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c11e:	89a3      	ldrh	r3, [r4, #12]
 800c120:	0759      	lsls	r1, r3, #29
 800c122:	d505      	bpl.n	800c130 <__sflush_r+0x44>
 800c124:	6863      	ldr	r3, [r4, #4]
 800c126:	1ad2      	subs	r2, r2, r3
 800c128:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c12a:	b10b      	cbz	r3, 800c130 <__sflush_r+0x44>
 800c12c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c12e:	1ad2      	subs	r2, r2, r3
 800c130:	2300      	movs	r3, #0
 800c132:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c134:	6a21      	ldr	r1, [r4, #32]
 800c136:	4628      	mov	r0, r5
 800c138:	47b0      	blx	r6
 800c13a:	1c43      	adds	r3, r0, #1
 800c13c:	89a3      	ldrh	r3, [r4, #12]
 800c13e:	d106      	bne.n	800c14e <__sflush_r+0x62>
 800c140:	6829      	ldr	r1, [r5, #0]
 800c142:	291d      	cmp	r1, #29
 800c144:	d82b      	bhi.n	800c19e <__sflush_r+0xb2>
 800c146:	4a2a      	ldr	r2, [pc, #168]	@ (800c1f0 <__sflush_r+0x104>)
 800c148:	410a      	asrs	r2, r1
 800c14a:	07d6      	lsls	r6, r2, #31
 800c14c:	d427      	bmi.n	800c19e <__sflush_r+0xb2>
 800c14e:	2200      	movs	r2, #0
 800c150:	6062      	str	r2, [r4, #4]
 800c152:	04d9      	lsls	r1, r3, #19
 800c154:	6922      	ldr	r2, [r4, #16]
 800c156:	6022      	str	r2, [r4, #0]
 800c158:	d504      	bpl.n	800c164 <__sflush_r+0x78>
 800c15a:	1c42      	adds	r2, r0, #1
 800c15c:	d101      	bne.n	800c162 <__sflush_r+0x76>
 800c15e:	682b      	ldr	r3, [r5, #0]
 800c160:	b903      	cbnz	r3, 800c164 <__sflush_r+0x78>
 800c162:	6560      	str	r0, [r4, #84]	@ 0x54
 800c164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c166:	602f      	str	r7, [r5, #0]
 800c168:	b1b9      	cbz	r1, 800c19a <__sflush_r+0xae>
 800c16a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c16e:	4299      	cmp	r1, r3
 800c170:	d002      	beq.n	800c178 <__sflush_r+0x8c>
 800c172:	4628      	mov	r0, r5
 800c174:	f7ff f9e0 	bl	800b538 <_free_r>
 800c178:	2300      	movs	r3, #0
 800c17a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c17c:	e00d      	b.n	800c19a <__sflush_r+0xae>
 800c17e:	2301      	movs	r3, #1
 800c180:	4628      	mov	r0, r5
 800c182:	47b0      	blx	r6
 800c184:	4602      	mov	r2, r0
 800c186:	1c50      	adds	r0, r2, #1
 800c188:	d1c9      	bne.n	800c11e <__sflush_r+0x32>
 800c18a:	682b      	ldr	r3, [r5, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d0c6      	beq.n	800c11e <__sflush_r+0x32>
 800c190:	2b1d      	cmp	r3, #29
 800c192:	d001      	beq.n	800c198 <__sflush_r+0xac>
 800c194:	2b16      	cmp	r3, #22
 800c196:	d11e      	bne.n	800c1d6 <__sflush_r+0xea>
 800c198:	602f      	str	r7, [r5, #0]
 800c19a:	2000      	movs	r0, #0
 800c19c:	e022      	b.n	800c1e4 <__sflush_r+0xf8>
 800c19e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1a2:	b21b      	sxth	r3, r3
 800c1a4:	e01b      	b.n	800c1de <__sflush_r+0xf2>
 800c1a6:	690f      	ldr	r7, [r1, #16]
 800c1a8:	2f00      	cmp	r7, #0
 800c1aa:	d0f6      	beq.n	800c19a <__sflush_r+0xae>
 800c1ac:	0793      	lsls	r3, r2, #30
 800c1ae:	680e      	ldr	r6, [r1, #0]
 800c1b0:	bf08      	it	eq
 800c1b2:	694b      	ldreq	r3, [r1, #20]
 800c1b4:	600f      	str	r7, [r1, #0]
 800c1b6:	bf18      	it	ne
 800c1b8:	2300      	movne	r3, #0
 800c1ba:	eba6 0807 	sub.w	r8, r6, r7
 800c1be:	608b      	str	r3, [r1, #8]
 800c1c0:	f1b8 0f00 	cmp.w	r8, #0
 800c1c4:	dde9      	ble.n	800c19a <__sflush_r+0xae>
 800c1c6:	6a21      	ldr	r1, [r4, #32]
 800c1c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c1ca:	4643      	mov	r3, r8
 800c1cc:	463a      	mov	r2, r7
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	47b0      	blx	r6
 800c1d2:	2800      	cmp	r0, #0
 800c1d4:	dc08      	bgt.n	800c1e8 <__sflush_r+0xfc>
 800c1d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1de:	81a3      	strh	r3, [r4, #12]
 800c1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1e8:	4407      	add	r7, r0
 800c1ea:	eba8 0800 	sub.w	r8, r8, r0
 800c1ee:	e7e7      	b.n	800c1c0 <__sflush_r+0xd4>
 800c1f0:	dfbffffe 	.word	0xdfbffffe

0800c1f4 <_fflush_r>:
 800c1f4:	b538      	push	{r3, r4, r5, lr}
 800c1f6:	690b      	ldr	r3, [r1, #16]
 800c1f8:	4605      	mov	r5, r0
 800c1fa:	460c      	mov	r4, r1
 800c1fc:	b913      	cbnz	r3, 800c204 <_fflush_r+0x10>
 800c1fe:	2500      	movs	r5, #0
 800c200:	4628      	mov	r0, r5
 800c202:	bd38      	pop	{r3, r4, r5, pc}
 800c204:	b118      	cbz	r0, 800c20e <_fflush_r+0x1a>
 800c206:	6a03      	ldr	r3, [r0, #32]
 800c208:	b90b      	cbnz	r3, 800c20e <_fflush_r+0x1a>
 800c20a:	f7fe fa03 	bl	800a614 <__sinit>
 800c20e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d0f3      	beq.n	800c1fe <_fflush_r+0xa>
 800c216:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c218:	07d0      	lsls	r0, r2, #31
 800c21a:	d404      	bmi.n	800c226 <_fflush_r+0x32>
 800c21c:	0599      	lsls	r1, r3, #22
 800c21e:	d402      	bmi.n	800c226 <_fflush_r+0x32>
 800c220:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c222:	f7fe fb2c 	bl	800a87e <__retarget_lock_acquire_recursive>
 800c226:	4628      	mov	r0, r5
 800c228:	4621      	mov	r1, r4
 800c22a:	f7ff ff5f 	bl	800c0ec <__sflush_r>
 800c22e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c230:	07da      	lsls	r2, r3, #31
 800c232:	4605      	mov	r5, r0
 800c234:	d4e4      	bmi.n	800c200 <_fflush_r+0xc>
 800c236:	89a3      	ldrh	r3, [r4, #12]
 800c238:	059b      	lsls	r3, r3, #22
 800c23a:	d4e1      	bmi.n	800c200 <_fflush_r+0xc>
 800c23c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c23e:	f7fe fb1f 	bl	800a880 <__retarget_lock_release_recursive>
 800c242:	e7dd      	b.n	800c200 <_fflush_r+0xc>

0800c244 <memmove>:
 800c244:	4288      	cmp	r0, r1
 800c246:	b510      	push	{r4, lr}
 800c248:	eb01 0402 	add.w	r4, r1, r2
 800c24c:	d902      	bls.n	800c254 <memmove+0x10>
 800c24e:	4284      	cmp	r4, r0
 800c250:	4623      	mov	r3, r4
 800c252:	d807      	bhi.n	800c264 <memmove+0x20>
 800c254:	1e43      	subs	r3, r0, #1
 800c256:	42a1      	cmp	r1, r4
 800c258:	d008      	beq.n	800c26c <memmove+0x28>
 800c25a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c25e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c262:	e7f8      	b.n	800c256 <memmove+0x12>
 800c264:	4402      	add	r2, r0
 800c266:	4601      	mov	r1, r0
 800c268:	428a      	cmp	r2, r1
 800c26a:	d100      	bne.n	800c26e <memmove+0x2a>
 800c26c:	bd10      	pop	{r4, pc}
 800c26e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c272:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c276:	e7f7      	b.n	800c268 <memmove+0x24>

0800c278 <_sbrk_r>:
 800c278:	b538      	push	{r3, r4, r5, lr}
 800c27a:	4d06      	ldr	r5, [pc, #24]	@ (800c294 <_sbrk_r+0x1c>)
 800c27c:	2300      	movs	r3, #0
 800c27e:	4604      	mov	r4, r0
 800c280:	4608      	mov	r0, r1
 800c282:	602b      	str	r3, [r5, #0]
 800c284:	f7f5 fd4e 	bl	8001d24 <_sbrk>
 800c288:	1c43      	adds	r3, r0, #1
 800c28a:	d102      	bne.n	800c292 <_sbrk_r+0x1a>
 800c28c:	682b      	ldr	r3, [r5, #0]
 800c28e:	b103      	cbz	r3, 800c292 <_sbrk_r+0x1a>
 800c290:	6023      	str	r3, [r4, #0]
 800c292:	bd38      	pop	{r3, r4, r5, pc}
 800c294:	200148c8 	.word	0x200148c8

0800c298 <__assert_func>:
 800c298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c29a:	4614      	mov	r4, r2
 800c29c:	461a      	mov	r2, r3
 800c29e:	4b09      	ldr	r3, [pc, #36]	@ (800c2c4 <__assert_func+0x2c>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	68d8      	ldr	r0, [r3, #12]
 800c2a6:	b954      	cbnz	r4, 800c2be <__assert_func+0x26>
 800c2a8:	4b07      	ldr	r3, [pc, #28]	@ (800c2c8 <__assert_func+0x30>)
 800c2aa:	461c      	mov	r4, r3
 800c2ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2b0:	9100      	str	r1, [sp, #0]
 800c2b2:	462b      	mov	r3, r5
 800c2b4:	4905      	ldr	r1, [pc, #20]	@ (800c2cc <__assert_func+0x34>)
 800c2b6:	f000 f86f 	bl	800c398 <fiprintf>
 800c2ba:	f000 f87f 	bl	800c3bc <abort>
 800c2be:	4b04      	ldr	r3, [pc, #16]	@ (800c2d0 <__assert_func+0x38>)
 800c2c0:	e7f4      	b.n	800c2ac <__assert_func+0x14>
 800c2c2:	bf00      	nop
 800c2c4:	20000040 	.word	0x20000040
 800c2c8:	0800cd96 	.word	0x0800cd96
 800c2cc:	0800cd68 	.word	0x0800cd68
 800c2d0:	0800cd5b 	.word	0x0800cd5b

0800c2d4 <_calloc_r>:
 800c2d4:	b570      	push	{r4, r5, r6, lr}
 800c2d6:	fba1 5402 	umull	r5, r4, r1, r2
 800c2da:	b93c      	cbnz	r4, 800c2ec <_calloc_r+0x18>
 800c2dc:	4629      	mov	r1, r5
 800c2de:	f7ff f99f 	bl	800b620 <_malloc_r>
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	b928      	cbnz	r0, 800c2f2 <_calloc_r+0x1e>
 800c2e6:	2600      	movs	r6, #0
 800c2e8:	4630      	mov	r0, r6
 800c2ea:	bd70      	pop	{r4, r5, r6, pc}
 800c2ec:	220c      	movs	r2, #12
 800c2ee:	6002      	str	r2, [r0, #0]
 800c2f0:	e7f9      	b.n	800c2e6 <_calloc_r+0x12>
 800c2f2:	462a      	mov	r2, r5
 800c2f4:	4621      	mov	r1, r4
 800c2f6:	f7fe fa57 	bl	800a7a8 <memset>
 800c2fa:	e7f5      	b.n	800c2e8 <_calloc_r+0x14>

0800c2fc <__ascii_mbtowc>:
 800c2fc:	b082      	sub	sp, #8
 800c2fe:	b901      	cbnz	r1, 800c302 <__ascii_mbtowc+0x6>
 800c300:	a901      	add	r1, sp, #4
 800c302:	b142      	cbz	r2, 800c316 <__ascii_mbtowc+0x1a>
 800c304:	b14b      	cbz	r3, 800c31a <__ascii_mbtowc+0x1e>
 800c306:	7813      	ldrb	r3, [r2, #0]
 800c308:	600b      	str	r3, [r1, #0]
 800c30a:	7812      	ldrb	r2, [r2, #0]
 800c30c:	1e10      	subs	r0, r2, #0
 800c30e:	bf18      	it	ne
 800c310:	2001      	movne	r0, #1
 800c312:	b002      	add	sp, #8
 800c314:	4770      	bx	lr
 800c316:	4610      	mov	r0, r2
 800c318:	e7fb      	b.n	800c312 <__ascii_mbtowc+0x16>
 800c31a:	f06f 0001 	mvn.w	r0, #1
 800c31e:	e7f8      	b.n	800c312 <__ascii_mbtowc+0x16>

0800c320 <_realloc_r>:
 800c320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c324:	4680      	mov	r8, r0
 800c326:	4615      	mov	r5, r2
 800c328:	460c      	mov	r4, r1
 800c32a:	b921      	cbnz	r1, 800c336 <_realloc_r+0x16>
 800c32c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c330:	4611      	mov	r1, r2
 800c332:	f7ff b975 	b.w	800b620 <_malloc_r>
 800c336:	b92a      	cbnz	r2, 800c344 <_realloc_r+0x24>
 800c338:	f7ff f8fe 	bl	800b538 <_free_r>
 800c33c:	2400      	movs	r4, #0
 800c33e:	4620      	mov	r0, r4
 800c340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c344:	f000 f841 	bl	800c3ca <_malloc_usable_size_r>
 800c348:	4285      	cmp	r5, r0
 800c34a:	4606      	mov	r6, r0
 800c34c:	d802      	bhi.n	800c354 <_realloc_r+0x34>
 800c34e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c352:	d8f4      	bhi.n	800c33e <_realloc_r+0x1e>
 800c354:	4629      	mov	r1, r5
 800c356:	4640      	mov	r0, r8
 800c358:	f7ff f962 	bl	800b620 <_malloc_r>
 800c35c:	4607      	mov	r7, r0
 800c35e:	2800      	cmp	r0, #0
 800c360:	d0ec      	beq.n	800c33c <_realloc_r+0x1c>
 800c362:	42b5      	cmp	r5, r6
 800c364:	462a      	mov	r2, r5
 800c366:	4621      	mov	r1, r4
 800c368:	bf28      	it	cs
 800c36a:	4632      	movcs	r2, r6
 800c36c:	f7fe fa89 	bl	800a882 <memcpy>
 800c370:	4621      	mov	r1, r4
 800c372:	4640      	mov	r0, r8
 800c374:	f7ff f8e0 	bl	800b538 <_free_r>
 800c378:	463c      	mov	r4, r7
 800c37a:	e7e0      	b.n	800c33e <_realloc_r+0x1e>

0800c37c <__ascii_wctomb>:
 800c37c:	4603      	mov	r3, r0
 800c37e:	4608      	mov	r0, r1
 800c380:	b141      	cbz	r1, 800c394 <__ascii_wctomb+0x18>
 800c382:	2aff      	cmp	r2, #255	@ 0xff
 800c384:	d904      	bls.n	800c390 <__ascii_wctomb+0x14>
 800c386:	228a      	movs	r2, #138	@ 0x8a
 800c388:	601a      	str	r2, [r3, #0]
 800c38a:	f04f 30ff 	mov.w	r0, #4294967295
 800c38e:	4770      	bx	lr
 800c390:	700a      	strb	r2, [r1, #0]
 800c392:	2001      	movs	r0, #1
 800c394:	4770      	bx	lr
	...

0800c398 <fiprintf>:
 800c398:	b40e      	push	{r1, r2, r3}
 800c39a:	b503      	push	{r0, r1, lr}
 800c39c:	4601      	mov	r1, r0
 800c39e:	ab03      	add	r3, sp, #12
 800c3a0:	4805      	ldr	r0, [pc, #20]	@ (800c3b8 <fiprintf+0x20>)
 800c3a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3a6:	6800      	ldr	r0, [r0, #0]
 800c3a8:	9301      	str	r3, [sp, #4]
 800c3aa:	f000 f83f 	bl	800c42c <_vfiprintf_r>
 800c3ae:	b002      	add	sp, #8
 800c3b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3b4:	b003      	add	sp, #12
 800c3b6:	4770      	bx	lr
 800c3b8:	20000040 	.word	0x20000040

0800c3bc <abort>:
 800c3bc:	b508      	push	{r3, lr}
 800c3be:	2006      	movs	r0, #6
 800c3c0:	f000 fa08 	bl	800c7d4 <raise>
 800c3c4:	2001      	movs	r0, #1
 800c3c6:	f7f5 fc51 	bl	8001c6c <_exit>

0800c3ca <_malloc_usable_size_r>:
 800c3ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3ce:	1f18      	subs	r0, r3, #4
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	bfbc      	itt	lt
 800c3d4:	580b      	ldrlt	r3, [r1, r0]
 800c3d6:	18c0      	addlt	r0, r0, r3
 800c3d8:	4770      	bx	lr

0800c3da <__sfputc_r>:
 800c3da:	6893      	ldr	r3, [r2, #8]
 800c3dc:	3b01      	subs	r3, #1
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	b410      	push	{r4}
 800c3e2:	6093      	str	r3, [r2, #8]
 800c3e4:	da08      	bge.n	800c3f8 <__sfputc_r+0x1e>
 800c3e6:	6994      	ldr	r4, [r2, #24]
 800c3e8:	42a3      	cmp	r3, r4
 800c3ea:	db01      	blt.n	800c3f0 <__sfputc_r+0x16>
 800c3ec:	290a      	cmp	r1, #10
 800c3ee:	d103      	bne.n	800c3f8 <__sfputc_r+0x1e>
 800c3f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3f4:	f000 b932 	b.w	800c65c <__swbuf_r>
 800c3f8:	6813      	ldr	r3, [r2, #0]
 800c3fa:	1c58      	adds	r0, r3, #1
 800c3fc:	6010      	str	r0, [r2, #0]
 800c3fe:	7019      	strb	r1, [r3, #0]
 800c400:	4608      	mov	r0, r1
 800c402:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <__sfputs_r>:
 800c408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c40a:	4606      	mov	r6, r0
 800c40c:	460f      	mov	r7, r1
 800c40e:	4614      	mov	r4, r2
 800c410:	18d5      	adds	r5, r2, r3
 800c412:	42ac      	cmp	r4, r5
 800c414:	d101      	bne.n	800c41a <__sfputs_r+0x12>
 800c416:	2000      	movs	r0, #0
 800c418:	e007      	b.n	800c42a <__sfputs_r+0x22>
 800c41a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c41e:	463a      	mov	r2, r7
 800c420:	4630      	mov	r0, r6
 800c422:	f7ff ffda 	bl	800c3da <__sfputc_r>
 800c426:	1c43      	adds	r3, r0, #1
 800c428:	d1f3      	bne.n	800c412 <__sfputs_r+0xa>
 800c42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c42c <_vfiprintf_r>:
 800c42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c430:	460d      	mov	r5, r1
 800c432:	b09d      	sub	sp, #116	@ 0x74
 800c434:	4614      	mov	r4, r2
 800c436:	4698      	mov	r8, r3
 800c438:	4606      	mov	r6, r0
 800c43a:	b118      	cbz	r0, 800c444 <_vfiprintf_r+0x18>
 800c43c:	6a03      	ldr	r3, [r0, #32]
 800c43e:	b90b      	cbnz	r3, 800c444 <_vfiprintf_r+0x18>
 800c440:	f7fe f8e8 	bl	800a614 <__sinit>
 800c444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c446:	07d9      	lsls	r1, r3, #31
 800c448:	d405      	bmi.n	800c456 <_vfiprintf_r+0x2a>
 800c44a:	89ab      	ldrh	r3, [r5, #12]
 800c44c:	059a      	lsls	r2, r3, #22
 800c44e:	d402      	bmi.n	800c456 <_vfiprintf_r+0x2a>
 800c450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c452:	f7fe fa14 	bl	800a87e <__retarget_lock_acquire_recursive>
 800c456:	89ab      	ldrh	r3, [r5, #12]
 800c458:	071b      	lsls	r3, r3, #28
 800c45a:	d501      	bpl.n	800c460 <_vfiprintf_r+0x34>
 800c45c:	692b      	ldr	r3, [r5, #16]
 800c45e:	b99b      	cbnz	r3, 800c488 <_vfiprintf_r+0x5c>
 800c460:	4629      	mov	r1, r5
 800c462:	4630      	mov	r0, r6
 800c464:	f000 f938 	bl	800c6d8 <__swsetup_r>
 800c468:	b170      	cbz	r0, 800c488 <_vfiprintf_r+0x5c>
 800c46a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c46c:	07dc      	lsls	r4, r3, #31
 800c46e:	d504      	bpl.n	800c47a <_vfiprintf_r+0x4e>
 800c470:	f04f 30ff 	mov.w	r0, #4294967295
 800c474:	b01d      	add	sp, #116	@ 0x74
 800c476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c47a:	89ab      	ldrh	r3, [r5, #12]
 800c47c:	0598      	lsls	r0, r3, #22
 800c47e:	d4f7      	bmi.n	800c470 <_vfiprintf_r+0x44>
 800c480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c482:	f7fe f9fd 	bl	800a880 <__retarget_lock_release_recursive>
 800c486:	e7f3      	b.n	800c470 <_vfiprintf_r+0x44>
 800c488:	2300      	movs	r3, #0
 800c48a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c48c:	2320      	movs	r3, #32
 800c48e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c492:	f8cd 800c 	str.w	r8, [sp, #12]
 800c496:	2330      	movs	r3, #48	@ 0x30
 800c498:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c648 <_vfiprintf_r+0x21c>
 800c49c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4a0:	f04f 0901 	mov.w	r9, #1
 800c4a4:	4623      	mov	r3, r4
 800c4a6:	469a      	mov	sl, r3
 800c4a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4ac:	b10a      	cbz	r2, 800c4b2 <_vfiprintf_r+0x86>
 800c4ae:	2a25      	cmp	r2, #37	@ 0x25
 800c4b0:	d1f9      	bne.n	800c4a6 <_vfiprintf_r+0x7a>
 800c4b2:	ebba 0b04 	subs.w	fp, sl, r4
 800c4b6:	d00b      	beq.n	800c4d0 <_vfiprintf_r+0xa4>
 800c4b8:	465b      	mov	r3, fp
 800c4ba:	4622      	mov	r2, r4
 800c4bc:	4629      	mov	r1, r5
 800c4be:	4630      	mov	r0, r6
 800c4c0:	f7ff ffa2 	bl	800c408 <__sfputs_r>
 800c4c4:	3001      	adds	r0, #1
 800c4c6:	f000 80a7 	beq.w	800c618 <_vfiprintf_r+0x1ec>
 800c4ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4cc:	445a      	add	r2, fp
 800c4ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f000 809f 	beq.w	800c618 <_vfiprintf_r+0x1ec>
 800c4da:	2300      	movs	r3, #0
 800c4dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c4e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4e4:	f10a 0a01 	add.w	sl, sl, #1
 800c4e8:	9304      	str	r3, [sp, #16]
 800c4ea:	9307      	str	r3, [sp, #28]
 800c4ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c4f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c4f2:	4654      	mov	r4, sl
 800c4f4:	2205      	movs	r2, #5
 800c4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4fa:	4853      	ldr	r0, [pc, #332]	@ (800c648 <_vfiprintf_r+0x21c>)
 800c4fc:	f7f3 fec0 	bl	8000280 <memchr>
 800c500:	9a04      	ldr	r2, [sp, #16]
 800c502:	b9d8      	cbnz	r0, 800c53c <_vfiprintf_r+0x110>
 800c504:	06d1      	lsls	r1, r2, #27
 800c506:	bf44      	itt	mi
 800c508:	2320      	movmi	r3, #32
 800c50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c50e:	0713      	lsls	r3, r2, #28
 800c510:	bf44      	itt	mi
 800c512:	232b      	movmi	r3, #43	@ 0x2b
 800c514:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c518:	f89a 3000 	ldrb.w	r3, [sl]
 800c51c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c51e:	d015      	beq.n	800c54c <_vfiprintf_r+0x120>
 800c520:	9a07      	ldr	r2, [sp, #28]
 800c522:	4654      	mov	r4, sl
 800c524:	2000      	movs	r0, #0
 800c526:	f04f 0c0a 	mov.w	ip, #10
 800c52a:	4621      	mov	r1, r4
 800c52c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c530:	3b30      	subs	r3, #48	@ 0x30
 800c532:	2b09      	cmp	r3, #9
 800c534:	d94b      	bls.n	800c5ce <_vfiprintf_r+0x1a2>
 800c536:	b1b0      	cbz	r0, 800c566 <_vfiprintf_r+0x13a>
 800c538:	9207      	str	r2, [sp, #28]
 800c53a:	e014      	b.n	800c566 <_vfiprintf_r+0x13a>
 800c53c:	eba0 0308 	sub.w	r3, r0, r8
 800c540:	fa09 f303 	lsl.w	r3, r9, r3
 800c544:	4313      	orrs	r3, r2
 800c546:	9304      	str	r3, [sp, #16]
 800c548:	46a2      	mov	sl, r4
 800c54a:	e7d2      	b.n	800c4f2 <_vfiprintf_r+0xc6>
 800c54c:	9b03      	ldr	r3, [sp, #12]
 800c54e:	1d19      	adds	r1, r3, #4
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	9103      	str	r1, [sp, #12]
 800c554:	2b00      	cmp	r3, #0
 800c556:	bfbb      	ittet	lt
 800c558:	425b      	neglt	r3, r3
 800c55a:	f042 0202 	orrlt.w	r2, r2, #2
 800c55e:	9307      	strge	r3, [sp, #28]
 800c560:	9307      	strlt	r3, [sp, #28]
 800c562:	bfb8      	it	lt
 800c564:	9204      	strlt	r2, [sp, #16]
 800c566:	7823      	ldrb	r3, [r4, #0]
 800c568:	2b2e      	cmp	r3, #46	@ 0x2e
 800c56a:	d10a      	bne.n	800c582 <_vfiprintf_r+0x156>
 800c56c:	7863      	ldrb	r3, [r4, #1]
 800c56e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c570:	d132      	bne.n	800c5d8 <_vfiprintf_r+0x1ac>
 800c572:	9b03      	ldr	r3, [sp, #12]
 800c574:	1d1a      	adds	r2, r3, #4
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	9203      	str	r2, [sp, #12]
 800c57a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c57e:	3402      	adds	r4, #2
 800c580:	9305      	str	r3, [sp, #20]
 800c582:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c658 <_vfiprintf_r+0x22c>
 800c586:	7821      	ldrb	r1, [r4, #0]
 800c588:	2203      	movs	r2, #3
 800c58a:	4650      	mov	r0, sl
 800c58c:	f7f3 fe78 	bl	8000280 <memchr>
 800c590:	b138      	cbz	r0, 800c5a2 <_vfiprintf_r+0x176>
 800c592:	9b04      	ldr	r3, [sp, #16]
 800c594:	eba0 000a 	sub.w	r0, r0, sl
 800c598:	2240      	movs	r2, #64	@ 0x40
 800c59a:	4082      	lsls	r2, r0
 800c59c:	4313      	orrs	r3, r2
 800c59e:	3401      	adds	r4, #1
 800c5a0:	9304      	str	r3, [sp, #16]
 800c5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5a6:	4829      	ldr	r0, [pc, #164]	@ (800c64c <_vfiprintf_r+0x220>)
 800c5a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c5ac:	2206      	movs	r2, #6
 800c5ae:	f7f3 fe67 	bl	8000280 <memchr>
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	d03f      	beq.n	800c636 <_vfiprintf_r+0x20a>
 800c5b6:	4b26      	ldr	r3, [pc, #152]	@ (800c650 <_vfiprintf_r+0x224>)
 800c5b8:	bb1b      	cbnz	r3, 800c602 <_vfiprintf_r+0x1d6>
 800c5ba:	9b03      	ldr	r3, [sp, #12]
 800c5bc:	3307      	adds	r3, #7
 800c5be:	f023 0307 	bic.w	r3, r3, #7
 800c5c2:	3308      	adds	r3, #8
 800c5c4:	9303      	str	r3, [sp, #12]
 800c5c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5c8:	443b      	add	r3, r7
 800c5ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5cc:	e76a      	b.n	800c4a4 <_vfiprintf_r+0x78>
 800c5ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5d2:	460c      	mov	r4, r1
 800c5d4:	2001      	movs	r0, #1
 800c5d6:	e7a8      	b.n	800c52a <_vfiprintf_r+0xfe>
 800c5d8:	2300      	movs	r3, #0
 800c5da:	3401      	adds	r4, #1
 800c5dc:	9305      	str	r3, [sp, #20]
 800c5de:	4619      	mov	r1, r3
 800c5e0:	f04f 0c0a 	mov.w	ip, #10
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5ea:	3a30      	subs	r2, #48	@ 0x30
 800c5ec:	2a09      	cmp	r2, #9
 800c5ee:	d903      	bls.n	800c5f8 <_vfiprintf_r+0x1cc>
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d0c6      	beq.n	800c582 <_vfiprintf_r+0x156>
 800c5f4:	9105      	str	r1, [sp, #20]
 800c5f6:	e7c4      	b.n	800c582 <_vfiprintf_r+0x156>
 800c5f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	2301      	movs	r3, #1
 800c600:	e7f0      	b.n	800c5e4 <_vfiprintf_r+0x1b8>
 800c602:	ab03      	add	r3, sp, #12
 800c604:	9300      	str	r3, [sp, #0]
 800c606:	462a      	mov	r2, r5
 800c608:	4b12      	ldr	r3, [pc, #72]	@ (800c654 <_vfiprintf_r+0x228>)
 800c60a:	a904      	add	r1, sp, #16
 800c60c:	4630      	mov	r0, r6
 800c60e:	f7fd fbbd 	bl	8009d8c <_printf_float>
 800c612:	4607      	mov	r7, r0
 800c614:	1c78      	adds	r0, r7, #1
 800c616:	d1d6      	bne.n	800c5c6 <_vfiprintf_r+0x19a>
 800c618:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c61a:	07d9      	lsls	r1, r3, #31
 800c61c:	d405      	bmi.n	800c62a <_vfiprintf_r+0x1fe>
 800c61e:	89ab      	ldrh	r3, [r5, #12]
 800c620:	059a      	lsls	r2, r3, #22
 800c622:	d402      	bmi.n	800c62a <_vfiprintf_r+0x1fe>
 800c624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c626:	f7fe f92b 	bl	800a880 <__retarget_lock_release_recursive>
 800c62a:	89ab      	ldrh	r3, [r5, #12]
 800c62c:	065b      	lsls	r3, r3, #25
 800c62e:	f53f af1f 	bmi.w	800c470 <_vfiprintf_r+0x44>
 800c632:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c634:	e71e      	b.n	800c474 <_vfiprintf_r+0x48>
 800c636:	ab03      	add	r3, sp, #12
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	462a      	mov	r2, r5
 800c63c:	4b05      	ldr	r3, [pc, #20]	@ (800c654 <_vfiprintf_r+0x228>)
 800c63e:	a904      	add	r1, sp, #16
 800c640:	4630      	mov	r0, r6
 800c642:	f7fd fe3b 	bl	800a2bc <_printf_i>
 800c646:	e7e4      	b.n	800c612 <_vfiprintf_r+0x1e6>
 800c648:	0800cd40 	.word	0x0800cd40
 800c64c:	0800cd4a 	.word	0x0800cd4a
 800c650:	08009d8d 	.word	0x08009d8d
 800c654:	0800c409 	.word	0x0800c409
 800c658:	0800cd46 	.word	0x0800cd46

0800c65c <__swbuf_r>:
 800c65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c65e:	460e      	mov	r6, r1
 800c660:	4614      	mov	r4, r2
 800c662:	4605      	mov	r5, r0
 800c664:	b118      	cbz	r0, 800c66e <__swbuf_r+0x12>
 800c666:	6a03      	ldr	r3, [r0, #32]
 800c668:	b90b      	cbnz	r3, 800c66e <__swbuf_r+0x12>
 800c66a:	f7fd ffd3 	bl	800a614 <__sinit>
 800c66e:	69a3      	ldr	r3, [r4, #24]
 800c670:	60a3      	str	r3, [r4, #8]
 800c672:	89a3      	ldrh	r3, [r4, #12]
 800c674:	071a      	lsls	r2, r3, #28
 800c676:	d501      	bpl.n	800c67c <__swbuf_r+0x20>
 800c678:	6923      	ldr	r3, [r4, #16]
 800c67a:	b943      	cbnz	r3, 800c68e <__swbuf_r+0x32>
 800c67c:	4621      	mov	r1, r4
 800c67e:	4628      	mov	r0, r5
 800c680:	f000 f82a 	bl	800c6d8 <__swsetup_r>
 800c684:	b118      	cbz	r0, 800c68e <__swbuf_r+0x32>
 800c686:	f04f 37ff 	mov.w	r7, #4294967295
 800c68a:	4638      	mov	r0, r7
 800c68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c68e:	6823      	ldr	r3, [r4, #0]
 800c690:	6922      	ldr	r2, [r4, #16]
 800c692:	1a98      	subs	r0, r3, r2
 800c694:	6963      	ldr	r3, [r4, #20]
 800c696:	b2f6      	uxtb	r6, r6
 800c698:	4283      	cmp	r3, r0
 800c69a:	4637      	mov	r7, r6
 800c69c:	dc05      	bgt.n	800c6aa <__swbuf_r+0x4e>
 800c69e:	4621      	mov	r1, r4
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	f7ff fda7 	bl	800c1f4 <_fflush_r>
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	d1ed      	bne.n	800c686 <__swbuf_r+0x2a>
 800c6aa:	68a3      	ldr	r3, [r4, #8]
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	60a3      	str	r3, [r4, #8]
 800c6b0:	6823      	ldr	r3, [r4, #0]
 800c6b2:	1c5a      	adds	r2, r3, #1
 800c6b4:	6022      	str	r2, [r4, #0]
 800c6b6:	701e      	strb	r6, [r3, #0]
 800c6b8:	6962      	ldr	r2, [r4, #20]
 800c6ba:	1c43      	adds	r3, r0, #1
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d004      	beq.n	800c6ca <__swbuf_r+0x6e>
 800c6c0:	89a3      	ldrh	r3, [r4, #12]
 800c6c2:	07db      	lsls	r3, r3, #31
 800c6c4:	d5e1      	bpl.n	800c68a <__swbuf_r+0x2e>
 800c6c6:	2e0a      	cmp	r6, #10
 800c6c8:	d1df      	bne.n	800c68a <__swbuf_r+0x2e>
 800c6ca:	4621      	mov	r1, r4
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	f7ff fd91 	bl	800c1f4 <_fflush_r>
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	d0d9      	beq.n	800c68a <__swbuf_r+0x2e>
 800c6d6:	e7d6      	b.n	800c686 <__swbuf_r+0x2a>

0800c6d8 <__swsetup_r>:
 800c6d8:	b538      	push	{r3, r4, r5, lr}
 800c6da:	4b29      	ldr	r3, [pc, #164]	@ (800c780 <__swsetup_r+0xa8>)
 800c6dc:	4605      	mov	r5, r0
 800c6de:	6818      	ldr	r0, [r3, #0]
 800c6e0:	460c      	mov	r4, r1
 800c6e2:	b118      	cbz	r0, 800c6ec <__swsetup_r+0x14>
 800c6e4:	6a03      	ldr	r3, [r0, #32]
 800c6e6:	b90b      	cbnz	r3, 800c6ec <__swsetup_r+0x14>
 800c6e8:	f7fd ff94 	bl	800a614 <__sinit>
 800c6ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6f0:	0719      	lsls	r1, r3, #28
 800c6f2:	d422      	bmi.n	800c73a <__swsetup_r+0x62>
 800c6f4:	06da      	lsls	r2, r3, #27
 800c6f6:	d407      	bmi.n	800c708 <__swsetup_r+0x30>
 800c6f8:	2209      	movs	r2, #9
 800c6fa:	602a      	str	r2, [r5, #0]
 800c6fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c700:	81a3      	strh	r3, [r4, #12]
 800c702:	f04f 30ff 	mov.w	r0, #4294967295
 800c706:	e033      	b.n	800c770 <__swsetup_r+0x98>
 800c708:	0758      	lsls	r0, r3, #29
 800c70a:	d512      	bpl.n	800c732 <__swsetup_r+0x5a>
 800c70c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c70e:	b141      	cbz	r1, 800c722 <__swsetup_r+0x4a>
 800c710:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c714:	4299      	cmp	r1, r3
 800c716:	d002      	beq.n	800c71e <__swsetup_r+0x46>
 800c718:	4628      	mov	r0, r5
 800c71a:	f7fe ff0d 	bl	800b538 <_free_r>
 800c71e:	2300      	movs	r3, #0
 800c720:	6363      	str	r3, [r4, #52]	@ 0x34
 800c722:	89a3      	ldrh	r3, [r4, #12]
 800c724:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c728:	81a3      	strh	r3, [r4, #12]
 800c72a:	2300      	movs	r3, #0
 800c72c:	6063      	str	r3, [r4, #4]
 800c72e:	6923      	ldr	r3, [r4, #16]
 800c730:	6023      	str	r3, [r4, #0]
 800c732:	89a3      	ldrh	r3, [r4, #12]
 800c734:	f043 0308 	orr.w	r3, r3, #8
 800c738:	81a3      	strh	r3, [r4, #12]
 800c73a:	6923      	ldr	r3, [r4, #16]
 800c73c:	b94b      	cbnz	r3, 800c752 <__swsetup_r+0x7a>
 800c73e:	89a3      	ldrh	r3, [r4, #12]
 800c740:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c748:	d003      	beq.n	800c752 <__swsetup_r+0x7a>
 800c74a:	4621      	mov	r1, r4
 800c74c:	4628      	mov	r0, r5
 800c74e:	f000 f883 	bl	800c858 <__smakebuf_r>
 800c752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c756:	f013 0201 	ands.w	r2, r3, #1
 800c75a:	d00a      	beq.n	800c772 <__swsetup_r+0x9a>
 800c75c:	2200      	movs	r2, #0
 800c75e:	60a2      	str	r2, [r4, #8]
 800c760:	6962      	ldr	r2, [r4, #20]
 800c762:	4252      	negs	r2, r2
 800c764:	61a2      	str	r2, [r4, #24]
 800c766:	6922      	ldr	r2, [r4, #16]
 800c768:	b942      	cbnz	r2, 800c77c <__swsetup_r+0xa4>
 800c76a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c76e:	d1c5      	bne.n	800c6fc <__swsetup_r+0x24>
 800c770:	bd38      	pop	{r3, r4, r5, pc}
 800c772:	0799      	lsls	r1, r3, #30
 800c774:	bf58      	it	pl
 800c776:	6962      	ldrpl	r2, [r4, #20]
 800c778:	60a2      	str	r2, [r4, #8]
 800c77a:	e7f4      	b.n	800c766 <__swsetup_r+0x8e>
 800c77c:	2000      	movs	r0, #0
 800c77e:	e7f7      	b.n	800c770 <__swsetup_r+0x98>
 800c780:	20000040 	.word	0x20000040

0800c784 <_raise_r>:
 800c784:	291f      	cmp	r1, #31
 800c786:	b538      	push	{r3, r4, r5, lr}
 800c788:	4605      	mov	r5, r0
 800c78a:	460c      	mov	r4, r1
 800c78c:	d904      	bls.n	800c798 <_raise_r+0x14>
 800c78e:	2316      	movs	r3, #22
 800c790:	6003      	str	r3, [r0, #0]
 800c792:	f04f 30ff 	mov.w	r0, #4294967295
 800c796:	bd38      	pop	{r3, r4, r5, pc}
 800c798:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c79a:	b112      	cbz	r2, 800c7a2 <_raise_r+0x1e>
 800c79c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7a0:	b94b      	cbnz	r3, 800c7b6 <_raise_r+0x32>
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	f000 f830 	bl	800c808 <_getpid_r>
 800c7a8:	4622      	mov	r2, r4
 800c7aa:	4601      	mov	r1, r0
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7b2:	f000 b817 	b.w	800c7e4 <_kill_r>
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d00a      	beq.n	800c7d0 <_raise_r+0x4c>
 800c7ba:	1c59      	adds	r1, r3, #1
 800c7bc:	d103      	bne.n	800c7c6 <_raise_r+0x42>
 800c7be:	2316      	movs	r3, #22
 800c7c0:	6003      	str	r3, [r0, #0]
 800c7c2:	2001      	movs	r0, #1
 800c7c4:	e7e7      	b.n	800c796 <_raise_r+0x12>
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	4798      	blx	r3
 800c7d0:	2000      	movs	r0, #0
 800c7d2:	e7e0      	b.n	800c796 <_raise_r+0x12>

0800c7d4 <raise>:
 800c7d4:	4b02      	ldr	r3, [pc, #8]	@ (800c7e0 <raise+0xc>)
 800c7d6:	4601      	mov	r1, r0
 800c7d8:	6818      	ldr	r0, [r3, #0]
 800c7da:	f7ff bfd3 	b.w	800c784 <_raise_r>
 800c7de:	bf00      	nop
 800c7e0:	20000040 	.word	0x20000040

0800c7e4 <_kill_r>:
 800c7e4:	b538      	push	{r3, r4, r5, lr}
 800c7e6:	4d07      	ldr	r5, [pc, #28]	@ (800c804 <_kill_r+0x20>)
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	4608      	mov	r0, r1
 800c7ee:	4611      	mov	r1, r2
 800c7f0:	602b      	str	r3, [r5, #0]
 800c7f2:	f7f5 fa2b 	bl	8001c4c <_kill>
 800c7f6:	1c43      	adds	r3, r0, #1
 800c7f8:	d102      	bne.n	800c800 <_kill_r+0x1c>
 800c7fa:	682b      	ldr	r3, [r5, #0]
 800c7fc:	b103      	cbz	r3, 800c800 <_kill_r+0x1c>
 800c7fe:	6023      	str	r3, [r4, #0]
 800c800:	bd38      	pop	{r3, r4, r5, pc}
 800c802:	bf00      	nop
 800c804:	200148c8 	.word	0x200148c8

0800c808 <_getpid_r>:
 800c808:	f7f5 ba18 	b.w	8001c3c <_getpid>

0800c80c <__swhatbuf_r>:
 800c80c:	b570      	push	{r4, r5, r6, lr}
 800c80e:	460c      	mov	r4, r1
 800c810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c814:	2900      	cmp	r1, #0
 800c816:	b096      	sub	sp, #88	@ 0x58
 800c818:	4615      	mov	r5, r2
 800c81a:	461e      	mov	r6, r3
 800c81c:	da0d      	bge.n	800c83a <__swhatbuf_r+0x2e>
 800c81e:	89a3      	ldrh	r3, [r4, #12]
 800c820:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c824:	f04f 0100 	mov.w	r1, #0
 800c828:	bf14      	ite	ne
 800c82a:	2340      	movne	r3, #64	@ 0x40
 800c82c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c830:	2000      	movs	r0, #0
 800c832:	6031      	str	r1, [r6, #0]
 800c834:	602b      	str	r3, [r5, #0]
 800c836:	b016      	add	sp, #88	@ 0x58
 800c838:	bd70      	pop	{r4, r5, r6, pc}
 800c83a:	466a      	mov	r2, sp
 800c83c:	f000 f848 	bl	800c8d0 <_fstat_r>
 800c840:	2800      	cmp	r0, #0
 800c842:	dbec      	blt.n	800c81e <__swhatbuf_r+0x12>
 800c844:	9901      	ldr	r1, [sp, #4]
 800c846:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c84a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c84e:	4259      	negs	r1, r3
 800c850:	4159      	adcs	r1, r3
 800c852:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c856:	e7eb      	b.n	800c830 <__swhatbuf_r+0x24>

0800c858 <__smakebuf_r>:
 800c858:	898b      	ldrh	r3, [r1, #12]
 800c85a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c85c:	079d      	lsls	r5, r3, #30
 800c85e:	4606      	mov	r6, r0
 800c860:	460c      	mov	r4, r1
 800c862:	d507      	bpl.n	800c874 <__smakebuf_r+0x1c>
 800c864:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c868:	6023      	str	r3, [r4, #0]
 800c86a:	6123      	str	r3, [r4, #16]
 800c86c:	2301      	movs	r3, #1
 800c86e:	6163      	str	r3, [r4, #20]
 800c870:	b003      	add	sp, #12
 800c872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c874:	ab01      	add	r3, sp, #4
 800c876:	466a      	mov	r2, sp
 800c878:	f7ff ffc8 	bl	800c80c <__swhatbuf_r>
 800c87c:	9f00      	ldr	r7, [sp, #0]
 800c87e:	4605      	mov	r5, r0
 800c880:	4639      	mov	r1, r7
 800c882:	4630      	mov	r0, r6
 800c884:	f7fe fecc 	bl	800b620 <_malloc_r>
 800c888:	b948      	cbnz	r0, 800c89e <__smakebuf_r+0x46>
 800c88a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c88e:	059a      	lsls	r2, r3, #22
 800c890:	d4ee      	bmi.n	800c870 <__smakebuf_r+0x18>
 800c892:	f023 0303 	bic.w	r3, r3, #3
 800c896:	f043 0302 	orr.w	r3, r3, #2
 800c89a:	81a3      	strh	r3, [r4, #12]
 800c89c:	e7e2      	b.n	800c864 <__smakebuf_r+0xc>
 800c89e:	89a3      	ldrh	r3, [r4, #12]
 800c8a0:	6020      	str	r0, [r4, #0]
 800c8a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8a6:	81a3      	strh	r3, [r4, #12]
 800c8a8:	9b01      	ldr	r3, [sp, #4]
 800c8aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c8ae:	b15b      	cbz	r3, 800c8c8 <__smakebuf_r+0x70>
 800c8b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	f000 f81d 	bl	800c8f4 <_isatty_r>
 800c8ba:	b128      	cbz	r0, 800c8c8 <__smakebuf_r+0x70>
 800c8bc:	89a3      	ldrh	r3, [r4, #12]
 800c8be:	f023 0303 	bic.w	r3, r3, #3
 800c8c2:	f043 0301 	orr.w	r3, r3, #1
 800c8c6:	81a3      	strh	r3, [r4, #12]
 800c8c8:	89a3      	ldrh	r3, [r4, #12]
 800c8ca:	431d      	orrs	r5, r3
 800c8cc:	81a5      	strh	r5, [r4, #12]
 800c8ce:	e7cf      	b.n	800c870 <__smakebuf_r+0x18>

0800c8d0 <_fstat_r>:
 800c8d0:	b538      	push	{r3, r4, r5, lr}
 800c8d2:	4d07      	ldr	r5, [pc, #28]	@ (800c8f0 <_fstat_r+0x20>)
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	4608      	mov	r0, r1
 800c8da:	4611      	mov	r1, r2
 800c8dc:	602b      	str	r3, [r5, #0]
 800c8de:	f7f5 f9f9 	bl	8001cd4 <_fstat>
 800c8e2:	1c43      	adds	r3, r0, #1
 800c8e4:	d102      	bne.n	800c8ec <_fstat_r+0x1c>
 800c8e6:	682b      	ldr	r3, [r5, #0]
 800c8e8:	b103      	cbz	r3, 800c8ec <_fstat_r+0x1c>
 800c8ea:	6023      	str	r3, [r4, #0]
 800c8ec:	bd38      	pop	{r3, r4, r5, pc}
 800c8ee:	bf00      	nop
 800c8f0:	200148c8 	.word	0x200148c8

0800c8f4 <_isatty_r>:
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	4d06      	ldr	r5, [pc, #24]	@ (800c910 <_isatty_r+0x1c>)
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	4604      	mov	r4, r0
 800c8fc:	4608      	mov	r0, r1
 800c8fe:	602b      	str	r3, [r5, #0]
 800c900:	f7f5 f9f8 	bl	8001cf4 <_isatty>
 800c904:	1c43      	adds	r3, r0, #1
 800c906:	d102      	bne.n	800c90e <_isatty_r+0x1a>
 800c908:	682b      	ldr	r3, [r5, #0]
 800c90a:	b103      	cbz	r3, 800c90e <_isatty_r+0x1a>
 800c90c:	6023      	str	r3, [r4, #0]
 800c90e:	bd38      	pop	{r3, r4, r5, pc}
 800c910:	200148c8 	.word	0x200148c8

0800c914 <_init>:
 800c914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c916:	bf00      	nop
 800c918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c91a:	bc08      	pop	{r3}
 800c91c:	469e      	mov	lr, r3
 800c91e:	4770      	bx	lr

0800c920 <_fini>:
 800c920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c922:	bf00      	nop
 800c924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c926:	bc08      	pop	{r3}
 800c928:	469e      	mov	lr, r3
 800c92a:	4770      	bx	lr
