
004.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009704  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  080098a8  080098a8  0000a8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0b4  0800a0b4  0000c258  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0b4  0800a0b4  0000b0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0bc  0800a0bc  0000c258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0bc  0800a0bc  0000b0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0c0  0800a0c0  0000b0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  0800a0c4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000258  0800a31c  0000c258  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  0800a31c  0000c750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c258  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b49  00000000  00000000  0000c288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000306c  00000000  00000000  0001fdd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00022e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e65  00000000  00000000  000240c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f1a  00000000  00000000  00024f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001778b  00000000  00000000  0003de47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000928bd  00000000  00000000  000555d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7e8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fa0  00000000  00000000  000e7ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000ede74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800988c 	.word	0x0800988c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	0800988c 	.word	0x0800988c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <handle_event>:

EventQueue event_queue;



void handle_event(EventType event) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
	float currentTime;
    switch (event) {
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d867      	bhi.n	8001048 <handle_event+0xe0>
 8000f78:	a201      	add	r2, pc, #4	@ (adr r2, 8000f80 <handle_event+0x18>)
 8000f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7e:	bf00      	nop
 8000f80:	08000f91 	.word	0x08000f91
 8000f84:	08000fbf 	.word	0x08000fbf
 8000f88:	08000fed 	.word	0x08000fed
 8000f8c:	0800101b 	.word	0x0800101b
		case EVENT_TIMER1:
			currentTime = HAL_GetTick()/1000.f ;
 8000f90:	f001 f98a 	bl	80022a8 <HAL_GetTick>
 8000f94:	ee07 0a90 	vmov	s15, r0
 8000f98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f9c:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8001054 <handle_event+0xec>
 8000fa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa4:	edc7 7a03 	vstr	s15, [r7, #12]
			print_cli("The time run task 1 - read_temp_and_hum() : %.3fs\n", currentTime );
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f7ff fae5 	bl	8000578 <__aeabi_f2d>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4829      	ldr	r0, [pc, #164]	@ (8001058 <handle_event+0xf0>)
 8000fb4:	f005 fb0e 	bl	80065d4 <print_cli>
			read_temp_and_hum();
 8000fb8:	f000 fd48 	bl	8001a4c <read_temp_and_hum>
			break;
 8000fbc:	e045      	b.n	800104a <handle_event+0xe2>
        case EVENT_TIMER2:
			currentTime = HAL_GetTick()/1000.f ;
 8000fbe:	f001 f973 	bl	80022a8 <HAL_GetTick>
 8000fc2:	ee07 0a90 	vmov	s15, r0
 8000fc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fca:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001054 <handle_event+0xec>
 8000fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd2:	edc7 7a03 	vstr	s15, [r7, #12]
			print_cli("The time run task 2 - read_time() : %.3fs\n", currentTime );
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f7ff face 	bl	8000578 <__aeabi_f2d>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	481e      	ldr	r0, [pc, #120]	@ (800105c <handle_event+0xf4>)
 8000fe2:	f005 faf7 	bl	80065d4 <print_cli>
            read_time();
 8000fe6:	f000 fd27 	bl	8001a38 <read_time>
            break;
 8000fea:	e02e      	b.n	800104a <handle_event+0xe2>
        case EVENT_TIMER3:
			currentTime = HAL_GetTick()/1000.f ;
 8000fec:	f001 f95c 	bl	80022a8 <HAL_GetTick>
 8000ff0:	ee07 0a90 	vmov	s15, r0
 8000ff4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ff8:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001054 <handle_event+0xec>
 8000ffc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001000:	edc7 7a03 	vstr	s15, [r7, #12]
			print_cli("The time run task 3 - send_uart() : %.3fs\n", currentTime );
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f7ff fab7 	bl	8000578 <__aeabi_f2d>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4814      	ldr	r0, [pc, #80]	@ (8001060 <handle_event+0xf8>)
 8001010:	f005 fae0 	bl	80065d4 <print_cli>
            send_uart();
 8001014:	f000 fce8 	bl	80019e8 <send_uart>
            break;
 8001018:	e017      	b.n	800104a <handle_event+0xe2>
        case EVENT_TIMER4:
			currentTime = HAL_GetTick()/1000.f ;
 800101a:	f001 f945 	bl	80022a8 <HAL_GetTick>
 800101e:	ee07 0a90 	vmov	s15, r0
 8001022:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001026:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001054 <handle_event+0xec>
 800102a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102e:	edc7 7a03 	vstr	s15, [r7, #12]
			print_cli("The time run task 4 - display_lcd() : %.3fs\n", currentTime );
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f7ff faa0 	bl	8000578 <__aeabi_f2d>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4809      	ldr	r0, [pc, #36]	@ (8001064 <handle_event+0xfc>)
 800103e:	f005 fac9 	bl	80065d4 <print_cli>
            display_lcd();
 8001042:	f000 fbc9 	bl	80017d8 <display_lcd>
            break;
 8001046:	e000      	b.n	800104a <handle_event+0xe2>
        default:
            break;
 8001048:	bf00      	nop
    }
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	447a0000 	.word	0x447a0000
 8001058:	080098a8 	.word	0x080098a8
 800105c:	080098dc 	.word	0x080098dc
 8001060:	08009908 	.word	0x08009908
 8001064:	08009934 	.word	0x08009934

08001068 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	//uint32_t currentTime;
	if(htim == &htim1){
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a13      	ldr	r2, [pc, #76]	@ (80010c0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d104      	bne.n	8001082 <HAL_TIM_PeriodElapsedCallback+0x1a>
		//currentTime = HAL_GetTick()/1000 ;
		enqueue_event(&event_queue, EVENT_TIMER1);
 8001078:	2100      	movs	r1, #0
 800107a:	4812      	ldr	r0, [pc, #72]	@ (80010c4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800107c:	f005 fae0 	bl	8006640 <enqueue_event>
	else if(htim == &htim4){
		//currentTime = HAL_GetTick()/1000 ;
		enqueue_event(&event_queue , EVENT_TIMER4);
		//print_cli("task 4 vao hang doi- %us\n",currentTime);
	}
}
 8001080:	e019      	b.n	80010b6 <HAL_TIM_PeriodElapsedCallback+0x4e>
	else if(htim == &htim2){
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a10      	ldr	r2, [pc, #64]	@ (80010c8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d104      	bne.n	8001094 <HAL_TIM_PeriodElapsedCallback+0x2c>
		enqueue_event(&event_queue, EVENT_TIMER2);
 800108a:	2101      	movs	r1, #1
 800108c:	480d      	ldr	r0, [pc, #52]	@ (80010c4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800108e:	f005 fad7 	bl	8006640 <enqueue_event>
}
 8001092:	e010      	b.n	80010b6 <HAL_TIM_PeriodElapsedCallback+0x4e>
	else if(htim == &htim3){
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a0d      	ldr	r2, [pc, #52]	@ (80010cc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d104      	bne.n	80010a6 <HAL_TIM_PeriodElapsedCallback+0x3e>
		enqueue_event(&event_queue, EVENT_TIMER3);
 800109c:	2102      	movs	r1, #2
 800109e:	4809      	ldr	r0, [pc, #36]	@ (80010c4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010a0:	f005 face 	bl	8006640 <enqueue_event>
}
 80010a4:	e007      	b.n	80010b6 <HAL_TIM_PeriodElapsedCallback+0x4e>
	else if(htim == &htim4){
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a09      	ldr	r2, [pc, #36]	@ (80010d0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d103      	bne.n	80010b6 <HAL_TIM_PeriodElapsedCallback+0x4e>
		enqueue_event(&event_queue , EVENT_TIMER4);
 80010ae:	2103      	movs	r1, #3
 80010b0:	4804      	ldr	r0, [pc, #16]	@ (80010c4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010b2:	f005 fac5 	bl	8006640 <enqueue_event>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000370 	.word	0x20000370
 80010c4:	20000550 	.word	0x20000550
 80010c8:	200003b8 	.word	0x200003b8
 80010cc:	20000400 	.word	0x20000400
 80010d0:	20000448 	.word	0x20000448

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010da:	f001 f87f 	bl	80021dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010de:	f000 f887 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e2:	f000 fb0b 	bl	80016fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010e6:	f000 fadf 	bl	80016a8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010ea:	f000 f977 	bl	80013dc <MX_TIM1_Init>
  MX_TIM2_Init();
 80010ee:	f000 f9c7 	bl	8001480 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010f2:	f000 fa13 	bl	800151c <MX_TIM3_Init>
  MX_TIM4_Init();
 80010f6:	f000 fa5f 	bl	80015b8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80010fa:	f000 faab 	bl	8001654 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80010fe:	f000 f8e3 	bl	80012c8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001102:	f000 f93d 	bl	8001380 <MX_I2C3_Init>
  MX_I2C2_Init();
 8001106:	f000 f90d 	bl	8001324 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800110a:	482c      	ldr	r0, [pc, #176]	@ (80011bc <main+0xe8>)
 800110c:	f003 f920 	bl	8004350 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001110:	482b      	ldr	r0, [pc, #172]	@ (80011c0 <main+0xec>)
 8001112:	f003 f91d 	bl	8004350 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001116:	482b      	ldr	r0, [pc, #172]	@ (80011c4 <main+0xf0>)
 8001118:	f003 f91a 	bl	8004350 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800111c:	482a      	ldr	r0, [pc, #168]	@ (80011c8 <main+0xf4>)
 800111e:	f003 f917 	bl	8004350 <HAL_TIM_Base_Start_IT>
  // init LCD use I2C2

  CLCD_I2C_Init(&LCD1,&hi2c2,0x4e,20,4);
 8001122:	2304      	movs	r3, #4
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2314      	movs	r3, #20
 8001128:	224e      	movs	r2, #78	@ 0x4e
 800112a:	4928      	ldr	r1, [pc, #160]	@ (80011cc <main+0xf8>)
 800112c:	4828      	ldr	r0, [pc, #160]	@ (80011d0 <main+0xfc>)
 800112e:	f004 fe63 	bl	8005df8 <CLCD_I2C_Init>

  // init SHT21 use I2C1
  SHT2x_Init(&hi2c1);
 8001132:	4828      	ldr	r0, [pc, #160]	@ (80011d4 <main+0x100>)
 8001134:	f005 fae4 	bl	8006700 <SHT2x_Init>
  SHT2x_SetResolution(RES_14_12);
 8001138:	2000      	movs	r0, #0
 800113a:	f005 fbc7 	bl	80068cc <SHT2x_SetResolution>

  //init DS3231 use I2C3
  rtc_init(&hi2c3);
 800113e:	4826      	ldr	r0, [pc, #152]	@ (80011d8 <main+0x104>)
 8001140:	f004 fde6 	bl	8005d10 <rtc_init>

  CLCD_I2C_SetCursor(&LCD1, 10, 0);
 8001144:	2200      	movs	r2, #0
 8001146:	210a      	movs	r1, #10
 8001148:	4821      	ldr	r0, [pc, #132]	@ (80011d0 <main+0xfc>)
 800114a:	f004 fec5 	bl	8005ed8 <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1, "t:");
 800114e:	4923      	ldr	r1, [pc, #140]	@ (80011dc <main+0x108>)
 8001150:	481f      	ldr	r0, [pc, #124]	@ (80011d0 <main+0xfc>)
 8001152:	f004 ff14 	bl	8005f7e <CLCD_I2C_WriteString>

  CLCD_I2C_SetCursor(&LCD1, 10, 1);
 8001156:	2201      	movs	r2, #1
 8001158:	210a      	movs	r1, #10
 800115a:	481d      	ldr	r0, [pc, #116]	@ (80011d0 <main+0xfc>)
 800115c:	f004 febc 	bl	8005ed8 <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1, "h:");
 8001160:	491f      	ldr	r1, [pc, #124]	@ (80011e0 <main+0x10c>)
 8001162:	481b      	ldr	r0, [pc, #108]	@ (80011d0 <main+0xfc>)
 8001164:	f004 ff0b 	bl	8005f7e <CLCD_I2C_WriteString>


  // init time for rtc . It just sould run once time.
	date_time.hour =14;
 8001168:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <main+0x110>)
 800116a:	220e      	movs	r2, #14
 800116c:	701a      	strb	r2, [r3, #0]
    date_time.min =02;
 800116e:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <main+0x110>)
 8001170:	2202      	movs	r2, #2
 8001172:	705a      	strb	r2, [r3, #1]
	date_time.sec =30;
 8001174:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <main+0x110>)
 8001176:	221e      	movs	r2, #30
 8001178:	709a      	strb	r2, [r3, #2]
	date_time.day =4;
 800117a:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <main+0x110>)
 800117c:	2204      	movs	r2, #4
 800117e:	70da      	strb	r2, [r3, #3]
	date_time.date =22;
 8001180:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <main+0x110>)
 8001182:	2216      	movs	r2, #22
 8001184:	711a      	strb	r2, [r3, #4]
	date_time.mon =1;
 8001186:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <main+0x110>)
 8001188:	2201      	movs	r2, #1
 800118a:	715a      	strb	r2, [r3, #5]
	date_time.year =25;
 800118c:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <main+0x110>)
 800118e:	2219      	movs	r2, #25
 8001190:	719a      	strb	r2, [r3, #6]

	//rtc_write_time(&date_time);

	// init queue
	init_event_queue(&event_queue);
 8001192:	4815      	ldr	r0, [pc, #84]	@ (80011e8 <main+0x114>)
 8001194:	f005 fa40 	bl	8006618 <init_event_queue>

	//init uart handel
	uart_init(&huart1);
 8001198:	4814      	ldr	r0, [pc, #80]	@ (80011ec <main+0x118>)
 800119a:	f005 fc17 	bl	80069cc <uart_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	          if (dequeue_event(&event_queue, &event)) {
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	4619      	mov	r1, r3
 80011a2:	4811      	ldr	r0, [pc, #68]	@ (80011e8 <main+0x114>)
 80011a4:	f005 fa7c 	bl	80066a0 <dequeue_event>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <main+0xe2>
	        	  handle_event(event);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fed9 	bl	8000f68 <handle_event>
	          }
	          uart_handel();
 80011b6:	f005 fbe7 	bl	8006988 <uart_handel>
	          if (dequeue_event(&event_queue, &event)) {
 80011ba:	e7f0      	b.n	800119e <main+0xca>
 80011bc:	20000370 	.word	0x20000370
 80011c0:	200003b8 	.word	0x200003b8
 80011c4:	20000400 	.word	0x20000400
 80011c8:	20000448 	.word	0x20000448
 80011cc:	200002c8 	.word	0x200002c8
 80011d0:	2000052c 	.word	0x2000052c
 80011d4:	20000274 	.word	0x20000274
 80011d8:	2000031c 	.word	0x2000031c
 80011dc:	08009964 	.word	0x08009964
 80011e0:	08009968 	.word	0x08009968
 80011e4:	20000520 	.word	0x20000520
 80011e8:	20000550 	.word	0x20000550
 80011ec:	20000490 	.word	0x20000490

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b094      	sub	sp, #80	@ 0x50
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	2230      	movs	r2, #48	@ 0x30
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f006 fa20 	bl	8007644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	4b29      	ldr	r3, [pc, #164]	@ (80012c0 <SystemClock_Config+0xd0>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	4a28      	ldr	r2, [pc, #160]	@ (80012c0 <SystemClock_Config+0xd0>)
 800121e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001222:	6413      	str	r3, [r2, #64]	@ 0x40
 8001224:	4b26      	ldr	r3, [pc, #152]	@ (80012c0 <SystemClock_Config+0xd0>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	4b23      	ldr	r3, [pc, #140]	@ (80012c4 <SystemClock_Config+0xd4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800123c:	4a21      	ldr	r2, [pc, #132]	@ (80012c4 <SystemClock_Config+0xd4>)
 800123e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <SystemClock_Config+0xd4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001250:	2302      	movs	r3, #2
 8001252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001254:	2301      	movs	r3, #1
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001258:	2310      	movs	r3, #16
 800125a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125c:	2302      	movs	r3, #2
 800125e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001260:	2300      	movs	r3, #0
 8001262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001264:	2310      	movs	r3, #16
 8001266:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001268:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800126c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800126e:	2304      	movs	r3, #4
 8001270:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001272:	2307      	movs	r3, #7
 8001274:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	4618      	mov	r0, r3
 800127c:	f002 fb80 	bl	8003980 <HAL_RCC_OscConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001286:	f000 fbf9 	bl	8001a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128a:	230f      	movs	r3, #15
 800128c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128e:	2302      	movs	r3, #2
 8001290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001296:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800129a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2102      	movs	r1, #2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 fde2 	bl	8003e70 <HAL_RCC_ClockConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012b2:	f000 fbe3 	bl	8001a7c <Error_Handler>
  }
}
 80012b6:	bf00      	nop
 80012b8:	3750      	adds	r7, #80	@ 0x50
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40007000 	.word	0x40007000

080012c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012cc:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <MX_I2C1_Init+0x50>)
 80012ce:	4a13      	ldr	r2, [pc, #76]	@ (800131c <MX_I2C1_Init+0x54>)
 80012d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012d2:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <MX_I2C1_Init+0x50>)
 80012d4:	4a12      	ldr	r2, [pc, #72]	@ (8001320 <MX_I2C1_Init+0x58>)
 80012d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <MX_I2C1_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <MX_I2C1_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <MX_I2C1_Init+0x50>)
 80012e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <MX_I2C1_Init+0x50>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_I2C1_Init+0x50>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f8:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	@ (8001318 <MX_I2C1_Init+0x50>)
 8001306:	f001 fb41 	bl	800298c <HAL_I2C_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001310:	f000 fbb4 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000274 	.word	0x20000274
 800131c:	40005400 	.word	0x40005400
 8001320:	000186a0 	.word	0x000186a0

08001324 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <MX_I2C2_Init+0x50>)
 800132a:	4a13      	ldr	r2, [pc, #76]	@ (8001378 <MX_I2C2_Init+0x54>)
 800132c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800132e:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <MX_I2C2_Init+0x50>)
 8001330:	4a12      	ldr	r2, [pc, #72]	@ (800137c <MX_I2C2_Init+0x58>)
 8001332:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001334:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <MX_I2C2_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <MX_I2C2_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <MX_I2C2_Init+0x50>)
 8001342:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001346:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001348:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <MX_I2C2_Init+0x50>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <MX_I2C2_Init+0x50>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001354:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <MX_I2C2_Init+0x50>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <MX_I2C2_Init+0x50>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	@ (8001374 <MX_I2C2_Init+0x50>)
 8001362:	f001 fb13 	bl	800298c <HAL_I2C_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800136c:	f000 fb86 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200002c8 	.word	0x200002c8
 8001378:	40005800 	.word	0x40005800
 800137c:	000186a0 	.word	0x000186a0

08001380 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <MX_I2C3_Init+0x50>)
 8001386:	4a13      	ldr	r2, [pc, #76]	@ (80013d4 <MX_I2C3_Init+0x54>)
 8001388:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <MX_I2C3_Init+0x50>)
 800138c:	4a12      	ldr	r2, [pc, #72]	@ (80013d8 <MX_I2C3_Init+0x58>)
 800138e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001390:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <MX_I2C3_Init+0x50>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001396:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <MX_I2C3_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <MX_I2C3_Init+0x50>)
 800139e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013a2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <MX_I2C3_Init+0x50>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80013aa:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <MX_I2C3_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b0:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <MX_I2C3_Init+0x50>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b6:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <MX_I2C3_Init+0x50>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <MX_I2C3_Init+0x50>)
 80013be:	f001 fae5 	bl	800298c <HAL_I2C_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80013c8:	f000 fb58 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000031c 	.word	0x2000031c
 80013d4:	40005c00 	.word	0x40005c00
 80013d8:	000186a0 	.word	0x000186a0

080013dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f0:	463b      	mov	r3, r7
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <MX_TIM1_Init+0x9c>)
 80013fa:	4a20      	ldr	r2, [pc, #128]	@ (800147c <MX_TIM1_Init+0xa0>)
 80013fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42000;
 80013fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <MX_TIM1_Init+0x9c>)
 8001400:	f24a 4210 	movw	r2, #42000	@ 0xa410
 8001404:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001406:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <MX_TIM1_Init+0x9c>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5999;
 800140c:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_TIM1_Init+0x9c>)
 800140e:	f241 726f 	movw	r2, #5999	@ 0x176f
 8001412:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001414:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <MX_TIM1_Init+0x9c>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800141a:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <MX_TIM1_Init+0x9c>)
 800141c:	2200      	movs	r2, #0
 800141e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <MX_TIM1_Init+0x9c>)
 8001422:	2280      	movs	r2, #128	@ 0x80
 8001424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001426:	4814      	ldr	r0, [pc, #80]	@ (8001478 <MX_TIM1_Init+0x9c>)
 8001428:	f002 ff42 	bl	80042b0 <HAL_TIM_Base_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001432:	f000 fb23 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001436:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800143a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	4619      	mov	r1, r3
 8001442:	480d      	ldr	r0, [pc, #52]	@ (8001478 <MX_TIM1_Init+0x9c>)
 8001444:	f003 f905 	bl	8004652 <HAL_TIM_ConfigClockSource>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800144e:	f000 fb15 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800145a:	463b      	mov	r3, r7
 800145c:	4619      	mov	r1, r3
 800145e:	4806      	ldr	r0, [pc, #24]	@ (8001478 <MX_TIM1_Init+0x9c>)
 8001460:	f003 fb0c 	bl	8004a7c <HAL_TIMEx_MasterConfigSynchronization>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800146a:	f000 fb07 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000370 	.word	0x20000370
 800147c:	40010000 	.word	0x40010000

08001480 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800149c:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <MX_TIM2_Init+0x98>)
 800149e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000;
 80014a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001518 <MX_TIM2_Init+0x98>)
 80014a6:	f24a 4210 	movw	r2, #42000	@ 0xa410
 80014aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001518 <MX_TIM2_Init+0x98>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80014b2:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <MX_TIM2_Init+0x98>)
 80014b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ba:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <MX_TIM2_Init+0x98>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014c0:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <MX_TIM2_Init+0x98>)
 80014c2:	2280      	movs	r2, #128	@ 0x80
 80014c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014c6:	4814      	ldr	r0, [pc, #80]	@ (8001518 <MX_TIM2_Init+0x98>)
 80014c8:	f002 fef2 	bl	80042b0 <HAL_TIM_Base_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014d2:	f000 fad3 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	4619      	mov	r1, r3
 80014e2:	480d      	ldr	r0, [pc, #52]	@ (8001518 <MX_TIM2_Init+0x98>)
 80014e4:	f003 f8b5 	bl	8004652 <HAL_TIM_ConfigClockSource>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014ee:	f000 fac5 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014fa:	463b      	mov	r3, r7
 80014fc:	4619      	mov	r1, r3
 80014fe:	4806      	ldr	r0, [pc, #24]	@ (8001518 <MX_TIM2_Init+0x98>)
 8001500:	f003 fabc 	bl	8004a7c <HAL_TIMEx_MasterConfigSynchronization>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800150a:	f000 fab7 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200003b8 	.word	0x200003b8

0800151c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	463b      	mov	r3, r7
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001538:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <MX_TIM3_Init+0x94>)
 800153a:	4a1e      	ldr	r2, [pc, #120]	@ (80015b4 <MX_TIM3_Init+0x98>)
 800153c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000;
 800153e:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <MX_TIM3_Init+0x94>)
 8001540:	f24a 4210 	movw	r2, #42000	@ 0xa410
 8001544:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <MX_TIM3_Init+0x94>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800154c:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <MX_TIM3_Init+0x94>)
 800154e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001552:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <MX_TIM3_Init+0x94>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <MX_TIM3_Init+0x94>)
 800155c:	2280      	movs	r2, #128	@ 0x80
 800155e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001560:	4813      	ldr	r0, [pc, #76]	@ (80015b0 <MX_TIM3_Init+0x94>)
 8001562:	f002 fea5 	bl	80042b0 <HAL_TIM_Base_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800156c:	f000 fa86 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001570:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001574:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4619      	mov	r1, r3
 800157c:	480c      	ldr	r0, [pc, #48]	@ (80015b0 <MX_TIM3_Init+0x94>)
 800157e:	f003 f868 	bl	8004652 <HAL_TIM_ConfigClockSource>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001588:	f000 fa78 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001594:	463b      	mov	r3, r7
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <MX_TIM3_Init+0x94>)
 800159a:	f003 fa6f 	bl	8004a7c <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80015a4:	f000 fa6a 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000400 	.word	0x20000400
 80015b4:	40000400 	.word	0x40000400

080015b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <MX_TIM4_Init+0x94>)
 80015d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001650 <MX_TIM4_Init+0x98>)
 80015d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42000;
 80015da:	4b1c      	ldr	r3, [pc, #112]	@ (800164c <MX_TIM4_Init+0x94>)
 80015dc:	f24a 4210 	movw	r2, #42000	@ 0xa410
 80015e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <MX_TIM4_Init+0x94>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 80015e8:	4b18      	ldr	r3, [pc, #96]	@ (800164c <MX_TIM4_Init+0x94>)
 80015ea:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80015ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f0:	4b16      	ldr	r3, [pc, #88]	@ (800164c <MX_TIM4_Init+0x94>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <MX_TIM4_Init+0x94>)
 80015f8:	2280      	movs	r2, #128	@ 0x80
 80015fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015fc:	4813      	ldr	r0, [pc, #76]	@ (800164c <MX_TIM4_Init+0x94>)
 80015fe:	f002 fe57 	bl	80042b0 <HAL_TIM_Base_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001608:	f000 fa38 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001610:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	4619      	mov	r1, r3
 8001618:	480c      	ldr	r0, [pc, #48]	@ (800164c <MX_TIM4_Init+0x94>)
 800161a:	f003 f81a 	bl	8004652 <HAL_TIM_ConfigClockSource>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001624:	f000 fa2a 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001630:	463b      	mov	r3, r7
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	@ (800164c <MX_TIM4_Init+0x94>)
 8001636:	f003 fa21 	bl	8004a7c <HAL_TIMEx_MasterConfigSynchronization>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001640:	f000 fa1c 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000448 	.word	0x20000448
 8001650:	40000800 	.word	0x40000800

08001654 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001658:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MX_USART1_UART_Init+0x4c>)
 800165a:	4a12      	ldr	r2, [pc, #72]	@ (80016a4 <MX_USART1_UART_Init+0x50>)
 800165c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800165e:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <MX_USART1_UART_Init+0x4c>)
 8001660:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001664:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <MX_USART1_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MX_USART1_UART_Init+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <MX_USART1_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001678:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <MX_USART1_UART_Init+0x4c>)
 800167a:	220c      	movs	r2, #12
 800167c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <MX_USART1_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <MX_USART1_UART_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_USART1_UART_Init+0x4c>)
 800168c:	f003 fa78 	bl	8004b80 <HAL_UART_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001696:	f000 f9f1 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000490 	.word	0x20000490
 80016a4:	40011000 	.word	0x40011000

080016a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	@ (80016f8 <MX_USART2_UART_Init+0x50>)
 80016b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016cc:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016ce:	220c      	movs	r2, #12
 80016d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016e0:	f003 fa4e 	bl	8004b80 <HAL_UART_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016ea:	f000 f9c7 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200004d8 	.word	0x200004d8
 80016f8:	40004400 	.word	0x40004400

080016fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	@ 0x28
 8001700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b2d      	ldr	r3, [pc, #180]	@ (80017cc <MX_GPIO_Init+0xd0>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a2c      	ldr	r2, [pc, #176]	@ (80017cc <MX_GPIO_Init+0xd0>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b2a      	ldr	r3, [pc, #168]	@ (80017cc <MX_GPIO_Init+0xd0>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b26      	ldr	r3, [pc, #152]	@ (80017cc <MX_GPIO_Init+0xd0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a25      	ldr	r2, [pc, #148]	@ (80017cc <MX_GPIO_Init+0xd0>)
 8001738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b23      	ldr	r3, [pc, #140]	@ (80017cc <MX_GPIO_Init+0xd0>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <MX_GPIO_Init+0xd0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a1e      	ldr	r2, [pc, #120]	@ (80017cc <MX_GPIO_Init+0xd0>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <MX_GPIO_Init+0xd0>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b18      	ldr	r3, [pc, #96]	@ (80017cc <MX_GPIO_Init+0xd0>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a17      	ldr	r2, [pc, #92]	@ (80017cc <MX_GPIO_Init+0xd0>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <MX_GPIO_Init+0xd0>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	2120      	movs	r1, #32
 8001786:	4812      	ldr	r0, [pc, #72]	@ (80017d0 <MX_GPIO_Init+0xd4>)
 8001788:	f001 f8e6 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800178c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001792:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	480c      	ldr	r0, [pc, #48]	@ (80017d4 <MX_GPIO_Init+0xd8>)
 80017a4:	f000 ff54 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017a8:	2320      	movs	r3, #32
 80017aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	4804      	ldr	r0, [pc, #16]	@ (80017d0 <MX_GPIO_Init+0xd4>)
 80017c0:	f000 ff46 	bl	8002650 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017c4:	bf00      	nop
 80017c6:	3728      	adds	r7, #40	@ 0x28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020000 	.word	0x40020000
 80017d4:	40020800 	.word	0x40020800

080017d8 <display_lcd>:

/* USER CODE BEGIN 4 */
void display_lcd(){
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  Time[7]     = date_time.sec % 10 + 48; // + 48 because convert from int to char
 80017dc:	4b6e      	ldr	r3, [pc, #440]	@ (8001998 <display_lcd+0x1c0>)
 80017de:	789a      	ldrb	r2, [r3, #2]
 80017e0:	4b6e      	ldr	r3, [pc, #440]	@ (800199c <display_lcd+0x1c4>)
 80017e2:	fba3 1302 	umull	r1, r3, r3, r2
 80017e6:	08d9      	lsrs	r1, r3, #3
 80017e8:	460b      	mov	r3, r1
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	3330      	adds	r3, #48	@ 0x30
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b69      	ldr	r3, [pc, #420]	@ (80019a0 <display_lcd+0x1c8>)
 80017fa:	71da      	strb	r2, [r3, #7]
  Time[6]     = date_time.sec / 10 + 48;
 80017fc:	4b66      	ldr	r3, [pc, #408]	@ (8001998 <display_lcd+0x1c0>)
 80017fe:	789b      	ldrb	r3, [r3, #2]
 8001800:	4a66      	ldr	r2, [pc, #408]	@ (800199c <display_lcd+0x1c4>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	08db      	lsrs	r3, r3, #3
 8001808:	b2db      	uxtb	r3, r3
 800180a:	3330      	adds	r3, #48	@ 0x30
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b64      	ldr	r3, [pc, #400]	@ (80019a0 <display_lcd+0x1c8>)
 8001810:	719a      	strb	r2, [r3, #6]
  Time[4]     = date_time.min % 10 + 48;
 8001812:	4b61      	ldr	r3, [pc, #388]	@ (8001998 <display_lcd+0x1c0>)
 8001814:	785a      	ldrb	r2, [r3, #1]
 8001816:	4b61      	ldr	r3, [pc, #388]	@ (800199c <display_lcd+0x1c4>)
 8001818:	fba3 1302 	umull	r1, r3, r3, r2
 800181c:	08d9      	lsrs	r1, r3, #3
 800181e:	460b      	mov	r3, r1
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	3330      	adds	r3, #48	@ 0x30
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4b5c      	ldr	r3, [pc, #368]	@ (80019a0 <display_lcd+0x1c8>)
 8001830:	711a      	strb	r2, [r3, #4]
  Time[3]     = date_time.min / 10 + 48;
 8001832:	4b59      	ldr	r3, [pc, #356]	@ (8001998 <display_lcd+0x1c0>)
 8001834:	785b      	ldrb	r3, [r3, #1]
 8001836:	4a59      	ldr	r2, [pc, #356]	@ (800199c <display_lcd+0x1c4>)
 8001838:	fba2 2303 	umull	r2, r3, r2, r3
 800183c:	08db      	lsrs	r3, r3, #3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	3330      	adds	r3, #48	@ 0x30
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b56      	ldr	r3, [pc, #344]	@ (80019a0 <display_lcd+0x1c8>)
 8001846:	70da      	strb	r2, [r3, #3]
  Time[1]     = date_time.hour   % 10 + 48;
 8001848:	4b53      	ldr	r3, [pc, #332]	@ (8001998 <display_lcd+0x1c0>)
 800184a:	781a      	ldrb	r2, [r3, #0]
 800184c:	4b53      	ldr	r3, [pc, #332]	@ (800199c <display_lcd+0x1c4>)
 800184e:	fba3 1302 	umull	r1, r3, r3, r2
 8001852:	08d9      	lsrs	r1, r3, #3
 8001854:	460b      	mov	r3, r1
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	3330      	adds	r3, #48	@ 0x30
 8001862:	b2da      	uxtb	r2, r3
 8001864:	4b4e      	ldr	r3, [pc, #312]	@ (80019a0 <display_lcd+0x1c8>)
 8001866:	705a      	strb	r2, [r3, #1]
  Time[0]     = date_time.hour   / 10 + 48;
 8001868:	4b4b      	ldr	r3, [pc, #300]	@ (8001998 <display_lcd+0x1c0>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4a4b      	ldr	r2, [pc, #300]	@ (800199c <display_lcd+0x1c4>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	08db      	lsrs	r3, r3, #3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	3330      	adds	r3, #48	@ 0x30
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b49      	ldr	r3, [pc, #292]	@ (80019a0 <display_lcd+0x1c8>)
 800187c:	701a      	strb	r2, [r3, #0]
  Time[8]	  = '\0';
 800187e:	4b48      	ldr	r3, [pc, #288]	@ (80019a0 <display_lcd+0x1c8>)
 8001880:	2200      	movs	r2, #0
 8001882:	721a      	strb	r2, [r3, #8]
  Calendar[9] = date_time.year   % 10 + 48;
 8001884:	4b44      	ldr	r3, [pc, #272]	@ (8001998 <display_lcd+0x1c0>)
 8001886:	799a      	ldrb	r2, [r3, #6]
 8001888:	4b44      	ldr	r3, [pc, #272]	@ (800199c <display_lcd+0x1c4>)
 800188a:	fba3 1302 	umull	r1, r3, r3, r2
 800188e:	08d9      	lsrs	r1, r3, #3
 8001890:	460b      	mov	r3, r1
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	3330      	adds	r3, #48	@ 0x30
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	4b40      	ldr	r3, [pc, #256]	@ (80019a4 <display_lcd+0x1cc>)
 80018a2:	725a      	strb	r2, [r3, #9]
  Calendar[8] = date_time.year   / 10 + 48;
 80018a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001998 <display_lcd+0x1c0>)
 80018a6:	799b      	ldrb	r3, [r3, #6]
 80018a8:	4a3c      	ldr	r2, [pc, #240]	@ (800199c <display_lcd+0x1c4>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	08db      	lsrs	r3, r3, #3
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	3330      	adds	r3, #48	@ 0x30
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4b3b      	ldr	r3, [pc, #236]	@ (80019a4 <display_lcd+0x1cc>)
 80018b8:	721a      	strb	r2, [r3, #8]
  Calendar[4] = date_time.mon  % 10 + 48;
 80018ba:	4b37      	ldr	r3, [pc, #220]	@ (8001998 <display_lcd+0x1c0>)
 80018bc:	795a      	ldrb	r2, [r3, #5]
 80018be:	4b37      	ldr	r3, [pc, #220]	@ (800199c <display_lcd+0x1c4>)
 80018c0:	fba3 1302 	umull	r1, r3, r3, r2
 80018c4:	08d9      	lsrs	r1, r3, #3
 80018c6:	460b      	mov	r3, r1
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	3330      	adds	r3, #48	@ 0x30
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b33      	ldr	r3, [pc, #204]	@ (80019a4 <display_lcd+0x1cc>)
 80018d8:	711a      	strb	r2, [r3, #4]
  Calendar[3] = date_time.mon  / 10 + 48;
 80018da:	4b2f      	ldr	r3, [pc, #188]	@ (8001998 <display_lcd+0x1c0>)
 80018dc:	795b      	ldrb	r3, [r3, #5]
 80018de:	4a2f      	ldr	r2, [pc, #188]	@ (800199c <display_lcd+0x1c4>)
 80018e0:	fba2 2303 	umull	r2, r3, r2, r3
 80018e4:	08db      	lsrs	r3, r3, #3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	3330      	adds	r3, #48	@ 0x30
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b2d      	ldr	r3, [pc, #180]	@ (80019a4 <display_lcd+0x1cc>)
 80018ee:	70da      	strb	r2, [r3, #3]
  Calendar[1] = date_time.date   % 10 + 48;
 80018f0:	4b29      	ldr	r3, [pc, #164]	@ (8001998 <display_lcd+0x1c0>)
 80018f2:	791a      	ldrb	r2, [r3, #4]
 80018f4:	4b29      	ldr	r3, [pc, #164]	@ (800199c <display_lcd+0x1c4>)
 80018f6:	fba3 1302 	umull	r1, r3, r3, r2
 80018fa:	08d9      	lsrs	r1, r3, #3
 80018fc:	460b      	mov	r3, r1
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	3330      	adds	r3, #48	@ 0x30
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b25      	ldr	r3, [pc, #148]	@ (80019a4 <display_lcd+0x1cc>)
 800190e:	705a      	strb	r2, [r3, #1]
  Calendar[0] = date_time.date   / 10 + 48;
 8001910:	4b21      	ldr	r3, [pc, #132]	@ (8001998 <display_lcd+0x1c0>)
 8001912:	791b      	ldrb	r3, [r3, #4]
 8001914:	4a21      	ldr	r2, [pc, #132]	@ (800199c <display_lcd+0x1c4>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	08db      	lsrs	r3, r3, #3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	3330      	adds	r3, #48	@ 0x30
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <display_lcd+0x1cc>)
 8001924:	701a      	strb	r2, [r3, #0]
  Calendar[10]= '\0';
 8001926:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <display_lcd+0x1cc>)
 8001928:	2200      	movs	r2, #0
 800192a:	729a      	strb	r2, [r3, #10]
  CLCD_I2C_SetCursor(&LCD1, 0, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2100      	movs	r1, #0
 8001930:	481d      	ldr	r0, [pc, #116]	@ (80019a8 <display_lcd+0x1d0>)
 8001932:	f004 fad1 	bl	8005ed8 <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1,Time);
 8001936:	491a      	ldr	r1, [pc, #104]	@ (80019a0 <display_lcd+0x1c8>)
 8001938:	481b      	ldr	r0, [pc, #108]	@ (80019a8 <display_lcd+0x1d0>)
 800193a:	f004 fb20 	bl	8005f7e <CLCD_I2C_WriteString>

  CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800193e:	2201      	movs	r2, #1
 8001940:	2100      	movs	r1, #0
 8001942:	4819      	ldr	r0, [pc, #100]	@ (80019a8 <display_lcd+0x1d0>)
 8001944:	f004 fac8 	bl	8005ed8 <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1,Calendar);
 8001948:	4916      	ldr	r1, [pc, #88]	@ (80019a4 <display_lcd+0x1cc>)
 800194a:	4817      	ldr	r0, [pc, #92]	@ (80019a8 <display_lcd+0x1d0>)
 800194c:	f004 fb17 	bl	8005f7e <CLCD_I2C_WriteString>

  update_parameter_to_display(c_humidity,f_humidity);
 8001950:	4b16      	ldr	r3, [pc, #88]	@ (80019ac <display_lcd+0x1d4>)
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	eeb0 0a67 	vmov.f32	s0, s15
 800195a:	4815      	ldr	r0, [pc, #84]	@ (80019b0 <display_lcd+0x1d8>)
 800195c:	f000 f82e 	bl	80019bc <update_parameter_to_display>
  CLCD_I2C_SetCursor(&LCD1, 12, 1);
 8001960:	2201      	movs	r2, #1
 8001962:	210c      	movs	r1, #12
 8001964:	4810      	ldr	r0, [pc, #64]	@ (80019a8 <display_lcd+0x1d0>)
 8001966:	f004 fab7 	bl	8005ed8 <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1, c_humidity);
 800196a:	4911      	ldr	r1, [pc, #68]	@ (80019b0 <display_lcd+0x1d8>)
 800196c:	480e      	ldr	r0, [pc, #56]	@ (80019a8 <display_lcd+0x1d0>)
 800196e:	f004 fb06 	bl	8005f7e <CLCD_I2C_WriteString>

  update_parameter_to_display(c_temperature,f_temperature);
 8001972:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <display_lcd+0x1dc>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	eeb0 0a67 	vmov.f32	s0, s15
 800197c:	480e      	ldr	r0, [pc, #56]	@ (80019b8 <display_lcd+0x1e0>)
 800197e:	f000 f81d 	bl	80019bc <update_parameter_to_display>
  CLCD_I2C_SetCursor(&LCD1, 12, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	210c      	movs	r1, #12
 8001986:	4808      	ldr	r0, [pc, #32]	@ (80019a8 <display_lcd+0x1d0>)
 8001988:	f004 faa6 	bl	8005ed8 <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1, c_temperature);
 800198c:	490a      	ldr	r1, [pc, #40]	@ (80019b8 <display_lcd+0x1e0>)
 800198e:	4806      	ldr	r0, [pc, #24]	@ (80019a8 <display_lcd+0x1d0>)
 8001990:	f004 faf5 	bl	8005f7e <CLCD_I2C_WriteString>
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000520 	.word	0x20000520
 800199c:	cccccccd 	.word	0xcccccccd
 80019a0:	20000000 	.word	0x20000000
 80019a4:	2000000c 	.word	0x2000000c
 80019a8:	2000052c 	.word	0x2000052c
 80019ac:	2000054c 	.word	0x2000054c
 80019b0:	20000544 	.word	0x20000544
 80019b4:	20000540 	.word	0x20000540
 80019b8:	20000538 	.word	0x20000538

080019bc <update_parameter_to_display>:

void update_parameter_to_display(char *a , float b) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	ed87 0a00 	vstr	s0, [r7]
    // update from float to char
    sprintf(a, "%.1f", b);
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	f7fe fdd5 	bl	8000578 <__aeabi_f2d>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4904      	ldr	r1, [pc, #16]	@ (80019e4 <update_parameter_to_display+0x28>)
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f005 fdb1 	bl	800753c <siprintf>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	0800996c 	.word	0x0800996c

080019e8 <send_uart>:
void send_uart(){
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af04      	add	r7, sp, #16
	print_cli("time: %s calendar: %s temperature: %.1f humidity: %.1f\n",Time,Calendar,f_temperature,f_humidity);
 80019ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001a24 <send_uart+0x3c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fdc0 	bl	8000578 <__aeabi_f2d>
 80019f8:	4604      	mov	r4, r0
 80019fa:	460d      	mov	r5, r1
 80019fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <send_uart+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fdb9 	bl	8000578 <__aeabi_f2d>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a0e:	e9cd 4500 	strd	r4, r5, [sp]
 8001a12:	4a06      	ldr	r2, [pc, #24]	@ (8001a2c <send_uart+0x44>)
 8001a14:	4906      	ldr	r1, [pc, #24]	@ (8001a30 <send_uart+0x48>)
 8001a16:	4807      	ldr	r0, [pc, #28]	@ (8001a34 <send_uart+0x4c>)
 8001a18:	f004 fddc 	bl	80065d4 <print_cli>
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bdb0      	pop	{r4, r5, r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000540 	.word	0x20000540
 8001a28:	2000054c 	.word	0x2000054c
 8001a2c:	2000000c 	.word	0x2000000c
 8001a30:	20000000 	.word	0x20000000
 8001a34:	08009974 	.word	0x08009974

08001a38 <read_time>:

void read_time(){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	rtc_read_time(&date_time);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <read_time+0x10>)
 8001a3e:	f004 f90f 	bl	8005c60 <rtc_read_time>
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000520 	.word	0x20000520

08001a4c <read_temp_and_hum>:

void read_temp_and_hum(){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	//float perious = HAL_GetTick()/1000.f;
    f_temperature = SHT2x_GetTemperature(1);
 8001a50:	2001      	movs	r0, #1
 8001a52:	f004 feb5 	bl	80067c0 <SHT2x_GetTemperature>
 8001a56:	eef0 7a40 	vmov.f32	s15, s0
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <read_temp_and_hum+0x28>)
 8001a5c:	edc3 7a00 	vstr	s15, [r3]
    f_humidity = SHT2x_GetRelativeHumidity(1);
 8001a60:	2001      	movs	r0, #1
 8001a62:	f004 fef3 	bl	800684c <SHT2x_GetRelativeHumidity>
 8001a66:	eef0 7a40 	vmov.f32	s15, s0
 8001a6a:	4b03      	ldr	r3, [pc, #12]	@ (8001a78 <read_temp_and_hum+0x2c>)
 8001a6c:	edc3 7a00 	vstr	s15, [r3]
    //float current =
    //current_time = HAL_GetTick() - current_time;
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000540 	.word	0x20000540
 8001a78:	2000054c 	.word	0x2000054c

08001a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a80:	b672      	cpsid	i
}
 8001a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <Error_Handler+0x8>

08001a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	4a08      	ldr	r2, [pc, #32]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08e      	sub	sp, #56	@ 0x38
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a63      	ldr	r2, [pc, #396]	@ (8001c84 <HAL_I2C_MspInit+0x1ac>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d12c      	bne.n	8001b54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
 8001afe:	4b62      	ldr	r3, [pc, #392]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a61      	ldr	r2, [pc, #388]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b5f      	ldr	r3, [pc, #380]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	623b      	str	r3, [r7, #32]
 8001b14:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b16:	23c0      	movs	r3, #192	@ 0xc0
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b1a:	2312      	movs	r3, #18
 8001b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b26:	2304      	movs	r3, #4
 8001b28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4856      	ldr	r0, [pc, #344]	@ (8001c8c <HAL_I2C_MspInit+0x1b4>)
 8001b32:	f000 fd8d 	bl	8002650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	4b53      	ldr	r3, [pc, #332]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	4a52      	ldr	r2, [pc, #328]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001b40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b46:	4b50      	ldr	r3, [pc, #320]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b4e:	61fb      	str	r3, [r7, #28]
 8001b50:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001b52:	e093      	b.n	8001c7c <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a4d      	ldr	r2, [pc, #308]	@ (8001c90 <HAL_I2C_MspInit+0x1b8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d13d      	bne.n	8001bda <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	4b49      	ldr	r3, [pc, #292]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	4a48      	ldr	r2, [pc, #288]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6e:	4b46      	ldr	r3, [pc, #280]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b80:	2312      	movs	r3, #18
 8001b82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b94:	4619      	mov	r1, r3
 8001b96:	483d      	ldr	r0, [pc, #244]	@ (8001c8c <HAL_I2C_MspInit+0x1b4>)
 8001b98:	f000 fd5a 	bl	8002650 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b9c:	2308      	movs	r3, #8
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba0:	2312      	movs	r3, #18
 8001ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001bac:	2309      	movs	r3, #9
 8001bae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4835      	ldr	r0, [pc, #212]	@ (8001c8c <HAL_I2C_MspInit+0x1b4>)
 8001bb8:	f000 fd4a 	bl	8002650 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	4b31      	ldr	r3, [pc, #196]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc4:	4a30      	ldr	r2, [pc, #192]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001bc6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697b      	ldr	r3, [r7, #20]
}
 8001bd8:	e050      	b.n	8001c7c <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a2d      	ldr	r2, [pc, #180]	@ (8001c94 <HAL_I2C_MspInit+0x1bc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d14b      	bne.n	8001c7c <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	4b27      	ldr	r3, [pc, #156]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bec:	4a26      	ldr	r2, [pc, #152]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001bee:	f043 0304 	orr.w	r3, r3, #4
 8001bf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf4:	4b24      	ldr	r3, [pc, #144]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c08:	4a1f      	ldr	r2, [pc, #124]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c10:	4b1d      	ldr	r3, [pc, #116]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c22:	2312      	movs	r3, #18
 8001c24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c2e:	2304      	movs	r3, #4
 8001c30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c36:	4619      	mov	r1, r3
 8001c38:	4817      	ldr	r0, [pc, #92]	@ (8001c98 <HAL_I2C_MspInit+0x1c0>)
 8001c3a:	f000 fd09 	bl	8002650 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c44:	2312      	movs	r3, #18
 8001c46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c50:	2304      	movs	r3, #4
 8001c52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4810      	ldr	r0, [pc, #64]	@ (8001c9c <HAL_I2C_MspInit+0x1c4>)
 8001c5c:	f000 fcf8 	bl	8002650 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c60:	2300      	movs	r3, #0
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	4b08      	ldr	r3, [pc, #32]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	4a07      	ldr	r2, [pc, #28]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001c6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <HAL_I2C_MspInit+0x1b0>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
}
 8001c7c:	bf00      	nop
 8001c7e:	3738      	adds	r7, #56	@ 0x38
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40005400 	.word	0x40005400
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40020400 	.word	0x40020400
 8001c90:	40005800 	.word	0x40005800
 8001c94:	40005c00 	.word	0x40005c00
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	40020000 	.word	0x40020000

08001ca0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a44      	ldr	r2, [pc, #272]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x120>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d12e      	bne.n	8001d10 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	4b43      	ldr	r3, [pc, #268]	@ (8001dc4 <HAL_TIM_Base_MspInit+0x124>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	4a42      	ldr	r2, [pc, #264]	@ (8001dc4 <HAL_TIM_Base_MspInit+0x124>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc2:	4b40      	ldr	r3, [pc, #256]	@ (8001dc4 <HAL_TIM_Base_MspInit+0x124>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 1, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	2018      	movs	r0, #24
 8001cd4:	f000 fbf3 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001cd8:	2018      	movs	r0, #24
 8001cda:	f000 fc0c 	bl	80024f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	2019      	movs	r0, #25
 8001ce4:	f000 fbeb 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ce8:	2019      	movs	r0, #25
 8001cea:	f000 fc04 	bl	80024f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	201a      	movs	r0, #26
 8001cf4:	f000 fbe3 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001cf8:	201a      	movs	r0, #26
 8001cfa:	f000 fbfc 	bl	80024f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2101      	movs	r1, #1
 8001d02:	201b      	movs	r0, #27
 8001d04:	f000 fbdb 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001d08:	201b      	movs	r0, #27
 8001d0a:	f000 fbf4 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d0e:	e052      	b.n	8001db6 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d18:	d116      	bne.n	8001d48 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b29      	ldr	r3, [pc, #164]	@ (8001dc4 <HAL_TIM_Base_MspInit+0x124>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	4a28      	ldr	r2, [pc, #160]	@ (8001dc4 <HAL_TIM_Base_MspInit+0x124>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2a:	4b26      	ldr	r3, [pc, #152]	@ (8001dc4 <HAL_TIM_Base_MspInit+0x124>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2101      	movs	r1, #1
 8001d3a:	201c      	movs	r0, #28
 8001d3c:	f000 fbbf 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d40:	201c      	movs	r0, #28
 8001d42:	f000 fbd8 	bl	80024f6 <HAL_NVIC_EnableIRQ>
}
 8001d46:	e036      	b.n	8001db6 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM3)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc8 <HAL_TIM_Base_MspInit+0x128>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d116      	bne.n	8001d80 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc4 <HAL_TIM_Base_MspInit+0x124>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8001dc4 <HAL_TIM_Base_MspInit+0x124>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d62:	4b18      	ldr	r3, [pc, #96]	@ (8001dc4 <HAL_TIM_Base_MspInit+0x124>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2101      	movs	r1, #1
 8001d72:	201d      	movs	r0, #29
 8001d74:	f000 fba3 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d78:	201d      	movs	r0, #29
 8001d7a:	f000 fbbc 	bl	80024f6 <HAL_NVIC_EnableIRQ>
}
 8001d7e:	e01a      	b.n	8001db6 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM4)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a11      	ldr	r2, [pc, #68]	@ (8001dcc <HAL_TIM_Base_MspInit+0x12c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d115      	bne.n	8001db6 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <HAL_TIM_Base_MspInit+0x124>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc4 <HAL_TIM_Base_MspInit+0x124>)
 8001d94:	f043 0304 	orr.w	r3, r3, #4
 8001d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <HAL_TIM_Base_MspInit+0x124>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2101      	movs	r1, #1
 8001daa:	201e      	movs	r0, #30
 8001dac:	f000 fb87 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001db0:	201e      	movs	r0, #30
 8001db2:	f000 fba0 	bl	80024f6 <HAL_NVIC_EnableIRQ>
}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40010000 	.word	0x40010000
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40000400 	.word	0x40000400
 8001dcc:	40000800 	.word	0x40000800

08001dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08c      	sub	sp, #48	@ 0x30
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a36      	ldr	r2, [pc, #216]	@ (8001ec8 <HAL_UART_MspInit+0xf8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d135      	bne.n	8001e5e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	4b35      	ldr	r3, [pc, #212]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfa:	4a34      	ldr	r2, [pc, #208]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001dfc:	f043 0310 	orr.w	r3, r3, #16
 8001e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e02:	4b32      	ldr	r3, [pc, #200]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	4b2e      	ldr	r3, [pc, #184]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4a2d      	ldr	r2, [pc, #180]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e2a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e3c:	2307      	movs	r3, #7
 8001e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	4619      	mov	r1, r3
 8001e46:	4822      	ldr	r0, [pc, #136]	@ (8001ed0 <HAL_UART_MspInit+0x100>)
 8001e48:	f000 fc02 	bl	8002650 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2100      	movs	r1, #0
 8001e50:	2025      	movs	r0, #37	@ 0x25
 8001e52:	f000 fb34 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e56:	2025      	movs	r0, #37	@ 0x25
 8001e58:	f000 fb4d 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e5c:	e030      	b.n	8001ec0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed4 <HAL_UART_MspInit+0x104>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d12b      	bne.n	8001ec0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e68:	2300      	movs	r3, #0
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	4b17      	ldr	r3, [pc, #92]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e70:	4a16      	ldr	r2, [pc, #88]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e76:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e78:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	4b10      	ldr	r3, [pc, #64]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ea0:	230c      	movs	r3, #12
 8001ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eb0:	2307      	movs	r3, #7
 8001eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <HAL_UART_MspInit+0x100>)
 8001ebc:	f000 fbc8 	bl	8002650 <HAL_GPIO_Init>
}
 8001ec0:	bf00      	nop
 8001ec2:	3730      	adds	r7, #48	@ 0x30
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40011000 	.word	0x40011000
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40004400 	.word	0x40004400

08001ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <NMI_Handler+0x4>

08001ee0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <HardFault_Handler+0x4>

08001ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <MemManage_Handler+0x4>

08001ef0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <BusFault_Handler+0x4>

08001ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001efc:	bf00      	nop
 8001efe:	e7fd      	b.n	8001efc <UsageFault_Handler+0x4>

08001f00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f2e:	f000 f9a7 	bl	8002280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f3c:	4802      	ldr	r0, [pc, #8]	@ (8001f48 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001f3e:	f002 fa98 	bl	8004472 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000370 	.word	0x20000370

08001f4c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f50:	4802      	ldr	r0, [pc, #8]	@ (8001f5c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f52:	f002 fa8e 	bl	8004472 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000370 	.word	0x20000370

08001f60 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f64:	4802      	ldr	r0, [pc, #8]	@ (8001f70 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001f66:	f002 fa84 	bl	8004472 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000370 	.word	0x20000370

08001f74 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f78:	4802      	ldr	r0, [pc, #8]	@ (8001f84 <TIM1_CC_IRQHandler+0x10>)
 8001f7a:	f002 fa7a 	bl	8004472 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000370 	.word	0x20000370

08001f88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f8c:	4802      	ldr	r0, [pc, #8]	@ (8001f98 <TIM2_IRQHandler+0x10>)
 8001f8e:	f002 fa70 	bl	8004472 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200003b8 	.word	0x200003b8

08001f9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fa0:	4802      	ldr	r0, [pc, #8]	@ (8001fac <TIM3_IRQHandler+0x10>)
 8001fa2:	f002 fa66 	bl	8004472 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000400 	.word	0x20000400

08001fb0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fb4:	4802      	ldr	r0, [pc, #8]	@ (8001fc0 <TIM4_IRQHandler+0x10>)
 8001fb6:	f002 fa5c 	bl	8004472 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000448 	.word	0x20000448

08001fc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fc8:	4802      	ldr	r0, [pc, #8]	@ (8001fd4 <USART1_IRQHandler+0x10>)
 8001fca:	f002 fed9 	bl	8004d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000490 	.word	0x20000490

08001fd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return 1;
 8001fdc:	2301      	movs	r3, #1
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_kill>:

int _kill(int pid, int sig)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ff2:	f005 fbd5 	bl	80077a0 <__errno>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2216      	movs	r2, #22
 8001ffa:	601a      	str	r2, [r3, #0]
  return -1;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <_exit>:

void _exit (int status)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002010:	f04f 31ff 	mov.w	r1, #4294967295
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ffe7 	bl	8001fe8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800201a:	bf00      	nop
 800201c:	e7fd      	b.n	800201a <_exit+0x12>

0800201e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	e00a      	b.n	8002046 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002030:	f3af 8000 	nop.w
 8002034:	4601      	mov	r1, r0
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	60ba      	str	r2, [r7, #8]
 800203c:	b2ca      	uxtb	r2, r1
 800203e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3301      	adds	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	dbf0      	blt.n	8002030 <_read+0x12>
  }

  return len;
 800204e:	687b      	ldr	r3, [r7, #4]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	e009      	b.n	800207e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	60ba      	str	r2, [r7, #8]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3301      	adds	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	dbf1      	blt.n	800206a <_write+0x12>
  }
  return len;
 8002086:	687b      	ldr	r3, [r7, #4]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <_close>:

int _close(int file)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002098:	f04f 33ff 	mov.w	r3, #4294967295
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020b8:	605a      	str	r2, [r3, #4]
  return 0;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <_isatty>:

int _isatty(int file)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020d0:	2301      	movs	r3, #1
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020de:	b480      	push	{r7}
 80020e0:	b085      	sub	sp, #20
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002100:	4a14      	ldr	r2, [pc, #80]	@ (8002154 <_sbrk+0x5c>)
 8002102:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <_sbrk+0x60>)
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800210c:	4b13      	ldr	r3, [pc, #76]	@ (800215c <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002114:	4b11      	ldr	r3, [pc, #68]	@ (800215c <_sbrk+0x64>)
 8002116:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <_sbrk+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211a:	4b10      	ldr	r3, [pc, #64]	@ (800215c <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d207      	bcs.n	8002138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002128:	f005 fb3a 	bl	80077a0 <__errno>
 800212c:	4603      	mov	r3, r0
 800212e:	220c      	movs	r2, #12
 8002130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	e009      	b.n	800214c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213e:	4b07      	ldr	r3, [pc, #28]	@ (800215c <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	4a05      	ldr	r2, [pc, #20]	@ (800215c <_sbrk+0x64>)
 8002148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20018000 	.word	0x20018000
 8002158:	00000400 	.word	0x00000400
 800215c:	20000568 	.word	0x20000568
 8002160:	20000750 	.word	0x20000750

08002164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002168:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <SystemInit+0x20>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216e:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <SystemInit+0x20>)
 8002170:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002174:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002188:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800218c:	f7ff ffea 	bl	8002164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002190:	480c      	ldr	r0, [pc, #48]	@ (80021c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002192:	490d      	ldr	r1, [pc, #52]	@ (80021c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002194:	4a0d      	ldr	r2, [pc, #52]	@ (80021cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002198:	e002      	b.n	80021a0 <LoopCopyDataInit>

0800219a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800219c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219e:	3304      	adds	r3, #4

080021a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a4:	d3f9      	bcc.n	800219a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a6:	4a0a      	ldr	r2, [pc, #40]	@ (80021d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021a8:	4c0a      	ldr	r4, [pc, #40]	@ (80021d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ac:	e001      	b.n	80021b2 <LoopFillZerobss>

080021ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b0:	3204      	adds	r2, #4

080021b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b4:	d3fb      	bcc.n	80021ae <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80021b6:	f005 faf9 	bl	80077ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ba:	f7fe ff8b 	bl	80010d4 <main>
  bx  lr    
 80021be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c8:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 80021cc:	0800a0c4 	.word	0x0800a0c4
  ldr r2, =_sbss
 80021d0:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80021d4:	20000750 	.word	0x20000750

080021d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d8:	e7fe      	b.n	80021d8 <ADC_IRQHandler>
	...

080021dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021e0:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <HAL_Init+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0d      	ldr	r2, [pc, #52]	@ (800221c <HAL_Init+0x40>)
 80021e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021ec:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <HAL_Init+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <HAL_Init+0x40>)
 80021f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f8:	4b08      	ldr	r3, [pc, #32]	@ (800221c <HAL_Init+0x40>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a07      	ldr	r2, [pc, #28]	@ (800221c <HAL_Init+0x40>)
 80021fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002204:	2003      	movs	r0, #3
 8002206:	f000 f94f 	bl	80024a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800220a:	2000      	movs	r0, #0
 800220c:	f000 f808 	bl	8002220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002210:	f7ff fc3a 	bl	8001a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023c00 	.word	0x40023c00

08002220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002228:	4b12      	ldr	r3, [pc, #72]	@ (8002274 <HAL_InitTick+0x54>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <HAL_InitTick+0x58>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002236:	fbb3 f3f1 	udiv	r3, r3, r1
 800223a:	fbb2 f3f3 	udiv	r3, r2, r3
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f967 	bl	8002512 <HAL_SYSTICK_Config>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e00e      	b.n	800226c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b0f      	cmp	r3, #15
 8002252:	d80a      	bhi.n	800226a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002254:	2200      	movs	r2, #0
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	f04f 30ff 	mov.w	r0, #4294967295
 800225c:	f000 f92f 	bl	80024be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002260:	4a06      	ldr	r2, [pc, #24]	@ (800227c <HAL_InitTick+0x5c>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	e000      	b.n	800226c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
}
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20000018 	.word	0x20000018
 8002278:	20000020 	.word	0x20000020
 800227c:	2000001c 	.word	0x2000001c

08002280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002284:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <HAL_IncTick+0x20>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <HAL_IncTick+0x24>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4413      	add	r3, r2
 8002290:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <HAL_IncTick+0x24>)
 8002292:	6013      	str	r3, [r2, #0]
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000020 	.word	0x20000020
 80022a4:	2000056c 	.word	0x2000056c

080022a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return uwTick;
 80022ac:	4b03      	ldr	r3, [pc, #12]	@ (80022bc <HAL_GetTick+0x14>)
 80022ae:	681b      	ldr	r3, [r3, #0]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	2000056c 	.word	0x2000056c

080022c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c8:	f7ff ffee 	bl	80022a8 <HAL_GetTick>
 80022cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d8:	d005      	beq.n	80022e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022da:	4b0a      	ldr	r3, [pc, #40]	@ (8002304 <HAL_Delay+0x44>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4413      	add	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022e6:	bf00      	nop
 80022e8:	f7ff ffde 	bl	80022a8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d8f7      	bhi.n	80022e8 <HAL_Delay+0x28>
  {
  }
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000020 	.word	0x20000020

08002308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002318:	4b0c      	ldr	r3, [pc, #48]	@ (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002324:	4013      	ands	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002330:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800233a:	4a04      	ldr	r2, [pc, #16]	@ (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	60d3      	str	r3, [r2, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002354:	4b04      	ldr	r3, [pc, #16]	@ (8002368 <__NVIC_GetPriorityGrouping+0x18>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	f003 0307 	and.w	r3, r3, #7
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	2b00      	cmp	r3, #0
 800237c:	db0b      	blt.n	8002396 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	4907      	ldr	r1, [pc, #28]	@ (80023a4 <__NVIC_EnableIRQ+0x38>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	2001      	movs	r0, #1
 800238e:	fa00 f202 	lsl.w	r2, r0, r2
 8002392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000e100 	.word	0xe000e100

080023a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	db0a      	blt.n	80023d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	490c      	ldr	r1, [pc, #48]	@ (80023f4 <__NVIC_SetPriority+0x4c>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	440b      	add	r3, r1
 80023cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d0:	e00a      	b.n	80023e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4908      	ldr	r1, [pc, #32]	@ (80023f8 <__NVIC_SetPriority+0x50>)
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	3b04      	subs	r3, #4
 80023e0:	0112      	lsls	r2, r2, #4
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	440b      	add	r3, r1
 80023e6:	761a      	strb	r2, [r3, #24]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000e100 	.word	0xe000e100
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	@ 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f1c3 0307 	rsb	r3, r3, #7
 8002416:	2b04      	cmp	r3, #4
 8002418:	bf28      	it	cs
 800241a:	2304      	movcs	r3, #4
 800241c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3304      	adds	r3, #4
 8002422:	2b06      	cmp	r3, #6
 8002424:	d902      	bls.n	800242c <NVIC_EncodePriority+0x30>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3b03      	subs	r3, #3
 800242a:	e000      	b.n	800242e <NVIC_EncodePriority+0x32>
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	f04f 32ff 	mov.w	r2, #4294967295
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	401a      	ands	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002444:	f04f 31ff 	mov.w	r1, #4294967295
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	43d9      	mvns	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	4313      	orrs	r3, r2
         );
}
 8002456:	4618      	mov	r0, r3
 8002458:	3724      	adds	r7, #36	@ 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002474:	d301      	bcc.n	800247a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002476:	2301      	movs	r3, #1
 8002478:	e00f      	b.n	800249a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247a:	4a0a      	ldr	r2, [pc, #40]	@ (80024a4 <SysTick_Config+0x40>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002482:	210f      	movs	r1, #15
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f7ff ff8e 	bl	80023a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800248c:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <SysTick_Config+0x40>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002492:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <SysTick_Config+0x40>)
 8002494:	2207      	movs	r2, #7
 8002496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	e000e010 	.word	0xe000e010

080024a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ff29 	bl	8002308 <__NVIC_SetPriorityGrouping>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d0:	f7ff ff3e 	bl	8002350 <__NVIC_GetPriorityGrouping>
 80024d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	6978      	ldr	r0, [r7, #20]
 80024dc:	f7ff ff8e 	bl	80023fc <NVIC_EncodePriority>
 80024e0:	4602      	mov	r2, r0
 80024e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff5d 	bl	80023a8 <__NVIC_SetPriority>
}
 80024ee:	bf00      	nop
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff31 	bl	800236c <__NVIC_EnableIRQ>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ffa2 	bl	8002464 <SysTick_Config>
 8002520:	4603      	mov	r3, r0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002536:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff feb6 	bl	80022a8 <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d008      	beq.n	800255c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2280      	movs	r2, #128	@ 0x80
 800254e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e052      	b.n	8002602 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0216 	bic.w	r2, r2, #22
 800256a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800257a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	2b00      	cmp	r3, #0
 8002582:	d103      	bne.n	800258c <HAL_DMA_Abort+0x62>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0208 	bic.w	r2, r2, #8
 800259a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ac:	e013      	b.n	80025d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ae:	f7ff fe7b 	bl	80022a8 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d90c      	bls.n	80025d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2203      	movs	r2, #3
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e015      	b.n	8002602 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1e4      	bne.n	80025ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e8:	223f      	movs	r2, #63	@ 0x3f
 80025ea:	409a      	lsls	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d004      	beq.n	8002628 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2280      	movs	r2, #128	@ 0x80
 8002622:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e00c      	b.n	8002642 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2205      	movs	r2, #5
 800262c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	@ 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	e159      	b.n	8002920 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	429a      	cmp	r2, r3
 8002686:	f040 8148 	bne.w	800291a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b01      	cmp	r3, #1
 8002694:	d005      	beq.n	80026a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d130      	bne.n	8002704 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	2203      	movs	r2, #3
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026d8:	2201      	movs	r2, #1
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 0201 	and.w	r2, r3, #1
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	2b03      	cmp	r3, #3
 800270e:	d017      	beq.n	8002740 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	2203      	movs	r2, #3
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d123      	bne.n	8002794 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	08da      	lsrs	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3208      	adds	r2, #8
 8002754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	220f      	movs	r2, #15
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	08da      	lsrs	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3208      	adds	r2, #8
 800278e:	69b9      	ldr	r1, [r7, #24]
 8002790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	2203      	movs	r2, #3
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0203 	and.w	r2, r3, #3
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80a2 	beq.w	800291a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	4b57      	ldr	r3, [pc, #348]	@ (8002938 <HAL_GPIO_Init+0x2e8>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	4a56      	ldr	r2, [pc, #344]	@ (8002938 <HAL_GPIO_Init+0x2e8>)
 80027e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027e6:	4b54      	ldr	r3, [pc, #336]	@ (8002938 <HAL_GPIO_Init+0x2e8>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027f2:	4a52      	ldr	r2, [pc, #328]	@ (800293c <HAL_GPIO_Init+0x2ec>)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	3302      	adds	r3, #2
 80027fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	220f      	movs	r2, #15
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a49      	ldr	r2, [pc, #292]	@ (8002940 <HAL_GPIO_Init+0x2f0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d019      	beq.n	8002852 <HAL_GPIO_Init+0x202>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a48      	ldr	r2, [pc, #288]	@ (8002944 <HAL_GPIO_Init+0x2f4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_GPIO_Init+0x1fe>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a47      	ldr	r2, [pc, #284]	@ (8002948 <HAL_GPIO_Init+0x2f8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00d      	beq.n	800284a <HAL_GPIO_Init+0x1fa>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a46      	ldr	r2, [pc, #280]	@ (800294c <HAL_GPIO_Init+0x2fc>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d007      	beq.n	8002846 <HAL_GPIO_Init+0x1f6>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a45      	ldr	r2, [pc, #276]	@ (8002950 <HAL_GPIO_Init+0x300>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d101      	bne.n	8002842 <HAL_GPIO_Init+0x1f2>
 800283e:	2304      	movs	r3, #4
 8002840:	e008      	b.n	8002854 <HAL_GPIO_Init+0x204>
 8002842:	2307      	movs	r3, #7
 8002844:	e006      	b.n	8002854 <HAL_GPIO_Init+0x204>
 8002846:	2303      	movs	r3, #3
 8002848:	e004      	b.n	8002854 <HAL_GPIO_Init+0x204>
 800284a:	2302      	movs	r3, #2
 800284c:	e002      	b.n	8002854 <HAL_GPIO_Init+0x204>
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <HAL_GPIO_Init+0x204>
 8002852:	2300      	movs	r3, #0
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	f002 0203 	and.w	r2, r2, #3
 800285a:	0092      	lsls	r2, r2, #2
 800285c:	4093      	lsls	r3, r2
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002864:	4935      	ldr	r1, [pc, #212]	@ (800293c <HAL_GPIO_Init+0x2ec>)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	089b      	lsrs	r3, r3, #2
 800286a:	3302      	adds	r3, #2
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002872:	4b38      	ldr	r3, [pc, #224]	@ (8002954 <HAL_GPIO_Init+0x304>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002896:	4a2f      	ldr	r2, [pc, #188]	@ (8002954 <HAL_GPIO_Init+0x304>)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800289c:	4b2d      	ldr	r3, [pc, #180]	@ (8002954 <HAL_GPIO_Init+0x304>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028c0:	4a24      	ldr	r2, [pc, #144]	@ (8002954 <HAL_GPIO_Init+0x304>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028c6:	4b23      	ldr	r3, [pc, #140]	@ (8002954 <HAL_GPIO_Init+0x304>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002954 <HAL_GPIO_Init+0x304>)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028f0:	4b18      	ldr	r3, [pc, #96]	@ (8002954 <HAL_GPIO_Init+0x304>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002914:	4a0f      	ldr	r2, [pc, #60]	@ (8002954 <HAL_GPIO_Init+0x304>)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3301      	adds	r3, #1
 800291e:	61fb      	str	r3, [r7, #28]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	2b0f      	cmp	r3, #15
 8002924:	f67f aea2 	bls.w	800266c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	3724      	adds	r7, #36	@ 0x24
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800
 800293c:	40013800 	.word	0x40013800
 8002940:	40020000 	.word	0x40020000
 8002944:	40020400 	.word	0x40020400
 8002948:	40020800 	.word	0x40020800
 800294c:	40020c00 	.word	0x40020c00
 8002950:	40021000 	.word	0x40021000
 8002954:	40013c00 	.word	0x40013c00

08002958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
 8002964:	4613      	mov	r3, r2
 8002966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002968:	787b      	ldrb	r3, [r7, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002974:	e003      	b.n	800297e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002976:	887b      	ldrh	r3, [r7, #2]
 8002978:	041a      	lsls	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	619a      	str	r2, [r3, #24]
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e12b      	b.n	8002bf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff f890 	bl	8001ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2224      	movs	r2, #36	@ 0x24
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029f0:	f001 fc36 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 80029f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4a81      	ldr	r2, [pc, #516]	@ (8002c00 <HAL_I2C_Init+0x274>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d807      	bhi.n	8002a10 <HAL_I2C_Init+0x84>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a80      	ldr	r2, [pc, #512]	@ (8002c04 <HAL_I2C_Init+0x278>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	bf94      	ite	ls
 8002a08:	2301      	movls	r3, #1
 8002a0a:	2300      	movhi	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	e006      	b.n	8002a1e <HAL_I2C_Init+0x92>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a7d      	ldr	r2, [pc, #500]	@ (8002c08 <HAL_I2C_Init+0x27c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	bf94      	ite	ls
 8002a18:	2301      	movls	r3, #1
 8002a1a:	2300      	movhi	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e0e7      	b.n	8002bf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a78      	ldr	r2, [pc, #480]	@ (8002c0c <HAL_I2C_Init+0x280>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0c9b      	lsrs	r3, r3, #18
 8002a30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a6a      	ldr	r2, [pc, #424]	@ (8002c00 <HAL_I2C_Init+0x274>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d802      	bhi.n	8002a60 <HAL_I2C_Init+0xd4>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	e009      	b.n	8002a74 <HAL_I2C_Init+0xe8>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	4a69      	ldr	r2, [pc, #420]	@ (8002c10 <HAL_I2C_Init+0x284>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	099b      	lsrs	r3, r3, #6
 8002a72:	3301      	adds	r3, #1
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	495c      	ldr	r1, [pc, #368]	@ (8002c00 <HAL_I2C_Init+0x274>)
 8002a90:	428b      	cmp	r3, r1
 8002a92:	d819      	bhi.n	8002ac8 <HAL_I2C_Init+0x13c>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1e59      	subs	r1, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aa2:	1c59      	adds	r1, r3, #1
 8002aa4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002aa8:	400b      	ands	r3, r1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_I2C_Init+0x138>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1e59      	subs	r1, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac2:	e051      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	e04f      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d111      	bne.n	8002af4 <HAL_I2C_Init+0x168>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e58      	subs	r0, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	440b      	add	r3, r1
 8002ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e012      	b.n	8002b1a <HAL_I2C_Init+0x18e>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e58      	subs	r0, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	0099      	lsls	r1, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2C_Init+0x196>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e022      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10e      	bne.n	8002b48 <HAL_I2C_Init+0x1bc>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1e58      	subs	r0, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	440b      	add	r3, r1
 8002b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b46:	e00f      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e58      	subs	r0, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	0099      	lsls	r1, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	6809      	ldr	r1, [r1, #0]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69da      	ldr	r2, [r3, #28]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6911      	ldr	r1, [r2, #16]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68d2      	ldr	r2, [r2, #12]
 8002ba2:	4311      	orrs	r1, r2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	000186a0 	.word	0x000186a0
 8002c04:	001e847f 	.word	0x001e847f
 8002c08:	003d08ff 	.word	0x003d08ff
 8002c0c:	431bde83 	.word	0x431bde83
 8002c10:	10624dd3 	.word	0x10624dd3

08002c14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	607a      	str	r2, [r7, #4]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	460b      	mov	r3, r1
 8002c22:	817b      	strh	r3, [r7, #10]
 8002c24:	4613      	mov	r3, r2
 8002c26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c28:	f7ff fb3e 	bl	80022a8 <HAL_GetTick>
 8002c2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	f040 80e0 	bne.w	8002dfc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	2319      	movs	r3, #25
 8002c42:	2201      	movs	r2, #1
 8002c44:	4970      	ldr	r1, [pc, #448]	@ (8002e08 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fc64 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c52:	2302      	movs	r3, #2
 8002c54:	e0d3      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_I2C_Master_Transmit+0x50>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e0cc      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d007      	beq.n	8002c8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2221      	movs	r2, #33	@ 0x21
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2210      	movs	r2, #16
 8002ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	893a      	ldrh	r2, [r7, #8]
 8002cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4a50      	ldr	r2, [pc, #320]	@ (8002e0c <HAL_I2C_Master_Transmit+0x1f8>)
 8002cca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ccc:	8979      	ldrh	r1, [r7, #10]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	6a3a      	ldr	r2, [r7, #32]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 face 	bl	8003274 <I2C_MasterRequestWrite>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e08d      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cf8:	e066      	b.n	8002dc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	6a39      	ldr	r1, [r7, #32]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 fd22 	bl	8003748 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00d      	beq.n	8002d26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d107      	bne.n	8002d22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e06b      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2a:	781a      	ldrb	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d11b      	bne.n	8002d9c <HAL_I2C_Master_Transmit+0x188>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d017      	beq.n	8002d9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	6a39      	ldr	r1, [r7, #32]
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 fd19 	bl	80037d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00d      	beq.n	8002dc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d107      	bne.n	8002dc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e01a      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d194      	bne.n	8002cfa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e000      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dfc:	2302      	movs	r3, #2
  }
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	00100002 	.word	0x00100002
 8002e0c:	ffff0000 	.word	0xffff0000

08002e10 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08c      	sub	sp, #48	@ 0x30
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	817b      	strh	r3, [r7, #10]
 8002e20:	4613      	mov	r3, r2
 8002e22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7ff fa40 	bl	80022a8 <HAL_GetTick>
 8002e28:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	f040 8217 	bne.w	8003266 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	2319      	movs	r3, #25
 8002e3e:	2201      	movs	r2, #1
 8002e40:	497c      	ldr	r1, [pc, #496]	@ (8003034 <HAL_I2C_Master_Receive+0x224>)
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fb66 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e20a      	b.n	8003268 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_I2C_Master_Receive+0x50>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e203      	b.n	8003268 <HAL_I2C_Master_Receive+0x458>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d007      	beq.n	8002e86 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0201 	orr.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2222      	movs	r2, #34	@ 0x22
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2210      	movs	r2, #16
 8002ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	893a      	ldrh	r2, [r7, #8]
 8002eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4a5c      	ldr	r2, [pc, #368]	@ (8003038 <HAL_I2C_Master_Receive+0x228>)
 8002ec6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ec8:	8979      	ldrh	r1, [r7, #10]
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 fa52 	bl	8003378 <I2C_MasterRequestRead>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e1c4      	b.n	8003268 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d113      	bne.n	8002f0e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	623b      	str	r3, [r7, #32]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	623b      	str	r3, [r7, #32]
 8002efa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	e198      	b.n	8003240 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d11b      	bne.n	8002f4e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e178      	b.n	8003240 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d11b      	bne.n	8002f8e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f76:	2300      	movs	r3, #0
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	e158      	b.n	8003240 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fb4:	e144      	b.n	8003240 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	f200 80f1 	bhi.w	80031a2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d123      	bne.n	8003010 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 fc4b 	bl	8003868 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e145      	b.n	8003268 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800300e:	e117      	b.n	8003240 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003014:	2b02      	cmp	r3, #2
 8003016:	d14e      	bne.n	80030b6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301e:	2200      	movs	r2, #0
 8003020:	4906      	ldr	r1, [pc, #24]	@ (800303c <HAL_I2C_Master_Receive+0x22c>)
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fa76 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e11a      	b.n	8003268 <HAL_I2C_Master_Receive+0x458>
 8003032:	bf00      	nop
 8003034:	00100002 	.word	0x00100002
 8003038:	ffff0000 	.word	0xffff0000
 800303c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800304e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030b4:	e0c4      	b.n	8003240 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030bc:	2200      	movs	r2, #0
 80030be:	496c      	ldr	r1, [pc, #432]	@ (8003270 <HAL_I2C_Master_Receive+0x460>)
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fa27 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0cb      	b.n	8003268 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003118:	2200      	movs	r2, #0
 800311a:	4955      	ldr	r1, [pc, #340]	@ (8003270 <HAL_I2C_Master_Receive+0x460>)
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f9f9 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e09d      	b.n	8003268 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800313a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031a0:	e04e      	b.n	8003240 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 fb5e 	bl	8003868 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e058      	b.n	8003268 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d124      	bne.n	8003240 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d107      	bne.n	800320e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800320c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003244:	2b00      	cmp	r3, #0
 8003246:	f47f aeb6 	bne.w	8002fb6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e000      	b.n	8003268 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003266:	2302      	movs	r3, #2
  }
}
 8003268:	4618      	mov	r0, r3
 800326a:	3728      	adds	r7, #40	@ 0x28
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	00010004 	.word	0x00010004

08003274 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	460b      	mov	r3, r1
 8003282:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b08      	cmp	r3, #8
 800328e:	d006      	beq.n	800329e <I2C_MasterRequestWrite+0x2a>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d003      	beq.n	800329e <I2C_MasterRequestWrite+0x2a>
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800329c:	d108      	bne.n	80032b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e00b      	b.n	80032c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b4:	2b12      	cmp	r3, #18
 80032b6:	d107      	bne.n	80032c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f91d 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00d      	beq.n	80032fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ee:	d103      	bne.n	80032f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e035      	b.n	8003368 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003304:	d108      	bne.n	8003318 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003306:	897b      	ldrh	r3, [r7, #10]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003314:	611a      	str	r2, [r3, #16]
 8003316:	e01b      	b.n	8003350 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003318:	897b      	ldrh	r3, [r7, #10]
 800331a:	11db      	asrs	r3, r3, #7
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f003 0306 	and.w	r3, r3, #6
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f063 030f 	orn	r3, r3, #15
 8003328:	b2da      	uxtb	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	490e      	ldr	r1, [pc, #56]	@ (8003370 <I2C_MasterRequestWrite+0xfc>)
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f966 	bl	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e010      	b.n	8003368 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	b2da      	uxtb	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	4907      	ldr	r1, [pc, #28]	@ (8003374 <I2C_MasterRequestWrite+0x100>)
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f956 	bl	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	00010008 	.word	0x00010008
 8003374:	00010002 	.word	0x00010002

08003378 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af02      	add	r7, sp, #8
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	460b      	mov	r3, r1
 8003386:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800339c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d006      	beq.n	80033b2 <I2C_MasterRequestRead+0x3a>
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d003      	beq.n	80033b2 <I2C_MasterRequestRead+0x3a>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033b0:	d108      	bne.n	80033c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	e00b      	b.n	80033dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c8:	2b11      	cmp	r3, #17
 80033ca:	d107      	bne.n	80033dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f893 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00d      	beq.n	8003410 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003402:	d103      	bne.n	800340c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800340a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e079      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003418:	d108      	bne.n	800342c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800341a:	897b      	ldrh	r3, [r7, #10]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	b2da      	uxtb	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	611a      	str	r2, [r3, #16]
 800342a:	e05f      	b.n	80034ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800342c:	897b      	ldrh	r3, [r7, #10]
 800342e:	11db      	asrs	r3, r3, #7
 8003430:	b2db      	uxtb	r3, r3
 8003432:	f003 0306 	and.w	r3, r3, #6
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f063 030f 	orn	r3, r3, #15
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4930      	ldr	r1, [pc, #192]	@ (800350c <I2C_MasterRequestRead+0x194>)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f8dc 	bl	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e054      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800345a:	897b      	ldrh	r3, [r7, #10]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4929      	ldr	r1, [pc, #164]	@ (8003510 <I2C_MasterRequestRead+0x198>)
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f8cc 	bl	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e044      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800349e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f831 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00d      	beq.n	80034d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034c6:	d103      	bne.n	80034d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034ce:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e017      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80034d4:	897b      	ldrh	r3, [r7, #10]
 80034d6:	11db      	asrs	r3, r3, #7
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	f003 0306 	and.w	r3, r3, #6
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f063 030e 	orn	r3, r3, #14
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4907      	ldr	r1, [pc, #28]	@ (8003510 <I2C_MasterRequestRead+0x198>)
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f888 	bl	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	00010008 	.word	0x00010008
 8003510:	00010002 	.word	0x00010002

08003514 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003524:	e048      	b.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352c:	d044      	beq.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352e:	f7fe febb 	bl	80022a8 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <I2C_WaitOnFlagUntilTimeout+0x30>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d139      	bne.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	0c1b      	lsrs	r3, r3, #16
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d10d      	bne.n	800356a <I2C_WaitOnFlagUntilTimeout+0x56>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	43da      	mvns	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	4013      	ands	r3, r2
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf0c      	ite	eq
 8003560:	2301      	moveq	r3, #1
 8003562:	2300      	movne	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	e00c      	b.n	8003584 <I2C_WaitOnFlagUntilTimeout+0x70>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	43da      	mvns	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4013      	ands	r3, r2
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	429a      	cmp	r2, r3
 8003588:	d116      	bne.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e023      	b.n	8003600 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	0c1b      	lsrs	r3, r3, #16
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d10d      	bne.n	80035de <I2C_WaitOnFlagUntilTimeout+0xca>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	43da      	mvns	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4013      	ands	r3, r2
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	e00c      	b.n	80035f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	43da      	mvns	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d093      	beq.n	8003526 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003616:	e071      	b.n	80036fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003626:	d123      	bne.n	8003670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003636:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003640:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365c:	f043 0204 	orr.w	r2, r3, #4
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e067      	b.n	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d041      	beq.n	80036fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003678:	f7fe fe16 	bl	80022a8 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	429a      	cmp	r2, r3
 8003686:	d302      	bcc.n	800368e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d136      	bne.n	80036fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	0c1b      	lsrs	r3, r3, #16
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	d10c      	bne.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	43da      	mvns	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4013      	ands	r3, r2
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	e00b      	b.n	80036ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	43da      	mvns	r2, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	4013      	ands	r3, r2
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf14      	ite	ne
 80036c4:	2301      	movne	r3, #1
 80036c6:	2300      	moveq	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d016      	beq.n	80036fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e8:	f043 0220 	orr.w	r2, r3, #32
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e021      	b.n	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	0c1b      	lsrs	r3, r3, #16
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d10c      	bne.n	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	43da      	mvns	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4013      	ands	r3, r2
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	e00b      	b.n	8003738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	43da      	mvns	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4013      	ands	r3, r2
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	bf14      	ite	ne
 8003732:	2301      	movne	r3, #1
 8003734:	2300      	moveq	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	f47f af6d 	bne.w	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003754:	e034      	b.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f8e3 	bl	8003922 <I2C_IsAcknowledgeFailed>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e034      	b.n	80037d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d028      	beq.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376e:	f7fe fd9b 	bl	80022a8 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	429a      	cmp	r2, r3
 800377c:	d302      	bcc.n	8003784 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d11d      	bne.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800378e:	2b80      	cmp	r3, #128	@ 0x80
 8003790:	d016      	beq.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e007      	b.n	80037d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ca:	2b80      	cmp	r3, #128	@ 0x80
 80037cc:	d1c3      	bne.n	8003756 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037e4:	e034      	b.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f89b 	bl	8003922 <I2C_IsAcknowledgeFailed>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e034      	b.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fc:	d028      	beq.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fe:	f7fe fd53 	bl	80022a8 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	d302      	bcc.n	8003814 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d11d      	bne.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b04      	cmp	r3, #4
 8003820:	d016      	beq.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	f043 0220 	orr.w	r2, r3, #32
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e007      	b.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b04      	cmp	r3, #4
 800385c:	d1c3      	bne.n	80037e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003874:	e049      	b.n	800390a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b10      	cmp	r3, #16
 8003882:	d119      	bne.n	80038b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0210 	mvn.w	r2, #16
 800388c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e030      	b.n	800391a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b8:	f7fe fcf6 	bl	80022a8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d302      	bcc.n	80038ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d11d      	bne.n	800390a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d8:	2b40      	cmp	r3, #64	@ 0x40
 80038da:	d016      	beq.n	800390a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	f043 0220 	orr.w	r2, r3, #32
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e007      	b.n	800391a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003914:	2b40      	cmp	r3, #64	@ 0x40
 8003916:	d1ae      	bne.n	8003876 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003938:	d11b      	bne.n	8003972 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003942:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	f043 0204 	orr.w	r2, r3, #4
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e267      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d075      	beq.n	8003a8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800399e:	4b88      	ldr	r3, [pc, #544]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d00c      	beq.n	80039c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039aa:	4b85      	ldr	r3, [pc, #532]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d112      	bne.n	80039dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039b6:	4b82      	ldr	r3, [pc, #520]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039c2:	d10b      	bne.n	80039dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c4:	4b7e      	ldr	r3, [pc, #504]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d05b      	beq.n	8003a88 <HAL_RCC_OscConfig+0x108>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d157      	bne.n	8003a88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e242      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e4:	d106      	bne.n	80039f4 <HAL_RCC_OscConfig+0x74>
 80039e6:	4b76      	ldr	r3, [pc, #472]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a75      	ldr	r2, [pc, #468]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e01d      	b.n	8003a30 <HAL_RCC_OscConfig+0xb0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x98>
 80039fe:	4b70      	ldr	r3, [pc, #448]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a6f      	ldr	r2, [pc, #444]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b6d      	ldr	r3, [pc, #436]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a6c      	ldr	r2, [pc, #432]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e00b      	b.n	8003a30 <HAL_RCC_OscConfig+0xb0>
 8003a18:	4b69      	ldr	r3, [pc, #420]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a68      	ldr	r2, [pc, #416]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	4b66      	ldr	r3, [pc, #408]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a65      	ldr	r2, [pc, #404]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d013      	beq.n	8003a60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fe fc36 	bl	80022a8 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a40:	f7fe fc32 	bl	80022a8 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	@ 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e207      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a52:	4b5b      	ldr	r3, [pc, #364]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0xc0>
 8003a5e:	e014      	b.n	8003a8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7fe fc22 	bl	80022a8 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a68:	f7fe fc1e 	bl	80022a8 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	@ 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e1f3      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7a:	4b51      	ldr	r3, [pc, #324]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0xe8>
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d063      	beq.n	8003b5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a96:	4b4a      	ldr	r3, [pc, #296]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aa2:	4b47      	ldr	r3, [pc, #284]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d11c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aae:	4b44      	ldr	r3, [pc, #272]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d116      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aba:	4b41      	ldr	r3, [pc, #260]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x152>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d001      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e1c7      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4937      	ldr	r1, [pc, #220]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae6:	e03a      	b.n	8003b5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d020      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af0:	4b34      	ldr	r3, [pc, #208]	@ (8003bc4 <HAL_RCC_OscConfig+0x244>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7fe fbd7 	bl	80022a8 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003afe:	f7fe fbd3 	bl	80022a8 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e1a8      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b10:	4b2b      	ldr	r3, [pc, #172]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1c:	4b28      	ldr	r3, [pc, #160]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4925      	ldr	r1, [pc, #148]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	600b      	str	r3, [r1, #0]
 8003b30:	e015      	b.n	8003b5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b32:	4b24      	ldr	r3, [pc, #144]	@ (8003bc4 <HAL_RCC_OscConfig+0x244>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fe fbb6 	bl	80022a8 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b40:	f7fe fbb2 	bl	80022a8 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e187      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b52:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d036      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d016      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b72:	4b15      	ldr	r3, [pc, #84]	@ (8003bc8 <HAL_RCC_OscConfig+0x248>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b78:	f7fe fb96 	bl	80022a8 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b80:	f7fe fb92 	bl	80022a8 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e167      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b92:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x200>
 8003b9e:	e01b      	b.n	8003bd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba0:	4b09      	ldr	r3, [pc, #36]	@ (8003bc8 <HAL_RCC_OscConfig+0x248>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba6:	f7fe fb7f 	bl	80022a8 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bac:	e00e      	b.n	8003bcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bae:	f7fe fb7b 	bl	80022a8 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d907      	bls.n	8003bcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e150      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	42470000 	.word	0x42470000
 8003bc8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bcc:	4b88      	ldr	r3, [pc, #544]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003bce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1ea      	bne.n	8003bae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8097 	beq.w	8003d14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be6:	2300      	movs	r3, #0
 8003be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bea:	4b81      	ldr	r3, [pc, #516]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10f      	bne.n	8003c16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	4b7d      	ldr	r3, [pc, #500]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	4a7c      	ldr	r2, [pc, #496]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c06:	4b7a      	ldr	r3, [pc, #488]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c12:	2301      	movs	r3, #1
 8003c14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c16:	4b77      	ldr	r3, [pc, #476]	@ (8003df4 <HAL_RCC_OscConfig+0x474>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d118      	bne.n	8003c54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c22:	4b74      	ldr	r3, [pc, #464]	@ (8003df4 <HAL_RCC_OscConfig+0x474>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a73      	ldr	r2, [pc, #460]	@ (8003df4 <HAL_RCC_OscConfig+0x474>)
 8003c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2e:	f7fe fb3b 	bl	80022a8 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c36:	f7fe fb37 	bl	80022a8 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e10c      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c48:	4b6a      	ldr	r3, [pc, #424]	@ (8003df4 <HAL_RCC_OscConfig+0x474>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d106      	bne.n	8003c6a <HAL_RCC_OscConfig+0x2ea>
 8003c5c:	4b64      	ldr	r3, [pc, #400]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c60:	4a63      	ldr	r2, [pc, #396]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c68:	e01c      	b.n	8003ca4 <HAL_RCC_OscConfig+0x324>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b05      	cmp	r3, #5
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x30c>
 8003c72:	4b5f      	ldr	r3, [pc, #380]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c76:	4a5e      	ldr	r2, [pc, #376]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c78:	f043 0304 	orr.w	r3, r3, #4
 8003c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c7e:	4b5c      	ldr	r3, [pc, #368]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c82:	4a5b      	ldr	r2, [pc, #364]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0x324>
 8003c8c:	4b58      	ldr	r3, [pc, #352]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c90:	4a57      	ldr	r2, [pc, #348]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c98:	4b55      	ldr	r3, [pc, #340]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9c:	4a54      	ldr	r2, [pc, #336]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	f023 0304 	bic.w	r3, r3, #4
 8003ca2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d015      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fe fafc 	bl	80022a8 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb4:	f7fe faf8 	bl	80022a8 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e0cb      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cca:	4b49      	ldr	r3, [pc, #292]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0ee      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x334>
 8003cd6:	e014      	b.n	8003d02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd8:	f7fe fae6 	bl	80022a8 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cde:	e00a      	b.n	8003cf6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce0:	f7fe fae2 	bl	80022a8 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e0b5      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1ee      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d105      	bne.n	8003d14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d08:	4b39      	ldr	r3, [pc, #228]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	4a38      	ldr	r2, [pc, #224]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80a1 	beq.w	8003e60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d1e:	4b34      	ldr	r3, [pc, #208]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d05c      	beq.n	8003de4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d141      	bne.n	8003db6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d32:	4b31      	ldr	r3, [pc, #196]	@ (8003df8 <HAL_RCC_OscConfig+0x478>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7fe fab6 	bl	80022a8 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d40:	f7fe fab2 	bl	80022a8 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e087      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	4b27      	ldr	r3, [pc, #156]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69da      	ldr	r2, [r3, #28]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	019b      	lsls	r3, r3, #6
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d74:	085b      	lsrs	r3, r3, #1
 8003d76:	3b01      	subs	r3, #1
 8003d78:	041b      	lsls	r3, r3, #16
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d80:	061b      	lsls	r3, r3, #24
 8003d82:	491b      	ldr	r1, [pc, #108]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d88:	4b1b      	ldr	r3, [pc, #108]	@ (8003df8 <HAL_RCC_OscConfig+0x478>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8e:	f7fe fa8b 	bl	80022a8 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d96:	f7fe fa87 	bl	80022a8 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e05c      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da8:	4b11      	ldr	r3, [pc, #68]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x416>
 8003db4:	e054      	b.n	8003e60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db6:	4b10      	ldr	r3, [pc, #64]	@ (8003df8 <HAL_RCC_OscConfig+0x478>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fe fa74 	bl	80022a8 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fe fa70 	bl	80022a8 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e045      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd6:	4b06      	ldr	r3, [pc, #24]	@ (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x444>
 8003de2:	e03d      	b.n	8003e60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d107      	bne.n	8003dfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e038      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
 8003df0:	40023800 	.word	0x40023800
 8003df4:	40007000 	.word	0x40007000
 8003df8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e6c <HAL_RCC_OscConfig+0x4ec>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d028      	beq.n	8003e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d121      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d11a      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d111      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	3b01      	subs	r3, #1
 8003e46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d107      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023800 	.word	0x40023800

08003e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0cc      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e84:	4b68      	ldr	r3, [pc, #416]	@ (8004028 <HAL_RCC_ClockConfig+0x1b8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d90c      	bls.n	8003eac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e92:	4b65      	ldr	r3, [pc, #404]	@ (8004028 <HAL_RCC_ClockConfig+0x1b8>)
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	4b63      	ldr	r3, [pc, #396]	@ (8004028 <HAL_RCC_ClockConfig+0x1b8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0b8      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d020      	beq.n	8003efa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ec4:	4b59      	ldr	r3, [pc, #356]	@ (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	4a58      	ldr	r2, [pc, #352]	@ (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ece:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003edc:	4b53      	ldr	r3, [pc, #332]	@ (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	4a52      	ldr	r2, [pc, #328]	@ (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ee6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee8:	4b50      	ldr	r3, [pc, #320]	@ (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	494d      	ldr	r1, [pc, #308]	@ (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d044      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	4b47      	ldr	r3, [pc, #284]	@ (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d119      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e07f      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d003      	beq.n	8003f2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d107      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d109      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e06f      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e067      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f4e:	4b37      	ldr	r3, [pc, #220]	@ (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f023 0203 	bic.w	r2, r3, #3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4934      	ldr	r1, [pc, #208]	@ (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f60:	f7fe f9a2 	bl	80022a8 <HAL_GetTick>
 8003f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f66:	e00a      	b.n	8003f7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f68:	f7fe f99e 	bl	80022a8 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e04f      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 020c 	and.w	r2, r3, #12
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d1eb      	bne.n	8003f68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f90:	4b25      	ldr	r3, [pc, #148]	@ (8004028 <HAL_RCC_ClockConfig+0x1b8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d20c      	bcs.n	8003fb8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9e:	4b22      	ldr	r3, [pc, #136]	@ (8004028 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b20      	ldr	r3, [pc, #128]	@ (8004028 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e032      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc4:	4b19      	ldr	r3, [pc, #100]	@ (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4916      	ldr	r1, [pc, #88]	@ (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fe2:	4b12      	ldr	r3, [pc, #72]	@ (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	490e      	ldr	r1, [pc, #56]	@ (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ff6:	f000 f821 	bl	800403c <HAL_RCC_GetSysClockFreq>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	490a      	ldr	r1, [pc, #40]	@ (8004030 <HAL_RCC_ClockConfig+0x1c0>)
 8004008:	5ccb      	ldrb	r3, [r1, r3]
 800400a:	fa22 f303 	lsr.w	r3, r2, r3
 800400e:	4a09      	ldr	r2, [pc, #36]	@ (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8004010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004012:	4b09      	ldr	r3, [pc, #36]	@ (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe f902 	bl	8002220 <HAL_InitTick>

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40023c00 	.word	0x40023c00
 800402c:	40023800 	.word	0x40023800
 8004030:	08009ccc 	.word	0x08009ccc
 8004034:	20000018 	.word	0x20000018
 8004038:	2000001c 	.word	0x2000001c

0800403c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800403c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004040:	b094      	sub	sp, #80	@ 0x50
 8004042:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004054:	4b79      	ldr	r3, [pc, #484]	@ (800423c <HAL_RCC_GetSysClockFreq+0x200>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 030c 	and.w	r3, r3, #12
 800405c:	2b08      	cmp	r3, #8
 800405e:	d00d      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0x40>
 8004060:	2b08      	cmp	r3, #8
 8004062:	f200 80e1 	bhi.w	8004228 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0x34>
 800406a:	2b04      	cmp	r3, #4
 800406c:	d003      	beq.n	8004076 <HAL_RCC_GetSysClockFreq+0x3a>
 800406e:	e0db      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004070:	4b73      	ldr	r3, [pc, #460]	@ (8004240 <HAL_RCC_GetSysClockFreq+0x204>)
 8004072:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004074:	e0db      	b.n	800422e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004076:	4b73      	ldr	r3, [pc, #460]	@ (8004244 <HAL_RCC_GetSysClockFreq+0x208>)
 8004078:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800407a:	e0d8      	b.n	800422e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800407c:	4b6f      	ldr	r3, [pc, #444]	@ (800423c <HAL_RCC_GetSysClockFreq+0x200>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004084:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004086:	4b6d      	ldr	r3, [pc, #436]	@ (800423c <HAL_RCC_GetSysClockFreq+0x200>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d063      	beq.n	800415a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004092:	4b6a      	ldr	r3, [pc, #424]	@ (800423c <HAL_RCC_GetSysClockFreq+0x200>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	099b      	lsrs	r3, r3, #6
 8004098:	2200      	movs	r2, #0
 800409a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800409c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800409e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80040a6:	2300      	movs	r3, #0
 80040a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040ae:	4622      	mov	r2, r4
 80040b0:	462b      	mov	r3, r5
 80040b2:	f04f 0000 	mov.w	r0, #0
 80040b6:	f04f 0100 	mov.w	r1, #0
 80040ba:	0159      	lsls	r1, r3, #5
 80040bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040c0:	0150      	lsls	r0, r2, #5
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4621      	mov	r1, r4
 80040c8:	1a51      	subs	r1, r2, r1
 80040ca:	6139      	str	r1, [r7, #16]
 80040cc:	4629      	mov	r1, r5
 80040ce:	eb63 0301 	sbc.w	r3, r3, r1
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040e0:	4659      	mov	r1, fp
 80040e2:	018b      	lsls	r3, r1, #6
 80040e4:	4651      	mov	r1, sl
 80040e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ea:	4651      	mov	r1, sl
 80040ec:	018a      	lsls	r2, r1, #6
 80040ee:	4651      	mov	r1, sl
 80040f0:	ebb2 0801 	subs.w	r8, r2, r1
 80040f4:	4659      	mov	r1, fp
 80040f6:	eb63 0901 	sbc.w	r9, r3, r1
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800410a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800410e:	4690      	mov	r8, r2
 8004110:	4699      	mov	r9, r3
 8004112:	4623      	mov	r3, r4
 8004114:	eb18 0303 	adds.w	r3, r8, r3
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	462b      	mov	r3, r5
 800411c:	eb49 0303 	adc.w	r3, r9, r3
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800412e:	4629      	mov	r1, r5
 8004130:	024b      	lsls	r3, r1, #9
 8004132:	4621      	mov	r1, r4
 8004134:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004138:	4621      	mov	r1, r4
 800413a:	024a      	lsls	r2, r1, #9
 800413c:	4610      	mov	r0, r2
 800413e:	4619      	mov	r1, r3
 8004140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004142:	2200      	movs	r2, #0
 8004144:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004146:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004148:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800414c:	f7fc fd94 	bl	8000c78 <__aeabi_uldivmod>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4613      	mov	r3, r2
 8004156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004158:	e058      	b.n	800420c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800415a:	4b38      	ldr	r3, [pc, #224]	@ (800423c <HAL_RCC_GetSysClockFreq+0x200>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	099b      	lsrs	r3, r3, #6
 8004160:	2200      	movs	r2, #0
 8004162:	4618      	mov	r0, r3
 8004164:	4611      	mov	r1, r2
 8004166:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800416a:	623b      	str	r3, [r7, #32]
 800416c:	2300      	movs	r3, #0
 800416e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004170:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004174:	4642      	mov	r2, r8
 8004176:	464b      	mov	r3, r9
 8004178:	f04f 0000 	mov.w	r0, #0
 800417c:	f04f 0100 	mov.w	r1, #0
 8004180:	0159      	lsls	r1, r3, #5
 8004182:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004186:	0150      	lsls	r0, r2, #5
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4641      	mov	r1, r8
 800418e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004192:	4649      	mov	r1, r9
 8004194:	eb63 0b01 	sbc.w	fp, r3, r1
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041ac:	ebb2 040a 	subs.w	r4, r2, sl
 80041b0:	eb63 050b 	sbc.w	r5, r3, fp
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	00eb      	lsls	r3, r5, #3
 80041be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041c2:	00e2      	lsls	r2, r4, #3
 80041c4:	4614      	mov	r4, r2
 80041c6:	461d      	mov	r5, r3
 80041c8:	4643      	mov	r3, r8
 80041ca:	18e3      	adds	r3, r4, r3
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	464b      	mov	r3, r9
 80041d0:	eb45 0303 	adc.w	r3, r5, r3
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041e2:	4629      	mov	r1, r5
 80041e4:	028b      	lsls	r3, r1, #10
 80041e6:	4621      	mov	r1, r4
 80041e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041ec:	4621      	mov	r1, r4
 80041ee:	028a      	lsls	r2, r1, #10
 80041f0:	4610      	mov	r0, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041f6:	2200      	movs	r2, #0
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	61fa      	str	r2, [r7, #28]
 80041fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004200:	f7fc fd3a 	bl	8000c78 <__aeabi_uldivmod>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4613      	mov	r3, r2
 800420a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800420c:	4b0b      	ldr	r3, [pc, #44]	@ (800423c <HAL_RCC_GetSysClockFreq+0x200>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	0c1b      	lsrs	r3, r3, #16
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	3301      	adds	r3, #1
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800421c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800421e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004220:	fbb2 f3f3 	udiv	r3, r2, r3
 8004224:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004226:	e002      	b.n	800422e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004228:	4b05      	ldr	r3, [pc, #20]	@ (8004240 <HAL_RCC_GetSysClockFreq+0x204>)
 800422a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800422c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800422e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004230:	4618      	mov	r0, r3
 8004232:	3750      	adds	r7, #80	@ 0x50
 8004234:	46bd      	mov	sp, r7
 8004236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800423a:	bf00      	nop
 800423c:	40023800 	.word	0x40023800
 8004240:	00f42400 	.word	0x00f42400
 8004244:	007a1200 	.word	0x007a1200

08004248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800424c:	4b03      	ldr	r3, [pc, #12]	@ (800425c <HAL_RCC_GetHCLKFreq+0x14>)
 800424e:	681b      	ldr	r3, [r3, #0]
}
 8004250:	4618      	mov	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20000018 	.word	0x20000018

08004260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004264:	f7ff fff0 	bl	8004248 <HAL_RCC_GetHCLKFreq>
 8004268:	4602      	mov	r2, r0
 800426a:	4b05      	ldr	r3, [pc, #20]	@ (8004280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	0a9b      	lsrs	r3, r3, #10
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	4903      	ldr	r1, [pc, #12]	@ (8004284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004276:	5ccb      	ldrb	r3, [r1, r3]
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800427c:	4618      	mov	r0, r3
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40023800 	.word	0x40023800
 8004284:	08009cdc 	.word	0x08009cdc

08004288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800428c:	f7ff ffdc 	bl	8004248 <HAL_RCC_GetHCLKFreq>
 8004290:	4602      	mov	r2, r0
 8004292:	4b05      	ldr	r3, [pc, #20]	@ (80042a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	0b5b      	lsrs	r3, r3, #13
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	4903      	ldr	r1, [pc, #12]	@ (80042ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800429e:	5ccb      	ldrb	r3, [r1, r3]
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40023800 	.word	0x40023800
 80042ac:	08009cdc 	.word	0x08009cdc

080042b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e041      	b.n	8004346 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fd fce2 	bl	8001ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	4619      	mov	r1, r3
 80042ee:	4610      	mov	r0, r2
 80042f0:	f000 fa9e 	bl	8004830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	d001      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e044      	b.n	80043f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1e      	ldr	r2, [pc, #120]	@ (8004400 <HAL_TIM_Base_Start_IT+0xb0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d018      	beq.n	80043bc <HAL_TIM_Base_Start_IT+0x6c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004392:	d013      	beq.n	80043bc <HAL_TIM_Base_Start_IT+0x6c>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1a      	ldr	r2, [pc, #104]	@ (8004404 <HAL_TIM_Base_Start_IT+0xb4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00e      	beq.n	80043bc <HAL_TIM_Base_Start_IT+0x6c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a19      	ldr	r2, [pc, #100]	@ (8004408 <HAL_TIM_Base_Start_IT+0xb8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d009      	beq.n	80043bc <HAL_TIM_Base_Start_IT+0x6c>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a17      	ldr	r2, [pc, #92]	@ (800440c <HAL_TIM_Base_Start_IT+0xbc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d004      	beq.n	80043bc <HAL_TIM_Base_Start_IT+0x6c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a16      	ldr	r2, [pc, #88]	@ (8004410 <HAL_TIM_Base_Start_IT+0xc0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d111      	bne.n	80043e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b06      	cmp	r3, #6
 80043cc:	d010      	beq.n	80043f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0201 	orr.w	r2, r2, #1
 80043dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043de:	e007      	b.n	80043f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40010000 	.word	0x40010000
 8004404:	40000400 	.word	0x40000400
 8004408:	40000800 	.word	0x40000800
 800440c:	40000c00 	.word	0x40000c00
 8004410:	40014000 	.word	0x40014000

08004414 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0201 	bic.w	r2, r2, #1
 800442a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6a1a      	ldr	r2, [r3, #32]
 8004432:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10f      	bne.n	800445c <HAL_TIM_Base_Stop_IT+0x48>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6a1a      	ldr	r2, [r3, #32]
 8004442:	f240 4344 	movw	r3, #1092	@ 0x444
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d107      	bne.n	800445c <HAL_TIM_Base_Stop_IT+0x48>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0201 	bic.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d020      	beq.n	80044d6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d01b      	beq.n	80044d6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f06f 0202 	mvn.w	r2, #2
 80044a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f999 	bl	80047f4 <HAL_TIM_IC_CaptureCallback>
 80044c2:	e005      	b.n	80044d0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f98b 	bl	80047e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f99c 	bl	8004808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d020      	beq.n	8004522 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d01b      	beq.n	8004522 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f06f 0204 	mvn.w	r2, #4
 80044f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f973 	bl	80047f4 <HAL_TIM_IC_CaptureCallback>
 800450e:	e005      	b.n	800451c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f965 	bl	80047e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f976 	bl	8004808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b00      	cmp	r3, #0
 800452a:	d020      	beq.n	800456e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d01b      	beq.n	800456e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f06f 0208 	mvn.w	r2, #8
 800453e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2204      	movs	r2, #4
 8004544:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f94d 	bl	80047f4 <HAL_TIM_IC_CaptureCallback>
 800455a:	e005      	b.n	8004568 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f93f 	bl	80047e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f950 	bl	8004808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	2b00      	cmp	r3, #0
 8004576:	d020      	beq.n	80045ba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	d01b      	beq.n	80045ba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f06f 0210 	mvn.w	r2, #16
 800458a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2208      	movs	r2, #8
 8004590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f927 	bl	80047f4 <HAL_TIM_IC_CaptureCallback>
 80045a6:	e005      	b.n	80045b4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f919 	bl	80047e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f92a 	bl	8004808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00c      	beq.n	80045de <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f06f 0201 	mvn.w	r2, #1
 80045d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7fc fd45 	bl	8001068 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00c      	beq.n	8004602 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d007      	beq.n	8004602 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fab5 	bl	8004b6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00c      	beq.n	8004626 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800461e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f8fb 	bl	800481c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00c      	beq.n	800464a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f06f 0220 	mvn.w	r2, #32
 8004642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 fa87 	bl	8004b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800464a:	bf00      	nop
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b084      	sub	sp, #16
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_TIM_ConfigClockSource+0x1c>
 800466a:	2302      	movs	r3, #2
 800466c:	e0b4      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x186>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2202      	movs	r2, #2
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800468c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004694:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046a6:	d03e      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0xd4>
 80046a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046ac:	f200 8087 	bhi.w	80047be <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046b4:	f000 8086 	beq.w	80047c4 <HAL_TIM_ConfigClockSource+0x172>
 80046b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046bc:	d87f      	bhi.n	80047be <HAL_TIM_ConfigClockSource+0x16c>
 80046be:	2b70      	cmp	r3, #112	@ 0x70
 80046c0:	d01a      	beq.n	80046f8 <HAL_TIM_ConfigClockSource+0xa6>
 80046c2:	2b70      	cmp	r3, #112	@ 0x70
 80046c4:	d87b      	bhi.n	80047be <HAL_TIM_ConfigClockSource+0x16c>
 80046c6:	2b60      	cmp	r3, #96	@ 0x60
 80046c8:	d050      	beq.n	800476c <HAL_TIM_ConfigClockSource+0x11a>
 80046ca:	2b60      	cmp	r3, #96	@ 0x60
 80046cc:	d877      	bhi.n	80047be <HAL_TIM_ConfigClockSource+0x16c>
 80046ce:	2b50      	cmp	r3, #80	@ 0x50
 80046d0:	d03c      	beq.n	800474c <HAL_TIM_ConfigClockSource+0xfa>
 80046d2:	2b50      	cmp	r3, #80	@ 0x50
 80046d4:	d873      	bhi.n	80047be <HAL_TIM_ConfigClockSource+0x16c>
 80046d6:	2b40      	cmp	r3, #64	@ 0x40
 80046d8:	d058      	beq.n	800478c <HAL_TIM_ConfigClockSource+0x13a>
 80046da:	2b40      	cmp	r3, #64	@ 0x40
 80046dc:	d86f      	bhi.n	80047be <HAL_TIM_ConfigClockSource+0x16c>
 80046de:	2b30      	cmp	r3, #48	@ 0x30
 80046e0:	d064      	beq.n	80047ac <HAL_TIM_ConfigClockSource+0x15a>
 80046e2:	2b30      	cmp	r3, #48	@ 0x30
 80046e4:	d86b      	bhi.n	80047be <HAL_TIM_ConfigClockSource+0x16c>
 80046e6:	2b20      	cmp	r3, #32
 80046e8:	d060      	beq.n	80047ac <HAL_TIM_ConfigClockSource+0x15a>
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	d867      	bhi.n	80047be <HAL_TIM_ConfigClockSource+0x16c>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d05c      	beq.n	80047ac <HAL_TIM_ConfigClockSource+0x15a>
 80046f2:	2b10      	cmp	r3, #16
 80046f4:	d05a      	beq.n	80047ac <HAL_TIM_ConfigClockSource+0x15a>
 80046f6:	e062      	b.n	80047be <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004708:	f000 f998 	bl	8004a3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800471a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	609a      	str	r2, [r3, #8]
      break;
 8004724:	e04f      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004736:	f000 f981 	bl	8004a3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004748:	609a      	str	r2, [r3, #8]
      break;
 800474a:	e03c      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004758:	461a      	mov	r2, r3
 800475a:	f000 f8f5 	bl	8004948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2150      	movs	r1, #80	@ 0x50
 8004764:	4618      	mov	r0, r3
 8004766:	f000 f94e 	bl	8004a06 <TIM_ITRx_SetConfig>
      break;
 800476a:	e02c      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004778:	461a      	mov	r2, r3
 800477a:	f000 f914 	bl	80049a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2160      	movs	r1, #96	@ 0x60
 8004784:	4618      	mov	r0, r3
 8004786:	f000 f93e 	bl	8004a06 <TIM_ITRx_SetConfig>
      break;
 800478a:	e01c      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004798:	461a      	mov	r2, r3
 800479a:	f000 f8d5 	bl	8004948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2140      	movs	r1, #64	@ 0x40
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 f92e 	bl	8004a06 <TIM_ITRx_SetConfig>
      break;
 80047aa:	e00c      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4619      	mov	r1, r3
 80047b6:	4610      	mov	r0, r2
 80047b8:	f000 f925 	bl	8004a06 <TIM_ITRx_SetConfig>
      break;
 80047bc:	e003      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	73fb      	strb	r3, [r7, #15]
      break;
 80047c2:	e000      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a3a      	ldr	r2, [pc, #232]	@ (800492c <TIM_Base_SetConfig+0xfc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00f      	beq.n	8004868 <TIM_Base_SetConfig+0x38>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800484e:	d00b      	beq.n	8004868 <TIM_Base_SetConfig+0x38>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a37      	ldr	r2, [pc, #220]	@ (8004930 <TIM_Base_SetConfig+0x100>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d007      	beq.n	8004868 <TIM_Base_SetConfig+0x38>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a36      	ldr	r2, [pc, #216]	@ (8004934 <TIM_Base_SetConfig+0x104>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d003      	beq.n	8004868 <TIM_Base_SetConfig+0x38>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a35      	ldr	r2, [pc, #212]	@ (8004938 <TIM_Base_SetConfig+0x108>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d108      	bne.n	800487a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800486e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a2b      	ldr	r2, [pc, #172]	@ (800492c <TIM_Base_SetConfig+0xfc>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d01b      	beq.n	80048ba <TIM_Base_SetConfig+0x8a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004888:	d017      	beq.n	80048ba <TIM_Base_SetConfig+0x8a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a28      	ldr	r2, [pc, #160]	@ (8004930 <TIM_Base_SetConfig+0x100>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <TIM_Base_SetConfig+0x8a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a27      	ldr	r2, [pc, #156]	@ (8004934 <TIM_Base_SetConfig+0x104>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00f      	beq.n	80048ba <TIM_Base_SetConfig+0x8a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a26      	ldr	r2, [pc, #152]	@ (8004938 <TIM_Base_SetConfig+0x108>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00b      	beq.n	80048ba <TIM_Base_SetConfig+0x8a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a25      	ldr	r2, [pc, #148]	@ (800493c <TIM_Base_SetConfig+0x10c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d007      	beq.n	80048ba <TIM_Base_SetConfig+0x8a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a24      	ldr	r2, [pc, #144]	@ (8004940 <TIM_Base_SetConfig+0x110>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d003      	beq.n	80048ba <TIM_Base_SetConfig+0x8a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a23      	ldr	r2, [pc, #140]	@ (8004944 <TIM_Base_SetConfig+0x114>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d108      	bne.n	80048cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a0e      	ldr	r2, [pc, #56]	@ (800492c <TIM_Base_SetConfig+0xfc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d103      	bne.n	8004900 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b01      	cmp	r3, #1
 8004910:	d105      	bne.n	800491e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f023 0201 	bic.w	r2, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	611a      	str	r2, [r3, #16]
  }
}
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40010000 	.word	0x40010000
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800
 8004938:	40000c00 	.word	0x40000c00
 800493c:	40014000 	.word	0x40014000
 8004940:	40014400 	.word	0x40014400
 8004944:	40014800 	.word	0x40014800

08004948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	f023 0201 	bic.w	r2, r3, #1
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f023 030a 	bic.w	r3, r3, #10
 8004984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4313      	orrs	r3, r2
 800498c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	621a      	str	r2, [r3, #32]
}
 800499a:	bf00      	nop
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b087      	sub	sp, #28
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	f023 0210 	bic.w	r2, r3, #16
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	031b      	lsls	r3, r3, #12
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	621a      	str	r2, [r3, #32]
}
 80049fa:	bf00      	nop
 80049fc:	371c      	adds	r7, #28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f043 0307 	orr.w	r3, r3, #7
 8004a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	609a      	str	r2, [r3, #8]
}
 8004a30:	bf00      	nop
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	021a      	lsls	r2, r3, #8
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	609a      	str	r2, [r3, #8]
}
 8004a70:	bf00      	nop
 8004a72:	371c      	adds	r7, #28
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e050      	b.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d018      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae0:	d013      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a18      	ldr	r2, [pc, #96]	@ (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00e      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a16      	ldr	r2, [pc, #88]	@ (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d009      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a15      	ldr	r2, [pc, #84]	@ (8004b50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d004      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a13      	ldr	r2, [pc, #76]	@ (8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d10c      	bne.n	8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40010000 	.word	0x40010000
 8004b48:	40000400 	.word	0x40000400
 8004b4c:	40000800 	.word	0x40000800
 8004b50:	40000c00 	.word	0x40000c00
 8004b54:	40014000 	.word	0x40014000

08004b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e042      	b.n	8004c18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fd f912 	bl	8001dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2224      	movs	r2, #36	@ 0x24
 8004bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fdbd 	bl	8005744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004be8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08a      	sub	sp, #40	@ 0x28
 8004c24:	af02      	add	r7, sp, #8
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d175      	bne.n	8004d2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <HAL_UART_Transmit+0x2c>
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e06e      	b.n	8004d2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2221      	movs	r2, #33	@ 0x21
 8004c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c5e:	f7fd fb23 	bl	80022a8 <HAL_GetTick>
 8004c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	88fa      	ldrh	r2, [r7, #6]
 8004c68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	88fa      	ldrh	r2, [r7, #6]
 8004c6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c78:	d108      	bne.n	8004c8c <HAL_UART_Transmit+0x6c>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d104      	bne.n	8004c8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	e003      	b.n	8004c94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c94:	e02e      	b.n	8004cf4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2180      	movs	r1, #128	@ 0x80
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fb1f 	bl	80052e4 <UART_WaitOnFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e03a      	b.n	8004d2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10b      	bne.n	8004cd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ccc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	3302      	adds	r3, #2
 8004cd2:	61bb      	str	r3, [r7, #24]
 8004cd4:	e007      	b.n	8004ce6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	781a      	ldrb	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1cb      	bne.n	8004c96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2200      	movs	r2, #0
 8004d06:	2140      	movs	r1, #64	@ 0x40
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 faeb 	bl	80052e4 <UART_WaitOnFlagUntilTimeout>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e006      	b.n	8004d2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	e000      	b.n	8004d2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d2c:	2302      	movs	r3, #2
  }
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3720      	adds	r7, #32
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	4613      	mov	r3, r2
 8004d42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d112      	bne.n	8004d76 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <HAL_UART_Receive_IT+0x26>
 8004d56:	88fb      	ldrh	r3, [r7, #6]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e00b      	b.n	8004d78 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d66:	88fb      	ldrh	r3, [r7, #6]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	68b9      	ldr	r1, [r7, #8]
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 fb12 	bl	8005396 <UART_Start_Receive_IT>
 8004d72:	4603      	mov	r3, r0
 8004d74:	e000      	b.n	8004d78 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d76:	2302      	movs	r3, #2
  }
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b0ba      	sub	sp, #232	@ 0xe8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10f      	bne.n	8004de6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d009      	beq.n	8004de6 <HAL_UART_IRQHandler+0x66>
 8004dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fbf2 	bl	80055c8 <UART_Receive_IT>
      return;
 8004de4:	e25b      	b.n	800529e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 80de 	beq.w	8004fac <HAL_UART_IRQHandler+0x22c>
 8004df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d106      	bne.n	8004e0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e00:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 80d1 	beq.w	8004fac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00b      	beq.n	8004e2e <HAL_UART_IRQHandler+0xae>
 8004e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e26:	f043 0201 	orr.w	r2, r3, #1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e32:	f003 0304 	and.w	r3, r3, #4
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00b      	beq.n	8004e52 <HAL_UART_IRQHandler+0xd2>
 8004e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d005      	beq.n	8004e52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4a:	f043 0202 	orr.w	r2, r3, #2
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00b      	beq.n	8004e76 <HAL_UART_IRQHandler+0xf6>
 8004e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d005      	beq.n	8004e76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6e:	f043 0204 	orr.w	r2, r3, #4
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d011      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x126>
 8004e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d105      	bne.n	8004e9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d005      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9e:	f043 0208 	orr.w	r2, r3, #8
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 81f2 	beq.w	8005294 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <HAL_UART_IRQHandler+0x14e>
 8004ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fb7d 	bl	80055c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed8:	2b40      	cmp	r3, #64	@ 0x40
 8004eda:	bf0c      	ite	eq
 8004edc:	2301      	moveq	r3, #1
 8004ede:	2300      	movne	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d103      	bne.n	8004efa <HAL_UART_IRQHandler+0x17a>
 8004ef2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d04f      	beq.n	8004f9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fa85 	bl	800540a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f0a:	2b40      	cmp	r3, #64	@ 0x40
 8004f0c:	d141      	bne.n	8004f92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3314      	adds	r3, #20
 8004f14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f1c:	e853 3f00 	ldrex	r3, [r3]
 8004f20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	3314      	adds	r3, #20
 8004f36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1d9      	bne.n	8004f0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d013      	beq.n	8004f8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f66:	4a7e      	ldr	r2, [pc, #504]	@ (8005160 <HAL_UART_IRQHandler+0x3e0>)
 8004f68:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fd fb4b 	bl	800260a <HAL_DMA_Abort_IT>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d016      	beq.n	8004fa8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f84:	4610      	mov	r0, r2
 8004f86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f88:	e00e      	b.n	8004fa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f994 	bl	80052b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f90:	e00a      	b.n	8004fa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f990 	bl	80052b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f98:	e006      	b.n	8004fa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f98c 	bl	80052b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004fa6:	e175      	b.n	8005294 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa8:	bf00      	nop
    return;
 8004faa:	e173      	b.n	8005294 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	f040 814f 	bne.w	8005254 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fba:	f003 0310 	and.w	r3, r3, #16
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 8148 	beq.w	8005254 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8141 	beq.w	8005254 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	60bb      	str	r3, [r7, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff2:	2b40      	cmp	r3, #64	@ 0x40
 8004ff4:	f040 80b6 	bne.w	8005164 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005004:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 8145 	beq.w	8005298 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005016:	429a      	cmp	r2, r3
 8005018:	f080 813e 	bcs.w	8005298 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005022:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800502e:	f000 8088 	beq.w	8005142 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	330c      	adds	r3, #12
 8005038:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005048:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800504c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005050:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	330c      	adds	r3, #12
 800505a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800505e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005062:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800506a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005076:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1d9      	bne.n	8005032 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3314      	adds	r3, #20
 8005084:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005086:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800508e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005090:	f023 0301 	bic.w	r3, r3, #1
 8005094:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3314      	adds	r3, #20
 800509e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e1      	bne.n	800507e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3314      	adds	r3, #20
 80050c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3314      	adds	r3, #20
 80050da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050e6:	e841 2300 	strex	r3, r2, [r1]
 80050ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1e3      	bne.n	80050ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	330c      	adds	r3, #12
 8005106:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800510a:	e853 3f00 	ldrex	r3, [r3]
 800510e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005112:	f023 0310 	bic.w	r3, r3, #16
 8005116:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	330c      	adds	r3, #12
 8005120:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005124:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005126:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800512a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800512c:	e841 2300 	strex	r3, r2, [r1]
 8005130:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e3      	bne.n	8005100 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800513c:	4618      	mov	r0, r3
 800513e:	f7fd f9f4 	bl	800252a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2202      	movs	r2, #2
 8005146:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005150:	b29b      	uxth	r3, r3
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	b29b      	uxth	r3, r3
 8005156:	4619      	mov	r1, r3
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f8b7 	bl	80052cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800515e:	e09b      	b.n	8005298 <HAL_UART_IRQHandler+0x518>
 8005160:	080054d1 	.word	0x080054d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800516c:	b29b      	uxth	r3, r3
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005178:	b29b      	uxth	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 808e 	beq.w	800529c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005180:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 8089 	beq.w	800529c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	330c      	adds	r3, #12
 8005190:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800519a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800519c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	330c      	adds	r3, #12
 80051aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80051ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80051b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e3      	bne.n	800518a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3314      	adds	r3, #20
 80051c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	623b      	str	r3, [r7, #32]
   return(result);
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	f023 0301 	bic.w	r3, r3, #1
 80051d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3314      	adds	r3, #20
 80051e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80051e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e3      	bne.n	80051c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	330c      	adds	r3, #12
 800520e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	60fb      	str	r3, [r7, #12]
   return(result);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0310 	bic.w	r3, r3, #16
 800521e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	330c      	adds	r3, #12
 8005228:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800522c:	61fa      	str	r2, [r7, #28]
 800522e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	69b9      	ldr	r1, [r7, #24]
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	e841 2300 	strex	r3, r2, [r1]
 8005238:	617b      	str	r3, [r7, #20]
   return(result);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1e3      	bne.n	8005208 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005246:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f83d 	bl	80052cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005252:	e023      	b.n	800529c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800525c:	2b00      	cmp	r3, #0
 800525e:	d009      	beq.n	8005274 <HAL_UART_IRQHandler+0x4f4>
 8005260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f943 	bl	80054f8 <UART_Transmit_IT>
    return;
 8005272:	e014      	b.n	800529e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00e      	beq.n	800529e <HAL_UART_IRQHandler+0x51e>
 8005280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f983 	bl	8005598 <UART_EndTransmit_IT>
    return;
 8005292:	e004      	b.n	800529e <HAL_UART_IRQHandler+0x51e>
    return;
 8005294:	bf00      	nop
 8005296:	e002      	b.n	800529e <HAL_UART_IRQHandler+0x51e>
      return;
 8005298:	bf00      	nop
 800529a:	e000      	b.n	800529e <HAL_UART_IRQHandler+0x51e>
      return;
 800529c:	bf00      	nop
  }
}
 800529e:	37e8      	adds	r7, #232	@ 0xe8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	4613      	mov	r3, r2
 80052f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f4:	e03b      	b.n	800536e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d037      	beq.n	800536e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fe:	f7fc ffd3 	bl	80022a8 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	6a3a      	ldr	r2, [r7, #32]
 800530a:	429a      	cmp	r2, r3
 800530c:	d302      	bcc.n	8005314 <UART_WaitOnFlagUntilTimeout+0x30>
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e03a      	b.n	800538e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	d023      	beq.n	800536e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2b80      	cmp	r3, #128	@ 0x80
 800532a:	d020      	beq.n	800536e <UART_WaitOnFlagUntilTimeout+0x8a>
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b40      	cmp	r3, #64	@ 0x40
 8005330:	d01d      	beq.n	800536e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b08      	cmp	r3, #8
 800533e:	d116      	bne.n	800536e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f857 	bl	800540a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2208      	movs	r2, #8
 8005360:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e00f      	b.n	800538e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4013      	ands	r3, r2
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	429a      	cmp	r2, r3
 800537c:	bf0c      	ite	eq
 800537e:	2301      	moveq	r3, #1
 8005380:	2300      	movne	r3, #0
 8005382:	b2db      	uxtb	r3, r3
 8005384:	461a      	mov	r2, r3
 8005386:	79fb      	ldrb	r3, [r7, #7]
 8005388:	429a      	cmp	r2, r3
 800538a:	d0b4      	beq.n	80052f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	60f8      	str	r0, [r7, #12]
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	4613      	mov	r3, r2
 80053a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	88fa      	ldrh	r2, [r7, #6]
 80053ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	88fa      	ldrh	r2, [r7, #6]
 80053b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2222      	movs	r2, #34	@ 0x22
 80053c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d007      	beq.n	80053dc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695a      	ldr	r2, [r3, #20]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0201 	orr.w	r2, r2, #1
 80053ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0220 	orr.w	r2, r2, #32
 80053fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800540a:	b480      	push	{r7}
 800540c:	b095      	sub	sp, #84	@ 0x54
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	330c      	adds	r3, #12
 8005418:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005428:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	330c      	adds	r3, #12
 8005430:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005432:	643a      	str	r2, [r7, #64]	@ 0x40
 8005434:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005438:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e5      	bne.n	8005412 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3314      	adds	r3, #20
 800544c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	61fb      	str	r3, [r7, #28]
   return(result);
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	f023 0301 	bic.w	r3, r3, #1
 800545c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3314      	adds	r3, #20
 8005464:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005466:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005468:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800546c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e5      	bne.n	8005446 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547e:	2b01      	cmp	r3, #1
 8005480:	d119      	bne.n	80054b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	330c      	adds	r3, #12
 8005488:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	e853 3f00 	ldrex	r3, [r3]
 8005490:	60bb      	str	r3, [r7, #8]
   return(result);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f023 0310 	bic.w	r3, r3, #16
 8005498:	647b      	str	r3, [r7, #68]	@ 0x44
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	330c      	adds	r3, #12
 80054a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054a2:	61ba      	str	r2, [r7, #24]
 80054a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a6:	6979      	ldr	r1, [r7, #20]
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	e841 2300 	strex	r3, r2, [r1]
 80054ae:	613b      	str	r3, [r7, #16]
   return(result);
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1e5      	bne.n	8005482 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80054c4:	bf00      	nop
 80054c6:	3754      	adds	r7, #84	@ 0x54
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f7ff fee4 	bl	80052b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b21      	cmp	r3, #33	@ 0x21
 800550a:	d13e      	bne.n	800558a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005514:	d114      	bne.n	8005540 <UART_Transmit_IT+0x48>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d110      	bne.n	8005540 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005532:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	1c9a      	adds	r2, r3, #2
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	621a      	str	r2, [r3, #32]
 800553e:	e008      	b.n	8005552 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	1c59      	adds	r1, r3, #1
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6211      	str	r1, [r2, #32]
 800554a:	781a      	ldrb	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29b      	uxth	r3, r3
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	4619      	mov	r1, r3
 8005560:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10f      	bne.n	8005586 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005574:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005584:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	e000      	b.n	800558c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800558a:	2302      	movs	r3, #2
  }
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff fe73 	bl	80052a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08c      	sub	sp, #48	@ 0x30
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b22      	cmp	r3, #34	@ 0x22
 80055da:	f040 80ae 	bne.w	800573a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e6:	d117      	bne.n	8005618 <UART_Receive_IT+0x50>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d113      	bne.n	8005618 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005606:	b29a      	uxth	r2, r3
 8005608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005610:	1c9a      	adds	r2, r3, #2
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	629a      	str	r2, [r3, #40]	@ 0x28
 8005616:	e026      	b.n	8005666 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800561e:	2300      	movs	r3, #0
 8005620:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800562a:	d007      	beq.n	800563c <UART_Receive_IT+0x74>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <UART_Receive_IT+0x82>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d106      	bne.n	800564a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	b2da      	uxtb	r2, r3
 8005644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005646:	701a      	strb	r2, [r3, #0]
 8005648:	e008      	b.n	800565c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	b2db      	uxtb	r3, r3
 8005652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005656:	b2da      	uxtb	r2, r3
 8005658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800565a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29b      	uxth	r3, r3
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	4619      	mov	r1, r3
 8005674:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005676:	2b00      	cmp	r3, #0
 8005678:	d15d      	bne.n	8005736 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0220 	bic.w	r2, r2, #32
 8005688:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005698:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695a      	ldr	r2, [r3, #20]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0201 	bic.w	r2, r2, #1
 80056a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d135      	bne.n	800572c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	330c      	adds	r3, #12
 80056cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	613b      	str	r3, [r7, #16]
   return(result);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f023 0310 	bic.w	r3, r3, #16
 80056dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	330c      	adds	r3, #12
 80056e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e6:	623a      	str	r2, [r7, #32]
 80056e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	69f9      	ldr	r1, [r7, #28]
 80056ec:	6a3a      	ldr	r2, [r7, #32]
 80056ee:	e841 2300 	strex	r3, r2, [r1]
 80056f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1e5      	bne.n	80056c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2b10      	cmp	r3, #16
 8005706:	d10a      	bne.n	800571e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005722:	4619      	mov	r1, r3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff fdd1 	bl	80052cc <HAL_UARTEx_RxEventCallback>
 800572a:	e002      	b.n	8005732 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f001 f8f5 	bl	800691c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	e002      	b.n	800573c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	e000      	b.n	800573c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800573a:	2302      	movs	r3, #2
  }
}
 800573c:	4618      	mov	r0, r3
 800573e:	3730      	adds	r7, #48	@ 0x30
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005748:	b0c0      	sub	sp, #256	@ 0x100
 800574a:	af00      	add	r7, sp, #0
 800574c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005760:	68d9      	ldr	r1, [r3, #12]
 8005762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	ea40 0301 	orr.w	r3, r0, r1
 800576c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800576e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	431a      	orrs	r2, r3
 800577c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	431a      	orrs	r2, r3
 8005784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	4313      	orrs	r3, r2
 800578c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800579c:	f021 010c 	bic.w	r1, r1, #12
 80057a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057aa:	430b      	orrs	r3, r1
 80057ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80057ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057be:	6999      	ldr	r1, [r3, #24]
 80057c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	ea40 0301 	orr.w	r3, r0, r1
 80057ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4b8f      	ldr	r3, [pc, #572]	@ (8005a10 <UART_SetConfig+0x2cc>)
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d005      	beq.n	80057e4 <UART_SetConfig+0xa0>
 80057d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	4b8d      	ldr	r3, [pc, #564]	@ (8005a14 <UART_SetConfig+0x2d0>)
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d104      	bne.n	80057ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057e4:	f7fe fd50 	bl	8004288 <HAL_RCC_GetPCLK2Freq>
 80057e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80057ec:	e003      	b.n	80057f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057ee:	f7fe fd37 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 80057f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005800:	f040 810c 	bne.w	8005a1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005808:	2200      	movs	r2, #0
 800580a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800580e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005812:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005816:	4622      	mov	r2, r4
 8005818:	462b      	mov	r3, r5
 800581a:	1891      	adds	r1, r2, r2
 800581c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800581e:	415b      	adcs	r3, r3
 8005820:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005822:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005826:	4621      	mov	r1, r4
 8005828:	eb12 0801 	adds.w	r8, r2, r1
 800582c:	4629      	mov	r1, r5
 800582e:	eb43 0901 	adc.w	r9, r3, r1
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	f04f 0300 	mov.w	r3, #0
 800583a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800583e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005842:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005846:	4690      	mov	r8, r2
 8005848:	4699      	mov	r9, r3
 800584a:	4623      	mov	r3, r4
 800584c:	eb18 0303 	adds.w	r3, r8, r3
 8005850:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005854:	462b      	mov	r3, r5
 8005856:	eb49 0303 	adc.w	r3, r9, r3
 800585a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800585e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800586a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800586e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005872:	460b      	mov	r3, r1
 8005874:	18db      	adds	r3, r3, r3
 8005876:	653b      	str	r3, [r7, #80]	@ 0x50
 8005878:	4613      	mov	r3, r2
 800587a:	eb42 0303 	adc.w	r3, r2, r3
 800587e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005880:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005884:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005888:	f7fb f9f6 	bl	8000c78 <__aeabi_uldivmod>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4b61      	ldr	r3, [pc, #388]	@ (8005a18 <UART_SetConfig+0x2d4>)
 8005892:	fba3 2302 	umull	r2, r3, r3, r2
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	011c      	lsls	r4, r3, #4
 800589a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800589e:	2200      	movs	r2, #0
 80058a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80058a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80058ac:	4642      	mov	r2, r8
 80058ae:	464b      	mov	r3, r9
 80058b0:	1891      	adds	r1, r2, r2
 80058b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80058b4:	415b      	adcs	r3, r3
 80058b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80058bc:	4641      	mov	r1, r8
 80058be:	eb12 0a01 	adds.w	sl, r2, r1
 80058c2:	4649      	mov	r1, r9
 80058c4:	eb43 0b01 	adc.w	fp, r3, r1
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058dc:	4692      	mov	sl, r2
 80058de:	469b      	mov	fp, r3
 80058e0:	4643      	mov	r3, r8
 80058e2:	eb1a 0303 	adds.w	r3, sl, r3
 80058e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058ea:	464b      	mov	r3, r9
 80058ec:	eb4b 0303 	adc.w	r3, fp, r3
 80058f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005900:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005904:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005908:	460b      	mov	r3, r1
 800590a:	18db      	adds	r3, r3, r3
 800590c:	643b      	str	r3, [r7, #64]	@ 0x40
 800590e:	4613      	mov	r3, r2
 8005910:	eb42 0303 	adc.w	r3, r2, r3
 8005914:	647b      	str	r3, [r7, #68]	@ 0x44
 8005916:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800591a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800591e:	f7fb f9ab 	bl	8000c78 <__aeabi_uldivmod>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4611      	mov	r1, r2
 8005928:	4b3b      	ldr	r3, [pc, #236]	@ (8005a18 <UART_SetConfig+0x2d4>)
 800592a:	fba3 2301 	umull	r2, r3, r3, r1
 800592e:	095b      	lsrs	r3, r3, #5
 8005930:	2264      	movs	r2, #100	@ 0x64
 8005932:	fb02 f303 	mul.w	r3, r2, r3
 8005936:	1acb      	subs	r3, r1, r3
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800593e:	4b36      	ldr	r3, [pc, #216]	@ (8005a18 <UART_SetConfig+0x2d4>)
 8005940:	fba3 2302 	umull	r2, r3, r3, r2
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800594c:	441c      	add	r4, r3
 800594e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005952:	2200      	movs	r2, #0
 8005954:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005958:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800595c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005960:	4642      	mov	r2, r8
 8005962:	464b      	mov	r3, r9
 8005964:	1891      	adds	r1, r2, r2
 8005966:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005968:	415b      	adcs	r3, r3
 800596a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800596c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005970:	4641      	mov	r1, r8
 8005972:	1851      	adds	r1, r2, r1
 8005974:	6339      	str	r1, [r7, #48]	@ 0x30
 8005976:	4649      	mov	r1, r9
 8005978:	414b      	adcs	r3, r1
 800597a:	637b      	str	r3, [r7, #52]	@ 0x34
 800597c:	f04f 0200 	mov.w	r2, #0
 8005980:	f04f 0300 	mov.w	r3, #0
 8005984:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005988:	4659      	mov	r1, fp
 800598a:	00cb      	lsls	r3, r1, #3
 800598c:	4651      	mov	r1, sl
 800598e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005992:	4651      	mov	r1, sl
 8005994:	00ca      	lsls	r2, r1, #3
 8005996:	4610      	mov	r0, r2
 8005998:	4619      	mov	r1, r3
 800599a:	4603      	mov	r3, r0
 800599c:	4642      	mov	r2, r8
 800599e:	189b      	adds	r3, r3, r2
 80059a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059a4:	464b      	mov	r3, r9
 80059a6:	460a      	mov	r2, r1
 80059a8:	eb42 0303 	adc.w	r3, r2, r3
 80059ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80059c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80059c4:	460b      	mov	r3, r1
 80059c6:	18db      	adds	r3, r3, r3
 80059c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ca:	4613      	mov	r3, r2
 80059cc:	eb42 0303 	adc.w	r3, r2, r3
 80059d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80059da:	f7fb f94d 	bl	8000c78 <__aeabi_uldivmod>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005a18 <UART_SetConfig+0x2d4>)
 80059e4:	fba3 1302 	umull	r1, r3, r3, r2
 80059e8:	095b      	lsrs	r3, r3, #5
 80059ea:	2164      	movs	r1, #100	@ 0x64
 80059ec:	fb01 f303 	mul.w	r3, r1, r3
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	3332      	adds	r3, #50	@ 0x32
 80059f6:	4a08      	ldr	r2, [pc, #32]	@ (8005a18 <UART_SetConfig+0x2d4>)
 80059f8:	fba2 2303 	umull	r2, r3, r2, r3
 80059fc:	095b      	lsrs	r3, r3, #5
 80059fe:	f003 0207 	and.w	r2, r3, #7
 8005a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4422      	add	r2, r4
 8005a0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a0c:	e106      	b.n	8005c1c <UART_SetConfig+0x4d8>
 8005a0e:	bf00      	nop
 8005a10:	40011000 	.word	0x40011000
 8005a14:	40011400 	.word	0x40011400
 8005a18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a20:	2200      	movs	r2, #0
 8005a22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a2e:	4642      	mov	r2, r8
 8005a30:	464b      	mov	r3, r9
 8005a32:	1891      	adds	r1, r2, r2
 8005a34:	6239      	str	r1, [r7, #32]
 8005a36:	415b      	adcs	r3, r3
 8005a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a3e:	4641      	mov	r1, r8
 8005a40:	1854      	adds	r4, r2, r1
 8005a42:	4649      	mov	r1, r9
 8005a44:	eb43 0501 	adc.w	r5, r3, r1
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	f04f 0300 	mov.w	r3, #0
 8005a50:	00eb      	lsls	r3, r5, #3
 8005a52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a56:	00e2      	lsls	r2, r4, #3
 8005a58:	4614      	mov	r4, r2
 8005a5a:	461d      	mov	r5, r3
 8005a5c:	4643      	mov	r3, r8
 8005a5e:	18e3      	adds	r3, r4, r3
 8005a60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a64:	464b      	mov	r3, r9
 8005a66:	eb45 0303 	adc.w	r3, r5, r3
 8005a6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a7e:	f04f 0200 	mov.w	r2, #0
 8005a82:	f04f 0300 	mov.w	r3, #0
 8005a86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	008b      	lsls	r3, r1, #2
 8005a8e:	4621      	mov	r1, r4
 8005a90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a94:	4621      	mov	r1, r4
 8005a96:	008a      	lsls	r2, r1, #2
 8005a98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a9c:	f7fb f8ec 	bl	8000c78 <__aeabi_uldivmod>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4b60      	ldr	r3, [pc, #384]	@ (8005c28 <UART_SetConfig+0x4e4>)
 8005aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	011c      	lsls	r4, r3, #4
 8005aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ab8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005abc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ac0:	4642      	mov	r2, r8
 8005ac2:	464b      	mov	r3, r9
 8005ac4:	1891      	adds	r1, r2, r2
 8005ac6:	61b9      	str	r1, [r7, #24]
 8005ac8:	415b      	adcs	r3, r3
 8005aca:	61fb      	str	r3, [r7, #28]
 8005acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ad0:	4641      	mov	r1, r8
 8005ad2:	1851      	adds	r1, r2, r1
 8005ad4:	6139      	str	r1, [r7, #16]
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	414b      	adcs	r3, r1
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	f04f 0300 	mov.w	r3, #0
 8005ae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ae8:	4659      	mov	r1, fp
 8005aea:	00cb      	lsls	r3, r1, #3
 8005aec:	4651      	mov	r1, sl
 8005aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005af2:	4651      	mov	r1, sl
 8005af4:	00ca      	lsls	r2, r1, #3
 8005af6:	4610      	mov	r0, r2
 8005af8:	4619      	mov	r1, r3
 8005afa:	4603      	mov	r3, r0
 8005afc:	4642      	mov	r2, r8
 8005afe:	189b      	adds	r3, r3, r2
 8005b00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b04:	464b      	mov	r3, r9
 8005b06:	460a      	mov	r2, r1
 8005b08:	eb42 0303 	adc.w	r3, r2, r3
 8005b0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005b28:	4649      	mov	r1, r9
 8005b2a:	008b      	lsls	r3, r1, #2
 8005b2c:	4641      	mov	r1, r8
 8005b2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b32:	4641      	mov	r1, r8
 8005b34:	008a      	lsls	r2, r1, #2
 8005b36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b3a:	f7fb f89d 	bl	8000c78 <__aeabi_uldivmod>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	4611      	mov	r1, r2
 8005b44:	4b38      	ldr	r3, [pc, #224]	@ (8005c28 <UART_SetConfig+0x4e4>)
 8005b46:	fba3 2301 	umull	r2, r3, r3, r1
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	2264      	movs	r2, #100	@ 0x64
 8005b4e:	fb02 f303 	mul.w	r3, r2, r3
 8005b52:	1acb      	subs	r3, r1, r3
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	3332      	adds	r3, #50	@ 0x32
 8005b58:	4a33      	ldr	r2, [pc, #204]	@ (8005c28 <UART_SetConfig+0x4e4>)
 8005b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b64:	441c      	add	r4, r3
 8005b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b74:	4642      	mov	r2, r8
 8005b76:	464b      	mov	r3, r9
 8005b78:	1891      	adds	r1, r2, r2
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	415b      	adcs	r3, r3
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b84:	4641      	mov	r1, r8
 8005b86:	1851      	adds	r1, r2, r1
 8005b88:	6039      	str	r1, [r7, #0]
 8005b8a:	4649      	mov	r1, r9
 8005b8c:	414b      	adcs	r3, r1
 8005b8e:	607b      	str	r3, [r7, #4]
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b9c:	4659      	mov	r1, fp
 8005b9e:	00cb      	lsls	r3, r1, #3
 8005ba0:	4651      	mov	r1, sl
 8005ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ba6:	4651      	mov	r1, sl
 8005ba8:	00ca      	lsls	r2, r1, #3
 8005baa:	4610      	mov	r0, r2
 8005bac:	4619      	mov	r1, r3
 8005bae:	4603      	mov	r3, r0
 8005bb0:	4642      	mov	r2, r8
 8005bb2:	189b      	adds	r3, r3, r2
 8005bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bb6:	464b      	mov	r3, r9
 8005bb8:	460a      	mov	r2, r1
 8005bba:	eb42 0303 	adc.w	r3, r2, r3
 8005bbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bca:	667a      	str	r2, [r7, #100]	@ 0x64
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005bd8:	4649      	mov	r1, r9
 8005bda:	008b      	lsls	r3, r1, #2
 8005bdc:	4641      	mov	r1, r8
 8005bde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005be2:	4641      	mov	r1, r8
 8005be4:	008a      	lsls	r2, r1, #2
 8005be6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005bea:	f7fb f845 	bl	8000c78 <__aeabi_uldivmod>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c28 <UART_SetConfig+0x4e4>)
 8005bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf8:	095b      	lsrs	r3, r3, #5
 8005bfa:	2164      	movs	r1, #100	@ 0x64
 8005bfc:	fb01 f303 	mul.w	r3, r1, r3
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	3332      	adds	r3, #50	@ 0x32
 8005c06:	4a08      	ldr	r2, [pc, #32]	@ (8005c28 <UART_SetConfig+0x4e4>)
 8005c08:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0c:	095b      	lsrs	r3, r3, #5
 8005c0e:	f003 020f 	and.w	r2, r3, #15
 8005c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4422      	add	r2, r4
 8005c1a:	609a      	str	r2, [r3, #8]
}
 8005c1c:	bf00      	nop
 8005c1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c22:	46bd      	mov	sp, r7
 8005c24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c28:	51eb851f 	.word	0x51eb851f

08005c2c <BCD2Decimal>:
//cach 2
 static I2C_HandleTypeDef *ds_i2c; // bien static tuc la chi dung trong file nay
uint8_t Decimal2BCD(uint8_t num){
  return (num/10)<<4 | (num%10);
}
uint8_t BCD2Decimal(uint8_t num){
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	4603      	mov	r3, r0
 8005c34:	71fb      	strb	r3, [r7, #7]
  return (num>>4)*10 + (num&0x0F);
 8005c36:	79fb      	ldrb	r3, [r7, #7]
 8005c38:	091b      	lsrs	r3, r3, #4
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	0092      	lsls	r2, r2, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	79fb      	ldrb	r3, [r7, #7]
 8005c48:	f003 030f 	and.w	r3, r3, #15
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	4413      	add	r3, r2
 8005c50:	b2db      	uxtb	r3, r3
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
	...

08005c60 <rtc_read_time>:
	data[6]= Decimal2BCD(dt->mon);
	data[7]= Decimal2BCD(dt->year);
	HAL_I2C_Master_Transmit(ds_i2c,RTC_ADDRESS,data,8,100);
}
// doc du lieu
void rtc_read_time(DateTime *dt){
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af02      	add	r7, sp, #8
 8005c66:	6078      	str	r0, [r7, #4]
	uint8_t data[7];
	uint8_t add_reg=0x00; // dia chi cua thanh ghi cua slave ma master muon doc du lieu
 8005c68:	2300      	movs	r3, #0
 8005c6a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(ds_i2c,RTC_ADDRESS,&add_reg,1,100); // gui dia chi thanh ghi ma master muon doc du lieu
 8005c6c:	4b27      	ldr	r3, [pc, #156]	@ (8005d0c <rtc_read_time+0xac>)
 8005c6e:	6818      	ldr	r0, [r3, #0]
 8005c70:	f107 020f 	add.w	r2, r7, #15
 8005c74:	2364      	movs	r3, #100	@ 0x64
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	2301      	movs	r3, #1
 8005c7a:	21d0      	movs	r1, #208	@ 0xd0
 8005c7c:	f7fc ffca 	bl	8002c14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ds_i2c,RTC_ADDRESS,data,7,100); // doc du lieu
 8005c80:	4b22      	ldr	r3, [pc, #136]	@ (8005d0c <rtc_read_time+0xac>)
 8005c82:	6818      	ldr	r0, [r3, #0]
 8005c84:	f107 0210 	add.w	r2, r7, #16
 8005c88:	2364      	movs	r3, #100	@ 0x64
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	2307      	movs	r3, #7
 8005c8e:	21d0      	movs	r1, #208	@ 0xd0
 8005c90:	f7fd f8be 	bl	8002e10 <HAL_I2C_Master_Receive>
	dt->sec= BCD2Decimal(data[0]);
 8005c94:	7c3b      	ldrb	r3, [r7, #16]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff ffc8 	bl	8005c2c <BCD2Decimal>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	709a      	strb	r2, [r3, #2]
	dt->min= BCD2Decimal(data[1]);
 8005ca4:	7c7b      	ldrb	r3, [r7, #17]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff ffc0 	bl	8005c2c <BCD2Decimal>
 8005cac:	4603      	mov	r3, r0
 8005cae:	461a      	mov	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	705a      	strb	r2, [r3, #1]
	dt->hour= BCD2Decimal(data[2]);
 8005cb4:	7cbb      	ldrb	r3, [r7, #18]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff ffb8 	bl	8005c2c <BCD2Decimal>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	701a      	strb	r2, [r3, #0]
	dt->day= BCD2Decimal(data[3]);
 8005cc4:	7cfb      	ldrb	r3, [r7, #19]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff ffb0 	bl	8005c2c <BCD2Decimal>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	461a      	mov	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	70da      	strb	r2, [r3, #3]
	dt->date= BCD2Decimal(data[4]);
 8005cd4:	7d3b      	ldrb	r3, [r7, #20]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff ffa8 	bl	8005c2c <BCD2Decimal>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	461a      	mov	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	711a      	strb	r2, [r3, #4]
	dt->mon= BCD2Decimal(data[5]);
 8005ce4:	7d7b      	ldrb	r3, [r7, #21]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff ffa0 	bl	8005c2c <BCD2Decimal>
 8005cec:	4603      	mov	r3, r0
 8005cee:	461a      	mov	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	715a      	strb	r2, [r3, #5]
	dt->year= BCD2Decimal(data[6]);
 8005cf4:	7dbb      	ldrb	r3, [r7, #22]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff ff98 	bl	8005c2c <BCD2Decimal>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	461a      	mov	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	719a      	strb	r2, [r3, #6]
}
 8005d04:	bf00      	nop
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20000570 	.word	0x20000570

08005d10 <rtc_init>:
	else if (data[1]==0x40) temperarate=0.25;
	else if(data[1]==0x80) temperarate=0.5;
	else temperarate=0.75;
	return data[0]+temperarate; 
}
void rtc_init(I2C_HandleTypeDef *i2c){
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  ds_i2c=i2c;
 8005d18:	4a04      	ldr	r2, [pc, #16]	@ (8005d2c <rtc_init+0x1c>)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	20000570 	.word	0x20000570

08005d30 <CLCD_Delay>:
******************************************************************************************************************/
#include "LCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	4603      	mov	r3, r0
 8005d38:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8005d3a:	88fb      	ldrh	r3, [r7, #6]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fc fabf 	bl	80022c0 <HAL_Delay>
}
 8005d42:	bf00      	nop
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b086      	sub	sp, #24
 8005d4e:	af02      	add	r7, sp, #8
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	460b      	mov	r3, r1
 8005d54:	70fb      	strb	r3, [r7, #3]
 8005d56:	4613      	mov	r3, r2
 8005d58:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8005d5a:	78fb      	ldrb	r3, [r7, #3]
 8005d5c:	f023 030f 	bic.w	r3, r3, #15
 8005d60:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8005d62:	78fb      	ldrb	r3, [r7, #3]
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	7adb      	ldrb	r3, [r3, #11]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d007      	beq.n	8005d80 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
 8005d72:	f043 0308 	orr.w	r3, r3, #8
 8005d76:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 8005d78:	7bbb      	ldrb	r3, [r7, #14]
 8005d7a:	f043 0308 	orr.w	r3, r3, #8
 8005d7e:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 8005d80:	78bb      	ldrb	r3, [r7, #2]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d108      	bne.n	8005d98 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
 8005d88:	f043 0301 	orr.w	r3, r3, #1
 8005d8c:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8005d8e:	7bbb      	ldrb	r3, [r7, #14]
 8005d90:	f043 0301 	orr.w	r3, r3, #1
 8005d94:	73bb      	strb	r3, [r7, #14]
 8005d96:	e00a      	b.n	8005dae <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 8005d98:	78bb      	ldrb	r3, [r7, #2]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d107      	bne.n	8005dae <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	f023 0301 	bic.w	r3, r3, #1
 8005da4:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 8005da6:	7bbb      	ldrb	r3, [r7, #14]
 8005da8:	f023 0301 	bic.w	r3, r3, #1
 8005dac:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	f043 0304 	orr.w	r3, r3, #4
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 8005db8:	2001      	movs	r0, #1
 8005dba:	f7ff ffb9 	bl	8005d30 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
 8005dc0:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 8005dc2:	7bbb      	ldrb	r3, [r7, #14]
 8005dc4:	f043 0304 	orr.w	r3, r3, #4
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 8005dcc:	2001      	movs	r0, #1
 8005dce:	f7ff ffaf 	bl	8005d30 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8005dd2:	7bbb      	ldrb	r3, [r7, #14]
 8005dd4:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	791b      	ldrb	r3, [r3, #4]
 8005dde:	4619      	mov	r1, r3
 8005de0:	f107 0208 	add.w	r2, r7, #8
 8005de4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	2304      	movs	r3, #4
 8005dec:	f7fc ff12 	bl	8002c14 <HAL_I2C_Master_Transmit>
}
 8005df0:	bf00      	nop
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	4611      	mov	r1, r2
 8005e04:	461a      	mov	r2, r3
 8005e06:	460b      	mov	r3, r1
 8005e08:	71fb      	strb	r3, [r7, #7]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	79fa      	ldrb	r2, [r7, #7]
 8005e18:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	79ba      	ldrb	r2, [r7, #6]
 8005e1e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	7e3a      	ldrb	r2, [r7, #24]
 8005e24:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2228      	movs	r2, #40	@ 0x28
 8005e2a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2206      	movs	r2, #6
 8005e30:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	220c      	movs	r2, #12
 8005e36:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2214      	movs	r2, #20
 8005e3c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2208      	movs	r2, #8
 8005e42:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8005e44:	2032      	movs	r0, #50	@ 0x32
 8005e46:	f7ff ff73 	bl	8005d30 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2133      	movs	r1, #51	@ 0x33
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f7ff ff7b 	bl	8005d4a <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8005e54:	2200      	movs	r2, #0
 8005e56:	2133      	movs	r1, #51	@ 0x33
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7ff ff76 	bl	8005d4a <CLCD_WriteI2C>
	CLCD_Delay(5);
 8005e5e:	2005      	movs	r0, #5
 8005e60:	f7ff ff66 	bl	8005d30 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8005e64:	2200      	movs	r2, #0
 8005e66:	2132      	movs	r1, #50	@ 0x32
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f7ff ff6e 	bl	8005d4a <CLCD_WriteI2C>
	CLCD_Delay(5);
 8005e6e:	2005      	movs	r0, #5
 8005e70:	f7ff ff5e 	bl	8005d30 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8005e74:	2200      	movs	r2, #0
 8005e76:	2120      	movs	r1, #32
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f7ff ff66 	bl	8005d4a <CLCD_WriteI2C>
	CLCD_Delay(5);
 8005e7e:	2005      	movs	r0, #5
 8005e80:	f7ff ff56 	bl	8005d30 <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	79db      	ldrb	r3, [r3, #7]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f7ff ff5c 	bl	8005d4a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	7a1b      	ldrb	r3, [r3, #8]
 8005e96:	2200      	movs	r2, #0
 8005e98:	4619      	mov	r1, r3
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f7ff ff55 	bl	8005d4a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	7a5b      	ldrb	r3, [r3, #9]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f7ff ff4e 	bl	8005d4a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	7a9b      	ldrb	r3, [r3, #10]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f7ff ff47 	bl	8005d4a <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7ff ff42 	bl	8005d4a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	2102      	movs	r1, #2
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f7ff ff3d 	bl	8005d4a <CLCD_WriteI2C>
}
 8005ed0:	bf00      	nop
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	70fb      	strb	r3, [r7, #3]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	795b      	ldrb	r3, [r3, #5]
 8005ef0:	78fa      	ldrb	r2, [r7, #3]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d303      	bcc.n	8005efe <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	795b      	ldrb	r3, [r3, #5]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	799b      	ldrb	r3, [r3, #6]
 8005f02:	78ba      	ldrb	r2, [r7, #2]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d303      	bcc.n	8005f10 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	799b      	ldrb	r3, [r3, #6]
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8005f10:	78bb      	ldrb	r3, [r7, #2]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d102      	bne.n	8005f1c <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	73fb      	strb	r3, [r7, #15]
 8005f1a:	e013      	b.n	8005f44 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8005f1c:	78bb      	ldrb	r3, [r7, #2]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d103      	bne.n	8005f2a <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8005f22:	78fb      	ldrb	r3, [r7, #3]
 8005f24:	3340      	adds	r3, #64	@ 0x40
 8005f26:	73fb      	strb	r3, [r7, #15]
 8005f28:	e00c      	b.n	8005f44 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8005f2a:	78bb      	ldrb	r3, [r7, #2]
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d103      	bne.n	8005f38 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	3314      	adds	r3, #20
 8005f34:	73fb      	strb	r3, [r7, #15]
 8005f36:	e005      	b.n	8005f44 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8005f38:	78bb      	ldrb	r3, [r7, #2]
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d102      	bne.n	8005f44 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 8005f3e:	78fb      	ldrb	r3, [r7, #3]
 8005f40:	3354      	adds	r3, #84	@ 0x54
 8005f42:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff fefa 	bl	8005d4a <CLCD_WriteI2C>
}
 8005f56:	bf00      	nop
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b082      	sub	sp, #8
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	460b      	mov	r3, r1
 8005f68:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff feea 	bl	8005d4a <CLCD_WriteI2C>
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b082      	sub	sp, #8
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 8005f88:	e007      	b.n	8005f9a <CLCD_I2C_WriteString+0x1c>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	603a      	str	r2, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	4619      	mov	r1, r3
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7ff ffe2 	bl	8005f5e <CLCD_I2C_WriteChar>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f3      	bne.n	8005f8a <CLCD_I2C_WriteString+0xc>
}
 8005fa2:	bf00      	nop
 8005fa4:	bf00      	nop
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <find_command_from_list>:
#include <stdlib.h>
#include "cli_type.h"
extern UART_HandleTypeDef huart1;
extern cli_command_t list_command[];
cli_command_t* find_command_from_list(char *cmd)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	73fb      	strb	r3, [r7, #15]
  while(list_command[i].cmd_name != NULL){
 8005fb8:	e019      	b.n	8005fee <find_command_from_list+0x42>
	   if(strcmp(list_command[i].cmd_name,cmd) ==0){
 8005fba:	7bfa      	ldrb	r2, [r7, #15]
 8005fbc:	4913      	ldr	r1, [pc, #76]	@ (800600c <find_command_from_list+0x60>)
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	440b      	add	r3, r1
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fa f907 	bl	80001e0 <strcmp>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d107      	bne.n	8005fe8 <find_command_from_list+0x3c>
		    return &list_command[i];
 8005fd8:	7bfa      	ldrb	r2, [r7, #15]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800600c <find_command_from_list+0x60>)
 8005fe4:	4413      	add	r3, r2
 8005fe6:	e00d      	b.n	8006004 <find_command_from_list+0x58>
		 }
		 i++;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	3301      	adds	r3, #1
 8005fec:	73fb      	strb	r3, [r7, #15]
  while(list_command[i].cmd_name != NULL){
 8005fee:	7bfa      	ldrb	r2, [r7, #15]
 8005ff0:	4906      	ldr	r1, [pc, #24]	@ (800600c <find_command_from_list+0x60>)
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	4413      	add	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	440b      	add	r3, r1
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1db      	bne.n	8005fba <find_command_from_list+0xe>
	}
	return NULL;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	20000024 	.word	0x20000024

08006010 <command_excute>:

void command_excute(char *buff,uint8_t len){
 8006010:	b580      	push	{r7, lr}
 8006012:	b090      	sub	sp, #64	@ 0x40
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	70fb      	strb	r3, [r7, #3]
  char *token=strtok(buff," ");
 800601c:	4919      	ldr	r1, [pc, #100]	@ (8006084 <command_excute+0x74>)
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f001 fb18 	bl	8007654 <strtok>
 8006024:	63f8      	str	r0, [r7, #60]	@ 0x3c
	char *argv[10];
	uint8_t num_arg=0;
 8006026:	2300      	movs	r3, #0
 8006028:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  while(token){
 800602c:	e00f      	b.n	800604e <command_excute+0x3e>
    argv[num_arg++]=token;
 800602e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	f887 203b 	strb.w	r2, [r7, #59]	@ 0x3b
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	3340      	adds	r3, #64	@ 0x40
 800603c:	443b      	add	r3, r7
 800603e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006040:	f843 2c34 	str.w	r2, [r3, #-52]
	  token=strtok(NULL," ");
 8006044:	490f      	ldr	r1, [pc, #60]	@ (8006084 <command_excute+0x74>)
 8006046:	2000      	movs	r0, #0
 8006048:	f001 fb04 	bl	8007654 <strtok>
 800604c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  while(token){
 800604e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1ec      	bne.n	800602e <command_excute+0x1e>
	}
 cli_command_t* command =find_command_from_list(argv[0]);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff ffa8 	bl	8005fac <find_command_from_list>
 800605c:	6378      	str	r0, [r7, #52]	@ 0x34
	if(command == NULL){
 800605e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006060:	2b00      	cmp	r3, #0
 8006062:	d103      	bne.n	800606c <command_excute+0x5c>
	  print_cli("command not found!");
 8006064:	4808      	ldr	r0, [pc, #32]	@ (8006088 <command_excute+0x78>)
 8006066:	f000 fab5 	bl	80065d4 <print_cli>
 800606a:	e007      	b.n	800607c <command_excute+0x6c>
	}
	else{
	  return command->func(argv,num_arg);
 800606c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f897 103b 	ldrb.w	r1, [r7, #59]	@ 0x3b
 8006074:	f107 020c 	add.w	r2, r7, #12
 8006078:	4610      	mov	r0, r2
 800607a:	4798      	blx	r3
	}
}
 800607c:	3740      	adds	r7, #64	@ 0x40
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	08009b0c 	.word	0x08009b0c
 8006088:	08009b10 	.word	0x08009b10

0800608c <update_task1>:
extern TIM_HandleTypeDef htim4;


extern cli_command_t list_command[];

void update_task1(char **argv,uint8_t argv_num){
 800608c:	b5b0      	push	{r4, r5, r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	70fb      	strb	r3, [r7, #3]
	//Update only if the parameter is not -1
	    HAL_TIM_Base_Stop_IT(&htim1);
 8006098:	4839      	ldr	r0, [pc, #228]	@ (8006180 <update_task1+0xf4>)
 800609a:	f7fe f9bb 	bl	8004414 <HAL_TIM_Base_Stop_IT>
	    HAL_TIM_Base_Stop_IT(&htim2);
 800609e:	4839      	ldr	r0, [pc, #228]	@ (8006184 <update_task1+0xf8>)
 80060a0:	f7fe f9b8 	bl	8004414 <HAL_TIM_Base_Stop_IT>
	    HAL_TIM_Base_Stop_IT(&htim3);
 80060a4:	4838      	ldr	r0, [pc, #224]	@ (8006188 <update_task1+0xfc>)
 80060a6:	f7fe f9b5 	bl	8004414 <HAL_TIM_Base_Stop_IT>
	    HAL_TIM_Base_Stop_IT(&htim4);
 80060aa:	4838      	ldr	r0, [pc, #224]	@ (800618c <update_task1+0x100>)
 80060ac:	f7fe f9b2 	bl	8004414 <HAL_TIM_Base_Stop_IT>
	    if(atoi(argv[1]) != -1 ){
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3304      	adds	r3, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fc9e 	bl	80069f8 <atoi>
 80060bc:	4603      	mov	r3, r0
 80060be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c2:	d045      	beq.n	8006150 <update_task1+0xc4>
	     	if(atoi(argv[2]) == -1 )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3308      	adds	r3, #8
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fc94 	bl	80069f8 <atoi>
 80060d0:	4603      	mov	r3, r0
 80060d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d6:	d118      	bne.n	800610a <update_task1+0x7e>
	     		htim1.Init.Period = atoi(argv[1])*(HAL_RCC_GetPCLK2Freq()/htim1.Init.Prescaler)/1000-1;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3304      	adds	r3, #4
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fc8a 	bl	80069f8 <atoi>
 80060e4:	4603      	mov	r3, r0
 80060e6:	461c      	mov	r4, r3
 80060e8:	f7fe f8ce 	bl	8004288 <HAL_RCC_GetPCLK2Freq>
 80060ec:	4602      	mov	r2, r0
 80060ee:	4b24      	ldr	r3, [pc, #144]	@ (8006180 <update_task1+0xf4>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f6:	fb04 f303 	mul.w	r3, r4, r3
 80060fa:	4a25      	ldr	r2, [pc, #148]	@ (8006190 <update_task1+0x104>)
 80060fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006100:	099b      	lsrs	r3, r3, #6
 8006102:	3b01      	subs	r3, #1
 8006104:	4a1e      	ldr	r2, [pc, #120]	@ (8006180 <update_task1+0xf4>)
 8006106:	60d3      	str	r3, [r2, #12]
 8006108:	e01c      	b.n	8006144 <update_task1+0xb8>
	     	else
	     		htim1.Init.Period = atoi(argv[1])*(HAL_RCC_GetPCLK2Freq()/atoi(argv[2]))/1000-1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3304      	adds	r3, #4
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4618      	mov	r0, r3
 8006112:	f000 fc71 	bl	80069f8 <atoi>
 8006116:	4603      	mov	r3, r0
 8006118:	461d      	mov	r5, r3
 800611a:	f7fe f8b5 	bl	8004288 <HAL_RCC_GetPCLK2Freq>
 800611e:	4604      	mov	r4, r0
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	3308      	adds	r3, #8
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4618      	mov	r0, r3
 8006128:	f000 fc66 	bl	80069f8 <atoi>
 800612c:	4603      	mov	r3, r0
 800612e:	fbb4 f3f3 	udiv	r3, r4, r3
 8006132:	fb05 f303 	mul.w	r3, r5, r3
 8006136:	4a16      	ldr	r2, [pc, #88]	@ (8006190 <update_task1+0x104>)
 8006138:	fba2 2303 	umull	r2, r3, r2, r3
 800613c:	099b      	lsrs	r3, r3, #6
 800613e:	3b01      	subs	r3, #1
 8006140:	4a0f      	ldr	r2, [pc, #60]	@ (8006180 <update_task1+0xf4>)
 8006142:	60d3      	str	r3, [r2, #12]

	     	print_cli("update task1 successfully : %u\n",htim1.Init.Period);
 8006144:	4b0e      	ldr	r3, [pc, #56]	@ (8006180 <update_task1+0xf4>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	4619      	mov	r1, r3
 800614a:	4812      	ldr	r0, [pc, #72]	@ (8006194 <update_task1+0x108>)
 800614c:	f000 fa42 	bl	80065d4 <print_cli>
	     }
	    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006150:	480b      	ldr	r0, [pc, #44]	@ (8006180 <update_task1+0xf4>)
 8006152:	f7fe f8ad 	bl	80042b0 <HAL_TIM_Base_Init>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <update_task1+0xd4>
	    {
	        Error_Handler();
 800615c:	f7fb fc8e 	bl	8001a7c <Error_Handler>
	    }
	    HAL_TIM_Base_Start_IT(&htim1);
 8006160:	4807      	ldr	r0, [pc, #28]	@ (8006180 <update_task1+0xf4>)
 8006162:	f7fe f8f5 	bl	8004350 <HAL_TIM_Base_Start_IT>
	    HAL_TIM_Base_Start_IT(&htim2);
 8006166:	4807      	ldr	r0, [pc, #28]	@ (8006184 <update_task1+0xf8>)
 8006168:	f7fe f8f2 	bl	8004350 <HAL_TIM_Base_Start_IT>
	    HAL_TIM_Base_Start_IT(&htim3);
 800616c:	4806      	ldr	r0, [pc, #24]	@ (8006188 <update_task1+0xfc>)
 800616e:	f7fe f8ef 	bl	8004350 <HAL_TIM_Base_Start_IT>
	    HAL_TIM_Base_Start_IT(&htim4);
 8006172:	4806      	ldr	r0, [pc, #24]	@ (800618c <update_task1+0x100>)
 8006174:	f7fe f8ec 	bl	8004350 <HAL_TIM_Base_Start_IT>
	}
 8006178:	bf00      	nop
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bdb0      	pop	{r4, r5, r7, pc}
 8006180:	20000370 	.word	0x20000370
 8006184:	200003b8 	.word	0x200003b8
 8006188:	20000400 	.word	0x20000400
 800618c:	20000448 	.word	0x20000448
 8006190:	10624dd3 	.word	0x10624dd3
 8006194:	08009b24 	.word	0x08009b24

08006198 <update_task2>:
void update_task2(char **argv,uint8_t argv_num){
 8006198:	b5b0      	push	{r4, r5, r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	460b      	mov	r3, r1
 80061a2:	70fb      	strb	r3, [r7, #3]
    HAL_TIM_Base_Stop_IT(&htim1);
 80061a4:	4839      	ldr	r0, [pc, #228]	@ (800628c <update_task2+0xf4>)
 80061a6:	f7fe f935 	bl	8004414 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim2);
 80061aa:	4839      	ldr	r0, [pc, #228]	@ (8006290 <update_task2+0xf8>)
 80061ac:	f7fe f932 	bl	8004414 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim3);
 80061b0:	4838      	ldr	r0, [pc, #224]	@ (8006294 <update_task2+0xfc>)
 80061b2:	f7fe f92f 	bl	8004414 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim4);
 80061b6:	4838      	ldr	r0, [pc, #224]	@ (8006298 <update_task2+0x100>)
 80061b8:	f7fe f92c 	bl	8004414 <HAL_TIM_Base_Stop_IT>
    if(atoi(argv[1]) != -1 ){
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3304      	adds	r3, #4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fc18 	bl	80069f8 <atoi>
 80061c8:	4603      	mov	r3, r0
 80061ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ce:	d045      	beq.n	800625c <update_task2+0xc4>
     	if(atoi(argv[2]) == -1 )
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3308      	adds	r3, #8
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fc0e 	bl	80069f8 <atoi>
 80061dc:	4603      	mov	r3, r0
 80061de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e2:	d118      	bne.n	8006216 <update_task2+0x7e>
     		htim2.Init.Period = atoi(argv[1])*(HAL_RCC_GetPCLK2Freq()/htim2.Init.Prescaler)/1000-1;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3304      	adds	r3, #4
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fc04 	bl	80069f8 <atoi>
 80061f0:	4603      	mov	r3, r0
 80061f2:	461c      	mov	r4, r3
 80061f4:	f7fe f848 	bl	8004288 <HAL_RCC_GetPCLK2Freq>
 80061f8:	4602      	mov	r2, r0
 80061fa:	4b25      	ldr	r3, [pc, #148]	@ (8006290 <update_task2+0xf8>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006202:	fb04 f303 	mul.w	r3, r4, r3
 8006206:	4a25      	ldr	r2, [pc, #148]	@ (800629c <update_task2+0x104>)
 8006208:	fba2 2303 	umull	r2, r3, r2, r3
 800620c:	099b      	lsrs	r3, r3, #6
 800620e:	3b01      	subs	r3, #1
 8006210:	4a1f      	ldr	r2, [pc, #124]	@ (8006290 <update_task2+0xf8>)
 8006212:	60d3      	str	r3, [r2, #12]
 8006214:	e01c      	b.n	8006250 <update_task2+0xb8>
     	else
     		htim2.Init.Period = atoi(argv[1])*(HAL_RCC_GetPCLK2Freq()/atoi(argv[2]))/1000-1;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	3304      	adds	r3, #4
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fbeb 	bl	80069f8 <atoi>
 8006222:	4603      	mov	r3, r0
 8006224:	461d      	mov	r5, r3
 8006226:	f7fe f82f 	bl	8004288 <HAL_RCC_GetPCLK2Freq>
 800622a:	4604      	mov	r4, r0
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3308      	adds	r3, #8
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fbe0 	bl	80069f8 <atoi>
 8006238:	4603      	mov	r3, r0
 800623a:	fbb4 f3f3 	udiv	r3, r4, r3
 800623e:	fb05 f303 	mul.w	r3, r5, r3
 8006242:	4a16      	ldr	r2, [pc, #88]	@ (800629c <update_task2+0x104>)
 8006244:	fba2 2303 	umull	r2, r3, r2, r3
 8006248:	099b      	lsrs	r3, r3, #6
 800624a:	3b01      	subs	r3, #1
 800624c:	4a10      	ldr	r2, [pc, #64]	@ (8006290 <update_task2+0xf8>)
 800624e:	60d3      	str	r3, [r2, #12]
     	print_cli("update task2 successfully : %u\n",htim2.Init.Period);
 8006250:	4b0f      	ldr	r3, [pc, #60]	@ (8006290 <update_task2+0xf8>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	4619      	mov	r1, r3
 8006256:	4812      	ldr	r0, [pc, #72]	@ (80062a0 <update_task2+0x108>)
 8006258:	f000 f9bc 	bl	80065d4 <print_cli>
     }
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800625c:	480c      	ldr	r0, [pc, #48]	@ (8006290 <update_task2+0xf8>)
 800625e:	f7fe f827 	bl	80042b0 <HAL_TIM_Base_Init>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <update_task2+0xd4>
    {
        Error_Handler();
 8006268:	f7fb fc08 	bl	8001a7c <Error_Handler>
    }
    HAL_TIM_Base_Start_IT(&htim1);
 800626c:	4807      	ldr	r0, [pc, #28]	@ (800628c <update_task2+0xf4>)
 800626e:	f7fe f86f 	bl	8004350 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim2);
 8006272:	4807      	ldr	r0, [pc, #28]	@ (8006290 <update_task2+0xf8>)
 8006274:	f7fe f86c 	bl	8004350 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 8006278:	4806      	ldr	r0, [pc, #24]	@ (8006294 <update_task2+0xfc>)
 800627a:	f7fe f869 	bl	8004350 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim4);
 800627e:	4806      	ldr	r0, [pc, #24]	@ (8006298 <update_task2+0x100>)
 8006280:	f7fe f866 	bl	8004350 <HAL_TIM_Base_Start_IT>
}
 8006284:	bf00      	nop
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bdb0      	pop	{r4, r5, r7, pc}
 800628c:	20000370 	.word	0x20000370
 8006290:	200003b8 	.word	0x200003b8
 8006294:	20000400 	.word	0x20000400
 8006298:	20000448 	.word	0x20000448
 800629c:	10624dd3 	.word	0x10624dd3
 80062a0:	08009b44 	.word	0x08009b44

080062a4 <update_task3>:
void update_task3(char **argv,uint8_t argv_num){
 80062a4:	b5b0      	push	{r4, r5, r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	70fb      	strb	r3, [r7, #3]
    HAL_TIM_Base_Stop_IT(&htim1);
 80062b0:	4839      	ldr	r0, [pc, #228]	@ (8006398 <update_task3+0xf4>)
 80062b2:	f7fe f8af 	bl	8004414 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim2);
 80062b6:	4839      	ldr	r0, [pc, #228]	@ (800639c <update_task3+0xf8>)
 80062b8:	f7fe f8ac 	bl	8004414 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim3);
 80062bc:	4838      	ldr	r0, [pc, #224]	@ (80063a0 <update_task3+0xfc>)
 80062be:	f7fe f8a9 	bl	8004414 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim4);
 80062c2:	4838      	ldr	r0, [pc, #224]	@ (80063a4 <update_task3+0x100>)
 80062c4:	f7fe f8a6 	bl	8004414 <HAL_TIM_Base_Stop_IT>
    if(atoi(argv[1]) != -1 ){
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3304      	adds	r3, #4
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fb92 	bl	80069f8 <atoi>
 80062d4:	4603      	mov	r3, r0
 80062d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062da:	d045      	beq.n	8006368 <update_task3+0xc4>
     	if(atoi(argv[2]) == -1 )
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	3308      	adds	r3, #8
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fb88 	bl	80069f8 <atoi>
 80062e8:	4603      	mov	r3, r0
 80062ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ee:	d118      	bne.n	8006322 <update_task3+0x7e>
     		htim3.Init.Period = atoi(argv[1])*(HAL_RCC_GetPCLK2Freq()/htim3.Init.Prescaler)/1000-1;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3304      	adds	r3, #4
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fb7e 	bl	80069f8 <atoi>
 80062fc:	4603      	mov	r3, r0
 80062fe:	461c      	mov	r4, r3
 8006300:	f7fd ffc2 	bl	8004288 <HAL_RCC_GetPCLK2Freq>
 8006304:	4602      	mov	r2, r0
 8006306:	4b26      	ldr	r3, [pc, #152]	@ (80063a0 <update_task3+0xfc>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	fbb2 f3f3 	udiv	r3, r2, r3
 800630e:	fb04 f303 	mul.w	r3, r4, r3
 8006312:	4a25      	ldr	r2, [pc, #148]	@ (80063a8 <update_task3+0x104>)
 8006314:	fba2 2303 	umull	r2, r3, r2, r3
 8006318:	099b      	lsrs	r3, r3, #6
 800631a:	3b01      	subs	r3, #1
 800631c:	4a20      	ldr	r2, [pc, #128]	@ (80063a0 <update_task3+0xfc>)
 800631e:	60d3      	str	r3, [r2, #12]
 8006320:	e01c      	b.n	800635c <update_task3+0xb8>
     	else
     		htim3.Init.Period = atoi(argv[1])*(HAL_RCC_GetPCLK2Freq()/atoi(argv[2]))/1000-1;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	3304      	adds	r3, #4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4618      	mov	r0, r3
 800632a:	f000 fb65 	bl	80069f8 <atoi>
 800632e:	4603      	mov	r3, r0
 8006330:	461d      	mov	r5, r3
 8006332:	f7fd ffa9 	bl	8004288 <HAL_RCC_GetPCLK2Freq>
 8006336:	4604      	mov	r4, r0
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3308      	adds	r3, #8
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fb5a 	bl	80069f8 <atoi>
 8006344:	4603      	mov	r3, r0
 8006346:	fbb4 f3f3 	udiv	r3, r4, r3
 800634a:	fb05 f303 	mul.w	r3, r5, r3
 800634e:	4a16      	ldr	r2, [pc, #88]	@ (80063a8 <update_task3+0x104>)
 8006350:	fba2 2303 	umull	r2, r3, r2, r3
 8006354:	099b      	lsrs	r3, r3, #6
 8006356:	3b01      	subs	r3, #1
 8006358:	4a11      	ldr	r2, [pc, #68]	@ (80063a0 <update_task3+0xfc>)
 800635a:	60d3      	str	r3, [r2, #12]

     	print_cli("update task3 successfully : %u\n",htim3.Init.Period);
 800635c:	4b10      	ldr	r3, [pc, #64]	@ (80063a0 <update_task3+0xfc>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	4619      	mov	r1, r3
 8006362:	4812      	ldr	r0, [pc, #72]	@ (80063ac <update_task3+0x108>)
 8006364:	f000 f936 	bl	80065d4 <print_cli>
     }
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006368:	480d      	ldr	r0, [pc, #52]	@ (80063a0 <update_task3+0xfc>)
 800636a:	f7fd ffa1 	bl	80042b0 <HAL_TIM_Base_Init>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <update_task3+0xd4>
    {
        Error_Handler();
 8006374:	f7fb fb82 	bl	8001a7c <Error_Handler>
    }
    HAL_TIM_Base_Start_IT(&htim1);
 8006378:	4807      	ldr	r0, [pc, #28]	@ (8006398 <update_task3+0xf4>)
 800637a:	f7fd ffe9 	bl	8004350 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim2);
 800637e:	4807      	ldr	r0, [pc, #28]	@ (800639c <update_task3+0xf8>)
 8006380:	f7fd ffe6 	bl	8004350 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 8006384:	4806      	ldr	r0, [pc, #24]	@ (80063a0 <update_task3+0xfc>)
 8006386:	f7fd ffe3 	bl	8004350 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim4);
 800638a:	4806      	ldr	r0, [pc, #24]	@ (80063a4 <update_task3+0x100>)
 800638c:	f7fd ffe0 	bl	8004350 <HAL_TIM_Base_Start_IT>
}
 8006390:	bf00      	nop
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bdb0      	pop	{r4, r5, r7, pc}
 8006398:	20000370 	.word	0x20000370
 800639c:	200003b8 	.word	0x200003b8
 80063a0:	20000400 	.word	0x20000400
 80063a4:	20000448 	.word	0x20000448
 80063a8:	10624dd3 	.word	0x10624dd3
 80063ac:	08009b64 	.word	0x08009b64

080063b0 <update_task4>:
void update_task4(char **argv,uint8_t argv_num){
 80063b0:	b5b0      	push	{r4, r5, r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	70fb      	strb	r3, [r7, #3]
    HAL_TIM_Base_Stop_IT(&htim1);
 80063bc:	4839      	ldr	r0, [pc, #228]	@ (80064a4 <update_task4+0xf4>)
 80063be:	f7fe f829 	bl	8004414 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim2);
 80063c2:	4839      	ldr	r0, [pc, #228]	@ (80064a8 <update_task4+0xf8>)
 80063c4:	f7fe f826 	bl	8004414 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim3);
 80063c8:	4838      	ldr	r0, [pc, #224]	@ (80064ac <update_task4+0xfc>)
 80063ca:	f7fe f823 	bl	8004414 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim4);
 80063ce:	4838      	ldr	r0, [pc, #224]	@ (80064b0 <update_task4+0x100>)
 80063d0:	f7fe f820 	bl	8004414 <HAL_TIM_Base_Stop_IT>
    if(atoi(argv[1]) != -1 ){
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3304      	adds	r3, #4
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 fb0c 	bl	80069f8 <atoi>
 80063e0:	4603      	mov	r3, r0
 80063e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e6:	d045      	beq.n	8006474 <update_task4+0xc4>
    	if(atoi(argv[2]) == -1 )
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3308      	adds	r3, #8
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fb02 	bl	80069f8 <atoi>
 80063f4:	4603      	mov	r3, r0
 80063f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fa:	d118      	bne.n	800642e <update_task4+0x7e>
    		htim4.Init.Period = atoi(argv[1])*(HAL_RCC_GetPCLK2Freq()/htim4.Init.Prescaler)/1000-1;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3304      	adds	r3, #4
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4618      	mov	r0, r3
 8006404:	f000 faf8 	bl	80069f8 <atoi>
 8006408:	4603      	mov	r3, r0
 800640a:	461c      	mov	r4, r3
 800640c:	f7fd ff3c 	bl	8004288 <HAL_RCC_GetPCLK2Freq>
 8006410:	4602      	mov	r2, r0
 8006412:	4b27      	ldr	r3, [pc, #156]	@ (80064b0 <update_task4+0x100>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	fbb2 f3f3 	udiv	r3, r2, r3
 800641a:	fb04 f303 	mul.w	r3, r4, r3
 800641e:	4a25      	ldr	r2, [pc, #148]	@ (80064b4 <update_task4+0x104>)
 8006420:	fba2 2303 	umull	r2, r3, r2, r3
 8006424:	099b      	lsrs	r3, r3, #6
 8006426:	3b01      	subs	r3, #1
 8006428:	4a21      	ldr	r2, [pc, #132]	@ (80064b0 <update_task4+0x100>)
 800642a:	60d3      	str	r3, [r2, #12]
 800642c:	e01c      	b.n	8006468 <update_task4+0xb8>
    	else
    		htim4.Init.Period = atoi(argv[1])*(HAL_RCC_GetPCLK2Freq()/atoi(argv[2]))/1000-1;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3304      	adds	r3, #4
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fadf 	bl	80069f8 <atoi>
 800643a:	4603      	mov	r3, r0
 800643c:	461d      	mov	r5, r3
 800643e:	f7fd ff23 	bl	8004288 <HAL_RCC_GetPCLK2Freq>
 8006442:	4604      	mov	r4, r0
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3308      	adds	r3, #8
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fad4 	bl	80069f8 <atoi>
 8006450:	4603      	mov	r3, r0
 8006452:	fbb4 f3f3 	udiv	r3, r4, r3
 8006456:	fb05 f303 	mul.w	r3, r5, r3
 800645a:	4a16      	ldr	r2, [pc, #88]	@ (80064b4 <update_task4+0x104>)
 800645c:	fba2 2303 	umull	r2, r3, r2, r3
 8006460:	099b      	lsrs	r3, r3, #6
 8006462:	3b01      	subs	r3, #1
 8006464:	4a12      	ldr	r2, [pc, #72]	@ (80064b0 <update_task4+0x100>)
 8006466:	60d3      	str	r3, [r2, #12]
    	print_cli("update task4 successfully : %u\n",htim4.Init.Period);
 8006468:	4b11      	ldr	r3, [pc, #68]	@ (80064b0 <update_task4+0x100>)
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	4619      	mov	r1, r3
 800646e:	4812      	ldr	r0, [pc, #72]	@ (80064b8 <update_task4+0x108>)
 8006470:	f000 f8b0 	bl	80065d4 <print_cli>
    }
    if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006474:	480e      	ldr	r0, [pc, #56]	@ (80064b0 <update_task4+0x100>)
 8006476:	f7fd ff1b 	bl	80042b0 <HAL_TIM_Base_Init>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <update_task4+0xd4>
    {
        Error_Handler();
 8006480:	f7fb fafc 	bl	8001a7c <Error_Handler>
    }
    HAL_TIM_Base_Start_IT(&htim1);
 8006484:	4807      	ldr	r0, [pc, #28]	@ (80064a4 <update_task4+0xf4>)
 8006486:	f7fd ff63 	bl	8004350 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim2);
 800648a:	4807      	ldr	r0, [pc, #28]	@ (80064a8 <update_task4+0xf8>)
 800648c:	f7fd ff60 	bl	8004350 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 8006490:	4806      	ldr	r0, [pc, #24]	@ (80064ac <update_task4+0xfc>)
 8006492:	f7fd ff5d 	bl	8004350 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim4);
 8006496:	4806      	ldr	r0, [pc, #24]	@ (80064b0 <update_task4+0x100>)
 8006498:	f7fd ff5a 	bl	8004350 <HAL_TIM_Base_Start_IT>
}
 800649c:	bf00      	nop
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bdb0      	pop	{r4, r5, r7, pc}
 80064a4:	20000370 	.word	0x20000370
 80064a8:	200003b8 	.word	0x200003b8
 80064ac:	20000400 	.word	0x20000400
 80064b0:	20000448 	.word	0x20000448
 80064b4:	10624dd3 	.word	0x10624dd3
 80064b8:	08009b84 	.word	0x08009b84

080064bc <data_frame>:
void data_frame(char **argv,uint8_t argv_num){
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	70fb      	strb	r3, [r7, #3]
	print_cli("task-id | perious | prescaler\n");
 80064c8:	4803      	ldr	r0, [pc, #12]	@ (80064d8 <data_frame+0x1c>)
 80064ca:	f000 f883 	bl	80065d4 <print_cli>
}
 80064ce:	bf00      	nop
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	08009ba4 	.word	0x08009ba4

080064dc <help>:

void help(char **argv,uint8_t argv_num){
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	460b      	mov	r3, r1
 80064e6:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	73fb      	strb	r3, [r7, #15]
	while(list_command[i].help != NULL){
 80064ec:	e00f      	b.n	800650e <help+0x32>
		print_cli("%s \n",list_command[i].help);
 80064ee:	7bfa      	ldrb	r2, [r7, #15]
 80064f0:	490f      	ldr	r1, [pc, #60]	@ (8006530 <help+0x54>)
 80064f2:	4613      	mov	r3, r2
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	440b      	add	r3, r1
 80064fc:	3308      	adds	r3, #8
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4619      	mov	r1, r3
 8006502:	480c      	ldr	r0, [pc, #48]	@ (8006534 <help+0x58>)
 8006504:	f000 f866 	bl	80065d4 <print_cli>
		i++;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	3301      	adds	r3, #1
 800650c:	73fb      	strb	r3, [r7, #15]
	while(list_command[i].help != NULL){
 800650e:	7bfa      	ldrb	r2, [r7, #15]
 8006510:	4907      	ldr	r1, [pc, #28]	@ (8006530 <help+0x54>)
 8006512:	4613      	mov	r3, r2
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	440b      	add	r3, r1
 800651c:	3308      	adds	r3, #8
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e4      	bne.n	80064ee <help+0x12>
	}
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000024 	.word	0x20000024
 8006534:	08009bc4 	.word	0x08009bc4

08006538 <data_task>:

void data_task(char **argv,uint8_t argv_num){
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
	print_cli("task 1 - Period: %s , Prescaler: %s\n",htim1.Init.Period,htim1.Init.Prescaler);
 8006544:	4b11      	ldr	r3, [pc, #68]	@ (800658c <data_task+0x54>)
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	4a10      	ldr	r2, [pc, #64]	@ (800658c <data_task+0x54>)
 800654a:	6852      	ldr	r2, [r2, #4]
 800654c:	4619      	mov	r1, r3
 800654e:	4810      	ldr	r0, [pc, #64]	@ (8006590 <data_task+0x58>)
 8006550:	f000 f840 	bl	80065d4 <print_cli>
	print_cli("task 2 - Period: %s , Prescaler: %s\n",htim2.Init.Period,htim2.Init.Prescaler);
 8006554:	4b0f      	ldr	r3, [pc, #60]	@ (8006594 <data_task+0x5c>)
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	4a0e      	ldr	r2, [pc, #56]	@ (8006594 <data_task+0x5c>)
 800655a:	6852      	ldr	r2, [r2, #4]
 800655c:	4619      	mov	r1, r3
 800655e:	480e      	ldr	r0, [pc, #56]	@ (8006598 <data_task+0x60>)
 8006560:	f000 f838 	bl	80065d4 <print_cli>
	print_cli("task 3 - Period: %s , Prescaler: %s\n",htim3.Init.Period,htim3.Init.Prescaler);
 8006564:	4b0d      	ldr	r3, [pc, #52]	@ (800659c <data_task+0x64>)
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	4a0c      	ldr	r2, [pc, #48]	@ (800659c <data_task+0x64>)
 800656a:	6852      	ldr	r2, [r2, #4]
 800656c:	4619      	mov	r1, r3
 800656e:	480c      	ldr	r0, [pc, #48]	@ (80065a0 <data_task+0x68>)
 8006570:	f000 f830 	bl	80065d4 <print_cli>
	print_cli("task 4 - Period: %s , Prescaler: %s\n",htim4.Init.Period,htim4.Init.Prescaler);
 8006574:	4b0b      	ldr	r3, [pc, #44]	@ (80065a4 <data_task+0x6c>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	4a0a      	ldr	r2, [pc, #40]	@ (80065a4 <data_task+0x6c>)
 800657a:	6852      	ldr	r2, [r2, #4]
 800657c:	4619      	mov	r1, r3
 800657e:	480a      	ldr	r0, [pc, #40]	@ (80065a8 <data_task+0x70>)
 8006580:	f000 f828 	bl	80065d4 <print_cli>

}
 8006584:	bf00      	nop
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	20000370 	.word	0x20000370
 8006590:	08009bcc 	.word	0x08009bcc
 8006594:	200003b8 	.word	0x200003b8
 8006598:	08009bf4 	.word	0x08009bf4
 800659c:	20000400 	.word	0x20000400
 80065a0:	08009c1c 	.word	0x08009c1c
 80065a4:	20000448 	.word	0x20000448
 80065a8:	08009c44 	.word	0x08009c44

080065ac <info>:
void info(char **argv,uint8_t argv_num){
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	70fb      	strb	r3, [r7, #3]
	print_cli("The unit of time is miliseconds (ms).\n");
 80065b8:	4804      	ldr	r0, [pc, #16]	@ (80065cc <info+0x20>)
 80065ba:	f000 f80b 	bl	80065d4 <print_cli>
	print_cli("Set -1 if you dont want to change that parameter.\n");
 80065be:	4804      	ldr	r0, [pc, #16]	@ (80065d0 <info+0x24>)
 80065c0:	f000 f808 	bl	80065d4 <print_cli>
}
 80065c4:	bf00      	nop
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	08009c6c 	.word	0x08009c6c
 80065d0:	08009c94 	.word	0x08009c94

080065d4 <print_cli>:
#include "stdarg.h"
#include "stdio.h"
extern UART_HandleTypeDef huart1;

void print_cli(const char* str, ...)
{
 80065d4:	b40f      	push	{r0, r1, r2, r3}
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b0a2      	sub	sp, #136	@ 0x88
 80065da:	af00      	add	r7, sp, #0
  char stringArray[128];
	
	va_list args;
	va_start(args,str);
 80065dc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80065e0:	603b      	str	r3, [r7, #0]
	uint8_t len_str = vsprintf(stringArray,str,args);
 80065e2:	1d3b      	adds	r3, r7, #4
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065ea:	4618      	mov	r0, r3
 80065ec:	f001 f820 	bl	8007630 <vsiprintf>
 80065f0:	4603      	mov	r3, r0
 80065f2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	va_end(args);
	
	HAL_UART_Transmit(&huart1,(uint8_t *)stringArray,len_str,200);
 80065f6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	1d39      	adds	r1, r7, #4
 80065fe:	23c8      	movs	r3, #200	@ 0xc8
 8006600:	4804      	ldr	r0, [pc, #16]	@ (8006614 <print_cli+0x40>)
 8006602:	f7fe fb0d 	bl	8004c20 <HAL_UART_Transmit>
 8006606:	bf00      	nop
 8006608:	3788      	adds	r7, #136	@ 0x88
 800660a:	46bd      	mov	sp, r7
 800660c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006610:	b004      	add	sp, #16
 8006612:	4770      	bx	lr
 8006614:	20000490 	.word	0x20000490

08006618 <init_event_queue>:
 *  Created on: Jan 22, 2025
 *      Author: Admin
 */
#include <stdbool.h>
#include "queue.h"
void init_event_queue(EventQueue *queue) {
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
    queue->begin = 0;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	60da      	str	r2, [r3, #12]
    queue->end = 0;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	611a      	str	r2, [r3, #16]
    queue->count = 0;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	615a      	str	r2, [r3, #20]
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
	...

08006640 <enqueue_event>:

bool enqueue_event(EventQueue *queue, EventType event) {
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
    if (queue->count < MAX_EVENTS) {
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	2b09      	cmp	r3, #9
 8006652:	dc1b      	bgt.n	800668c <enqueue_event+0x4c>
        queue->events[queue->end] = event;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	78f9      	ldrb	r1, [r7, #3]
 800665c:	54d1      	strb	r1, [r2, r3]
        queue->end = (queue->end + 1) % MAX_EVENTS;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	1c59      	adds	r1, r3, #1
 8006664:	4b0d      	ldr	r3, [pc, #52]	@ (800669c <enqueue_event+0x5c>)
 8006666:	fb83 2301 	smull	r2, r3, r3, r1
 800666a:	109a      	asrs	r2, r3, #2
 800666c:	17cb      	asrs	r3, r1, #31
 800666e:	1ad2      	subs	r2, r2, r3
 8006670:	4613      	mov	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	1aca      	subs	r2, r1, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	611a      	str	r2, [r3, #16]
        queue->count++;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	615a      	str	r2, [r3, #20]
        return true;
 8006688:	2301      	movs	r3, #1
 800668a:	e000      	b.n	800668e <enqueue_event+0x4e>
    }
    return false;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	66666667 	.word	0x66666667

080066a0 <dequeue_event>:

bool dequeue_event(EventQueue *queue, EventType *event) {
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
    if (queue->count > 0) {
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	dd1c      	ble.n	80066ec <dequeue_event+0x4c>
        *event = queue->events[queue->begin];
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	5cd2      	ldrb	r2, [r2, r3]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	701a      	strb	r2, [r3, #0]
        queue->begin = (queue->begin + 1) % MAX_EVENTS;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	1c59      	adds	r1, r3, #1
 80066c4:	4b0d      	ldr	r3, [pc, #52]	@ (80066fc <dequeue_event+0x5c>)
 80066c6:	fb83 2301 	smull	r2, r3, r3, r1
 80066ca:	109a      	asrs	r2, r3, #2
 80066cc:	17cb      	asrs	r3, r1, #31
 80066ce:	1ad2      	subs	r2, r2, r3
 80066d0:	4613      	mov	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	1aca      	subs	r2, r1, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	60da      	str	r2, [r3, #12]
        queue->count--;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	1e5a      	subs	r2, r3, #1
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	615a      	str	r2, [r3, #20]
        return true;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e000      	b.n	80066ee <dequeue_event+0x4e>
    }
    return false;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	66666667 	.word	0x66666667

08006700 <SHT2x_Init>:
	
/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 8006708:	4a04      	ldr	r2, [pc, #16]	@ (800671c <SHT2x_Init+0x1c>)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6013      	str	r3, [r2, #0]
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	20000574 	.word	0x20000574

08006720 <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 8006726:	23e7      	movs	r3, #231	@ 0xe7
 8006728:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 800672a:	4b0c      	ldr	r3, [pc, #48]	@ (800675c <SHT2x_ReadUserReg+0x3c>)
 800672c:	6818      	ldr	r0, [r3, #0]
 800672e:	1dba      	adds	r2, r7, #6
 8006730:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	2301      	movs	r3, #1
 8006738:	2180      	movs	r1, #128	@ 0x80
 800673a:	f7fc fa6b 	bl	8002c14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 800673e:	4b07      	ldr	r3, [pc, #28]	@ (800675c <SHT2x_ReadUserReg+0x3c>)
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	1dfa      	adds	r2, r7, #7
 8006744:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	2301      	movs	r3, #1
 800674c:	2180      	movs	r1, #128	@ 0x80
 800674e:	f7fc fb5f 	bl	8002e10 <HAL_I2C_Master_Receive>
	return val;
 8006752:	79fb      	ldrb	r3, [r7, #7]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	20000574 	.word	0x20000574

08006760 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af02      	add	r7, sp, #8
 8006766:	4603      	mov	r3, r0
 8006768:	71fb      	strb	r3, [r7, #7]
	uint8_t val[3] = { 0 };
 800676a:	4b13      	ldr	r3, [pc, #76]	@ (80067b8 <SHT2x_GetRaw+0x58>)
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	81bb      	strh	r3, [r7, #12]
 8006770:	2300      	movs	r3, #0
 8006772:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8006774:	4b11      	ldr	r3, [pc, #68]	@ (80067bc <SHT2x_GetRaw+0x5c>)
 8006776:	6818      	ldr	r0, [r3, #0]
 8006778:	1dfa      	adds	r2, r7, #7
 800677a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	2301      	movs	r3, #1
 8006782:	2180      	movs	r1, #128	@ 0x80
 8006784:	f7fc fa46 	bl	8002c14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 8006788:	4b0c      	ldr	r3, [pc, #48]	@ (80067bc <SHT2x_GetRaw+0x5c>)
 800678a:	6818      	ldr	r0, [r3, #0]
 800678c:	f107 020c 	add.w	r2, r7, #12
 8006790:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	2303      	movs	r3, #3
 8006798:	2180      	movs	r1, #128	@ 0x80
 800679a:	f7fc fb39 	bl	8002e10 <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 800679e:	7b3b      	ldrb	r3, [r7, #12]
 80067a0:	021b      	lsls	r3, r3, #8
 80067a2:	b21a      	sxth	r2, r3
 80067a4:	7b7b      	ldrb	r3, [r7, #13]
 80067a6:	b21b      	sxth	r3, r3
 80067a8:	4313      	orrs	r3, r2
 80067aa:	b21b      	sxth	r3, r3
 80067ac:	b29b      	uxth	r3, r3
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	08009cc8 	.word	0x08009cc8
 80067bc:	20000574 	.word	0x20000574

080067c0 <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	4603      	mov	r3, r0
 80067c8:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 80067ca:	79fb      	ldrb	r3, [r7, #7]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <SHT2x_GetTemperature+0x14>
 80067d0:	23e3      	movs	r3, #227	@ 0xe3
 80067d2:	e000      	b.n	80067d6 <SHT2x_GetTemperature+0x16>
 80067d4:	23f3      	movs	r3, #243	@ 0xf3
 80067d6:	73fb      	strb	r3, [r7, #15]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff ffc0 	bl	8006760 <SHT2x_GetRaw>
 80067e0:	4603      	mov	r3, r0
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7f9 feb6 	bl	8000554 <__aeabi_i2d>
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	4b16      	ldr	r3, [pc, #88]	@ (8006848 <SHT2x_GetTemperature+0x88>)
 80067ee:	f7fa f845 	bl	800087c <__aeabi_ddiv>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4610      	mov	r0, r2
 80067f8:	4619      	mov	r1, r3
 80067fa:	a30f      	add	r3, pc, #60	@ (adr r3, 8006838 <SHT2x_GetTemperature+0x78>)
 80067fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006800:	f7f9 ff12 	bl	8000628 <__aeabi_dmul>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4610      	mov	r0, r2
 800680a:	4619      	mov	r1, r3
 800680c:	a30c      	add	r3, pc, #48	@ (adr r3, 8006840 <SHT2x_GetTemperature+0x80>)
 800680e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006812:	f7f9 fd51 	bl	80002b8 <__aeabi_dsub>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4610      	mov	r0, r2
 800681c:	4619      	mov	r1, r3
 800681e:	f7fa f9db 	bl	8000bd8 <__aeabi_d2f>
 8006822:	4603      	mov	r3, r0
 8006824:	ee07 3a90 	vmov	s15, r3
}
 8006828:	eeb0 0a67 	vmov.f32	s0, s15
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	f3af 8000 	nop.w
 8006838:	3d70a3d7 	.word	0x3d70a3d7
 800683c:	4065f70a 	.word	0x4065f70a
 8006840:	cccccccd 	.word	0xcccccccd
 8006844:	40476ccc 	.word	0x40476ccc
 8006848:	40f00000 	.word	0x40f00000

0800684c <SHT2x_GetRelativeHumidity>:
/**
 * @brief Measures and gets the current relative humidity.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point relative humidity value.
 */
float SHT2x_GetRelativeHumidity(uint8_t hold) {
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	4603      	mov	r3, r0
 8006854:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_RH_HOLD : SHT2x_READ_RH_NOHOLD);
 8006856:	79fb      	ldrb	r3, [r7, #7]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <SHT2x_GetRelativeHumidity+0x14>
 800685c:	23e5      	movs	r3, #229	@ 0xe5
 800685e:	e000      	b.n	8006862 <SHT2x_GetRelativeHumidity+0x16>
 8006860:	23f5      	movs	r3, #245	@ 0xf5
 8006862:	73fb      	strb	r3, [r7, #15]
	return -6 + 125.00 * (SHT2x_GetRaw(cmd) / 65536.0);
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff ff7a 	bl	8006760 <SHT2x_GetRaw>
 800686c:	4603      	mov	r3, r0
 800686e:	4618      	mov	r0, r3
 8006870:	f7f9 fe70 	bl	8000554 <__aeabi_i2d>
 8006874:	f04f 0200 	mov.w	r2, #0
 8006878:	4b11      	ldr	r3, [pc, #68]	@ (80068c0 <SHT2x_GetRelativeHumidity+0x74>)
 800687a:	f7f9 ffff 	bl	800087c <__aeabi_ddiv>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4610      	mov	r0, r2
 8006884:	4619      	mov	r1, r3
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	4b0e      	ldr	r3, [pc, #56]	@ (80068c4 <SHT2x_GetRelativeHumidity+0x78>)
 800688c:	f7f9 fecc 	bl	8000628 <__aeabi_dmul>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	4610      	mov	r0, r2
 8006896:	4619      	mov	r1, r3
 8006898:	f04f 0200 	mov.w	r2, #0
 800689c:	4b0a      	ldr	r3, [pc, #40]	@ (80068c8 <SHT2x_GetRelativeHumidity+0x7c>)
 800689e:	f7f9 fd0b 	bl	80002b8 <__aeabi_dsub>
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	4610      	mov	r0, r2
 80068a8:	4619      	mov	r1, r3
 80068aa:	f7fa f995 	bl	8000bd8 <__aeabi_d2f>
 80068ae:	4603      	mov	r3, r0
 80068b0:	ee07 3a90 	vmov	s15, r3
}
 80068b4:	eeb0 0a67 	vmov.f32	s0, s15
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	40f00000 	.word	0x40f00000
 80068c4:	405f4000 	.word	0x405f4000
 80068c8:	40180000 	.word	0x40180000

080068cc <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14-bit temperature and 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	4603      	mov	r3, r0
 80068d4:	71fb      	strb	r3, [r7, #7]
	uint8_t val = SHT2x_ReadUserReg();
 80068d6:	f7ff ff23 	bl	8006720 <SHT2x_ReadUserReg>
 80068da:	4603      	mov	r3, r0
 80068dc:	73fb      	strb	r3, [r7, #15]
	val = (val & 0x7e) | res;
 80068de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068e2:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80068e6:	b25a      	sxtb	r2, r3
 80068e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	b25b      	sxtb	r3, r3
 80068f0:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 80068f2:	23e6      	movs	r3, #230	@ 0xe6
 80068f4:	733b      	strb	r3, [r7, #12]
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
 80068f8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 80068fa:	4b07      	ldr	r3, [pc, #28]	@ (8006918 <SHT2x_SetResolution+0x4c>)
 80068fc:	6818      	ldr	r0, [r3, #0]
 80068fe:	f107 020c 	add.w	r2, r7, #12
 8006902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	2302      	movs	r3, #2
 800690a:	2180      	movs	r1, #128	@ 0x80
 800690c:	f7fc f982 	bl	8002c14 <HAL_I2C_Master_Transmit>
}
 8006910:	bf00      	nop
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	20000574 	.word	0x20000574

0800691c <HAL_UART_RxCpltCallback>:
static UART_HandleTypeDef *uart;
uint8_t data_rx;
uint8_t buff_rx[BUFFER_DATA];
uint8_t index_rx=0;
uint8_t flag_rx=0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
   if(huart->Instance == uart->Instance){
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	4b12      	ldr	r3, [pc, #72]	@ (8006974 <HAL_UART_RxCpltCallback+0x58>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d11b      	bne.n	800696a <HAL_UART_RxCpltCallback+0x4e>
	    buff_rx[index_rx++]=data_rx;
 8006932:	4b11      	ldr	r3, [pc, #68]	@ (8006978 <HAL_UART_RxCpltCallback+0x5c>)
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	b2d1      	uxtb	r1, r2
 800693a:	4a0f      	ldr	r2, [pc, #60]	@ (8006978 <HAL_UART_RxCpltCallback+0x5c>)
 800693c:	7011      	strb	r1, [r2, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	4b0e      	ldr	r3, [pc, #56]	@ (800697c <HAL_UART_RxCpltCallback+0x60>)
 8006942:	7819      	ldrb	r1, [r3, #0]
 8006944:	4b0e      	ldr	r3, [pc, #56]	@ (8006980 <HAL_UART_RxCpltCallback+0x64>)
 8006946:	5499      	strb	r1, [r3, r2]
		  if(data_rx == '\n'){
 8006948:	4b0c      	ldr	r3, [pc, #48]	@ (800697c <HAL_UART_RxCpltCallback+0x60>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b0a      	cmp	r3, #10
 800694e:	d105      	bne.n	800695c <HAL_UART_RxCpltCallback+0x40>
			  data_rx=1;
 8006950:	4b0a      	ldr	r3, [pc, #40]	@ (800697c <HAL_UART_RxCpltCallback+0x60>)
 8006952:	2201      	movs	r2, #1
 8006954:	701a      	strb	r2, [r3, #0]
			  flag_rx=1;
 8006956:	4b0b      	ldr	r3, [pc, #44]	@ (8006984 <HAL_UART_RxCpltCallback+0x68>)
 8006958:	2201      	movs	r2, #1
 800695a:	701a      	strb	r2, [r3, #0]
			}
	 HAL_UART_Receive_IT(uart,&data_rx,1);
 800695c:	4b05      	ldr	r3, [pc, #20]	@ (8006974 <HAL_UART_RxCpltCallback+0x58>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2201      	movs	r2, #1
 8006962:	4906      	ldr	r1, [pc, #24]	@ (800697c <HAL_UART_RxCpltCallback+0x60>)
 8006964:	4618      	mov	r0, r3
 8006966:	f7fe f9e6 	bl	8004d36 <HAL_UART_Receive_IT>
	 }
 
 }
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000578 	.word	0x20000578
 8006978:	20000600 	.word	0x20000600
 800697c:	2000057c 	.word	0x2000057c
 8006980:	20000580 	.word	0x20000580
 8006984:	20000601 	.word	0x20000601

08006988 <uart_handel>:
void uart_handel(){
 8006988:	b580      	push	{r7, lr}
 800698a:	af00      	add	r7, sp, #0
  if(flag_rx==1){
 800698c:	4b0c      	ldr	r3, [pc, #48]	@ (80069c0 <uart_handel+0x38>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d112      	bne.n	80069ba <uart_handel+0x32>
		command_excute((char *)buff_rx,index_rx);
 8006994:	4b0b      	ldr	r3, [pc, #44]	@ (80069c4 <uart_handel+0x3c>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	4619      	mov	r1, r3
 800699a:	480b      	ldr	r0, [pc, #44]	@ (80069c8 <uart_handel+0x40>)
 800699c:	f7ff fb38 	bl	8006010 <command_excute>
		memset(buff_rx,0,index_rx);
 80069a0:	4b08      	ldr	r3, [pc, #32]	@ (80069c4 <uart_handel+0x3c>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	461a      	mov	r2, r3
 80069a6:	2100      	movs	r1, #0
 80069a8:	4807      	ldr	r0, [pc, #28]	@ (80069c8 <uart_handel+0x40>)
 80069aa:	f000 fe4b 	bl	8007644 <memset>
		index_rx=0;
 80069ae:	4b05      	ldr	r3, [pc, #20]	@ (80069c4 <uart_handel+0x3c>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	701a      	strb	r2, [r3, #0]
		flag_rx=0;
 80069b4:	4b02      	ldr	r3, [pc, #8]	@ (80069c0 <uart_handel+0x38>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	701a      	strb	r2, [r3, #0]
	}
}
 80069ba:	bf00      	nop
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000601 	.word	0x20000601
 80069c4:	20000600 	.word	0x20000600
 80069c8:	20000580 	.word	0x20000580

080069cc <uart_init>:
void uart_init(UART_HandleTypeDef *huart){
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
	uart = huart;
 80069d4:	4a06      	ldr	r2, [pc, #24]	@ (80069f0 <uart_init+0x24>)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_IT(uart,&data_rx,1);
 80069da:	4b05      	ldr	r3, [pc, #20]	@ (80069f0 <uart_init+0x24>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2201      	movs	r2, #1
 80069e0:	4904      	ldr	r1, [pc, #16]	@ (80069f4 <uart_init+0x28>)
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe f9a7 	bl	8004d36 <HAL_UART_Receive_IT>
}
 80069e8:	bf00      	nop
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	20000578 	.word	0x20000578
 80069f4:	2000057c 	.word	0x2000057c

080069f8 <atoi>:
 80069f8:	220a      	movs	r2, #10
 80069fa:	2100      	movs	r1, #0
 80069fc:	f000 b87a 	b.w	8006af4 <strtol>

08006a00 <_strtol_l.constprop.0>:
 8006a00:	2b24      	cmp	r3, #36	@ 0x24
 8006a02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a06:	4686      	mov	lr, r0
 8006a08:	4690      	mov	r8, r2
 8006a0a:	d801      	bhi.n	8006a10 <_strtol_l.constprop.0+0x10>
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d106      	bne.n	8006a1e <_strtol_l.constprop.0+0x1e>
 8006a10:	f000 fec6 	bl	80077a0 <__errno>
 8006a14:	2316      	movs	r3, #22
 8006a16:	6003      	str	r3, [r0, #0]
 8006a18:	2000      	movs	r0, #0
 8006a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a1e:	4834      	ldr	r0, [pc, #208]	@ (8006af0 <_strtol_l.constprop.0+0xf0>)
 8006a20:	460d      	mov	r5, r1
 8006a22:	462a      	mov	r2, r5
 8006a24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a28:	5d06      	ldrb	r6, [r0, r4]
 8006a2a:	f016 0608 	ands.w	r6, r6, #8
 8006a2e:	d1f8      	bne.n	8006a22 <_strtol_l.constprop.0+0x22>
 8006a30:	2c2d      	cmp	r4, #45	@ 0x2d
 8006a32:	d12d      	bne.n	8006a90 <_strtol_l.constprop.0+0x90>
 8006a34:	782c      	ldrb	r4, [r5, #0]
 8006a36:	2601      	movs	r6, #1
 8006a38:	1c95      	adds	r5, r2, #2
 8006a3a:	f033 0210 	bics.w	r2, r3, #16
 8006a3e:	d109      	bne.n	8006a54 <_strtol_l.constprop.0+0x54>
 8006a40:	2c30      	cmp	r4, #48	@ 0x30
 8006a42:	d12a      	bne.n	8006a9a <_strtol_l.constprop.0+0x9a>
 8006a44:	782a      	ldrb	r2, [r5, #0]
 8006a46:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006a4a:	2a58      	cmp	r2, #88	@ 0x58
 8006a4c:	d125      	bne.n	8006a9a <_strtol_l.constprop.0+0x9a>
 8006a4e:	786c      	ldrb	r4, [r5, #1]
 8006a50:	2310      	movs	r3, #16
 8006a52:	3502      	adds	r5, #2
 8006a54:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006a58:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	fbbc f9f3 	udiv	r9, ip, r3
 8006a62:	4610      	mov	r0, r2
 8006a64:	fb03 ca19 	mls	sl, r3, r9, ip
 8006a68:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006a6c:	2f09      	cmp	r7, #9
 8006a6e:	d81b      	bhi.n	8006aa8 <_strtol_l.constprop.0+0xa8>
 8006a70:	463c      	mov	r4, r7
 8006a72:	42a3      	cmp	r3, r4
 8006a74:	dd27      	ble.n	8006ac6 <_strtol_l.constprop.0+0xc6>
 8006a76:	1c57      	adds	r7, r2, #1
 8006a78:	d007      	beq.n	8006a8a <_strtol_l.constprop.0+0x8a>
 8006a7a:	4581      	cmp	r9, r0
 8006a7c:	d320      	bcc.n	8006ac0 <_strtol_l.constprop.0+0xc0>
 8006a7e:	d101      	bne.n	8006a84 <_strtol_l.constprop.0+0x84>
 8006a80:	45a2      	cmp	sl, r4
 8006a82:	db1d      	blt.n	8006ac0 <_strtol_l.constprop.0+0xc0>
 8006a84:	fb00 4003 	mla	r0, r0, r3, r4
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a8e:	e7eb      	b.n	8006a68 <_strtol_l.constprop.0+0x68>
 8006a90:	2c2b      	cmp	r4, #43	@ 0x2b
 8006a92:	bf04      	itt	eq
 8006a94:	782c      	ldrbeq	r4, [r5, #0]
 8006a96:	1c95      	addeq	r5, r2, #2
 8006a98:	e7cf      	b.n	8006a3a <_strtol_l.constprop.0+0x3a>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1da      	bne.n	8006a54 <_strtol_l.constprop.0+0x54>
 8006a9e:	2c30      	cmp	r4, #48	@ 0x30
 8006aa0:	bf0c      	ite	eq
 8006aa2:	2308      	moveq	r3, #8
 8006aa4:	230a      	movne	r3, #10
 8006aa6:	e7d5      	b.n	8006a54 <_strtol_l.constprop.0+0x54>
 8006aa8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006aac:	2f19      	cmp	r7, #25
 8006aae:	d801      	bhi.n	8006ab4 <_strtol_l.constprop.0+0xb4>
 8006ab0:	3c37      	subs	r4, #55	@ 0x37
 8006ab2:	e7de      	b.n	8006a72 <_strtol_l.constprop.0+0x72>
 8006ab4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006ab8:	2f19      	cmp	r7, #25
 8006aba:	d804      	bhi.n	8006ac6 <_strtol_l.constprop.0+0xc6>
 8006abc:	3c57      	subs	r4, #87	@ 0x57
 8006abe:	e7d8      	b.n	8006a72 <_strtol_l.constprop.0+0x72>
 8006ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac4:	e7e1      	b.n	8006a8a <_strtol_l.constprop.0+0x8a>
 8006ac6:	1c53      	adds	r3, r2, #1
 8006ac8:	d108      	bne.n	8006adc <_strtol_l.constprop.0+0xdc>
 8006aca:	2322      	movs	r3, #34	@ 0x22
 8006acc:	f8ce 3000 	str.w	r3, [lr]
 8006ad0:	4660      	mov	r0, ip
 8006ad2:	f1b8 0f00 	cmp.w	r8, #0
 8006ad6:	d0a0      	beq.n	8006a1a <_strtol_l.constprop.0+0x1a>
 8006ad8:	1e69      	subs	r1, r5, #1
 8006ada:	e006      	b.n	8006aea <_strtol_l.constprop.0+0xea>
 8006adc:	b106      	cbz	r6, 8006ae0 <_strtol_l.constprop.0+0xe0>
 8006ade:	4240      	negs	r0, r0
 8006ae0:	f1b8 0f00 	cmp.w	r8, #0
 8006ae4:	d099      	beq.n	8006a1a <_strtol_l.constprop.0+0x1a>
 8006ae6:	2a00      	cmp	r2, #0
 8006ae8:	d1f6      	bne.n	8006ad8 <_strtol_l.constprop.0+0xd8>
 8006aea:	f8c8 1000 	str.w	r1, [r8]
 8006aee:	e794      	b.n	8006a1a <_strtol_l.constprop.0+0x1a>
 8006af0:	08009ce5 	.word	0x08009ce5

08006af4 <strtol>:
 8006af4:	4613      	mov	r3, r2
 8006af6:	460a      	mov	r2, r1
 8006af8:	4601      	mov	r1, r0
 8006afa:	4802      	ldr	r0, [pc, #8]	@ (8006b04 <strtol+0x10>)
 8006afc:	6800      	ldr	r0, [r0, #0]
 8006afe:	f7ff bf7f 	b.w	8006a00 <_strtol_l.constprop.0>
 8006b02:	bf00      	nop
 8006b04:	2000009c 	.word	0x2000009c

08006b08 <__cvt>:
 8006b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b0c:	ec57 6b10 	vmov	r6, r7, d0
 8006b10:	2f00      	cmp	r7, #0
 8006b12:	460c      	mov	r4, r1
 8006b14:	4619      	mov	r1, r3
 8006b16:	463b      	mov	r3, r7
 8006b18:	bfbb      	ittet	lt
 8006b1a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006b1e:	461f      	movlt	r7, r3
 8006b20:	2300      	movge	r3, #0
 8006b22:	232d      	movlt	r3, #45	@ 0x2d
 8006b24:	700b      	strb	r3, [r1, #0]
 8006b26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b28:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006b2c:	4691      	mov	r9, r2
 8006b2e:	f023 0820 	bic.w	r8, r3, #32
 8006b32:	bfbc      	itt	lt
 8006b34:	4632      	movlt	r2, r6
 8006b36:	4616      	movlt	r6, r2
 8006b38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b3c:	d005      	beq.n	8006b4a <__cvt+0x42>
 8006b3e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006b42:	d100      	bne.n	8006b46 <__cvt+0x3e>
 8006b44:	3401      	adds	r4, #1
 8006b46:	2102      	movs	r1, #2
 8006b48:	e000      	b.n	8006b4c <__cvt+0x44>
 8006b4a:	2103      	movs	r1, #3
 8006b4c:	ab03      	add	r3, sp, #12
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	ab02      	add	r3, sp, #8
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	ec47 6b10 	vmov	d0, r6, r7
 8006b58:	4653      	mov	r3, sl
 8006b5a:	4622      	mov	r2, r4
 8006b5c:	f000 fef4 	bl	8007948 <_dtoa_r>
 8006b60:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006b64:	4605      	mov	r5, r0
 8006b66:	d119      	bne.n	8006b9c <__cvt+0x94>
 8006b68:	f019 0f01 	tst.w	r9, #1
 8006b6c:	d00e      	beq.n	8006b8c <__cvt+0x84>
 8006b6e:	eb00 0904 	add.w	r9, r0, r4
 8006b72:	2200      	movs	r2, #0
 8006b74:	2300      	movs	r3, #0
 8006b76:	4630      	mov	r0, r6
 8006b78:	4639      	mov	r1, r7
 8006b7a:	f7f9 ffbd 	bl	8000af8 <__aeabi_dcmpeq>
 8006b7e:	b108      	cbz	r0, 8006b84 <__cvt+0x7c>
 8006b80:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b84:	2230      	movs	r2, #48	@ 0x30
 8006b86:	9b03      	ldr	r3, [sp, #12]
 8006b88:	454b      	cmp	r3, r9
 8006b8a:	d31e      	bcc.n	8006bca <__cvt+0xc2>
 8006b8c:	9b03      	ldr	r3, [sp, #12]
 8006b8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b90:	1b5b      	subs	r3, r3, r5
 8006b92:	4628      	mov	r0, r5
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	b004      	add	sp, #16
 8006b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ba0:	eb00 0904 	add.w	r9, r0, r4
 8006ba4:	d1e5      	bne.n	8006b72 <__cvt+0x6a>
 8006ba6:	7803      	ldrb	r3, [r0, #0]
 8006ba8:	2b30      	cmp	r3, #48	@ 0x30
 8006baa:	d10a      	bne.n	8006bc2 <__cvt+0xba>
 8006bac:	2200      	movs	r2, #0
 8006bae:	2300      	movs	r3, #0
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	4639      	mov	r1, r7
 8006bb4:	f7f9 ffa0 	bl	8000af8 <__aeabi_dcmpeq>
 8006bb8:	b918      	cbnz	r0, 8006bc2 <__cvt+0xba>
 8006bba:	f1c4 0401 	rsb	r4, r4, #1
 8006bbe:	f8ca 4000 	str.w	r4, [sl]
 8006bc2:	f8da 3000 	ldr.w	r3, [sl]
 8006bc6:	4499      	add	r9, r3
 8006bc8:	e7d3      	b.n	8006b72 <__cvt+0x6a>
 8006bca:	1c59      	adds	r1, r3, #1
 8006bcc:	9103      	str	r1, [sp, #12]
 8006bce:	701a      	strb	r2, [r3, #0]
 8006bd0:	e7d9      	b.n	8006b86 <__cvt+0x7e>

08006bd2 <__exponent>:
 8006bd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bd4:	2900      	cmp	r1, #0
 8006bd6:	bfba      	itte	lt
 8006bd8:	4249      	neglt	r1, r1
 8006bda:	232d      	movlt	r3, #45	@ 0x2d
 8006bdc:	232b      	movge	r3, #43	@ 0x2b
 8006bde:	2909      	cmp	r1, #9
 8006be0:	7002      	strb	r2, [r0, #0]
 8006be2:	7043      	strb	r3, [r0, #1]
 8006be4:	dd29      	ble.n	8006c3a <__exponent+0x68>
 8006be6:	f10d 0307 	add.w	r3, sp, #7
 8006bea:	461d      	mov	r5, r3
 8006bec:	270a      	movs	r7, #10
 8006bee:	461a      	mov	r2, r3
 8006bf0:	fbb1 f6f7 	udiv	r6, r1, r7
 8006bf4:	fb07 1416 	mls	r4, r7, r6, r1
 8006bf8:	3430      	adds	r4, #48	@ 0x30
 8006bfa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006bfe:	460c      	mov	r4, r1
 8006c00:	2c63      	cmp	r4, #99	@ 0x63
 8006c02:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c06:	4631      	mov	r1, r6
 8006c08:	dcf1      	bgt.n	8006bee <__exponent+0x1c>
 8006c0a:	3130      	adds	r1, #48	@ 0x30
 8006c0c:	1e94      	subs	r4, r2, #2
 8006c0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006c12:	1c41      	adds	r1, r0, #1
 8006c14:	4623      	mov	r3, r4
 8006c16:	42ab      	cmp	r3, r5
 8006c18:	d30a      	bcc.n	8006c30 <__exponent+0x5e>
 8006c1a:	f10d 0309 	add.w	r3, sp, #9
 8006c1e:	1a9b      	subs	r3, r3, r2
 8006c20:	42ac      	cmp	r4, r5
 8006c22:	bf88      	it	hi
 8006c24:	2300      	movhi	r3, #0
 8006c26:	3302      	adds	r3, #2
 8006c28:	4403      	add	r3, r0
 8006c2a:	1a18      	subs	r0, r3, r0
 8006c2c:	b003      	add	sp, #12
 8006c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c30:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006c34:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006c38:	e7ed      	b.n	8006c16 <__exponent+0x44>
 8006c3a:	2330      	movs	r3, #48	@ 0x30
 8006c3c:	3130      	adds	r1, #48	@ 0x30
 8006c3e:	7083      	strb	r3, [r0, #2]
 8006c40:	70c1      	strb	r1, [r0, #3]
 8006c42:	1d03      	adds	r3, r0, #4
 8006c44:	e7f1      	b.n	8006c2a <__exponent+0x58>
	...

08006c48 <_printf_float>:
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	b08d      	sub	sp, #52	@ 0x34
 8006c4e:	460c      	mov	r4, r1
 8006c50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006c54:	4616      	mov	r6, r2
 8006c56:	461f      	mov	r7, r3
 8006c58:	4605      	mov	r5, r0
 8006c5a:	f000 fd57 	bl	800770c <_localeconv_r>
 8006c5e:	6803      	ldr	r3, [r0, #0]
 8006c60:	9304      	str	r3, [sp, #16]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7f9 fb1c 	bl	80002a0 <strlen>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c70:	9005      	str	r0, [sp, #20]
 8006c72:	3307      	adds	r3, #7
 8006c74:	f023 0307 	bic.w	r3, r3, #7
 8006c78:	f103 0208 	add.w	r2, r3, #8
 8006c7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006c80:	f8d4 b000 	ldr.w	fp, [r4]
 8006c84:	f8c8 2000 	str.w	r2, [r8]
 8006c88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006c90:	9307      	str	r3, [sp, #28]
 8006c92:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006c9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c9e:	4b9c      	ldr	r3, [pc, #624]	@ (8006f10 <_printf_float+0x2c8>)
 8006ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca4:	f7f9 ff5a 	bl	8000b5c <__aeabi_dcmpun>
 8006ca8:	bb70      	cbnz	r0, 8006d08 <_printf_float+0xc0>
 8006caa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cae:	4b98      	ldr	r3, [pc, #608]	@ (8006f10 <_printf_float+0x2c8>)
 8006cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb4:	f7f9 ff34 	bl	8000b20 <__aeabi_dcmple>
 8006cb8:	bb30      	cbnz	r0, 8006d08 <_printf_float+0xc0>
 8006cba:	2200      	movs	r2, #0
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	4640      	mov	r0, r8
 8006cc0:	4649      	mov	r1, r9
 8006cc2:	f7f9 ff23 	bl	8000b0c <__aeabi_dcmplt>
 8006cc6:	b110      	cbz	r0, 8006cce <_printf_float+0x86>
 8006cc8:	232d      	movs	r3, #45	@ 0x2d
 8006cca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cce:	4a91      	ldr	r2, [pc, #580]	@ (8006f14 <_printf_float+0x2cc>)
 8006cd0:	4b91      	ldr	r3, [pc, #580]	@ (8006f18 <_printf_float+0x2d0>)
 8006cd2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006cd6:	bf94      	ite	ls
 8006cd8:	4690      	movls	r8, r2
 8006cda:	4698      	movhi	r8, r3
 8006cdc:	2303      	movs	r3, #3
 8006cde:	6123      	str	r3, [r4, #16]
 8006ce0:	f02b 0304 	bic.w	r3, fp, #4
 8006ce4:	6023      	str	r3, [r4, #0]
 8006ce6:	f04f 0900 	mov.w	r9, #0
 8006cea:	9700      	str	r7, [sp, #0]
 8006cec:	4633      	mov	r3, r6
 8006cee:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f000 f9d2 	bl	800709c <_printf_common>
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	f040 808d 	bne.w	8006e18 <_printf_float+0x1d0>
 8006cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8006d02:	b00d      	add	sp, #52	@ 0x34
 8006d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d08:	4642      	mov	r2, r8
 8006d0a:	464b      	mov	r3, r9
 8006d0c:	4640      	mov	r0, r8
 8006d0e:	4649      	mov	r1, r9
 8006d10:	f7f9 ff24 	bl	8000b5c <__aeabi_dcmpun>
 8006d14:	b140      	cbz	r0, 8006d28 <_printf_float+0xe0>
 8006d16:	464b      	mov	r3, r9
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	bfbc      	itt	lt
 8006d1c:	232d      	movlt	r3, #45	@ 0x2d
 8006d1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006d22:	4a7e      	ldr	r2, [pc, #504]	@ (8006f1c <_printf_float+0x2d4>)
 8006d24:	4b7e      	ldr	r3, [pc, #504]	@ (8006f20 <_printf_float+0x2d8>)
 8006d26:	e7d4      	b.n	8006cd2 <_printf_float+0x8a>
 8006d28:	6863      	ldr	r3, [r4, #4]
 8006d2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006d2e:	9206      	str	r2, [sp, #24]
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	d13b      	bne.n	8006dac <_printf_float+0x164>
 8006d34:	2306      	movs	r3, #6
 8006d36:	6063      	str	r3, [r4, #4]
 8006d38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	6022      	str	r2, [r4, #0]
 8006d40:	9303      	str	r3, [sp, #12]
 8006d42:	ab0a      	add	r3, sp, #40	@ 0x28
 8006d44:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006d48:	ab09      	add	r3, sp, #36	@ 0x24
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	6861      	ldr	r1, [r4, #4]
 8006d4e:	ec49 8b10 	vmov	d0, r8, r9
 8006d52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006d56:	4628      	mov	r0, r5
 8006d58:	f7ff fed6 	bl	8006b08 <__cvt>
 8006d5c:	9b06      	ldr	r3, [sp, #24]
 8006d5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d60:	2b47      	cmp	r3, #71	@ 0x47
 8006d62:	4680      	mov	r8, r0
 8006d64:	d129      	bne.n	8006dba <_printf_float+0x172>
 8006d66:	1cc8      	adds	r0, r1, #3
 8006d68:	db02      	blt.n	8006d70 <_printf_float+0x128>
 8006d6a:	6863      	ldr	r3, [r4, #4]
 8006d6c:	4299      	cmp	r1, r3
 8006d6e:	dd41      	ble.n	8006df4 <_printf_float+0x1ac>
 8006d70:	f1aa 0a02 	sub.w	sl, sl, #2
 8006d74:	fa5f fa8a 	uxtb.w	sl, sl
 8006d78:	3901      	subs	r1, #1
 8006d7a:	4652      	mov	r2, sl
 8006d7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006d80:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d82:	f7ff ff26 	bl	8006bd2 <__exponent>
 8006d86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d88:	1813      	adds	r3, r2, r0
 8006d8a:	2a01      	cmp	r2, #1
 8006d8c:	4681      	mov	r9, r0
 8006d8e:	6123      	str	r3, [r4, #16]
 8006d90:	dc02      	bgt.n	8006d98 <_printf_float+0x150>
 8006d92:	6822      	ldr	r2, [r4, #0]
 8006d94:	07d2      	lsls	r2, r2, #31
 8006d96:	d501      	bpl.n	8006d9c <_printf_float+0x154>
 8006d98:	3301      	adds	r3, #1
 8006d9a:	6123      	str	r3, [r4, #16]
 8006d9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0a2      	beq.n	8006cea <_printf_float+0xa2>
 8006da4:	232d      	movs	r3, #45	@ 0x2d
 8006da6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006daa:	e79e      	b.n	8006cea <_printf_float+0xa2>
 8006dac:	9a06      	ldr	r2, [sp, #24]
 8006dae:	2a47      	cmp	r2, #71	@ 0x47
 8006db0:	d1c2      	bne.n	8006d38 <_printf_float+0xf0>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1c0      	bne.n	8006d38 <_printf_float+0xf0>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e7bd      	b.n	8006d36 <_printf_float+0xee>
 8006dba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006dbe:	d9db      	bls.n	8006d78 <_printf_float+0x130>
 8006dc0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006dc4:	d118      	bne.n	8006df8 <_printf_float+0x1b0>
 8006dc6:	2900      	cmp	r1, #0
 8006dc8:	6863      	ldr	r3, [r4, #4]
 8006dca:	dd0b      	ble.n	8006de4 <_printf_float+0x19c>
 8006dcc:	6121      	str	r1, [r4, #16]
 8006dce:	b913      	cbnz	r3, 8006dd6 <_printf_float+0x18e>
 8006dd0:	6822      	ldr	r2, [r4, #0]
 8006dd2:	07d0      	lsls	r0, r2, #31
 8006dd4:	d502      	bpl.n	8006ddc <_printf_float+0x194>
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	440b      	add	r3, r1
 8006dda:	6123      	str	r3, [r4, #16]
 8006ddc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006dde:	f04f 0900 	mov.w	r9, #0
 8006de2:	e7db      	b.n	8006d9c <_printf_float+0x154>
 8006de4:	b913      	cbnz	r3, 8006dec <_printf_float+0x1a4>
 8006de6:	6822      	ldr	r2, [r4, #0]
 8006de8:	07d2      	lsls	r2, r2, #31
 8006dea:	d501      	bpl.n	8006df0 <_printf_float+0x1a8>
 8006dec:	3302      	adds	r3, #2
 8006dee:	e7f4      	b.n	8006dda <_printf_float+0x192>
 8006df0:	2301      	movs	r3, #1
 8006df2:	e7f2      	b.n	8006dda <_printf_float+0x192>
 8006df4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006df8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dfa:	4299      	cmp	r1, r3
 8006dfc:	db05      	blt.n	8006e0a <_printf_float+0x1c2>
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	6121      	str	r1, [r4, #16]
 8006e02:	07d8      	lsls	r0, r3, #31
 8006e04:	d5ea      	bpl.n	8006ddc <_printf_float+0x194>
 8006e06:	1c4b      	adds	r3, r1, #1
 8006e08:	e7e7      	b.n	8006dda <_printf_float+0x192>
 8006e0a:	2900      	cmp	r1, #0
 8006e0c:	bfd4      	ite	le
 8006e0e:	f1c1 0202 	rsble	r2, r1, #2
 8006e12:	2201      	movgt	r2, #1
 8006e14:	4413      	add	r3, r2
 8006e16:	e7e0      	b.n	8006dda <_printf_float+0x192>
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	055a      	lsls	r2, r3, #21
 8006e1c:	d407      	bmi.n	8006e2e <_printf_float+0x1e6>
 8006e1e:	6923      	ldr	r3, [r4, #16]
 8006e20:	4642      	mov	r2, r8
 8006e22:	4631      	mov	r1, r6
 8006e24:	4628      	mov	r0, r5
 8006e26:	47b8      	blx	r7
 8006e28:	3001      	adds	r0, #1
 8006e2a:	d12b      	bne.n	8006e84 <_printf_float+0x23c>
 8006e2c:	e767      	b.n	8006cfe <_printf_float+0xb6>
 8006e2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e32:	f240 80dd 	bls.w	8006ff0 <_printf_float+0x3a8>
 8006e36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f7f9 fe5b 	bl	8000af8 <__aeabi_dcmpeq>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d033      	beq.n	8006eae <_printf_float+0x266>
 8006e46:	4a37      	ldr	r2, [pc, #220]	@ (8006f24 <_printf_float+0x2dc>)
 8006e48:	2301      	movs	r3, #1
 8006e4a:	4631      	mov	r1, r6
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	47b8      	blx	r7
 8006e50:	3001      	adds	r0, #1
 8006e52:	f43f af54 	beq.w	8006cfe <_printf_float+0xb6>
 8006e56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006e5a:	4543      	cmp	r3, r8
 8006e5c:	db02      	blt.n	8006e64 <_printf_float+0x21c>
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	07d8      	lsls	r0, r3, #31
 8006e62:	d50f      	bpl.n	8006e84 <_printf_float+0x23c>
 8006e64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	47b8      	blx	r7
 8006e6e:	3001      	adds	r0, #1
 8006e70:	f43f af45 	beq.w	8006cfe <_printf_float+0xb6>
 8006e74:	f04f 0900 	mov.w	r9, #0
 8006e78:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e7c:	f104 0a1a 	add.w	sl, r4, #26
 8006e80:	45c8      	cmp	r8, r9
 8006e82:	dc09      	bgt.n	8006e98 <_printf_float+0x250>
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	079b      	lsls	r3, r3, #30
 8006e88:	f100 8103 	bmi.w	8007092 <_printf_float+0x44a>
 8006e8c:	68e0      	ldr	r0, [r4, #12]
 8006e8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e90:	4298      	cmp	r0, r3
 8006e92:	bfb8      	it	lt
 8006e94:	4618      	movlt	r0, r3
 8006e96:	e734      	b.n	8006d02 <_printf_float+0xba>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	4652      	mov	r2, sl
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	47b8      	blx	r7
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	f43f af2b 	beq.w	8006cfe <_printf_float+0xb6>
 8006ea8:	f109 0901 	add.w	r9, r9, #1
 8006eac:	e7e8      	b.n	8006e80 <_printf_float+0x238>
 8006eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	dc39      	bgt.n	8006f28 <_printf_float+0x2e0>
 8006eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8006f24 <_printf_float+0x2dc>)
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	4631      	mov	r1, r6
 8006eba:	4628      	mov	r0, r5
 8006ebc:	47b8      	blx	r7
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	f43f af1d 	beq.w	8006cfe <_printf_float+0xb6>
 8006ec4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006ec8:	ea59 0303 	orrs.w	r3, r9, r3
 8006ecc:	d102      	bne.n	8006ed4 <_printf_float+0x28c>
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	07d9      	lsls	r1, r3, #31
 8006ed2:	d5d7      	bpl.n	8006e84 <_printf_float+0x23c>
 8006ed4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ed8:	4631      	mov	r1, r6
 8006eda:	4628      	mov	r0, r5
 8006edc:	47b8      	blx	r7
 8006ede:	3001      	adds	r0, #1
 8006ee0:	f43f af0d 	beq.w	8006cfe <_printf_float+0xb6>
 8006ee4:	f04f 0a00 	mov.w	sl, #0
 8006ee8:	f104 0b1a 	add.w	fp, r4, #26
 8006eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eee:	425b      	negs	r3, r3
 8006ef0:	4553      	cmp	r3, sl
 8006ef2:	dc01      	bgt.n	8006ef8 <_printf_float+0x2b0>
 8006ef4:	464b      	mov	r3, r9
 8006ef6:	e793      	b.n	8006e20 <_printf_float+0x1d8>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	465a      	mov	r2, fp
 8006efc:	4631      	mov	r1, r6
 8006efe:	4628      	mov	r0, r5
 8006f00:	47b8      	blx	r7
 8006f02:	3001      	adds	r0, #1
 8006f04:	f43f aefb 	beq.w	8006cfe <_printf_float+0xb6>
 8006f08:	f10a 0a01 	add.w	sl, sl, #1
 8006f0c:	e7ee      	b.n	8006eec <_printf_float+0x2a4>
 8006f0e:	bf00      	nop
 8006f10:	7fefffff 	.word	0x7fefffff
 8006f14:	08009de5 	.word	0x08009de5
 8006f18:	08009de9 	.word	0x08009de9
 8006f1c:	08009ded 	.word	0x08009ded
 8006f20:	08009df1 	.word	0x08009df1
 8006f24:	08009df5 	.word	0x08009df5
 8006f28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f2e:	4553      	cmp	r3, sl
 8006f30:	bfa8      	it	ge
 8006f32:	4653      	movge	r3, sl
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	4699      	mov	r9, r3
 8006f38:	dc36      	bgt.n	8006fa8 <_printf_float+0x360>
 8006f3a:	f04f 0b00 	mov.w	fp, #0
 8006f3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f42:	f104 021a 	add.w	r2, r4, #26
 8006f46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f48:	9306      	str	r3, [sp, #24]
 8006f4a:	eba3 0309 	sub.w	r3, r3, r9
 8006f4e:	455b      	cmp	r3, fp
 8006f50:	dc31      	bgt.n	8006fb6 <_printf_float+0x36e>
 8006f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f54:	459a      	cmp	sl, r3
 8006f56:	dc3a      	bgt.n	8006fce <_printf_float+0x386>
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	07da      	lsls	r2, r3, #31
 8006f5c:	d437      	bmi.n	8006fce <_printf_float+0x386>
 8006f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f60:	ebaa 0903 	sub.w	r9, sl, r3
 8006f64:	9b06      	ldr	r3, [sp, #24]
 8006f66:	ebaa 0303 	sub.w	r3, sl, r3
 8006f6a:	4599      	cmp	r9, r3
 8006f6c:	bfa8      	it	ge
 8006f6e:	4699      	movge	r9, r3
 8006f70:	f1b9 0f00 	cmp.w	r9, #0
 8006f74:	dc33      	bgt.n	8006fde <_printf_float+0x396>
 8006f76:	f04f 0800 	mov.w	r8, #0
 8006f7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f7e:	f104 0b1a 	add.w	fp, r4, #26
 8006f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f84:	ebaa 0303 	sub.w	r3, sl, r3
 8006f88:	eba3 0309 	sub.w	r3, r3, r9
 8006f8c:	4543      	cmp	r3, r8
 8006f8e:	f77f af79 	ble.w	8006e84 <_printf_float+0x23c>
 8006f92:	2301      	movs	r3, #1
 8006f94:	465a      	mov	r2, fp
 8006f96:	4631      	mov	r1, r6
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b8      	blx	r7
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	f43f aeae 	beq.w	8006cfe <_printf_float+0xb6>
 8006fa2:	f108 0801 	add.w	r8, r8, #1
 8006fa6:	e7ec      	b.n	8006f82 <_printf_float+0x33a>
 8006fa8:	4642      	mov	r2, r8
 8006faa:	4631      	mov	r1, r6
 8006fac:	4628      	mov	r0, r5
 8006fae:	47b8      	blx	r7
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	d1c2      	bne.n	8006f3a <_printf_float+0x2f2>
 8006fb4:	e6a3      	b.n	8006cfe <_printf_float+0xb6>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	4631      	mov	r1, r6
 8006fba:	4628      	mov	r0, r5
 8006fbc:	9206      	str	r2, [sp, #24]
 8006fbe:	47b8      	blx	r7
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	f43f ae9c 	beq.w	8006cfe <_printf_float+0xb6>
 8006fc6:	9a06      	ldr	r2, [sp, #24]
 8006fc8:	f10b 0b01 	add.w	fp, fp, #1
 8006fcc:	e7bb      	b.n	8006f46 <_printf_float+0x2fe>
 8006fce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fd2:	4631      	mov	r1, r6
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	47b8      	blx	r7
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d1c0      	bne.n	8006f5e <_printf_float+0x316>
 8006fdc:	e68f      	b.n	8006cfe <_printf_float+0xb6>
 8006fde:	9a06      	ldr	r2, [sp, #24]
 8006fe0:	464b      	mov	r3, r9
 8006fe2:	4442      	add	r2, r8
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	47b8      	blx	r7
 8006fea:	3001      	adds	r0, #1
 8006fec:	d1c3      	bne.n	8006f76 <_printf_float+0x32e>
 8006fee:	e686      	b.n	8006cfe <_printf_float+0xb6>
 8006ff0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ff4:	f1ba 0f01 	cmp.w	sl, #1
 8006ff8:	dc01      	bgt.n	8006ffe <_printf_float+0x3b6>
 8006ffa:	07db      	lsls	r3, r3, #31
 8006ffc:	d536      	bpl.n	800706c <_printf_float+0x424>
 8006ffe:	2301      	movs	r3, #1
 8007000:	4642      	mov	r2, r8
 8007002:	4631      	mov	r1, r6
 8007004:	4628      	mov	r0, r5
 8007006:	47b8      	blx	r7
 8007008:	3001      	adds	r0, #1
 800700a:	f43f ae78 	beq.w	8006cfe <_printf_float+0xb6>
 800700e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007012:	4631      	mov	r1, r6
 8007014:	4628      	mov	r0, r5
 8007016:	47b8      	blx	r7
 8007018:	3001      	adds	r0, #1
 800701a:	f43f ae70 	beq.w	8006cfe <_printf_float+0xb6>
 800701e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007022:	2200      	movs	r2, #0
 8007024:	2300      	movs	r3, #0
 8007026:	f10a 3aff 	add.w	sl, sl, #4294967295
 800702a:	f7f9 fd65 	bl	8000af8 <__aeabi_dcmpeq>
 800702e:	b9c0      	cbnz	r0, 8007062 <_printf_float+0x41a>
 8007030:	4653      	mov	r3, sl
 8007032:	f108 0201 	add.w	r2, r8, #1
 8007036:	4631      	mov	r1, r6
 8007038:	4628      	mov	r0, r5
 800703a:	47b8      	blx	r7
 800703c:	3001      	adds	r0, #1
 800703e:	d10c      	bne.n	800705a <_printf_float+0x412>
 8007040:	e65d      	b.n	8006cfe <_printf_float+0xb6>
 8007042:	2301      	movs	r3, #1
 8007044:	465a      	mov	r2, fp
 8007046:	4631      	mov	r1, r6
 8007048:	4628      	mov	r0, r5
 800704a:	47b8      	blx	r7
 800704c:	3001      	adds	r0, #1
 800704e:	f43f ae56 	beq.w	8006cfe <_printf_float+0xb6>
 8007052:	f108 0801 	add.w	r8, r8, #1
 8007056:	45d0      	cmp	r8, sl
 8007058:	dbf3      	blt.n	8007042 <_printf_float+0x3fa>
 800705a:	464b      	mov	r3, r9
 800705c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007060:	e6df      	b.n	8006e22 <_printf_float+0x1da>
 8007062:	f04f 0800 	mov.w	r8, #0
 8007066:	f104 0b1a 	add.w	fp, r4, #26
 800706a:	e7f4      	b.n	8007056 <_printf_float+0x40e>
 800706c:	2301      	movs	r3, #1
 800706e:	4642      	mov	r2, r8
 8007070:	e7e1      	b.n	8007036 <_printf_float+0x3ee>
 8007072:	2301      	movs	r3, #1
 8007074:	464a      	mov	r2, r9
 8007076:	4631      	mov	r1, r6
 8007078:	4628      	mov	r0, r5
 800707a:	47b8      	blx	r7
 800707c:	3001      	adds	r0, #1
 800707e:	f43f ae3e 	beq.w	8006cfe <_printf_float+0xb6>
 8007082:	f108 0801 	add.w	r8, r8, #1
 8007086:	68e3      	ldr	r3, [r4, #12]
 8007088:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800708a:	1a5b      	subs	r3, r3, r1
 800708c:	4543      	cmp	r3, r8
 800708e:	dcf0      	bgt.n	8007072 <_printf_float+0x42a>
 8007090:	e6fc      	b.n	8006e8c <_printf_float+0x244>
 8007092:	f04f 0800 	mov.w	r8, #0
 8007096:	f104 0919 	add.w	r9, r4, #25
 800709a:	e7f4      	b.n	8007086 <_printf_float+0x43e>

0800709c <_printf_common>:
 800709c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a0:	4616      	mov	r6, r2
 80070a2:	4698      	mov	r8, r3
 80070a4:	688a      	ldr	r2, [r1, #8]
 80070a6:	690b      	ldr	r3, [r1, #16]
 80070a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070ac:	4293      	cmp	r3, r2
 80070ae:	bfb8      	it	lt
 80070b0:	4613      	movlt	r3, r2
 80070b2:	6033      	str	r3, [r6, #0]
 80070b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80070b8:	4607      	mov	r7, r0
 80070ba:	460c      	mov	r4, r1
 80070bc:	b10a      	cbz	r2, 80070c2 <_printf_common+0x26>
 80070be:	3301      	adds	r3, #1
 80070c0:	6033      	str	r3, [r6, #0]
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	0699      	lsls	r1, r3, #26
 80070c6:	bf42      	ittt	mi
 80070c8:	6833      	ldrmi	r3, [r6, #0]
 80070ca:	3302      	addmi	r3, #2
 80070cc:	6033      	strmi	r3, [r6, #0]
 80070ce:	6825      	ldr	r5, [r4, #0]
 80070d0:	f015 0506 	ands.w	r5, r5, #6
 80070d4:	d106      	bne.n	80070e4 <_printf_common+0x48>
 80070d6:	f104 0a19 	add.w	sl, r4, #25
 80070da:	68e3      	ldr	r3, [r4, #12]
 80070dc:	6832      	ldr	r2, [r6, #0]
 80070de:	1a9b      	subs	r3, r3, r2
 80070e0:	42ab      	cmp	r3, r5
 80070e2:	dc26      	bgt.n	8007132 <_printf_common+0x96>
 80070e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070e8:	6822      	ldr	r2, [r4, #0]
 80070ea:	3b00      	subs	r3, #0
 80070ec:	bf18      	it	ne
 80070ee:	2301      	movne	r3, #1
 80070f0:	0692      	lsls	r2, r2, #26
 80070f2:	d42b      	bmi.n	800714c <_printf_common+0xb0>
 80070f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070f8:	4641      	mov	r1, r8
 80070fa:	4638      	mov	r0, r7
 80070fc:	47c8      	blx	r9
 80070fe:	3001      	adds	r0, #1
 8007100:	d01e      	beq.n	8007140 <_printf_common+0xa4>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	6922      	ldr	r2, [r4, #16]
 8007106:	f003 0306 	and.w	r3, r3, #6
 800710a:	2b04      	cmp	r3, #4
 800710c:	bf02      	ittt	eq
 800710e:	68e5      	ldreq	r5, [r4, #12]
 8007110:	6833      	ldreq	r3, [r6, #0]
 8007112:	1aed      	subeq	r5, r5, r3
 8007114:	68a3      	ldr	r3, [r4, #8]
 8007116:	bf0c      	ite	eq
 8007118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800711c:	2500      	movne	r5, #0
 800711e:	4293      	cmp	r3, r2
 8007120:	bfc4      	itt	gt
 8007122:	1a9b      	subgt	r3, r3, r2
 8007124:	18ed      	addgt	r5, r5, r3
 8007126:	2600      	movs	r6, #0
 8007128:	341a      	adds	r4, #26
 800712a:	42b5      	cmp	r5, r6
 800712c:	d11a      	bne.n	8007164 <_printf_common+0xc8>
 800712e:	2000      	movs	r0, #0
 8007130:	e008      	b.n	8007144 <_printf_common+0xa8>
 8007132:	2301      	movs	r3, #1
 8007134:	4652      	mov	r2, sl
 8007136:	4641      	mov	r1, r8
 8007138:	4638      	mov	r0, r7
 800713a:	47c8      	blx	r9
 800713c:	3001      	adds	r0, #1
 800713e:	d103      	bne.n	8007148 <_printf_common+0xac>
 8007140:	f04f 30ff 	mov.w	r0, #4294967295
 8007144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007148:	3501      	adds	r5, #1
 800714a:	e7c6      	b.n	80070da <_printf_common+0x3e>
 800714c:	18e1      	adds	r1, r4, r3
 800714e:	1c5a      	adds	r2, r3, #1
 8007150:	2030      	movs	r0, #48	@ 0x30
 8007152:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007156:	4422      	add	r2, r4
 8007158:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800715c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007160:	3302      	adds	r3, #2
 8007162:	e7c7      	b.n	80070f4 <_printf_common+0x58>
 8007164:	2301      	movs	r3, #1
 8007166:	4622      	mov	r2, r4
 8007168:	4641      	mov	r1, r8
 800716a:	4638      	mov	r0, r7
 800716c:	47c8      	blx	r9
 800716e:	3001      	adds	r0, #1
 8007170:	d0e6      	beq.n	8007140 <_printf_common+0xa4>
 8007172:	3601      	adds	r6, #1
 8007174:	e7d9      	b.n	800712a <_printf_common+0x8e>
	...

08007178 <_printf_i>:
 8007178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800717c:	7e0f      	ldrb	r7, [r1, #24]
 800717e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007180:	2f78      	cmp	r7, #120	@ 0x78
 8007182:	4691      	mov	r9, r2
 8007184:	4680      	mov	r8, r0
 8007186:	460c      	mov	r4, r1
 8007188:	469a      	mov	sl, r3
 800718a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800718e:	d807      	bhi.n	80071a0 <_printf_i+0x28>
 8007190:	2f62      	cmp	r7, #98	@ 0x62
 8007192:	d80a      	bhi.n	80071aa <_printf_i+0x32>
 8007194:	2f00      	cmp	r7, #0
 8007196:	f000 80d2 	beq.w	800733e <_printf_i+0x1c6>
 800719a:	2f58      	cmp	r7, #88	@ 0x58
 800719c:	f000 80b9 	beq.w	8007312 <_printf_i+0x19a>
 80071a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80071a8:	e03a      	b.n	8007220 <_printf_i+0xa8>
 80071aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80071ae:	2b15      	cmp	r3, #21
 80071b0:	d8f6      	bhi.n	80071a0 <_printf_i+0x28>
 80071b2:	a101      	add	r1, pc, #4	@ (adr r1, 80071b8 <_printf_i+0x40>)
 80071b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071b8:	08007211 	.word	0x08007211
 80071bc:	08007225 	.word	0x08007225
 80071c0:	080071a1 	.word	0x080071a1
 80071c4:	080071a1 	.word	0x080071a1
 80071c8:	080071a1 	.word	0x080071a1
 80071cc:	080071a1 	.word	0x080071a1
 80071d0:	08007225 	.word	0x08007225
 80071d4:	080071a1 	.word	0x080071a1
 80071d8:	080071a1 	.word	0x080071a1
 80071dc:	080071a1 	.word	0x080071a1
 80071e0:	080071a1 	.word	0x080071a1
 80071e4:	08007325 	.word	0x08007325
 80071e8:	0800724f 	.word	0x0800724f
 80071ec:	080072df 	.word	0x080072df
 80071f0:	080071a1 	.word	0x080071a1
 80071f4:	080071a1 	.word	0x080071a1
 80071f8:	08007347 	.word	0x08007347
 80071fc:	080071a1 	.word	0x080071a1
 8007200:	0800724f 	.word	0x0800724f
 8007204:	080071a1 	.word	0x080071a1
 8007208:	080071a1 	.word	0x080071a1
 800720c:	080072e7 	.word	0x080072e7
 8007210:	6833      	ldr	r3, [r6, #0]
 8007212:	1d1a      	adds	r2, r3, #4
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6032      	str	r2, [r6, #0]
 8007218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800721c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007220:	2301      	movs	r3, #1
 8007222:	e09d      	b.n	8007360 <_printf_i+0x1e8>
 8007224:	6833      	ldr	r3, [r6, #0]
 8007226:	6820      	ldr	r0, [r4, #0]
 8007228:	1d19      	adds	r1, r3, #4
 800722a:	6031      	str	r1, [r6, #0]
 800722c:	0606      	lsls	r6, r0, #24
 800722e:	d501      	bpl.n	8007234 <_printf_i+0xbc>
 8007230:	681d      	ldr	r5, [r3, #0]
 8007232:	e003      	b.n	800723c <_printf_i+0xc4>
 8007234:	0645      	lsls	r5, r0, #25
 8007236:	d5fb      	bpl.n	8007230 <_printf_i+0xb8>
 8007238:	f9b3 5000 	ldrsh.w	r5, [r3]
 800723c:	2d00      	cmp	r5, #0
 800723e:	da03      	bge.n	8007248 <_printf_i+0xd0>
 8007240:	232d      	movs	r3, #45	@ 0x2d
 8007242:	426d      	negs	r5, r5
 8007244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007248:	4859      	ldr	r0, [pc, #356]	@ (80073b0 <_printf_i+0x238>)
 800724a:	230a      	movs	r3, #10
 800724c:	e011      	b.n	8007272 <_printf_i+0xfa>
 800724e:	6821      	ldr	r1, [r4, #0]
 8007250:	6833      	ldr	r3, [r6, #0]
 8007252:	0608      	lsls	r0, r1, #24
 8007254:	f853 5b04 	ldr.w	r5, [r3], #4
 8007258:	d402      	bmi.n	8007260 <_printf_i+0xe8>
 800725a:	0649      	lsls	r1, r1, #25
 800725c:	bf48      	it	mi
 800725e:	b2ad      	uxthmi	r5, r5
 8007260:	2f6f      	cmp	r7, #111	@ 0x6f
 8007262:	4853      	ldr	r0, [pc, #332]	@ (80073b0 <_printf_i+0x238>)
 8007264:	6033      	str	r3, [r6, #0]
 8007266:	bf14      	ite	ne
 8007268:	230a      	movne	r3, #10
 800726a:	2308      	moveq	r3, #8
 800726c:	2100      	movs	r1, #0
 800726e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007272:	6866      	ldr	r6, [r4, #4]
 8007274:	60a6      	str	r6, [r4, #8]
 8007276:	2e00      	cmp	r6, #0
 8007278:	bfa2      	ittt	ge
 800727a:	6821      	ldrge	r1, [r4, #0]
 800727c:	f021 0104 	bicge.w	r1, r1, #4
 8007280:	6021      	strge	r1, [r4, #0]
 8007282:	b90d      	cbnz	r5, 8007288 <_printf_i+0x110>
 8007284:	2e00      	cmp	r6, #0
 8007286:	d04b      	beq.n	8007320 <_printf_i+0x1a8>
 8007288:	4616      	mov	r6, r2
 800728a:	fbb5 f1f3 	udiv	r1, r5, r3
 800728e:	fb03 5711 	mls	r7, r3, r1, r5
 8007292:	5dc7      	ldrb	r7, [r0, r7]
 8007294:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007298:	462f      	mov	r7, r5
 800729a:	42bb      	cmp	r3, r7
 800729c:	460d      	mov	r5, r1
 800729e:	d9f4      	bls.n	800728a <_printf_i+0x112>
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	d10b      	bne.n	80072bc <_printf_i+0x144>
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	07df      	lsls	r7, r3, #31
 80072a8:	d508      	bpl.n	80072bc <_printf_i+0x144>
 80072aa:	6923      	ldr	r3, [r4, #16]
 80072ac:	6861      	ldr	r1, [r4, #4]
 80072ae:	4299      	cmp	r1, r3
 80072b0:	bfde      	ittt	le
 80072b2:	2330      	movle	r3, #48	@ 0x30
 80072b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072bc:	1b92      	subs	r2, r2, r6
 80072be:	6122      	str	r2, [r4, #16]
 80072c0:	f8cd a000 	str.w	sl, [sp]
 80072c4:	464b      	mov	r3, r9
 80072c6:	aa03      	add	r2, sp, #12
 80072c8:	4621      	mov	r1, r4
 80072ca:	4640      	mov	r0, r8
 80072cc:	f7ff fee6 	bl	800709c <_printf_common>
 80072d0:	3001      	adds	r0, #1
 80072d2:	d14a      	bne.n	800736a <_printf_i+0x1f2>
 80072d4:	f04f 30ff 	mov.w	r0, #4294967295
 80072d8:	b004      	add	sp, #16
 80072da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	f043 0320 	orr.w	r3, r3, #32
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	4833      	ldr	r0, [pc, #204]	@ (80073b4 <_printf_i+0x23c>)
 80072e8:	2778      	movs	r7, #120	@ 0x78
 80072ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	6831      	ldr	r1, [r6, #0]
 80072f2:	061f      	lsls	r7, r3, #24
 80072f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80072f8:	d402      	bmi.n	8007300 <_printf_i+0x188>
 80072fa:	065f      	lsls	r7, r3, #25
 80072fc:	bf48      	it	mi
 80072fe:	b2ad      	uxthmi	r5, r5
 8007300:	6031      	str	r1, [r6, #0]
 8007302:	07d9      	lsls	r1, r3, #31
 8007304:	bf44      	itt	mi
 8007306:	f043 0320 	orrmi.w	r3, r3, #32
 800730a:	6023      	strmi	r3, [r4, #0]
 800730c:	b11d      	cbz	r5, 8007316 <_printf_i+0x19e>
 800730e:	2310      	movs	r3, #16
 8007310:	e7ac      	b.n	800726c <_printf_i+0xf4>
 8007312:	4827      	ldr	r0, [pc, #156]	@ (80073b0 <_printf_i+0x238>)
 8007314:	e7e9      	b.n	80072ea <_printf_i+0x172>
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	f023 0320 	bic.w	r3, r3, #32
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	e7f6      	b.n	800730e <_printf_i+0x196>
 8007320:	4616      	mov	r6, r2
 8007322:	e7bd      	b.n	80072a0 <_printf_i+0x128>
 8007324:	6833      	ldr	r3, [r6, #0]
 8007326:	6825      	ldr	r5, [r4, #0]
 8007328:	6961      	ldr	r1, [r4, #20]
 800732a:	1d18      	adds	r0, r3, #4
 800732c:	6030      	str	r0, [r6, #0]
 800732e:	062e      	lsls	r6, r5, #24
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	d501      	bpl.n	8007338 <_printf_i+0x1c0>
 8007334:	6019      	str	r1, [r3, #0]
 8007336:	e002      	b.n	800733e <_printf_i+0x1c6>
 8007338:	0668      	lsls	r0, r5, #25
 800733a:	d5fb      	bpl.n	8007334 <_printf_i+0x1bc>
 800733c:	8019      	strh	r1, [r3, #0]
 800733e:	2300      	movs	r3, #0
 8007340:	6123      	str	r3, [r4, #16]
 8007342:	4616      	mov	r6, r2
 8007344:	e7bc      	b.n	80072c0 <_printf_i+0x148>
 8007346:	6833      	ldr	r3, [r6, #0]
 8007348:	1d1a      	adds	r2, r3, #4
 800734a:	6032      	str	r2, [r6, #0]
 800734c:	681e      	ldr	r6, [r3, #0]
 800734e:	6862      	ldr	r2, [r4, #4]
 8007350:	2100      	movs	r1, #0
 8007352:	4630      	mov	r0, r6
 8007354:	f7f8 ff54 	bl	8000200 <memchr>
 8007358:	b108      	cbz	r0, 800735e <_printf_i+0x1e6>
 800735a:	1b80      	subs	r0, r0, r6
 800735c:	6060      	str	r0, [r4, #4]
 800735e:	6863      	ldr	r3, [r4, #4]
 8007360:	6123      	str	r3, [r4, #16]
 8007362:	2300      	movs	r3, #0
 8007364:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007368:	e7aa      	b.n	80072c0 <_printf_i+0x148>
 800736a:	6923      	ldr	r3, [r4, #16]
 800736c:	4632      	mov	r2, r6
 800736e:	4649      	mov	r1, r9
 8007370:	4640      	mov	r0, r8
 8007372:	47d0      	blx	sl
 8007374:	3001      	adds	r0, #1
 8007376:	d0ad      	beq.n	80072d4 <_printf_i+0x15c>
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	079b      	lsls	r3, r3, #30
 800737c:	d413      	bmi.n	80073a6 <_printf_i+0x22e>
 800737e:	68e0      	ldr	r0, [r4, #12]
 8007380:	9b03      	ldr	r3, [sp, #12]
 8007382:	4298      	cmp	r0, r3
 8007384:	bfb8      	it	lt
 8007386:	4618      	movlt	r0, r3
 8007388:	e7a6      	b.n	80072d8 <_printf_i+0x160>
 800738a:	2301      	movs	r3, #1
 800738c:	4632      	mov	r2, r6
 800738e:	4649      	mov	r1, r9
 8007390:	4640      	mov	r0, r8
 8007392:	47d0      	blx	sl
 8007394:	3001      	adds	r0, #1
 8007396:	d09d      	beq.n	80072d4 <_printf_i+0x15c>
 8007398:	3501      	adds	r5, #1
 800739a:	68e3      	ldr	r3, [r4, #12]
 800739c:	9903      	ldr	r1, [sp, #12]
 800739e:	1a5b      	subs	r3, r3, r1
 80073a0:	42ab      	cmp	r3, r5
 80073a2:	dcf2      	bgt.n	800738a <_printf_i+0x212>
 80073a4:	e7eb      	b.n	800737e <_printf_i+0x206>
 80073a6:	2500      	movs	r5, #0
 80073a8:	f104 0619 	add.w	r6, r4, #25
 80073ac:	e7f5      	b.n	800739a <_printf_i+0x222>
 80073ae:	bf00      	nop
 80073b0:	08009df7 	.word	0x08009df7
 80073b4:	08009e08 	.word	0x08009e08

080073b8 <std>:
 80073b8:	2300      	movs	r3, #0
 80073ba:	b510      	push	{r4, lr}
 80073bc:	4604      	mov	r4, r0
 80073be:	e9c0 3300 	strd	r3, r3, [r0]
 80073c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073c6:	6083      	str	r3, [r0, #8]
 80073c8:	8181      	strh	r1, [r0, #12]
 80073ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80073cc:	81c2      	strh	r2, [r0, #14]
 80073ce:	6183      	str	r3, [r0, #24]
 80073d0:	4619      	mov	r1, r3
 80073d2:	2208      	movs	r2, #8
 80073d4:	305c      	adds	r0, #92	@ 0x5c
 80073d6:	f000 f935 	bl	8007644 <memset>
 80073da:	4b0d      	ldr	r3, [pc, #52]	@ (8007410 <std+0x58>)
 80073dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80073de:	4b0d      	ldr	r3, [pc, #52]	@ (8007414 <std+0x5c>)
 80073e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80073e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007418 <std+0x60>)
 80073e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80073e6:	4b0d      	ldr	r3, [pc, #52]	@ (800741c <std+0x64>)
 80073e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80073ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007420 <std+0x68>)
 80073ec:	6224      	str	r4, [r4, #32]
 80073ee:	429c      	cmp	r4, r3
 80073f0:	d006      	beq.n	8007400 <std+0x48>
 80073f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80073f6:	4294      	cmp	r4, r2
 80073f8:	d002      	beq.n	8007400 <std+0x48>
 80073fa:	33d0      	adds	r3, #208	@ 0xd0
 80073fc:	429c      	cmp	r4, r3
 80073fe:	d105      	bne.n	800740c <std+0x54>
 8007400:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007408:	f000 b9f4 	b.w	80077f4 <__retarget_lock_init_recursive>
 800740c:	bd10      	pop	{r4, pc}
 800740e:	bf00      	nop
 8007410:	0800757d 	.word	0x0800757d
 8007414:	0800759f 	.word	0x0800759f
 8007418:	080075d7 	.word	0x080075d7
 800741c:	080075fb 	.word	0x080075fb
 8007420:	20000604 	.word	0x20000604

08007424 <stdio_exit_handler>:
 8007424:	4a02      	ldr	r2, [pc, #8]	@ (8007430 <stdio_exit_handler+0xc>)
 8007426:	4903      	ldr	r1, [pc, #12]	@ (8007434 <stdio_exit_handler+0x10>)
 8007428:	4803      	ldr	r0, [pc, #12]	@ (8007438 <stdio_exit_handler+0x14>)
 800742a:	f000 b869 	b.w	8007500 <_fwalk_sglue>
 800742e:	bf00      	nop
 8007430:	20000090 	.word	0x20000090
 8007434:	0800918d 	.word	0x0800918d
 8007438:	200000a0 	.word	0x200000a0

0800743c <cleanup_stdio>:
 800743c:	6841      	ldr	r1, [r0, #4]
 800743e:	4b0c      	ldr	r3, [pc, #48]	@ (8007470 <cleanup_stdio+0x34>)
 8007440:	4299      	cmp	r1, r3
 8007442:	b510      	push	{r4, lr}
 8007444:	4604      	mov	r4, r0
 8007446:	d001      	beq.n	800744c <cleanup_stdio+0x10>
 8007448:	f001 fea0 	bl	800918c <_fflush_r>
 800744c:	68a1      	ldr	r1, [r4, #8]
 800744e:	4b09      	ldr	r3, [pc, #36]	@ (8007474 <cleanup_stdio+0x38>)
 8007450:	4299      	cmp	r1, r3
 8007452:	d002      	beq.n	800745a <cleanup_stdio+0x1e>
 8007454:	4620      	mov	r0, r4
 8007456:	f001 fe99 	bl	800918c <_fflush_r>
 800745a:	68e1      	ldr	r1, [r4, #12]
 800745c:	4b06      	ldr	r3, [pc, #24]	@ (8007478 <cleanup_stdio+0x3c>)
 800745e:	4299      	cmp	r1, r3
 8007460:	d004      	beq.n	800746c <cleanup_stdio+0x30>
 8007462:	4620      	mov	r0, r4
 8007464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007468:	f001 be90 	b.w	800918c <_fflush_r>
 800746c:	bd10      	pop	{r4, pc}
 800746e:	bf00      	nop
 8007470:	20000604 	.word	0x20000604
 8007474:	2000066c 	.word	0x2000066c
 8007478:	200006d4 	.word	0x200006d4

0800747c <global_stdio_init.part.0>:
 800747c:	b510      	push	{r4, lr}
 800747e:	4b0b      	ldr	r3, [pc, #44]	@ (80074ac <global_stdio_init.part.0+0x30>)
 8007480:	4c0b      	ldr	r4, [pc, #44]	@ (80074b0 <global_stdio_init.part.0+0x34>)
 8007482:	4a0c      	ldr	r2, [pc, #48]	@ (80074b4 <global_stdio_init.part.0+0x38>)
 8007484:	601a      	str	r2, [r3, #0]
 8007486:	4620      	mov	r0, r4
 8007488:	2200      	movs	r2, #0
 800748a:	2104      	movs	r1, #4
 800748c:	f7ff ff94 	bl	80073b8 <std>
 8007490:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007494:	2201      	movs	r2, #1
 8007496:	2109      	movs	r1, #9
 8007498:	f7ff ff8e 	bl	80073b8 <std>
 800749c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80074a0:	2202      	movs	r2, #2
 80074a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074a6:	2112      	movs	r1, #18
 80074a8:	f7ff bf86 	b.w	80073b8 <std>
 80074ac:	2000073c 	.word	0x2000073c
 80074b0:	20000604 	.word	0x20000604
 80074b4:	08007425 	.word	0x08007425

080074b8 <__sfp_lock_acquire>:
 80074b8:	4801      	ldr	r0, [pc, #4]	@ (80074c0 <__sfp_lock_acquire+0x8>)
 80074ba:	f000 b99c 	b.w	80077f6 <__retarget_lock_acquire_recursive>
 80074be:	bf00      	nop
 80074c0:	20000745 	.word	0x20000745

080074c4 <__sfp_lock_release>:
 80074c4:	4801      	ldr	r0, [pc, #4]	@ (80074cc <__sfp_lock_release+0x8>)
 80074c6:	f000 b997 	b.w	80077f8 <__retarget_lock_release_recursive>
 80074ca:	bf00      	nop
 80074cc:	20000745 	.word	0x20000745

080074d0 <__sinit>:
 80074d0:	b510      	push	{r4, lr}
 80074d2:	4604      	mov	r4, r0
 80074d4:	f7ff fff0 	bl	80074b8 <__sfp_lock_acquire>
 80074d8:	6a23      	ldr	r3, [r4, #32]
 80074da:	b11b      	cbz	r3, 80074e4 <__sinit+0x14>
 80074dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074e0:	f7ff bff0 	b.w	80074c4 <__sfp_lock_release>
 80074e4:	4b04      	ldr	r3, [pc, #16]	@ (80074f8 <__sinit+0x28>)
 80074e6:	6223      	str	r3, [r4, #32]
 80074e8:	4b04      	ldr	r3, [pc, #16]	@ (80074fc <__sinit+0x2c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1f5      	bne.n	80074dc <__sinit+0xc>
 80074f0:	f7ff ffc4 	bl	800747c <global_stdio_init.part.0>
 80074f4:	e7f2      	b.n	80074dc <__sinit+0xc>
 80074f6:	bf00      	nop
 80074f8:	0800743d 	.word	0x0800743d
 80074fc:	2000073c 	.word	0x2000073c

08007500 <_fwalk_sglue>:
 8007500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007504:	4607      	mov	r7, r0
 8007506:	4688      	mov	r8, r1
 8007508:	4614      	mov	r4, r2
 800750a:	2600      	movs	r6, #0
 800750c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007510:	f1b9 0901 	subs.w	r9, r9, #1
 8007514:	d505      	bpl.n	8007522 <_fwalk_sglue+0x22>
 8007516:	6824      	ldr	r4, [r4, #0]
 8007518:	2c00      	cmp	r4, #0
 800751a:	d1f7      	bne.n	800750c <_fwalk_sglue+0xc>
 800751c:	4630      	mov	r0, r6
 800751e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007522:	89ab      	ldrh	r3, [r5, #12]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d907      	bls.n	8007538 <_fwalk_sglue+0x38>
 8007528:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800752c:	3301      	adds	r3, #1
 800752e:	d003      	beq.n	8007538 <_fwalk_sglue+0x38>
 8007530:	4629      	mov	r1, r5
 8007532:	4638      	mov	r0, r7
 8007534:	47c0      	blx	r8
 8007536:	4306      	orrs	r6, r0
 8007538:	3568      	adds	r5, #104	@ 0x68
 800753a:	e7e9      	b.n	8007510 <_fwalk_sglue+0x10>

0800753c <siprintf>:
 800753c:	b40e      	push	{r1, r2, r3}
 800753e:	b500      	push	{lr}
 8007540:	b09c      	sub	sp, #112	@ 0x70
 8007542:	ab1d      	add	r3, sp, #116	@ 0x74
 8007544:	9002      	str	r0, [sp, #8]
 8007546:	9006      	str	r0, [sp, #24]
 8007548:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800754c:	4809      	ldr	r0, [pc, #36]	@ (8007574 <siprintf+0x38>)
 800754e:	9107      	str	r1, [sp, #28]
 8007550:	9104      	str	r1, [sp, #16]
 8007552:	4909      	ldr	r1, [pc, #36]	@ (8007578 <siprintf+0x3c>)
 8007554:	f853 2b04 	ldr.w	r2, [r3], #4
 8007558:	9105      	str	r1, [sp, #20]
 800755a:	6800      	ldr	r0, [r0, #0]
 800755c:	9301      	str	r3, [sp, #4]
 800755e:	a902      	add	r1, sp, #8
 8007560:	f001 fc94 	bl	8008e8c <_svfiprintf_r>
 8007564:	9b02      	ldr	r3, [sp, #8]
 8007566:	2200      	movs	r2, #0
 8007568:	701a      	strb	r2, [r3, #0]
 800756a:	b01c      	add	sp, #112	@ 0x70
 800756c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007570:	b003      	add	sp, #12
 8007572:	4770      	bx	lr
 8007574:	2000009c 	.word	0x2000009c
 8007578:	ffff0208 	.word	0xffff0208

0800757c <__sread>:
 800757c:	b510      	push	{r4, lr}
 800757e:	460c      	mov	r4, r1
 8007580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007584:	f000 f8e8 	bl	8007758 <_read_r>
 8007588:	2800      	cmp	r0, #0
 800758a:	bfab      	itete	ge
 800758c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800758e:	89a3      	ldrhlt	r3, [r4, #12]
 8007590:	181b      	addge	r3, r3, r0
 8007592:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007596:	bfac      	ite	ge
 8007598:	6563      	strge	r3, [r4, #84]	@ 0x54
 800759a:	81a3      	strhlt	r3, [r4, #12]
 800759c:	bd10      	pop	{r4, pc}

0800759e <__swrite>:
 800759e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a2:	461f      	mov	r7, r3
 80075a4:	898b      	ldrh	r3, [r1, #12]
 80075a6:	05db      	lsls	r3, r3, #23
 80075a8:	4605      	mov	r5, r0
 80075aa:	460c      	mov	r4, r1
 80075ac:	4616      	mov	r6, r2
 80075ae:	d505      	bpl.n	80075bc <__swrite+0x1e>
 80075b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b4:	2302      	movs	r3, #2
 80075b6:	2200      	movs	r2, #0
 80075b8:	f000 f8bc 	bl	8007734 <_lseek_r>
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075c6:	81a3      	strh	r3, [r4, #12]
 80075c8:	4632      	mov	r2, r6
 80075ca:	463b      	mov	r3, r7
 80075cc:	4628      	mov	r0, r5
 80075ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075d2:	f000 b8d3 	b.w	800777c <_write_r>

080075d6 <__sseek>:
 80075d6:	b510      	push	{r4, lr}
 80075d8:	460c      	mov	r4, r1
 80075da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075de:	f000 f8a9 	bl	8007734 <_lseek_r>
 80075e2:	1c43      	adds	r3, r0, #1
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	bf15      	itete	ne
 80075e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80075ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80075ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80075f2:	81a3      	strheq	r3, [r4, #12]
 80075f4:	bf18      	it	ne
 80075f6:	81a3      	strhne	r3, [r4, #12]
 80075f8:	bd10      	pop	{r4, pc}

080075fa <__sclose>:
 80075fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075fe:	f000 b889 	b.w	8007714 <_close_r>
	...

08007604 <_vsiprintf_r>:
 8007604:	b500      	push	{lr}
 8007606:	b09b      	sub	sp, #108	@ 0x6c
 8007608:	9100      	str	r1, [sp, #0]
 800760a:	9104      	str	r1, [sp, #16]
 800760c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007610:	9105      	str	r1, [sp, #20]
 8007612:	9102      	str	r1, [sp, #8]
 8007614:	4905      	ldr	r1, [pc, #20]	@ (800762c <_vsiprintf_r+0x28>)
 8007616:	9103      	str	r1, [sp, #12]
 8007618:	4669      	mov	r1, sp
 800761a:	f001 fc37 	bl	8008e8c <_svfiprintf_r>
 800761e:	9b00      	ldr	r3, [sp, #0]
 8007620:	2200      	movs	r2, #0
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	b01b      	add	sp, #108	@ 0x6c
 8007626:	f85d fb04 	ldr.w	pc, [sp], #4
 800762a:	bf00      	nop
 800762c:	ffff0208 	.word	0xffff0208

08007630 <vsiprintf>:
 8007630:	4613      	mov	r3, r2
 8007632:	460a      	mov	r2, r1
 8007634:	4601      	mov	r1, r0
 8007636:	4802      	ldr	r0, [pc, #8]	@ (8007640 <vsiprintf+0x10>)
 8007638:	6800      	ldr	r0, [r0, #0]
 800763a:	f7ff bfe3 	b.w	8007604 <_vsiprintf_r>
 800763e:	bf00      	nop
 8007640:	2000009c 	.word	0x2000009c

08007644 <memset>:
 8007644:	4402      	add	r2, r0
 8007646:	4603      	mov	r3, r0
 8007648:	4293      	cmp	r3, r2
 800764a:	d100      	bne.n	800764e <memset+0xa>
 800764c:	4770      	bx	lr
 800764e:	f803 1b01 	strb.w	r1, [r3], #1
 8007652:	e7f9      	b.n	8007648 <memset+0x4>

08007654 <strtok>:
 8007654:	4b16      	ldr	r3, [pc, #88]	@ (80076b0 <strtok+0x5c>)
 8007656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800765a:	681f      	ldr	r7, [r3, #0]
 800765c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800765e:	4605      	mov	r5, r0
 8007660:	460e      	mov	r6, r1
 8007662:	b9ec      	cbnz	r4, 80076a0 <strtok+0x4c>
 8007664:	2050      	movs	r0, #80	@ 0x50
 8007666:	f000 ff7d 	bl	8008564 <malloc>
 800766a:	4602      	mov	r2, r0
 800766c:	6478      	str	r0, [r7, #68]	@ 0x44
 800766e:	b920      	cbnz	r0, 800767a <strtok+0x26>
 8007670:	4b10      	ldr	r3, [pc, #64]	@ (80076b4 <strtok+0x60>)
 8007672:	4811      	ldr	r0, [pc, #68]	@ (80076b8 <strtok+0x64>)
 8007674:	215b      	movs	r1, #91	@ 0x5b
 8007676:	f000 f8c1 	bl	80077fc <__assert_func>
 800767a:	e9c0 4400 	strd	r4, r4, [r0]
 800767e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007682:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007686:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800768a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800768e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007692:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007696:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800769a:	6184      	str	r4, [r0, #24]
 800769c:	7704      	strb	r4, [r0, #28]
 800769e:	6244      	str	r4, [r0, #36]	@ 0x24
 80076a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076a2:	4631      	mov	r1, r6
 80076a4:	4628      	mov	r0, r5
 80076a6:	2301      	movs	r3, #1
 80076a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076ac:	f000 b806 	b.w	80076bc <__strtok_r>
 80076b0:	2000009c 	.word	0x2000009c
 80076b4:	08009e19 	.word	0x08009e19
 80076b8:	08009e30 	.word	0x08009e30

080076bc <__strtok_r>:
 80076bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076be:	4604      	mov	r4, r0
 80076c0:	b908      	cbnz	r0, 80076c6 <__strtok_r+0xa>
 80076c2:	6814      	ldr	r4, [r2, #0]
 80076c4:	b144      	cbz	r4, 80076d8 <__strtok_r+0x1c>
 80076c6:	4620      	mov	r0, r4
 80076c8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80076cc:	460f      	mov	r7, r1
 80076ce:	f817 6b01 	ldrb.w	r6, [r7], #1
 80076d2:	b91e      	cbnz	r6, 80076dc <__strtok_r+0x20>
 80076d4:	b965      	cbnz	r5, 80076f0 <__strtok_r+0x34>
 80076d6:	6015      	str	r5, [r2, #0]
 80076d8:	2000      	movs	r0, #0
 80076da:	e005      	b.n	80076e8 <__strtok_r+0x2c>
 80076dc:	42b5      	cmp	r5, r6
 80076de:	d1f6      	bne.n	80076ce <__strtok_r+0x12>
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1f0      	bne.n	80076c6 <__strtok_r+0xa>
 80076e4:	6014      	str	r4, [r2, #0]
 80076e6:	7003      	strb	r3, [r0, #0]
 80076e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ea:	461c      	mov	r4, r3
 80076ec:	e00c      	b.n	8007708 <__strtok_r+0x4c>
 80076ee:	b915      	cbnz	r5, 80076f6 <__strtok_r+0x3a>
 80076f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076f4:	460e      	mov	r6, r1
 80076f6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80076fa:	42ab      	cmp	r3, r5
 80076fc:	d1f7      	bne.n	80076ee <__strtok_r+0x32>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d0f3      	beq.n	80076ea <__strtok_r+0x2e>
 8007702:	2300      	movs	r3, #0
 8007704:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007708:	6014      	str	r4, [r2, #0]
 800770a:	e7ed      	b.n	80076e8 <__strtok_r+0x2c>

0800770c <_localeconv_r>:
 800770c:	4800      	ldr	r0, [pc, #0]	@ (8007710 <_localeconv_r+0x4>)
 800770e:	4770      	bx	lr
 8007710:	200001dc 	.word	0x200001dc

08007714 <_close_r>:
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	4d06      	ldr	r5, [pc, #24]	@ (8007730 <_close_r+0x1c>)
 8007718:	2300      	movs	r3, #0
 800771a:	4604      	mov	r4, r0
 800771c:	4608      	mov	r0, r1
 800771e:	602b      	str	r3, [r5, #0]
 8007720:	f7fa fcb6 	bl	8002090 <_close>
 8007724:	1c43      	adds	r3, r0, #1
 8007726:	d102      	bne.n	800772e <_close_r+0x1a>
 8007728:	682b      	ldr	r3, [r5, #0]
 800772a:	b103      	cbz	r3, 800772e <_close_r+0x1a>
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	bd38      	pop	{r3, r4, r5, pc}
 8007730:	20000740 	.word	0x20000740

08007734 <_lseek_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4d07      	ldr	r5, [pc, #28]	@ (8007754 <_lseek_r+0x20>)
 8007738:	4604      	mov	r4, r0
 800773a:	4608      	mov	r0, r1
 800773c:	4611      	mov	r1, r2
 800773e:	2200      	movs	r2, #0
 8007740:	602a      	str	r2, [r5, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	f7fa fccb 	bl	80020de <_lseek>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d102      	bne.n	8007752 <_lseek_r+0x1e>
 800774c:	682b      	ldr	r3, [r5, #0]
 800774e:	b103      	cbz	r3, 8007752 <_lseek_r+0x1e>
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	bd38      	pop	{r3, r4, r5, pc}
 8007754:	20000740 	.word	0x20000740

08007758 <_read_r>:
 8007758:	b538      	push	{r3, r4, r5, lr}
 800775a:	4d07      	ldr	r5, [pc, #28]	@ (8007778 <_read_r+0x20>)
 800775c:	4604      	mov	r4, r0
 800775e:	4608      	mov	r0, r1
 8007760:	4611      	mov	r1, r2
 8007762:	2200      	movs	r2, #0
 8007764:	602a      	str	r2, [r5, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	f7fa fc59 	bl	800201e <_read>
 800776c:	1c43      	adds	r3, r0, #1
 800776e:	d102      	bne.n	8007776 <_read_r+0x1e>
 8007770:	682b      	ldr	r3, [r5, #0]
 8007772:	b103      	cbz	r3, 8007776 <_read_r+0x1e>
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	bd38      	pop	{r3, r4, r5, pc}
 8007778:	20000740 	.word	0x20000740

0800777c <_write_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	4d07      	ldr	r5, [pc, #28]	@ (800779c <_write_r+0x20>)
 8007780:	4604      	mov	r4, r0
 8007782:	4608      	mov	r0, r1
 8007784:	4611      	mov	r1, r2
 8007786:	2200      	movs	r2, #0
 8007788:	602a      	str	r2, [r5, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	f7fa fc64 	bl	8002058 <_write>
 8007790:	1c43      	adds	r3, r0, #1
 8007792:	d102      	bne.n	800779a <_write_r+0x1e>
 8007794:	682b      	ldr	r3, [r5, #0]
 8007796:	b103      	cbz	r3, 800779a <_write_r+0x1e>
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	bd38      	pop	{r3, r4, r5, pc}
 800779c:	20000740 	.word	0x20000740

080077a0 <__errno>:
 80077a0:	4b01      	ldr	r3, [pc, #4]	@ (80077a8 <__errno+0x8>)
 80077a2:	6818      	ldr	r0, [r3, #0]
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	2000009c 	.word	0x2000009c

080077ac <__libc_init_array>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	4d0d      	ldr	r5, [pc, #52]	@ (80077e4 <__libc_init_array+0x38>)
 80077b0:	4c0d      	ldr	r4, [pc, #52]	@ (80077e8 <__libc_init_array+0x3c>)
 80077b2:	1b64      	subs	r4, r4, r5
 80077b4:	10a4      	asrs	r4, r4, #2
 80077b6:	2600      	movs	r6, #0
 80077b8:	42a6      	cmp	r6, r4
 80077ba:	d109      	bne.n	80077d0 <__libc_init_array+0x24>
 80077bc:	4d0b      	ldr	r5, [pc, #44]	@ (80077ec <__libc_init_array+0x40>)
 80077be:	4c0c      	ldr	r4, [pc, #48]	@ (80077f0 <__libc_init_array+0x44>)
 80077c0:	f002 f864 	bl	800988c <_init>
 80077c4:	1b64      	subs	r4, r4, r5
 80077c6:	10a4      	asrs	r4, r4, #2
 80077c8:	2600      	movs	r6, #0
 80077ca:	42a6      	cmp	r6, r4
 80077cc:	d105      	bne.n	80077da <__libc_init_array+0x2e>
 80077ce:	bd70      	pop	{r4, r5, r6, pc}
 80077d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80077d4:	4798      	blx	r3
 80077d6:	3601      	adds	r6, #1
 80077d8:	e7ee      	b.n	80077b8 <__libc_init_array+0xc>
 80077da:	f855 3b04 	ldr.w	r3, [r5], #4
 80077de:	4798      	blx	r3
 80077e0:	3601      	adds	r6, #1
 80077e2:	e7f2      	b.n	80077ca <__libc_init_array+0x1e>
 80077e4:	0800a0bc 	.word	0x0800a0bc
 80077e8:	0800a0bc 	.word	0x0800a0bc
 80077ec:	0800a0bc 	.word	0x0800a0bc
 80077f0:	0800a0c0 	.word	0x0800a0c0

080077f4 <__retarget_lock_init_recursive>:
 80077f4:	4770      	bx	lr

080077f6 <__retarget_lock_acquire_recursive>:
 80077f6:	4770      	bx	lr

080077f8 <__retarget_lock_release_recursive>:
 80077f8:	4770      	bx	lr
	...

080077fc <__assert_func>:
 80077fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077fe:	4614      	mov	r4, r2
 8007800:	461a      	mov	r2, r3
 8007802:	4b09      	ldr	r3, [pc, #36]	@ (8007828 <__assert_func+0x2c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4605      	mov	r5, r0
 8007808:	68d8      	ldr	r0, [r3, #12]
 800780a:	b954      	cbnz	r4, 8007822 <__assert_func+0x26>
 800780c:	4b07      	ldr	r3, [pc, #28]	@ (800782c <__assert_func+0x30>)
 800780e:	461c      	mov	r4, r3
 8007810:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007814:	9100      	str	r1, [sp, #0]
 8007816:	462b      	mov	r3, r5
 8007818:	4905      	ldr	r1, [pc, #20]	@ (8007830 <__assert_func+0x34>)
 800781a:	f001 fcdf 	bl	80091dc <fiprintf>
 800781e:	f001 fd27 	bl	8009270 <abort>
 8007822:	4b04      	ldr	r3, [pc, #16]	@ (8007834 <__assert_func+0x38>)
 8007824:	e7f4      	b.n	8007810 <__assert_func+0x14>
 8007826:	bf00      	nop
 8007828:	2000009c 	.word	0x2000009c
 800782c:	08009ec5 	.word	0x08009ec5
 8007830:	08009e97 	.word	0x08009e97
 8007834:	08009e8a 	.word	0x08009e8a

08007838 <quorem>:
 8007838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783c:	6903      	ldr	r3, [r0, #16]
 800783e:	690c      	ldr	r4, [r1, #16]
 8007840:	42a3      	cmp	r3, r4
 8007842:	4607      	mov	r7, r0
 8007844:	db7e      	blt.n	8007944 <quorem+0x10c>
 8007846:	3c01      	subs	r4, #1
 8007848:	f101 0814 	add.w	r8, r1, #20
 800784c:	00a3      	lsls	r3, r4, #2
 800784e:	f100 0514 	add.w	r5, r0, #20
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007858:	9301      	str	r3, [sp, #4]
 800785a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800785e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007862:	3301      	adds	r3, #1
 8007864:	429a      	cmp	r2, r3
 8007866:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800786a:	fbb2 f6f3 	udiv	r6, r2, r3
 800786e:	d32e      	bcc.n	80078ce <quorem+0x96>
 8007870:	f04f 0a00 	mov.w	sl, #0
 8007874:	46c4      	mov	ip, r8
 8007876:	46ae      	mov	lr, r5
 8007878:	46d3      	mov	fp, sl
 800787a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800787e:	b298      	uxth	r0, r3
 8007880:	fb06 a000 	mla	r0, r6, r0, sl
 8007884:	0c02      	lsrs	r2, r0, #16
 8007886:	0c1b      	lsrs	r3, r3, #16
 8007888:	fb06 2303 	mla	r3, r6, r3, r2
 800788c:	f8de 2000 	ldr.w	r2, [lr]
 8007890:	b280      	uxth	r0, r0
 8007892:	b292      	uxth	r2, r2
 8007894:	1a12      	subs	r2, r2, r0
 8007896:	445a      	add	r2, fp
 8007898:	f8de 0000 	ldr.w	r0, [lr]
 800789c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80078a6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80078aa:	b292      	uxth	r2, r2
 80078ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80078b0:	45e1      	cmp	r9, ip
 80078b2:	f84e 2b04 	str.w	r2, [lr], #4
 80078b6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80078ba:	d2de      	bcs.n	800787a <quorem+0x42>
 80078bc:	9b00      	ldr	r3, [sp, #0]
 80078be:	58eb      	ldr	r3, [r5, r3]
 80078c0:	b92b      	cbnz	r3, 80078ce <quorem+0x96>
 80078c2:	9b01      	ldr	r3, [sp, #4]
 80078c4:	3b04      	subs	r3, #4
 80078c6:	429d      	cmp	r5, r3
 80078c8:	461a      	mov	r2, r3
 80078ca:	d32f      	bcc.n	800792c <quorem+0xf4>
 80078cc:	613c      	str	r4, [r7, #16]
 80078ce:	4638      	mov	r0, r7
 80078d0:	f001 f978 	bl	8008bc4 <__mcmp>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	db25      	blt.n	8007924 <quorem+0xec>
 80078d8:	4629      	mov	r1, r5
 80078da:	2000      	movs	r0, #0
 80078dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80078e0:	f8d1 c000 	ldr.w	ip, [r1]
 80078e4:	fa1f fe82 	uxth.w	lr, r2
 80078e8:	fa1f f38c 	uxth.w	r3, ip
 80078ec:	eba3 030e 	sub.w	r3, r3, lr
 80078f0:	4403      	add	r3, r0
 80078f2:	0c12      	lsrs	r2, r2, #16
 80078f4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80078f8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007902:	45c1      	cmp	r9, r8
 8007904:	f841 3b04 	str.w	r3, [r1], #4
 8007908:	ea4f 4022 	mov.w	r0, r2, asr #16
 800790c:	d2e6      	bcs.n	80078dc <quorem+0xa4>
 800790e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007912:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007916:	b922      	cbnz	r2, 8007922 <quorem+0xea>
 8007918:	3b04      	subs	r3, #4
 800791a:	429d      	cmp	r5, r3
 800791c:	461a      	mov	r2, r3
 800791e:	d30b      	bcc.n	8007938 <quorem+0x100>
 8007920:	613c      	str	r4, [r7, #16]
 8007922:	3601      	adds	r6, #1
 8007924:	4630      	mov	r0, r6
 8007926:	b003      	add	sp, #12
 8007928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800792c:	6812      	ldr	r2, [r2, #0]
 800792e:	3b04      	subs	r3, #4
 8007930:	2a00      	cmp	r2, #0
 8007932:	d1cb      	bne.n	80078cc <quorem+0x94>
 8007934:	3c01      	subs	r4, #1
 8007936:	e7c6      	b.n	80078c6 <quorem+0x8e>
 8007938:	6812      	ldr	r2, [r2, #0]
 800793a:	3b04      	subs	r3, #4
 800793c:	2a00      	cmp	r2, #0
 800793e:	d1ef      	bne.n	8007920 <quorem+0xe8>
 8007940:	3c01      	subs	r4, #1
 8007942:	e7ea      	b.n	800791a <quorem+0xe2>
 8007944:	2000      	movs	r0, #0
 8007946:	e7ee      	b.n	8007926 <quorem+0xee>

08007948 <_dtoa_r>:
 8007948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	69c7      	ldr	r7, [r0, #28]
 800794e:	b099      	sub	sp, #100	@ 0x64
 8007950:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007954:	ec55 4b10 	vmov	r4, r5, d0
 8007958:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800795a:	9109      	str	r1, [sp, #36]	@ 0x24
 800795c:	4683      	mov	fp, r0
 800795e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007960:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007962:	b97f      	cbnz	r7, 8007984 <_dtoa_r+0x3c>
 8007964:	2010      	movs	r0, #16
 8007966:	f000 fdfd 	bl	8008564 <malloc>
 800796a:	4602      	mov	r2, r0
 800796c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007970:	b920      	cbnz	r0, 800797c <_dtoa_r+0x34>
 8007972:	4ba7      	ldr	r3, [pc, #668]	@ (8007c10 <_dtoa_r+0x2c8>)
 8007974:	21ef      	movs	r1, #239	@ 0xef
 8007976:	48a7      	ldr	r0, [pc, #668]	@ (8007c14 <_dtoa_r+0x2cc>)
 8007978:	f7ff ff40 	bl	80077fc <__assert_func>
 800797c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007980:	6007      	str	r7, [r0, #0]
 8007982:	60c7      	str	r7, [r0, #12]
 8007984:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007988:	6819      	ldr	r1, [r3, #0]
 800798a:	b159      	cbz	r1, 80079a4 <_dtoa_r+0x5c>
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	604a      	str	r2, [r1, #4]
 8007990:	2301      	movs	r3, #1
 8007992:	4093      	lsls	r3, r2
 8007994:	608b      	str	r3, [r1, #8]
 8007996:	4658      	mov	r0, fp
 8007998:	f000 feda 	bl	8008750 <_Bfree>
 800799c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80079a0:	2200      	movs	r2, #0
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	1e2b      	subs	r3, r5, #0
 80079a6:	bfb9      	ittee	lt
 80079a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80079ac:	9303      	strlt	r3, [sp, #12]
 80079ae:	2300      	movge	r3, #0
 80079b0:	6033      	strge	r3, [r6, #0]
 80079b2:	9f03      	ldr	r7, [sp, #12]
 80079b4:	4b98      	ldr	r3, [pc, #608]	@ (8007c18 <_dtoa_r+0x2d0>)
 80079b6:	bfbc      	itt	lt
 80079b8:	2201      	movlt	r2, #1
 80079ba:	6032      	strlt	r2, [r6, #0]
 80079bc:	43bb      	bics	r3, r7
 80079be:	d112      	bne.n	80079e6 <_dtoa_r+0x9e>
 80079c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80079c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80079cc:	4323      	orrs	r3, r4
 80079ce:	f000 854d 	beq.w	800846c <_dtoa_r+0xb24>
 80079d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007c2c <_dtoa_r+0x2e4>
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 854f 	beq.w	800847c <_dtoa_r+0xb34>
 80079de:	f10a 0303 	add.w	r3, sl, #3
 80079e2:	f000 bd49 	b.w	8008478 <_dtoa_r+0xb30>
 80079e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079ea:	2200      	movs	r2, #0
 80079ec:	ec51 0b17 	vmov	r0, r1, d7
 80079f0:	2300      	movs	r3, #0
 80079f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80079f6:	f7f9 f87f 	bl	8000af8 <__aeabi_dcmpeq>
 80079fa:	4680      	mov	r8, r0
 80079fc:	b158      	cbz	r0, 8007a16 <_dtoa_r+0xce>
 80079fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007a00:	2301      	movs	r3, #1
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a06:	b113      	cbz	r3, 8007a0e <_dtoa_r+0xc6>
 8007a08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007a0a:	4b84      	ldr	r3, [pc, #528]	@ (8007c1c <_dtoa_r+0x2d4>)
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007c30 <_dtoa_r+0x2e8>
 8007a12:	f000 bd33 	b.w	800847c <_dtoa_r+0xb34>
 8007a16:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007a1a:	aa16      	add	r2, sp, #88	@ 0x58
 8007a1c:	a917      	add	r1, sp, #92	@ 0x5c
 8007a1e:	4658      	mov	r0, fp
 8007a20:	f001 f980 	bl	8008d24 <__d2b>
 8007a24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007a28:	4681      	mov	r9, r0
 8007a2a:	2e00      	cmp	r6, #0
 8007a2c:	d077      	beq.n	8007b1e <_dtoa_r+0x1d6>
 8007a2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a30:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007a40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007a44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007a48:	4619      	mov	r1, r3
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	4b74      	ldr	r3, [pc, #464]	@ (8007c20 <_dtoa_r+0x2d8>)
 8007a4e:	f7f8 fc33 	bl	80002b8 <__aeabi_dsub>
 8007a52:	a369      	add	r3, pc, #420	@ (adr r3, 8007bf8 <_dtoa_r+0x2b0>)
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	f7f8 fde6 	bl	8000628 <__aeabi_dmul>
 8007a5c:	a368      	add	r3, pc, #416	@ (adr r3, 8007c00 <_dtoa_r+0x2b8>)
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	f7f8 fc2b 	bl	80002bc <__adddf3>
 8007a66:	4604      	mov	r4, r0
 8007a68:	4630      	mov	r0, r6
 8007a6a:	460d      	mov	r5, r1
 8007a6c:	f7f8 fd72 	bl	8000554 <__aeabi_i2d>
 8007a70:	a365      	add	r3, pc, #404	@ (adr r3, 8007c08 <_dtoa_r+0x2c0>)
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	f7f8 fdd7 	bl	8000628 <__aeabi_dmul>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4620      	mov	r0, r4
 8007a80:	4629      	mov	r1, r5
 8007a82:	f7f8 fc1b 	bl	80002bc <__adddf3>
 8007a86:	4604      	mov	r4, r0
 8007a88:	460d      	mov	r5, r1
 8007a8a:	f7f9 f87d 	bl	8000b88 <__aeabi_d2iz>
 8007a8e:	2200      	movs	r2, #0
 8007a90:	4607      	mov	r7, r0
 8007a92:	2300      	movs	r3, #0
 8007a94:	4620      	mov	r0, r4
 8007a96:	4629      	mov	r1, r5
 8007a98:	f7f9 f838 	bl	8000b0c <__aeabi_dcmplt>
 8007a9c:	b140      	cbz	r0, 8007ab0 <_dtoa_r+0x168>
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	f7f8 fd58 	bl	8000554 <__aeabi_i2d>
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	462b      	mov	r3, r5
 8007aa8:	f7f9 f826 	bl	8000af8 <__aeabi_dcmpeq>
 8007aac:	b900      	cbnz	r0, 8007ab0 <_dtoa_r+0x168>
 8007aae:	3f01      	subs	r7, #1
 8007ab0:	2f16      	cmp	r7, #22
 8007ab2:	d851      	bhi.n	8007b58 <_dtoa_r+0x210>
 8007ab4:	4b5b      	ldr	r3, [pc, #364]	@ (8007c24 <_dtoa_r+0x2dc>)
 8007ab6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ac2:	f7f9 f823 	bl	8000b0c <__aeabi_dcmplt>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d048      	beq.n	8007b5c <_dtoa_r+0x214>
 8007aca:	3f01      	subs	r7, #1
 8007acc:	2300      	movs	r3, #0
 8007ace:	9312      	str	r3, [sp, #72]	@ 0x48
 8007ad0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007ad2:	1b9b      	subs	r3, r3, r6
 8007ad4:	1e5a      	subs	r2, r3, #1
 8007ad6:	bf44      	itt	mi
 8007ad8:	f1c3 0801 	rsbmi	r8, r3, #1
 8007adc:	2300      	movmi	r3, #0
 8007ade:	9208      	str	r2, [sp, #32]
 8007ae0:	bf54      	ite	pl
 8007ae2:	f04f 0800 	movpl.w	r8, #0
 8007ae6:	9308      	strmi	r3, [sp, #32]
 8007ae8:	2f00      	cmp	r7, #0
 8007aea:	db39      	blt.n	8007b60 <_dtoa_r+0x218>
 8007aec:	9b08      	ldr	r3, [sp, #32]
 8007aee:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007af0:	443b      	add	r3, r7
 8007af2:	9308      	str	r3, [sp, #32]
 8007af4:	2300      	movs	r3, #0
 8007af6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007afa:	2b09      	cmp	r3, #9
 8007afc:	d864      	bhi.n	8007bc8 <_dtoa_r+0x280>
 8007afe:	2b05      	cmp	r3, #5
 8007b00:	bfc4      	itt	gt
 8007b02:	3b04      	subgt	r3, #4
 8007b04:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b08:	f1a3 0302 	sub.w	r3, r3, #2
 8007b0c:	bfcc      	ite	gt
 8007b0e:	2400      	movgt	r4, #0
 8007b10:	2401      	movle	r4, #1
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d863      	bhi.n	8007bde <_dtoa_r+0x296>
 8007b16:	e8df f003 	tbb	[pc, r3]
 8007b1a:	372a      	.short	0x372a
 8007b1c:	5535      	.short	0x5535
 8007b1e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007b22:	441e      	add	r6, r3
 8007b24:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007b28:	2b20      	cmp	r3, #32
 8007b2a:	bfc1      	itttt	gt
 8007b2c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007b30:	409f      	lslgt	r7, r3
 8007b32:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007b36:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007b3a:	bfd6      	itet	le
 8007b3c:	f1c3 0320 	rsble	r3, r3, #32
 8007b40:	ea47 0003 	orrgt.w	r0, r7, r3
 8007b44:	fa04 f003 	lslle.w	r0, r4, r3
 8007b48:	f7f8 fcf4 	bl	8000534 <__aeabi_ui2d>
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007b52:	3e01      	subs	r6, #1
 8007b54:	9214      	str	r2, [sp, #80]	@ 0x50
 8007b56:	e777      	b.n	8007a48 <_dtoa_r+0x100>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e7b8      	b.n	8007ace <_dtoa_r+0x186>
 8007b5c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007b5e:	e7b7      	b.n	8007ad0 <_dtoa_r+0x188>
 8007b60:	427b      	negs	r3, r7
 8007b62:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b64:	2300      	movs	r3, #0
 8007b66:	eba8 0807 	sub.w	r8, r8, r7
 8007b6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b6c:	e7c4      	b.n	8007af8 <_dtoa_r+0x1b0>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	dc35      	bgt.n	8007be4 <_dtoa_r+0x29c>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	9307      	str	r3, [sp, #28]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b82:	e00b      	b.n	8007b9c <_dtoa_r+0x254>
 8007b84:	2301      	movs	r3, #1
 8007b86:	e7f3      	b.n	8007b70 <_dtoa_r+0x228>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b8e:	18fb      	adds	r3, r7, r3
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	3301      	adds	r3, #1
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	9307      	str	r3, [sp, #28]
 8007b98:	bfb8      	it	lt
 8007b9a:	2301      	movlt	r3, #1
 8007b9c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	2204      	movs	r2, #4
 8007ba4:	f102 0514 	add.w	r5, r2, #20
 8007ba8:	429d      	cmp	r5, r3
 8007baa:	d91f      	bls.n	8007bec <_dtoa_r+0x2a4>
 8007bac:	6041      	str	r1, [r0, #4]
 8007bae:	4658      	mov	r0, fp
 8007bb0:	f000 fd8e 	bl	80086d0 <_Balloc>
 8007bb4:	4682      	mov	sl, r0
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d13c      	bne.n	8007c34 <_dtoa_r+0x2ec>
 8007bba:	4b1b      	ldr	r3, [pc, #108]	@ (8007c28 <_dtoa_r+0x2e0>)
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	f240 11af 	movw	r1, #431	@ 0x1af
 8007bc2:	e6d8      	b.n	8007976 <_dtoa_r+0x2e>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e7e0      	b.n	8007b8a <_dtoa_r+0x242>
 8007bc8:	2401      	movs	r4, #1
 8007bca:	2300      	movs	r3, #0
 8007bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bce:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	9307      	str	r3, [sp, #28]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2312      	movs	r3, #18
 8007bdc:	e7d0      	b.n	8007b80 <_dtoa_r+0x238>
 8007bde:	2301      	movs	r3, #1
 8007be0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007be2:	e7f5      	b.n	8007bd0 <_dtoa_r+0x288>
 8007be4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	9307      	str	r3, [sp, #28]
 8007bea:	e7d7      	b.n	8007b9c <_dtoa_r+0x254>
 8007bec:	3101      	adds	r1, #1
 8007bee:	0052      	lsls	r2, r2, #1
 8007bf0:	e7d8      	b.n	8007ba4 <_dtoa_r+0x25c>
 8007bf2:	bf00      	nop
 8007bf4:	f3af 8000 	nop.w
 8007bf8:	636f4361 	.word	0x636f4361
 8007bfc:	3fd287a7 	.word	0x3fd287a7
 8007c00:	8b60c8b3 	.word	0x8b60c8b3
 8007c04:	3fc68a28 	.word	0x3fc68a28
 8007c08:	509f79fb 	.word	0x509f79fb
 8007c0c:	3fd34413 	.word	0x3fd34413
 8007c10:	08009e19 	.word	0x08009e19
 8007c14:	08009ed3 	.word	0x08009ed3
 8007c18:	7ff00000 	.word	0x7ff00000
 8007c1c:	08009df6 	.word	0x08009df6
 8007c20:	3ff80000 	.word	0x3ff80000
 8007c24:	08009fd0 	.word	0x08009fd0
 8007c28:	08009f2b 	.word	0x08009f2b
 8007c2c:	08009ecf 	.word	0x08009ecf
 8007c30:	08009df5 	.word	0x08009df5
 8007c34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c38:	6018      	str	r0, [r3, #0]
 8007c3a:	9b07      	ldr	r3, [sp, #28]
 8007c3c:	2b0e      	cmp	r3, #14
 8007c3e:	f200 80a4 	bhi.w	8007d8a <_dtoa_r+0x442>
 8007c42:	2c00      	cmp	r4, #0
 8007c44:	f000 80a1 	beq.w	8007d8a <_dtoa_r+0x442>
 8007c48:	2f00      	cmp	r7, #0
 8007c4a:	dd33      	ble.n	8007cb4 <_dtoa_r+0x36c>
 8007c4c:	4bad      	ldr	r3, [pc, #692]	@ (8007f04 <_dtoa_r+0x5bc>)
 8007c4e:	f007 020f 	and.w	r2, r7, #15
 8007c52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c56:	ed93 7b00 	vldr	d7, [r3]
 8007c5a:	05f8      	lsls	r0, r7, #23
 8007c5c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007c60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007c64:	d516      	bpl.n	8007c94 <_dtoa_r+0x34c>
 8007c66:	4ba8      	ldr	r3, [pc, #672]	@ (8007f08 <_dtoa_r+0x5c0>)
 8007c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c70:	f7f8 fe04 	bl	800087c <__aeabi_ddiv>
 8007c74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c78:	f004 040f 	and.w	r4, r4, #15
 8007c7c:	2603      	movs	r6, #3
 8007c7e:	4da2      	ldr	r5, [pc, #648]	@ (8007f08 <_dtoa_r+0x5c0>)
 8007c80:	b954      	cbnz	r4, 8007c98 <_dtoa_r+0x350>
 8007c82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c8a:	f7f8 fdf7 	bl	800087c <__aeabi_ddiv>
 8007c8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c92:	e028      	b.n	8007ce6 <_dtoa_r+0x39e>
 8007c94:	2602      	movs	r6, #2
 8007c96:	e7f2      	b.n	8007c7e <_dtoa_r+0x336>
 8007c98:	07e1      	lsls	r1, r4, #31
 8007c9a:	d508      	bpl.n	8007cae <_dtoa_r+0x366>
 8007c9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ca0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ca4:	f7f8 fcc0 	bl	8000628 <__aeabi_dmul>
 8007ca8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cac:	3601      	adds	r6, #1
 8007cae:	1064      	asrs	r4, r4, #1
 8007cb0:	3508      	adds	r5, #8
 8007cb2:	e7e5      	b.n	8007c80 <_dtoa_r+0x338>
 8007cb4:	f000 80d2 	beq.w	8007e5c <_dtoa_r+0x514>
 8007cb8:	427c      	negs	r4, r7
 8007cba:	4b92      	ldr	r3, [pc, #584]	@ (8007f04 <_dtoa_r+0x5bc>)
 8007cbc:	4d92      	ldr	r5, [pc, #584]	@ (8007f08 <_dtoa_r+0x5c0>)
 8007cbe:	f004 020f 	and.w	r2, r4, #15
 8007cc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cce:	f7f8 fcab 	bl	8000628 <__aeabi_dmul>
 8007cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cd6:	1124      	asrs	r4, r4, #4
 8007cd8:	2300      	movs	r3, #0
 8007cda:	2602      	movs	r6, #2
 8007cdc:	2c00      	cmp	r4, #0
 8007cde:	f040 80b2 	bne.w	8007e46 <_dtoa_r+0x4fe>
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1d3      	bne.n	8007c8e <_dtoa_r+0x346>
 8007ce6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ce8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 80b7 	beq.w	8007e60 <_dtoa_r+0x518>
 8007cf2:	4b86      	ldr	r3, [pc, #536]	@ (8007f0c <_dtoa_r+0x5c4>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	f7f8 ff07 	bl	8000b0c <__aeabi_dcmplt>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	f000 80ae 	beq.w	8007e60 <_dtoa_r+0x518>
 8007d04:	9b07      	ldr	r3, [sp, #28]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f000 80aa 	beq.w	8007e60 <_dtoa_r+0x518>
 8007d0c:	9b00      	ldr	r3, [sp, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	dd37      	ble.n	8007d82 <_dtoa_r+0x43a>
 8007d12:	1e7b      	subs	r3, r7, #1
 8007d14:	9304      	str	r3, [sp, #16]
 8007d16:	4620      	mov	r0, r4
 8007d18:	4b7d      	ldr	r3, [pc, #500]	@ (8007f10 <_dtoa_r+0x5c8>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	f7f8 fc83 	bl	8000628 <__aeabi_dmul>
 8007d22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d26:	9c00      	ldr	r4, [sp, #0]
 8007d28:	3601      	adds	r6, #1
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	f7f8 fc12 	bl	8000554 <__aeabi_i2d>
 8007d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d34:	f7f8 fc78 	bl	8000628 <__aeabi_dmul>
 8007d38:	4b76      	ldr	r3, [pc, #472]	@ (8007f14 <_dtoa_r+0x5cc>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f7f8 fabe 	bl	80002bc <__adddf3>
 8007d40:	4605      	mov	r5, r0
 8007d42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007d46:	2c00      	cmp	r4, #0
 8007d48:	f040 808d 	bne.w	8007e66 <_dtoa_r+0x51e>
 8007d4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d50:	4b71      	ldr	r3, [pc, #452]	@ (8007f18 <_dtoa_r+0x5d0>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	f7f8 fab0 	bl	80002b8 <__aeabi_dsub>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d60:	462a      	mov	r2, r5
 8007d62:	4633      	mov	r3, r6
 8007d64:	f7f8 fef0 	bl	8000b48 <__aeabi_dcmpgt>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	f040 828b 	bne.w	8008284 <_dtoa_r+0x93c>
 8007d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d72:	462a      	mov	r2, r5
 8007d74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007d78:	f7f8 fec8 	bl	8000b0c <__aeabi_dcmplt>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	f040 8128 	bne.w	8007fd2 <_dtoa_r+0x68a>
 8007d82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007d86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007d8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f2c0 815a 	blt.w	8008046 <_dtoa_r+0x6fe>
 8007d92:	2f0e      	cmp	r7, #14
 8007d94:	f300 8157 	bgt.w	8008046 <_dtoa_r+0x6fe>
 8007d98:	4b5a      	ldr	r3, [pc, #360]	@ (8007f04 <_dtoa_r+0x5bc>)
 8007d9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d9e:	ed93 7b00 	vldr	d7, [r3]
 8007da2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	ed8d 7b00 	vstr	d7, [sp]
 8007daa:	da03      	bge.n	8007db4 <_dtoa_r+0x46c>
 8007dac:	9b07      	ldr	r3, [sp, #28]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f340 8101 	ble.w	8007fb6 <_dtoa_r+0x66e>
 8007db4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007db8:	4656      	mov	r6, sl
 8007dba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	f7f8 fd5b 	bl	800087c <__aeabi_ddiv>
 8007dc6:	f7f8 fedf 	bl	8000b88 <__aeabi_d2iz>
 8007dca:	4680      	mov	r8, r0
 8007dcc:	f7f8 fbc2 	bl	8000554 <__aeabi_i2d>
 8007dd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dd4:	f7f8 fc28 	bl	8000628 <__aeabi_dmul>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4620      	mov	r0, r4
 8007dde:	4629      	mov	r1, r5
 8007de0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007de4:	f7f8 fa68 	bl	80002b8 <__aeabi_dsub>
 8007de8:	f806 4b01 	strb.w	r4, [r6], #1
 8007dec:	9d07      	ldr	r5, [sp, #28]
 8007dee:	eba6 040a 	sub.w	r4, r6, sl
 8007df2:	42a5      	cmp	r5, r4
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	f040 8117 	bne.w	800802a <_dtoa_r+0x6e2>
 8007dfc:	f7f8 fa5e 	bl	80002bc <__adddf3>
 8007e00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e04:	4604      	mov	r4, r0
 8007e06:	460d      	mov	r5, r1
 8007e08:	f7f8 fe9e 	bl	8000b48 <__aeabi_dcmpgt>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	f040 80f9 	bne.w	8008004 <_dtoa_r+0x6bc>
 8007e12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e16:	4620      	mov	r0, r4
 8007e18:	4629      	mov	r1, r5
 8007e1a:	f7f8 fe6d 	bl	8000af8 <__aeabi_dcmpeq>
 8007e1e:	b118      	cbz	r0, 8007e28 <_dtoa_r+0x4e0>
 8007e20:	f018 0f01 	tst.w	r8, #1
 8007e24:	f040 80ee 	bne.w	8008004 <_dtoa_r+0x6bc>
 8007e28:	4649      	mov	r1, r9
 8007e2a:	4658      	mov	r0, fp
 8007e2c:	f000 fc90 	bl	8008750 <_Bfree>
 8007e30:	2300      	movs	r3, #0
 8007e32:	7033      	strb	r3, [r6, #0]
 8007e34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007e36:	3701      	adds	r7, #1
 8007e38:	601f      	str	r7, [r3, #0]
 8007e3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 831d 	beq.w	800847c <_dtoa_r+0xb34>
 8007e42:	601e      	str	r6, [r3, #0]
 8007e44:	e31a      	b.n	800847c <_dtoa_r+0xb34>
 8007e46:	07e2      	lsls	r2, r4, #31
 8007e48:	d505      	bpl.n	8007e56 <_dtoa_r+0x50e>
 8007e4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e4e:	f7f8 fbeb 	bl	8000628 <__aeabi_dmul>
 8007e52:	3601      	adds	r6, #1
 8007e54:	2301      	movs	r3, #1
 8007e56:	1064      	asrs	r4, r4, #1
 8007e58:	3508      	adds	r5, #8
 8007e5a:	e73f      	b.n	8007cdc <_dtoa_r+0x394>
 8007e5c:	2602      	movs	r6, #2
 8007e5e:	e742      	b.n	8007ce6 <_dtoa_r+0x39e>
 8007e60:	9c07      	ldr	r4, [sp, #28]
 8007e62:	9704      	str	r7, [sp, #16]
 8007e64:	e761      	b.n	8007d2a <_dtoa_r+0x3e2>
 8007e66:	4b27      	ldr	r3, [pc, #156]	@ (8007f04 <_dtoa_r+0x5bc>)
 8007e68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e6e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e72:	4454      	add	r4, sl
 8007e74:	2900      	cmp	r1, #0
 8007e76:	d053      	beq.n	8007f20 <_dtoa_r+0x5d8>
 8007e78:	4928      	ldr	r1, [pc, #160]	@ (8007f1c <_dtoa_r+0x5d4>)
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	f7f8 fcfe 	bl	800087c <__aeabi_ddiv>
 8007e80:	4633      	mov	r3, r6
 8007e82:	462a      	mov	r2, r5
 8007e84:	f7f8 fa18 	bl	80002b8 <__aeabi_dsub>
 8007e88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e8c:	4656      	mov	r6, sl
 8007e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e92:	f7f8 fe79 	bl	8000b88 <__aeabi_d2iz>
 8007e96:	4605      	mov	r5, r0
 8007e98:	f7f8 fb5c 	bl	8000554 <__aeabi_i2d>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ea4:	f7f8 fa08 	bl	80002b8 <__aeabi_dsub>
 8007ea8:	3530      	adds	r5, #48	@ 0x30
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007eb2:	f806 5b01 	strb.w	r5, [r6], #1
 8007eb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007eba:	f7f8 fe27 	bl	8000b0c <__aeabi_dcmplt>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d171      	bne.n	8007fa6 <_dtoa_r+0x65e>
 8007ec2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ec6:	4911      	ldr	r1, [pc, #68]	@ (8007f0c <_dtoa_r+0x5c4>)
 8007ec8:	2000      	movs	r0, #0
 8007eca:	f7f8 f9f5 	bl	80002b8 <__aeabi_dsub>
 8007ece:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ed2:	f7f8 fe1b 	bl	8000b0c <__aeabi_dcmplt>
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	f040 8095 	bne.w	8008006 <_dtoa_r+0x6be>
 8007edc:	42a6      	cmp	r6, r4
 8007ede:	f43f af50 	beq.w	8007d82 <_dtoa_r+0x43a>
 8007ee2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8007f10 <_dtoa_r+0x5c8>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f7f8 fb9d 	bl	8000628 <__aeabi_dmul>
 8007eee:	4b08      	ldr	r3, [pc, #32]	@ (8007f10 <_dtoa_r+0x5c8>)
 8007ef0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007efa:	f7f8 fb95 	bl	8000628 <__aeabi_dmul>
 8007efe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f02:	e7c4      	b.n	8007e8e <_dtoa_r+0x546>
 8007f04:	08009fd0 	.word	0x08009fd0
 8007f08:	08009fa8 	.word	0x08009fa8
 8007f0c:	3ff00000 	.word	0x3ff00000
 8007f10:	40240000 	.word	0x40240000
 8007f14:	401c0000 	.word	0x401c0000
 8007f18:	40140000 	.word	0x40140000
 8007f1c:	3fe00000 	.word	0x3fe00000
 8007f20:	4631      	mov	r1, r6
 8007f22:	4628      	mov	r0, r5
 8007f24:	f7f8 fb80 	bl	8000628 <__aeabi_dmul>
 8007f28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f2c:	9415      	str	r4, [sp, #84]	@ 0x54
 8007f2e:	4656      	mov	r6, sl
 8007f30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f34:	f7f8 fe28 	bl	8000b88 <__aeabi_d2iz>
 8007f38:	4605      	mov	r5, r0
 8007f3a:	f7f8 fb0b 	bl	8000554 <__aeabi_i2d>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f46:	f7f8 f9b7 	bl	80002b8 <__aeabi_dsub>
 8007f4a:	3530      	adds	r5, #48	@ 0x30
 8007f4c:	f806 5b01 	strb.w	r5, [r6], #1
 8007f50:	4602      	mov	r2, r0
 8007f52:	460b      	mov	r3, r1
 8007f54:	42a6      	cmp	r6, r4
 8007f56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f5a:	f04f 0200 	mov.w	r2, #0
 8007f5e:	d124      	bne.n	8007faa <_dtoa_r+0x662>
 8007f60:	4bac      	ldr	r3, [pc, #688]	@ (8008214 <_dtoa_r+0x8cc>)
 8007f62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f66:	f7f8 f9a9 	bl	80002bc <__adddf3>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f72:	f7f8 fde9 	bl	8000b48 <__aeabi_dcmpgt>
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d145      	bne.n	8008006 <_dtoa_r+0x6be>
 8007f7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f7e:	49a5      	ldr	r1, [pc, #660]	@ (8008214 <_dtoa_r+0x8cc>)
 8007f80:	2000      	movs	r0, #0
 8007f82:	f7f8 f999 	bl	80002b8 <__aeabi_dsub>
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f8e:	f7f8 fdbd 	bl	8000b0c <__aeabi_dcmplt>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	f43f aef5 	beq.w	8007d82 <_dtoa_r+0x43a>
 8007f98:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007f9a:	1e73      	subs	r3, r6, #1
 8007f9c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007fa2:	2b30      	cmp	r3, #48	@ 0x30
 8007fa4:	d0f8      	beq.n	8007f98 <_dtoa_r+0x650>
 8007fa6:	9f04      	ldr	r7, [sp, #16]
 8007fa8:	e73e      	b.n	8007e28 <_dtoa_r+0x4e0>
 8007faa:	4b9b      	ldr	r3, [pc, #620]	@ (8008218 <_dtoa_r+0x8d0>)
 8007fac:	f7f8 fb3c 	bl	8000628 <__aeabi_dmul>
 8007fb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fb4:	e7bc      	b.n	8007f30 <_dtoa_r+0x5e8>
 8007fb6:	d10c      	bne.n	8007fd2 <_dtoa_r+0x68a>
 8007fb8:	4b98      	ldr	r3, [pc, #608]	@ (800821c <_dtoa_r+0x8d4>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fc0:	f7f8 fb32 	bl	8000628 <__aeabi_dmul>
 8007fc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fc8:	f7f8 fdb4 	bl	8000b34 <__aeabi_dcmpge>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	f000 8157 	beq.w	8008280 <_dtoa_r+0x938>
 8007fd2:	2400      	movs	r4, #0
 8007fd4:	4625      	mov	r5, r4
 8007fd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fd8:	43db      	mvns	r3, r3
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	4656      	mov	r6, sl
 8007fde:	2700      	movs	r7, #0
 8007fe0:	4621      	mov	r1, r4
 8007fe2:	4658      	mov	r0, fp
 8007fe4:	f000 fbb4 	bl	8008750 <_Bfree>
 8007fe8:	2d00      	cmp	r5, #0
 8007fea:	d0dc      	beq.n	8007fa6 <_dtoa_r+0x65e>
 8007fec:	b12f      	cbz	r7, 8007ffa <_dtoa_r+0x6b2>
 8007fee:	42af      	cmp	r7, r5
 8007ff0:	d003      	beq.n	8007ffa <_dtoa_r+0x6b2>
 8007ff2:	4639      	mov	r1, r7
 8007ff4:	4658      	mov	r0, fp
 8007ff6:	f000 fbab 	bl	8008750 <_Bfree>
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	4658      	mov	r0, fp
 8007ffe:	f000 fba7 	bl	8008750 <_Bfree>
 8008002:	e7d0      	b.n	8007fa6 <_dtoa_r+0x65e>
 8008004:	9704      	str	r7, [sp, #16]
 8008006:	4633      	mov	r3, r6
 8008008:	461e      	mov	r6, r3
 800800a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800800e:	2a39      	cmp	r2, #57	@ 0x39
 8008010:	d107      	bne.n	8008022 <_dtoa_r+0x6da>
 8008012:	459a      	cmp	sl, r3
 8008014:	d1f8      	bne.n	8008008 <_dtoa_r+0x6c0>
 8008016:	9a04      	ldr	r2, [sp, #16]
 8008018:	3201      	adds	r2, #1
 800801a:	9204      	str	r2, [sp, #16]
 800801c:	2230      	movs	r2, #48	@ 0x30
 800801e:	f88a 2000 	strb.w	r2, [sl]
 8008022:	781a      	ldrb	r2, [r3, #0]
 8008024:	3201      	adds	r2, #1
 8008026:	701a      	strb	r2, [r3, #0]
 8008028:	e7bd      	b.n	8007fa6 <_dtoa_r+0x65e>
 800802a:	4b7b      	ldr	r3, [pc, #492]	@ (8008218 <_dtoa_r+0x8d0>)
 800802c:	2200      	movs	r2, #0
 800802e:	f7f8 fafb 	bl	8000628 <__aeabi_dmul>
 8008032:	2200      	movs	r2, #0
 8008034:	2300      	movs	r3, #0
 8008036:	4604      	mov	r4, r0
 8008038:	460d      	mov	r5, r1
 800803a:	f7f8 fd5d 	bl	8000af8 <__aeabi_dcmpeq>
 800803e:	2800      	cmp	r0, #0
 8008040:	f43f aebb 	beq.w	8007dba <_dtoa_r+0x472>
 8008044:	e6f0      	b.n	8007e28 <_dtoa_r+0x4e0>
 8008046:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008048:	2a00      	cmp	r2, #0
 800804a:	f000 80db 	beq.w	8008204 <_dtoa_r+0x8bc>
 800804e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008050:	2a01      	cmp	r2, #1
 8008052:	f300 80bf 	bgt.w	80081d4 <_dtoa_r+0x88c>
 8008056:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008058:	2a00      	cmp	r2, #0
 800805a:	f000 80b7 	beq.w	80081cc <_dtoa_r+0x884>
 800805e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008062:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008064:	4646      	mov	r6, r8
 8008066:	9a08      	ldr	r2, [sp, #32]
 8008068:	2101      	movs	r1, #1
 800806a:	441a      	add	r2, r3
 800806c:	4658      	mov	r0, fp
 800806e:	4498      	add	r8, r3
 8008070:	9208      	str	r2, [sp, #32]
 8008072:	f000 fc21 	bl	80088b8 <__i2b>
 8008076:	4605      	mov	r5, r0
 8008078:	b15e      	cbz	r6, 8008092 <_dtoa_r+0x74a>
 800807a:	9b08      	ldr	r3, [sp, #32]
 800807c:	2b00      	cmp	r3, #0
 800807e:	dd08      	ble.n	8008092 <_dtoa_r+0x74a>
 8008080:	42b3      	cmp	r3, r6
 8008082:	9a08      	ldr	r2, [sp, #32]
 8008084:	bfa8      	it	ge
 8008086:	4633      	movge	r3, r6
 8008088:	eba8 0803 	sub.w	r8, r8, r3
 800808c:	1af6      	subs	r6, r6, r3
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	9308      	str	r3, [sp, #32]
 8008092:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008094:	b1f3      	cbz	r3, 80080d4 <_dtoa_r+0x78c>
 8008096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 80b7 	beq.w	800820c <_dtoa_r+0x8c4>
 800809e:	b18c      	cbz	r4, 80080c4 <_dtoa_r+0x77c>
 80080a0:	4629      	mov	r1, r5
 80080a2:	4622      	mov	r2, r4
 80080a4:	4658      	mov	r0, fp
 80080a6:	f000 fcc7 	bl	8008a38 <__pow5mult>
 80080aa:	464a      	mov	r2, r9
 80080ac:	4601      	mov	r1, r0
 80080ae:	4605      	mov	r5, r0
 80080b0:	4658      	mov	r0, fp
 80080b2:	f000 fc17 	bl	80088e4 <__multiply>
 80080b6:	4649      	mov	r1, r9
 80080b8:	9004      	str	r0, [sp, #16]
 80080ba:	4658      	mov	r0, fp
 80080bc:	f000 fb48 	bl	8008750 <_Bfree>
 80080c0:	9b04      	ldr	r3, [sp, #16]
 80080c2:	4699      	mov	r9, r3
 80080c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080c6:	1b1a      	subs	r2, r3, r4
 80080c8:	d004      	beq.n	80080d4 <_dtoa_r+0x78c>
 80080ca:	4649      	mov	r1, r9
 80080cc:	4658      	mov	r0, fp
 80080ce:	f000 fcb3 	bl	8008a38 <__pow5mult>
 80080d2:	4681      	mov	r9, r0
 80080d4:	2101      	movs	r1, #1
 80080d6:	4658      	mov	r0, fp
 80080d8:	f000 fbee 	bl	80088b8 <__i2b>
 80080dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080de:	4604      	mov	r4, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 81cf 	beq.w	8008484 <_dtoa_r+0xb3c>
 80080e6:	461a      	mov	r2, r3
 80080e8:	4601      	mov	r1, r0
 80080ea:	4658      	mov	r0, fp
 80080ec:	f000 fca4 	bl	8008a38 <__pow5mult>
 80080f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	4604      	mov	r4, r0
 80080f6:	f300 8095 	bgt.w	8008224 <_dtoa_r+0x8dc>
 80080fa:	9b02      	ldr	r3, [sp, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f040 8087 	bne.w	8008210 <_dtoa_r+0x8c8>
 8008102:	9b03      	ldr	r3, [sp, #12]
 8008104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008108:	2b00      	cmp	r3, #0
 800810a:	f040 8089 	bne.w	8008220 <_dtoa_r+0x8d8>
 800810e:	9b03      	ldr	r3, [sp, #12]
 8008110:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008114:	0d1b      	lsrs	r3, r3, #20
 8008116:	051b      	lsls	r3, r3, #20
 8008118:	b12b      	cbz	r3, 8008126 <_dtoa_r+0x7de>
 800811a:	9b08      	ldr	r3, [sp, #32]
 800811c:	3301      	adds	r3, #1
 800811e:	9308      	str	r3, [sp, #32]
 8008120:	f108 0801 	add.w	r8, r8, #1
 8008124:	2301      	movs	r3, #1
 8008126:	930a      	str	r3, [sp, #40]	@ 0x28
 8008128:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 81b0 	beq.w	8008490 <_dtoa_r+0xb48>
 8008130:	6923      	ldr	r3, [r4, #16]
 8008132:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008136:	6918      	ldr	r0, [r3, #16]
 8008138:	f000 fb72 	bl	8008820 <__hi0bits>
 800813c:	f1c0 0020 	rsb	r0, r0, #32
 8008140:	9b08      	ldr	r3, [sp, #32]
 8008142:	4418      	add	r0, r3
 8008144:	f010 001f 	ands.w	r0, r0, #31
 8008148:	d077      	beq.n	800823a <_dtoa_r+0x8f2>
 800814a:	f1c0 0320 	rsb	r3, r0, #32
 800814e:	2b04      	cmp	r3, #4
 8008150:	dd6b      	ble.n	800822a <_dtoa_r+0x8e2>
 8008152:	9b08      	ldr	r3, [sp, #32]
 8008154:	f1c0 001c 	rsb	r0, r0, #28
 8008158:	4403      	add	r3, r0
 800815a:	4480      	add	r8, r0
 800815c:	4406      	add	r6, r0
 800815e:	9308      	str	r3, [sp, #32]
 8008160:	f1b8 0f00 	cmp.w	r8, #0
 8008164:	dd05      	ble.n	8008172 <_dtoa_r+0x82a>
 8008166:	4649      	mov	r1, r9
 8008168:	4642      	mov	r2, r8
 800816a:	4658      	mov	r0, fp
 800816c:	f000 fcbe 	bl	8008aec <__lshift>
 8008170:	4681      	mov	r9, r0
 8008172:	9b08      	ldr	r3, [sp, #32]
 8008174:	2b00      	cmp	r3, #0
 8008176:	dd05      	ble.n	8008184 <_dtoa_r+0x83c>
 8008178:	4621      	mov	r1, r4
 800817a:	461a      	mov	r2, r3
 800817c:	4658      	mov	r0, fp
 800817e:	f000 fcb5 	bl	8008aec <__lshift>
 8008182:	4604      	mov	r4, r0
 8008184:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008186:	2b00      	cmp	r3, #0
 8008188:	d059      	beq.n	800823e <_dtoa_r+0x8f6>
 800818a:	4621      	mov	r1, r4
 800818c:	4648      	mov	r0, r9
 800818e:	f000 fd19 	bl	8008bc4 <__mcmp>
 8008192:	2800      	cmp	r0, #0
 8008194:	da53      	bge.n	800823e <_dtoa_r+0x8f6>
 8008196:	1e7b      	subs	r3, r7, #1
 8008198:	9304      	str	r3, [sp, #16]
 800819a:	4649      	mov	r1, r9
 800819c:	2300      	movs	r3, #0
 800819e:	220a      	movs	r2, #10
 80081a0:	4658      	mov	r0, fp
 80081a2:	f000 faf7 	bl	8008794 <__multadd>
 80081a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081a8:	4681      	mov	r9, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f000 8172 	beq.w	8008494 <_dtoa_r+0xb4c>
 80081b0:	2300      	movs	r3, #0
 80081b2:	4629      	mov	r1, r5
 80081b4:	220a      	movs	r2, #10
 80081b6:	4658      	mov	r0, fp
 80081b8:	f000 faec 	bl	8008794 <__multadd>
 80081bc:	9b00      	ldr	r3, [sp, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	4605      	mov	r5, r0
 80081c2:	dc67      	bgt.n	8008294 <_dtoa_r+0x94c>
 80081c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	dc41      	bgt.n	800824e <_dtoa_r+0x906>
 80081ca:	e063      	b.n	8008294 <_dtoa_r+0x94c>
 80081cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80081ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80081d2:	e746      	b.n	8008062 <_dtoa_r+0x71a>
 80081d4:	9b07      	ldr	r3, [sp, #28]
 80081d6:	1e5c      	subs	r4, r3, #1
 80081d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081da:	42a3      	cmp	r3, r4
 80081dc:	bfbf      	itttt	lt
 80081de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80081e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80081e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80081e4:	1ae3      	sublt	r3, r4, r3
 80081e6:	bfb4      	ite	lt
 80081e8:	18d2      	addlt	r2, r2, r3
 80081ea:	1b1c      	subge	r4, r3, r4
 80081ec:	9b07      	ldr	r3, [sp, #28]
 80081ee:	bfbc      	itt	lt
 80081f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80081f2:	2400      	movlt	r4, #0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bfb5      	itete	lt
 80081f8:	eba8 0603 	sublt.w	r6, r8, r3
 80081fc:	9b07      	ldrge	r3, [sp, #28]
 80081fe:	2300      	movlt	r3, #0
 8008200:	4646      	movge	r6, r8
 8008202:	e730      	b.n	8008066 <_dtoa_r+0x71e>
 8008204:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008206:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008208:	4646      	mov	r6, r8
 800820a:	e735      	b.n	8008078 <_dtoa_r+0x730>
 800820c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800820e:	e75c      	b.n	80080ca <_dtoa_r+0x782>
 8008210:	2300      	movs	r3, #0
 8008212:	e788      	b.n	8008126 <_dtoa_r+0x7de>
 8008214:	3fe00000 	.word	0x3fe00000
 8008218:	40240000 	.word	0x40240000
 800821c:	40140000 	.word	0x40140000
 8008220:	9b02      	ldr	r3, [sp, #8]
 8008222:	e780      	b.n	8008126 <_dtoa_r+0x7de>
 8008224:	2300      	movs	r3, #0
 8008226:	930a      	str	r3, [sp, #40]	@ 0x28
 8008228:	e782      	b.n	8008130 <_dtoa_r+0x7e8>
 800822a:	d099      	beq.n	8008160 <_dtoa_r+0x818>
 800822c:	9a08      	ldr	r2, [sp, #32]
 800822e:	331c      	adds	r3, #28
 8008230:	441a      	add	r2, r3
 8008232:	4498      	add	r8, r3
 8008234:	441e      	add	r6, r3
 8008236:	9208      	str	r2, [sp, #32]
 8008238:	e792      	b.n	8008160 <_dtoa_r+0x818>
 800823a:	4603      	mov	r3, r0
 800823c:	e7f6      	b.n	800822c <_dtoa_r+0x8e4>
 800823e:	9b07      	ldr	r3, [sp, #28]
 8008240:	9704      	str	r7, [sp, #16]
 8008242:	2b00      	cmp	r3, #0
 8008244:	dc20      	bgt.n	8008288 <_dtoa_r+0x940>
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800824a:	2b02      	cmp	r3, #2
 800824c:	dd1e      	ble.n	800828c <_dtoa_r+0x944>
 800824e:	9b00      	ldr	r3, [sp, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	f47f aec0 	bne.w	8007fd6 <_dtoa_r+0x68e>
 8008256:	4621      	mov	r1, r4
 8008258:	2205      	movs	r2, #5
 800825a:	4658      	mov	r0, fp
 800825c:	f000 fa9a 	bl	8008794 <__multadd>
 8008260:	4601      	mov	r1, r0
 8008262:	4604      	mov	r4, r0
 8008264:	4648      	mov	r0, r9
 8008266:	f000 fcad 	bl	8008bc4 <__mcmp>
 800826a:	2800      	cmp	r0, #0
 800826c:	f77f aeb3 	ble.w	8007fd6 <_dtoa_r+0x68e>
 8008270:	4656      	mov	r6, sl
 8008272:	2331      	movs	r3, #49	@ 0x31
 8008274:	f806 3b01 	strb.w	r3, [r6], #1
 8008278:	9b04      	ldr	r3, [sp, #16]
 800827a:	3301      	adds	r3, #1
 800827c:	9304      	str	r3, [sp, #16]
 800827e:	e6ae      	b.n	8007fde <_dtoa_r+0x696>
 8008280:	9c07      	ldr	r4, [sp, #28]
 8008282:	9704      	str	r7, [sp, #16]
 8008284:	4625      	mov	r5, r4
 8008286:	e7f3      	b.n	8008270 <_dtoa_r+0x928>
 8008288:	9b07      	ldr	r3, [sp, #28]
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 8104 	beq.w	800849c <_dtoa_r+0xb54>
 8008294:	2e00      	cmp	r6, #0
 8008296:	dd05      	ble.n	80082a4 <_dtoa_r+0x95c>
 8008298:	4629      	mov	r1, r5
 800829a:	4632      	mov	r2, r6
 800829c:	4658      	mov	r0, fp
 800829e:	f000 fc25 	bl	8008aec <__lshift>
 80082a2:	4605      	mov	r5, r0
 80082a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d05a      	beq.n	8008360 <_dtoa_r+0xa18>
 80082aa:	6869      	ldr	r1, [r5, #4]
 80082ac:	4658      	mov	r0, fp
 80082ae:	f000 fa0f 	bl	80086d0 <_Balloc>
 80082b2:	4606      	mov	r6, r0
 80082b4:	b928      	cbnz	r0, 80082c2 <_dtoa_r+0x97a>
 80082b6:	4b84      	ldr	r3, [pc, #528]	@ (80084c8 <_dtoa_r+0xb80>)
 80082b8:	4602      	mov	r2, r0
 80082ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80082be:	f7ff bb5a 	b.w	8007976 <_dtoa_r+0x2e>
 80082c2:	692a      	ldr	r2, [r5, #16]
 80082c4:	3202      	adds	r2, #2
 80082c6:	0092      	lsls	r2, r2, #2
 80082c8:	f105 010c 	add.w	r1, r5, #12
 80082cc:	300c      	adds	r0, #12
 80082ce:	f000 ffc1 	bl	8009254 <memcpy>
 80082d2:	2201      	movs	r2, #1
 80082d4:	4631      	mov	r1, r6
 80082d6:	4658      	mov	r0, fp
 80082d8:	f000 fc08 	bl	8008aec <__lshift>
 80082dc:	f10a 0301 	add.w	r3, sl, #1
 80082e0:	9307      	str	r3, [sp, #28]
 80082e2:	9b00      	ldr	r3, [sp, #0]
 80082e4:	4453      	add	r3, sl
 80082e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082e8:	9b02      	ldr	r3, [sp, #8]
 80082ea:	f003 0301 	and.w	r3, r3, #1
 80082ee:	462f      	mov	r7, r5
 80082f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80082f2:	4605      	mov	r5, r0
 80082f4:	9b07      	ldr	r3, [sp, #28]
 80082f6:	4621      	mov	r1, r4
 80082f8:	3b01      	subs	r3, #1
 80082fa:	4648      	mov	r0, r9
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	f7ff fa9b 	bl	8007838 <quorem>
 8008302:	4639      	mov	r1, r7
 8008304:	9002      	str	r0, [sp, #8]
 8008306:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800830a:	4648      	mov	r0, r9
 800830c:	f000 fc5a 	bl	8008bc4 <__mcmp>
 8008310:	462a      	mov	r2, r5
 8008312:	9008      	str	r0, [sp, #32]
 8008314:	4621      	mov	r1, r4
 8008316:	4658      	mov	r0, fp
 8008318:	f000 fc70 	bl	8008bfc <__mdiff>
 800831c:	68c2      	ldr	r2, [r0, #12]
 800831e:	4606      	mov	r6, r0
 8008320:	bb02      	cbnz	r2, 8008364 <_dtoa_r+0xa1c>
 8008322:	4601      	mov	r1, r0
 8008324:	4648      	mov	r0, r9
 8008326:	f000 fc4d 	bl	8008bc4 <__mcmp>
 800832a:	4602      	mov	r2, r0
 800832c:	4631      	mov	r1, r6
 800832e:	4658      	mov	r0, fp
 8008330:	920e      	str	r2, [sp, #56]	@ 0x38
 8008332:	f000 fa0d 	bl	8008750 <_Bfree>
 8008336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008338:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800833a:	9e07      	ldr	r6, [sp, #28]
 800833c:	ea43 0102 	orr.w	r1, r3, r2
 8008340:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008342:	4319      	orrs	r1, r3
 8008344:	d110      	bne.n	8008368 <_dtoa_r+0xa20>
 8008346:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800834a:	d029      	beq.n	80083a0 <_dtoa_r+0xa58>
 800834c:	9b08      	ldr	r3, [sp, #32]
 800834e:	2b00      	cmp	r3, #0
 8008350:	dd02      	ble.n	8008358 <_dtoa_r+0xa10>
 8008352:	9b02      	ldr	r3, [sp, #8]
 8008354:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008358:	9b00      	ldr	r3, [sp, #0]
 800835a:	f883 8000 	strb.w	r8, [r3]
 800835e:	e63f      	b.n	8007fe0 <_dtoa_r+0x698>
 8008360:	4628      	mov	r0, r5
 8008362:	e7bb      	b.n	80082dc <_dtoa_r+0x994>
 8008364:	2201      	movs	r2, #1
 8008366:	e7e1      	b.n	800832c <_dtoa_r+0x9e4>
 8008368:	9b08      	ldr	r3, [sp, #32]
 800836a:	2b00      	cmp	r3, #0
 800836c:	db04      	blt.n	8008378 <_dtoa_r+0xa30>
 800836e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008370:	430b      	orrs	r3, r1
 8008372:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008374:	430b      	orrs	r3, r1
 8008376:	d120      	bne.n	80083ba <_dtoa_r+0xa72>
 8008378:	2a00      	cmp	r2, #0
 800837a:	dded      	ble.n	8008358 <_dtoa_r+0xa10>
 800837c:	4649      	mov	r1, r9
 800837e:	2201      	movs	r2, #1
 8008380:	4658      	mov	r0, fp
 8008382:	f000 fbb3 	bl	8008aec <__lshift>
 8008386:	4621      	mov	r1, r4
 8008388:	4681      	mov	r9, r0
 800838a:	f000 fc1b 	bl	8008bc4 <__mcmp>
 800838e:	2800      	cmp	r0, #0
 8008390:	dc03      	bgt.n	800839a <_dtoa_r+0xa52>
 8008392:	d1e1      	bne.n	8008358 <_dtoa_r+0xa10>
 8008394:	f018 0f01 	tst.w	r8, #1
 8008398:	d0de      	beq.n	8008358 <_dtoa_r+0xa10>
 800839a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800839e:	d1d8      	bne.n	8008352 <_dtoa_r+0xa0a>
 80083a0:	9a00      	ldr	r2, [sp, #0]
 80083a2:	2339      	movs	r3, #57	@ 0x39
 80083a4:	7013      	strb	r3, [r2, #0]
 80083a6:	4633      	mov	r3, r6
 80083a8:	461e      	mov	r6, r3
 80083aa:	3b01      	subs	r3, #1
 80083ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80083b0:	2a39      	cmp	r2, #57	@ 0x39
 80083b2:	d052      	beq.n	800845a <_dtoa_r+0xb12>
 80083b4:	3201      	adds	r2, #1
 80083b6:	701a      	strb	r2, [r3, #0]
 80083b8:	e612      	b.n	8007fe0 <_dtoa_r+0x698>
 80083ba:	2a00      	cmp	r2, #0
 80083bc:	dd07      	ble.n	80083ce <_dtoa_r+0xa86>
 80083be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80083c2:	d0ed      	beq.n	80083a0 <_dtoa_r+0xa58>
 80083c4:	9a00      	ldr	r2, [sp, #0]
 80083c6:	f108 0301 	add.w	r3, r8, #1
 80083ca:	7013      	strb	r3, [r2, #0]
 80083cc:	e608      	b.n	8007fe0 <_dtoa_r+0x698>
 80083ce:	9b07      	ldr	r3, [sp, #28]
 80083d0:	9a07      	ldr	r2, [sp, #28]
 80083d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80083d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083d8:	4293      	cmp	r3, r2
 80083da:	d028      	beq.n	800842e <_dtoa_r+0xae6>
 80083dc:	4649      	mov	r1, r9
 80083de:	2300      	movs	r3, #0
 80083e0:	220a      	movs	r2, #10
 80083e2:	4658      	mov	r0, fp
 80083e4:	f000 f9d6 	bl	8008794 <__multadd>
 80083e8:	42af      	cmp	r7, r5
 80083ea:	4681      	mov	r9, r0
 80083ec:	f04f 0300 	mov.w	r3, #0
 80083f0:	f04f 020a 	mov.w	r2, #10
 80083f4:	4639      	mov	r1, r7
 80083f6:	4658      	mov	r0, fp
 80083f8:	d107      	bne.n	800840a <_dtoa_r+0xac2>
 80083fa:	f000 f9cb 	bl	8008794 <__multadd>
 80083fe:	4607      	mov	r7, r0
 8008400:	4605      	mov	r5, r0
 8008402:	9b07      	ldr	r3, [sp, #28]
 8008404:	3301      	adds	r3, #1
 8008406:	9307      	str	r3, [sp, #28]
 8008408:	e774      	b.n	80082f4 <_dtoa_r+0x9ac>
 800840a:	f000 f9c3 	bl	8008794 <__multadd>
 800840e:	4629      	mov	r1, r5
 8008410:	4607      	mov	r7, r0
 8008412:	2300      	movs	r3, #0
 8008414:	220a      	movs	r2, #10
 8008416:	4658      	mov	r0, fp
 8008418:	f000 f9bc 	bl	8008794 <__multadd>
 800841c:	4605      	mov	r5, r0
 800841e:	e7f0      	b.n	8008402 <_dtoa_r+0xaba>
 8008420:	9b00      	ldr	r3, [sp, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	bfcc      	ite	gt
 8008426:	461e      	movgt	r6, r3
 8008428:	2601      	movle	r6, #1
 800842a:	4456      	add	r6, sl
 800842c:	2700      	movs	r7, #0
 800842e:	4649      	mov	r1, r9
 8008430:	2201      	movs	r2, #1
 8008432:	4658      	mov	r0, fp
 8008434:	f000 fb5a 	bl	8008aec <__lshift>
 8008438:	4621      	mov	r1, r4
 800843a:	4681      	mov	r9, r0
 800843c:	f000 fbc2 	bl	8008bc4 <__mcmp>
 8008440:	2800      	cmp	r0, #0
 8008442:	dcb0      	bgt.n	80083a6 <_dtoa_r+0xa5e>
 8008444:	d102      	bne.n	800844c <_dtoa_r+0xb04>
 8008446:	f018 0f01 	tst.w	r8, #1
 800844a:	d1ac      	bne.n	80083a6 <_dtoa_r+0xa5e>
 800844c:	4633      	mov	r3, r6
 800844e:	461e      	mov	r6, r3
 8008450:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008454:	2a30      	cmp	r2, #48	@ 0x30
 8008456:	d0fa      	beq.n	800844e <_dtoa_r+0xb06>
 8008458:	e5c2      	b.n	8007fe0 <_dtoa_r+0x698>
 800845a:	459a      	cmp	sl, r3
 800845c:	d1a4      	bne.n	80083a8 <_dtoa_r+0xa60>
 800845e:	9b04      	ldr	r3, [sp, #16]
 8008460:	3301      	adds	r3, #1
 8008462:	9304      	str	r3, [sp, #16]
 8008464:	2331      	movs	r3, #49	@ 0x31
 8008466:	f88a 3000 	strb.w	r3, [sl]
 800846a:	e5b9      	b.n	8007fe0 <_dtoa_r+0x698>
 800846c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800846e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80084cc <_dtoa_r+0xb84>
 8008472:	b11b      	cbz	r3, 800847c <_dtoa_r+0xb34>
 8008474:	f10a 0308 	add.w	r3, sl, #8
 8008478:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800847a:	6013      	str	r3, [r2, #0]
 800847c:	4650      	mov	r0, sl
 800847e:	b019      	add	sp, #100	@ 0x64
 8008480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008486:	2b01      	cmp	r3, #1
 8008488:	f77f ae37 	ble.w	80080fa <_dtoa_r+0x7b2>
 800848c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800848e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008490:	2001      	movs	r0, #1
 8008492:	e655      	b.n	8008140 <_dtoa_r+0x7f8>
 8008494:	9b00      	ldr	r3, [sp, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	f77f aed6 	ble.w	8008248 <_dtoa_r+0x900>
 800849c:	4656      	mov	r6, sl
 800849e:	4621      	mov	r1, r4
 80084a0:	4648      	mov	r0, r9
 80084a2:	f7ff f9c9 	bl	8007838 <quorem>
 80084a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80084aa:	f806 8b01 	strb.w	r8, [r6], #1
 80084ae:	9b00      	ldr	r3, [sp, #0]
 80084b0:	eba6 020a 	sub.w	r2, r6, sl
 80084b4:	4293      	cmp	r3, r2
 80084b6:	ddb3      	ble.n	8008420 <_dtoa_r+0xad8>
 80084b8:	4649      	mov	r1, r9
 80084ba:	2300      	movs	r3, #0
 80084bc:	220a      	movs	r2, #10
 80084be:	4658      	mov	r0, fp
 80084c0:	f000 f968 	bl	8008794 <__multadd>
 80084c4:	4681      	mov	r9, r0
 80084c6:	e7ea      	b.n	800849e <_dtoa_r+0xb56>
 80084c8:	08009f2b 	.word	0x08009f2b
 80084cc:	08009ec6 	.word	0x08009ec6

080084d0 <_free_r>:
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	4605      	mov	r5, r0
 80084d4:	2900      	cmp	r1, #0
 80084d6:	d041      	beq.n	800855c <_free_r+0x8c>
 80084d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084dc:	1f0c      	subs	r4, r1, #4
 80084de:	2b00      	cmp	r3, #0
 80084e0:	bfb8      	it	lt
 80084e2:	18e4      	addlt	r4, r4, r3
 80084e4:	f000 f8e8 	bl	80086b8 <__malloc_lock>
 80084e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008560 <_free_r+0x90>)
 80084ea:	6813      	ldr	r3, [r2, #0]
 80084ec:	b933      	cbnz	r3, 80084fc <_free_r+0x2c>
 80084ee:	6063      	str	r3, [r4, #4]
 80084f0:	6014      	str	r4, [r2, #0]
 80084f2:	4628      	mov	r0, r5
 80084f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084f8:	f000 b8e4 	b.w	80086c4 <__malloc_unlock>
 80084fc:	42a3      	cmp	r3, r4
 80084fe:	d908      	bls.n	8008512 <_free_r+0x42>
 8008500:	6820      	ldr	r0, [r4, #0]
 8008502:	1821      	adds	r1, r4, r0
 8008504:	428b      	cmp	r3, r1
 8008506:	bf01      	itttt	eq
 8008508:	6819      	ldreq	r1, [r3, #0]
 800850a:	685b      	ldreq	r3, [r3, #4]
 800850c:	1809      	addeq	r1, r1, r0
 800850e:	6021      	streq	r1, [r4, #0]
 8008510:	e7ed      	b.n	80084ee <_free_r+0x1e>
 8008512:	461a      	mov	r2, r3
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	b10b      	cbz	r3, 800851c <_free_r+0x4c>
 8008518:	42a3      	cmp	r3, r4
 800851a:	d9fa      	bls.n	8008512 <_free_r+0x42>
 800851c:	6811      	ldr	r1, [r2, #0]
 800851e:	1850      	adds	r0, r2, r1
 8008520:	42a0      	cmp	r0, r4
 8008522:	d10b      	bne.n	800853c <_free_r+0x6c>
 8008524:	6820      	ldr	r0, [r4, #0]
 8008526:	4401      	add	r1, r0
 8008528:	1850      	adds	r0, r2, r1
 800852a:	4283      	cmp	r3, r0
 800852c:	6011      	str	r1, [r2, #0]
 800852e:	d1e0      	bne.n	80084f2 <_free_r+0x22>
 8008530:	6818      	ldr	r0, [r3, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	6053      	str	r3, [r2, #4]
 8008536:	4408      	add	r0, r1
 8008538:	6010      	str	r0, [r2, #0]
 800853a:	e7da      	b.n	80084f2 <_free_r+0x22>
 800853c:	d902      	bls.n	8008544 <_free_r+0x74>
 800853e:	230c      	movs	r3, #12
 8008540:	602b      	str	r3, [r5, #0]
 8008542:	e7d6      	b.n	80084f2 <_free_r+0x22>
 8008544:	6820      	ldr	r0, [r4, #0]
 8008546:	1821      	adds	r1, r4, r0
 8008548:	428b      	cmp	r3, r1
 800854a:	bf04      	itt	eq
 800854c:	6819      	ldreq	r1, [r3, #0]
 800854e:	685b      	ldreq	r3, [r3, #4]
 8008550:	6063      	str	r3, [r4, #4]
 8008552:	bf04      	itt	eq
 8008554:	1809      	addeq	r1, r1, r0
 8008556:	6021      	streq	r1, [r4, #0]
 8008558:	6054      	str	r4, [r2, #4]
 800855a:	e7ca      	b.n	80084f2 <_free_r+0x22>
 800855c:	bd38      	pop	{r3, r4, r5, pc}
 800855e:	bf00      	nop
 8008560:	2000074c 	.word	0x2000074c

08008564 <malloc>:
 8008564:	4b02      	ldr	r3, [pc, #8]	@ (8008570 <malloc+0xc>)
 8008566:	4601      	mov	r1, r0
 8008568:	6818      	ldr	r0, [r3, #0]
 800856a:	f000 b825 	b.w	80085b8 <_malloc_r>
 800856e:	bf00      	nop
 8008570:	2000009c 	.word	0x2000009c

08008574 <sbrk_aligned>:
 8008574:	b570      	push	{r4, r5, r6, lr}
 8008576:	4e0f      	ldr	r6, [pc, #60]	@ (80085b4 <sbrk_aligned+0x40>)
 8008578:	460c      	mov	r4, r1
 800857a:	6831      	ldr	r1, [r6, #0]
 800857c:	4605      	mov	r5, r0
 800857e:	b911      	cbnz	r1, 8008586 <sbrk_aligned+0x12>
 8008580:	f000 fe58 	bl	8009234 <_sbrk_r>
 8008584:	6030      	str	r0, [r6, #0]
 8008586:	4621      	mov	r1, r4
 8008588:	4628      	mov	r0, r5
 800858a:	f000 fe53 	bl	8009234 <_sbrk_r>
 800858e:	1c43      	adds	r3, r0, #1
 8008590:	d103      	bne.n	800859a <sbrk_aligned+0x26>
 8008592:	f04f 34ff 	mov.w	r4, #4294967295
 8008596:	4620      	mov	r0, r4
 8008598:	bd70      	pop	{r4, r5, r6, pc}
 800859a:	1cc4      	adds	r4, r0, #3
 800859c:	f024 0403 	bic.w	r4, r4, #3
 80085a0:	42a0      	cmp	r0, r4
 80085a2:	d0f8      	beq.n	8008596 <sbrk_aligned+0x22>
 80085a4:	1a21      	subs	r1, r4, r0
 80085a6:	4628      	mov	r0, r5
 80085a8:	f000 fe44 	bl	8009234 <_sbrk_r>
 80085ac:	3001      	adds	r0, #1
 80085ae:	d1f2      	bne.n	8008596 <sbrk_aligned+0x22>
 80085b0:	e7ef      	b.n	8008592 <sbrk_aligned+0x1e>
 80085b2:	bf00      	nop
 80085b4:	20000748 	.word	0x20000748

080085b8 <_malloc_r>:
 80085b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085bc:	1ccd      	adds	r5, r1, #3
 80085be:	f025 0503 	bic.w	r5, r5, #3
 80085c2:	3508      	adds	r5, #8
 80085c4:	2d0c      	cmp	r5, #12
 80085c6:	bf38      	it	cc
 80085c8:	250c      	movcc	r5, #12
 80085ca:	2d00      	cmp	r5, #0
 80085cc:	4606      	mov	r6, r0
 80085ce:	db01      	blt.n	80085d4 <_malloc_r+0x1c>
 80085d0:	42a9      	cmp	r1, r5
 80085d2:	d904      	bls.n	80085de <_malloc_r+0x26>
 80085d4:	230c      	movs	r3, #12
 80085d6:	6033      	str	r3, [r6, #0]
 80085d8:	2000      	movs	r0, #0
 80085da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086b4 <_malloc_r+0xfc>
 80085e2:	f000 f869 	bl	80086b8 <__malloc_lock>
 80085e6:	f8d8 3000 	ldr.w	r3, [r8]
 80085ea:	461c      	mov	r4, r3
 80085ec:	bb44      	cbnz	r4, 8008640 <_malloc_r+0x88>
 80085ee:	4629      	mov	r1, r5
 80085f0:	4630      	mov	r0, r6
 80085f2:	f7ff ffbf 	bl	8008574 <sbrk_aligned>
 80085f6:	1c43      	adds	r3, r0, #1
 80085f8:	4604      	mov	r4, r0
 80085fa:	d158      	bne.n	80086ae <_malloc_r+0xf6>
 80085fc:	f8d8 4000 	ldr.w	r4, [r8]
 8008600:	4627      	mov	r7, r4
 8008602:	2f00      	cmp	r7, #0
 8008604:	d143      	bne.n	800868e <_malloc_r+0xd6>
 8008606:	2c00      	cmp	r4, #0
 8008608:	d04b      	beq.n	80086a2 <_malloc_r+0xea>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	4639      	mov	r1, r7
 800860e:	4630      	mov	r0, r6
 8008610:	eb04 0903 	add.w	r9, r4, r3
 8008614:	f000 fe0e 	bl	8009234 <_sbrk_r>
 8008618:	4581      	cmp	r9, r0
 800861a:	d142      	bne.n	80086a2 <_malloc_r+0xea>
 800861c:	6821      	ldr	r1, [r4, #0]
 800861e:	1a6d      	subs	r5, r5, r1
 8008620:	4629      	mov	r1, r5
 8008622:	4630      	mov	r0, r6
 8008624:	f7ff ffa6 	bl	8008574 <sbrk_aligned>
 8008628:	3001      	adds	r0, #1
 800862a:	d03a      	beq.n	80086a2 <_malloc_r+0xea>
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	442b      	add	r3, r5
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	f8d8 3000 	ldr.w	r3, [r8]
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	bb62      	cbnz	r2, 8008694 <_malloc_r+0xdc>
 800863a:	f8c8 7000 	str.w	r7, [r8]
 800863e:	e00f      	b.n	8008660 <_malloc_r+0xa8>
 8008640:	6822      	ldr	r2, [r4, #0]
 8008642:	1b52      	subs	r2, r2, r5
 8008644:	d420      	bmi.n	8008688 <_malloc_r+0xd0>
 8008646:	2a0b      	cmp	r2, #11
 8008648:	d917      	bls.n	800867a <_malloc_r+0xc2>
 800864a:	1961      	adds	r1, r4, r5
 800864c:	42a3      	cmp	r3, r4
 800864e:	6025      	str	r5, [r4, #0]
 8008650:	bf18      	it	ne
 8008652:	6059      	strne	r1, [r3, #4]
 8008654:	6863      	ldr	r3, [r4, #4]
 8008656:	bf08      	it	eq
 8008658:	f8c8 1000 	streq.w	r1, [r8]
 800865c:	5162      	str	r2, [r4, r5]
 800865e:	604b      	str	r3, [r1, #4]
 8008660:	4630      	mov	r0, r6
 8008662:	f000 f82f 	bl	80086c4 <__malloc_unlock>
 8008666:	f104 000b 	add.w	r0, r4, #11
 800866a:	1d23      	adds	r3, r4, #4
 800866c:	f020 0007 	bic.w	r0, r0, #7
 8008670:	1ac2      	subs	r2, r0, r3
 8008672:	bf1c      	itt	ne
 8008674:	1a1b      	subne	r3, r3, r0
 8008676:	50a3      	strne	r3, [r4, r2]
 8008678:	e7af      	b.n	80085da <_malloc_r+0x22>
 800867a:	6862      	ldr	r2, [r4, #4]
 800867c:	42a3      	cmp	r3, r4
 800867e:	bf0c      	ite	eq
 8008680:	f8c8 2000 	streq.w	r2, [r8]
 8008684:	605a      	strne	r2, [r3, #4]
 8008686:	e7eb      	b.n	8008660 <_malloc_r+0xa8>
 8008688:	4623      	mov	r3, r4
 800868a:	6864      	ldr	r4, [r4, #4]
 800868c:	e7ae      	b.n	80085ec <_malloc_r+0x34>
 800868e:	463c      	mov	r4, r7
 8008690:	687f      	ldr	r7, [r7, #4]
 8008692:	e7b6      	b.n	8008602 <_malloc_r+0x4a>
 8008694:	461a      	mov	r2, r3
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	42a3      	cmp	r3, r4
 800869a:	d1fb      	bne.n	8008694 <_malloc_r+0xdc>
 800869c:	2300      	movs	r3, #0
 800869e:	6053      	str	r3, [r2, #4]
 80086a0:	e7de      	b.n	8008660 <_malloc_r+0xa8>
 80086a2:	230c      	movs	r3, #12
 80086a4:	6033      	str	r3, [r6, #0]
 80086a6:	4630      	mov	r0, r6
 80086a8:	f000 f80c 	bl	80086c4 <__malloc_unlock>
 80086ac:	e794      	b.n	80085d8 <_malloc_r+0x20>
 80086ae:	6005      	str	r5, [r0, #0]
 80086b0:	e7d6      	b.n	8008660 <_malloc_r+0xa8>
 80086b2:	bf00      	nop
 80086b4:	2000074c 	.word	0x2000074c

080086b8 <__malloc_lock>:
 80086b8:	4801      	ldr	r0, [pc, #4]	@ (80086c0 <__malloc_lock+0x8>)
 80086ba:	f7ff b89c 	b.w	80077f6 <__retarget_lock_acquire_recursive>
 80086be:	bf00      	nop
 80086c0:	20000744 	.word	0x20000744

080086c4 <__malloc_unlock>:
 80086c4:	4801      	ldr	r0, [pc, #4]	@ (80086cc <__malloc_unlock+0x8>)
 80086c6:	f7ff b897 	b.w	80077f8 <__retarget_lock_release_recursive>
 80086ca:	bf00      	nop
 80086cc:	20000744 	.word	0x20000744

080086d0 <_Balloc>:
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	69c6      	ldr	r6, [r0, #28]
 80086d4:	4604      	mov	r4, r0
 80086d6:	460d      	mov	r5, r1
 80086d8:	b976      	cbnz	r6, 80086f8 <_Balloc+0x28>
 80086da:	2010      	movs	r0, #16
 80086dc:	f7ff ff42 	bl	8008564 <malloc>
 80086e0:	4602      	mov	r2, r0
 80086e2:	61e0      	str	r0, [r4, #28]
 80086e4:	b920      	cbnz	r0, 80086f0 <_Balloc+0x20>
 80086e6:	4b18      	ldr	r3, [pc, #96]	@ (8008748 <_Balloc+0x78>)
 80086e8:	4818      	ldr	r0, [pc, #96]	@ (800874c <_Balloc+0x7c>)
 80086ea:	216b      	movs	r1, #107	@ 0x6b
 80086ec:	f7ff f886 	bl	80077fc <__assert_func>
 80086f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086f4:	6006      	str	r6, [r0, #0]
 80086f6:	60c6      	str	r6, [r0, #12]
 80086f8:	69e6      	ldr	r6, [r4, #28]
 80086fa:	68f3      	ldr	r3, [r6, #12]
 80086fc:	b183      	cbz	r3, 8008720 <_Balloc+0x50>
 80086fe:	69e3      	ldr	r3, [r4, #28]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008706:	b9b8      	cbnz	r0, 8008738 <_Balloc+0x68>
 8008708:	2101      	movs	r1, #1
 800870a:	fa01 f605 	lsl.w	r6, r1, r5
 800870e:	1d72      	adds	r2, r6, #5
 8008710:	0092      	lsls	r2, r2, #2
 8008712:	4620      	mov	r0, r4
 8008714:	f000 fdb3 	bl	800927e <_calloc_r>
 8008718:	b160      	cbz	r0, 8008734 <_Balloc+0x64>
 800871a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800871e:	e00e      	b.n	800873e <_Balloc+0x6e>
 8008720:	2221      	movs	r2, #33	@ 0x21
 8008722:	2104      	movs	r1, #4
 8008724:	4620      	mov	r0, r4
 8008726:	f000 fdaa 	bl	800927e <_calloc_r>
 800872a:	69e3      	ldr	r3, [r4, #28]
 800872c:	60f0      	str	r0, [r6, #12]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1e4      	bne.n	80086fe <_Balloc+0x2e>
 8008734:	2000      	movs	r0, #0
 8008736:	bd70      	pop	{r4, r5, r6, pc}
 8008738:	6802      	ldr	r2, [r0, #0]
 800873a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800873e:	2300      	movs	r3, #0
 8008740:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008744:	e7f7      	b.n	8008736 <_Balloc+0x66>
 8008746:	bf00      	nop
 8008748:	08009e19 	.word	0x08009e19
 800874c:	08009f3c 	.word	0x08009f3c

08008750 <_Bfree>:
 8008750:	b570      	push	{r4, r5, r6, lr}
 8008752:	69c6      	ldr	r6, [r0, #28]
 8008754:	4605      	mov	r5, r0
 8008756:	460c      	mov	r4, r1
 8008758:	b976      	cbnz	r6, 8008778 <_Bfree+0x28>
 800875a:	2010      	movs	r0, #16
 800875c:	f7ff ff02 	bl	8008564 <malloc>
 8008760:	4602      	mov	r2, r0
 8008762:	61e8      	str	r0, [r5, #28]
 8008764:	b920      	cbnz	r0, 8008770 <_Bfree+0x20>
 8008766:	4b09      	ldr	r3, [pc, #36]	@ (800878c <_Bfree+0x3c>)
 8008768:	4809      	ldr	r0, [pc, #36]	@ (8008790 <_Bfree+0x40>)
 800876a:	218f      	movs	r1, #143	@ 0x8f
 800876c:	f7ff f846 	bl	80077fc <__assert_func>
 8008770:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008774:	6006      	str	r6, [r0, #0]
 8008776:	60c6      	str	r6, [r0, #12]
 8008778:	b13c      	cbz	r4, 800878a <_Bfree+0x3a>
 800877a:	69eb      	ldr	r3, [r5, #28]
 800877c:	6862      	ldr	r2, [r4, #4]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008784:	6021      	str	r1, [r4, #0]
 8008786:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	08009e19 	.word	0x08009e19
 8008790:	08009f3c 	.word	0x08009f3c

08008794 <__multadd>:
 8008794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008798:	690d      	ldr	r5, [r1, #16]
 800879a:	4607      	mov	r7, r0
 800879c:	460c      	mov	r4, r1
 800879e:	461e      	mov	r6, r3
 80087a0:	f101 0c14 	add.w	ip, r1, #20
 80087a4:	2000      	movs	r0, #0
 80087a6:	f8dc 3000 	ldr.w	r3, [ip]
 80087aa:	b299      	uxth	r1, r3
 80087ac:	fb02 6101 	mla	r1, r2, r1, r6
 80087b0:	0c1e      	lsrs	r6, r3, #16
 80087b2:	0c0b      	lsrs	r3, r1, #16
 80087b4:	fb02 3306 	mla	r3, r2, r6, r3
 80087b8:	b289      	uxth	r1, r1
 80087ba:	3001      	adds	r0, #1
 80087bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087c0:	4285      	cmp	r5, r0
 80087c2:	f84c 1b04 	str.w	r1, [ip], #4
 80087c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087ca:	dcec      	bgt.n	80087a6 <__multadd+0x12>
 80087cc:	b30e      	cbz	r6, 8008812 <__multadd+0x7e>
 80087ce:	68a3      	ldr	r3, [r4, #8]
 80087d0:	42ab      	cmp	r3, r5
 80087d2:	dc19      	bgt.n	8008808 <__multadd+0x74>
 80087d4:	6861      	ldr	r1, [r4, #4]
 80087d6:	4638      	mov	r0, r7
 80087d8:	3101      	adds	r1, #1
 80087da:	f7ff ff79 	bl	80086d0 <_Balloc>
 80087de:	4680      	mov	r8, r0
 80087e0:	b928      	cbnz	r0, 80087ee <__multadd+0x5a>
 80087e2:	4602      	mov	r2, r0
 80087e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008818 <__multadd+0x84>)
 80087e6:	480d      	ldr	r0, [pc, #52]	@ (800881c <__multadd+0x88>)
 80087e8:	21ba      	movs	r1, #186	@ 0xba
 80087ea:	f7ff f807 	bl	80077fc <__assert_func>
 80087ee:	6922      	ldr	r2, [r4, #16]
 80087f0:	3202      	adds	r2, #2
 80087f2:	f104 010c 	add.w	r1, r4, #12
 80087f6:	0092      	lsls	r2, r2, #2
 80087f8:	300c      	adds	r0, #12
 80087fa:	f000 fd2b 	bl	8009254 <memcpy>
 80087fe:	4621      	mov	r1, r4
 8008800:	4638      	mov	r0, r7
 8008802:	f7ff ffa5 	bl	8008750 <_Bfree>
 8008806:	4644      	mov	r4, r8
 8008808:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800880c:	3501      	adds	r5, #1
 800880e:	615e      	str	r6, [r3, #20]
 8008810:	6125      	str	r5, [r4, #16]
 8008812:	4620      	mov	r0, r4
 8008814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008818:	08009f2b 	.word	0x08009f2b
 800881c:	08009f3c 	.word	0x08009f3c

08008820 <__hi0bits>:
 8008820:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008824:	4603      	mov	r3, r0
 8008826:	bf36      	itet	cc
 8008828:	0403      	lslcc	r3, r0, #16
 800882a:	2000      	movcs	r0, #0
 800882c:	2010      	movcc	r0, #16
 800882e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008832:	bf3c      	itt	cc
 8008834:	021b      	lslcc	r3, r3, #8
 8008836:	3008      	addcc	r0, #8
 8008838:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800883c:	bf3c      	itt	cc
 800883e:	011b      	lslcc	r3, r3, #4
 8008840:	3004      	addcc	r0, #4
 8008842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008846:	bf3c      	itt	cc
 8008848:	009b      	lslcc	r3, r3, #2
 800884a:	3002      	addcc	r0, #2
 800884c:	2b00      	cmp	r3, #0
 800884e:	db05      	blt.n	800885c <__hi0bits+0x3c>
 8008850:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008854:	f100 0001 	add.w	r0, r0, #1
 8008858:	bf08      	it	eq
 800885a:	2020      	moveq	r0, #32
 800885c:	4770      	bx	lr

0800885e <__lo0bits>:
 800885e:	6803      	ldr	r3, [r0, #0]
 8008860:	4602      	mov	r2, r0
 8008862:	f013 0007 	ands.w	r0, r3, #7
 8008866:	d00b      	beq.n	8008880 <__lo0bits+0x22>
 8008868:	07d9      	lsls	r1, r3, #31
 800886a:	d421      	bmi.n	80088b0 <__lo0bits+0x52>
 800886c:	0798      	lsls	r0, r3, #30
 800886e:	bf49      	itett	mi
 8008870:	085b      	lsrmi	r3, r3, #1
 8008872:	089b      	lsrpl	r3, r3, #2
 8008874:	2001      	movmi	r0, #1
 8008876:	6013      	strmi	r3, [r2, #0]
 8008878:	bf5c      	itt	pl
 800887a:	6013      	strpl	r3, [r2, #0]
 800887c:	2002      	movpl	r0, #2
 800887e:	4770      	bx	lr
 8008880:	b299      	uxth	r1, r3
 8008882:	b909      	cbnz	r1, 8008888 <__lo0bits+0x2a>
 8008884:	0c1b      	lsrs	r3, r3, #16
 8008886:	2010      	movs	r0, #16
 8008888:	b2d9      	uxtb	r1, r3
 800888a:	b909      	cbnz	r1, 8008890 <__lo0bits+0x32>
 800888c:	3008      	adds	r0, #8
 800888e:	0a1b      	lsrs	r3, r3, #8
 8008890:	0719      	lsls	r1, r3, #28
 8008892:	bf04      	itt	eq
 8008894:	091b      	lsreq	r3, r3, #4
 8008896:	3004      	addeq	r0, #4
 8008898:	0799      	lsls	r1, r3, #30
 800889a:	bf04      	itt	eq
 800889c:	089b      	lsreq	r3, r3, #2
 800889e:	3002      	addeq	r0, #2
 80088a0:	07d9      	lsls	r1, r3, #31
 80088a2:	d403      	bmi.n	80088ac <__lo0bits+0x4e>
 80088a4:	085b      	lsrs	r3, r3, #1
 80088a6:	f100 0001 	add.w	r0, r0, #1
 80088aa:	d003      	beq.n	80088b4 <__lo0bits+0x56>
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	4770      	bx	lr
 80088b0:	2000      	movs	r0, #0
 80088b2:	4770      	bx	lr
 80088b4:	2020      	movs	r0, #32
 80088b6:	4770      	bx	lr

080088b8 <__i2b>:
 80088b8:	b510      	push	{r4, lr}
 80088ba:	460c      	mov	r4, r1
 80088bc:	2101      	movs	r1, #1
 80088be:	f7ff ff07 	bl	80086d0 <_Balloc>
 80088c2:	4602      	mov	r2, r0
 80088c4:	b928      	cbnz	r0, 80088d2 <__i2b+0x1a>
 80088c6:	4b05      	ldr	r3, [pc, #20]	@ (80088dc <__i2b+0x24>)
 80088c8:	4805      	ldr	r0, [pc, #20]	@ (80088e0 <__i2b+0x28>)
 80088ca:	f240 1145 	movw	r1, #325	@ 0x145
 80088ce:	f7fe ff95 	bl	80077fc <__assert_func>
 80088d2:	2301      	movs	r3, #1
 80088d4:	6144      	str	r4, [r0, #20]
 80088d6:	6103      	str	r3, [r0, #16]
 80088d8:	bd10      	pop	{r4, pc}
 80088da:	bf00      	nop
 80088dc:	08009f2b 	.word	0x08009f2b
 80088e0:	08009f3c 	.word	0x08009f3c

080088e4 <__multiply>:
 80088e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e8:	4614      	mov	r4, r2
 80088ea:	690a      	ldr	r2, [r1, #16]
 80088ec:	6923      	ldr	r3, [r4, #16]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	bfa8      	it	ge
 80088f2:	4623      	movge	r3, r4
 80088f4:	460f      	mov	r7, r1
 80088f6:	bfa4      	itt	ge
 80088f8:	460c      	movge	r4, r1
 80088fa:	461f      	movge	r7, r3
 80088fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008900:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008904:	68a3      	ldr	r3, [r4, #8]
 8008906:	6861      	ldr	r1, [r4, #4]
 8008908:	eb0a 0609 	add.w	r6, sl, r9
 800890c:	42b3      	cmp	r3, r6
 800890e:	b085      	sub	sp, #20
 8008910:	bfb8      	it	lt
 8008912:	3101      	addlt	r1, #1
 8008914:	f7ff fedc 	bl	80086d0 <_Balloc>
 8008918:	b930      	cbnz	r0, 8008928 <__multiply+0x44>
 800891a:	4602      	mov	r2, r0
 800891c:	4b44      	ldr	r3, [pc, #272]	@ (8008a30 <__multiply+0x14c>)
 800891e:	4845      	ldr	r0, [pc, #276]	@ (8008a34 <__multiply+0x150>)
 8008920:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008924:	f7fe ff6a 	bl	80077fc <__assert_func>
 8008928:	f100 0514 	add.w	r5, r0, #20
 800892c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008930:	462b      	mov	r3, r5
 8008932:	2200      	movs	r2, #0
 8008934:	4543      	cmp	r3, r8
 8008936:	d321      	bcc.n	800897c <__multiply+0x98>
 8008938:	f107 0114 	add.w	r1, r7, #20
 800893c:	f104 0214 	add.w	r2, r4, #20
 8008940:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008944:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008948:	9302      	str	r3, [sp, #8]
 800894a:	1b13      	subs	r3, r2, r4
 800894c:	3b15      	subs	r3, #21
 800894e:	f023 0303 	bic.w	r3, r3, #3
 8008952:	3304      	adds	r3, #4
 8008954:	f104 0715 	add.w	r7, r4, #21
 8008958:	42ba      	cmp	r2, r7
 800895a:	bf38      	it	cc
 800895c:	2304      	movcc	r3, #4
 800895e:	9301      	str	r3, [sp, #4]
 8008960:	9b02      	ldr	r3, [sp, #8]
 8008962:	9103      	str	r1, [sp, #12]
 8008964:	428b      	cmp	r3, r1
 8008966:	d80c      	bhi.n	8008982 <__multiply+0x9e>
 8008968:	2e00      	cmp	r6, #0
 800896a:	dd03      	ble.n	8008974 <__multiply+0x90>
 800896c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008970:	2b00      	cmp	r3, #0
 8008972:	d05b      	beq.n	8008a2c <__multiply+0x148>
 8008974:	6106      	str	r6, [r0, #16]
 8008976:	b005      	add	sp, #20
 8008978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897c:	f843 2b04 	str.w	r2, [r3], #4
 8008980:	e7d8      	b.n	8008934 <__multiply+0x50>
 8008982:	f8b1 a000 	ldrh.w	sl, [r1]
 8008986:	f1ba 0f00 	cmp.w	sl, #0
 800898a:	d024      	beq.n	80089d6 <__multiply+0xf2>
 800898c:	f104 0e14 	add.w	lr, r4, #20
 8008990:	46a9      	mov	r9, r5
 8008992:	f04f 0c00 	mov.w	ip, #0
 8008996:	f85e 7b04 	ldr.w	r7, [lr], #4
 800899a:	f8d9 3000 	ldr.w	r3, [r9]
 800899e:	fa1f fb87 	uxth.w	fp, r7
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80089a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80089ac:	f8d9 7000 	ldr.w	r7, [r9]
 80089b0:	4463      	add	r3, ip
 80089b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80089b6:	fb0a c70b 	mla	r7, sl, fp, ip
 80089ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80089be:	b29b      	uxth	r3, r3
 80089c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80089c4:	4572      	cmp	r2, lr
 80089c6:	f849 3b04 	str.w	r3, [r9], #4
 80089ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80089ce:	d8e2      	bhi.n	8008996 <__multiply+0xb2>
 80089d0:	9b01      	ldr	r3, [sp, #4]
 80089d2:	f845 c003 	str.w	ip, [r5, r3]
 80089d6:	9b03      	ldr	r3, [sp, #12]
 80089d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80089dc:	3104      	adds	r1, #4
 80089de:	f1b9 0f00 	cmp.w	r9, #0
 80089e2:	d021      	beq.n	8008a28 <__multiply+0x144>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	f104 0c14 	add.w	ip, r4, #20
 80089ea:	46ae      	mov	lr, r5
 80089ec:	f04f 0a00 	mov.w	sl, #0
 80089f0:	f8bc b000 	ldrh.w	fp, [ip]
 80089f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80089f8:	fb09 770b 	mla	r7, r9, fp, r7
 80089fc:	4457      	add	r7, sl
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008a04:	f84e 3b04 	str.w	r3, [lr], #4
 8008a08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a10:	f8be 3000 	ldrh.w	r3, [lr]
 8008a14:	fb09 330a 	mla	r3, r9, sl, r3
 8008a18:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008a1c:	4562      	cmp	r2, ip
 8008a1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a22:	d8e5      	bhi.n	80089f0 <__multiply+0x10c>
 8008a24:	9f01      	ldr	r7, [sp, #4]
 8008a26:	51eb      	str	r3, [r5, r7]
 8008a28:	3504      	adds	r5, #4
 8008a2a:	e799      	b.n	8008960 <__multiply+0x7c>
 8008a2c:	3e01      	subs	r6, #1
 8008a2e:	e79b      	b.n	8008968 <__multiply+0x84>
 8008a30:	08009f2b 	.word	0x08009f2b
 8008a34:	08009f3c 	.word	0x08009f3c

08008a38 <__pow5mult>:
 8008a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a3c:	4615      	mov	r5, r2
 8008a3e:	f012 0203 	ands.w	r2, r2, #3
 8008a42:	4607      	mov	r7, r0
 8008a44:	460e      	mov	r6, r1
 8008a46:	d007      	beq.n	8008a58 <__pow5mult+0x20>
 8008a48:	4c25      	ldr	r4, [pc, #148]	@ (8008ae0 <__pow5mult+0xa8>)
 8008a4a:	3a01      	subs	r2, #1
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a52:	f7ff fe9f 	bl	8008794 <__multadd>
 8008a56:	4606      	mov	r6, r0
 8008a58:	10ad      	asrs	r5, r5, #2
 8008a5a:	d03d      	beq.n	8008ad8 <__pow5mult+0xa0>
 8008a5c:	69fc      	ldr	r4, [r7, #28]
 8008a5e:	b97c      	cbnz	r4, 8008a80 <__pow5mult+0x48>
 8008a60:	2010      	movs	r0, #16
 8008a62:	f7ff fd7f 	bl	8008564 <malloc>
 8008a66:	4602      	mov	r2, r0
 8008a68:	61f8      	str	r0, [r7, #28]
 8008a6a:	b928      	cbnz	r0, 8008a78 <__pow5mult+0x40>
 8008a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8008ae4 <__pow5mult+0xac>)
 8008a6e:	481e      	ldr	r0, [pc, #120]	@ (8008ae8 <__pow5mult+0xb0>)
 8008a70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008a74:	f7fe fec2 	bl	80077fc <__assert_func>
 8008a78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a7c:	6004      	str	r4, [r0, #0]
 8008a7e:	60c4      	str	r4, [r0, #12]
 8008a80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008a84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a88:	b94c      	cbnz	r4, 8008a9e <__pow5mult+0x66>
 8008a8a:	f240 2171 	movw	r1, #625	@ 0x271
 8008a8e:	4638      	mov	r0, r7
 8008a90:	f7ff ff12 	bl	80088b8 <__i2b>
 8008a94:	2300      	movs	r3, #0
 8008a96:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	6003      	str	r3, [r0, #0]
 8008a9e:	f04f 0900 	mov.w	r9, #0
 8008aa2:	07eb      	lsls	r3, r5, #31
 8008aa4:	d50a      	bpl.n	8008abc <__pow5mult+0x84>
 8008aa6:	4631      	mov	r1, r6
 8008aa8:	4622      	mov	r2, r4
 8008aaa:	4638      	mov	r0, r7
 8008aac:	f7ff ff1a 	bl	80088e4 <__multiply>
 8008ab0:	4631      	mov	r1, r6
 8008ab2:	4680      	mov	r8, r0
 8008ab4:	4638      	mov	r0, r7
 8008ab6:	f7ff fe4b 	bl	8008750 <_Bfree>
 8008aba:	4646      	mov	r6, r8
 8008abc:	106d      	asrs	r5, r5, #1
 8008abe:	d00b      	beq.n	8008ad8 <__pow5mult+0xa0>
 8008ac0:	6820      	ldr	r0, [r4, #0]
 8008ac2:	b938      	cbnz	r0, 8008ad4 <__pow5mult+0x9c>
 8008ac4:	4622      	mov	r2, r4
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	4638      	mov	r0, r7
 8008aca:	f7ff ff0b 	bl	80088e4 <__multiply>
 8008ace:	6020      	str	r0, [r4, #0]
 8008ad0:	f8c0 9000 	str.w	r9, [r0]
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	e7e4      	b.n	8008aa2 <__pow5mult+0x6a>
 8008ad8:	4630      	mov	r0, r6
 8008ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ade:	bf00      	nop
 8008ae0:	08009f98 	.word	0x08009f98
 8008ae4:	08009e19 	.word	0x08009e19
 8008ae8:	08009f3c 	.word	0x08009f3c

08008aec <__lshift>:
 8008aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af0:	460c      	mov	r4, r1
 8008af2:	6849      	ldr	r1, [r1, #4]
 8008af4:	6923      	ldr	r3, [r4, #16]
 8008af6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008afa:	68a3      	ldr	r3, [r4, #8]
 8008afc:	4607      	mov	r7, r0
 8008afe:	4691      	mov	r9, r2
 8008b00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b04:	f108 0601 	add.w	r6, r8, #1
 8008b08:	42b3      	cmp	r3, r6
 8008b0a:	db0b      	blt.n	8008b24 <__lshift+0x38>
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	f7ff fddf 	bl	80086d0 <_Balloc>
 8008b12:	4605      	mov	r5, r0
 8008b14:	b948      	cbnz	r0, 8008b2a <__lshift+0x3e>
 8008b16:	4602      	mov	r2, r0
 8008b18:	4b28      	ldr	r3, [pc, #160]	@ (8008bbc <__lshift+0xd0>)
 8008b1a:	4829      	ldr	r0, [pc, #164]	@ (8008bc0 <__lshift+0xd4>)
 8008b1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008b20:	f7fe fe6c 	bl	80077fc <__assert_func>
 8008b24:	3101      	adds	r1, #1
 8008b26:	005b      	lsls	r3, r3, #1
 8008b28:	e7ee      	b.n	8008b08 <__lshift+0x1c>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	f100 0114 	add.w	r1, r0, #20
 8008b30:	f100 0210 	add.w	r2, r0, #16
 8008b34:	4618      	mov	r0, r3
 8008b36:	4553      	cmp	r3, sl
 8008b38:	db33      	blt.n	8008ba2 <__lshift+0xb6>
 8008b3a:	6920      	ldr	r0, [r4, #16]
 8008b3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b40:	f104 0314 	add.w	r3, r4, #20
 8008b44:	f019 091f 	ands.w	r9, r9, #31
 8008b48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b50:	d02b      	beq.n	8008baa <__lshift+0xbe>
 8008b52:	f1c9 0e20 	rsb	lr, r9, #32
 8008b56:	468a      	mov	sl, r1
 8008b58:	2200      	movs	r2, #0
 8008b5a:	6818      	ldr	r0, [r3, #0]
 8008b5c:	fa00 f009 	lsl.w	r0, r0, r9
 8008b60:	4310      	orrs	r0, r2
 8008b62:	f84a 0b04 	str.w	r0, [sl], #4
 8008b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b6a:	459c      	cmp	ip, r3
 8008b6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b70:	d8f3      	bhi.n	8008b5a <__lshift+0x6e>
 8008b72:	ebac 0304 	sub.w	r3, ip, r4
 8008b76:	3b15      	subs	r3, #21
 8008b78:	f023 0303 	bic.w	r3, r3, #3
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	f104 0015 	add.w	r0, r4, #21
 8008b82:	4584      	cmp	ip, r0
 8008b84:	bf38      	it	cc
 8008b86:	2304      	movcc	r3, #4
 8008b88:	50ca      	str	r2, [r1, r3]
 8008b8a:	b10a      	cbz	r2, 8008b90 <__lshift+0xa4>
 8008b8c:	f108 0602 	add.w	r6, r8, #2
 8008b90:	3e01      	subs	r6, #1
 8008b92:	4638      	mov	r0, r7
 8008b94:	612e      	str	r6, [r5, #16]
 8008b96:	4621      	mov	r1, r4
 8008b98:	f7ff fdda 	bl	8008750 <_Bfree>
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	e7c5      	b.n	8008b36 <__lshift+0x4a>
 8008baa:	3904      	subs	r1, #4
 8008bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bb4:	459c      	cmp	ip, r3
 8008bb6:	d8f9      	bhi.n	8008bac <__lshift+0xc0>
 8008bb8:	e7ea      	b.n	8008b90 <__lshift+0xa4>
 8008bba:	bf00      	nop
 8008bbc:	08009f2b 	.word	0x08009f2b
 8008bc0:	08009f3c 	.word	0x08009f3c

08008bc4 <__mcmp>:
 8008bc4:	690a      	ldr	r2, [r1, #16]
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	6900      	ldr	r0, [r0, #16]
 8008bca:	1a80      	subs	r0, r0, r2
 8008bcc:	b530      	push	{r4, r5, lr}
 8008bce:	d10e      	bne.n	8008bee <__mcmp+0x2a>
 8008bd0:	3314      	adds	r3, #20
 8008bd2:	3114      	adds	r1, #20
 8008bd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008bd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008bdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008be0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008be4:	4295      	cmp	r5, r2
 8008be6:	d003      	beq.n	8008bf0 <__mcmp+0x2c>
 8008be8:	d205      	bcs.n	8008bf6 <__mcmp+0x32>
 8008bea:	f04f 30ff 	mov.w	r0, #4294967295
 8008bee:	bd30      	pop	{r4, r5, pc}
 8008bf0:	42a3      	cmp	r3, r4
 8008bf2:	d3f3      	bcc.n	8008bdc <__mcmp+0x18>
 8008bf4:	e7fb      	b.n	8008bee <__mcmp+0x2a>
 8008bf6:	2001      	movs	r0, #1
 8008bf8:	e7f9      	b.n	8008bee <__mcmp+0x2a>
	...

08008bfc <__mdiff>:
 8008bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	4689      	mov	r9, r1
 8008c02:	4606      	mov	r6, r0
 8008c04:	4611      	mov	r1, r2
 8008c06:	4648      	mov	r0, r9
 8008c08:	4614      	mov	r4, r2
 8008c0a:	f7ff ffdb 	bl	8008bc4 <__mcmp>
 8008c0e:	1e05      	subs	r5, r0, #0
 8008c10:	d112      	bne.n	8008c38 <__mdiff+0x3c>
 8008c12:	4629      	mov	r1, r5
 8008c14:	4630      	mov	r0, r6
 8008c16:	f7ff fd5b 	bl	80086d0 <_Balloc>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	b928      	cbnz	r0, 8008c2a <__mdiff+0x2e>
 8008c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8008d1c <__mdiff+0x120>)
 8008c20:	f240 2137 	movw	r1, #567	@ 0x237
 8008c24:	483e      	ldr	r0, [pc, #248]	@ (8008d20 <__mdiff+0x124>)
 8008c26:	f7fe fde9 	bl	80077fc <__assert_func>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c30:	4610      	mov	r0, r2
 8008c32:	b003      	add	sp, #12
 8008c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c38:	bfbc      	itt	lt
 8008c3a:	464b      	movlt	r3, r9
 8008c3c:	46a1      	movlt	r9, r4
 8008c3e:	4630      	mov	r0, r6
 8008c40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008c44:	bfba      	itte	lt
 8008c46:	461c      	movlt	r4, r3
 8008c48:	2501      	movlt	r5, #1
 8008c4a:	2500      	movge	r5, #0
 8008c4c:	f7ff fd40 	bl	80086d0 <_Balloc>
 8008c50:	4602      	mov	r2, r0
 8008c52:	b918      	cbnz	r0, 8008c5c <__mdiff+0x60>
 8008c54:	4b31      	ldr	r3, [pc, #196]	@ (8008d1c <__mdiff+0x120>)
 8008c56:	f240 2145 	movw	r1, #581	@ 0x245
 8008c5a:	e7e3      	b.n	8008c24 <__mdiff+0x28>
 8008c5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008c60:	6926      	ldr	r6, [r4, #16]
 8008c62:	60c5      	str	r5, [r0, #12]
 8008c64:	f109 0310 	add.w	r3, r9, #16
 8008c68:	f109 0514 	add.w	r5, r9, #20
 8008c6c:	f104 0e14 	add.w	lr, r4, #20
 8008c70:	f100 0b14 	add.w	fp, r0, #20
 8008c74:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008c78:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008c7c:	9301      	str	r3, [sp, #4]
 8008c7e:	46d9      	mov	r9, fp
 8008c80:	f04f 0c00 	mov.w	ip, #0
 8008c84:	9b01      	ldr	r3, [sp, #4]
 8008c86:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008c8a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008c8e:	9301      	str	r3, [sp, #4]
 8008c90:	fa1f f38a 	uxth.w	r3, sl
 8008c94:	4619      	mov	r1, r3
 8008c96:	b283      	uxth	r3, r0
 8008c98:	1acb      	subs	r3, r1, r3
 8008c9a:	0c00      	lsrs	r0, r0, #16
 8008c9c:	4463      	add	r3, ip
 8008c9e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008ca2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008cac:	4576      	cmp	r6, lr
 8008cae:	f849 3b04 	str.w	r3, [r9], #4
 8008cb2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008cb6:	d8e5      	bhi.n	8008c84 <__mdiff+0x88>
 8008cb8:	1b33      	subs	r3, r6, r4
 8008cba:	3b15      	subs	r3, #21
 8008cbc:	f023 0303 	bic.w	r3, r3, #3
 8008cc0:	3415      	adds	r4, #21
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	42a6      	cmp	r6, r4
 8008cc6:	bf38      	it	cc
 8008cc8:	2304      	movcc	r3, #4
 8008cca:	441d      	add	r5, r3
 8008ccc:	445b      	add	r3, fp
 8008cce:	461e      	mov	r6, r3
 8008cd0:	462c      	mov	r4, r5
 8008cd2:	4544      	cmp	r4, r8
 8008cd4:	d30e      	bcc.n	8008cf4 <__mdiff+0xf8>
 8008cd6:	f108 0103 	add.w	r1, r8, #3
 8008cda:	1b49      	subs	r1, r1, r5
 8008cdc:	f021 0103 	bic.w	r1, r1, #3
 8008ce0:	3d03      	subs	r5, #3
 8008ce2:	45a8      	cmp	r8, r5
 8008ce4:	bf38      	it	cc
 8008ce6:	2100      	movcc	r1, #0
 8008ce8:	440b      	add	r3, r1
 8008cea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cee:	b191      	cbz	r1, 8008d16 <__mdiff+0x11a>
 8008cf0:	6117      	str	r7, [r2, #16]
 8008cf2:	e79d      	b.n	8008c30 <__mdiff+0x34>
 8008cf4:	f854 1b04 	ldr.w	r1, [r4], #4
 8008cf8:	46e6      	mov	lr, ip
 8008cfa:	0c08      	lsrs	r0, r1, #16
 8008cfc:	fa1c fc81 	uxtah	ip, ip, r1
 8008d00:	4471      	add	r1, lr
 8008d02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008d06:	b289      	uxth	r1, r1
 8008d08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d0c:	f846 1b04 	str.w	r1, [r6], #4
 8008d10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d14:	e7dd      	b.n	8008cd2 <__mdiff+0xd6>
 8008d16:	3f01      	subs	r7, #1
 8008d18:	e7e7      	b.n	8008cea <__mdiff+0xee>
 8008d1a:	bf00      	nop
 8008d1c:	08009f2b 	.word	0x08009f2b
 8008d20:	08009f3c 	.word	0x08009f3c

08008d24 <__d2b>:
 8008d24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d28:	460f      	mov	r7, r1
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	ec59 8b10 	vmov	r8, r9, d0
 8008d30:	4616      	mov	r6, r2
 8008d32:	f7ff fccd 	bl	80086d0 <_Balloc>
 8008d36:	4604      	mov	r4, r0
 8008d38:	b930      	cbnz	r0, 8008d48 <__d2b+0x24>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	4b23      	ldr	r3, [pc, #140]	@ (8008dcc <__d2b+0xa8>)
 8008d3e:	4824      	ldr	r0, [pc, #144]	@ (8008dd0 <__d2b+0xac>)
 8008d40:	f240 310f 	movw	r1, #783	@ 0x30f
 8008d44:	f7fe fd5a 	bl	80077fc <__assert_func>
 8008d48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d50:	b10d      	cbz	r5, 8008d56 <__d2b+0x32>
 8008d52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d56:	9301      	str	r3, [sp, #4]
 8008d58:	f1b8 0300 	subs.w	r3, r8, #0
 8008d5c:	d023      	beq.n	8008da6 <__d2b+0x82>
 8008d5e:	4668      	mov	r0, sp
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	f7ff fd7c 	bl	800885e <__lo0bits>
 8008d66:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d6a:	b1d0      	cbz	r0, 8008da2 <__d2b+0x7e>
 8008d6c:	f1c0 0320 	rsb	r3, r0, #32
 8008d70:	fa02 f303 	lsl.w	r3, r2, r3
 8008d74:	430b      	orrs	r3, r1
 8008d76:	40c2      	lsrs	r2, r0
 8008d78:	6163      	str	r3, [r4, #20]
 8008d7a:	9201      	str	r2, [sp, #4]
 8008d7c:	9b01      	ldr	r3, [sp, #4]
 8008d7e:	61a3      	str	r3, [r4, #24]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	bf0c      	ite	eq
 8008d84:	2201      	moveq	r2, #1
 8008d86:	2202      	movne	r2, #2
 8008d88:	6122      	str	r2, [r4, #16]
 8008d8a:	b1a5      	cbz	r5, 8008db6 <__d2b+0x92>
 8008d8c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008d90:	4405      	add	r5, r0
 8008d92:	603d      	str	r5, [r7, #0]
 8008d94:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008d98:	6030      	str	r0, [r6, #0]
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	b003      	add	sp, #12
 8008d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008da2:	6161      	str	r1, [r4, #20]
 8008da4:	e7ea      	b.n	8008d7c <__d2b+0x58>
 8008da6:	a801      	add	r0, sp, #4
 8008da8:	f7ff fd59 	bl	800885e <__lo0bits>
 8008dac:	9b01      	ldr	r3, [sp, #4]
 8008dae:	6163      	str	r3, [r4, #20]
 8008db0:	3020      	adds	r0, #32
 8008db2:	2201      	movs	r2, #1
 8008db4:	e7e8      	b.n	8008d88 <__d2b+0x64>
 8008db6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008dba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008dbe:	6038      	str	r0, [r7, #0]
 8008dc0:	6918      	ldr	r0, [r3, #16]
 8008dc2:	f7ff fd2d 	bl	8008820 <__hi0bits>
 8008dc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008dca:	e7e5      	b.n	8008d98 <__d2b+0x74>
 8008dcc:	08009f2b 	.word	0x08009f2b
 8008dd0:	08009f3c 	.word	0x08009f3c

08008dd4 <__ssputs_r>:
 8008dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd8:	688e      	ldr	r6, [r1, #8]
 8008dda:	461f      	mov	r7, r3
 8008ddc:	42be      	cmp	r6, r7
 8008dde:	680b      	ldr	r3, [r1, #0]
 8008de0:	4682      	mov	sl, r0
 8008de2:	460c      	mov	r4, r1
 8008de4:	4690      	mov	r8, r2
 8008de6:	d82d      	bhi.n	8008e44 <__ssputs_r+0x70>
 8008de8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008dec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008df0:	d026      	beq.n	8008e40 <__ssputs_r+0x6c>
 8008df2:	6965      	ldr	r5, [r4, #20]
 8008df4:	6909      	ldr	r1, [r1, #16]
 8008df6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dfa:	eba3 0901 	sub.w	r9, r3, r1
 8008dfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e02:	1c7b      	adds	r3, r7, #1
 8008e04:	444b      	add	r3, r9
 8008e06:	106d      	asrs	r5, r5, #1
 8008e08:	429d      	cmp	r5, r3
 8008e0a:	bf38      	it	cc
 8008e0c:	461d      	movcc	r5, r3
 8008e0e:	0553      	lsls	r3, r2, #21
 8008e10:	d527      	bpl.n	8008e62 <__ssputs_r+0x8e>
 8008e12:	4629      	mov	r1, r5
 8008e14:	f7ff fbd0 	bl	80085b8 <_malloc_r>
 8008e18:	4606      	mov	r6, r0
 8008e1a:	b360      	cbz	r0, 8008e76 <__ssputs_r+0xa2>
 8008e1c:	6921      	ldr	r1, [r4, #16]
 8008e1e:	464a      	mov	r2, r9
 8008e20:	f000 fa18 	bl	8009254 <memcpy>
 8008e24:	89a3      	ldrh	r3, [r4, #12]
 8008e26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e2e:	81a3      	strh	r3, [r4, #12]
 8008e30:	6126      	str	r6, [r4, #16]
 8008e32:	6165      	str	r5, [r4, #20]
 8008e34:	444e      	add	r6, r9
 8008e36:	eba5 0509 	sub.w	r5, r5, r9
 8008e3a:	6026      	str	r6, [r4, #0]
 8008e3c:	60a5      	str	r5, [r4, #8]
 8008e3e:	463e      	mov	r6, r7
 8008e40:	42be      	cmp	r6, r7
 8008e42:	d900      	bls.n	8008e46 <__ssputs_r+0x72>
 8008e44:	463e      	mov	r6, r7
 8008e46:	6820      	ldr	r0, [r4, #0]
 8008e48:	4632      	mov	r2, r6
 8008e4a:	4641      	mov	r1, r8
 8008e4c:	f000 f9d8 	bl	8009200 <memmove>
 8008e50:	68a3      	ldr	r3, [r4, #8]
 8008e52:	1b9b      	subs	r3, r3, r6
 8008e54:	60a3      	str	r3, [r4, #8]
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	4433      	add	r3, r6
 8008e5a:	6023      	str	r3, [r4, #0]
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e62:	462a      	mov	r2, r5
 8008e64:	f000 fa31 	bl	80092ca <_realloc_r>
 8008e68:	4606      	mov	r6, r0
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	d1e0      	bne.n	8008e30 <__ssputs_r+0x5c>
 8008e6e:	6921      	ldr	r1, [r4, #16]
 8008e70:	4650      	mov	r0, sl
 8008e72:	f7ff fb2d 	bl	80084d0 <_free_r>
 8008e76:	230c      	movs	r3, #12
 8008e78:	f8ca 3000 	str.w	r3, [sl]
 8008e7c:	89a3      	ldrh	r3, [r4, #12]
 8008e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e82:	81a3      	strh	r3, [r4, #12]
 8008e84:	f04f 30ff 	mov.w	r0, #4294967295
 8008e88:	e7e9      	b.n	8008e5e <__ssputs_r+0x8a>
	...

08008e8c <_svfiprintf_r>:
 8008e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e90:	4698      	mov	r8, r3
 8008e92:	898b      	ldrh	r3, [r1, #12]
 8008e94:	061b      	lsls	r3, r3, #24
 8008e96:	b09d      	sub	sp, #116	@ 0x74
 8008e98:	4607      	mov	r7, r0
 8008e9a:	460d      	mov	r5, r1
 8008e9c:	4614      	mov	r4, r2
 8008e9e:	d510      	bpl.n	8008ec2 <_svfiprintf_r+0x36>
 8008ea0:	690b      	ldr	r3, [r1, #16]
 8008ea2:	b973      	cbnz	r3, 8008ec2 <_svfiprintf_r+0x36>
 8008ea4:	2140      	movs	r1, #64	@ 0x40
 8008ea6:	f7ff fb87 	bl	80085b8 <_malloc_r>
 8008eaa:	6028      	str	r0, [r5, #0]
 8008eac:	6128      	str	r0, [r5, #16]
 8008eae:	b930      	cbnz	r0, 8008ebe <_svfiprintf_r+0x32>
 8008eb0:	230c      	movs	r3, #12
 8008eb2:	603b      	str	r3, [r7, #0]
 8008eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb8:	b01d      	add	sp, #116	@ 0x74
 8008eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ebe:	2340      	movs	r3, #64	@ 0x40
 8008ec0:	616b      	str	r3, [r5, #20]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ec6:	2320      	movs	r3, #32
 8008ec8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ecc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ed0:	2330      	movs	r3, #48	@ 0x30
 8008ed2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009070 <_svfiprintf_r+0x1e4>
 8008ed6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008eda:	f04f 0901 	mov.w	r9, #1
 8008ede:	4623      	mov	r3, r4
 8008ee0:	469a      	mov	sl, r3
 8008ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ee6:	b10a      	cbz	r2, 8008eec <_svfiprintf_r+0x60>
 8008ee8:	2a25      	cmp	r2, #37	@ 0x25
 8008eea:	d1f9      	bne.n	8008ee0 <_svfiprintf_r+0x54>
 8008eec:	ebba 0b04 	subs.w	fp, sl, r4
 8008ef0:	d00b      	beq.n	8008f0a <_svfiprintf_r+0x7e>
 8008ef2:	465b      	mov	r3, fp
 8008ef4:	4622      	mov	r2, r4
 8008ef6:	4629      	mov	r1, r5
 8008ef8:	4638      	mov	r0, r7
 8008efa:	f7ff ff6b 	bl	8008dd4 <__ssputs_r>
 8008efe:	3001      	adds	r0, #1
 8008f00:	f000 80a7 	beq.w	8009052 <_svfiprintf_r+0x1c6>
 8008f04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f06:	445a      	add	r2, fp
 8008f08:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 809f 	beq.w	8009052 <_svfiprintf_r+0x1c6>
 8008f14:	2300      	movs	r3, #0
 8008f16:	f04f 32ff 	mov.w	r2, #4294967295
 8008f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f1e:	f10a 0a01 	add.w	sl, sl, #1
 8008f22:	9304      	str	r3, [sp, #16]
 8008f24:	9307      	str	r3, [sp, #28]
 8008f26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f2c:	4654      	mov	r4, sl
 8008f2e:	2205      	movs	r2, #5
 8008f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f34:	484e      	ldr	r0, [pc, #312]	@ (8009070 <_svfiprintf_r+0x1e4>)
 8008f36:	f7f7 f963 	bl	8000200 <memchr>
 8008f3a:	9a04      	ldr	r2, [sp, #16]
 8008f3c:	b9d8      	cbnz	r0, 8008f76 <_svfiprintf_r+0xea>
 8008f3e:	06d0      	lsls	r0, r2, #27
 8008f40:	bf44      	itt	mi
 8008f42:	2320      	movmi	r3, #32
 8008f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f48:	0711      	lsls	r1, r2, #28
 8008f4a:	bf44      	itt	mi
 8008f4c:	232b      	movmi	r3, #43	@ 0x2b
 8008f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f52:	f89a 3000 	ldrb.w	r3, [sl]
 8008f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f58:	d015      	beq.n	8008f86 <_svfiprintf_r+0xfa>
 8008f5a:	9a07      	ldr	r2, [sp, #28]
 8008f5c:	4654      	mov	r4, sl
 8008f5e:	2000      	movs	r0, #0
 8008f60:	f04f 0c0a 	mov.w	ip, #10
 8008f64:	4621      	mov	r1, r4
 8008f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f6a:	3b30      	subs	r3, #48	@ 0x30
 8008f6c:	2b09      	cmp	r3, #9
 8008f6e:	d94b      	bls.n	8009008 <_svfiprintf_r+0x17c>
 8008f70:	b1b0      	cbz	r0, 8008fa0 <_svfiprintf_r+0x114>
 8008f72:	9207      	str	r2, [sp, #28]
 8008f74:	e014      	b.n	8008fa0 <_svfiprintf_r+0x114>
 8008f76:	eba0 0308 	sub.w	r3, r0, r8
 8008f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	9304      	str	r3, [sp, #16]
 8008f82:	46a2      	mov	sl, r4
 8008f84:	e7d2      	b.n	8008f2c <_svfiprintf_r+0xa0>
 8008f86:	9b03      	ldr	r3, [sp, #12]
 8008f88:	1d19      	adds	r1, r3, #4
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	9103      	str	r1, [sp, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	bfbb      	ittet	lt
 8008f92:	425b      	neglt	r3, r3
 8008f94:	f042 0202 	orrlt.w	r2, r2, #2
 8008f98:	9307      	strge	r3, [sp, #28]
 8008f9a:	9307      	strlt	r3, [sp, #28]
 8008f9c:	bfb8      	it	lt
 8008f9e:	9204      	strlt	r2, [sp, #16]
 8008fa0:	7823      	ldrb	r3, [r4, #0]
 8008fa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fa4:	d10a      	bne.n	8008fbc <_svfiprintf_r+0x130>
 8008fa6:	7863      	ldrb	r3, [r4, #1]
 8008fa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008faa:	d132      	bne.n	8009012 <_svfiprintf_r+0x186>
 8008fac:	9b03      	ldr	r3, [sp, #12]
 8008fae:	1d1a      	adds	r2, r3, #4
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	9203      	str	r2, [sp, #12]
 8008fb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fb8:	3402      	adds	r4, #2
 8008fba:	9305      	str	r3, [sp, #20]
 8008fbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009080 <_svfiprintf_r+0x1f4>
 8008fc0:	7821      	ldrb	r1, [r4, #0]
 8008fc2:	2203      	movs	r2, #3
 8008fc4:	4650      	mov	r0, sl
 8008fc6:	f7f7 f91b 	bl	8000200 <memchr>
 8008fca:	b138      	cbz	r0, 8008fdc <_svfiprintf_r+0x150>
 8008fcc:	9b04      	ldr	r3, [sp, #16]
 8008fce:	eba0 000a 	sub.w	r0, r0, sl
 8008fd2:	2240      	movs	r2, #64	@ 0x40
 8008fd4:	4082      	lsls	r2, r0
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	3401      	adds	r4, #1
 8008fda:	9304      	str	r3, [sp, #16]
 8008fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe0:	4824      	ldr	r0, [pc, #144]	@ (8009074 <_svfiprintf_r+0x1e8>)
 8008fe2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fe6:	2206      	movs	r2, #6
 8008fe8:	f7f7 f90a 	bl	8000200 <memchr>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d036      	beq.n	800905e <_svfiprintf_r+0x1d2>
 8008ff0:	4b21      	ldr	r3, [pc, #132]	@ (8009078 <_svfiprintf_r+0x1ec>)
 8008ff2:	bb1b      	cbnz	r3, 800903c <_svfiprintf_r+0x1b0>
 8008ff4:	9b03      	ldr	r3, [sp, #12]
 8008ff6:	3307      	adds	r3, #7
 8008ff8:	f023 0307 	bic.w	r3, r3, #7
 8008ffc:	3308      	adds	r3, #8
 8008ffe:	9303      	str	r3, [sp, #12]
 8009000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009002:	4433      	add	r3, r6
 8009004:	9309      	str	r3, [sp, #36]	@ 0x24
 8009006:	e76a      	b.n	8008ede <_svfiprintf_r+0x52>
 8009008:	fb0c 3202 	mla	r2, ip, r2, r3
 800900c:	460c      	mov	r4, r1
 800900e:	2001      	movs	r0, #1
 8009010:	e7a8      	b.n	8008f64 <_svfiprintf_r+0xd8>
 8009012:	2300      	movs	r3, #0
 8009014:	3401      	adds	r4, #1
 8009016:	9305      	str	r3, [sp, #20]
 8009018:	4619      	mov	r1, r3
 800901a:	f04f 0c0a 	mov.w	ip, #10
 800901e:	4620      	mov	r0, r4
 8009020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009024:	3a30      	subs	r2, #48	@ 0x30
 8009026:	2a09      	cmp	r2, #9
 8009028:	d903      	bls.n	8009032 <_svfiprintf_r+0x1a6>
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0c6      	beq.n	8008fbc <_svfiprintf_r+0x130>
 800902e:	9105      	str	r1, [sp, #20]
 8009030:	e7c4      	b.n	8008fbc <_svfiprintf_r+0x130>
 8009032:	fb0c 2101 	mla	r1, ip, r1, r2
 8009036:	4604      	mov	r4, r0
 8009038:	2301      	movs	r3, #1
 800903a:	e7f0      	b.n	800901e <_svfiprintf_r+0x192>
 800903c:	ab03      	add	r3, sp, #12
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	462a      	mov	r2, r5
 8009042:	4b0e      	ldr	r3, [pc, #56]	@ (800907c <_svfiprintf_r+0x1f0>)
 8009044:	a904      	add	r1, sp, #16
 8009046:	4638      	mov	r0, r7
 8009048:	f7fd fdfe 	bl	8006c48 <_printf_float>
 800904c:	1c42      	adds	r2, r0, #1
 800904e:	4606      	mov	r6, r0
 8009050:	d1d6      	bne.n	8009000 <_svfiprintf_r+0x174>
 8009052:	89ab      	ldrh	r3, [r5, #12]
 8009054:	065b      	lsls	r3, r3, #25
 8009056:	f53f af2d 	bmi.w	8008eb4 <_svfiprintf_r+0x28>
 800905a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800905c:	e72c      	b.n	8008eb8 <_svfiprintf_r+0x2c>
 800905e:	ab03      	add	r3, sp, #12
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	462a      	mov	r2, r5
 8009064:	4b05      	ldr	r3, [pc, #20]	@ (800907c <_svfiprintf_r+0x1f0>)
 8009066:	a904      	add	r1, sp, #16
 8009068:	4638      	mov	r0, r7
 800906a:	f7fe f885 	bl	8007178 <_printf_i>
 800906e:	e7ed      	b.n	800904c <_svfiprintf_r+0x1c0>
 8009070:	0800a098 	.word	0x0800a098
 8009074:	0800a0a2 	.word	0x0800a0a2
 8009078:	08006c49 	.word	0x08006c49
 800907c:	08008dd5 	.word	0x08008dd5
 8009080:	0800a09e 	.word	0x0800a09e

08009084 <__sflush_r>:
 8009084:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800908c:	0716      	lsls	r6, r2, #28
 800908e:	4605      	mov	r5, r0
 8009090:	460c      	mov	r4, r1
 8009092:	d454      	bmi.n	800913e <__sflush_r+0xba>
 8009094:	684b      	ldr	r3, [r1, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	dc02      	bgt.n	80090a0 <__sflush_r+0x1c>
 800909a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800909c:	2b00      	cmp	r3, #0
 800909e:	dd48      	ble.n	8009132 <__sflush_r+0xae>
 80090a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090a2:	2e00      	cmp	r6, #0
 80090a4:	d045      	beq.n	8009132 <__sflush_r+0xae>
 80090a6:	2300      	movs	r3, #0
 80090a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090ac:	682f      	ldr	r7, [r5, #0]
 80090ae:	6a21      	ldr	r1, [r4, #32]
 80090b0:	602b      	str	r3, [r5, #0]
 80090b2:	d030      	beq.n	8009116 <__sflush_r+0x92>
 80090b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090b6:	89a3      	ldrh	r3, [r4, #12]
 80090b8:	0759      	lsls	r1, r3, #29
 80090ba:	d505      	bpl.n	80090c8 <__sflush_r+0x44>
 80090bc:	6863      	ldr	r3, [r4, #4]
 80090be:	1ad2      	subs	r2, r2, r3
 80090c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090c2:	b10b      	cbz	r3, 80090c8 <__sflush_r+0x44>
 80090c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090c6:	1ad2      	subs	r2, r2, r3
 80090c8:	2300      	movs	r3, #0
 80090ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090cc:	6a21      	ldr	r1, [r4, #32]
 80090ce:	4628      	mov	r0, r5
 80090d0:	47b0      	blx	r6
 80090d2:	1c43      	adds	r3, r0, #1
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	d106      	bne.n	80090e6 <__sflush_r+0x62>
 80090d8:	6829      	ldr	r1, [r5, #0]
 80090da:	291d      	cmp	r1, #29
 80090dc:	d82b      	bhi.n	8009136 <__sflush_r+0xb2>
 80090de:	4a2a      	ldr	r2, [pc, #168]	@ (8009188 <__sflush_r+0x104>)
 80090e0:	410a      	asrs	r2, r1
 80090e2:	07d6      	lsls	r6, r2, #31
 80090e4:	d427      	bmi.n	8009136 <__sflush_r+0xb2>
 80090e6:	2200      	movs	r2, #0
 80090e8:	6062      	str	r2, [r4, #4]
 80090ea:	04d9      	lsls	r1, r3, #19
 80090ec:	6922      	ldr	r2, [r4, #16]
 80090ee:	6022      	str	r2, [r4, #0]
 80090f0:	d504      	bpl.n	80090fc <__sflush_r+0x78>
 80090f2:	1c42      	adds	r2, r0, #1
 80090f4:	d101      	bne.n	80090fa <__sflush_r+0x76>
 80090f6:	682b      	ldr	r3, [r5, #0]
 80090f8:	b903      	cbnz	r3, 80090fc <__sflush_r+0x78>
 80090fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80090fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090fe:	602f      	str	r7, [r5, #0]
 8009100:	b1b9      	cbz	r1, 8009132 <__sflush_r+0xae>
 8009102:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009106:	4299      	cmp	r1, r3
 8009108:	d002      	beq.n	8009110 <__sflush_r+0x8c>
 800910a:	4628      	mov	r0, r5
 800910c:	f7ff f9e0 	bl	80084d0 <_free_r>
 8009110:	2300      	movs	r3, #0
 8009112:	6363      	str	r3, [r4, #52]	@ 0x34
 8009114:	e00d      	b.n	8009132 <__sflush_r+0xae>
 8009116:	2301      	movs	r3, #1
 8009118:	4628      	mov	r0, r5
 800911a:	47b0      	blx	r6
 800911c:	4602      	mov	r2, r0
 800911e:	1c50      	adds	r0, r2, #1
 8009120:	d1c9      	bne.n	80090b6 <__sflush_r+0x32>
 8009122:	682b      	ldr	r3, [r5, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d0c6      	beq.n	80090b6 <__sflush_r+0x32>
 8009128:	2b1d      	cmp	r3, #29
 800912a:	d001      	beq.n	8009130 <__sflush_r+0xac>
 800912c:	2b16      	cmp	r3, #22
 800912e:	d11e      	bne.n	800916e <__sflush_r+0xea>
 8009130:	602f      	str	r7, [r5, #0]
 8009132:	2000      	movs	r0, #0
 8009134:	e022      	b.n	800917c <__sflush_r+0xf8>
 8009136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800913a:	b21b      	sxth	r3, r3
 800913c:	e01b      	b.n	8009176 <__sflush_r+0xf2>
 800913e:	690f      	ldr	r7, [r1, #16]
 8009140:	2f00      	cmp	r7, #0
 8009142:	d0f6      	beq.n	8009132 <__sflush_r+0xae>
 8009144:	0793      	lsls	r3, r2, #30
 8009146:	680e      	ldr	r6, [r1, #0]
 8009148:	bf08      	it	eq
 800914a:	694b      	ldreq	r3, [r1, #20]
 800914c:	600f      	str	r7, [r1, #0]
 800914e:	bf18      	it	ne
 8009150:	2300      	movne	r3, #0
 8009152:	eba6 0807 	sub.w	r8, r6, r7
 8009156:	608b      	str	r3, [r1, #8]
 8009158:	f1b8 0f00 	cmp.w	r8, #0
 800915c:	dde9      	ble.n	8009132 <__sflush_r+0xae>
 800915e:	6a21      	ldr	r1, [r4, #32]
 8009160:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009162:	4643      	mov	r3, r8
 8009164:	463a      	mov	r2, r7
 8009166:	4628      	mov	r0, r5
 8009168:	47b0      	blx	r6
 800916a:	2800      	cmp	r0, #0
 800916c:	dc08      	bgt.n	8009180 <__sflush_r+0xfc>
 800916e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009176:	81a3      	strh	r3, [r4, #12]
 8009178:	f04f 30ff 	mov.w	r0, #4294967295
 800917c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009180:	4407      	add	r7, r0
 8009182:	eba8 0800 	sub.w	r8, r8, r0
 8009186:	e7e7      	b.n	8009158 <__sflush_r+0xd4>
 8009188:	dfbffffe 	.word	0xdfbffffe

0800918c <_fflush_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	690b      	ldr	r3, [r1, #16]
 8009190:	4605      	mov	r5, r0
 8009192:	460c      	mov	r4, r1
 8009194:	b913      	cbnz	r3, 800919c <_fflush_r+0x10>
 8009196:	2500      	movs	r5, #0
 8009198:	4628      	mov	r0, r5
 800919a:	bd38      	pop	{r3, r4, r5, pc}
 800919c:	b118      	cbz	r0, 80091a6 <_fflush_r+0x1a>
 800919e:	6a03      	ldr	r3, [r0, #32]
 80091a0:	b90b      	cbnz	r3, 80091a6 <_fflush_r+0x1a>
 80091a2:	f7fe f995 	bl	80074d0 <__sinit>
 80091a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0f3      	beq.n	8009196 <_fflush_r+0xa>
 80091ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091b0:	07d0      	lsls	r0, r2, #31
 80091b2:	d404      	bmi.n	80091be <_fflush_r+0x32>
 80091b4:	0599      	lsls	r1, r3, #22
 80091b6:	d402      	bmi.n	80091be <_fflush_r+0x32>
 80091b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091ba:	f7fe fb1c 	bl	80077f6 <__retarget_lock_acquire_recursive>
 80091be:	4628      	mov	r0, r5
 80091c0:	4621      	mov	r1, r4
 80091c2:	f7ff ff5f 	bl	8009084 <__sflush_r>
 80091c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091c8:	07da      	lsls	r2, r3, #31
 80091ca:	4605      	mov	r5, r0
 80091cc:	d4e4      	bmi.n	8009198 <_fflush_r+0xc>
 80091ce:	89a3      	ldrh	r3, [r4, #12]
 80091d0:	059b      	lsls	r3, r3, #22
 80091d2:	d4e1      	bmi.n	8009198 <_fflush_r+0xc>
 80091d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091d6:	f7fe fb0f 	bl	80077f8 <__retarget_lock_release_recursive>
 80091da:	e7dd      	b.n	8009198 <_fflush_r+0xc>

080091dc <fiprintf>:
 80091dc:	b40e      	push	{r1, r2, r3}
 80091de:	b503      	push	{r0, r1, lr}
 80091e0:	4601      	mov	r1, r0
 80091e2:	ab03      	add	r3, sp, #12
 80091e4:	4805      	ldr	r0, [pc, #20]	@ (80091fc <fiprintf+0x20>)
 80091e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ea:	6800      	ldr	r0, [r0, #0]
 80091ec:	9301      	str	r3, [sp, #4]
 80091ee:	f000 f8d1 	bl	8009394 <_vfiprintf_r>
 80091f2:	b002      	add	sp, #8
 80091f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091f8:	b003      	add	sp, #12
 80091fa:	4770      	bx	lr
 80091fc:	2000009c 	.word	0x2000009c

08009200 <memmove>:
 8009200:	4288      	cmp	r0, r1
 8009202:	b510      	push	{r4, lr}
 8009204:	eb01 0402 	add.w	r4, r1, r2
 8009208:	d902      	bls.n	8009210 <memmove+0x10>
 800920a:	4284      	cmp	r4, r0
 800920c:	4623      	mov	r3, r4
 800920e:	d807      	bhi.n	8009220 <memmove+0x20>
 8009210:	1e43      	subs	r3, r0, #1
 8009212:	42a1      	cmp	r1, r4
 8009214:	d008      	beq.n	8009228 <memmove+0x28>
 8009216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800921a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800921e:	e7f8      	b.n	8009212 <memmove+0x12>
 8009220:	4402      	add	r2, r0
 8009222:	4601      	mov	r1, r0
 8009224:	428a      	cmp	r2, r1
 8009226:	d100      	bne.n	800922a <memmove+0x2a>
 8009228:	bd10      	pop	{r4, pc}
 800922a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800922e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009232:	e7f7      	b.n	8009224 <memmove+0x24>

08009234 <_sbrk_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4d06      	ldr	r5, [pc, #24]	@ (8009250 <_sbrk_r+0x1c>)
 8009238:	2300      	movs	r3, #0
 800923a:	4604      	mov	r4, r0
 800923c:	4608      	mov	r0, r1
 800923e:	602b      	str	r3, [r5, #0]
 8009240:	f7f8 ff5a 	bl	80020f8 <_sbrk>
 8009244:	1c43      	adds	r3, r0, #1
 8009246:	d102      	bne.n	800924e <_sbrk_r+0x1a>
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	b103      	cbz	r3, 800924e <_sbrk_r+0x1a>
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	20000740 	.word	0x20000740

08009254 <memcpy>:
 8009254:	440a      	add	r2, r1
 8009256:	4291      	cmp	r1, r2
 8009258:	f100 33ff 	add.w	r3, r0, #4294967295
 800925c:	d100      	bne.n	8009260 <memcpy+0xc>
 800925e:	4770      	bx	lr
 8009260:	b510      	push	{r4, lr}
 8009262:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009266:	f803 4f01 	strb.w	r4, [r3, #1]!
 800926a:	4291      	cmp	r1, r2
 800926c:	d1f9      	bne.n	8009262 <memcpy+0xe>
 800926e:	bd10      	pop	{r4, pc}

08009270 <abort>:
 8009270:	b508      	push	{r3, lr}
 8009272:	2006      	movs	r0, #6
 8009274:	f000 fa62 	bl	800973c <raise>
 8009278:	2001      	movs	r0, #1
 800927a:	f7f8 fec5 	bl	8002008 <_exit>

0800927e <_calloc_r>:
 800927e:	b570      	push	{r4, r5, r6, lr}
 8009280:	fba1 5402 	umull	r5, r4, r1, r2
 8009284:	b93c      	cbnz	r4, 8009296 <_calloc_r+0x18>
 8009286:	4629      	mov	r1, r5
 8009288:	f7ff f996 	bl	80085b8 <_malloc_r>
 800928c:	4606      	mov	r6, r0
 800928e:	b928      	cbnz	r0, 800929c <_calloc_r+0x1e>
 8009290:	2600      	movs	r6, #0
 8009292:	4630      	mov	r0, r6
 8009294:	bd70      	pop	{r4, r5, r6, pc}
 8009296:	220c      	movs	r2, #12
 8009298:	6002      	str	r2, [r0, #0]
 800929a:	e7f9      	b.n	8009290 <_calloc_r+0x12>
 800929c:	462a      	mov	r2, r5
 800929e:	4621      	mov	r1, r4
 80092a0:	f7fe f9d0 	bl	8007644 <memset>
 80092a4:	e7f5      	b.n	8009292 <_calloc_r+0x14>

080092a6 <__ascii_mbtowc>:
 80092a6:	b082      	sub	sp, #8
 80092a8:	b901      	cbnz	r1, 80092ac <__ascii_mbtowc+0x6>
 80092aa:	a901      	add	r1, sp, #4
 80092ac:	b142      	cbz	r2, 80092c0 <__ascii_mbtowc+0x1a>
 80092ae:	b14b      	cbz	r3, 80092c4 <__ascii_mbtowc+0x1e>
 80092b0:	7813      	ldrb	r3, [r2, #0]
 80092b2:	600b      	str	r3, [r1, #0]
 80092b4:	7812      	ldrb	r2, [r2, #0]
 80092b6:	1e10      	subs	r0, r2, #0
 80092b8:	bf18      	it	ne
 80092ba:	2001      	movne	r0, #1
 80092bc:	b002      	add	sp, #8
 80092be:	4770      	bx	lr
 80092c0:	4610      	mov	r0, r2
 80092c2:	e7fb      	b.n	80092bc <__ascii_mbtowc+0x16>
 80092c4:	f06f 0001 	mvn.w	r0, #1
 80092c8:	e7f8      	b.n	80092bc <__ascii_mbtowc+0x16>

080092ca <_realloc_r>:
 80092ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ce:	4680      	mov	r8, r0
 80092d0:	4615      	mov	r5, r2
 80092d2:	460c      	mov	r4, r1
 80092d4:	b921      	cbnz	r1, 80092e0 <_realloc_r+0x16>
 80092d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092da:	4611      	mov	r1, r2
 80092dc:	f7ff b96c 	b.w	80085b8 <_malloc_r>
 80092e0:	b92a      	cbnz	r2, 80092ee <_realloc_r+0x24>
 80092e2:	f7ff f8f5 	bl	80084d0 <_free_r>
 80092e6:	2400      	movs	r4, #0
 80092e8:	4620      	mov	r0, r4
 80092ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ee:	f000 fa41 	bl	8009774 <_malloc_usable_size_r>
 80092f2:	4285      	cmp	r5, r0
 80092f4:	4606      	mov	r6, r0
 80092f6:	d802      	bhi.n	80092fe <_realloc_r+0x34>
 80092f8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80092fc:	d8f4      	bhi.n	80092e8 <_realloc_r+0x1e>
 80092fe:	4629      	mov	r1, r5
 8009300:	4640      	mov	r0, r8
 8009302:	f7ff f959 	bl	80085b8 <_malloc_r>
 8009306:	4607      	mov	r7, r0
 8009308:	2800      	cmp	r0, #0
 800930a:	d0ec      	beq.n	80092e6 <_realloc_r+0x1c>
 800930c:	42b5      	cmp	r5, r6
 800930e:	462a      	mov	r2, r5
 8009310:	4621      	mov	r1, r4
 8009312:	bf28      	it	cs
 8009314:	4632      	movcs	r2, r6
 8009316:	f7ff ff9d 	bl	8009254 <memcpy>
 800931a:	4621      	mov	r1, r4
 800931c:	4640      	mov	r0, r8
 800931e:	f7ff f8d7 	bl	80084d0 <_free_r>
 8009322:	463c      	mov	r4, r7
 8009324:	e7e0      	b.n	80092e8 <_realloc_r+0x1e>

08009326 <__ascii_wctomb>:
 8009326:	4603      	mov	r3, r0
 8009328:	4608      	mov	r0, r1
 800932a:	b141      	cbz	r1, 800933e <__ascii_wctomb+0x18>
 800932c:	2aff      	cmp	r2, #255	@ 0xff
 800932e:	d904      	bls.n	800933a <__ascii_wctomb+0x14>
 8009330:	228a      	movs	r2, #138	@ 0x8a
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	f04f 30ff 	mov.w	r0, #4294967295
 8009338:	4770      	bx	lr
 800933a:	700a      	strb	r2, [r1, #0]
 800933c:	2001      	movs	r0, #1
 800933e:	4770      	bx	lr

08009340 <__sfputc_r>:
 8009340:	6893      	ldr	r3, [r2, #8]
 8009342:	3b01      	subs	r3, #1
 8009344:	2b00      	cmp	r3, #0
 8009346:	b410      	push	{r4}
 8009348:	6093      	str	r3, [r2, #8]
 800934a:	da08      	bge.n	800935e <__sfputc_r+0x1e>
 800934c:	6994      	ldr	r4, [r2, #24]
 800934e:	42a3      	cmp	r3, r4
 8009350:	db01      	blt.n	8009356 <__sfputc_r+0x16>
 8009352:	290a      	cmp	r1, #10
 8009354:	d103      	bne.n	800935e <__sfputc_r+0x1e>
 8009356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800935a:	f000 b933 	b.w	80095c4 <__swbuf_r>
 800935e:	6813      	ldr	r3, [r2, #0]
 8009360:	1c58      	adds	r0, r3, #1
 8009362:	6010      	str	r0, [r2, #0]
 8009364:	7019      	strb	r1, [r3, #0]
 8009366:	4608      	mov	r0, r1
 8009368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800936c:	4770      	bx	lr

0800936e <__sfputs_r>:
 800936e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009370:	4606      	mov	r6, r0
 8009372:	460f      	mov	r7, r1
 8009374:	4614      	mov	r4, r2
 8009376:	18d5      	adds	r5, r2, r3
 8009378:	42ac      	cmp	r4, r5
 800937a:	d101      	bne.n	8009380 <__sfputs_r+0x12>
 800937c:	2000      	movs	r0, #0
 800937e:	e007      	b.n	8009390 <__sfputs_r+0x22>
 8009380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009384:	463a      	mov	r2, r7
 8009386:	4630      	mov	r0, r6
 8009388:	f7ff ffda 	bl	8009340 <__sfputc_r>
 800938c:	1c43      	adds	r3, r0, #1
 800938e:	d1f3      	bne.n	8009378 <__sfputs_r+0xa>
 8009390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009394 <_vfiprintf_r>:
 8009394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009398:	460d      	mov	r5, r1
 800939a:	b09d      	sub	sp, #116	@ 0x74
 800939c:	4614      	mov	r4, r2
 800939e:	4698      	mov	r8, r3
 80093a0:	4606      	mov	r6, r0
 80093a2:	b118      	cbz	r0, 80093ac <_vfiprintf_r+0x18>
 80093a4:	6a03      	ldr	r3, [r0, #32]
 80093a6:	b90b      	cbnz	r3, 80093ac <_vfiprintf_r+0x18>
 80093a8:	f7fe f892 	bl	80074d0 <__sinit>
 80093ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093ae:	07d9      	lsls	r1, r3, #31
 80093b0:	d405      	bmi.n	80093be <_vfiprintf_r+0x2a>
 80093b2:	89ab      	ldrh	r3, [r5, #12]
 80093b4:	059a      	lsls	r2, r3, #22
 80093b6:	d402      	bmi.n	80093be <_vfiprintf_r+0x2a>
 80093b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093ba:	f7fe fa1c 	bl	80077f6 <__retarget_lock_acquire_recursive>
 80093be:	89ab      	ldrh	r3, [r5, #12]
 80093c0:	071b      	lsls	r3, r3, #28
 80093c2:	d501      	bpl.n	80093c8 <_vfiprintf_r+0x34>
 80093c4:	692b      	ldr	r3, [r5, #16]
 80093c6:	b99b      	cbnz	r3, 80093f0 <_vfiprintf_r+0x5c>
 80093c8:	4629      	mov	r1, r5
 80093ca:	4630      	mov	r0, r6
 80093cc:	f000 f938 	bl	8009640 <__swsetup_r>
 80093d0:	b170      	cbz	r0, 80093f0 <_vfiprintf_r+0x5c>
 80093d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093d4:	07dc      	lsls	r4, r3, #31
 80093d6:	d504      	bpl.n	80093e2 <_vfiprintf_r+0x4e>
 80093d8:	f04f 30ff 	mov.w	r0, #4294967295
 80093dc:	b01d      	add	sp, #116	@ 0x74
 80093de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e2:	89ab      	ldrh	r3, [r5, #12]
 80093e4:	0598      	lsls	r0, r3, #22
 80093e6:	d4f7      	bmi.n	80093d8 <_vfiprintf_r+0x44>
 80093e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093ea:	f7fe fa05 	bl	80077f8 <__retarget_lock_release_recursive>
 80093ee:	e7f3      	b.n	80093d8 <_vfiprintf_r+0x44>
 80093f0:	2300      	movs	r3, #0
 80093f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093f4:	2320      	movs	r3, #32
 80093f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80093fe:	2330      	movs	r3, #48	@ 0x30
 8009400:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80095b0 <_vfiprintf_r+0x21c>
 8009404:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009408:	f04f 0901 	mov.w	r9, #1
 800940c:	4623      	mov	r3, r4
 800940e:	469a      	mov	sl, r3
 8009410:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009414:	b10a      	cbz	r2, 800941a <_vfiprintf_r+0x86>
 8009416:	2a25      	cmp	r2, #37	@ 0x25
 8009418:	d1f9      	bne.n	800940e <_vfiprintf_r+0x7a>
 800941a:	ebba 0b04 	subs.w	fp, sl, r4
 800941e:	d00b      	beq.n	8009438 <_vfiprintf_r+0xa4>
 8009420:	465b      	mov	r3, fp
 8009422:	4622      	mov	r2, r4
 8009424:	4629      	mov	r1, r5
 8009426:	4630      	mov	r0, r6
 8009428:	f7ff ffa1 	bl	800936e <__sfputs_r>
 800942c:	3001      	adds	r0, #1
 800942e:	f000 80a7 	beq.w	8009580 <_vfiprintf_r+0x1ec>
 8009432:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009434:	445a      	add	r2, fp
 8009436:	9209      	str	r2, [sp, #36]	@ 0x24
 8009438:	f89a 3000 	ldrb.w	r3, [sl]
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 809f 	beq.w	8009580 <_vfiprintf_r+0x1ec>
 8009442:	2300      	movs	r3, #0
 8009444:	f04f 32ff 	mov.w	r2, #4294967295
 8009448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800944c:	f10a 0a01 	add.w	sl, sl, #1
 8009450:	9304      	str	r3, [sp, #16]
 8009452:	9307      	str	r3, [sp, #28]
 8009454:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009458:	931a      	str	r3, [sp, #104]	@ 0x68
 800945a:	4654      	mov	r4, sl
 800945c:	2205      	movs	r2, #5
 800945e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009462:	4853      	ldr	r0, [pc, #332]	@ (80095b0 <_vfiprintf_r+0x21c>)
 8009464:	f7f6 fecc 	bl	8000200 <memchr>
 8009468:	9a04      	ldr	r2, [sp, #16]
 800946a:	b9d8      	cbnz	r0, 80094a4 <_vfiprintf_r+0x110>
 800946c:	06d1      	lsls	r1, r2, #27
 800946e:	bf44      	itt	mi
 8009470:	2320      	movmi	r3, #32
 8009472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009476:	0713      	lsls	r3, r2, #28
 8009478:	bf44      	itt	mi
 800947a:	232b      	movmi	r3, #43	@ 0x2b
 800947c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009480:	f89a 3000 	ldrb.w	r3, [sl]
 8009484:	2b2a      	cmp	r3, #42	@ 0x2a
 8009486:	d015      	beq.n	80094b4 <_vfiprintf_r+0x120>
 8009488:	9a07      	ldr	r2, [sp, #28]
 800948a:	4654      	mov	r4, sl
 800948c:	2000      	movs	r0, #0
 800948e:	f04f 0c0a 	mov.w	ip, #10
 8009492:	4621      	mov	r1, r4
 8009494:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009498:	3b30      	subs	r3, #48	@ 0x30
 800949a:	2b09      	cmp	r3, #9
 800949c:	d94b      	bls.n	8009536 <_vfiprintf_r+0x1a2>
 800949e:	b1b0      	cbz	r0, 80094ce <_vfiprintf_r+0x13a>
 80094a0:	9207      	str	r2, [sp, #28]
 80094a2:	e014      	b.n	80094ce <_vfiprintf_r+0x13a>
 80094a4:	eba0 0308 	sub.w	r3, r0, r8
 80094a8:	fa09 f303 	lsl.w	r3, r9, r3
 80094ac:	4313      	orrs	r3, r2
 80094ae:	9304      	str	r3, [sp, #16]
 80094b0:	46a2      	mov	sl, r4
 80094b2:	e7d2      	b.n	800945a <_vfiprintf_r+0xc6>
 80094b4:	9b03      	ldr	r3, [sp, #12]
 80094b6:	1d19      	adds	r1, r3, #4
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	9103      	str	r1, [sp, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	bfbb      	ittet	lt
 80094c0:	425b      	neglt	r3, r3
 80094c2:	f042 0202 	orrlt.w	r2, r2, #2
 80094c6:	9307      	strge	r3, [sp, #28]
 80094c8:	9307      	strlt	r3, [sp, #28]
 80094ca:	bfb8      	it	lt
 80094cc:	9204      	strlt	r2, [sp, #16]
 80094ce:	7823      	ldrb	r3, [r4, #0]
 80094d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80094d2:	d10a      	bne.n	80094ea <_vfiprintf_r+0x156>
 80094d4:	7863      	ldrb	r3, [r4, #1]
 80094d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80094d8:	d132      	bne.n	8009540 <_vfiprintf_r+0x1ac>
 80094da:	9b03      	ldr	r3, [sp, #12]
 80094dc:	1d1a      	adds	r2, r3, #4
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	9203      	str	r2, [sp, #12]
 80094e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094e6:	3402      	adds	r4, #2
 80094e8:	9305      	str	r3, [sp, #20]
 80094ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80095c0 <_vfiprintf_r+0x22c>
 80094ee:	7821      	ldrb	r1, [r4, #0]
 80094f0:	2203      	movs	r2, #3
 80094f2:	4650      	mov	r0, sl
 80094f4:	f7f6 fe84 	bl	8000200 <memchr>
 80094f8:	b138      	cbz	r0, 800950a <_vfiprintf_r+0x176>
 80094fa:	9b04      	ldr	r3, [sp, #16]
 80094fc:	eba0 000a 	sub.w	r0, r0, sl
 8009500:	2240      	movs	r2, #64	@ 0x40
 8009502:	4082      	lsls	r2, r0
 8009504:	4313      	orrs	r3, r2
 8009506:	3401      	adds	r4, #1
 8009508:	9304      	str	r3, [sp, #16]
 800950a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800950e:	4829      	ldr	r0, [pc, #164]	@ (80095b4 <_vfiprintf_r+0x220>)
 8009510:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009514:	2206      	movs	r2, #6
 8009516:	f7f6 fe73 	bl	8000200 <memchr>
 800951a:	2800      	cmp	r0, #0
 800951c:	d03f      	beq.n	800959e <_vfiprintf_r+0x20a>
 800951e:	4b26      	ldr	r3, [pc, #152]	@ (80095b8 <_vfiprintf_r+0x224>)
 8009520:	bb1b      	cbnz	r3, 800956a <_vfiprintf_r+0x1d6>
 8009522:	9b03      	ldr	r3, [sp, #12]
 8009524:	3307      	adds	r3, #7
 8009526:	f023 0307 	bic.w	r3, r3, #7
 800952a:	3308      	adds	r3, #8
 800952c:	9303      	str	r3, [sp, #12]
 800952e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009530:	443b      	add	r3, r7
 8009532:	9309      	str	r3, [sp, #36]	@ 0x24
 8009534:	e76a      	b.n	800940c <_vfiprintf_r+0x78>
 8009536:	fb0c 3202 	mla	r2, ip, r2, r3
 800953a:	460c      	mov	r4, r1
 800953c:	2001      	movs	r0, #1
 800953e:	e7a8      	b.n	8009492 <_vfiprintf_r+0xfe>
 8009540:	2300      	movs	r3, #0
 8009542:	3401      	adds	r4, #1
 8009544:	9305      	str	r3, [sp, #20]
 8009546:	4619      	mov	r1, r3
 8009548:	f04f 0c0a 	mov.w	ip, #10
 800954c:	4620      	mov	r0, r4
 800954e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009552:	3a30      	subs	r2, #48	@ 0x30
 8009554:	2a09      	cmp	r2, #9
 8009556:	d903      	bls.n	8009560 <_vfiprintf_r+0x1cc>
 8009558:	2b00      	cmp	r3, #0
 800955a:	d0c6      	beq.n	80094ea <_vfiprintf_r+0x156>
 800955c:	9105      	str	r1, [sp, #20]
 800955e:	e7c4      	b.n	80094ea <_vfiprintf_r+0x156>
 8009560:	fb0c 2101 	mla	r1, ip, r1, r2
 8009564:	4604      	mov	r4, r0
 8009566:	2301      	movs	r3, #1
 8009568:	e7f0      	b.n	800954c <_vfiprintf_r+0x1b8>
 800956a:	ab03      	add	r3, sp, #12
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	462a      	mov	r2, r5
 8009570:	4b12      	ldr	r3, [pc, #72]	@ (80095bc <_vfiprintf_r+0x228>)
 8009572:	a904      	add	r1, sp, #16
 8009574:	4630      	mov	r0, r6
 8009576:	f7fd fb67 	bl	8006c48 <_printf_float>
 800957a:	4607      	mov	r7, r0
 800957c:	1c78      	adds	r0, r7, #1
 800957e:	d1d6      	bne.n	800952e <_vfiprintf_r+0x19a>
 8009580:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009582:	07d9      	lsls	r1, r3, #31
 8009584:	d405      	bmi.n	8009592 <_vfiprintf_r+0x1fe>
 8009586:	89ab      	ldrh	r3, [r5, #12]
 8009588:	059a      	lsls	r2, r3, #22
 800958a:	d402      	bmi.n	8009592 <_vfiprintf_r+0x1fe>
 800958c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800958e:	f7fe f933 	bl	80077f8 <__retarget_lock_release_recursive>
 8009592:	89ab      	ldrh	r3, [r5, #12]
 8009594:	065b      	lsls	r3, r3, #25
 8009596:	f53f af1f 	bmi.w	80093d8 <_vfiprintf_r+0x44>
 800959a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800959c:	e71e      	b.n	80093dc <_vfiprintf_r+0x48>
 800959e:	ab03      	add	r3, sp, #12
 80095a0:	9300      	str	r3, [sp, #0]
 80095a2:	462a      	mov	r2, r5
 80095a4:	4b05      	ldr	r3, [pc, #20]	@ (80095bc <_vfiprintf_r+0x228>)
 80095a6:	a904      	add	r1, sp, #16
 80095a8:	4630      	mov	r0, r6
 80095aa:	f7fd fde5 	bl	8007178 <_printf_i>
 80095ae:	e7e4      	b.n	800957a <_vfiprintf_r+0x1e6>
 80095b0:	0800a098 	.word	0x0800a098
 80095b4:	0800a0a2 	.word	0x0800a0a2
 80095b8:	08006c49 	.word	0x08006c49
 80095bc:	0800936f 	.word	0x0800936f
 80095c0:	0800a09e 	.word	0x0800a09e

080095c4 <__swbuf_r>:
 80095c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c6:	460e      	mov	r6, r1
 80095c8:	4614      	mov	r4, r2
 80095ca:	4605      	mov	r5, r0
 80095cc:	b118      	cbz	r0, 80095d6 <__swbuf_r+0x12>
 80095ce:	6a03      	ldr	r3, [r0, #32]
 80095d0:	b90b      	cbnz	r3, 80095d6 <__swbuf_r+0x12>
 80095d2:	f7fd ff7d 	bl	80074d0 <__sinit>
 80095d6:	69a3      	ldr	r3, [r4, #24]
 80095d8:	60a3      	str	r3, [r4, #8]
 80095da:	89a3      	ldrh	r3, [r4, #12]
 80095dc:	071a      	lsls	r2, r3, #28
 80095de:	d501      	bpl.n	80095e4 <__swbuf_r+0x20>
 80095e0:	6923      	ldr	r3, [r4, #16]
 80095e2:	b943      	cbnz	r3, 80095f6 <__swbuf_r+0x32>
 80095e4:	4621      	mov	r1, r4
 80095e6:	4628      	mov	r0, r5
 80095e8:	f000 f82a 	bl	8009640 <__swsetup_r>
 80095ec:	b118      	cbz	r0, 80095f6 <__swbuf_r+0x32>
 80095ee:	f04f 37ff 	mov.w	r7, #4294967295
 80095f2:	4638      	mov	r0, r7
 80095f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095f6:	6823      	ldr	r3, [r4, #0]
 80095f8:	6922      	ldr	r2, [r4, #16]
 80095fa:	1a98      	subs	r0, r3, r2
 80095fc:	6963      	ldr	r3, [r4, #20]
 80095fe:	b2f6      	uxtb	r6, r6
 8009600:	4283      	cmp	r3, r0
 8009602:	4637      	mov	r7, r6
 8009604:	dc05      	bgt.n	8009612 <__swbuf_r+0x4e>
 8009606:	4621      	mov	r1, r4
 8009608:	4628      	mov	r0, r5
 800960a:	f7ff fdbf 	bl	800918c <_fflush_r>
 800960e:	2800      	cmp	r0, #0
 8009610:	d1ed      	bne.n	80095ee <__swbuf_r+0x2a>
 8009612:	68a3      	ldr	r3, [r4, #8]
 8009614:	3b01      	subs	r3, #1
 8009616:	60a3      	str	r3, [r4, #8]
 8009618:	6823      	ldr	r3, [r4, #0]
 800961a:	1c5a      	adds	r2, r3, #1
 800961c:	6022      	str	r2, [r4, #0]
 800961e:	701e      	strb	r6, [r3, #0]
 8009620:	6962      	ldr	r2, [r4, #20]
 8009622:	1c43      	adds	r3, r0, #1
 8009624:	429a      	cmp	r2, r3
 8009626:	d004      	beq.n	8009632 <__swbuf_r+0x6e>
 8009628:	89a3      	ldrh	r3, [r4, #12]
 800962a:	07db      	lsls	r3, r3, #31
 800962c:	d5e1      	bpl.n	80095f2 <__swbuf_r+0x2e>
 800962e:	2e0a      	cmp	r6, #10
 8009630:	d1df      	bne.n	80095f2 <__swbuf_r+0x2e>
 8009632:	4621      	mov	r1, r4
 8009634:	4628      	mov	r0, r5
 8009636:	f7ff fda9 	bl	800918c <_fflush_r>
 800963a:	2800      	cmp	r0, #0
 800963c:	d0d9      	beq.n	80095f2 <__swbuf_r+0x2e>
 800963e:	e7d6      	b.n	80095ee <__swbuf_r+0x2a>

08009640 <__swsetup_r>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	4b29      	ldr	r3, [pc, #164]	@ (80096e8 <__swsetup_r+0xa8>)
 8009644:	4605      	mov	r5, r0
 8009646:	6818      	ldr	r0, [r3, #0]
 8009648:	460c      	mov	r4, r1
 800964a:	b118      	cbz	r0, 8009654 <__swsetup_r+0x14>
 800964c:	6a03      	ldr	r3, [r0, #32]
 800964e:	b90b      	cbnz	r3, 8009654 <__swsetup_r+0x14>
 8009650:	f7fd ff3e 	bl	80074d0 <__sinit>
 8009654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009658:	0719      	lsls	r1, r3, #28
 800965a:	d422      	bmi.n	80096a2 <__swsetup_r+0x62>
 800965c:	06da      	lsls	r2, r3, #27
 800965e:	d407      	bmi.n	8009670 <__swsetup_r+0x30>
 8009660:	2209      	movs	r2, #9
 8009662:	602a      	str	r2, [r5, #0]
 8009664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009668:	81a3      	strh	r3, [r4, #12]
 800966a:	f04f 30ff 	mov.w	r0, #4294967295
 800966e:	e033      	b.n	80096d8 <__swsetup_r+0x98>
 8009670:	0758      	lsls	r0, r3, #29
 8009672:	d512      	bpl.n	800969a <__swsetup_r+0x5a>
 8009674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009676:	b141      	cbz	r1, 800968a <__swsetup_r+0x4a>
 8009678:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800967c:	4299      	cmp	r1, r3
 800967e:	d002      	beq.n	8009686 <__swsetup_r+0x46>
 8009680:	4628      	mov	r0, r5
 8009682:	f7fe ff25 	bl	80084d0 <_free_r>
 8009686:	2300      	movs	r3, #0
 8009688:	6363      	str	r3, [r4, #52]	@ 0x34
 800968a:	89a3      	ldrh	r3, [r4, #12]
 800968c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009690:	81a3      	strh	r3, [r4, #12]
 8009692:	2300      	movs	r3, #0
 8009694:	6063      	str	r3, [r4, #4]
 8009696:	6923      	ldr	r3, [r4, #16]
 8009698:	6023      	str	r3, [r4, #0]
 800969a:	89a3      	ldrh	r3, [r4, #12]
 800969c:	f043 0308 	orr.w	r3, r3, #8
 80096a0:	81a3      	strh	r3, [r4, #12]
 80096a2:	6923      	ldr	r3, [r4, #16]
 80096a4:	b94b      	cbnz	r3, 80096ba <__swsetup_r+0x7a>
 80096a6:	89a3      	ldrh	r3, [r4, #12]
 80096a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80096ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096b0:	d003      	beq.n	80096ba <__swsetup_r+0x7a>
 80096b2:	4621      	mov	r1, r4
 80096b4:	4628      	mov	r0, r5
 80096b6:	f000 f88b 	bl	80097d0 <__smakebuf_r>
 80096ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096be:	f013 0201 	ands.w	r2, r3, #1
 80096c2:	d00a      	beq.n	80096da <__swsetup_r+0x9a>
 80096c4:	2200      	movs	r2, #0
 80096c6:	60a2      	str	r2, [r4, #8]
 80096c8:	6962      	ldr	r2, [r4, #20]
 80096ca:	4252      	negs	r2, r2
 80096cc:	61a2      	str	r2, [r4, #24]
 80096ce:	6922      	ldr	r2, [r4, #16]
 80096d0:	b942      	cbnz	r2, 80096e4 <__swsetup_r+0xa4>
 80096d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80096d6:	d1c5      	bne.n	8009664 <__swsetup_r+0x24>
 80096d8:	bd38      	pop	{r3, r4, r5, pc}
 80096da:	0799      	lsls	r1, r3, #30
 80096dc:	bf58      	it	pl
 80096de:	6962      	ldrpl	r2, [r4, #20]
 80096e0:	60a2      	str	r2, [r4, #8]
 80096e2:	e7f4      	b.n	80096ce <__swsetup_r+0x8e>
 80096e4:	2000      	movs	r0, #0
 80096e6:	e7f7      	b.n	80096d8 <__swsetup_r+0x98>
 80096e8:	2000009c 	.word	0x2000009c

080096ec <_raise_r>:
 80096ec:	291f      	cmp	r1, #31
 80096ee:	b538      	push	{r3, r4, r5, lr}
 80096f0:	4605      	mov	r5, r0
 80096f2:	460c      	mov	r4, r1
 80096f4:	d904      	bls.n	8009700 <_raise_r+0x14>
 80096f6:	2316      	movs	r3, #22
 80096f8:	6003      	str	r3, [r0, #0]
 80096fa:	f04f 30ff 	mov.w	r0, #4294967295
 80096fe:	bd38      	pop	{r3, r4, r5, pc}
 8009700:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009702:	b112      	cbz	r2, 800970a <_raise_r+0x1e>
 8009704:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009708:	b94b      	cbnz	r3, 800971e <_raise_r+0x32>
 800970a:	4628      	mov	r0, r5
 800970c:	f000 f830 	bl	8009770 <_getpid_r>
 8009710:	4622      	mov	r2, r4
 8009712:	4601      	mov	r1, r0
 8009714:	4628      	mov	r0, r5
 8009716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800971a:	f000 b817 	b.w	800974c <_kill_r>
 800971e:	2b01      	cmp	r3, #1
 8009720:	d00a      	beq.n	8009738 <_raise_r+0x4c>
 8009722:	1c59      	adds	r1, r3, #1
 8009724:	d103      	bne.n	800972e <_raise_r+0x42>
 8009726:	2316      	movs	r3, #22
 8009728:	6003      	str	r3, [r0, #0]
 800972a:	2001      	movs	r0, #1
 800972c:	e7e7      	b.n	80096fe <_raise_r+0x12>
 800972e:	2100      	movs	r1, #0
 8009730:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009734:	4620      	mov	r0, r4
 8009736:	4798      	blx	r3
 8009738:	2000      	movs	r0, #0
 800973a:	e7e0      	b.n	80096fe <_raise_r+0x12>

0800973c <raise>:
 800973c:	4b02      	ldr	r3, [pc, #8]	@ (8009748 <raise+0xc>)
 800973e:	4601      	mov	r1, r0
 8009740:	6818      	ldr	r0, [r3, #0]
 8009742:	f7ff bfd3 	b.w	80096ec <_raise_r>
 8009746:	bf00      	nop
 8009748:	2000009c 	.word	0x2000009c

0800974c <_kill_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4d07      	ldr	r5, [pc, #28]	@ (800976c <_kill_r+0x20>)
 8009750:	2300      	movs	r3, #0
 8009752:	4604      	mov	r4, r0
 8009754:	4608      	mov	r0, r1
 8009756:	4611      	mov	r1, r2
 8009758:	602b      	str	r3, [r5, #0]
 800975a:	f7f8 fc45 	bl	8001fe8 <_kill>
 800975e:	1c43      	adds	r3, r0, #1
 8009760:	d102      	bne.n	8009768 <_kill_r+0x1c>
 8009762:	682b      	ldr	r3, [r5, #0]
 8009764:	b103      	cbz	r3, 8009768 <_kill_r+0x1c>
 8009766:	6023      	str	r3, [r4, #0]
 8009768:	bd38      	pop	{r3, r4, r5, pc}
 800976a:	bf00      	nop
 800976c:	20000740 	.word	0x20000740

08009770 <_getpid_r>:
 8009770:	f7f8 bc32 	b.w	8001fd8 <_getpid>

08009774 <_malloc_usable_size_r>:
 8009774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009778:	1f18      	subs	r0, r3, #4
 800977a:	2b00      	cmp	r3, #0
 800977c:	bfbc      	itt	lt
 800977e:	580b      	ldrlt	r3, [r1, r0]
 8009780:	18c0      	addlt	r0, r0, r3
 8009782:	4770      	bx	lr

08009784 <__swhatbuf_r>:
 8009784:	b570      	push	{r4, r5, r6, lr}
 8009786:	460c      	mov	r4, r1
 8009788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800978c:	2900      	cmp	r1, #0
 800978e:	b096      	sub	sp, #88	@ 0x58
 8009790:	4615      	mov	r5, r2
 8009792:	461e      	mov	r6, r3
 8009794:	da0d      	bge.n	80097b2 <__swhatbuf_r+0x2e>
 8009796:	89a3      	ldrh	r3, [r4, #12]
 8009798:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800979c:	f04f 0100 	mov.w	r1, #0
 80097a0:	bf14      	ite	ne
 80097a2:	2340      	movne	r3, #64	@ 0x40
 80097a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80097a8:	2000      	movs	r0, #0
 80097aa:	6031      	str	r1, [r6, #0]
 80097ac:	602b      	str	r3, [r5, #0]
 80097ae:	b016      	add	sp, #88	@ 0x58
 80097b0:	bd70      	pop	{r4, r5, r6, pc}
 80097b2:	466a      	mov	r2, sp
 80097b4:	f000 f848 	bl	8009848 <_fstat_r>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	dbec      	blt.n	8009796 <__swhatbuf_r+0x12>
 80097bc:	9901      	ldr	r1, [sp, #4]
 80097be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80097c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80097c6:	4259      	negs	r1, r3
 80097c8:	4159      	adcs	r1, r3
 80097ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097ce:	e7eb      	b.n	80097a8 <__swhatbuf_r+0x24>

080097d0 <__smakebuf_r>:
 80097d0:	898b      	ldrh	r3, [r1, #12]
 80097d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097d4:	079d      	lsls	r5, r3, #30
 80097d6:	4606      	mov	r6, r0
 80097d8:	460c      	mov	r4, r1
 80097da:	d507      	bpl.n	80097ec <__smakebuf_r+0x1c>
 80097dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	6123      	str	r3, [r4, #16]
 80097e4:	2301      	movs	r3, #1
 80097e6:	6163      	str	r3, [r4, #20]
 80097e8:	b003      	add	sp, #12
 80097ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097ec:	ab01      	add	r3, sp, #4
 80097ee:	466a      	mov	r2, sp
 80097f0:	f7ff ffc8 	bl	8009784 <__swhatbuf_r>
 80097f4:	9f00      	ldr	r7, [sp, #0]
 80097f6:	4605      	mov	r5, r0
 80097f8:	4639      	mov	r1, r7
 80097fa:	4630      	mov	r0, r6
 80097fc:	f7fe fedc 	bl	80085b8 <_malloc_r>
 8009800:	b948      	cbnz	r0, 8009816 <__smakebuf_r+0x46>
 8009802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009806:	059a      	lsls	r2, r3, #22
 8009808:	d4ee      	bmi.n	80097e8 <__smakebuf_r+0x18>
 800980a:	f023 0303 	bic.w	r3, r3, #3
 800980e:	f043 0302 	orr.w	r3, r3, #2
 8009812:	81a3      	strh	r3, [r4, #12]
 8009814:	e7e2      	b.n	80097dc <__smakebuf_r+0xc>
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	6020      	str	r0, [r4, #0]
 800981a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800981e:	81a3      	strh	r3, [r4, #12]
 8009820:	9b01      	ldr	r3, [sp, #4]
 8009822:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009826:	b15b      	cbz	r3, 8009840 <__smakebuf_r+0x70>
 8009828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800982c:	4630      	mov	r0, r6
 800982e:	f000 f81d 	bl	800986c <_isatty_r>
 8009832:	b128      	cbz	r0, 8009840 <__smakebuf_r+0x70>
 8009834:	89a3      	ldrh	r3, [r4, #12]
 8009836:	f023 0303 	bic.w	r3, r3, #3
 800983a:	f043 0301 	orr.w	r3, r3, #1
 800983e:	81a3      	strh	r3, [r4, #12]
 8009840:	89a3      	ldrh	r3, [r4, #12]
 8009842:	431d      	orrs	r5, r3
 8009844:	81a5      	strh	r5, [r4, #12]
 8009846:	e7cf      	b.n	80097e8 <__smakebuf_r+0x18>

08009848 <_fstat_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	4d07      	ldr	r5, [pc, #28]	@ (8009868 <_fstat_r+0x20>)
 800984c:	2300      	movs	r3, #0
 800984e:	4604      	mov	r4, r0
 8009850:	4608      	mov	r0, r1
 8009852:	4611      	mov	r1, r2
 8009854:	602b      	str	r3, [r5, #0]
 8009856:	f7f8 fc27 	bl	80020a8 <_fstat>
 800985a:	1c43      	adds	r3, r0, #1
 800985c:	d102      	bne.n	8009864 <_fstat_r+0x1c>
 800985e:	682b      	ldr	r3, [r5, #0]
 8009860:	b103      	cbz	r3, 8009864 <_fstat_r+0x1c>
 8009862:	6023      	str	r3, [r4, #0]
 8009864:	bd38      	pop	{r3, r4, r5, pc}
 8009866:	bf00      	nop
 8009868:	20000740 	.word	0x20000740

0800986c <_isatty_r>:
 800986c:	b538      	push	{r3, r4, r5, lr}
 800986e:	4d06      	ldr	r5, [pc, #24]	@ (8009888 <_isatty_r+0x1c>)
 8009870:	2300      	movs	r3, #0
 8009872:	4604      	mov	r4, r0
 8009874:	4608      	mov	r0, r1
 8009876:	602b      	str	r3, [r5, #0]
 8009878:	f7f8 fc26 	bl	80020c8 <_isatty>
 800987c:	1c43      	adds	r3, r0, #1
 800987e:	d102      	bne.n	8009886 <_isatty_r+0x1a>
 8009880:	682b      	ldr	r3, [r5, #0]
 8009882:	b103      	cbz	r3, 8009886 <_isatty_r+0x1a>
 8009884:	6023      	str	r3, [r4, #0]
 8009886:	bd38      	pop	{r3, r4, r5, pc}
 8009888:	20000740 	.word	0x20000740

0800988c <_init>:
 800988c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988e:	bf00      	nop
 8009890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009892:	bc08      	pop	{r3}
 8009894:	469e      	mov	lr, r3
 8009896:	4770      	bx	lr

08009898 <_fini>:
 8009898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989a:	bf00      	nop
 800989c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800989e:	bc08      	pop	{r3}
 80098a0:	469e      	mov	lr, r3
 80098a2:	4770      	bx	lr
